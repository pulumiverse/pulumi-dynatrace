// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/calculatedServiceMetric:CalculatedServiceMetric")]
    public partial class CalculatedServiceMetric : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The set of conditions for the metric usage. **All** the specified conditions must be fulfilled to use the metric
        /// </summary>
        [Output("conditions")]
        public Output<ImmutableArray<Outputs.CalculatedServiceMetricCondition>> Conditions { get; private set; } = null!;

        /// <summary>
        /// The displayed description of the metric
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Parameters of a definition of a calculated service metric
        /// </summary>
        [Output("dimensionDefinition")]
        public Output<Outputs.CalculatedServiceMetricDimensionDefinition?> DimensionDefinition { get; private set; } = null!;

        /// <summary>
        /// The metric is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Restricts the metric usage to the specified service. This field is mutually exclusive with the `management_zones` field
        /// </summary>
        [Output("entityId")]
        public Output<string?> EntityId { get; private set; } = null!;

        /// <summary>
        /// Metric should (true) or not (false) ignore muted requests.
        /// </summary>
        [Output("ignoreMutedRequests")]
        public Output<bool?> IgnoreMutedRequests { get; private set; } = null!;

        /// <summary>
        /// Restricts the metric usage to specified management zones. This field is mutually exclusive with the `entity_id` field
        /// </summary>
        [Output("managementZones")]
        public Output<ImmutableArray<string>> ManagementZones { get; private set; } = null!;

        /// <summary>
        /// The definition of a calculated service metric
        /// </summary>
        [Output("metricDefinition")]
        public Output<Outputs.CalculatedServiceMetricMetricDefinition?> MetricDefinition { get; private set; } = null!;

        /// <summary>
        /// The key of the calculated service metric
        /// </summary>
        [Output("metricKey")]
        public Output<string> MetricKey { get; private set; } = null!;

        /// <summary>
        /// The displayed name of the metric
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The unit of the metric. Possible values are `BIT`, `BIT_PER_HOUR`, `BIT_PER_MINUTE`, `BIT_PER_SECOND`, `BYTE`,
        /// `BYTE_PER_HOUR`, `BYTE_PER_MINUTE`, `BYTE_PER_SECOND`, `CORES`, `COUNT`, `DAY`, `DECIBEL_MILLI_WATT`, `GIBI_BYTE`,
        /// `GIGA`, `GIGA_BYTE`, `HOUR`, `KIBI_BYTE`, `KIBI_BYTE_PER_HOUR`, `KIBI_BYTE_PER_MINUTE`, `KIBI_BYTE_PER_SECOND`, `KILO`,
        /// `KILO_BYTE`, `KILO_BYTE_PER_HOUR`, `KILO_BYTE_PER_MINUTE`, `KILO_BYTE_PER_SECOND`, `MEBI_BYTE`, `MEBI_BYTE_PER_HOUR`,
        /// `MEBI_BYTE_PER_MINUTE`, `MEBI_BYTE_PER_SECOND`, `MEGA`, `MEGA_BYTE`, `MEGA_BYTE_PER_HOUR`, `MEGA_BYTE_PER_MINUTE`,
        /// `MEGA_BYTE_PER_SECOND`, `MICRO_SECOND`, `MILLI_CORES`, `MILLI_SECOND`, `MILLI_SECOND_PER_MINUTE`, `MINUTE`, `MONTH`,
        /// `MSU`, `NANO_SECOND`, `NANO_SECOND_PER_MINUTE`, `NOT_APPLICABLE`, `PERCENT`, `PER_HOUR`, `PER_MINUTE`, `PER_SECOND`,
        /// `PIXEL`, `PROMILLE`, `RATIO`, `SECOND`, `STATE`, `UNSPECIFIED`, `WEEK` and `YEAR`
        /// </summary>
        [Output("unit")]
        public Output<string> Unit { get; private set; } = null!;

        /// <summary>
        /// The display name of the metric's unit. Only applicable when the **unit** parameter is set to `UNSPECIFIED`
        /// </summary>
        [Output("unitDisplayName")]
        public Output<string?> UnitDisplayName { get; private set; } = null!;

        /// <summary>
        /// allows for configuring properties that are not explicitly supported by the current version of this provider
        /// </summary>
        [Output("unknowns")]
        public Output<string?> Unknowns { get; private set; } = null!;


        /// <summary>
        /// Create a CalculatedServiceMetric resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CalculatedServiceMetric(string name, CalculatedServiceMetricArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/calculatedServiceMetric:CalculatedServiceMetric", name, args ?? new CalculatedServiceMetricArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CalculatedServiceMetric(string name, Input<string> id, CalculatedServiceMetricState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/calculatedServiceMetric:CalculatedServiceMetric", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CalculatedServiceMetric resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CalculatedServiceMetric Get(string name, Input<string> id, CalculatedServiceMetricState? state = null, CustomResourceOptions? options = null)
        {
            return new CalculatedServiceMetric(name, id, state, options);
        }
    }

    public sealed class CalculatedServiceMetricArgs : global::Pulumi.ResourceArgs
    {
        [Input("conditions")]
        private InputList<Inputs.CalculatedServiceMetricConditionArgs>? _conditions;

        /// <summary>
        /// The set of conditions for the metric usage. **All** the specified conditions must be fulfilled to use the metric
        /// </summary>
        public InputList<Inputs.CalculatedServiceMetricConditionArgs> Conditions
        {
            get => _conditions ?? (_conditions = new InputList<Inputs.CalculatedServiceMetricConditionArgs>());
            set => _conditions = value;
        }

        /// <summary>
        /// The displayed description of the metric
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Parameters of a definition of a calculated service metric
        /// </summary>
        [Input("dimensionDefinition")]
        public Input<Inputs.CalculatedServiceMetricDimensionDefinitionArgs>? DimensionDefinition { get; set; }

        /// <summary>
        /// The metric is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Restricts the metric usage to the specified service. This field is mutually exclusive with the `management_zones` field
        /// </summary>
        [Input("entityId")]
        public Input<string>? EntityId { get; set; }

        /// <summary>
        /// Metric should (true) or not (false) ignore muted requests.
        /// </summary>
        [Input("ignoreMutedRequests")]
        public Input<bool>? IgnoreMutedRequests { get; set; }

        [Input("managementZones")]
        private InputList<string>? _managementZones;

        /// <summary>
        /// Restricts the metric usage to specified management zones. This field is mutually exclusive with the `entity_id` field
        /// </summary>
        public InputList<string> ManagementZones
        {
            get => _managementZones ?? (_managementZones = new InputList<string>());
            set => _managementZones = value;
        }

        /// <summary>
        /// The definition of a calculated service metric
        /// </summary>
        [Input("metricDefinition")]
        public Input<Inputs.CalculatedServiceMetricMetricDefinitionArgs>? MetricDefinition { get; set; }

        /// <summary>
        /// The key of the calculated service metric
        /// </summary>
        [Input("metricKey", required: true)]
        public Input<string> MetricKey { get; set; } = null!;

        /// <summary>
        /// The displayed name of the metric
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The unit of the metric. Possible values are `BIT`, `BIT_PER_HOUR`, `BIT_PER_MINUTE`, `BIT_PER_SECOND`, `BYTE`,
        /// `BYTE_PER_HOUR`, `BYTE_PER_MINUTE`, `BYTE_PER_SECOND`, `CORES`, `COUNT`, `DAY`, `DECIBEL_MILLI_WATT`, `GIBI_BYTE`,
        /// `GIGA`, `GIGA_BYTE`, `HOUR`, `KIBI_BYTE`, `KIBI_BYTE_PER_HOUR`, `KIBI_BYTE_PER_MINUTE`, `KIBI_BYTE_PER_SECOND`, `KILO`,
        /// `KILO_BYTE`, `KILO_BYTE_PER_HOUR`, `KILO_BYTE_PER_MINUTE`, `KILO_BYTE_PER_SECOND`, `MEBI_BYTE`, `MEBI_BYTE_PER_HOUR`,
        /// `MEBI_BYTE_PER_MINUTE`, `MEBI_BYTE_PER_SECOND`, `MEGA`, `MEGA_BYTE`, `MEGA_BYTE_PER_HOUR`, `MEGA_BYTE_PER_MINUTE`,
        /// `MEGA_BYTE_PER_SECOND`, `MICRO_SECOND`, `MILLI_CORES`, `MILLI_SECOND`, `MILLI_SECOND_PER_MINUTE`, `MINUTE`, `MONTH`,
        /// `MSU`, `NANO_SECOND`, `NANO_SECOND_PER_MINUTE`, `NOT_APPLICABLE`, `PERCENT`, `PER_HOUR`, `PER_MINUTE`, `PER_SECOND`,
        /// `PIXEL`, `PROMILLE`, `RATIO`, `SECOND`, `STATE`, `UNSPECIFIED`, `WEEK` and `YEAR`
        /// </summary>
        [Input("unit", required: true)]
        public Input<string> Unit { get; set; } = null!;

        /// <summary>
        /// The display name of the metric's unit. Only applicable when the **unit** parameter is set to `UNSPECIFIED`
        /// </summary>
        [Input("unitDisplayName")]
        public Input<string>? UnitDisplayName { get; set; }

        /// <summary>
        /// allows for configuring properties that are not explicitly supported by the current version of this provider
        /// </summary>
        [Input("unknowns")]
        public Input<string>? Unknowns { get; set; }

        public CalculatedServiceMetricArgs()
        {
        }
        public static new CalculatedServiceMetricArgs Empty => new CalculatedServiceMetricArgs();
    }

    public sealed class CalculatedServiceMetricState : global::Pulumi.ResourceArgs
    {
        [Input("conditions")]
        private InputList<Inputs.CalculatedServiceMetricConditionGetArgs>? _conditions;

        /// <summary>
        /// The set of conditions for the metric usage. **All** the specified conditions must be fulfilled to use the metric
        /// </summary>
        public InputList<Inputs.CalculatedServiceMetricConditionGetArgs> Conditions
        {
            get => _conditions ?? (_conditions = new InputList<Inputs.CalculatedServiceMetricConditionGetArgs>());
            set => _conditions = value;
        }

        /// <summary>
        /// The displayed description of the metric
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Parameters of a definition of a calculated service metric
        /// </summary>
        [Input("dimensionDefinition")]
        public Input<Inputs.CalculatedServiceMetricDimensionDefinitionGetArgs>? DimensionDefinition { get; set; }

        /// <summary>
        /// The metric is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Restricts the metric usage to the specified service. This field is mutually exclusive with the `management_zones` field
        /// </summary>
        [Input("entityId")]
        public Input<string>? EntityId { get; set; }

        /// <summary>
        /// Metric should (true) or not (false) ignore muted requests.
        /// </summary>
        [Input("ignoreMutedRequests")]
        public Input<bool>? IgnoreMutedRequests { get; set; }

        [Input("managementZones")]
        private InputList<string>? _managementZones;

        /// <summary>
        /// Restricts the metric usage to specified management zones. This field is mutually exclusive with the `entity_id` field
        /// </summary>
        public InputList<string> ManagementZones
        {
            get => _managementZones ?? (_managementZones = new InputList<string>());
            set => _managementZones = value;
        }

        /// <summary>
        /// The definition of a calculated service metric
        /// </summary>
        [Input("metricDefinition")]
        public Input<Inputs.CalculatedServiceMetricMetricDefinitionGetArgs>? MetricDefinition { get; set; }

        /// <summary>
        /// The key of the calculated service metric
        /// </summary>
        [Input("metricKey")]
        public Input<string>? MetricKey { get; set; }

        /// <summary>
        /// The displayed name of the metric
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The unit of the metric. Possible values are `BIT`, `BIT_PER_HOUR`, `BIT_PER_MINUTE`, `BIT_PER_SECOND`, `BYTE`,
        /// `BYTE_PER_HOUR`, `BYTE_PER_MINUTE`, `BYTE_PER_SECOND`, `CORES`, `COUNT`, `DAY`, `DECIBEL_MILLI_WATT`, `GIBI_BYTE`,
        /// `GIGA`, `GIGA_BYTE`, `HOUR`, `KIBI_BYTE`, `KIBI_BYTE_PER_HOUR`, `KIBI_BYTE_PER_MINUTE`, `KIBI_BYTE_PER_SECOND`, `KILO`,
        /// `KILO_BYTE`, `KILO_BYTE_PER_HOUR`, `KILO_BYTE_PER_MINUTE`, `KILO_BYTE_PER_SECOND`, `MEBI_BYTE`, `MEBI_BYTE_PER_HOUR`,
        /// `MEBI_BYTE_PER_MINUTE`, `MEBI_BYTE_PER_SECOND`, `MEGA`, `MEGA_BYTE`, `MEGA_BYTE_PER_HOUR`, `MEGA_BYTE_PER_MINUTE`,
        /// `MEGA_BYTE_PER_SECOND`, `MICRO_SECOND`, `MILLI_CORES`, `MILLI_SECOND`, `MILLI_SECOND_PER_MINUTE`, `MINUTE`, `MONTH`,
        /// `MSU`, `NANO_SECOND`, `NANO_SECOND_PER_MINUTE`, `NOT_APPLICABLE`, `PERCENT`, `PER_HOUR`, `PER_MINUTE`, `PER_SECOND`,
        /// `PIXEL`, `PROMILLE`, `RATIO`, `SECOND`, `STATE`, `UNSPECIFIED`, `WEEK` and `YEAR`
        /// </summary>
        [Input("unit")]
        public Input<string>? Unit { get; set; }

        /// <summary>
        /// The display name of the metric's unit. Only applicable when the **unit** parameter is set to `UNSPECIFIED`
        /// </summary>
        [Input("unitDisplayName")]
        public Input<string>? UnitDisplayName { get; set; }

        /// <summary>
        /// allows for configuring properties that are not explicitly supported by the current version of this provider
        /// </summary>
        [Input("unknowns")]
        public Input<string>? Unknowns { get; set; }

        public CalculatedServiceMetricState()
        {
        }
        public static new CalculatedServiceMetricState Empty => new CalculatedServiceMetricState();
    }
}
