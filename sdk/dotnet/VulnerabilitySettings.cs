// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/vulnerabilitySettings:VulnerabilitySettings")]
    public partial class VulnerabilitySettings : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enable Code-level Vulnerability Analytics
        /// </summary>
        [Output("enableCodeLevelVulnerabilityDetection")]
        public Output<bool> EnableCodeLevelVulnerabilityDetection { get; private set; } = null!;

        /// <summary>
        /// When new monitoring rules are enabled, classic rules are disabled. To re-enable classic rules, disable the new monitoring rules.
        /// </summary>
        [Output("enableResourceAttributeRules")]
        public Output<bool?> EnableResourceAttributeRules { get; private set; } = null!;

        /// <summary>
        /// Enable Third-party Vulnerability Analytics
        /// </summary>
        [Output("enableRuntimeVulnerabilityDetection")]
        public Output<bool> EnableRuntimeVulnerabilityDetection { get; private set; } = null!;

        /// <summary>
        /// (v1.290) Global .NET code-level vulnerability detection control defines the default for all process groups. You can use monitoring rules to override the default for certain processes. Possible Values: `MONITORING_OFF`, `MONITORING_ON`
        /// </summary>
        [Output("globalMonitoringModeDotNet")]
        public Output<string?> GlobalMonitoringModeDotNet { get; private set; } = null!;

        /// <summary>
        /// Global Go code-level vulnerability detection control defines the default for all process groups. You can use monitoring rules to override the default for certain processes.
        /// </summary>
        [Output("globalMonitoringModeGo")]
        public Output<string?> GlobalMonitoringModeGo { get; private set; } = null!;

        /// <summary>
        /// Global Java code-level vulnerability detection control defines the default for all process groups. You can use monitoring rules to override the default for certain processes. Possible Values: `MONITORING_OFF`, `MONITORING_ON`
        /// </summary>
        [Output("globalMonitoringModeJava")]
        public Output<string> GlobalMonitoringModeJava { get; private set; } = null!;

        /// <summary>
        /// Global third-party vulnerability detection control defines the default for all processes. Possible Values: `MONITORING_OFF`, `MONITORING_ON`
        /// </summary>
        [Output("globalMonitoringModeTpv")]
        public Output<string?> GlobalMonitoringModeTpv { get; private set; } = null!;

        /// <summary>
        /// Vulnerability Analytics can be enabled/disabled per supported technology.
        /// </summary>
        [Output("technologies")]
        public Output<Outputs.VulnerabilitySettingsTechnologies> Technologies { get; private set; } = null!;


        /// <summary>
        /// Create a VulnerabilitySettings resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VulnerabilitySettings(string name, VulnerabilitySettingsArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/vulnerabilitySettings:VulnerabilitySettings", name, args ?? new VulnerabilitySettingsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VulnerabilitySettings(string name, Input<string> id, VulnerabilitySettingsState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/vulnerabilitySettings:VulnerabilitySettings", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VulnerabilitySettings resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VulnerabilitySettings Get(string name, Input<string> id, VulnerabilitySettingsState? state = null, CustomResourceOptions? options = null)
        {
            return new VulnerabilitySettings(name, id, state, options);
        }
    }

    public sealed class VulnerabilitySettingsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable Code-level Vulnerability Analytics
        /// </summary>
        [Input("enableCodeLevelVulnerabilityDetection", required: true)]
        public Input<bool> EnableCodeLevelVulnerabilityDetection { get; set; } = null!;

        /// <summary>
        /// When new monitoring rules are enabled, classic rules are disabled. To re-enable classic rules, disable the new monitoring rules.
        /// </summary>
        [Input("enableResourceAttributeRules")]
        public Input<bool>? EnableResourceAttributeRules { get; set; }

        /// <summary>
        /// Enable Third-party Vulnerability Analytics
        /// </summary>
        [Input("enableRuntimeVulnerabilityDetection", required: true)]
        public Input<bool> EnableRuntimeVulnerabilityDetection { get; set; } = null!;

        /// <summary>
        /// (v1.290) Global .NET code-level vulnerability detection control defines the default for all process groups. You can use monitoring rules to override the default for certain processes. Possible Values: `MONITORING_OFF`, `MONITORING_ON`
        /// </summary>
        [Input("globalMonitoringModeDotNet")]
        public Input<string>? GlobalMonitoringModeDotNet { get; set; }

        /// <summary>
        /// Global Go code-level vulnerability detection control defines the default for all process groups. You can use monitoring rules to override the default for certain processes.
        /// </summary>
        [Input("globalMonitoringModeGo")]
        public Input<string>? GlobalMonitoringModeGo { get; set; }

        /// <summary>
        /// Global Java code-level vulnerability detection control defines the default for all process groups. You can use monitoring rules to override the default for certain processes. Possible Values: `MONITORING_OFF`, `MONITORING_ON`
        /// </summary>
        [Input("globalMonitoringModeJava", required: true)]
        public Input<string> GlobalMonitoringModeJava { get; set; } = null!;

        /// <summary>
        /// Global third-party vulnerability detection control defines the default for all processes. Possible Values: `MONITORING_OFF`, `MONITORING_ON`
        /// </summary>
        [Input("globalMonitoringModeTpv")]
        public Input<string>? GlobalMonitoringModeTpv { get; set; }

        /// <summary>
        /// Vulnerability Analytics can be enabled/disabled per supported technology.
        /// </summary>
        [Input("technologies", required: true)]
        public Input<Inputs.VulnerabilitySettingsTechnologiesArgs> Technologies { get; set; } = null!;

        public VulnerabilitySettingsArgs()
        {
        }
        public static new VulnerabilitySettingsArgs Empty => new VulnerabilitySettingsArgs();
    }

    public sealed class VulnerabilitySettingsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable Code-level Vulnerability Analytics
        /// </summary>
        [Input("enableCodeLevelVulnerabilityDetection")]
        public Input<bool>? EnableCodeLevelVulnerabilityDetection { get; set; }

        /// <summary>
        /// When new monitoring rules are enabled, classic rules are disabled. To re-enable classic rules, disable the new monitoring rules.
        /// </summary>
        [Input("enableResourceAttributeRules")]
        public Input<bool>? EnableResourceAttributeRules { get; set; }

        /// <summary>
        /// Enable Third-party Vulnerability Analytics
        /// </summary>
        [Input("enableRuntimeVulnerabilityDetection")]
        public Input<bool>? EnableRuntimeVulnerabilityDetection { get; set; }

        /// <summary>
        /// (v1.290) Global .NET code-level vulnerability detection control defines the default for all process groups. You can use monitoring rules to override the default for certain processes. Possible Values: `MONITORING_OFF`, `MONITORING_ON`
        /// </summary>
        [Input("globalMonitoringModeDotNet")]
        public Input<string>? GlobalMonitoringModeDotNet { get; set; }

        /// <summary>
        /// Global Go code-level vulnerability detection control defines the default for all process groups. You can use monitoring rules to override the default for certain processes.
        /// </summary>
        [Input("globalMonitoringModeGo")]
        public Input<string>? GlobalMonitoringModeGo { get; set; }

        /// <summary>
        /// Global Java code-level vulnerability detection control defines the default for all process groups. You can use monitoring rules to override the default for certain processes. Possible Values: `MONITORING_OFF`, `MONITORING_ON`
        /// </summary>
        [Input("globalMonitoringModeJava")]
        public Input<string>? GlobalMonitoringModeJava { get; set; }

        /// <summary>
        /// Global third-party vulnerability detection control defines the default for all processes. Possible Values: `MONITORING_OFF`, `MONITORING_ON`
        /// </summary>
        [Input("globalMonitoringModeTpv")]
        public Input<string>? GlobalMonitoringModeTpv { get; set; }

        /// <summary>
        /// Vulnerability Analytics can be enabled/disabled per supported technology.
        /// </summary>
        [Input("technologies")]
        public Input<Inputs.VulnerabilitySettingsTechnologiesGetArgs>? Technologies { get; set; }

        public VulnerabilitySettingsState()
        {
        }
        public static new VulnerabilitySettingsState Empty => new VulnerabilitySettingsState();
    }
}
