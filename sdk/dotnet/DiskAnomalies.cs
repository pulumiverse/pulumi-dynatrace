// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/diskAnomalies:DiskAnomalies")]
    public partial class DiskAnomalies : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Narrows the rule usage down to disks, matching the specified criteria
        /// </summary>
        [Output("diskName")]
        public Output<Outputs.DiskAnomaliesDiskName?> DiskName { get; private set; } = null!;

        /// <summary>
        /// Disk event rule enabled/disabled
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// Narrows the rule usage down to disks that run on hosts that themselves run on the specified host group
        /// </summary>
        [Output("hostGroupId")]
        public Output<string?> HostGroupId { get; private set; } = null!;

        /// <summary>
        /// The metric to monitor. Possible values are: `LOW_DISK_SPACE`, `LOW_INODES`, `READ_TIME_EXCEEDING` and `WRITE_TIME_EXCEEDING`
        /// </summary>
        [Output("metric")]
        public Output<string> Metric { get; private set; } = null!;

        /// <summary>
        /// The name of the disk event rule
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The number of samples to evaluate
        /// </summary>
        [Output("samples")]
        public Output<int> Samples { get; private set; } = null!;

        /// <summary>
        /// Narrows the rule usage down to the hosts matching the specified tags
        /// </summary>
        [Output("tags")]
        public Output<Outputs.DiskAnomaliesTags?> Tags { get; private set; } = null!;

        /// <summary>
        /// The threshold to trigger disk event.   * A percentage for `LowDiskSpace` or `LowInodes` metrics.   * In milliseconds for `ReadTimeExceeding` or `WriteTimeExceeding` metrics
        /// </summary>
        [Output("threshold")]
        public Output<double> Threshold { get; private set; } = null!;

        /// <summary>
        /// The number of samples that must violate the threshold to trigger an event. Must not exceed the number of evaluated samples
        /// </summary>
        [Output("violatingSamples")]
        public Output<int> ViolatingSamples { get; private set; } = null!;


        /// <summary>
        /// Create a DiskAnomalies resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DiskAnomalies(string name, DiskAnomaliesArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/diskAnomalies:DiskAnomalies", name, args ?? new DiskAnomaliesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DiskAnomalies(string name, Input<string> id, DiskAnomaliesState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/diskAnomalies:DiskAnomalies", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DiskAnomalies resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DiskAnomalies Get(string name, Input<string> id, DiskAnomaliesState? state = null, CustomResourceOptions? options = null)
        {
            return new DiskAnomalies(name, id, state, options);
        }
    }

    public sealed class DiskAnomaliesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Narrows the rule usage down to disks, matching the specified criteria
        /// </summary>
        [Input("diskName")]
        public Input<Inputs.DiskAnomaliesDiskNameArgs>? DiskName { get; set; }

        /// <summary>
        /// Disk event rule enabled/disabled
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// Narrows the rule usage down to disks that run on hosts that themselves run on the specified host group
        /// </summary>
        [Input("hostGroupId")]
        public Input<string>? HostGroupId { get; set; }

        /// <summary>
        /// The metric to monitor. Possible values are: `LOW_DISK_SPACE`, `LOW_INODES`, `READ_TIME_EXCEEDING` and `WRITE_TIME_EXCEEDING`
        /// </summary>
        [Input("metric", required: true)]
        public Input<string> Metric { get; set; } = null!;

        /// <summary>
        /// The name of the disk event rule
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The number of samples to evaluate
        /// </summary>
        [Input("samples", required: true)]
        public Input<int> Samples { get; set; } = null!;

        /// <summary>
        /// Narrows the rule usage down to the hosts matching the specified tags
        /// </summary>
        [Input("tags")]
        public Input<Inputs.DiskAnomaliesTagsArgs>? Tags { get; set; }

        /// <summary>
        /// The threshold to trigger disk event.   * A percentage for `LowDiskSpace` or `LowInodes` metrics.   * In milliseconds for `ReadTimeExceeding` or `WriteTimeExceeding` metrics
        /// </summary>
        [Input("threshold", required: true)]
        public Input<double> Threshold { get; set; } = null!;

        /// <summary>
        /// The number of samples that must violate the threshold to trigger an event. Must not exceed the number of evaluated samples
        /// </summary>
        [Input("violatingSamples", required: true)]
        public Input<int> ViolatingSamples { get; set; } = null!;

        public DiskAnomaliesArgs()
        {
        }
        public static new DiskAnomaliesArgs Empty => new DiskAnomaliesArgs();
    }

    public sealed class DiskAnomaliesState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Narrows the rule usage down to disks, matching the specified criteria
        /// </summary>
        [Input("diskName")]
        public Input<Inputs.DiskAnomaliesDiskNameGetArgs>? DiskName { get; set; }

        /// <summary>
        /// Disk event rule enabled/disabled
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Narrows the rule usage down to disks that run on hosts that themselves run on the specified host group
        /// </summary>
        [Input("hostGroupId")]
        public Input<string>? HostGroupId { get; set; }

        /// <summary>
        /// The metric to monitor. Possible values are: `LOW_DISK_SPACE`, `LOW_INODES`, `READ_TIME_EXCEEDING` and `WRITE_TIME_EXCEEDING`
        /// </summary>
        [Input("metric")]
        public Input<string>? Metric { get; set; }

        /// <summary>
        /// The name of the disk event rule
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The number of samples to evaluate
        /// </summary>
        [Input("samples")]
        public Input<int>? Samples { get; set; }

        /// <summary>
        /// Narrows the rule usage down to the hosts matching the specified tags
        /// </summary>
        [Input("tags")]
        public Input<Inputs.DiskAnomaliesTagsGetArgs>? Tags { get; set; }

        /// <summary>
        /// The threshold to trigger disk event.   * A percentage for `LowDiskSpace` or `LowInodes` metrics.   * In milliseconds for `ReadTimeExceeding` or `WriteTimeExceeding` metrics
        /// </summary>
        [Input("threshold")]
        public Input<double>? Threshold { get; set; }

        /// <summary>
        /// The number of samples that must violate the threshold to trigger an event. Must not exceed the number of evaluated samples
        /// </summary>
        [Input("violatingSamples")]
        public Input<int>? ViolatingSamples { get; set; }

        public DiskAnomaliesState()
        {
        }
        public static new DiskAnomaliesState Empty => new DiskAnomaliesState();
    }
}
