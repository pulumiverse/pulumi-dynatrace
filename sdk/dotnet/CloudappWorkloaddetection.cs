// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/cloudappWorkloaddetection:CloudappWorkloaddetection")]
    public partial class CloudappWorkloaddetection : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enable this setting to get * Processes of Cloud Foundry application instances merged into process groups by Cloud
        /// Foundry application. * Container resource metrics (Container group instance entities) and [related
        /// screens](https://www.dynatrace.com/support/help/shortlink/container-groups).
        /// </summary>
        [Output("cloudFoundry")]
        public Output<Outputs.CloudappWorkloaddetectionCloudFoundry> CloudFoundry { get; private set; } = null!;

        /// <summary>
        /// Enable this setting for plain Docker and Podman environments to get * Container resource metrics (Container group
        /// instance entities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups). * Docker
        /// support requires OneAgent 1.257+. * Podman support requires OneAgent 1.267+.
        /// </summary>
        [Output("docker")]
        public Output<Outputs.CloudappWorkloaddetectionDocker> Docker { get; private set; } = null!;

        /// <summary>
        /// Enable this setting to get * Insights into your Kubernetes namespaces, workloads and pods (cloud application namespace,
        /// cloud application and cloud application instance and entities). * Container resource metrics (container group instance
        /// entities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups). * Similar workloads
        /// merged into process groups based on defined rules (see below). * Version detection for services that run in Kubernetes
        /// workloads.
        /// </summary>
        [Output("kubernetes")]
        public Output<Outputs.CloudappWorkloaddetectionKubernetes> Kubernetes { get; private set; } = null!;

        /// <summary>
        /// Enable this setting to * Detect containers based on captured cloud-vendor metadata such as e.g. AWS ECS / Fargate, Azure
        /// Container Apps, [and many more](https://dt-url.net/2m02q7b). * Container resource metrics (Container group instance
        /// entities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups).
        /// </summary>
        [Output("serverless")]
        public Output<Outputs.CloudappWorkloaddetectionServerless?> Serverless { get; private set; } = null!;


        /// <summary>
        /// Create a CloudappWorkloaddetection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CloudappWorkloaddetection(string name, CloudappWorkloaddetectionArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/cloudappWorkloaddetection:CloudappWorkloaddetection", name, args ?? new CloudappWorkloaddetectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CloudappWorkloaddetection(string name, Input<string> id, CloudappWorkloaddetectionState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/cloudappWorkloaddetection:CloudappWorkloaddetection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CloudappWorkloaddetection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CloudappWorkloaddetection Get(string name, Input<string> id, CloudappWorkloaddetectionState? state = null, CustomResourceOptions? options = null)
        {
            return new CloudappWorkloaddetection(name, id, state, options);
        }
    }

    public sealed class CloudappWorkloaddetectionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable this setting to get * Processes of Cloud Foundry application instances merged into process groups by Cloud
        /// Foundry application. * Container resource metrics (Container group instance entities) and [related
        /// screens](https://www.dynatrace.com/support/help/shortlink/container-groups).
        /// </summary>
        [Input("cloudFoundry", required: true)]
        public Input<Inputs.CloudappWorkloaddetectionCloudFoundryArgs> CloudFoundry { get; set; } = null!;

        /// <summary>
        /// Enable this setting for plain Docker and Podman environments to get * Container resource metrics (Container group
        /// instance entities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups). * Docker
        /// support requires OneAgent 1.257+. * Podman support requires OneAgent 1.267+.
        /// </summary>
        [Input("docker", required: true)]
        public Input<Inputs.CloudappWorkloaddetectionDockerArgs> Docker { get; set; } = null!;

        /// <summary>
        /// Enable this setting to get * Insights into your Kubernetes namespaces, workloads and pods (cloud application namespace,
        /// cloud application and cloud application instance and entities). * Container resource metrics (container group instance
        /// entities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups). * Similar workloads
        /// merged into process groups based on defined rules (see below). * Version detection for services that run in Kubernetes
        /// workloads.
        /// </summary>
        [Input("kubernetes", required: true)]
        public Input<Inputs.CloudappWorkloaddetectionKubernetesArgs> Kubernetes { get; set; } = null!;

        /// <summary>
        /// Enable this setting to * Detect containers based on captured cloud-vendor metadata such as e.g. AWS ECS / Fargate, Azure
        /// Container Apps, [and many more](https://dt-url.net/2m02q7b). * Container resource metrics (Container group instance
        /// entities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups).
        /// </summary>
        [Input("serverless")]
        public Input<Inputs.CloudappWorkloaddetectionServerlessArgs>? Serverless { get; set; }

        public CloudappWorkloaddetectionArgs()
        {
        }
        public static new CloudappWorkloaddetectionArgs Empty => new CloudappWorkloaddetectionArgs();
    }

    public sealed class CloudappWorkloaddetectionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable this setting to get * Processes of Cloud Foundry application instances merged into process groups by Cloud
        /// Foundry application. * Container resource metrics (Container group instance entities) and [related
        /// screens](https://www.dynatrace.com/support/help/shortlink/container-groups).
        /// </summary>
        [Input("cloudFoundry")]
        public Input<Inputs.CloudappWorkloaddetectionCloudFoundryGetArgs>? CloudFoundry { get; set; }

        /// <summary>
        /// Enable this setting for plain Docker and Podman environments to get * Container resource metrics (Container group
        /// instance entities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups). * Docker
        /// support requires OneAgent 1.257+. * Podman support requires OneAgent 1.267+.
        /// </summary>
        [Input("docker")]
        public Input<Inputs.CloudappWorkloaddetectionDockerGetArgs>? Docker { get; set; }

        /// <summary>
        /// Enable this setting to get * Insights into your Kubernetes namespaces, workloads and pods (cloud application namespace,
        /// cloud application and cloud application instance and entities). * Container resource metrics (container group instance
        /// entities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups). * Similar workloads
        /// merged into process groups based on defined rules (see below). * Version detection for services that run in Kubernetes
        /// workloads.
        /// </summary>
        [Input("kubernetes")]
        public Input<Inputs.CloudappWorkloaddetectionKubernetesGetArgs>? Kubernetes { get; set; }

        /// <summary>
        /// Enable this setting to * Detect containers based on captured cloud-vendor metadata such as e.g. AWS ECS / Fargate, Azure
        /// Container Apps, [and many more](https://dt-url.net/2m02q7b). * Container resource metrics (Container group instance
        /// entities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups).
        /// </summary>
        [Input("serverless")]
        public Input<Inputs.CloudappWorkloaddetectionServerlessGetArgs>? Serverless { get; set; }

        public CloudappWorkloaddetectionState()
        {
        }
        public static new CloudappWorkloaddetectionState Empty => new CloudappWorkloaddetectionState();
    }
}
