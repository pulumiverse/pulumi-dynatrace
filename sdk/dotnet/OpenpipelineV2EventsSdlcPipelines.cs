// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/openpipelineV2EventsSdlcPipelines:OpenpipelineV2EventsSdlcPipelines")]
    public partial class OpenpipelineV2EventsSdlcPipelines : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Cost allocation stage
        /// </summary>
        [Output("costAllocation")]
        public Output<Outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocation> CostAllocation { get; private set; } = null!;

        /// <summary>
        /// Custom pipeline id
        /// </summary>
        [Output("customId")]
        public Output<string> CustomId { get; private set; } = null!;

        /// <summary>
        /// Data extraction stage
        /// </summary>
        [Output("dataExtraction")]
        public Output<Outputs.OpenpipelineV2EventsSdlcPipelinesDataExtraction> DataExtraction { get; private set; } = null!;

        /// <summary>
        /// Davis event extraction stage
        /// </summary>
        [Output("davis")]
        public Output<Outputs.OpenpipelineV2EventsSdlcPipelinesDavis> Davis { get; private set; } = null!;

        /// <summary>
        /// Display name
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Metrics extraction stage
        /// </summary>
        [Output("metricExtraction")]
        public Output<Outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtraction> MetricExtraction { get; private set; } = null!;

        /// <summary>
        /// Processing stage
        /// </summary>
        [Output("processing")]
        public Output<Outputs.OpenpipelineV2EventsSdlcPipelinesProcessing> Processing { get; private set; } = null!;

        /// <summary>
        /// Product allocation stage
        /// </summary>
        [Output("productAllocation")]
        public Output<Outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocation> ProductAllocation { get; private set; } = null!;

        /// <summary>
        /// Security context stage
        /// </summary>
        [Output("securityContext")]
        public Output<Outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContext> SecurityContext { get; private set; } = null!;

        /// <summary>
        /// Storage stage
        /// </summary>
        [Output("storage")]
        public Output<Outputs.OpenpipelineV2EventsSdlcPipelinesStorage> Storage { get; private set; } = null!;


        /// <summary>
        /// Create a OpenpipelineV2EventsSdlcPipelines resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OpenpipelineV2EventsSdlcPipelines(string name, OpenpipelineV2EventsSdlcPipelinesArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/openpipelineV2EventsSdlcPipelines:OpenpipelineV2EventsSdlcPipelines", name, args ?? new OpenpipelineV2EventsSdlcPipelinesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OpenpipelineV2EventsSdlcPipelines(string name, Input<string> id, OpenpipelineV2EventsSdlcPipelinesState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/openpipelineV2EventsSdlcPipelines:OpenpipelineV2EventsSdlcPipelines", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OpenpipelineV2EventsSdlcPipelines resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OpenpipelineV2EventsSdlcPipelines Get(string name, Input<string> id, OpenpipelineV2EventsSdlcPipelinesState? state = null, CustomResourceOptions? options = null)
        {
            return new OpenpipelineV2EventsSdlcPipelines(name, id, state, options);
        }
    }

    public sealed class OpenpipelineV2EventsSdlcPipelinesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cost allocation stage
        /// </summary>
        [Input("costAllocation", required: true)]
        public Input<Inputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationArgs> CostAllocation { get; set; } = null!;

        /// <summary>
        /// Custom pipeline id
        /// </summary>
        [Input("customId", required: true)]
        public Input<string> CustomId { get; set; } = null!;

        /// <summary>
        /// Data extraction stage
        /// </summary>
        [Input("dataExtraction", required: true)]
        public Input<Inputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionArgs> DataExtraction { get; set; } = null!;

        /// <summary>
        /// Davis event extraction stage
        /// </summary>
        [Input("davis", required: true)]
        public Input<Inputs.OpenpipelineV2EventsSdlcPipelinesDavisArgs> Davis { get; set; } = null!;

        /// <summary>
        /// Display name
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// Metrics extraction stage
        /// </summary>
        [Input("metricExtraction", required: true)]
        public Input<Inputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionArgs> MetricExtraction { get; set; } = null!;

        /// <summary>
        /// Processing stage
        /// </summary>
        [Input("processing", required: true)]
        public Input<Inputs.OpenpipelineV2EventsSdlcPipelinesProcessingArgs> Processing { get; set; } = null!;

        /// <summary>
        /// Product allocation stage
        /// </summary>
        [Input("productAllocation", required: true)]
        public Input<Inputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationArgs> ProductAllocation { get; set; } = null!;

        /// <summary>
        /// Security context stage
        /// </summary>
        [Input("securityContext", required: true)]
        public Input<Inputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextArgs> SecurityContext { get; set; } = null!;

        /// <summary>
        /// Storage stage
        /// </summary>
        [Input("storage", required: true)]
        public Input<Inputs.OpenpipelineV2EventsSdlcPipelinesStorageArgs> Storage { get; set; } = null!;

        public OpenpipelineV2EventsSdlcPipelinesArgs()
        {
        }
        public static new OpenpipelineV2EventsSdlcPipelinesArgs Empty => new OpenpipelineV2EventsSdlcPipelinesArgs();
    }

    public sealed class OpenpipelineV2EventsSdlcPipelinesState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cost allocation stage
        /// </summary>
        [Input("costAllocation")]
        public Input<Inputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationGetArgs>? CostAllocation { get; set; }

        /// <summary>
        /// Custom pipeline id
        /// </summary>
        [Input("customId")]
        public Input<string>? CustomId { get; set; }

        /// <summary>
        /// Data extraction stage
        /// </summary>
        [Input("dataExtraction")]
        public Input<Inputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionGetArgs>? DataExtraction { get; set; }

        /// <summary>
        /// Davis event extraction stage
        /// </summary>
        [Input("davis")]
        public Input<Inputs.OpenpipelineV2EventsSdlcPipelinesDavisGetArgs>? Davis { get; set; }

        /// <summary>
        /// Display name
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Metrics extraction stage
        /// </summary>
        [Input("metricExtraction")]
        public Input<Inputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionGetArgs>? MetricExtraction { get; set; }

        /// <summary>
        /// Processing stage
        /// </summary>
        [Input("processing")]
        public Input<Inputs.OpenpipelineV2EventsSdlcPipelinesProcessingGetArgs>? Processing { get; set; }

        /// <summary>
        /// Product allocation stage
        /// </summary>
        [Input("productAllocation")]
        public Input<Inputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationGetArgs>? ProductAllocation { get; set; }

        /// <summary>
        /// Security context stage
        /// </summary>
        [Input("securityContext")]
        public Input<Inputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextGetArgs>? SecurityContext { get; set; }

        /// <summary>
        /// Storage stage
        /// </summary>
        [Input("storage")]
        public Input<Inputs.OpenpipelineV2EventsSdlcPipelinesStorageGetArgs>? Storage { get; set; }

        public OpenpipelineV2EventsSdlcPipelinesState()
        {
        }
        public static new OpenpipelineV2EventsSdlcPipelinesState Empty => new OpenpipelineV2EventsSdlcPipelinesState();
    }
}
