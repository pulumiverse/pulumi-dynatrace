// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    public static class GetSlo
    {
        /// <summary>
        /// The `dynatrace.Slo` data source allows the SLO ID to be retrieved by its name.
        /// 
        /// - `Name` (String) - The name of the SLO
        /// 
        /// If multiple services match the given criteria, the first result will be retrieved.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Dynatrace.GetSlo.Invoke(new()
        ///     {
        ///         Name = "Terraform",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getSloResult =&gt; getSloResult.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetSloResult> InvokeAsync(GetSloArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSloResult>("dynatrace:index/getSlo:getSlo", args ?? new GetSloArgs(), options.WithDefaults());

        /// <summary>
        /// The `dynatrace.Slo` data source allows the SLO ID to be retrieved by its name.
        /// 
        /// - `Name` (String) - The name of the SLO
        /// 
        /// If multiple services match the given criteria, the first result will be retrieved.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Dynatrace.GetSlo.Invoke(new()
        ///     {
        ///         Name = "Terraform",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getSloResult =&gt; getSloResult.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetSloResult> Invoke(GetSloInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSloResult>("dynatrace:index/getSlo:getSlo", args ?? new GetSloInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The `dynatrace.Slo` data source allows the SLO ID to be retrieved by its name.
        /// 
        /// - `Name` (String) - The name of the SLO
        /// 
        /// If multiple services match the given criteria, the first result will be retrieved.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Dynatrace.GetSlo.Invoke(new()
        ///     {
        ///         Name = "Terraform",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getSloResult =&gt; getSloResult.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetSloResult> Invoke(GetSloInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSloResult>("dynatrace:index/getSlo:getSlo", args ?? new GetSloInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSloArgs : global::Pulumi.InvokeArgs
    {
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetSloArgs()
        {
        }
        public static new GetSloArgs Empty => new GetSloArgs();
    }

    public sealed class GetSloInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetSloInvokeArgs()
        {
        }
        public static new GetSloInvokeArgs Empty => new GetSloInvokeArgs();
    }


    [OutputType]
    public sealed class GetSloResult
    {
        /// <summary>
        /// Burn rate visualization is enabled (`True`) or disabled (`False`)
        /// </summary>
        public readonly bool BurnRateVisualizationEnabled;
        /// <summary>
        /// The custom description of the SLO
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The SLO is enabled (`True`) or disabled (`False`)
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// The evaluation type of the SLO. Currently only `AGGREGATE` is supported
        /// </summary>
        public readonly string EvaluationType;
        /// <summary>
        /// The timeframe during which the SLO is to be evaluated. For the timeframe you can enter expressions like -1h (last hour), -1w (last week) or complex expressions like -2d to now (last two days), -1d/d to now/d (beginning of yesterday to beginning of today).
        /// </summary>
        public readonly string EvaluationWindow;
        /// <summary>
        /// The threshold defines when a burn rate is marked as fast-burning (high-emergency). Burn rates lower than this threshold (and greater than 1) are highlighted as slow-burn (low-emergency)
        /// </summary>
        public readonly double FastBurnThreshold;
        /// <summary>
        /// The entity filter for the SLO evaluation. See [syntax of entity selector](https://dt-url.net/entityselector) for details
        /// </summary>
        public readonly string Filter;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The ID of this setting when referred to by the Config REST API V1
        /// </summary>
        public readonly string LegacyId;
        /// <summary>
        /// The percentage-based metric expression for the calculation of the SLO
        /// </summary>
        public readonly string MetricExpression;
        /// <summary>
        /// No documentation available
        /// </summary>
        public readonly string MetricName;
        public readonly string Name;
        /// <summary>
        /// The target value of the SLO
        /// </summary>
        public readonly double TargetSuccess;
        /// <summary>
        /// The warning value of the SLO. At warning state the SLO is still fulfilled but is getting close to failure
        /// </summary>
        public readonly double TargetWarning;

        [OutputConstructor]
        private GetSloResult(
            bool burnRateVisualizationEnabled,

            string description,

            bool enabled,

            string evaluationType,

            string evaluationWindow,

            double fastBurnThreshold,

            string filter,

            string id,

            string legacyId,

            string metricExpression,

            string metricName,

            string name,

            double targetSuccess,

            double targetWarning)
        {
            BurnRateVisualizationEnabled = burnRateVisualizationEnabled;
            Description = description;
            Enabled = enabled;
            EvaluationType = evaluationType;
            EvaluationWindow = evaluationWindow;
            FastBurnThreshold = fastBurnThreshold;
            Filter = filter;
            Id = id;
            LegacyId = legacyId;
            MetricExpression = metricExpression;
            MetricName = metricName;
            Name = name;
            TargetSuccess = targetSuccess;
            TargetWarning = targetWarning;
        }
    }
}
