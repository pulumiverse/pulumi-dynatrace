// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/databaseAnomalies:DatabaseAnomalies")]
    public partial class DatabaseAnomalies : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Parameters of the failed database connections detection.  The alert is triggered when failed connections number exceeds **connectionFailsCount** during any **timePeriodMinutes** minutes period
        /// </summary>
        [Output("dbConnectFailures")]
        public Output<Outputs.DatabaseAnomaliesDbConnectFailures?> DbConnectFailures { get; private set; } = null!;

        /// <summary>
        /// Configuration of failure rate increase detection
        /// </summary>
        [Output("failureRate")]
        public Output<Outputs.DatabaseAnomaliesFailureRate?> FailureRate { get; private set; } = null!;

        /// <summary>
        /// Configuration for anomalies regarding load drops and spikes
        /// </summary>
        [Output("load")]
        public Output<Outputs.DatabaseAnomaliesLoad?> Load { get; private set; } = null!;

        /// <summary>
        /// Configuration of response time degradation detection
        /// </summary>
        [Output("responseTime")]
        public Output<Outputs.DatabaseAnomaliesResponseTime?> ResponseTime { get; private set; } = null!;


        /// <summary>
        /// Create a DatabaseAnomalies resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DatabaseAnomalies(string name, DatabaseAnomaliesArgs? args = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/databaseAnomalies:DatabaseAnomalies", name, args ?? new DatabaseAnomaliesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DatabaseAnomalies(string name, Input<string> id, DatabaseAnomaliesState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/databaseAnomalies:DatabaseAnomalies", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DatabaseAnomalies resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DatabaseAnomalies Get(string name, Input<string> id, DatabaseAnomaliesState? state = null, CustomResourceOptions? options = null)
        {
            return new DatabaseAnomalies(name, id, state, options);
        }
    }

    public sealed class DatabaseAnomaliesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Parameters of the failed database connections detection.  The alert is triggered when failed connections number exceeds **connectionFailsCount** during any **timePeriodMinutes** minutes period
        /// </summary>
        [Input("dbConnectFailures")]
        public Input<Inputs.DatabaseAnomaliesDbConnectFailuresArgs>? DbConnectFailures { get; set; }

        /// <summary>
        /// Configuration of failure rate increase detection
        /// </summary>
        [Input("failureRate")]
        public Input<Inputs.DatabaseAnomaliesFailureRateArgs>? FailureRate { get; set; }

        /// <summary>
        /// Configuration for anomalies regarding load drops and spikes
        /// </summary>
        [Input("load")]
        public Input<Inputs.DatabaseAnomaliesLoadArgs>? Load { get; set; }

        /// <summary>
        /// Configuration of response time degradation detection
        /// </summary>
        [Input("responseTime")]
        public Input<Inputs.DatabaseAnomaliesResponseTimeArgs>? ResponseTime { get; set; }

        public DatabaseAnomaliesArgs()
        {
        }
        public static new DatabaseAnomaliesArgs Empty => new DatabaseAnomaliesArgs();
    }

    public sealed class DatabaseAnomaliesState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Parameters of the failed database connections detection.  The alert is triggered when failed connections number exceeds **connectionFailsCount** during any **timePeriodMinutes** minutes period
        /// </summary>
        [Input("dbConnectFailures")]
        public Input<Inputs.DatabaseAnomaliesDbConnectFailuresGetArgs>? DbConnectFailures { get; set; }

        /// <summary>
        /// Configuration of failure rate increase detection
        /// </summary>
        [Input("failureRate")]
        public Input<Inputs.DatabaseAnomaliesFailureRateGetArgs>? FailureRate { get; set; }

        /// <summary>
        /// Configuration for anomalies regarding load drops and spikes
        /// </summary>
        [Input("load")]
        public Input<Inputs.DatabaseAnomaliesLoadGetArgs>? Load { get; set; }

        /// <summary>
        /// Configuration of response time degradation detection
        /// </summary>
        [Input("responseTime")]
        public Input<Inputs.DatabaseAnomaliesResponseTimeGetArgs>? ResponseTime { get; set; }

        public DatabaseAnomaliesState()
        {
        }
        public static new DatabaseAnomaliesState Empty => new DatabaseAnomaliesState();
    }
}
