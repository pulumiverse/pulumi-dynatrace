// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    /// <summary>
    /// &gt; This resource requires the API token scopes **Read settings** (`settings.read`) and **Write settings** (`settings.write`)
    /// 
    /// ## Dynatrace Documentation
    /// 
    /// - Customize failure detection in Service Detection v2 - https://docs.dynatrace.com/docs/observe/applications-and-microservices/services/service-detection-v2/failure-detection-v2
    /// 
    /// - Settings API - https://www.dynatrace.com/support/help/dynatrace-api/environment-api/settings (schemaId: `builtin:failure-detection-rulesets`)
    /// 
    /// ## Resource Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Dynatrace = Pulumiverse.Dynatrace;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var _name_ = new Dynatrace.FailureDetectionRuleSets("#name#", new()
    ///     {
    ///         Enabled = false,
    ///         Ruleset = new Dynatrace.Inputs.FailureDetectionRuleSetsRulesetArgs
    ///         {
    ///             Condition = "matchesValue(k8s.cluster.name,\"#name#\")",
    ///             Description = "This is a sample description",
    ///             FailOnExceptions = new Dynatrace.Inputs.FailureDetectionRuleSetsRulesetFailOnExceptionsArgs
    ///             {
    ///                 Enabled = true,
    ///             },
    ///             FailOnGrpcStatusCodes = new Dynatrace.Inputs.FailureDetectionRuleSetsRulesetFailOnGrpcStatusCodesArgs
    ///             {
    ///                 StatusCodes = "2,4,12,13,14,15",
    ///             },
    ///             FailOnHttpResponseStatusCodes = new Dynatrace.Inputs.FailureDetectionRuleSetsRulesetFailOnHttpResponseStatusCodesArgs
    ///             {
    ///                 StatusCodes = "500-599",
    ///             },
    ///             FailOnSpanStatusError = new Dynatrace.Inputs.FailureDetectionRuleSetsRulesetFailOnSpanStatusErrorArgs
    ///             {
    ///                 Enabled = true,
    ///             },
    ///             Overrides = new Dynatrace.Inputs.FailureDetectionRuleSetsRulesetOverridesArgs
    ///             {
    ///                 ForceSuccessOnSpanStatusOk = new Dynatrace.Inputs.FailureDetectionRuleSetsRulesetOverridesForceSuccessOnSpanStatusOkArgs
    ///                 {
    ///                     Enabled = false,
    ///                 },
    ///             },
    ///             RulesetName = "#name#",
    ///         },
    ///         Scope = "environment",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [DynatraceResourceType("dynatrace:index/failureDetectionRuleSets:FailureDetectionRuleSets")]
    public partial class FailureDetectionRuleSets : global::Pulumi.CustomResource
    {
        /// <summary>
        /// This setting is enabled (`True`) or disabled (`False`)
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        /// </summary>
        [Output("insertAfter")]
        public Output<string> InsertAfter { get; private set; } = null!;

        /// <summary>
        /// Ruleset
        /// </summary>
        [Output("ruleset")]
        public Output<Outputs.FailureDetectionRuleSetsRuleset> Ruleset { get; private set; } = null!;

        /// <summary>
        /// The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
        /// </summary>
        [Output("scope")]
        public Output<string?> Scope { get; private set; } = null!;


        /// <summary>
        /// Create a FailureDetectionRuleSets resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FailureDetectionRuleSets(string name, FailureDetectionRuleSetsArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/failureDetectionRuleSets:FailureDetectionRuleSets", name, args ?? new FailureDetectionRuleSetsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FailureDetectionRuleSets(string name, Input<string> id, FailureDetectionRuleSetsState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/failureDetectionRuleSets:FailureDetectionRuleSets", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FailureDetectionRuleSets resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FailureDetectionRuleSets Get(string name, Input<string> id, FailureDetectionRuleSetsState? state = null, CustomResourceOptions? options = null)
        {
            return new FailureDetectionRuleSets(name, id, state, options);
        }
    }

    public sealed class FailureDetectionRuleSetsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This setting is enabled (`True`) or disabled (`False`)
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        /// </summary>
        [Input("insertAfter")]
        public Input<string>? InsertAfter { get; set; }

        /// <summary>
        /// Ruleset
        /// </summary>
        [Input("ruleset", required: true)]
        public Input<Inputs.FailureDetectionRuleSetsRulesetArgs> Ruleset { get; set; } = null!;

        /// <summary>
        /// The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        public FailureDetectionRuleSetsArgs()
        {
        }
        public static new FailureDetectionRuleSetsArgs Empty => new FailureDetectionRuleSetsArgs();
    }

    public sealed class FailureDetectionRuleSetsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This setting is enabled (`True`) or disabled (`False`)
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        /// </summary>
        [Input("insertAfter")]
        public Input<string>? InsertAfter { get; set; }

        /// <summary>
        /// Ruleset
        /// </summary>
        [Input("ruleset")]
        public Input<Inputs.FailureDetectionRuleSetsRulesetGetArgs>? Ruleset { get; set; }

        /// <summary>
        /// The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        public FailureDetectionRuleSetsState()
        {
        }
        public static new FailureDetectionRuleSetsState Empty => new FailureDetectionRuleSetsState();
    }
}
