// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    public static class GetGeoRegions
    {
        /// <summary>
        /// The `dynatrace.getGeoRegions` data source retrieves the list of regions and their codes based on country code.
        /// 
        /// - `country_code` (String) - The ISO code of the required country
        /// 
        /// Geographic regions API: GET regions of a country - https://docs.dynatrace.com/docs/shortlink/api-v2-rum-geographic-regions-get-regions-country
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Dynatrace.GetGeoRegions.Invoke(new()
        ///     {
        ///         CountryCode = "FR",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["test"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetGeoRegionsResult> InvokeAsync(GetGeoRegionsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGeoRegionsResult>("dynatrace:index/getGeoRegions:getGeoRegions", args ?? new GetGeoRegionsArgs(), options.WithDefaults());

        /// <summary>
        /// The `dynatrace.getGeoRegions` data source retrieves the list of regions and their codes based on country code.
        /// 
        /// - `country_code` (String) - The ISO code of the required country
        /// 
        /// Geographic regions API: GET regions of a country - https://docs.dynatrace.com/docs/shortlink/api-v2-rum-geographic-regions-get-regions-country
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Dynatrace.GetGeoRegions.Invoke(new()
        ///     {
        ///         CountryCode = "FR",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["test"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetGeoRegionsResult> Invoke(GetGeoRegionsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGeoRegionsResult>("dynatrace:index/getGeoRegions:getGeoRegions", args ?? new GetGeoRegionsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The `dynatrace.getGeoRegions` data source retrieves the list of regions and their codes based on country code.
        /// 
        /// - `country_code` (String) - The ISO code of the required country
        /// 
        /// Geographic regions API: GET regions of a country - https://docs.dynatrace.com/docs/shortlink/api-v2-rum-geographic-regions-get-regions-country
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Dynatrace.GetGeoRegions.Invoke(new()
        ///     {
        ///         CountryCode = "FR",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["test"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetGeoRegionsResult> Invoke(GetGeoRegionsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetGeoRegionsResult>("dynatrace:index/getGeoRegions:getGeoRegions", args ?? new GetGeoRegionsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGeoRegionsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ISO code of the required country
        /// </summary>
        [Input("countryCode", required: true)]
        public string CountryCode { get; set; } = null!;

        public GetGeoRegionsArgs()
        {
        }
        public static new GetGeoRegionsArgs Empty => new GetGeoRegionsArgs();
    }

    public sealed class GetGeoRegionsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ISO code of the required country
        /// </summary>
        [Input("countryCode", required: true)]
        public Input<string> CountryCode { get; set; } = null!;

        public GetGeoRegionsInvokeArgs()
        {
        }
        public static new GetGeoRegionsInvokeArgs Empty => new GetGeoRegionsInvokeArgs();
    }


    [OutputType]
    public sealed class GetGeoRegionsResult
    {
        /// <summary>
        /// The ISO code of the required country
        /// </summary>
        public readonly string CountryCode;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetGeoRegionsRegionResult> Regions;

        [OutputConstructor]
        private GetGeoRegionsResult(
            string countryCode,

            string id,

            ImmutableArray<Outputs.GetGeoRegionsRegionResult> regions)
        {
            CountryCode = countryCode;
            Id = id;
            Regions = regions;
        }
    }
}
