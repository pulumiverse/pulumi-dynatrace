// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/queueManager:QueueManager")]
    public partial class QueueManager : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The alias queues in the queue manager
        /// </summary>
        [Output("aliasQueues")]
        public Output<ImmutableArray<Outputs.QueueManagerAliasQueue>> AliasQueues { get; private set; } = null!;

        /// <summary>
        /// The alias queues in the queue manager
        /// </summary>
        [Output("clusterQueues")]
        public Output<ImmutableArray<Outputs.QueueManagerClusterQueue>> ClusterQueues { get; private set; } = null!;

        /// <summary>
        /// Name of the cluster(s) this queue manager is part of
        /// </summary>
        [Output("clusters")]
        public Output<ImmutableArray<string>> Clusters { get; private set; } = null!;

        /// <summary>
        /// The name of the queue manager
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The alias queues in the queue manager
        /// </summary>
        [Output("remoteQueues")]
        public Output<ImmutableArray<Outputs.QueueManagerRemoteQueue>> RemoteQueues { get; private set; } = null!;


        /// <summary>
        /// Create a QueueManager resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public QueueManager(string name, QueueManagerArgs? args = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/queueManager:QueueManager", name, args ?? new QueueManagerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private QueueManager(string name, Input<string> id, QueueManagerState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/queueManager:QueueManager", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing QueueManager resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static QueueManager Get(string name, Input<string> id, QueueManagerState? state = null, CustomResourceOptions? options = null)
        {
            return new QueueManager(name, id, state, options);
        }
    }

    public sealed class QueueManagerArgs : global::Pulumi.ResourceArgs
    {
        [Input("aliasQueues")]
        private InputList<Inputs.QueueManagerAliasQueueArgs>? _aliasQueues;

        /// <summary>
        /// The alias queues in the queue manager
        /// </summary>
        public InputList<Inputs.QueueManagerAliasQueueArgs> AliasQueues
        {
            get => _aliasQueues ?? (_aliasQueues = new InputList<Inputs.QueueManagerAliasQueueArgs>());
            set => _aliasQueues = value;
        }

        [Input("clusterQueues")]
        private InputList<Inputs.QueueManagerClusterQueueArgs>? _clusterQueues;

        /// <summary>
        /// The alias queues in the queue manager
        /// </summary>
        public InputList<Inputs.QueueManagerClusterQueueArgs> ClusterQueues
        {
            get => _clusterQueues ?? (_clusterQueues = new InputList<Inputs.QueueManagerClusterQueueArgs>());
            set => _clusterQueues = value;
        }

        [Input("clusters")]
        private InputList<string>? _clusters;

        /// <summary>
        /// Name of the cluster(s) this queue manager is part of
        /// </summary>
        public InputList<string> Clusters
        {
            get => _clusters ?? (_clusters = new InputList<string>());
            set => _clusters = value;
        }

        /// <summary>
        /// The name of the queue manager
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("remoteQueues")]
        private InputList<Inputs.QueueManagerRemoteQueueArgs>? _remoteQueues;

        /// <summary>
        /// The alias queues in the queue manager
        /// </summary>
        public InputList<Inputs.QueueManagerRemoteQueueArgs> RemoteQueues
        {
            get => _remoteQueues ?? (_remoteQueues = new InputList<Inputs.QueueManagerRemoteQueueArgs>());
            set => _remoteQueues = value;
        }

        public QueueManagerArgs()
        {
        }
        public static new QueueManagerArgs Empty => new QueueManagerArgs();
    }

    public sealed class QueueManagerState : global::Pulumi.ResourceArgs
    {
        [Input("aliasQueues")]
        private InputList<Inputs.QueueManagerAliasQueueGetArgs>? _aliasQueues;

        /// <summary>
        /// The alias queues in the queue manager
        /// </summary>
        public InputList<Inputs.QueueManagerAliasQueueGetArgs> AliasQueues
        {
            get => _aliasQueues ?? (_aliasQueues = new InputList<Inputs.QueueManagerAliasQueueGetArgs>());
            set => _aliasQueues = value;
        }

        [Input("clusterQueues")]
        private InputList<Inputs.QueueManagerClusterQueueGetArgs>? _clusterQueues;

        /// <summary>
        /// The alias queues in the queue manager
        /// </summary>
        public InputList<Inputs.QueueManagerClusterQueueGetArgs> ClusterQueues
        {
            get => _clusterQueues ?? (_clusterQueues = new InputList<Inputs.QueueManagerClusterQueueGetArgs>());
            set => _clusterQueues = value;
        }

        [Input("clusters")]
        private InputList<string>? _clusters;

        /// <summary>
        /// Name of the cluster(s) this queue manager is part of
        /// </summary>
        public InputList<string> Clusters
        {
            get => _clusters ?? (_clusters = new InputList<string>());
            set => _clusters = value;
        }

        /// <summary>
        /// The name of the queue manager
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("remoteQueues")]
        private InputList<Inputs.QueueManagerRemoteQueueGetArgs>? _remoteQueues;

        /// <summary>
        /// The alias queues in the queue manager
        /// </summary>
        public InputList<Inputs.QueueManagerRemoteQueueGetArgs> RemoteQueues
        {
            get => _remoteQueues ?? (_remoteQueues = new InputList<Inputs.QueueManagerRemoteQueueGetArgs>());
            set => _remoteQueues = value;
        }

        public QueueManagerState()
        {
        }
        public static new QueueManagerState Empty => new QueueManagerState();
    }
}
