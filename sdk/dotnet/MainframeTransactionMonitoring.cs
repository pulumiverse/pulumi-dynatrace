// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/mainframeTransactionMonitoring:MainframeTransactionMonitoring")]
    public partial class MainframeTransactionMonitoring : global::Pulumi.CustomResource
    {
        /// <summary>
        /// If enabled, CICS regions belonging to the same CICSPlex will be grouped into a single process group. If disabled, a process group will be created for each CICS region.
        /// </summary>
        [Output("groupCicsRegions")]
        public Output<bool> GroupCicsRegions { get; private set; } = null!;

        /// <summary>
        /// If enabled, IMS regions belonging to the same subsystem will be grouped into a single process group. If disabled, a process group will be created for each IMS region.
        /// </summary>
        [Output("groupImsRegions")]
        public Output<bool> GroupImsRegions { get; private set; } = null!;

        /// <summary>
        /// If enabled, the CICS Transaction Gateway sensor will trace all EXCI requests including those that are using the TCP/IP or SNA protocol.
        /// </summary>
        [Output("monitorAllCtgProtocols")]
        public Output<bool> MonitorAllCtgProtocols { get; private set; } = null!;

        /// <summary>
        /// Dynatrace automatically traces incoming web requests when they are called by already-monitored services. Enable this setting to monitor all incoming web requests. We recommend enabling it only over a short period of time.
        /// </summary>
        [Output("monitorAllIncomingWebRequests")]
        public Output<bool> MonitorAllIncomingWebRequests { get; private set; } = null!;

        /// <summary>
        /// We recommend the default limit of 500 nodes. The value 0 means unlimited number of nodes.
        /// </summary>
        [Output("nodeLimit")]
        public Output<int> NodeLimit { get; private set; } = null!;

        /// <summary>
        /// If enabled, a CICS service will be created for each monitored transaction ID within a process group. If disabled, a CICS service will be created for each monitored CICS region within a process group. We recommend enabling it only when the CICS regions are grouped by their CICSPlex.
        /// </summary>
        [Output("zosCicsServiceDetectionUsesTransactionId")]
        public Output<bool> ZosCicsServiceDetectionUsesTransactionId { get; private set; } = null!;

        /// <summary>
        /// If enabled, an IMS service will be created for each monitored transaction ID within a process group. If disabled, an IMS service will be created for each monitored IMS region within a process group. We recommend enabling it only when the IMS regions are grouped by their subsystem.
        /// </summary>
        [Output("zosImsServiceDetectionUsesTransactionId")]
        public Output<bool> ZosImsServiceDetectionUsesTransactionId { get; private set; } = null!;


        /// <summary>
        /// Create a MainframeTransactionMonitoring resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MainframeTransactionMonitoring(string name, MainframeTransactionMonitoringArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/mainframeTransactionMonitoring:MainframeTransactionMonitoring", name, args ?? new MainframeTransactionMonitoringArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MainframeTransactionMonitoring(string name, Input<string> id, MainframeTransactionMonitoringState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/mainframeTransactionMonitoring:MainframeTransactionMonitoring", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MainframeTransactionMonitoring resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MainframeTransactionMonitoring Get(string name, Input<string> id, MainframeTransactionMonitoringState? state = null, CustomResourceOptions? options = null)
        {
            return new MainframeTransactionMonitoring(name, id, state, options);
        }
    }

    public sealed class MainframeTransactionMonitoringArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If enabled, CICS regions belonging to the same CICSPlex will be grouped into a single process group. If disabled, a process group will be created for each CICS region.
        /// </summary>
        [Input("groupCicsRegions", required: true)]
        public Input<bool> GroupCicsRegions { get; set; } = null!;

        /// <summary>
        /// If enabled, IMS regions belonging to the same subsystem will be grouped into a single process group. If disabled, a process group will be created for each IMS region.
        /// </summary>
        [Input("groupImsRegions", required: true)]
        public Input<bool> GroupImsRegions { get; set; } = null!;

        /// <summary>
        /// If enabled, the CICS Transaction Gateway sensor will trace all EXCI requests including those that are using the TCP/IP or SNA protocol.
        /// </summary>
        [Input("monitorAllCtgProtocols", required: true)]
        public Input<bool> MonitorAllCtgProtocols { get; set; } = null!;

        /// <summary>
        /// Dynatrace automatically traces incoming web requests when they are called by already-monitored services. Enable this setting to monitor all incoming web requests. We recommend enabling it only over a short period of time.
        /// </summary>
        [Input("monitorAllIncomingWebRequests", required: true)]
        public Input<bool> MonitorAllIncomingWebRequests { get; set; } = null!;

        /// <summary>
        /// We recommend the default limit of 500 nodes. The value 0 means unlimited number of nodes.
        /// </summary>
        [Input("nodeLimit", required: true)]
        public Input<int> NodeLimit { get; set; } = null!;

        /// <summary>
        /// If enabled, a CICS service will be created for each monitored transaction ID within a process group. If disabled, a CICS service will be created for each monitored CICS region within a process group. We recommend enabling it only when the CICS regions are grouped by their CICSPlex.
        /// </summary>
        [Input("zosCicsServiceDetectionUsesTransactionId", required: true)]
        public Input<bool> ZosCicsServiceDetectionUsesTransactionId { get; set; } = null!;

        /// <summary>
        /// If enabled, an IMS service will be created for each monitored transaction ID within a process group. If disabled, an IMS service will be created for each monitored IMS region within a process group. We recommend enabling it only when the IMS regions are grouped by their subsystem.
        /// </summary>
        [Input("zosImsServiceDetectionUsesTransactionId", required: true)]
        public Input<bool> ZosImsServiceDetectionUsesTransactionId { get; set; } = null!;

        public MainframeTransactionMonitoringArgs()
        {
        }
        public static new MainframeTransactionMonitoringArgs Empty => new MainframeTransactionMonitoringArgs();
    }

    public sealed class MainframeTransactionMonitoringState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If enabled, CICS regions belonging to the same CICSPlex will be grouped into a single process group. If disabled, a process group will be created for each CICS region.
        /// </summary>
        [Input("groupCicsRegions")]
        public Input<bool>? GroupCicsRegions { get; set; }

        /// <summary>
        /// If enabled, IMS regions belonging to the same subsystem will be grouped into a single process group. If disabled, a process group will be created for each IMS region.
        /// </summary>
        [Input("groupImsRegions")]
        public Input<bool>? GroupImsRegions { get; set; }

        /// <summary>
        /// If enabled, the CICS Transaction Gateway sensor will trace all EXCI requests including those that are using the TCP/IP or SNA protocol.
        /// </summary>
        [Input("monitorAllCtgProtocols")]
        public Input<bool>? MonitorAllCtgProtocols { get; set; }

        /// <summary>
        /// Dynatrace automatically traces incoming web requests when they are called by already-monitored services. Enable this setting to monitor all incoming web requests. We recommend enabling it only over a short period of time.
        /// </summary>
        [Input("monitorAllIncomingWebRequests")]
        public Input<bool>? MonitorAllIncomingWebRequests { get; set; }

        /// <summary>
        /// We recommend the default limit of 500 nodes. The value 0 means unlimited number of nodes.
        /// </summary>
        [Input("nodeLimit")]
        public Input<int>? NodeLimit { get; set; }

        /// <summary>
        /// If enabled, a CICS service will be created for each monitored transaction ID within a process group. If disabled, a CICS service will be created for each monitored CICS region within a process group. We recommend enabling it only when the CICS regions are grouped by their CICSPlex.
        /// </summary>
        [Input("zosCicsServiceDetectionUsesTransactionId")]
        public Input<bool>? ZosCicsServiceDetectionUsesTransactionId { get; set; }

        /// <summary>
        /// If enabled, an IMS service will be created for each monitored transaction ID within a process group. If disabled, an IMS service will be created for each monitored IMS region within a process group. We recommend enabling it only when the IMS regions are grouped by their subsystem.
        /// </summary>
        [Input("zosImsServiceDetectionUsesTransactionId")]
        public Input<bool>? ZosImsServiceDetectionUsesTransactionId { get; set; }

        public MainframeTransactionMonitoringState()
        {
        }
        public static new MainframeTransactionMonitoringState Empty => new MainframeTransactionMonitoringState();
    }
}
