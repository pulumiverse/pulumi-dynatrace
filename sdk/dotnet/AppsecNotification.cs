// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/appsecNotification:AppsecNotification")]
    public partial class AppsecNotification : global::Pulumi.CustomResource
    {
        /// <summary>
        /// For attack candidate alerts, select an [alerting profile](https://www.terraform.io/ui/settings/builtin:appsec.notification-attack-alerting-profile) to control the delivery of security notifications related to this integration.
        /// </summary>
        [Output("attackCandidateBasedAlertingProfile")]
        public Output<string?> AttackCandidateBasedAlertingProfile { get; private set; } = null!;

        /// <summary>
        /// Attack candidate based email payload, required when `Trigger` equals `ATTACK_CANDIDATE` and `Type` equals `EMAIL`
        /// </summary>
        [Output("attackCandidateBasedEmailPayload")]
        public Output<Outputs.AppsecNotificationAttackCandidateBasedEmailPayload?> AttackCandidateBasedEmailPayload { get; private set; } = null!;

        /// <summary>
        /// Attack candidate based Jira payload, required when `Trigger` equals `ATTACK_CANDIDATE` and `Type` equals `JIRA`
        /// </summary>
        [Output("attackCandidateBasedJiraPayload")]
        public Output<Outputs.AppsecNotificationAttackCandidateBasedJiraPayload?> AttackCandidateBasedJiraPayload { get; private set; } = null!;

        /// <summary>
        /// Attack candidate based webhook payload, required when `Trigger` equals `ATTACK_CANDIDATE` and `Type` equals `WEBHOOK`
        /// </summary>
        [Output("attackCandidateBasedWebhookPayload")]
        public Output<Outputs.AppsecNotificationAttackCandidateBasedWebhookPayload?> AttackCandidateBasedWebhookPayload { get; private set; } = null!;

        /// <summary>
        /// Display name of the security notification
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Email configuration, required when `Type` equals `EMAIL`
        /// </summary>
        [Output("emailConfiguration")]
        public Output<Outputs.AppsecNotificationEmailConfiguration?> EmailConfiguration { get; private set; } = null!;

        /// <summary>
        /// Enable/Disable the security notification, enabled (`True`) or disabled (`False`)
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// Jira configuration, required when `Type` equals `JIRA`
        /// </summary>
        [Output("jiraConfiguration")]
        public Output<Outputs.AppsecNotificationJiraConfiguration?> JiraConfiguration { get; private set; } = null!;

        /// <summary>
        /// For security problem alerts, select an [alerting profile](https://www.terraform.io/ui/settings/builtin:appsec.notification-alerting-profile) to control the delivery of security notifications related to this integration.
        /// </summary>
        [Output("securityProblemBasedAlertingProfile")]
        public Output<string?> SecurityProblemBasedAlertingProfile { get; private set; } = null!;

        /// <summary>
        /// Security problem based email payload, required when `Trigger` equals `SECURITY_PROBLEM` and `Type` equals `EMAIL`
        /// </summary>
        [Output("securityProblemBasedEmailPayload")]
        public Output<Outputs.AppsecNotificationSecurityProblemBasedEmailPayload?> SecurityProblemBasedEmailPayload { get; private set; } = null!;

        /// <summary>
        /// Security problem based Jira payload, required when `Trigger` equals `SECURITY_PROBLEM` and `Type` equals `JIRA`
        /// </summary>
        [Output("securityProblemBasedJiraPayload")]
        public Output<Outputs.AppsecNotificationSecurityProblemBasedJiraPayload?> SecurityProblemBasedJiraPayload { get; private set; } = null!;

        /// <summary>
        /// Security problem based webhook payload, required when `Trigger` equals `SECURITY_PROBLEM` and `Type` equals `WEBHOOK`
        /// </summary>
        [Output("securityProblemBasedWebhookPayload")]
        public Output<Outputs.AppsecNotificationSecurityProblemBasedWebhookPayload?> SecurityProblemBasedWebhookPayload { get; private set; } = null!;

        /// <summary>
        /// Security alert type, possible Values: `ATTACK_CANDIDATE`, `SECURITY_PROBLEM`
        /// </summary>
        [Output("trigger")]
        public Output<string> Trigger { get; private set; } = null!;

        /// <summary>
        /// Notification type, possible Values: `EMAIL`, `JIRA`, `WEBHOOK`
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Webhook configuration, required when `Type` equals `WEBHOOK`
        /// </summary>
        [Output("webhookConfiguration")]
        public Output<Outputs.AppsecNotificationWebhookConfiguration?> WebhookConfiguration { get; private set; } = null!;


        /// <summary>
        /// Create a AppsecNotification resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AppsecNotification(string name, AppsecNotificationArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/appsecNotification:AppsecNotification", name, args ?? new AppsecNotificationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AppsecNotification(string name, Input<string> id, AppsecNotificationState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/appsecNotification:AppsecNotification", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AppsecNotification resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AppsecNotification Get(string name, Input<string> id, AppsecNotificationState? state = null, CustomResourceOptions? options = null)
        {
            return new AppsecNotification(name, id, state, options);
        }
    }

    public sealed class AppsecNotificationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// For attack candidate alerts, select an [alerting profile](https://www.terraform.io/ui/settings/builtin:appsec.notification-attack-alerting-profile) to control the delivery of security notifications related to this integration.
        /// </summary>
        [Input("attackCandidateBasedAlertingProfile")]
        public Input<string>? AttackCandidateBasedAlertingProfile { get; set; }

        /// <summary>
        /// Attack candidate based email payload, required when `Trigger` equals `ATTACK_CANDIDATE` and `Type` equals `EMAIL`
        /// </summary>
        [Input("attackCandidateBasedEmailPayload")]
        public Input<Inputs.AppsecNotificationAttackCandidateBasedEmailPayloadArgs>? AttackCandidateBasedEmailPayload { get; set; }

        /// <summary>
        /// Attack candidate based Jira payload, required when `Trigger` equals `ATTACK_CANDIDATE` and `Type` equals `JIRA`
        /// </summary>
        [Input("attackCandidateBasedJiraPayload")]
        public Input<Inputs.AppsecNotificationAttackCandidateBasedJiraPayloadArgs>? AttackCandidateBasedJiraPayload { get; set; }

        /// <summary>
        /// Attack candidate based webhook payload, required when `Trigger` equals `ATTACK_CANDIDATE` and `Type` equals `WEBHOOK`
        /// </summary>
        [Input("attackCandidateBasedWebhookPayload")]
        public Input<Inputs.AppsecNotificationAttackCandidateBasedWebhookPayloadArgs>? AttackCandidateBasedWebhookPayload { get; set; }

        /// <summary>
        /// Display name of the security notification
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// Email configuration, required when `Type` equals `EMAIL`
        /// </summary>
        [Input("emailConfiguration")]
        public Input<Inputs.AppsecNotificationEmailConfigurationArgs>? EmailConfiguration { get; set; }

        /// <summary>
        /// Enable/Disable the security notification, enabled (`True`) or disabled (`False`)
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// Jira configuration, required when `Type` equals `JIRA`
        /// </summary>
        [Input("jiraConfiguration")]
        public Input<Inputs.AppsecNotificationJiraConfigurationArgs>? JiraConfiguration { get; set; }

        /// <summary>
        /// For security problem alerts, select an [alerting profile](https://www.terraform.io/ui/settings/builtin:appsec.notification-alerting-profile) to control the delivery of security notifications related to this integration.
        /// </summary>
        [Input("securityProblemBasedAlertingProfile")]
        public Input<string>? SecurityProblemBasedAlertingProfile { get; set; }

        /// <summary>
        /// Security problem based email payload, required when `Trigger` equals `SECURITY_PROBLEM` and `Type` equals `EMAIL`
        /// </summary>
        [Input("securityProblemBasedEmailPayload")]
        public Input<Inputs.AppsecNotificationSecurityProblemBasedEmailPayloadArgs>? SecurityProblemBasedEmailPayload { get; set; }

        /// <summary>
        /// Security problem based Jira payload, required when `Trigger` equals `SECURITY_PROBLEM` and `Type` equals `JIRA`
        /// </summary>
        [Input("securityProblemBasedJiraPayload")]
        public Input<Inputs.AppsecNotificationSecurityProblemBasedJiraPayloadArgs>? SecurityProblemBasedJiraPayload { get; set; }

        /// <summary>
        /// Security problem based webhook payload, required when `Trigger` equals `SECURITY_PROBLEM` and `Type` equals `WEBHOOK`
        /// </summary>
        [Input("securityProblemBasedWebhookPayload")]
        public Input<Inputs.AppsecNotificationSecurityProblemBasedWebhookPayloadArgs>? SecurityProblemBasedWebhookPayload { get; set; }

        /// <summary>
        /// Security alert type, possible Values: `ATTACK_CANDIDATE`, `SECURITY_PROBLEM`
        /// </summary>
        [Input("trigger", required: true)]
        public Input<string> Trigger { get; set; } = null!;

        /// <summary>
        /// Notification type, possible Values: `EMAIL`, `JIRA`, `WEBHOOK`
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// Webhook configuration, required when `Type` equals `WEBHOOK`
        /// </summary>
        [Input("webhookConfiguration")]
        public Input<Inputs.AppsecNotificationWebhookConfigurationArgs>? WebhookConfiguration { get; set; }

        public AppsecNotificationArgs()
        {
        }
        public static new AppsecNotificationArgs Empty => new AppsecNotificationArgs();
    }

    public sealed class AppsecNotificationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// For attack candidate alerts, select an [alerting profile](https://www.terraform.io/ui/settings/builtin:appsec.notification-attack-alerting-profile) to control the delivery of security notifications related to this integration.
        /// </summary>
        [Input("attackCandidateBasedAlertingProfile")]
        public Input<string>? AttackCandidateBasedAlertingProfile { get; set; }

        /// <summary>
        /// Attack candidate based email payload, required when `Trigger` equals `ATTACK_CANDIDATE` and `Type` equals `EMAIL`
        /// </summary>
        [Input("attackCandidateBasedEmailPayload")]
        public Input<Inputs.AppsecNotificationAttackCandidateBasedEmailPayloadGetArgs>? AttackCandidateBasedEmailPayload { get; set; }

        /// <summary>
        /// Attack candidate based Jira payload, required when `Trigger` equals `ATTACK_CANDIDATE` and `Type` equals `JIRA`
        /// </summary>
        [Input("attackCandidateBasedJiraPayload")]
        public Input<Inputs.AppsecNotificationAttackCandidateBasedJiraPayloadGetArgs>? AttackCandidateBasedJiraPayload { get; set; }

        /// <summary>
        /// Attack candidate based webhook payload, required when `Trigger` equals `ATTACK_CANDIDATE` and `Type` equals `WEBHOOK`
        /// </summary>
        [Input("attackCandidateBasedWebhookPayload")]
        public Input<Inputs.AppsecNotificationAttackCandidateBasedWebhookPayloadGetArgs>? AttackCandidateBasedWebhookPayload { get; set; }

        /// <summary>
        /// Display name of the security notification
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Email configuration, required when `Type` equals `EMAIL`
        /// </summary>
        [Input("emailConfiguration")]
        public Input<Inputs.AppsecNotificationEmailConfigurationGetArgs>? EmailConfiguration { get; set; }

        /// <summary>
        /// Enable/Disable the security notification, enabled (`True`) or disabled (`False`)
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Jira configuration, required when `Type` equals `JIRA`
        /// </summary>
        [Input("jiraConfiguration")]
        public Input<Inputs.AppsecNotificationJiraConfigurationGetArgs>? JiraConfiguration { get; set; }

        /// <summary>
        /// For security problem alerts, select an [alerting profile](https://www.terraform.io/ui/settings/builtin:appsec.notification-alerting-profile) to control the delivery of security notifications related to this integration.
        /// </summary>
        [Input("securityProblemBasedAlertingProfile")]
        public Input<string>? SecurityProblemBasedAlertingProfile { get; set; }

        /// <summary>
        /// Security problem based email payload, required when `Trigger` equals `SECURITY_PROBLEM` and `Type` equals `EMAIL`
        /// </summary>
        [Input("securityProblemBasedEmailPayload")]
        public Input<Inputs.AppsecNotificationSecurityProblemBasedEmailPayloadGetArgs>? SecurityProblemBasedEmailPayload { get; set; }

        /// <summary>
        /// Security problem based Jira payload, required when `Trigger` equals `SECURITY_PROBLEM` and `Type` equals `JIRA`
        /// </summary>
        [Input("securityProblemBasedJiraPayload")]
        public Input<Inputs.AppsecNotificationSecurityProblemBasedJiraPayloadGetArgs>? SecurityProblemBasedJiraPayload { get; set; }

        /// <summary>
        /// Security problem based webhook payload, required when `Trigger` equals `SECURITY_PROBLEM` and `Type` equals `WEBHOOK`
        /// </summary>
        [Input("securityProblemBasedWebhookPayload")]
        public Input<Inputs.AppsecNotificationSecurityProblemBasedWebhookPayloadGetArgs>? SecurityProblemBasedWebhookPayload { get; set; }

        /// <summary>
        /// Security alert type, possible Values: `ATTACK_CANDIDATE`, `SECURITY_PROBLEM`
        /// </summary>
        [Input("trigger")]
        public Input<string>? Trigger { get; set; }

        /// <summary>
        /// Notification type, possible Values: `EMAIL`, `JIRA`, `WEBHOOK`
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Webhook configuration, required when `Type` equals `WEBHOOK`
        /// </summary>
        [Input("webhookConfiguration")]
        public Input<Inputs.AppsecNotificationWebhookConfigurationGetArgs>? WebhookConfiguration { get; set; }

        public AppsecNotificationState()
        {
        }
        public static new AppsecNotificationState Empty => new AppsecNotificationState();
    }
}
