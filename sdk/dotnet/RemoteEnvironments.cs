// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/remoteEnvironments:RemoteEnvironments")]
    public partial class RemoteEnvironments : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Possible Values: `CLUSTER`, `EXTERNAL`, `INTERNAL`
        /// </summary>
        [Output("networkScope")]
        public Output<string> NetworkScope { get; private set; } = null!;

        /// <summary>
        /// Provide a valid token created on the remote environment.
        /// </summary>
        [Output("token")]
        public Output<string> Token { get; private set; } = null!;

        /// <summary>
        /// Specify the full URI to the remote environment. Your local environment will have to be able to connect this URI on a network level.
        /// </summary>
        [Output("uri")]
        public Output<string> Uri { get; private set; } = null!;


        /// <summary>
        /// Create a RemoteEnvironments resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RemoteEnvironments(string name, RemoteEnvironmentsArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/remoteEnvironments:RemoteEnvironments", name, args ?? new RemoteEnvironmentsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RemoteEnvironments(string name, Input<string> id, RemoteEnvironmentsState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/remoteEnvironments:RemoteEnvironments", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
                AdditionalSecretOutputs =
                {
                    "token",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RemoteEnvironments resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RemoteEnvironments Get(string name, Input<string> id, RemoteEnvironmentsState? state = null, CustomResourceOptions? options = null)
        {
            return new RemoteEnvironments(name, id, state, options);
        }
    }

    public sealed class RemoteEnvironmentsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Possible Values: `CLUSTER`, `EXTERNAL`, `INTERNAL`
        /// </summary>
        [Input("networkScope", required: true)]
        public Input<string> NetworkScope { get; set; } = null!;

        [Input("token", required: true)]
        private Input<string>? _token;

        /// <summary>
        /// Provide a valid token created on the remote environment.
        /// </summary>
        public Input<string>? Token
        {
            get => _token;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _token = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Specify the full URI to the remote environment. Your local environment will have to be able to connect this URI on a network level.
        /// </summary>
        [Input("uri", required: true)]
        public Input<string> Uri { get; set; } = null!;

        public RemoteEnvironmentsArgs()
        {
        }
        public static new RemoteEnvironmentsArgs Empty => new RemoteEnvironmentsArgs();
    }

    public sealed class RemoteEnvironmentsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Possible Values: `CLUSTER`, `EXTERNAL`, `INTERNAL`
        /// </summary>
        [Input("networkScope")]
        public Input<string>? NetworkScope { get; set; }

        [Input("token")]
        private Input<string>? _token;

        /// <summary>
        /// Provide a valid token created on the remote environment.
        /// </summary>
        public Input<string>? Token
        {
            get => _token;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _token = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Specify the full URI to the remote environment. Your local environment will have to be able to connect this URI on a network level.
        /// </summary>
        [Input("uri")]
        public Input<string>? Uri { get; set; }

        public RemoteEnvironmentsState()
        {
        }
        public static new RemoteEnvironmentsState Empty => new RemoteEnvironmentsState();
    }
}
