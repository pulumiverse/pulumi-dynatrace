// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/diskAnomalyRules:DiskAnomalyRules")]
    public partial class DiskAnomalyRules : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Only apply to disks whose name matches
        /// </summary>
        [Output("diskNameFilter")]
        public Output<Outputs.DiskAnomalyRulesDiskNameFilter> DiskNameFilter { get; private set; } = null!;

        /// <summary>
        /// This setting is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
        /// </summary>
        [Output("hostGroupId")]
        public Output<string?> HostGroupId { get; private set; } = null!;

        /// <summary>
        /// Possible Values: `LOW_DISK_SPACE`, `LOW_INODES`, `READ_TIME_EXCEEDING`, `WRITE_TIME_EXCEEDING`
        /// </summary>
        [Output("metric")]
        public Output<string> Metric { get; private set; } = null!;

        /// <summary>
        /// Name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Only alert if the threshold was violated in at least *n* of the last *m* samples
        /// </summary>
        [Output("sampleLimit")]
        public Output<Outputs.DiskAnomalyRulesSampleLimit> SampleLimit { get; private set; } = null!;

        /// <summary>
        /// Only apply to hosts that have the following tags
        /// </summary>
        [Output("tagFilters")]
        public Output<ImmutableArray<string>> TagFilters { get; private set; } = null!;

        /// <summary>
        /// Alert if higher than
        /// </summary>
        [Output("thresholdMilliseconds")]
        public Output<double?> ThresholdMilliseconds { get; private set; } = null!;

        /// <summary>
        /// Alert if lower than
        /// </summary>
        [Output("thresholdPercent")]
        public Output<double?> ThresholdPercent { get; private set; } = null!;


        /// <summary>
        /// Create a DiskAnomalyRules resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DiskAnomalyRules(string name, DiskAnomalyRulesArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/diskAnomalyRules:DiskAnomalyRules", name, args ?? new DiskAnomalyRulesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DiskAnomalyRules(string name, Input<string> id, DiskAnomalyRulesState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/diskAnomalyRules:DiskAnomalyRules", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DiskAnomalyRules resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DiskAnomalyRules Get(string name, Input<string> id, DiskAnomalyRulesState? state = null, CustomResourceOptions? options = null)
        {
            return new DiskAnomalyRules(name, id, state, options);
        }
    }

    public sealed class DiskAnomalyRulesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Only apply to disks whose name matches
        /// </summary>
        [Input("diskNameFilter", required: true)]
        public Input<Inputs.DiskAnomalyRulesDiskNameFilterArgs> DiskNameFilter { get; set; } = null!;

        /// <summary>
        /// This setting is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
        /// </summary>
        [Input("hostGroupId")]
        public Input<string>? HostGroupId { get; set; }

        /// <summary>
        /// Possible Values: `LOW_DISK_SPACE`, `LOW_INODES`, `READ_TIME_EXCEEDING`, `WRITE_TIME_EXCEEDING`
        /// </summary>
        [Input("metric", required: true)]
        public Input<string> Metric { get; set; } = null!;

        /// <summary>
        /// Name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Only alert if the threshold was violated in at least *n* of the last *m* samples
        /// </summary>
        [Input("sampleLimit", required: true)]
        public Input<Inputs.DiskAnomalyRulesSampleLimitArgs> SampleLimit { get; set; } = null!;

        [Input("tagFilters")]
        private InputList<string>? _tagFilters;

        /// <summary>
        /// Only apply to hosts that have the following tags
        /// </summary>
        public InputList<string> TagFilters
        {
            get => _tagFilters ?? (_tagFilters = new InputList<string>());
            set => _tagFilters = value;
        }

        /// <summary>
        /// Alert if higher than
        /// </summary>
        [Input("thresholdMilliseconds")]
        public Input<double>? ThresholdMilliseconds { get; set; }

        /// <summary>
        /// Alert if lower than
        /// </summary>
        [Input("thresholdPercent")]
        public Input<double>? ThresholdPercent { get; set; }

        public DiskAnomalyRulesArgs()
        {
        }
        public static new DiskAnomalyRulesArgs Empty => new DiskAnomalyRulesArgs();
    }

    public sealed class DiskAnomalyRulesState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Only apply to disks whose name matches
        /// </summary>
        [Input("diskNameFilter")]
        public Input<Inputs.DiskAnomalyRulesDiskNameFilterGetArgs>? DiskNameFilter { get; set; }

        /// <summary>
        /// This setting is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
        /// </summary>
        [Input("hostGroupId")]
        public Input<string>? HostGroupId { get; set; }

        /// <summary>
        /// Possible Values: `LOW_DISK_SPACE`, `LOW_INODES`, `READ_TIME_EXCEEDING`, `WRITE_TIME_EXCEEDING`
        /// </summary>
        [Input("metric")]
        public Input<string>? Metric { get; set; }

        /// <summary>
        /// Name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Only alert if the threshold was violated in at least *n* of the last *m* samples
        /// </summary>
        [Input("sampleLimit")]
        public Input<Inputs.DiskAnomalyRulesSampleLimitGetArgs>? SampleLimit { get; set; }

        [Input("tagFilters")]
        private InputList<string>? _tagFilters;

        /// <summary>
        /// Only apply to hosts that have the following tags
        /// </summary>
        public InputList<string> TagFilters
        {
            get => _tagFilters ?? (_tagFilters = new InputList<string>());
            set => _tagFilters = value;
        }

        /// <summary>
        /// Alert if higher than
        /// </summary>
        [Input("thresholdMilliseconds")]
        public Input<double>? ThresholdMilliseconds { get; set; }

        /// <summary>
        /// Alert if lower than
        /// </summary>
        [Input("thresholdPercent")]
        public Input<double>? ThresholdPercent { get; set; }

        public DiskAnomalyRulesState()
        {
        }
        public static new DiskAnomalyRulesState Empty => new DiskAnomalyRulesState();
    }
}
