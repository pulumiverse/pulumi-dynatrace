// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    public static class GetGeoCities
    {
        /// <summary>
        /// The `dynatrace.getGeoCities` data source retrieves the list of cities and their codes based on country and region code.
        /// 
        /// - `country_code` (String) - The ISO code of the required country
        /// - `region_code` (String) - The code of the required region
        /// 
        /// Geographic regions API: GET regions of a country - https://docs.dynatrace.com/docs/shortlink/api-v2-rum-geographic-regions-get-regions-country
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Dynatrace.GetGeoCities.Invoke(new()
        ///     {
        ///         CountryCode = "FR",
        ///         RegionCode = "BRE",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["test"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetGeoCitiesResult> InvokeAsync(GetGeoCitiesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGeoCitiesResult>("dynatrace:index/getGeoCities:getGeoCities", args ?? new GetGeoCitiesArgs(), options.WithDefaults());

        /// <summary>
        /// The `dynatrace.getGeoCities` data source retrieves the list of cities and their codes based on country and region code.
        /// 
        /// - `country_code` (String) - The ISO code of the required country
        /// - `region_code` (String) - The code of the required region
        /// 
        /// Geographic regions API: GET regions of a country - https://docs.dynatrace.com/docs/shortlink/api-v2-rum-geographic-regions-get-regions-country
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Dynatrace.GetGeoCities.Invoke(new()
        ///     {
        ///         CountryCode = "FR",
        ///         RegionCode = "BRE",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["test"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetGeoCitiesResult> Invoke(GetGeoCitiesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGeoCitiesResult>("dynatrace:index/getGeoCities:getGeoCities", args ?? new GetGeoCitiesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The `dynatrace.getGeoCities` data source retrieves the list of cities and their codes based on country and region code.
        /// 
        /// - `country_code` (String) - The ISO code of the required country
        /// - `region_code` (String) - The code of the required region
        /// 
        /// Geographic regions API: GET regions of a country - https://docs.dynatrace.com/docs/shortlink/api-v2-rum-geographic-regions-get-regions-country
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Dynatrace.GetGeoCities.Invoke(new()
        ///     {
        ///         CountryCode = "FR",
        ///         RegionCode = "BRE",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["test"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetGeoCitiesResult> Invoke(GetGeoCitiesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetGeoCitiesResult>("dynatrace:index/getGeoCities:getGeoCities", args ?? new GetGeoCitiesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGeoCitiesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ISO code of the required country
        /// </summary>
        [Input("countryCode", required: true)]
        public string CountryCode { get; set; } = null!;

        /// <summary>
        /// The code of the required region
        /// </summary>
        [Input("regionCode", required: true)]
        public string RegionCode { get; set; } = null!;

        public GetGeoCitiesArgs()
        {
        }
        public static new GetGeoCitiesArgs Empty => new GetGeoCitiesArgs();
    }

    public sealed class GetGeoCitiesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ISO code of the required country
        /// </summary>
        [Input("countryCode", required: true)]
        public Input<string> CountryCode { get; set; } = null!;

        /// <summary>
        /// The code of the required region
        /// </summary>
        [Input("regionCode", required: true)]
        public Input<string> RegionCode { get; set; } = null!;

        public GetGeoCitiesInvokeArgs()
        {
        }
        public static new GetGeoCitiesInvokeArgs Empty => new GetGeoCitiesInvokeArgs();
    }


    [OutputType]
    public sealed class GetGeoCitiesResult
    {
        public readonly ImmutableArray<Outputs.GetGeoCitiesCityResult> Cities;
        /// <summary>
        /// The ISO code of the required country
        /// </summary>
        public readonly string CountryCode;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The code of the required region
        /// </summary>
        public readonly string RegionCode;

        [OutputConstructor]
        private GetGeoCitiesResult(
            ImmutableArray<Outputs.GetGeoCitiesCityResult> cities,

            string countryCode,

            string id,

            string regionCode)
        {
            Cities = cities;
            CountryCode = countryCode;
            Id = id;
            RegionCode = regionCode;
        }
    }
}
