// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/processAvailability:ProcessAvailability")]
    public partial class ProcessAvailability : global::Pulumi.CustomResource
    {
        /// <summary>
        /// This setting is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this
        /// instance regarding order. If not specified when creating the setting will be added to the end of the list. If not
        /// specified during update the order will remain untouched
        /// </summary>
        [Output("insertAfter")]
        public Output<string> InsertAfter { get; private set; } = null!;

        /// <summary>
        /// Set of additional key-value properties to be attached to the triggered event.
        /// </summary>
        [Output("metadata")]
        public Output<Outputs.ProcessAvailabilityMetadata?> Metadata { get; private set; } = null!;

        /// <summary>
        /// Specify a minimum number of processes matching the monitoring rule. If it's not satisfied, an alert will open.
        /// </summary>
        [Output("minimumProcesses")]
        public Output<int?> MinimumProcesses { get; private set; } = null!;

        /// <summary>
        /// Monitoring rule name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Select the operating systems on which the monitoring rule should be applied.
        /// </summary>
        [Output("operatingSystems")]
        public Output<ImmutableArray<string>> OperatingSystems { get; private set; } = null!;

        /// <summary>
        /// Define process detection rules by selecting a process property and a condition. Each monitoring rule can have multiple
        /// detection rules associated with it.
        /// </summary>
        [Output("rules")]
        public Output<Outputs.ProcessAvailabilityRules?> Rules { get; private set; } = null!;

        /// <summary>
        /// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
        /// </summary>
        [Output("scope")]
        public Output<string?> Scope { get; private set; } = null!;


        /// <summary>
        /// Create a ProcessAvailability resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProcessAvailability(string name, ProcessAvailabilityArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/processAvailability:ProcessAvailability", name, args ?? new ProcessAvailabilityArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProcessAvailability(string name, Input<string> id, ProcessAvailabilityState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/processAvailability:ProcessAvailability", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProcessAvailability resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProcessAvailability Get(string name, Input<string> id, ProcessAvailabilityState? state = null, CustomResourceOptions? options = null)
        {
            return new ProcessAvailability(name, id, state, options);
        }
    }

    public sealed class ProcessAvailabilityArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This setting is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this
        /// instance regarding order. If not specified when creating the setting will be added to the end of the list. If not
        /// specified during update the order will remain untouched
        /// </summary>
        [Input("insertAfter")]
        public Input<string>? InsertAfter { get; set; }

        /// <summary>
        /// Set of additional key-value properties to be attached to the triggered event.
        /// </summary>
        [Input("metadata")]
        public Input<Inputs.ProcessAvailabilityMetadataArgs>? Metadata { get; set; }

        /// <summary>
        /// Specify a minimum number of processes matching the monitoring rule. If it's not satisfied, an alert will open.
        /// </summary>
        [Input("minimumProcesses")]
        public Input<int>? MinimumProcesses { get; set; }

        /// <summary>
        /// Monitoring rule name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("operatingSystems")]
        private InputList<string>? _operatingSystems;

        /// <summary>
        /// Select the operating systems on which the monitoring rule should be applied.
        /// </summary>
        public InputList<string> OperatingSystems
        {
            get => _operatingSystems ?? (_operatingSystems = new InputList<string>());
            set => _operatingSystems = value;
        }

        /// <summary>
        /// Define process detection rules by selecting a process property and a condition. Each monitoring rule can have multiple
        /// detection rules associated with it.
        /// </summary>
        [Input("rules")]
        public Input<Inputs.ProcessAvailabilityRulesArgs>? Rules { get; set; }

        /// <summary>
        /// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        public ProcessAvailabilityArgs()
        {
        }
        public static new ProcessAvailabilityArgs Empty => new ProcessAvailabilityArgs();
    }

    public sealed class ProcessAvailabilityState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This setting is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this
        /// instance regarding order. If not specified when creating the setting will be added to the end of the list. If not
        /// specified during update the order will remain untouched
        /// </summary>
        [Input("insertAfter")]
        public Input<string>? InsertAfter { get; set; }

        /// <summary>
        /// Set of additional key-value properties to be attached to the triggered event.
        /// </summary>
        [Input("metadata")]
        public Input<Inputs.ProcessAvailabilityMetadataGetArgs>? Metadata { get; set; }

        /// <summary>
        /// Specify a minimum number of processes matching the monitoring rule. If it's not satisfied, an alert will open.
        /// </summary>
        [Input("minimumProcesses")]
        public Input<int>? MinimumProcesses { get; set; }

        /// <summary>
        /// Monitoring rule name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("operatingSystems")]
        private InputList<string>? _operatingSystems;

        /// <summary>
        /// Select the operating systems on which the monitoring rule should be applied.
        /// </summary>
        public InputList<string> OperatingSystems
        {
            get => _operatingSystems ?? (_operatingSystems = new InputList<string>());
            set => _operatingSystems = value;
        }

        /// <summary>
        /// Define process detection rules by selecting a process property and a condition. Each monitoring rule can have multiple
        /// detection rules associated with it.
        /// </summary>
        [Input("rules")]
        public Input<Inputs.ProcessAvailabilityRulesGetArgs>? Rules { get; set; }

        /// <summary>
        /// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        public ProcessAvailabilityState()
        {
        }
        public static new ProcessAvailabilityState Empty => new ProcessAvailabilityState();
    }
}
