// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/ownershipConfig:OwnershipConfig")]
    public partial class OwnershipConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Tags and metadata are key-value pairs. Define keys for tags and metadata that are considered for ownership. If a tag or any metadata starts with a key defined below, the value of the tag or metadata is considered a team identifier.
        /// </summary>
        [Output("ownershipIdentifiers")]
        public Output<Outputs.OwnershipConfigOwnershipIdentifiers> OwnershipIdentifiers { get; private set; } = null!;


        /// <summary>
        /// Create a OwnershipConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OwnershipConfig(string name, OwnershipConfigArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/ownershipConfig:OwnershipConfig", name, args ?? new OwnershipConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OwnershipConfig(string name, Input<string> id, OwnershipConfigState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/ownershipConfig:OwnershipConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OwnershipConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OwnershipConfig Get(string name, Input<string> id, OwnershipConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new OwnershipConfig(name, id, state, options);
        }
    }

    public sealed class OwnershipConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Tags and metadata are key-value pairs. Define keys for tags and metadata that are considered for ownership. If a tag or any metadata starts with a key defined below, the value of the tag or metadata is considered a team identifier.
        /// </summary>
        [Input("ownershipIdentifiers", required: true)]
        public Input<Inputs.OwnershipConfigOwnershipIdentifiersArgs> OwnershipIdentifiers { get; set; } = null!;

        public OwnershipConfigArgs()
        {
        }
        public static new OwnershipConfigArgs Empty => new OwnershipConfigArgs();
    }

    public sealed class OwnershipConfigState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Tags and metadata are key-value pairs. Define keys for tags and metadata that are considered for ownership. If a tag or any metadata starts with a key defined below, the value of the tag or metadata is considered a team identifier.
        /// </summary>
        [Input("ownershipIdentifiers")]
        public Input<Inputs.OwnershipConfigOwnershipIdentifiersGetArgs>? OwnershipIdentifiers { get; set; }

        public OwnershipConfigState()
        {
        }
        public static new OwnershipConfigState Empty => new OwnershipConfigState();
    }
}
