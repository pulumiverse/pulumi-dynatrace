// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/managementZone:ManagementZone")]
    public partial class ManagementZone : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the management zone
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// A list of dimensional data rules for management zone usage. If several rules are specified, the `or` logic applies
        /// </summary>
        [Output("dimensionalRules")]
        public Output<ImmutableArray<Outputs.ManagementZoneDimensionalRule>> DimensionalRules { get; private set; } = null!;

        /// <summary>
        /// A list of entity-selector based rules for management zone usage. If several rules are specified, the `or` logic applies
        /// </summary>
        [Output("entitySelectorBasedRules")]
        public Output<ImmutableArray<Outputs.ManagementZoneEntitySelectorBasedRule>> EntitySelectorBasedRules { get; private set; } = null!;

        /// <summary>
        /// The name of the management zone
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A list of rules for management zone usage. Each rule is evaluated independently of all other rules
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.ManagementZoneRule>> Rules { get; private set; } = null!;

        /// <summary>
        /// allows for configuring properties that are not explicitly supported by the current version of this provider
        /// </summary>
        [Output("unknowns")]
        public Output<string?> Unknowns { get; private set; } = null!;


        /// <summary>
        /// Create a ManagementZone resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ManagementZone(string name, ManagementZoneArgs? args = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/managementZone:ManagementZone", name, args ?? new ManagementZoneArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ManagementZone(string name, Input<string> id, ManagementZoneState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/managementZone:ManagementZone", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ManagementZone resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ManagementZone Get(string name, Input<string> id, ManagementZoneState? state = null, CustomResourceOptions? options = null)
        {
            return new ManagementZone(name, id, state, options);
        }
    }

    public sealed class ManagementZoneArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the management zone
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("dimensionalRules")]
        private InputList<Inputs.ManagementZoneDimensionalRuleArgs>? _dimensionalRules;

        /// <summary>
        /// A list of dimensional data rules for management zone usage. If several rules are specified, the `or` logic applies
        /// </summary>
        public InputList<Inputs.ManagementZoneDimensionalRuleArgs> DimensionalRules
        {
            get => _dimensionalRules ?? (_dimensionalRules = new InputList<Inputs.ManagementZoneDimensionalRuleArgs>());
            set => _dimensionalRules = value;
        }

        [Input("entitySelectorBasedRules")]
        private InputList<Inputs.ManagementZoneEntitySelectorBasedRuleArgs>? _entitySelectorBasedRules;

        /// <summary>
        /// A list of entity-selector based rules for management zone usage. If several rules are specified, the `or` logic applies
        /// </summary>
        public InputList<Inputs.ManagementZoneEntitySelectorBasedRuleArgs> EntitySelectorBasedRules
        {
            get => _entitySelectorBasedRules ?? (_entitySelectorBasedRules = new InputList<Inputs.ManagementZoneEntitySelectorBasedRuleArgs>());
            set => _entitySelectorBasedRules = value;
        }

        /// <summary>
        /// The name of the management zone
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("rules")]
        private InputList<Inputs.ManagementZoneRuleArgs>? _rules;

        /// <summary>
        /// A list of rules for management zone usage. Each rule is evaluated independently of all other rules
        /// </summary>
        public InputList<Inputs.ManagementZoneRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.ManagementZoneRuleArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// allows for configuring properties that are not explicitly supported by the current version of this provider
        /// </summary>
        [Input("unknowns")]
        public Input<string>? Unknowns { get; set; }

        public ManagementZoneArgs()
        {
        }
        public static new ManagementZoneArgs Empty => new ManagementZoneArgs();
    }

    public sealed class ManagementZoneState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the management zone
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("dimensionalRules")]
        private InputList<Inputs.ManagementZoneDimensionalRuleGetArgs>? _dimensionalRules;

        /// <summary>
        /// A list of dimensional data rules for management zone usage. If several rules are specified, the `or` logic applies
        /// </summary>
        public InputList<Inputs.ManagementZoneDimensionalRuleGetArgs> DimensionalRules
        {
            get => _dimensionalRules ?? (_dimensionalRules = new InputList<Inputs.ManagementZoneDimensionalRuleGetArgs>());
            set => _dimensionalRules = value;
        }

        [Input("entitySelectorBasedRules")]
        private InputList<Inputs.ManagementZoneEntitySelectorBasedRuleGetArgs>? _entitySelectorBasedRules;

        /// <summary>
        /// A list of entity-selector based rules for management zone usage. If several rules are specified, the `or` logic applies
        /// </summary>
        public InputList<Inputs.ManagementZoneEntitySelectorBasedRuleGetArgs> EntitySelectorBasedRules
        {
            get => _entitySelectorBasedRules ?? (_entitySelectorBasedRules = new InputList<Inputs.ManagementZoneEntitySelectorBasedRuleGetArgs>());
            set => _entitySelectorBasedRules = value;
        }

        /// <summary>
        /// The name of the management zone
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("rules")]
        private InputList<Inputs.ManagementZoneRuleGetArgs>? _rules;

        /// <summary>
        /// A list of rules for management zone usage. Each rule is evaluated independently of all other rules
        /// </summary>
        public InputList<Inputs.ManagementZoneRuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.ManagementZoneRuleGetArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// allows for configuring properties that are not explicitly supported by the current version of this provider
        /// </summary>
        [Input("unknowns")]
        public Input<string>? Unknowns { get; set; }

        public ManagementZoneState()
        {
        }
        public static new ManagementZoneState Empty => new ManagementZoneState();
    }
}
