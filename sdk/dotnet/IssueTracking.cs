// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/issueTracking:IssueTracking")]
    public partial class IssueTracking : global::Pulumi.CustomResource
    {
        /// <summary>
        /// This setting is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        /// </summary>
        [Output("insertAfter")]
        public Output<string> InsertAfter { get; private set; } = null!;

        /// <summary>
        /// Set a label to identify these issues, for example, `release_blocker` or `non-critical`
        /// </summary>
        [Output("issuelabel")]
        public Output<string> Issuelabel { get; private set; } = null!;

        /// <summary>
        /// You can use the following placeholders to automatically insert values from the **Release monitoring** page in your query: `{NAME}`, `{VERSION}`, `{STAGE}`, `{PRODUCT}`.
        /// </summary>
        [Output("issuequery")]
        public Output<string> Issuequery { get; private set; } = null!;

        /// <summary>
        /// Possible Values: `ERROR`, `INFO`, `RESOLVED`
        /// </summary>
        [Output("issuetheme")]
        public Output<string> Issuetheme { get; private set; } = null!;

        /// <summary>
        /// Possible Values: `GITHUB`, `GITLAB`, `JIRA`, `JIRA_CLOUD`, `JIRA_ON_PREMISE`, `SERVICENOW`
        /// </summary>
        [Output("issuetrackersystem")]
        public Output<string> Issuetrackersystem { get; private set; } = null!;

        /// <summary>
        /// Password
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// Token
        /// </summary>
        [Output("token")]
        public Output<string?> Token { get; private set; } = null!;

        /// <summary>
        /// For Jira, use the base URL (for example, https://jira.yourcompany.com); for GitHub, use the repository URL (for example, https://github.com/org/repo); for GitLab, use the specific project API for a single project (for example, https://gitlab.com/api/v4/projects/:projectId), and the specific group API for a multiple projects (for example, https://gitlab.com/api/v4/groups/:groupId); for ServiceNow, use your company instance URL (for example, https://yourinstance.service-now.com/)
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;

        /// <summary>
        /// Username
        /// </summary>
        [Output("username")]
        public Output<string> Username { get; private set; } = null!;


        /// <summary>
        /// Create a IssueTracking resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IssueTracking(string name, IssueTrackingArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/issueTracking:IssueTracking", name, args ?? new IssueTrackingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IssueTracking(string name, Input<string> id, IssueTrackingState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/issueTracking:IssueTracking", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
                AdditionalSecretOutputs =
                {
                    "token",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IssueTracking resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IssueTracking Get(string name, Input<string> id, IssueTrackingState? state = null, CustomResourceOptions? options = null)
        {
            return new IssueTracking(name, id, state, options);
        }
    }

    public sealed class IssueTrackingArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This setting is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        /// </summary>
        [Input("insertAfter")]
        public Input<string>? InsertAfter { get; set; }

        /// <summary>
        /// Set a label to identify these issues, for example, `release_blocker` or `non-critical`
        /// </summary>
        [Input("issuelabel", required: true)]
        public Input<string> Issuelabel { get; set; } = null!;

        /// <summary>
        /// You can use the following placeholders to automatically insert values from the **Release monitoring** page in your query: `{NAME}`, `{VERSION}`, `{STAGE}`, `{PRODUCT}`.
        /// </summary>
        [Input("issuequery", required: true)]
        public Input<string> Issuequery { get; set; } = null!;

        /// <summary>
        /// Possible Values: `ERROR`, `INFO`, `RESOLVED`
        /// </summary>
        [Input("issuetheme", required: true)]
        public Input<string> Issuetheme { get; set; } = null!;

        /// <summary>
        /// Possible Values: `GITHUB`, `GITLAB`, `JIRA`, `JIRA_CLOUD`, `JIRA_ON_PREMISE`, `SERVICENOW`
        /// </summary>
        [Input("issuetrackersystem", required: true)]
        public Input<string> Issuetrackersystem { get; set; } = null!;

        /// <summary>
        /// Password
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        [Input("token")]
        private Input<string>? _token;

        /// <summary>
        /// Token
        /// </summary>
        public Input<string>? Token
        {
            get => _token;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _token = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// For Jira, use the base URL (for example, https://jira.yourcompany.com); for GitHub, use the repository URL (for example, https://github.com/org/repo); for GitLab, use the specific project API for a single project (for example, https://gitlab.com/api/v4/projects/:projectId), and the specific group API for a multiple projects (for example, https://gitlab.com/api/v4/groups/:groupId); for ServiceNow, use your company instance URL (for example, https://yourinstance.service-now.com/)
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        /// <summary>
        /// Username
        /// </summary>
        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        public IssueTrackingArgs()
        {
        }
        public static new IssueTrackingArgs Empty => new IssueTrackingArgs();
    }

    public sealed class IssueTrackingState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This setting is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        /// </summary>
        [Input("insertAfter")]
        public Input<string>? InsertAfter { get; set; }

        /// <summary>
        /// Set a label to identify these issues, for example, `release_blocker` or `non-critical`
        /// </summary>
        [Input("issuelabel")]
        public Input<string>? Issuelabel { get; set; }

        /// <summary>
        /// You can use the following placeholders to automatically insert values from the **Release monitoring** page in your query: `{NAME}`, `{VERSION}`, `{STAGE}`, `{PRODUCT}`.
        /// </summary>
        [Input("issuequery")]
        public Input<string>? Issuequery { get; set; }

        /// <summary>
        /// Possible Values: `ERROR`, `INFO`, `RESOLVED`
        /// </summary>
        [Input("issuetheme")]
        public Input<string>? Issuetheme { get; set; }

        /// <summary>
        /// Possible Values: `GITHUB`, `GITLAB`, `JIRA`, `JIRA_CLOUD`, `JIRA_ON_PREMISE`, `SERVICENOW`
        /// </summary>
        [Input("issuetrackersystem")]
        public Input<string>? Issuetrackersystem { get; set; }

        /// <summary>
        /// Password
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        [Input("token")]
        private Input<string>? _token;

        /// <summary>
        /// Token
        /// </summary>
        public Input<string>? Token
        {
            get => _token;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _token = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// For Jira, use the base URL (for example, https://jira.yourcompany.com); for GitHub, use the repository URL (for example, https://github.com/org/repo); for GitLab, use the specific project API for a single project (for example, https://gitlab.com/api/v4/projects/:projectId), and the specific group API for a multiple projects (for example, https://gitlab.com/api/v4/groups/:groupId); for ServiceNow, use your company instance URL (for example, https://yourinstance.service-now.com/)
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        /// <summary>
        /// Username
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public IssueTrackingState()
        {
        }
        public static new IssueTrackingState Empty => new IssueTrackingState();
    }
}
