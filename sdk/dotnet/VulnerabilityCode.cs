// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/vulnerabilityCode:VulnerabilityCode")]
    public partial class VulnerabilityCode : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Define criteria
        /// </summary>
        [Output("criteria")]
        public Output<Outputs.VulnerabilityCodeCriteria?> Criteria { get; private set; } = null!;

        /// <summary>
        /// This setting is enabled (`True`) or disabled (`False`)
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        /// </summary>
        [Output("insertAfter")]
        public Output<string> InsertAfter { get; private set; } = null!;

        /// <summary>
        /// Step 3: Leave comment (optional)
        /// </summary>
        [Output("metadata")]
        public Output<Outputs.VulnerabilityCodeMetadata> Metadata { get; private set; } = null!;

        /// <summary>
        /// If you add more than one condition, note that all conditions must be true simultaneously for the rule to apply.
        /// </summary>
        [Output("resourceAttributeConditions")]
        public Output<Outputs.VulnerabilityCodeResourceAttributeConditions?> ResourceAttributeConditions { get; private set; } = null!;

        /// <summary>
        /// Rule name
        /// </summary>
        [Output("ruleName")]
        public Output<string?> RuleName { get; private set; } = null!;

        /// <summary>
        /// Step 1: Select code-level vulnerability detection behavior
        /// </summary>
        [Output("vulnerabilityDetectionControl")]
        public Output<Outputs.VulnerabilityCodeVulnerabilityDetectionControl> VulnerabilityDetectionControl { get; private set; } = null!;


        /// <summary>
        /// Create a VulnerabilityCode resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VulnerabilityCode(string name, VulnerabilityCodeArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/vulnerabilityCode:VulnerabilityCode", name, args ?? new VulnerabilityCodeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VulnerabilityCode(string name, Input<string> id, VulnerabilityCodeState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/vulnerabilityCode:VulnerabilityCode", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VulnerabilityCode resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VulnerabilityCode Get(string name, Input<string> id, VulnerabilityCodeState? state = null, CustomResourceOptions? options = null)
        {
            return new VulnerabilityCode(name, id, state, options);
        }
    }

    public sealed class VulnerabilityCodeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Define criteria
        /// </summary>
        [Input("criteria")]
        public Input<Inputs.VulnerabilityCodeCriteriaArgs>? Criteria { get; set; }

        /// <summary>
        /// This setting is enabled (`True`) or disabled (`False`)
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        /// </summary>
        [Input("insertAfter")]
        public Input<string>? InsertAfter { get; set; }

        /// <summary>
        /// Step 3: Leave comment (optional)
        /// </summary>
        [Input("metadata", required: true)]
        public Input<Inputs.VulnerabilityCodeMetadataArgs> Metadata { get; set; } = null!;

        /// <summary>
        /// If you add more than one condition, note that all conditions must be true simultaneously for the rule to apply.
        /// </summary>
        [Input("resourceAttributeConditions")]
        public Input<Inputs.VulnerabilityCodeResourceAttributeConditionsArgs>? ResourceAttributeConditions { get; set; }

        /// <summary>
        /// Rule name
        /// </summary>
        [Input("ruleName")]
        public Input<string>? RuleName { get; set; }

        /// <summary>
        /// Step 1: Select code-level vulnerability detection behavior
        /// </summary>
        [Input("vulnerabilityDetectionControl", required: true)]
        public Input<Inputs.VulnerabilityCodeVulnerabilityDetectionControlArgs> VulnerabilityDetectionControl { get; set; } = null!;

        public VulnerabilityCodeArgs()
        {
        }
        public static new VulnerabilityCodeArgs Empty => new VulnerabilityCodeArgs();
    }

    public sealed class VulnerabilityCodeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Define criteria
        /// </summary>
        [Input("criteria")]
        public Input<Inputs.VulnerabilityCodeCriteriaGetArgs>? Criteria { get; set; }

        /// <summary>
        /// This setting is enabled (`True`) or disabled (`False`)
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        /// </summary>
        [Input("insertAfter")]
        public Input<string>? InsertAfter { get; set; }

        /// <summary>
        /// Step 3: Leave comment (optional)
        /// </summary>
        [Input("metadata")]
        public Input<Inputs.VulnerabilityCodeMetadataGetArgs>? Metadata { get; set; }

        /// <summary>
        /// If you add more than one condition, note that all conditions must be true simultaneously for the rule to apply.
        /// </summary>
        [Input("resourceAttributeConditions")]
        public Input<Inputs.VulnerabilityCodeResourceAttributeConditionsGetArgs>? ResourceAttributeConditions { get; set; }

        /// <summary>
        /// Rule name
        /// </summary>
        [Input("ruleName")]
        public Input<string>? RuleName { get; set; }

        /// <summary>
        /// Step 1: Select code-level vulnerability detection behavior
        /// </summary>
        [Input("vulnerabilityDetectionControl")]
        public Input<Inputs.VulnerabilityCodeVulnerabilityDetectionControlGetArgs>? VulnerabilityDetectionControl { get; set; }

        public VulnerabilityCodeState()
        {
        }
        public static new VulnerabilityCodeState Empty => new VulnerabilityCodeState();
    }
}
