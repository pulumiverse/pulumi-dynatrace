// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    public static class GetEntity
    {
        /// <summary>
        /// The entity data source allows the entity ID to be retrieved by its name and type.
        /// 
        /// - `name` (String) Display name of the entity
        /// - `type` (String) Type of the entity, e.g. SERVICE. All available entity types can be retrieved with [/api/v2/entityTypes](https://www.dynatrace.com/support/help/dynatrace-api/environment-api/entity-v2/get-all-entity-types).
        /// 
        /// If multiple services match the given criteria, the first result will be retrieved.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Dynatrace.GetEntity.Invoke(new()
        ///     {
        ///         Type = "SERVICE",
        ///         Name = "BookingService",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = test.Apply(getEntityResult =&gt; getEntityResult.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetEntityResult> InvokeAsync(GetEntityArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEntityResult>("dynatrace:index/getEntity:getEntity", args ?? new GetEntityArgs(), options.WithDefaults());

        /// <summary>
        /// The entity data source allows the entity ID to be retrieved by its name and type.
        /// 
        /// - `name` (String) Display name of the entity
        /// - `type` (String) Type of the entity, e.g. SERVICE. All available entity types can be retrieved with [/api/v2/entityTypes](https://www.dynatrace.com/support/help/dynatrace-api/environment-api/entity-v2/get-all-entity-types).
        /// 
        /// If multiple services match the given criteria, the first result will be retrieved.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Dynatrace.GetEntity.Invoke(new()
        ///     {
        ///         Type = "SERVICE",
        ///         Name = "BookingService",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = test.Apply(getEntityResult =&gt; getEntityResult.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetEntityResult> Invoke(GetEntityInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEntityResult>("dynatrace:index/getEntity:getEntity", args ?? new GetEntityInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The entity data source allows the entity ID to be retrieved by its name and type.
        /// 
        /// - `name` (String) Display name of the entity
        /// - `type` (String) Type of the entity, e.g. SERVICE. All available entity types can be retrieved with [/api/v2/entityTypes](https://www.dynatrace.com/support/help/dynatrace-api/environment-api/entity-v2/get-all-entity-types).
        /// 
        /// If multiple services match the given criteria, the first result will be retrieved.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Dynatrace.GetEntity.Invoke(new()
        ///     {
        ///         Type = "SERVICE",
        ///         Name = "BookingService",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = test.Apply(getEntityResult =&gt; getEntityResult.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetEntityResult> Invoke(GetEntityInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetEntityResult>("dynatrace:index/getEntity:getEntity", args ?? new GetEntityInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEntityArgs : global::Pulumi.InvokeArgs
    {
        [Input("entitySelector")]
        public string? EntitySelector { get; set; }

        [Input("from")]
        public string? From { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("to")]
        public string? To { get; set; }

        [Input("type")]
        public string? Type { get; set; }

        public GetEntityArgs()
        {
        }
        public static new GetEntityArgs Empty => new GetEntityArgs();
    }

    public sealed class GetEntityInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("entitySelector")]
        public Input<string>? EntitySelector { get; set; }

        [Input("from")]
        public Input<string>? From { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("to")]
        public Input<string>? To { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        public GetEntityInvokeArgs()
        {
        }
        public static new GetEntityInvokeArgs Empty => new GetEntityInvokeArgs();
    }


    [OutputType]
    public sealed class GetEntityResult
    {
        public readonly string? EntitySelector;
        public readonly string? From;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? Name;
        public readonly ImmutableDictionary<string, string> Properties;
        public readonly string? To;
        public readonly string? Type;

        [OutputConstructor]
        private GetEntityResult(
            string? entitySelector,

            string? from,

            string id,

            string? name,

            ImmutableDictionary<string, string> properties,

            string? to,

            string? type)
        {
            EntitySelector = entitySelector;
            From = from;
            Id = id;
            Name = name;
            Properties = properties;
            To = to;
            Type = type;
        }
    }
}
