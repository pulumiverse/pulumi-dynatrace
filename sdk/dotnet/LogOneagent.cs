// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/logOneagent:LogOneagent")]
    public partial class LogOneagent : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enables automatic detection of timezone in container's logs if it is not explicitly defined in content or configured.
        /// </summary>
        [Output("containerTimezoneHeuristicEnabled")]
        public Output<bool> ContainerTimezoneHeuristicEnabled { get; private set; } = null!;

        /// <summary>
        /// Allows detection of log messages written to the containerized application's stdout/stderr streams.
        /// </summary>
        [Output("containersLogsDetectionEnabled")]
        public Output<bool> ContainersLogsDetectionEnabled { get; private set; } = null!;

        /// <summary>
        /// Defines the number of characters in every log line (starting from the first character in the line) where the timestamp is searched.
        /// </summary>
        [Output("dateSearchLimitBytes")]
        public Output<int> DateSearchLimitBytes { get; private set; } = null!;

        /// <summary>
        /// Default timezone for agent if more specific configurations is not defined.
        /// </summary>
        [Output("defaultTimezone")]
        public Output<string> DefaultTimezone { get; private set; } = null!;

        /// <summary>
        /// Defines the maximum timeout value, in seconds, for the query extracting Windows Event Logs
        /// </summary>
        [Output("eventLogQueryTimeoutSec")]
        public Output<int> EventLogQueryTimeoutSec { get; private set; } = null!;

        /// <summary>
        /// Allows detection of logs and event logs written by IIS server.
        /// </summary>
        [Output("iisdetectionEnabled")]
        public Output<bool> IisdetectionEnabled { get; private set; } = null!;

        /// <summary>
        /// Allows detection of logs written to mounted network storage drives. Applies only to Linux hosts. For other OSes it's always enabled.
        /// </summary>
        [Output("logScannerLinuxNfsEnabled")]
        public Output<bool> LogScannerLinuxNfsEnabled { get; private set; } = null!;

        /// <summary>
        /// Defines the maximum number of log group instances per entity after which, the new automatic ones wouldn't be added.
        /// </summary>
        [Output("maxLgisPerEntityCount")]
        public Output<int> MaxLgisPerEntityCount { get; private set; } = null!;

        /// <summary>
        /// Defines the minimum number of bytes in log file required for binary detection.
        /// </summary>
        [Output("minBinaryDetectionLimitBytes")]
        public Output<int> MinBinaryDetectionLimitBytes { get; private set; } = null!;

        /// <summary>
        /// Enabling this option may affect your licensing costs. For more details, see [documentation](https://dt-url.net/4l02yi8).
        /// </summary>
        [Output("monitorOwnLogsEnabled")]
        public Output<bool> MonitorOwnLogsEnabled { get; private set; } = null!;

        /// <summary>
        /// Automatically detect logs written by important processes. For more details, check our [documentation](https://dt-url.net/7v02z76)
        /// </summary>
        [Output("openLogFilesDetectionEnabled")]
        public Output<bool> OpenLogFilesDetectionEnabled { get; private set; } = null!;

        /// <summary>
        /// The scope of this setting (HOST, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
        /// </summary>
        [Output("scope")]
        public Output<string?> Scope { get; private set; } = null!;

        /// <summary>
        /// Defines the number of characters in every log line (starting from the first character in the line) where severity is searched.
        /// </summary>
        [Output("severityDetectionLimitBytes")]
        public Output<int> SeverityDetectionLimitBytes { get; private set; } = null!;

        /// <summary>
        /// Defines the number of the first lines of every log entry where severity is searched.
        /// </summary>
        [Output("severityDetectionLinesLimit")]
        public Output<int> SeverityDetectionLinesLimit { get; private set; } = null!;

        /// <summary>
        /// Linux: syslog, message log Windows: system, application, security event logs
        /// </summary>
        [Output("systemLogsDetectionEnabled")]
        public Output<bool> SystemLogsDetectionEnabled { get; private set; } = null!;


        /// <summary>
        /// Create a LogOneagent resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LogOneagent(string name, LogOneagentArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/logOneagent:LogOneagent", name, args ?? new LogOneagentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LogOneagent(string name, Input<string> id, LogOneagentState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/logOneagent:LogOneagent", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LogOneagent resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LogOneagent Get(string name, Input<string> id, LogOneagentState? state = null, CustomResourceOptions? options = null)
        {
            return new LogOneagent(name, id, state, options);
        }
    }

    public sealed class LogOneagentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enables automatic detection of timezone in container's logs if it is not explicitly defined in content or configured.
        /// </summary>
        [Input("containerTimezoneHeuristicEnabled", required: true)]
        public Input<bool> ContainerTimezoneHeuristicEnabled { get; set; } = null!;

        /// <summary>
        /// Allows detection of log messages written to the containerized application's stdout/stderr streams.
        /// </summary>
        [Input("containersLogsDetectionEnabled", required: true)]
        public Input<bool> ContainersLogsDetectionEnabled { get; set; } = null!;

        /// <summary>
        /// Defines the number of characters in every log line (starting from the first character in the line) where the timestamp is searched.
        /// </summary>
        [Input("dateSearchLimitBytes", required: true)]
        public Input<int> DateSearchLimitBytes { get; set; } = null!;

        /// <summary>
        /// Default timezone for agent if more specific configurations is not defined.
        /// </summary>
        [Input("defaultTimezone", required: true)]
        public Input<string> DefaultTimezone { get; set; } = null!;

        /// <summary>
        /// Defines the maximum timeout value, in seconds, for the query extracting Windows Event Logs
        /// </summary>
        [Input("eventLogQueryTimeoutSec", required: true)]
        public Input<int> EventLogQueryTimeoutSec { get; set; } = null!;

        /// <summary>
        /// Allows detection of logs and event logs written by IIS server.
        /// </summary>
        [Input("iisdetectionEnabled", required: true)]
        public Input<bool> IisdetectionEnabled { get; set; } = null!;

        /// <summary>
        /// Allows detection of logs written to mounted network storage drives. Applies only to Linux hosts. For other OSes it's always enabled.
        /// </summary>
        [Input("logScannerLinuxNfsEnabled", required: true)]
        public Input<bool> LogScannerLinuxNfsEnabled { get; set; } = null!;

        /// <summary>
        /// Defines the maximum number of log group instances per entity after which, the new automatic ones wouldn't be added.
        /// </summary>
        [Input("maxLgisPerEntityCount", required: true)]
        public Input<int> MaxLgisPerEntityCount { get; set; } = null!;

        /// <summary>
        /// Defines the minimum number of bytes in log file required for binary detection.
        /// </summary>
        [Input("minBinaryDetectionLimitBytes", required: true)]
        public Input<int> MinBinaryDetectionLimitBytes { get; set; } = null!;

        /// <summary>
        /// Enabling this option may affect your licensing costs. For more details, see [documentation](https://dt-url.net/4l02yi8).
        /// </summary>
        [Input("monitorOwnLogsEnabled", required: true)]
        public Input<bool> MonitorOwnLogsEnabled { get; set; } = null!;

        /// <summary>
        /// Automatically detect logs written by important processes. For more details, check our [documentation](https://dt-url.net/7v02z76)
        /// </summary>
        [Input("openLogFilesDetectionEnabled", required: true)]
        public Input<bool> OpenLogFilesDetectionEnabled { get; set; } = null!;

        /// <summary>
        /// The scope of this setting (HOST, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        /// <summary>
        /// Defines the number of characters in every log line (starting from the first character in the line) where severity is searched.
        /// </summary>
        [Input("severityDetectionLimitBytes", required: true)]
        public Input<int> SeverityDetectionLimitBytes { get; set; } = null!;

        /// <summary>
        /// Defines the number of the first lines of every log entry where severity is searched.
        /// </summary>
        [Input("severityDetectionLinesLimit", required: true)]
        public Input<int> SeverityDetectionLinesLimit { get; set; } = null!;

        /// <summary>
        /// Linux: syslog, message log Windows: system, application, security event logs
        /// </summary>
        [Input("systemLogsDetectionEnabled", required: true)]
        public Input<bool> SystemLogsDetectionEnabled { get; set; } = null!;

        public LogOneagentArgs()
        {
        }
        public static new LogOneagentArgs Empty => new LogOneagentArgs();
    }

    public sealed class LogOneagentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enables automatic detection of timezone in container's logs if it is not explicitly defined in content or configured.
        /// </summary>
        [Input("containerTimezoneHeuristicEnabled")]
        public Input<bool>? ContainerTimezoneHeuristicEnabled { get; set; }

        /// <summary>
        /// Allows detection of log messages written to the containerized application's stdout/stderr streams.
        /// </summary>
        [Input("containersLogsDetectionEnabled")]
        public Input<bool>? ContainersLogsDetectionEnabled { get; set; }

        /// <summary>
        /// Defines the number of characters in every log line (starting from the first character in the line) where the timestamp is searched.
        /// </summary>
        [Input("dateSearchLimitBytes")]
        public Input<int>? DateSearchLimitBytes { get; set; }

        /// <summary>
        /// Default timezone for agent if more specific configurations is not defined.
        /// </summary>
        [Input("defaultTimezone")]
        public Input<string>? DefaultTimezone { get; set; }

        /// <summary>
        /// Defines the maximum timeout value, in seconds, for the query extracting Windows Event Logs
        /// </summary>
        [Input("eventLogQueryTimeoutSec")]
        public Input<int>? EventLogQueryTimeoutSec { get; set; }

        /// <summary>
        /// Allows detection of logs and event logs written by IIS server.
        /// </summary>
        [Input("iisdetectionEnabled")]
        public Input<bool>? IisdetectionEnabled { get; set; }

        /// <summary>
        /// Allows detection of logs written to mounted network storage drives. Applies only to Linux hosts. For other OSes it's always enabled.
        /// </summary>
        [Input("logScannerLinuxNfsEnabled")]
        public Input<bool>? LogScannerLinuxNfsEnabled { get; set; }

        /// <summary>
        /// Defines the maximum number of log group instances per entity after which, the new automatic ones wouldn't be added.
        /// </summary>
        [Input("maxLgisPerEntityCount")]
        public Input<int>? MaxLgisPerEntityCount { get; set; }

        /// <summary>
        /// Defines the minimum number of bytes in log file required for binary detection.
        /// </summary>
        [Input("minBinaryDetectionLimitBytes")]
        public Input<int>? MinBinaryDetectionLimitBytes { get; set; }

        /// <summary>
        /// Enabling this option may affect your licensing costs. For more details, see [documentation](https://dt-url.net/4l02yi8).
        /// </summary>
        [Input("monitorOwnLogsEnabled")]
        public Input<bool>? MonitorOwnLogsEnabled { get; set; }

        /// <summary>
        /// Automatically detect logs written by important processes. For more details, check our [documentation](https://dt-url.net/7v02z76)
        /// </summary>
        [Input("openLogFilesDetectionEnabled")]
        public Input<bool>? OpenLogFilesDetectionEnabled { get; set; }

        /// <summary>
        /// The scope of this setting (HOST, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        /// <summary>
        /// Defines the number of characters in every log line (starting from the first character in the line) where severity is searched.
        /// </summary>
        [Input("severityDetectionLimitBytes")]
        public Input<int>? SeverityDetectionLimitBytes { get; set; }

        /// <summary>
        /// Defines the number of the first lines of every log entry where severity is searched.
        /// </summary>
        [Input("severityDetectionLinesLimit")]
        public Input<int>? SeverityDetectionLinesLimit { get; set; }

        /// <summary>
        /// Linux: syslog, message log Windows: system, application, security event logs
        /// </summary>
        [Input("systemLogsDetectionEnabled")]
        public Input<bool>? SystemLogsDetectionEnabled { get; set; }

        public LogOneagentState()
        {
        }
        public static new LogOneagentState Empty => new LogOneagentState();
    }
}
