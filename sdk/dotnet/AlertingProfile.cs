// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    /// <summary>
    /// !&gt; This resource API endpoint has been deprecated, please use dynatrace.Alerting instead.
    /// 
    /// &gt; This resource requires the API token scopes **Read configuration** (`ReadConfig`) and **Write configuration** (`WriteConfig`)
    /// 
    /// ## Dynatrace Documentation
    /// 
    /// - Alerting profiles - https://www.dynatrace.com/support/help/how-to-use-dynatrace/problem-detection-and-analysis/notifications-and-alerting/alerting-profiles
    /// 
    /// - Alerting profiles API - https://www.dynatrace.com/support/help/dynatrace-api/configuration-api/alerting-profiles-api
    /// 
    /// ## Resource Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Dynatrace = Pulumiverse.Dynatrace;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var _name_ = new Dynatrace.AlertingProfile("#name#", new()
    ///     {
    ///         DisplayName = "#name#",
    ///         MzId = "",
    ///         Rules = new[]
    ///         {
    ///             new Dynatrace.Inputs.AlertingProfileRuleArgs
    ///             {
    ///                 DelayInMinutes = 0,
    ///                 SeverityLevel = "AVAILABILITY",
    ///                 TagFilters = new[]
    ///                 {
    ///                     new Dynatrace.Inputs.AlertingProfileRuleTagFilterArgs
    ///                     {
    ///                         IncludeMode = "INCLUDE_ALL",
    ///                         TagFilters = new[]
    ///                         {
    ///                             new Dynatrace.Inputs.AlertingProfileRuleTagFilterTagFilterArgs
    ///                             {
    ///                                 Context = "CONTEXTLESS",
    ///                                 Key = "EnvironmentA",
    ///                                 Value = "production",
    ///                             },
    ///                             new Dynatrace.Inputs.AlertingProfileRuleTagFilterTagFilterArgs
    ///                             {
    ///                                 Context = "CONTEXTLESS",
    ///                                 Key = "Team",
    ///                                 Value = "test",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             new Dynatrace.Inputs.AlertingProfileRuleArgs
    ///             {
    ///                 DelayInMinutes = 0,
    ///                 SeverityLevel = "CUSTOM_ALERT",
    ///                 TagFilters = new[]
    ///                 {
    ///                     new Dynatrace.Inputs.AlertingProfileRuleTagFilterArgs
    ///                     {
    ///                         IncludeMode = "INCLUDE_ALL",
    ///                         TagFilters = new[]
    ///                         {
    ///                             new Dynatrace.Inputs.AlertingProfileRuleTagFilterTagFilterArgs
    ///                             {
    ///                                 Context = "CONTEXTLESS",
    ///                                 Key = "EnvironmentB",
    ///                                 Value = "production",
    ///                             },
    ///                             new Dynatrace.Inputs.AlertingProfileRuleTagFilterTagFilterArgs
    ///                             {
    ///                                 Context = "CONTEXTLESS",
    ///                                 Key = "Team",
    ///                                 Value = "test",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             new Dynatrace.Inputs.AlertingProfileRuleArgs
    ///             {
    ///                 DelayInMinutes = 0,
    ///                 SeverityLevel = "ERROR",
    ///                 TagFilters = new[]
    ///                 {
    ///                     new Dynatrace.Inputs.AlertingProfileRuleTagFilterArgs
    ///                     {
    ///                         IncludeMode = "INCLUDE_ALL",
    ///                         TagFilters = new[]
    ///                         {
    ///                             new Dynatrace.Inputs.AlertingProfileRuleTagFilterTagFilterArgs
    ///                             {
    ///                                 Context = "CONTEXTLESS",
    ///                                 Key = "EnvironmentC",
    ///                                 Value = "production",
    ///                             },
    ///                             new Dynatrace.Inputs.AlertingProfileRuleTagFilterTagFilterArgs
    ///                             {
    ///                                 Context = "CONTEXTLESS",
    ///                                 Key = "Team",
    ///                                 Value = "test",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             new Dynatrace.Inputs.AlertingProfileRuleArgs
    ///             {
    ///                 DelayInMinutes = 0,
    ///                 SeverityLevel = "MONITORING_UNAVAILABLE",
    ///                 TagFilters = new[]
    ///                 {
    ///                     new Dynatrace.Inputs.AlertingProfileRuleTagFilterArgs
    ///                     {
    ///                         IncludeMode = "INCLUDE_ALL",
    ///                         TagFilters = new[]
    ///                         {
    ///                             new Dynatrace.Inputs.AlertingProfileRuleTagFilterTagFilterArgs
    ///                             {
    ///                                 Context = "CONTEXTLESS",
    ///                                 Key = "EnvironmentD",
    ///                                 Value = "production",
    ///                             },
    ///                             new Dynatrace.Inputs.AlertingProfileRuleTagFilterTagFilterArgs
    ///                             {
    ///                                 Context = "CONTEXTLESS",
    ///                                 Key = "Team",
    ///                                 Value = "test",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             new Dynatrace.Inputs.AlertingProfileRuleArgs
    ///             {
    ///                 DelayInMinutes = 0,
    ///                 SeverityLevel = "PERFORMANCE",
    ///                 TagFilters = new[]
    ///                 {
    ///                     new Dynatrace.Inputs.AlertingProfileRuleTagFilterArgs
    ///                     {
    ///                         IncludeMode = "INCLUDE_ALL",
    ///                         TagFilters = new[]
    ///                         {
    ///                             new Dynatrace.Inputs.AlertingProfileRuleTagFilterTagFilterArgs
    ///                             {
    ///                                 Context = "CONTEXTLESS",
    ///                                 Key = "EnvironmentE",
    ///                                 Value = "production",
    ///                             },
    ///                             new Dynatrace.Inputs.AlertingProfileRuleTagFilterTagFilterArgs
    ///                             {
    ///                                 Context = "CONTEXTLESS",
    ///                                 Key = "Team",
    ///                                 Value = "test",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             new Dynatrace.Inputs.AlertingProfileRuleArgs
    ///             {
    ///                 DelayInMinutes = 0,
    ///                 SeverityLevel = "RESOURCE_CONTENTION",
    ///                 TagFilters = new[]
    ///                 {
    ///                     new Dynatrace.Inputs.AlertingProfileRuleTagFilterArgs
    ///                     {
    ///                         IncludeMode = "INCLUDE_ALL",
    ///                         TagFilters = new[]
    ///                         {
    ///                             new Dynatrace.Inputs.AlertingProfileRuleTagFilterTagFilterArgs
    ///                             {
    ///                                 Context = "CONTEXTLESS",
    ///                                 Key = "EnvironmentF",
    ///                                 Value = "production",
    ///                             },
    ///                             new Dynatrace.Inputs.AlertingProfileRuleTagFilterTagFilterArgs
    ///                             {
    ///                                 Context = "CONTEXTLESS",
    ///                                 Key = "Team",
    ///                                 Value = "test",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [DynatraceResourceType("dynatrace:index/alertingProfile:AlertingProfile")]
    public partial class AlertingProfile : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the alerting profile, displayed in the UI
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The list of event filters.  For all filters that are *negated* inside of these event filters, that is all `Predefined` as well as `Custom` (Title and/or Description) ones the AND logic applies. For all *non-negated* ones the OR logic applies. Between these two groups, negated and non-negated, the AND logic applies.  If you specify both severity rule and event filter, the AND logic applies
        /// </summary>
        [Output("eventTypeFilters")]
        public Output<ImmutableArray<Outputs.AlertingProfileEventTypeFilter>> EventTypeFilters { get; private set; } = null!;

        /// <summary>
        /// `Metadata` exists for backwards compatibility but shouldn't get specified anymore
        /// </summary>
        [Output("metadata")]
        public Output<Outputs.AlertingProfileMetadata?> Metadata { get; private set; } = null!;

        /// <summary>
        /// The ID of the management zone to which the alerting profile applies
        /// </summary>
        [Output("mzId")]
        public Output<string?> MzId { get; private set; } = null!;

        /// <summary>
        /// A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.AlertingProfileRule>> Rules { get; private set; } = null!;

        /// <summary>
        /// allows for configuring properties that are not explicitly supported by the current version of this provider
        /// </summary>
        [Output("unknowns")]
        public Output<string?> Unknowns { get; private set; } = null!;


        /// <summary>
        /// Create a AlertingProfile resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AlertingProfile(string name, AlertingProfileArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/alertingProfile:AlertingProfile", name, args ?? new AlertingProfileArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AlertingProfile(string name, Input<string> id, AlertingProfileState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/alertingProfile:AlertingProfile", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AlertingProfile resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AlertingProfile Get(string name, Input<string> id, AlertingProfileState? state = null, CustomResourceOptions? options = null)
        {
            return new AlertingProfile(name, id, state, options);
        }
    }

    public sealed class AlertingProfileArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the alerting profile, displayed in the UI
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        [Input("eventTypeFilters")]
        private InputList<Inputs.AlertingProfileEventTypeFilterArgs>? _eventTypeFilters;

        /// <summary>
        /// The list of event filters.  For all filters that are *negated* inside of these event filters, that is all `Predefined` as well as `Custom` (Title and/or Description) ones the AND logic applies. For all *non-negated* ones the OR logic applies. Between these two groups, negated and non-negated, the AND logic applies.  If you specify both severity rule and event filter, the AND logic applies
        /// </summary>
        public InputList<Inputs.AlertingProfileEventTypeFilterArgs> EventTypeFilters
        {
            get => _eventTypeFilters ?? (_eventTypeFilters = new InputList<Inputs.AlertingProfileEventTypeFilterArgs>());
            set => _eventTypeFilters = value;
        }

        /// <summary>
        /// `Metadata` exists for backwards compatibility but shouldn't get specified anymore
        /// </summary>
        [Input("metadata")]
        public Input<Inputs.AlertingProfileMetadataArgs>? Metadata { get; set; }

        /// <summary>
        /// The ID of the management zone to which the alerting profile applies
        /// </summary>
        [Input("mzId")]
        public Input<string>? MzId { get; set; }

        [Input("rules")]
        private InputList<Inputs.AlertingProfileRuleArgs>? _rules;

        /// <summary>
        /// A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
        /// </summary>
        public InputList<Inputs.AlertingProfileRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.AlertingProfileRuleArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// allows for configuring properties that are not explicitly supported by the current version of this provider
        /// </summary>
        [Input("unknowns")]
        public Input<string>? Unknowns { get; set; }

        public AlertingProfileArgs()
        {
        }
        public static new AlertingProfileArgs Empty => new AlertingProfileArgs();
    }

    public sealed class AlertingProfileState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the alerting profile, displayed in the UI
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("eventTypeFilters")]
        private InputList<Inputs.AlertingProfileEventTypeFilterGetArgs>? _eventTypeFilters;

        /// <summary>
        /// The list of event filters.  For all filters that are *negated* inside of these event filters, that is all `Predefined` as well as `Custom` (Title and/or Description) ones the AND logic applies. For all *non-negated* ones the OR logic applies. Between these two groups, negated and non-negated, the AND logic applies.  If you specify both severity rule and event filter, the AND logic applies
        /// </summary>
        public InputList<Inputs.AlertingProfileEventTypeFilterGetArgs> EventTypeFilters
        {
            get => _eventTypeFilters ?? (_eventTypeFilters = new InputList<Inputs.AlertingProfileEventTypeFilterGetArgs>());
            set => _eventTypeFilters = value;
        }

        /// <summary>
        /// `Metadata` exists for backwards compatibility but shouldn't get specified anymore
        /// </summary>
        [Input("metadata")]
        public Input<Inputs.AlertingProfileMetadataGetArgs>? Metadata { get; set; }

        /// <summary>
        /// The ID of the management zone to which the alerting profile applies
        /// </summary>
        [Input("mzId")]
        public Input<string>? MzId { get; set; }

        [Input("rules")]
        private InputList<Inputs.AlertingProfileRuleGetArgs>? _rules;

        /// <summary>
        /// A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
        /// </summary>
        public InputList<Inputs.AlertingProfileRuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.AlertingProfileRuleGetArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// allows for configuring properties that are not explicitly supported by the current version of this provider
        /// </summary>
        [Input("unknowns")]
        public Input<string>? Unknowns { get; set; }

        public AlertingProfileState()
        {
        }
        public static new AlertingProfileState Empty => new AlertingProfileState();
    }
}
