// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/geolocation:Geolocation")]
    public partial class Geolocation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Display the world map
        /// </summary>
        [Output("displayWorldmap")]
        public Output<bool> DisplayWorldmap { get; private set; } = null!;

        /// <summary>
        /// The scope of this setting (environment-default). Omit this property if you want to cover the whole environment.
        /// </summary>
        [Output("scope")]
        public Output<string?> Scope { get; private set; } = null!;


        /// <summary>
        /// Create a Geolocation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Geolocation(string name, GeolocationArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/geolocation:Geolocation", name, args ?? new GeolocationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Geolocation(string name, Input<string> id, GeolocationState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/geolocation:Geolocation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Geolocation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Geolocation Get(string name, Input<string> id, GeolocationState? state = null, CustomResourceOptions? options = null)
        {
            return new Geolocation(name, id, state, options);
        }
    }

    public sealed class GeolocationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Display the world map
        /// </summary>
        [Input("displayWorldmap", required: true)]
        public Input<bool> DisplayWorldmap { get; set; } = null!;

        /// <summary>
        /// The scope of this setting (environment-default). Omit this property if you want to cover the whole environment.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        public GeolocationArgs()
        {
        }
        public static new GeolocationArgs Empty => new GeolocationArgs();
    }

    public sealed class GeolocationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Display the world map
        /// </summary>
        [Input("displayWorldmap")]
        public Input<bool>? DisplayWorldmap { get; set; }

        /// <summary>
        /// The scope of this setting (environment-default). Omit this property if you want to cover the whole environment.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        public GeolocationState()
        {
        }
        public static new GeolocationState Empty => new GeolocationState();
    }
}
