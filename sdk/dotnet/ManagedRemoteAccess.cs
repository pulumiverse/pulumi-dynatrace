// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/managedRemoteAccess:ManagedRemoteAccess")]
    public partial class ManagedRemoteAccess : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Request reason description, cannot be changed once created
        /// </summary>
        [Output("reason")]
        public Output<string> Reason { get; private set; } = null!;

        /// <summary>
        /// For how many days access is requested, cannot be changed once created
        /// </summary>
        [Output("requestedDays")]
        public Output<int> RequestedDays { get; private set; } = null!;

        /// <summary>
        /// Requested role, cannot be changed once created
        /// </summary>
        [Output("role")]
        public Output<string> Role { get; private set; } = null!;

        /// <summary>
        /// Access request state. Automatically set as `ACCEPTED` on create, state can be changed in subsequent updates.
        /// </summary>
        [Output("state")]
        public Output<string?> State { get; private set; } = null!;

        /// <summary>
        /// User id, cannot be changed once created
        /// </summary>
        [Output("userId")]
        public Output<string> UserId { get; private set; } = null!;


        /// <summary>
        /// Create a ManagedRemoteAccess resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ManagedRemoteAccess(string name, ManagedRemoteAccessArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/managedRemoteAccess:ManagedRemoteAccess", name, args ?? new ManagedRemoteAccessArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ManagedRemoteAccess(string name, Input<string> id, ManagedRemoteAccessState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/managedRemoteAccess:ManagedRemoteAccess", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ManagedRemoteAccess resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ManagedRemoteAccess Get(string name, Input<string> id, ManagedRemoteAccessState? state = null, CustomResourceOptions? options = null)
        {
            return new ManagedRemoteAccess(name, id, state, options);
        }
    }

    public sealed class ManagedRemoteAccessArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Request reason description, cannot be changed once created
        /// </summary>
        [Input("reason", required: true)]
        public Input<string> Reason { get; set; } = null!;

        /// <summary>
        /// For how many days access is requested, cannot be changed once created
        /// </summary>
        [Input("requestedDays", required: true)]
        public Input<int> RequestedDays { get; set; } = null!;

        /// <summary>
        /// Requested role, cannot be changed once created
        /// </summary>
        [Input("role", required: true)]
        public Input<string> Role { get; set; } = null!;

        /// <summary>
        /// Access request state. Automatically set as `ACCEPTED` on create, state can be changed in subsequent updates.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// User id, cannot be changed once created
        /// </summary>
        [Input("userId", required: true)]
        public Input<string> UserId { get; set; } = null!;

        public ManagedRemoteAccessArgs()
        {
        }
        public static new ManagedRemoteAccessArgs Empty => new ManagedRemoteAccessArgs();
    }

    public sealed class ManagedRemoteAccessState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Request reason description, cannot be changed once created
        /// </summary>
        [Input("reason")]
        public Input<string>? Reason { get; set; }

        /// <summary>
        /// For how many days access is requested, cannot be changed once created
        /// </summary>
        [Input("requestedDays")]
        public Input<int>? RequestedDays { get; set; }

        /// <summary>
        /// Requested role, cannot be changed once created
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        /// <summary>
        /// Access request state. Automatically set as `ACCEPTED` on create, state can be changed in subsequent updates.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// User id, cannot be changed once created
        /// </summary>
        [Input("userId")]
        public Input<string>? UserId { get; set; }

        public ManagedRemoteAccessState()
        {
        }
        public static new ManagedRemoteAccessState Empty => new ManagedRemoteAccessState();
    }
}
