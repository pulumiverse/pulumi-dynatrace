// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/customAnomalies:CustomAnomalies")]
    public partial class CustomAnomalies : global::Pulumi.CustomResource
    {
        /// <summary>
        /// How the metric data points are aggregated for the evaluation. The timeseries must support this aggregation
        /// </summary>
        [Output("aggregationType")]
        public Output<string?> AggregationType { get; private set; } = null!;

        /// <summary>
        /// The description of the metric event
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Defines the dimensions of the metric to alert on. The filters are combined by conjunction
        /// </summary>
        [Output("dimensions")]
        public Output<ImmutableArray<Outputs.CustomAnomaliesDimension>> Dimensions { get; private set; } = null!;

        /// <summary>
        /// The reason of automatic disabling.  The `NONE` means config was not disabled automatically. Possible values are `METRIC_DEFINITION_INCONSISTENCY`, `NONE`, `TOO_MANY_DIMS` and `TOPX_FORCIBLY_DEACTIVATED`
        /// </summary>
        [Output("disabledReason")]
        public Output<string?> DisabledReason { get; private set; } = null!;

        /// <summary>
        /// The metric event is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// The ID of the metric evaluated by the metric event
        /// </summary>
        [Output("metricId")]
        public Output<string?> MetricId { get; private set; } = null!;

        /// <summary>
        /// The metric selector that should be executed
        /// </summary>
        [Output("metricSelector")]
        public Output<string?> MetricSelector { get; private set; } = null!;

        /// <summary>
        /// The name of the metric event displayed in the UI
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Defines which dimension key should be used for the **alertingScope**
        /// </summary>
        [Output("primaryDimensionKey")]
        public Output<string?> PrimaryDimensionKey { get; private set; } = null!;

        /// <summary>
        /// Defines the scope of the metric event. Only one filter is allowed per filter type, except for tags, where up to 3 are allowed. The filters are combined by conjunction
        /// </summary>
        [Output("scopes")]
        public Output<ImmutableArray<Outputs.CustomAnomaliesScope>> Scopes { get; private set; } = null!;

        /// <summary>
        /// The type of the event to trigger on the threshold violation.  The `CUSTOM_ALERT` type is not correlated with other alerts. The `INFO` type does not open a problem
        /// </summary>
        [Output("severity")]
        public Output<string?> Severity { get; private set; } = null!;

        /// <summary>
        /// A monitoring strategy for a metric event config. This is the base version of the monitoring strategy, depending on the type,  the actual JSON may contain additional fields
        /// </summary>
        [Output("strategy")]
        public Output<Outputs.CustomAnomaliesStrategy> Strategy { get; private set; } = null!;

        /// <summary>
        /// allows for configuring properties that are not explicitly supported by the current version of this provider
        /// </summary>
        [Output("unknowns")]
        public Output<string?> Unknowns { get; private set; } = null!;

        /// <summary>
        /// The reason of a warning set on the config. The `NONE` means config has no warnings. The other supported value is `TOO_MANY_DIMS`
        /// </summary>
        [Output("warningReason")]
        public Output<string?> WarningReason { get; private set; } = null!;


        /// <summary>
        /// Create a CustomAnomalies resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CustomAnomalies(string name, CustomAnomaliesArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/customAnomalies:CustomAnomalies", name, args ?? new CustomAnomaliesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CustomAnomalies(string name, Input<string> id, CustomAnomaliesState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/customAnomalies:CustomAnomalies", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CustomAnomalies resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CustomAnomalies Get(string name, Input<string> id, CustomAnomaliesState? state = null, CustomResourceOptions? options = null)
        {
            return new CustomAnomalies(name, id, state, options);
        }
    }

    public sealed class CustomAnomaliesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// How the metric data points are aggregated for the evaluation. The timeseries must support this aggregation
        /// </summary>
        [Input("aggregationType")]
        public Input<string>? AggregationType { get; set; }

        /// <summary>
        /// The description of the metric event
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        [Input("dimensions")]
        private InputList<Inputs.CustomAnomaliesDimensionArgs>? _dimensions;

        /// <summary>
        /// Defines the dimensions of the metric to alert on. The filters are combined by conjunction
        /// </summary>
        public InputList<Inputs.CustomAnomaliesDimensionArgs> Dimensions
        {
            get => _dimensions ?? (_dimensions = new InputList<Inputs.CustomAnomaliesDimensionArgs>());
            set => _dimensions = value;
        }

        /// <summary>
        /// The reason of automatic disabling.  The `NONE` means config was not disabled automatically. Possible values are `METRIC_DEFINITION_INCONSISTENCY`, `NONE`, `TOO_MANY_DIMS` and `TOPX_FORCIBLY_DEACTIVATED`
        /// </summary>
        [Input("disabledReason")]
        public Input<string>? DisabledReason { get; set; }

        /// <summary>
        /// The metric event is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// The ID of the metric evaluated by the metric event
        /// </summary>
        [Input("metricId")]
        public Input<string>? MetricId { get; set; }

        /// <summary>
        /// The metric selector that should be executed
        /// </summary>
        [Input("metricSelector")]
        public Input<string>? MetricSelector { get; set; }

        /// <summary>
        /// The name of the metric event displayed in the UI
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Defines which dimension key should be used for the **alertingScope**
        /// </summary>
        [Input("primaryDimensionKey")]
        public Input<string>? PrimaryDimensionKey { get; set; }

        [Input("scopes")]
        private InputList<Inputs.CustomAnomaliesScopeArgs>? _scopes;

        /// <summary>
        /// Defines the scope of the metric event. Only one filter is allowed per filter type, except for tags, where up to 3 are allowed. The filters are combined by conjunction
        /// </summary>
        public InputList<Inputs.CustomAnomaliesScopeArgs> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<Inputs.CustomAnomaliesScopeArgs>());
            set => _scopes = value;
        }

        /// <summary>
        /// The type of the event to trigger on the threshold violation.  The `CUSTOM_ALERT` type is not correlated with other alerts. The `INFO` type does not open a problem
        /// </summary>
        [Input("severity")]
        public Input<string>? Severity { get; set; }

        /// <summary>
        /// A monitoring strategy for a metric event config. This is the base version of the monitoring strategy, depending on the type,  the actual JSON may contain additional fields
        /// </summary>
        [Input("strategy", required: true)]
        public Input<Inputs.CustomAnomaliesStrategyArgs> Strategy { get; set; } = null!;

        /// <summary>
        /// allows for configuring properties that are not explicitly supported by the current version of this provider
        /// </summary>
        [Input("unknowns")]
        public Input<string>? Unknowns { get; set; }

        /// <summary>
        /// The reason of a warning set on the config. The `NONE` means config has no warnings. The other supported value is `TOO_MANY_DIMS`
        /// </summary>
        [Input("warningReason")]
        public Input<string>? WarningReason { get; set; }

        public CustomAnomaliesArgs()
        {
        }
        public static new CustomAnomaliesArgs Empty => new CustomAnomaliesArgs();
    }

    public sealed class CustomAnomaliesState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// How the metric data points are aggregated for the evaluation. The timeseries must support this aggregation
        /// </summary>
        [Input("aggregationType")]
        public Input<string>? AggregationType { get; set; }

        /// <summary>
        /// The description of the metric event
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("dimensions")]
        private InputList<Inputs.CustomAnomaliesDimensionGetArgs>? _dimensions;

        /// <summary>
        /// Defines the dimensions of the metric to alert on. The filters are combined by conjunction
        /// </summary>
        public InputList<Inputs.CustomAnomaliesDimensionGetArgs> Dimensions
        {
            get => _dimensions ?? (_dimensions = new InputList<Inputs.CustomAnomaliesDimensionGetArgs>());
            set => _dimensions = value;
        }

        /// <summary>
        /// The reason of automatic disabling.  The `NONE` means config was not disabled automatically. Possible values are `METRIC_DEFINITION_INCONSISTENCY`, `NONE`, `TOO_MANY_DIMS` and `TOPX_FORCIBLY_DEACTIVATED`
        /// </summary>
        [Input("disabledReason")]
        public Input<string>? DisabledReason { get; set; }

        /// <summary>
        /// The metric event is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The ID of the metric evaluated by the metric event
        /// </summary>
        [Input("metricId")]
        public Input<string>? MetricId { get; set; }

        /// <summary>
        /// The metric selector that should be executed
        /// </summary>
        [Input("metricSelector")]
        public Input<string>? MetricSelector { get; set; }

        /// <summary>
        /// The name of the metric event displayed in the UI
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Defines which dimension key should be used for the **alertingScope**
        /// </summary>
        [Input("primaryDimensionKey")]
        public Input<string>? PrimaryDimensionKey { get; set; }

        [Input("scopes")]
        private InputList<Inputs.CustomAnomaliesScopeGetArgs>? _scopes;

        /// <summary>
        /// Defines the scope of the metric event. Only one filter is allowed per filter type, except for tags, where up to 3 are allowed. The filters are combined by conjunction
        /// </summary>
        public InputList<Inputs.CustomAnomaliesScopeGetArgs> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<Inputs.CustomAnomaliesScopeGetArgs>());
            set => _scopes = value;
        }

        /// <summary>
        /// The type of the event to trigger on the threshold violation.  The `CUSTOM_ALERT` type is not correlated with other alerts. The `INFO` type does not open a problem
        /// </summary>
        [Input("severity")]
        public Input<string>? Severity { get; set; }

        /// <summary>
        /// A monitoring strategy for a metric event config. This is the base version of the monitoring strategy, depending on the type,  the actual JSON may contain additional fields
        /// </summary>
        [Input("strategy")]
        public Input<Inputs.CustomAnomaliesStrategyGetArgs>? Strategy { get; set; }

        /// <summary>
        /// allows for configuring properties that are not explicitly supported by the current version of this provider
        /// </summary>
        [Input("unknowns")]
        public Input<string>? Unknowns { get; set; }

        /// <summary>
        /// The reason of a warning set on the config. The `NONE` means config has no warnings. The other supported value is `TOO_MANY_DIMS`
        /// </summary>
        [Input("warningReason")]
        public Input<string>? WarningReason { get; set; }

        public CustomAnomaliesState()
        {
        }
        public static new CustomAnomaliesState Empty => new CustomAnomaliesState();
    }
}
