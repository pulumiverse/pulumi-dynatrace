// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/davisCopilot:DavisCopilot")]
    public partial class DavisCopilot : global::Pulumi.CustomResource
    {
        /// <summary>
        /// You can exclude specific data buckets and tables from the Davis CoPilot semantic index. Learn more about [configuring data access](https://dt-url.net/lc62i1q).
        /// </summary>
        [Output("blocklistEntries")]
        public Output<Outputs.DavisCopilotBlocklistEntries?> BlocklistEntries { get; private set; } = null!;

        /// <summary>
        /// Please note that once enabled, you still need to [assign permissions](https://dt-url.net/rh22idn) to the relevant user groups.
        /// </summary>
        [Output("enableCopilot")]
        public Output<bool> EnableCopilot { get; private set; } = null!;

        /// <summary>
        /// You can enrich Davis CoPilot with your environment data. This lets you generate more accurate queries that identify and reference relevant entities, events, spans, logs, and metrics from your environment. Once enabled, Davis CoPilot periodically scans your Grail data to create its own semantic index. Please note, it can take up to 24 hours to reflect changes. Learn more about [environment-aware queries](https://dt-url.net/4g42iu7).
        /// </summary>
        [Output("enableTenantAwareDataMining")]
        public Output<bool?> EnableTenantAwareDataMining { get; private set; } = null!;


        /// <summary>
        /// Create a DavisCopilot resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DavisCopilot(string name, DavisCopilotArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/davisCopilot:DavisCopilot", name, args ?? new DavisCopilotArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DavisCopilot(string name, Input<string> id, DavisCopilotState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/davisCopilot:DavisCopilot", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DavisCopilot resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DavisCopilot Get(string name, Input<string> id, DavisCopilotState? state = null, CustomResourceOptions? options = null)
        {
            return new DavisCopilot(name, id, state, options);
        }
    }

    public sealed class DavisCopilotArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// You can exclude specific data buckets and tables from the Davis CoPilot semantic index. Learn more about [configuring data access](https://dt-url.net/lc62i1q).
        /// </summary>
        [Input("blocklistEntries")]
        public Input<Inputs.DavisCopilotBlocklistEntriesArgs>? BlocklistEntries { get; set; }

        /// <summary>
        /// Please note that once enabled, you still need to [assign permissions](https://dt-url.net/rh22idn) to the relevant user groups.
        /// </summary>
        [Input("enableCopilot", required: true)]
        public Input<bool> EnableCopilot { get; set; } = null!;

        /// <summary>
        /// You can enrich Davis CoPilot with your environment data. This lets you generate more accurate queries that identify and reference relevant entities, events, spans, logs, and metrics from your environment. Once enabled, Davis CoPilot periodically scans your Grail data to create its own semantic index. Please note, it can take up to 24 hours to reflect changes. Learn more about [environment-aware queries](https://dt-url.net/4g42iu7).
        /// </summary>
        [Input("enableTenantAwareDataMining")]
        public Input<bool>? EnableTenantAwareDataMining { get; set; }

        public DavisCopilotArgs()
        {
        }
        public static new DavisCopilotArgs Empty => new DavisCopilotArgs();
    }

    public sealed class DavisCopilotState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// You can exclude specific data buckets and tables from the Davis CoPilot semantic index. Learn more about [configuring data access](https://dt-url.net/lc62i1q).
        /// </summary>
        [Input("blocklistEntries")]
        public Input<Inputs.DavisCopilotBlocklistEntriesGetArgs>? BlocklistEntries { get; set; }

        /// <summary>
        /// Please note that once enabled, you still need to [assign permissions](https://dt-url.net/rh22idn) to the relevant user groups.
        /// </summary>
        [Input("enableCopilot")]
        public Input<bool>? EnableCopilot { get; set; }

        /// <summary>
        /// You can enrich Davis CoPilot with your environment data. This lets you generate more accurate queries that identify and reference relevant entities, events, spans, logs, and metrics from your environment. Once enabled, Davis CoPilot periodically scans your Grail data to create its own semantic index. Please note, it can take up to 24 hours to reflect changes. Learn more about [environment-aware queries](https://dt-url.net/4g42iu7).
        /// </summary>
        [Input("enableTenantAwareDataMining")]
        public Input<bool>? EnableTenantAwareDataMining { get; set; }

        public DavisCopilotState()
        {
        }
        public static new DavisCopilotState Empty => new DavisCopilotState();
    }
}
