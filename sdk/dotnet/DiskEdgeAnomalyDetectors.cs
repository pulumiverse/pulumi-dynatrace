// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/diskEdgeAnomalyDetectors:DiskEdgeAnomalyDetectors")]
    public partial class DiskEdgeAnomalyDetectors : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Alerts
        /// </summary>
        [Output("alerts")]
        public Output<Outputs.DiskEdgeAnomalyDetectorsAlerts?> Alerts { get; private set; } = null!;

        /// <summary>
        /// Disk will be included in this policy if **any** of the filters match
        /// </summary>
        [Output("diskNameFilters")]
        public Output<ImmutableArray<string>> DiskNameFilters { get; private set; } = null!;

        /// <summary>
        /// This setting is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// Set of additional key-value properties to be attached to the triggered event.
        /// </summary>
        [Output("eventProperties")]
        public Output<Outputs.DiskEdgeAnomalyDetectorsEventProperties?> EventProperties { get; private set; } = null!;

        /// <summary>
        /// The policy will be enabled if **all** conditions are met
        /// </summary>
        [Output("hostMetadataConditions")]
        public Output<Outputs.DiskEdgeAnomalyDetectorsHostMetadataConditions?> HostMetadataConditions { get; private set; } = null!;

        /// <summary>
        /// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        /// </summary>
        [Output("insertAfter")]
        public Output<string> InsertAfter { get; private set; } = null!;

        /// <summary>
        /// Select the operating systems on which policy should be applied
        /// </summary>
        [Output("operatingSystems")]
        public Output<ImmutableArray<string>> OperatingSystems { get; private set; } = null!;

        /// <summary>
        /// Policy name
        /// </summary>
        [Output("policyName")]
        public Output<string> PolicyName { get; private set; } = null!;

        /// <summary>
        /// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
        /// </summary>
        [Output("scope")]
        public Output<string?> Scope { get; private set; } = null!;


        /// <summary>
        /// Create a DiskEdgeAnomalyDetectors resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DiskEdgeAnomalyDetectors(string name, DiskEdgeAnomalyDetectorsArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/diskEdgeAnomalyDetectors:DiskEdgeAnomalyDetectors", name, args ?? new DiskEdgeAnomalyDetectorsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DiskEdgeAnomalyDetectors(string name, Input<string> id, DiskEdgeAnomalyDetectorsState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/diskEdgeAnomalyDetectors:DiskEdgeAnomalyDetectors", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DiskEdgeAnomalyDetectors resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DiskEdgeAnomalyDetectors Get(string name, Input<string> id, DiskEdgeAnomalyDetectorsState? state = null, CustomResourceOptions? options = null)
        {
            return new DiskEdgeAnomalyDetectors(name, id, state, options);
        }
    }

    public sealed class DiskEdgeAnomalyDetectorsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Alerts
        /// </summary>
        [Input("alerts")]
        public Input<Inputs.DiskEdgeAnomalyDetectorsAlertsArgs>? Alerts { get; set; }

        [Input("diskNameFilters")]
        private InputList<string>? _diskNameFilters;

        /// <summary>
        /// Disk will be included in this policy if **any** of the filters match
        /// </summary>
        public InputList<string> DiskNameFilters
        {
            get => _diskNameFilters ?? (_diskNameFilters = new InputList<string>());
            set => _diskNameFilters = value;
        }

        /// <summary>
        /// This setting is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// Set of additional key-value properties to be attached to the triggered event.
        /// </summary>
        [Input("eventProperties")]
        public Input<Inputs.DiskEdgeAnomalyDetectorsEventPropertiesArgs>? EventProperties { get; set; }

        /// <summary>
        /// The policy will be enabled if **all** conditions are met
        /// </summary>
        [Input("hostMetadataConditions")]
        public Input<Inputs.DiskEdgeAnomalyDetectorsHostMetadataConditionsArgs>? HostMetadataConditions { get; set; }

        /// <summary>
        /// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        /// </summary>
        [Input("insertAfter")]
        public Input<string>? InsertAfter { get; set; }

        [Input("operatingSystems")]
        private InputList<string>? _operatingSystems;

        /// <summary>
        /// Select the operating systems on which policy should be applied
        /// </summary>
        public InputList<string> OperatingSystems
        {
            get => _operatingSystems ?? (_operatingSystems = new InputList<string>());
            set => _operatingSystems = value;
        }

        /// <summary>
        /// Policy name
        /// </summary>
        [Input("policyName", required: true)]
        public Input<string> PolicyName { get; set; } = null!;

        /// <summary>
        /// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        public DiskEdgeAnomalyDetectorsArgs()
        {
        }
        public static new DiskEdgeAnomalyDetectorsArgs Empty => new DiskEdgeAnomalyDetectorsArgs();
    }

    public sealed class DiskEdgeAnomalyDetectorsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Alerts
        /// </summary>
        [Input("alerts")]
        public Input<Inputs.DiskEdgeAnomalyDetectorsAlertsGetArgs>? Alerts { get; set; }

        [Input("diskNameFilters")]
        private InputList<string>? _diskNameFilters;

        /// <summary>
        /// Disk will be included in this policy if **any** of the filters match
        /// </summary>
        public InputList<string> DiskNameFilters
        {
            get => _diskNameFilters ?? (_diskNameFilters = new InputList<string>());
            set => _diskNameFilters = value;
        }

        /// <summary>
        /// This setting is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Set of additional key-value properties to be attached to the triggered event.
        /// </summary>
        [Input("eventProperties")]
        public Input<Inputs.DiskEdgeAnomalyDetectorsEventPropertiesGetArgs>? EventProperties { get; set; }

        /// <summary>
        /// The policy will be enabled if **all** conditions are met
        /// </summary>
        [Input("hostMetadataConditions")]
        public Input<Inputs.DiskEdgeAnomalyDetectorsHostMetadataConditionsGetArgs>? HostMetadataConditions { get; set; }

        /// <summary>
        /// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        /// </summary>
        [Input("insertAfter")]
        public Input<string>? InsertAfter { get; set; }

        [Input("operatingSystems")]
        private InputList<string>? _operatingSystems;

        /// <summary>
        /// Select the operating systems on which policy should be applied
        /// </summary>
        public InputList<string> OperatingSystems
        {
            get => _operatingSystems ?? (_operatingSystems = new InputList<string>());
            set => _operatingSystems = value;
        }

        /// <summary>
        /// Policy name
        /// </summary>
        [Input("policyName")]
        public Input<string>? PolicyName { get; set; }

        /// <summary>
        /// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        public DiskEdgeAnomalyDetectorsState()
        {
        }
        public static new DiskEdgeAnomalyDetectorsState Empty => new DiskEdgeAnomalyDetectorsState();
    }
}
