// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    public static class GetService
    {
        /// <summary>
        /// !&gt; The data source API endpoint has been deprecated, please use dynatrace.getEntity with entity type `SERVICE` instead.
        /// 
        /// The service data source allows the service ID to be retrieved by its name and optionally tags / tag-value pairs.
        /// 
        /// - `name` queries for all services with the specified name
        /// - `tags` (optional) refers to the tags that need to be present for the service (inclusive)
        /// 
        /// If multiple services match the given criteria, the first result will be retrieved.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// using Dynatrace = Pulumiverse.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Dynatrace.GetService.Invoke(new()
        ///     {
        ///         Name = "Example",
        ///         Tags = new[]
        ///         {
        ///             "TerraformKeyTest",
        ///             "TerraformKeyValueTest=TestValue",
        ///         },
        ///     });
        /// 
        ///     var _name_ = new Dynatrace.KeyRequests("#name#", new()
        ///     {
        ///         Service = test.Apply(getServiceResult =&gt; getServiceResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetServiceResult> InvokeAsync(GetServiceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServiceResult>("dynatrace:index/getService:getService", args ?? new GetServiceArgs(), options.WithDefaults());

        /// <summary>
        /// !&gt; The data source API endpoint has been deprecated, please use dynatrace.getEntity with entity type `SERVICE` instead.
        /// 
        /// The service data source allows the service ID to be retrieved by its name and optionally tags / tag-value pairs.
        /// 
        /// - `name` queries for all services with the specified name
        /// - `tags` (optional) refers to the tags that need to be present for the service (inclusive)
        /// 
        /// If multiple services match the given criteria, the first result will be retrieved.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// using Dynatrace = Pulumiverse.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Dynatrace.GetService.Invoke(new()
        ///     {
        ///         Name = "Example",
        ///         Tags = new[]
        ///         {
        ///             "TerraformKeyTest",
        ///             "TerraformKeyValueTest=TestValue",
        ///         },
        ///     });
        /// 
        ///     var _name_ = new Dynatrace.KeyRequests("#name#", new()
        ///     {
        ///         Service = test.Apply(getServiceResult =&gt; getServiceResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetServiceResult> Invoke(GetServiceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceResult>("dynatrace:index/getService:getService", args ?? new GetServiceInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// !&gt; The data source API endpoint has been deprecated, please use dynatrace.getEntity with entity type `SERVICE` instead.
        /// 
        /// The service data source allows the service ID to be retrieved by its name and optionally tags / tag-value pairs.
        /// 
        /// - `name` queries for all services with the specified name
        /// - `tags` (optional) refers to the tags that need to be present for the service (inclusive)
        /// 
        /// If multiple services match the given criteria, the first result will be retrieved.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// using Dynatrace = Pulumiverse.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Dynatrace.GetService.Invoke(new()
        ///     {
        ///         Name = "Example",
        ///         Tags = new[]
        ///         {
        ///             "TerraformKeyTest",
        ///             "TerraformKeyValueTest=TestValue",
        ///         },
        ///     });
        /// 
        ///     var _name_ = new Dynatrace.KeyRequests("#name#", new()
        ///     {
        ///         Service = test.Apply(getServiceResult =&gt; getServiceResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetServiceResult> Invoke(GetServiceInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceResult>("dynatrace:index/getService:getService", args ?? new GetServiceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServiceArgs : global::Pulumi.InvokeArgs
    {
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("operator")]
        public string? Operator { get; set; }

        [Input("tags")]
        private List<string>? _tags;

        /// <summary>
        /// Required tags of the service to find
        /// </summary>
        public List<string> Tags
        {
            get => _tags ?? (_tags = new List<string>());
            set => _tags = value;
        }

        public GetServiceArgs()
        {
        }
        public static new GetServiceArgs Empty => new GetServiceArgs();
    }

    public sealed class GetServiceInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("operator")]
        public Input<string>? Operator { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Required tags of the service to find
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public GetServiceInvokeArgs()
        {
        }
        public static new GetServiceInvokeArgs Empty => new GetServiceInvokeArgs();
    }


    [OutputType]
    public sealed class GetServiceResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        public readonly string? Operator;
        /// <summary>
        /// Required tags of the service to find
        /// </summary>
        public readonly ImmutableArray<string> Tags;

        [OutputConstructor]
        private GetServiceResult(
            string id,

            string name,

            string? @operator,

            ImmutableArray<string> tags)
        {
            Id = id;
            Name = name;
            Operator = @operator;
            Tags = tags;
        }
    }
}
