// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/processGroupDetection:ProcessGroupDetection")]
    public partial class ProcessGroupDetection : global::Pulumi.CustomResource
    {
        /// <summary>
        /// This setting is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// You can define the properties that should be used to identify your process groups.
        /// </summary>
        [Output("groupExtraction")]
        public Output<Outputs.ProcessGroupDetectionGroupExtraction> GroupExtraction { get; private set; } = null!;

        /// <summary>
        /// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        /// </summary>
        [Output("insertAfter")]
        public Output<string> InsertAfter { get; private set; } = null!;

        /// <summary>
        /// You can define the properties that should be used to identify your process instances.
        /// </summary>
        [Output("instanceExtraction")]
        public Output<Outputs.ProcessGroupDetectionInstanceExtraction?> InstanceExtraction { get; private set; } = null!;

        /// <summary>
        /// Apply this rule to processes where the selected property contains the specified string.
        /// </summary>
        [Output("processDetection")]
        public Output<Outputs.ProcessGroupDetectionProcessDetection> ProcessDetection { get; private set; } = null!;


        /// <summary>
        /// Create a ProcessGroupDetection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProcessGroupDetection(string name, ProcessGroupDetectionArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/processGroupDetection:ProcessGroupDetection", name, args ?? new ProcessGroupDetectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProcessGroupDetection(string name, Input<string> id, ProcessGroupDetectionState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/processGroupDetection:ProcessGroupDetection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProcessGroupDetection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProcessGroupDetection Get(string name, Input<string> id, ProcessGroupDetectionState? state = null, CustomResourceOptions? options = null)
        {
            return new ProcessGroupDetection(name, id, state, options);
        }
    }

    public sealed class ProcessGroupDetectionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This setting is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// You can define the properties that should be used to identify your process groups.
        /// </summary>
        [Input("groupExtraction", required: true)]
        public Input<Inputs.ProcessGroupDetectionGroupExtractionArgs> GroupExtraction { get; set; } = null!;

        /// <summary>
        /// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        /// </summary>
        [Input("insertAfter")]
        public Input<string>? InsertAfter { get; set; }

        /// <summary>
        /// You can define the properties that should be used to identify your process instances.
        /// </summary>
        [Input("instanceExtraction")]
        public Input<Inputs.ProcessGroupDetectionInstanceExtractionArgs>? InstanceExtraction { get; set; }

        /// <summary>
        /// Apply this rule to processes where the selected property contains the specified string.
        /// </summary>
        [Input("processDetection", required: true)]
        public Input<Inputs.ProcessGroupDetectionProcessDetectionArgs> ProcessDetection { get; set; } = null!;

        public ProcessGroupDetectionArgs()
        {
        }
        public static new ProcessGroupDetectionArgs Empty => new ProcessGroupDetectionArgs();
    }

    public sealed class ProcessGroupDetectionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This setting is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// You can define the properties that should be used to identify your process groups.
        /// </summary>
        [Input("groupExtraction")]
        public Input<Inputs.ProcessGroupDetectionGroupExtractionGetArgs>? GroupExtraction { get; set; }

        /// <summary>
        /// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        /// </summary>
        [Input("insertAfter")]
        public Input<string>? InsertAfter { get; set; }

        /// <summary>
        /// You can define the properties that should be used to identify your process instances.
        /// </summary>
        [Input("instanceExtraction")]
        public Input<Inputs.ProcessGroupDetectionInstanceExtractionGetArgs>? InstanceExtraction { get; set; }

        /// <summary>
        /// Apply this rule to processes where the selected property contains the specified string.
        /// </summary>
        [Input("processDetection")]
        public Input<Inputs.ProcessGroupDetectionProcessDetectionGetArgs>? ProcessDetection { get; set; }

        public ProcessGroupDetectionState()
        {
        }
        public static new ProcessGroupDetectionState Empty => new ProcessGroupDetectionState();
    }
}
