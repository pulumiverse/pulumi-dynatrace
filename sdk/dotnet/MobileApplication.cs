// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/mobileApplication:MobileApplication")]
    public partial class MobileApplication : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Apdex configuration of a mobile application. A duration less than the **tolerable** threshold is considered satisfied
        /// </summary>
        [Output("apdex")]
        public Output<Outputs.MobileApplicationApdex> Apdex { get; private set; } = null!;

        /// <summary>
        /// The UUID of the application.
        /// </summary>
        [Output("applicationId")]
        public Output<string?> ApplicationId { get; private set; } = null!;

        /// <summary>
        /// The type of the application. Either `CUSTOM_APPLICATION` or `MOBILE_APPLICATION`.
        /// </summary>
        [Output("applicationType")]
        public Output<string?> ApplicationType { get; private set; } = null!;

        /// <summary>
        /// The type of the beacon endpoint. Possible values are `CLUSTER_ACTIVE_GATE`, `ENVIRONMENT_ACTIVE_GATE` and `INSTRUMENTED_WEB_SERVER`.
        /// </summary>
        [Output("beaconEndpointType")]
        public Output<string> BeaconEndpointType { get; private set; } = null!;

        /// <summary>
        /// The URL of the beacon endpoint. Only applicable when the **beacon_endpoint_type** is set to `ENVIRONMENT_ACTIVE_GATE` or
        /// `INSTRUMENTED_WEB_SERVER`
        /// </summary>
        [Output("beaconEndpointUrl")]
        public Output<string?> BeaconEndpointUrl { get; private set; } = null!;

        /// <summary>
        /// Custom application icon. Mobile apps always use the mobile device icon, so this icon can only be set for custom apps.
        /// </summary>
        [Output("iconType")]
        public Output<string?> IconType { get; private set; } = null!;

        /// <summary>
        /// User Action names to be flagged as Key User Actions
        /// </summary>
        [Output("keyUserActions")]
        public Output<ImmutableArray<string>> KeyUserActions { get; private set; } = null!;

        /// <summary>
        /// The name of the application
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The opt-in mode is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Output("optInMode")]
        public Output<bool?> OptInMode { get; private set; } = null!;

        /// <summary>
        /// User Action and Session Properties
        /// </summary>
        [Output("properties")]
        public Output<Outputs.MobileApplicationProperties?> Properties { get; private set; } = null!;

        /// <summary>
        /// (Field has overlap with `dynatrace.MobileAppEnablement`) The session replay is enabled (`true`) or disabled (`false`).
        /// </summary>
        [Output("sessionReplay")]
        public Output<bool?> SessionReplay { get; private set; } = null!;

        /// <summary>
        /// The session replay on crash is enabled (`true`) or disabled (`false`). Enabling requires both **sessionReplayEnabled**
        /// and **optInModeEnabled** values set to `true`.
        /// </summary>
        [Output("sessionReplayOnCrash")]
        public Output<bool?> SessionReplayOnCrash { get; private set; } = null!;

        /// <summary>
        /// (Field has overlap with `dynatrace.MobileAppEnablement` for mobile and `dynatrace.CustomAppEnablement` for custom apps)
        /// The percentage of user sessions to be analyzed
        /// </summary>
        [Output("userSessionPercentage")]
        public Output<int?> UserSessionPercentage { get; private set; } = null!;


        /// <summary>
        /// Create a MobileApplication resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MobileApplication(string name, MobileApplicationArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/mobileApplication:MobileApplication", name, args ?? new MobileApplicationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MobileApplication(string name, Input<string> id, MobileApplicationState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/mobileApplication:MobileApplication", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MobileApplication resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MobileApplication Get(string name, Input<string> id, MobileApplicationState? state = null, CustomResourceOptions? options = null)
        {
            return new MobileApplication(name, id, state, options);
        }
    }

    public sealed class MobileApplicationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Apdex configuration of a mobile application. A duration less than the **tolerable** threshold is considered satisfied
        /// </summary>
        [Input("apdex", required: true)]
        public Input<Inputs.MobileApplicationApdexArgs> Apdex { get; set; } = null!;

        /// <summary>
        /// The UUID of the application.
        /// </summary>
        [Input("applicationId")]
        public Input<string>? ApplicationId { get; set; }

        /// <summary>
        /// The type of the application. Either `CUSTOM_APPLICATION` or `MOBILE_APPLICATION`.
        /// </summary>
        [Input("applicationType")]
        public Input<string>? ApplicationType { get; set; }

        /// <summary>
        /// The type of the beacon endpoint. Possible values are `CLUSTER_ACTIVE_GATE`, `ENVIRONMENT_ACTIVE_GATE` and `INSTRUMENTED_WEB_SERVER`.
        /// </summary>
        [Input("beaconEndpointType", required: true)]
        public Input<string> BeaconEndpointType { get; set; } = null!;

        /// <summary>
        /// The URL of the beacon endpoint. Only applicable when the **beacon_endpoint_type** is set to `ENVIRONMENT_ACTIVE_GATE` or
        /// `INSTRUMENTED_WEB_SERVER`
        /// </summary>
        [Input("beaconEndpointUrl")]
        public Input<string>? BeaconEndpointUrl { get; set; }

        /// <summary>
        /// Custom application icon. Mobile apps always use the mobile device icon, so this icon can only be set for custom apps.
        /// </summary>
        [Input("iconType")]
        public Input<string>? IconType { get; set; }

        [Input("keyUserActions")]
        private InputList<string>? _keyUserActions;

        /// <summary>
        /// User Action names to be flagged as Key User Actions
        /// </summary>
        public InputList<string> KeyUserActions
        {
            get => _keyUserActions ?? (_keyUserActions = new InputList<string>());
            set => _keyUserActions = value;
        }

        /// <summary>
        /// The name of the application
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The opt-in mode is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Input("optInMode")]
        public Input<bool>? OptInMode { get; set; }

        /// <summary>
        /// User Action and Session Properties
        /// </summary>
        [Input("properties")]
        public Input<Inputs.MobileApplicationPropertiesArgs>? Properties { get; set; }

        /// <summary>
        /// (Field has overlap with `dynatrace.MobileAppEnablement`) The session replay is enabled (`true`) or disabled (`false`).
        /// </summary>
        [Input("sessionReplay")]
        public Input<bool>? SessionReplay { get; set; }

        /// <summary>
        /// The session replay on crash is enabled (`true`) or disabled (`false`). Enabling requires both **sessionReplayEnabled**
        /// and **optInModeEnabled** values set to `true`.
        /// </summary>
        [Input("sessionReplayOnCrash")]
        public Input<bool>? SessionReplayOnCrash { get; set; }

        /// <summary>
        /// (Field has overlap with `dynatrace.MobileAppEnablement` for mobile and `dynatrace.CustomAppEnablement` for custom apps)
        /// The percentage of user sessions to be analyzed
        /// </summary>
        [Input("userSessionPercentage")]
        public Input<int>? UserSessionPercentage { get; set; }

        public MobileApplicationArgs()
        {
        }
        public static new MobileApplicationArgs Empty => new MobileApplicationArgs();
    }

    public sealed class MobileApplicationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Apdex configuration of a mobile application. A duration less than the **tolerable** threshold is considered satisfied
        /// </summary>
        [Input("apdex")]
        public Input<Inputs.MobileApplicationApdexGetArgs>? Apdex { get; set; }

        /// <summary>
        /// The UUID of the application.
        /// </summary>
        [Input("applicationId")]
        public Input<string>? ApplicationId { get; set; }

        /// <summary>
        /// The type of the application. Either `CUSTOM_APPLICATION` or `MOBILE_APPLICATION`.
        /// </summary>
        [Input("applicationType")]
        public Input<string>? ApplicationType { get; set; }

        /// <summary>
        /// The type of the beacon endpoint. Possible values are `CLUSTER_ACTIVE_GATE`, `ENVIRONMENT_ACTIVE_GATE` and `INSTRUMENTED_WEB_SERVER`.
        /// </summary>
        [Input("beaconEndpointType")]
        public Input<string>? BeaconEndpointType { get; set; }

        /// <summary>
        /// The URL of the beacon endpoint. Only applicable when the **beacon_endpoint_type** is set to `ENVIRONMENT_ACTIVE_GATE` or
        /// `INSTRUMENTED_WEB_SERVER`
        /// </summary>
        [Input("beaconEndpointUrl")]
        public Input<string>? BeaconEndpointUrl { get; set; }

        /// <summary>
        /// Custom application icon. Mobile apps always use the mobile device icon, so this icon can only be set for custom apps.
        /// </summary>
        [Input("iconType")]
        public Input<string>? IconType { get; set; }

        [Input("keyUserActions")]
        private InputList<string>? _keyUserActions;

        /// <summary>
        /// User Action names to be flagged as Key User Actions
        /// </summary>
        public InputList<string> KeyUserActions
        {
            get => _keyUserActions ?? (_keyUserActions = new InputList<string>());
            set => _keyUserActions = value;
        }

        /// <summary>
        /// The name of the application
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The opt-in mode is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Input("optInMode")]
        public Input<bool>? OptInMode { get; set; }

        /// <summary>
        /// User Action and Session Properties
        /// </summary>
        [Input("properties")]
        public Input<Inputs.MobileApplicationPropertiesGetArgs>? Properties { get; set; }

        /// <summary>
        /// (Field has overlap with `dynatrace.MobileAppEnablement`) The session replay is enabled (`true`) or disabled (`false`).
        /// </summary>
        [Input("sessionReplay")]
        public Input<bool>? SessionReplay { get; set; }

        /// <summary>
        /// The session replay on crash is enabled (`true`) or disabled (`false`). Enabling requires both **sessionReplayEnabled**
        /// and **optInModeEnabled** values set to `true`.
        /// </summary>
        [Input("sessionReplayOnCrash")]
        public Input<bool>? SessionReplayOnCrash { get; set; }

        /// <summary>
        /// (Field has overlap with `dynatrace.MobileAppEnablement` for mobile and `dynatrace.CustomAppEnablement` for custom apps)
        /// The percentage of user sessions to be analyzed
        /// </summary>
        [Input("userSessionPercentage")]
        public Input<int>? UserSessionPercentage { get; set; }

        public MobileApplicationState()
        {
        }
        public static new MobileApplicationState Empty => new MobileApplicationState();
    }
}
