// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    public static class GetTenant
    {
        /// <summary>
        /// The data source `dynatrace.getTenant` evalutes the configured Environment URL (either the environment variable `DYNATRACE_ENV_URL` or the configuration attribute `dt_env_url`) and extracts out the name/id of the environment this provider addresses.
        /// Main purpose is for migrating settings from one environment to another, but it can be used to in general to avoid hard coding the environment ID like in the example below.
        /// </summary>
        public static Task<GetTenantResult> InvokeAsync(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTenantResult>("dynatrace:index/getTenant:getTenant", InvokeArgs.Empty, options.WithDefaults());

        /// <summary>
        /// The data source `dynatrace.getTenant` evalutes the configured Environment URL (either the environment variable `DYNATRACE_ENV_URL` or the configuration attribute `dt_env_url`) and extracts out the name/id of the environment this provider addresses.
        /// Main purpose is for migrating settings from one environment to another, but it can be used to in general to avoid hard coding the environment ID like in the example below.
        /// </summary>
        public static Output<GetTenantResult> Invoke(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTenantResult>("dynatrace:index/getTenant:getTenant", InvokeArgs.Empty, options.WithDefaults());

        /// <summary>
        /// The data source `dynatrace.getTenant` evalutes the configured Environment URL (either the environment variable `DYNATRACE_ENV_URL` or the configuration attribute `dt_env_url`) and extracts out the name/id of the environment this provider addresses.
        /// Main purpose is for migrating settings from one environment to another, but it can be used to in general to avoid hard coding the environment ID like in the example below.
        /// </summary>
        public static Output<GetTenantResult> Invoke(InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetTenantResult>("dynatrace:index/getTenant:getTenant", InvokeArgs.Empty, options.WithDefaults());
    }


    [OutputType]
    public sealed class GetTenantResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;

        [OutputConstructor]
        private GetTenantResult(
            string id,

            string name)
        {
            Id = id;
            Name = name;
        }
    }
}
