// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/policyBindings:PolicyBindings")]
    public partial class PolicyBindings : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The UUID of the cluster. The attribute `policies` must contain ONLY policies defined for that cluster.
        /// </summary>
        [Output("cluster")]
        public Output<string?> Cluster { get; private set; } = null!;

        /// <summary>
        /// The ID of the environment (https://&lt;environmentid&gt;.live.dynatrace.com). The attribute `policies` must contain ONLY
        /// policies defined for that environment.
        /// </summary>
        [Output("environment")]
        public Output<string?> Environment { get; private set; } = null!;

        /// <summary>
        /// The name of the policy
        /// </summary>
        [Output("group")]
        public Output<string> Group { get; private set; } = null!;

        /// <summary>
        /// A list of IDs referring to policies bound to that group. It's not possible to mix policies here that are defined for
        /// different scopes (different clusters or environments) than specified via attributes `cluster` or `environment`.
        /// </summary>
        [Output("policies")]
        public Output<ImmutableArray<string>> Policies { get; private set; } = null!;


        /// <summary>
        /// Create a PolicyBindings resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PolicyBindings(string name, PolicyBindingsArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/policyBindings:PolicyBindings", name, args ?? new PolicyBindingsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PolicyBindings(string name, Input<string> id, PolicyBindingsState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/policyBindings:PolicyBindings", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PolicyBindings resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PolicyBindings Get(string name, Input<string> id, PolicyBindingsState? state = null, CustomResourceOptions? options = null)
        {
            return new PolicyBindings(name, id, state, options);
        }
    }

    public sealed class PolicyBindingsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The UUID of the cluster. The attribute `policies` must contain ONLY policies defined for that cluster.
        /// </summary>
        [Input("cluster")]
        public Input<string>? Cluster { get; set; }

        /// <summary>
        /// The ID of the environment (https://&lt;environmentid&gt;.live.dynatrace.com). The attribute `policies` must contain ONLY
        /// policies defined for that environment.
        /// </summary>
        [Input("environment")]
        public Input<string>? Environment { get; set; }

        /// <summary>
        /// The name of the policy
        /// </summary>
        [Input("group", required: true)]
        public Input<string> Group { get; set; } = null!;

        [Input("policies", required: true)]
        private InputList<string>? _policies;

        /// <summary>
        /// A list of IDs referring to policies bound to that group. It's not possible to mix policies here that are defined for
        /// different scopes (different clusters or environments) than specified via attributes `cluster` or `environment`.
        /// </summary>
        public InputList<string> Policies
        {
            get => _policies ?? (_policies = new InputList<string>());
            set => _policies = value;
        }

        public PolicyBindingsArgs()
        {
        }
        public static new PolicyBindingsArgs Empty => new PolicyBindingsArgs();
    }

    public sealed class PolicyBindingsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The UUID of the cluster. The attribute `policies` must contain ONLY policies defined for that cluster.
        /// </summary>
        [Input("cluster")]
        public Input<string>? Cluster { get; set; }

        /// <summary>
        /// The ID of the environment (https://&lt;environmentid&gt;.live.dynatrace.com). The attribute `policies` must contain ONLY
        /// policies defined for that environment.
        /// </summary>
        [Input("environment")]
        public Input<string>? Environment { get; set; }

        /// <summary>
        /// The name of the policy
        /// </summary>
        [Input("group")]
        public Input<string>? Group { get; set; }

        [Input("policies")]
        private InputList<string>? _policies;

        /// <summary>
        /// A list of IDs referring to policies bound to that group. It's not possible to mix policies here that are defined for
        /// different scopes (different clusters or environments) than specified via attributes `cluster` or `environment`.
        /// </summary>
        public InputList<string> Policies
        {
            get => _policies ?? (_policies = new InputList<string>());
            set => _policies = value;
        }

        public PolicyBindingsState()
        {
        }
        public static new PolicyBindingsState Empty => new PolicyBindingsState();
    }
}
