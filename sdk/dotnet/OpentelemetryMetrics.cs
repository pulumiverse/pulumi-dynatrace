// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/opentelemetryMetrics:OpentelemetryMetrics")]
    public partial class OpentelemetryMetrics : global::Pulumi.CustomResource
    {
        /// <summary>
        /// When enabled, the attributes defined in the list below will be added as dimensions to ingested OTLP metrics if they are present in the OpenTelemetry resource or in the instrumentation scope.
        /// </summary>
        [Output("additionalAttributes")]
        public Output<Outputs.OpentelemetryMetricsAdditionalAttributes?> AdditionalAttributes { get; private set; } = null!;

        /// <summary>
        /// Add the resource and scope attributes configured below as dimensions
        /// </summary>
        [Output("additionalAttributesToDimensionEnabled")]
        public Output<bool> AdditionalAttributesToDimensionEnabled { get; private set; } = null!;

        /// <summary>
        /// When enabled, the Meter name (also referred to as InstrumentationScope or InstrumentationLibrary in OpenTelemetry SDKs)
        /// and version will be added as dimensions (`otel.scope.name` and `otel.scope.version`) to ingested OTLP metrics. **Note:**
        /// Modifying this setting will cause the metric to change. This may have an impact on existing dashboards, events and
        /// alerts that make use of these dimensions. In this case, they will need to be updated manually
        /// </summary>
        [Output("meterNameToDimensionEnabled")]
        public Output<bool> MeterNameToDimensionEnabled { get; private set; } = null!;

        [Output("mode")]
        public Output<string?> Mode { get; private set; } = null!;

        /// <summary>
        /// The scope of this setting (environment-default). Omit this property if you want to cover the whole environment.
        /// </summary>
        [Output("scope")]
        public Output<string?> Scope { get; private set; } = null!;

        /// <summary>
        /// The attributes defined in the list below will be dropped from all ingested OTLP metrics. Upon ingest, the *Allow list:
        /// resource and scope attributes* above is applied first. Then, the *Deny list: all attributes* below is applied. The deny
        /// list therefore applies to all attributes from all sources (data points, scope and resource). **Notes:** * Modifying this
        /// setting (adding, renaming, disabling or removing attributes) will cause the metric to change. This may have an impact on
        /// existing dashboards, events and alerts that make use of these dimensions. In this case, they will need to be updated
        /// manually. * Dynatrace does not recommend including attributes starting with "dt." to the deny list. Dynatrace leverages
        /// these attributes to [Enrich
        /// metrics](https://www.dynatrace.com/support/help/extend-dynatrace/extend-metrics/reference/enrich-metrics).
        /// </summary>
        [Output("toDropAttributes")]
        public Output<Outputs.OpentelemetryMetricsToDropAttributes?> ToDropAttributes { get; private set; } = null!;


        /// <summary>
        /// Create a OpentelemetryMetrics resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OpentelemetryMetrics(string name, OpentelemetryMetricsArgs? args = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/opentelemetryMetrics:OpentelemetryMetrics", name, args ?? new OpentelemetryMetricsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OpentelemetryMetrics(string name, Input<string> id, OpentelemetryMetricsState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/opentelemetryMetrics:OpentelemetryMetrics", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OpentelemetryMetrics resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OpentelemetryMetrics Get(string name, Input<string> id, OpentelemetryMetricsState? state = null, CustomResourceOptions? options = null)
        {
            return new OpentelemetryMetrics(name, id, state, options);
        }
    }

    public sealed class OpentelemetryMetricsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When enabled, the attributes defined in the list below will be added as dimensions to ingested OTLP metrics if they are present in the OpenTelemetry resource or in the instrumentation scope.
        /// </summary>
        [Input("additionalAttributes")]
        public Input<Inputs.OpentelemetryMetricsAdditionalAttributesArgs>? AdditionalAttributes { get; set; }

        /// <summary>
        /// Add the resource and scope attributes configured below as dimensions
        /// </summary>
        [Input("additionalAttributesToDimensionEnabled")]
        public Input<bool>? AdditionalAttributesToDimensionEnabled { get; set; }

        /// <summary>
        /// When enabled, the Meter name (also referred to as InstrumentationScope or InstrumentationLibrary in OpenTelemetry SDKs)
        /// and version will be added as dimensions (`otel.scope.name` and `otel.scope.version`) to ingested OTLP metrics. **Note:**
        /// Modifying this setting will cause the metric to change. This may have an impact on existing dashboards, events and
        /// alerts that make use of these dimensions. In this case, they will need to be updated manually
        /// </summary>
        [Input("meterNameToDimensionEnabled")]
        public Input<bool>? MeterNameToDimensionEnabled { get; set; }

        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// The scope of this setting (environment-default). Omit this property if you want to cover the whole environment.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        /// <summary>
        /// The attributes defined in the list below will be dropped from all ingested OTLP metrics. Upon ingest, the *Allow list:
        /// resource and scope attributes* above is applied first. Then, the *Deny list: all attributes* below is applied. The deny
        /// list therefore applies to all attributes from all sources (data points, scope and resource). **Notes:** * Modifying this
        /// setting (adding, renaming, disabling or removing attributes) will cause the metric to change. This may have an impact on
        /// existing dashboards, events and alerts that make use of these dimensions. In this case, they will need to be updated
        /// manually. * Dynatrace does not recommend including attributes starting with "dt." to the deny list. Dynatrace leverages
        /// these attributes to [Enrich
        /// metrics](https://www.dynatrace.com/support/help/extend-dynatrace/extend-metrics/reference/enrich-metrics).
        /// </summary>
        [Input("toDropAttributes")]
        public Input<Inputs.OpentelemetryMetricsToDropAttributesArgs>? ToDropAttributes { get; set; }

        public OpentelemetryMetricsArgs()
        {
        }
        public static new OpentelemetryMetricsArgs Empty => new OpentelemetryMetricsArgs();
    }

    public sealed class OpentelemetryMetricsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When enabled, the attributes defined in the list below will be added as dimensions to ingested OTLP metrics if they are present in the OpenTelemetry resource or in the instrumentation scope.
        /// </summary>
        [Input("additionalAttributes")]
        public Input<Inputs.OpentelemetryMetricsAdditionalAttributesGetArgs>? AdditionalAttributes { get; set; }

        /// <summary>
        /// Add the resource and scope attributes configured below as dimensions
        /// </summary>
        [Input("additionalAttributesToDimensionEnabled")]
        public Input<bool>? AdditionalAttributesToDimensionEnabled { get; set; }

        /// <summary>
        /// When enabled, the Meter name (also referred to as InstrumentationScope or InstrumentationLibrary in OpenTelemetry SDKs)
        /// and version will be added as dimensions (`otel.scope.name` and `otel.scope.version`) to ingested OTLP metrics. **Note:**
        /// Modifying this setting will cause the metric to change. This may have an impact on existing dashboards, events and
        /// alerts that make use of these dimensions. In this case, they will need to be updated manually
        /// </summary>
        [Input("meterNameToDimensionEnabled")]
        public Input<bool>? MeterNameToDimensionEnabled { get; set; }

        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// The scope of this setting (environment-default). Omit this property if you want to cover the whole environment.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        /// <summary>
        /// The attributes defined in the list below will be dropped from all ingested OTLP metrics. Upon ingest, the *Allow list:
        /// resource and scope attributes* above is applied first. Then, the *Deny list: all attributes* below is applied. The deny
        /// list therefore applies to all attributes from all sources (data points, scope and resource). **Notes:** * Modifying this
        /// setting (adding, renaming, disabling or removing attributes) will cause the metric to change. This may have an impact on
        /// existing dashboards, events and alerts that make use of these dimensions. In this case, they will need to be updated
        /// manually. * Dynatrace does not recommend including attributes starting with "dt." to the deny list. Dynatrace leverages
        /// these attributes to [Enrich
        /// metrics](https://www.dynatrace.com/support/help/extend-dynatrace/extend-metrics/reference/enrich-metrics).
        /// </summary>
        [Input("toDropAttributes")]
        public Input<Inputs.OpentelemetryMetricsToDropAttributesGetArgs>? ToDropAttributes { get; set; }

        public OpentelemetryMetricsState()
        {
        }
        public static new OpentelemetryMetricsState Empty => new OpentelemetryMetricsState();
    }
}
