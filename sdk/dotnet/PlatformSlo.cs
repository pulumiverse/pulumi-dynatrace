// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    /// <summary>
    /// &gt; **Dynatrace SaaS only**
    /// 
    /// &gt; To utilize this resource, please define the environment variables `DT_CLIENT_ID`, `DT_CLIENT_SECRET`, `DT_ACCOUNT_ID` with an OAuth client including the following permissions: **View SLOs** (`slo:slos:read`) and **Create and edit SLOs** (`slo:slos:write`).
    /// 
    /// &gt; This resource is excluded by default in the export utility, please explicitly specify the resource to retrieve existing configuration.
    /// 
    /// ## Dynatrace Documentation
    /// 
    /// - Service-Level Objectives overview - hhttps://docs.dynatrace.com/docs/deliver/service-level-objectives
    /// 
    /// - SLO Service Public API - https://########.apps.dynatrace.com/platform/swagger-ui/index.html?urls.primaryName=Service-Level+Objectives
    /// 
    /// ## Resource Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Dynatrace = Pulumiverse.Dynatrace;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var _name_ = new Dynatrace.PlatformSlo("#name#", new()
    ///     {
    ///         Criteria = new Dynatrace.Inputs.PlatformSloCriteriaArgs
    ///         {
    ///             CriteriaDetails = new[]
    ///             {
    ///                 new Dynatrace.Inputs.PlatformSloCriteriaCriteriaDetailArgs
    ///                 {
    ///                     Target = 96,
    ///                     TimeframeFrom = "now-30d",
    ///                     TimeframeTo = "now",
    ///                     Warning = 99,
    ///                 },
    ///             },
    ///         },
    ///         CustomSli = new Dynatrace.Inputs.PlatformSloCustomSliArgs
    ///         {
    ///             Indicator = @"  timeseries { total=sum(dt.service.request.count) ,failures=sum(dt.service.request.failure_count) }, by: { dt.entity.service }
    ///   | fieldsAdd tags=entityAttr(dt.entity.service, ""tags"")
    ///   | filter in(tags, ""criticality:Gold"")
    ///   | fieldsAdd entityName = entityName(dt.entity.service)
    ///   | fieldsAdd sli=(((total[]-failures[])/total[])*(100))
    ///   | fieldsRemove total, failures, tags
    /// 
    /// ",
    ///         },
    ///         Description = "Sample custom SLO",
    ///         Tags = new[]
    ///         {
    ///             "ExampleKey:ExampleValue",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [DynatraceResourceType("dynatrace:index/platformSlo:PlatformSlo")]
    public partial class PlatformSlo : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Criteria of the SLO
        /// </summary>
        [Output("criteria")]
        public Output<Outputs.PlatformSloCriteria> Criteria { get; private set; } = null!;

        /// <summary>
        /// Custom SLI of the SLO
        /// </summary>
        [Output("customSli")]
        public Output<Outputs.PlatformSloCustomSli?> CustomSli { get; private set; } = null!;

        /// <summary>
        /// Description of the SLO
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Name of the SLO
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// SLI reference of the SLO
        /// </summary>
        [Output("sliReference")]
        public Output<Outputs.PlatformSloSliReference?> SliReference { get; private set; } = null!;

        /// <summary>
        /// Tags of the SLO. Example: `Stage:DEV`
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a PlatformSlo resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PlatformSlo(string name, PlatformSloArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/platformSlo:PlatformSlo", name, args ?? new PlatformSloArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PlatformSlo(string name, Input<string> id, PlatformSloState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/platformSlo:PlatformSlo", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PlatformSlo resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PlatformSlo Get(string name, Input<string> id, PlatformSloState? state = null, CustomResourceOptions? options = null)
        {
            return new PlatformSlo(name, id, state, options);
        }
    }

    public sealed class PlatformSloArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Criteria of the SLO
        /// </summary>
        [Input("criteria", required: true)]
        public Input<Inputs.PlatformSloCriteriaArgs> Criteria { get; set; } = null!;

        /// <summary>
        /// Custom SLI of the SLO
        /// </summary>
        [Input("customSli")]
        public Input<Inputs.PlatformSloCustomSliArgs>? CustomSli { get; set; }

        /// <summary>
        /// Description of the SLO
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name of the SLO
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// SLI reference of the SLO
        /// </summary>
        [Input("sliReference")]
        public Input<Inputs.PlatformSloSliReferenceArgs>? SliReference { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags of the SLO. Example: `Stage:DEV`
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public PlatformSloArgs()
        {
        }
        public static new PlatformSloArgs Empty => new PlatformSloArgs();
    }

    public sealed class PlatformSloState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Criteria of the SLO
        /// </summary>
        [Input("criteria")]
        public Input<Inputs.PlatformSloCriteriaGetArgs>? Criteria { get; set; }

        /// <summary>
        /// Custom SLI of the SLO
        /// </summary>
        [Input("customSli")]
        public Input<Inputs.PlatformSloCustomSliGetArgs>? CustomSli { get; set; }

        /// <summary>
        /// Description of the SLO
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name of the SLO
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// SLI reference of the SLO
        /// </summary>
        [Input("sliReference")]
        public Input<Inputs.PlatformSloSliReferenceGetArgs>? SliReference { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags of the SLO. Example: `Stage:DEV`
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public PlatformSloState()
        {
        }
        public static new PlatformSloState Empty => new PlatformSloState();
    }
}
