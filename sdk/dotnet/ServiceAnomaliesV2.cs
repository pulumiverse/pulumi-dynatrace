// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/serviceAnomaliesV2:ServiceAnomaliesV2")]
    public partial class ServiceAnomaliesV2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Failure rate
        /// </summary>
        [Output("failureRate")]
        public Output<Outputs.ServiceAnomaliesV2FailureRate> FailureRate { get; private set; } = null!;

        /// <summary>
        /// Alert if the observed load is lower than the expected load by a specified margin for a specified amount of time:
        /// </summary>
        [Output("loadDrops")]
        public Output<Outputs.ServiceAnomaliesV2LoadDrops> LoadDrops { get; private set; } = null!;

        /// <summary>
        /// Alert if the observed load exceeds the expected load by a specified margin for a specified amount of time:
        /// </summary>
        [Output("loadSpikes")]
        public Output<Outputs.ServiceAnomaliesV2LoadSpikes> LoadSpikes { get; private set; } = null!;

        /// <summary>
        /// Response time
        /// </summary>
        [Output("responseTime")]
        public Output<Outputs.ServiceAnomaliesV2ResponseTime> ResponseTime { get; private set; } = null!;

        /// <summary>
        /// The scope of this setting (SERVICE*METHOD, SERVICE, HOST*GROUP). Omit this property if you want to cover the whole environment.
        /// </summary>
        [Output("scope")]
        public Output<string?> Scope { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceAnomaliesV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceAnomaliesV2(string name, ServiceAnomaliesV2Args args, CustomResourceOptions? options = null)
            : base("dynatrace:index/serviceAnomaliesV2:ServiceAnomaliesV2", name, args ?? new ServiceAnomaliesV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private ServiceAnomaliesV2(string name, Input<string> id, ServiceAnomaliesV2State? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/serviceAnomaliesV2:ServiceAnomaliesV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceAnomaliesV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceAnomaliesV2 Get(string name, Input<string> id, ServiceAnomaliesV2State? state = null, CustomResourceOptions? options = null)
        {
            return new ServiceAnomaliesV2(name, id, state, options);
        }
    }

    public sealed class ServiceAnomaliesV2Args : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Failure rate
        /// </summary>
        [Input("failureRate", required: true)]
        public Input<Inputs.ServiceAnomaliesV2FailureRateArgs> FailureRate { get; set; } = null!;

        /// <summary>
        /// Alert if the observed load is lower than the expected load by a specified margin for a specified amount of time:
        /// </summary>
        [Input("loadDrops", required: true)]
        public Input<Inputs.ServiceAnomaliesV2LoadDropsArgs> LoadDrops { get; set; } = null!;

        /// <summary>
        /// Alert if the observed load exceeds the expected load by a specified margin for a specified amount of time:
        /// </summary>
        [Input("loadSpikes", required: true)]
        public Input<Inputs.ServiceAnomaliesV2LoadSpikesArgs> LoadSpikes { get; set; } = null!;

        /// <summary>
        /// Response time
        /// </summary>
        [Input("responseTime", required: true)]
        public Input<Inputs.ServiceAnomaliesV2ResponseTimeArgs> ResponseTime { get; set; } = null!;

        /// <summary>
        /// The scope of this setting (SERVICE*METHOD, SERVICE, HOST*GROUP). Omit this property if you want to cover the whole environment.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        public ServiceAnomaliesV2Args()
        {
        }
        public static new ServiceAnomaliesV2Args Empty => new ServiceAnomaliesV2Args();
    }

    public sealed class ServiceAnomaliesV2State : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Failure rate
        /// </summary>
        [Input("failureRate")]
        public Input<Inputs.ServiceAnomaliesV2FailureRateGetArgs>? FailureRate { get; set; }

        /// <summary>
        /// Alert if the observed load is lower than the expected load by a specified margin for a specified amount of time:
        /// </summary>
        [Input("loadDrops")]
        public Input<Inputs.ServiceAnomaliesV2LoadDropsGetArgs>? LoadDrops { get; set; }

        /// <summary>
        /// Alert if the observed load exceeds the expected load by a specified margin for a specified amount of time:
        /// </summary>
        [Input("loadSpikes")]
        public Input<Inputs.ServiceAnomaliesV2LoadSpikesGetArgs>? LoadSpikes { get; set; }

        /// <summary>
        /// Response time
        /// </summary>
        [Input("responseTime")]
        public Input<Inputs.ServiceAnomaliesV2ResponseTimeGetArgs>? ResponseTime { get; set; }

        /// <summary>
        /// The scope of this setting (SERVICE*METHOD, SERVICE, HOST*GROUP). Omit this property if you want to cover the whole environment.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        public ServiceAnomaliesV2State()
        {
        }
        public static new ServiceAnomaliesV2State Empty => new ServiceAnomaliesV2State();
    }
}
