// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/urlBasedSampling:UrlBasedSampling")]
    public partial class UrlBasedSampling : global::Pulumi.CustomResource
    {
        /// <summary>
        /// This setting is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// Select the scaling factor for the current sampling rate of the system. Possible values: `IncreaseCapturing128Times`, `IncreaseCapturing64Times`, `IncreaseCapturing32Times`, `IncreaseCapturing16Times`, `IncreaseCapturing8Times`, `IncreaseCapturing4Times`, `IncreaseCapturing2Times`, `ReduceCapturingByFactor2`, `ReduceCapturingByFactor4`, `ReduceCapturingByFactor8`, `ReduceCapturingByFactor16`, `ReduceCapturingByFactor32`, `ReduceCapturingByFactor64`, `ReduceCapturingByFactor128`
        /// </summary>
        [Output("factor")]
        public Output<string?> Factor { get; private set; } = null!;

        /// <summary>
        /// The scaling factor for the defined URL will be applied to any HTTP method.
        /// </summary>
        [Output("httpMethodAny")]
        public Output<bool> HttpMethodAny { get; private set; } = null!;

        /// <summary>
        /// Possible values: `GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH`
        /// </summary>
        [Output("httpMethods")]
        public Output<ImmutableArray<string>> HttpMethods { get; private set; } = null!;

        /// <summary>
        /// The matching URLs will always be ignored, also if Adaptive Traffic Management is not active.
        /// </summary>
        [Output("ignore")]
        public Output<bool> Ignore { get; private set; } = null!;

        /// <summary>
        /// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        /// </summary>
        [Output("insertAfter")]
        public Output<string> InsertAfter { get; private set; } = null!;

        /// <summary>
        /// Path of the URL.
        /// </summary>
        [Output("path")]
        public Output<string?> Path { get; private set; } = null!;

        /// <summary>
        /// Path comparison condition. Possible values: `EQUALS`, `DOES_NOT_EQUAL`, `CONTAINS`, `DOES_NOT_CONTAIN`, `STARTS_WITH`, `DOES_NOT_START_WITH`, `ENDS_WITH`, `DOES_NOT_END_WITH`
        /// </summary>
        [Output("pathComparisonType")]
        public Output<string?> PathComparisonType { get; private set; } = null!;

        /// <summary>
        /// Add URL parameters in any order. **All** specified parameters must be present in the query of an URL to get a match.
        /// </summary>
        [Output("queryParameters")]
        public Output<Outputs.UrlBasedSamplingQueryParameters?> QueryParameters { get; private set; } = null!;

        /// <summary>
        /// The scope of this setting (PROCESS*GROUP*INSTANCE, PROCESS_GROUP). Omit this property if you want to cover the whole environment.
        /// </summary>
        [Output("scope")]
        public Output<string?> Scope { get; private set; } = null!;


        /// <summary>
        /// Create a UrlBasedSampling resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public UrlBasedSampling(string name, UrlBasedSamplingArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/urlBasedSampling:UrlBasedSampling", name, args ?? new UrlBasedSamplingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private UrlBasedSampling(string name, Input<string> id, UrlBasedSamplingState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/urlBasedSampling:UrlBasedSampling", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing UrlBasedSampling resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static UrlBasedSampling Get(string name, Input<string> id, UrlBasedSamplingState? state = null, CustomResourceOptions? options = null)
        {
            return new UrlBasedSampling(name, id, state, options);
        }
    }

    public sealed class UrlBasedSamplingArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This setting is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// Select the scaling factor for the current sampling rate of the system. Possible values: `IncreaseCapturing128Times`, `IncreaseCapturing64Times`, `IncreaseCapturing32Times`, `IncreaseCapturing16Times`, `IncreaseCapturing8Times`, `IncreaseCapturing4Times`, `IncreaseCapturing2Times`, `ReduceCapturingByFactor2`, `ReduceCapturingByFactor4`, `ReduceCapturingByFactor8`, `ReduceCapturingByFactor16`, `ReduceCapturingByFactor32`, `ReduceCapturingByFactor64`, `ReduceCapturingByFactor128`
        /// </summary>
        [Input("factor")]
        public Input<string>? Factor { get; set; }

        /// <summary>
        /// The scaling factor for the defined URL will be applied to any HTTP method.
        /// </summary>
        [Input("httpMethodAny", required: true)]
        public Input<bool> HttpMethodAny { get; set; } = null!;

        [Input("httpMethods")]
        private InputList<string>? _httpMethods;

        /// <summary>
        /// Possible values: `GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH`
        /// </summary>
        public InputList<string> HttpMethods
        {
            get => _httpMethods ?? (_httpMethods = new InputList<string>());
            set => _httpMethods = value;
        }

        /// <summary>
        /// The matching URLs will always be ignored, also if Adaptive Traffic Management is not active.
        /// </summary>
        [Input("ignore", required: true)]
        public Input<bool> Ignore { get; set; } = null!;

        /// <summary>
        /// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        /// </summary>
        [Input("insertAfter")]
        public Input<string>? InsertAfter { get; set; }

        /// <summary>
        /// Path of the URL.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// Path comparison condition. Possible values: `EQUALS`, `DOES_NOT_EQUAL`, `CONTAINS`, `DOES_NOT_CONTAIN`, `STARTS_WITH`, `DOES_NOT_START_WITH`, `ENDS_WITH`, `DOES_NOT_END_WITH`
        /// </summary>
        [Input("pathComparisonType")]
        public Input<string>? PathComparisonType { get; set; }

        /// <summary>
        /// Add URL parameters in any order. **All** specified parameters must be present in the query of an URL to get a match.
        /// </summary>
        [Input("queryParameters")]
        public Input<Inputs.UrlBasedSamplingQueryParametersArgs>? QueryParameters { get; set; }

        /// <summary>
        /// The scope of this setting (PROCESS*GROUP*INSTANCE, PROCESS_GROUP). Omit this property if you want to cover the whole environment.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        public UrlBasedSamplingArgs()
        {
        }
        public static new UrlBasedSamplingArgs Empty => new UrlBasedSamplingArgs();
    }

    public sealed class UrlBasedSamplingState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This setting is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Select the scaling factor for the current sampling rate of the system. Possible values: `IncreaseCapturing128Times`, `IncreaseCapturing64Times`, `IncreaseCapturing32Times`, `IncreaseCapturing16Times`, `IncreaseCapturing8Times`, `IncreaseCapturing4Times`, `IncreaseCapturing2Times`, `ReduceCapturingByFactor2`, `ReduceCapturingByFactor4`, `ReduceCapturingByFactor8`, `ReduceCapturingByFactor16`, `ReduceCapturingByFactor32`, `ReduceCapturingByFactor64`, `ReduceCapturingByFactor128`
        /// </summary>
        [Input("factor")]
        public Input<string>? Factor { get; set; }

        /// <summary>
        /// The scaling factor for the defined URL will be applied to any HTTP method.
        /// </summary>
        [Input("httpMethodAny")]
        public Input<bool>? HttpMethodAny { get; set; }

        [Input("httpMethods")]
        private InputList<string>? _httpMethods;

        /// <summary>
        /// Possible values: `GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH`
        /// </summary>
        public InputList<string> HttpMethods
        {
            get => _httpMethods ?? (_httpMethods = new InputList<string>());
            set => _httpMethods = value;
        }

        /// <summary>
        /// The matching URLs will always be ignored, also if Adaptive Traffic Management is not active.
        /// </summary>
        [Input("ignore")]
        public Input<bool>? Ignore { get; set; }

        /// <summary>
        /// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        /// </summary>
        [Input("insertAfter")]
        public Input<string>? InsertAfter { get; set; }

        /// <summary>
        /// Path of the URL.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// Path comparison condition. Possible values: `EQUALS`, `DOES_NOT_EQUAL`, `CONTAINS`, `DOES_NOT_CONTAIN`, `STARTS_WITH`, `DOES_NOT_START_WITH`, `ENDS_WITH`, `DOES_NOT_END_WITH`
        /// </summary>
        [Input("pathComparisonType")]
        public Input<string>? PathComparisonType { get; set; }

        /// <summary>
        /// Add URL parameters in any order. **All** specified parameters must be present in the query of an URL to get a match.
        /// </summary>
        [Input("queryParameters")]
        public Input<Inputs.UrlBasedSamplingQueryParametersGetArgs>? QueryParameters { get; set; }

        /// <summary>
        /// The scope of this setting (PROCESS*GROUP*INSTANCE, PROCESS_GROUP). Omit this property if you want to cover the whole environment.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        public UrlBasedSamplingState()
        {
        }
        public static new UrlBasedSamplingState Empty => new UrlBasedSamplingState();
    }
}
