// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/slo:Slo")]
    public partial class Slo : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The total count metric (the denominator in rate calculation)
        /// </summary>
        [Output("denominator")]
        public Output<string?> Denominator { get; private set; } = null!;

        /// <summary>
        /// The custom description of the SLO (optional)
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The SLO is enabled (`False`) or disabled (`True`)
        /// </summary>
        [Output("disabled")]
        public Output<bool?> Disabled { get; private set; } = null!;

        /// <summary>
        /// Error budget burn rate configuration of a service-level objective (SLO).
        /// </summary>
        [Output("errorBudgetBurnRate")]
        public Output<Outputs.SloErrorBudgetBurnRate?> ErrorBudgetBurnRate { get; private set; } = null!;

        /// <summary>
        /// The evaluation type of the SLO. Currently only `AGGREGATE` is supported
        /// </summary>
        [Output("evaluation")]
        public Output<string> Evaluation { get; private set; } = null!;

        /// <summary>
        /// The entity filter for the SLO evaluation. Use the [syntax of entity selector](https://dt-url.net/entityselector)
        /// </summary>
        [Output("filter")]
        public Output<string?> Filter { get; private set; } = null!;

        /// <summary>
        /// The percentage-based metric expression for the calculation of the SLO
        /// </summary>
        [Output("metricExpression")]
        public Output<string?> MetricExpression { get; private set; } = null!;

        /// <summary>
        /// The name that is used to create SLO func metrics keys. Once created, metric name cannot be changed.
        /// </summary>
        [Output("metricName")]
        public Output<string?> MetricName { get; private set; } = null!;

        /// <summary>
        /// The name of the rule
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The metric for the count of successes (the numerator in rate calculation)
        /// </summary>
        [Output("numerator")]
        public Output<string?> Numerator { get; private set; } = null!;

        /// <summary>
        /// The percentage-based metric for the calculation of the SLO
        /// </summary>
        [Output("rate")]
        public Output<string?> Rate { get; private set; } = null!;

        /// <summary>
        /// The target value of the SLO
        /// </summary>
        [Output("target")]
        public Output<double> Target { get; private set; } = null!;

        /// <summary>
        /// The timeframe for the SLO evaluation. Use the syntax of the global timeframe selector
        /// </summary>
        [Output("timeframe")]
        public Output<string> Timeframe { get; private set; } = null!;

        /// <summary>
        /// The warning value of the SLO. At warning state the SLO is still fulfilled but is getting close to failure
        /// </summary>
        [Output("warning")]
        public Output<double> Warning { get; private set; } = null!;


        /// <summary>
        /// Create a Slo resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Slo(string name, SloArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/slo:Slo", name, args ?? new SloArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Slo(string name, Input<string> id, SloState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/slo:Slo", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Slo resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Slo Get(string name, Input<string> id, SloState? state = null, CustomResourceOptions? options = null)
        {
            return new Slo(name, id, state, options);
        }
    }

    public sealed class SloArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The total count metric (the denominator in rate calculation)
        /// </summary>
        [Input("denominator")]
        public Input<string>? Denominator { get; set; }

        /// <summary>
        /// The custom description of the SLO (optional)
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The SLO is enabled (`False`) or disabled (`True`)
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// Error budget burn rate configuration of a service-level objective (SLO).
        /// </summary>
        [Input("errorBudgetBurnRate")]
        public Input<Inputs.SloErrorBudgetBurnRateArgs>? ErrorBudgetBurnRate { get; set; }

        /// <summary>
        /// The evaluation type of the SLO. Currently only `AGGREGATE` is supported
        /// </summary>
        [Input("evaluation", required: true)]
        public Input<string> Evaluation { get; set; } = null!;

        /// <summary>
        /// The entity filter for the SLO evaluation. Use the [syntax of entity selector](https://dt-url.net/entityselector)
        /// </summary>
        [Input("filter")]
        public Input<string>? Filter { get; set; }

        /// <summary>
        /// The percentage-based metric expression for the calculation of the SLO
        /// </summary>
        [Input("metricExpression")]
        public Input<string>? MetricExpression { get; set; }

        /// <summary>
        /// The name that is used to create SLO func metrics keys. Once created, metric name cannot be changed.
        /// </summary>
        [Input("metricName")]
        public Input<string>? MetricName { get; set; }

        /// <summary>
        /// The name of the rule
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The metric for the count of successes (the numerator in rate calculation)
        /// </summary>
        [Input("numerator")]
        public Input<string>? Numerator { get; set; }

        /// <summary>
        /// The percentage-based metric for the calculation of the SLO
        /// </summary>
        [Input("rate")]
        public Input<string>? Rate { get; set; }

        /// <summary>
        /// The target value of the SLO
        /// </summary>
        [Input("target", required: true)]
        public Input<double> Target { get; set; } = null!;

        /// <summary>
        /// The timeframe for the SLO evaluation. Use the syntax of the global timeframe selector
        /// </summary>
        [Input("timeframe", required: true)]
        public Input<string> Timeframe { get; set; } = null!;

        /// <summary>
        /// The warning value of the SLO. At warning state the SLO is still fulfilled but is getting close to failure
        /// </summary>
        [Input("warning", required: true)]
        public Input<double> Warning { get; set; } = null!;

        public SloArgs()
        {
        }
        public static new SloArgs Empty => new SloArgs();
    }

    public sealed class SloState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The total count metric (the denominator in rate calculation)
        /// </summary>
        [Input("denominator")]
        public Input<string>? Denominator { get; set; }

        /// <summary>
        /// The custom description of the SLO (optional)
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The SLO is enabled (`False`) or disabled (`True`)
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// Error budget burn rate configuration of a service-level objective (SLO).
        /// </summary>
        [Input("errorBudgetBurnRate")]
        public Input<Inputs.SloErrorBudgetBurnRateGetArgs>? ErrorBudgetBurnRate { get; set; }

        /// <summary>
        /// The evaluation type of the SLO. Currently only `AGGREGATE` is supported
        /// </summary>
        [Input("evaluation")]
        public Input<string>? Evaluation { get; set; }

        /// <summary>
        /// The entity filter for the SLO evaluation. Use the [syntax of entity selector](https://dt-url.net/entityselector)
        /// </summary>
        [Input("filter")]
        public Input<string>? Filter { get; set; }

        /// <summary>
        /// The percentage-based metric expression for the calculation of the SLO
        /// </summary>
        [Input("metricExpression")]
        public Input<string>? MetricExpression { get; set; }

        /// <summary>
        /// The name that is used to create SLO func metrics keys. Once created, metric name cannot be changed.
        /// </summary>
        [Input("metricName")]
        public Input<string>? MetricName { get; set; }

        /// <summary>
        /// The name of the rule
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The metric for the count of successes (the numerator in rate calculation)
        /// </summary>
        [Input("numerator")]
        public Input<string>? Numerator { get; set; }

        /// <summary>
        /// The percentage-based metric for the calculation of the SLO
        /// </summary>
        [Input("rate")]
        public Input<string>? Rate { get; set; }

        /// <summary>
        /// The target value of the SLO
        /// </summary>
        [Input("target")]
        public Input<double>? Target { get; set; }

        /// <summary>
        /// The timeframe for the SLO evaluation. Use the syntax of the global timeframe selector
        /// </summary>
        [Input("timeframe")]
        public Input<string>? Timeframe { get; set; }

        /// <summary>
        /// The warning value of the SLO. At warning state the SLO is still fulfilled but is getting close to failure
        /// </summary>
        [Input("warning")]
        public Input<double>? Warning { get; set; }

        public SloState()
        {
        }
        public static new SloState Empty => new SloState();
    }
}
