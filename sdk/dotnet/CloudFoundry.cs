// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/cloudFoundry:CloudFoundry")]
    public partial class CloudFoundry : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ActiveGate group
        /// </summary>
        [Output("activeGateGroup")]
        public Output<string?> ActiveGateGroup { get; private set; } = null!;

        /// <summary>
        /// Cloud Foundry API Target
        /// </summary>
        [Output("apiUrl")]
        public Output<string> ApiUrl { get; private set; } = null!;

        /// <summary>
        /// This setting is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// Name this connection
        /// </summary>
        [Output("label")]
        public Output<string> Label { get; private set; } = null!;

        /// <summary>
        /// Cloud Foundry Authentication Endpoint
        /// </summary>
        [Output("loginUrl")]
        public Output<string> LoginUrl { get; private set; } = null!;

        /// <summary>
        /// Cloud Foundry Password
        /// </summary>
        [Output("password")]
        public Output<string> Password { get; private set; } = null!;

        /// <summary>
        /// Cloud Foundry Username
        /// </summary>
        [Output("username")]
        public Output<string> Username { get; private set; } = null!;


        /// <summary>
        /// Create a CloudFoundry resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CloudFoundry(string name, CloudFoundryArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/cloudFoundry:CloudFoundry", name, args ?? new CloudFoundryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CloudFoundry(string name, Input<string> id, CloudFoundryState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/cloudFoundry:CloudFoundry", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CloudFoundry resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CloudFoundry Get(string name, Input<string> id, CloudFoundryState? state = null, CustomResourceOptions? options = null)
        {
            return new CloudFoundry(name, id, state, options);
        }
    }

    public sealed class CloudFoundryArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ActiveGate group
        /// </summary>
        [Input("activeGateGroup")]
        public Input<string>? ActiveGateGroup { get; set; }

        /// <summary>
        /// Cloud Foundry API Target
        /// </summary>
        [Input("apiUrl", required: true)]
        public Input<string> ApiUrl { get; set; } = null!;

        /// <summary>
        /// This setting is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// Name this connection
        /// </summary>
        [Input("label", required: true)]
        public Input<string> Label { get; set; } = null!;

        /// <summary>
        /// Cloud Foundry Authentication Endpoint
        /// </summary>
        [Input("loginUrl", required: true)]
        public Input<string> LoginUrl { get; set; } = null!;

        [Input("password", required: true)]
        private Input<string>? _password;

        /// <summary>
        /// Cloud Foundry Password
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Cloud Foundry Username
        /// </summary>
        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        public CloudFoundryArgs()
        {
        }
        public static new CloudFoundryArgs Empty => new CloudFoundryArgs();
    }

    public sealed class CloudFoundryState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ActiveGate group
        /// </summary>
        [Input("activeGateGroup")]
        public Input<string>? ActiveGateGroup { get; set; }

        /// <summary>
        /// Cloud Foundry API Target
        /// </summary>
        [Input("apiUrl")]
        public Input<string>? ApiUrl { get; set; }

        /// <summary>
        /// This setting is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Name this connection
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        /// <summary>
        /// Cloud Foundry Authentication Endpoint
        /// </summary>
        [Input("loginUrl")]
        public Input<string>? LoginUrl { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Cloud Foundry Password
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Cloud Foundry Username
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public CloudFoundryState()
        {
        }
        public static new CloudFoundryState Empty => new CloudFoundryState();
    }
}
