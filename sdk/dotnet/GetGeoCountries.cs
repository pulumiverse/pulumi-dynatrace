// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    public static class GetGeoCountries
    {
        /// <summary>
        /// The `dynatrace.getGeoCountries` data source retrieves the list of countries and their codes.
        /// 
        /// Geographic regions API: GET countries - https://docs.dynatrace.com/docs/shortlink/api-v2-rum-geographic-regions-get-countries
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Dynatrace.GetGeoCountries.Invoke();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["test"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetGeoCountriesResult> InvokeAsync(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGeoCountriesResult>("dynatrace:index/getGeoCountries:getGeoCountries", InvokeArgs.Empty, options.WithDefaults());

        /// <summary>
        /// The `dynatrace.getGeoCountries` data source retrieves the list of countries and their codes.
        /// 
        /// Geographic regions API: GET countries - https://docs.dynatrace.com/docs/shortlink/api-v2-rum-geographic-regions-get-countries
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Dynatrace.GetGeoCountries.Invoke();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["test"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetGeoCountriesResult> Invoke(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGeoCountriesResult>("dynatrace:index/getGeoCountries:getGeoCountries", InvokeArgs.Empty, options.WithDefaults());

        /// <summary>
        /// The `dynatrace.getGeoCountries` data source retrieves the list of countries and their codes.
        /// 
        /// Geographic regions API: GET countries - https://docs.dynatrace.com/docs/shortlink/api-v2-rum-geographic-regions-get-countries
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Dynatrace.GetGeoCountries.Invoke();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["test"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetGeoCountriesResult> Invoke(InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetGeoCountriesResult>("dynatrace:index/getGeoCountries:getGeoCountries", InvokeArgs.Empty, options.WithDefaults());
    }


    [OutputType]
    public sealed class GetGeoCountriesResult
    {
        public readonly ImmutableArray<Outputs.GetGeoCountriesCountryResult> Countries;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetGeoCountriesResult(
            ImmutableArray<Outputs.GetGeoCountriesCountryResult> countries,

            string id)
        {
            Countries = countries;
            Id = id;
        }
    }
}
