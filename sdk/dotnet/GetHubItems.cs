// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    public static class GetHubItems
    {
        /// <summary>
        /// &gt; This data source requires the API token scope `hub.read`)
        /// 
        /// - `type` (String) The type of hub item you are interested in. Possible values are `TECHNOLOGY`, `EXTENSION1` or `EXTENSION2`. If not specified, no restriction regarding type happens
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var extension_20_items = Dynatrace.GetHubItems.Invoke(new()
        ///     {
        ///         Type = "EXTENSION2",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["artifact-ids"] = extension_20_items.Apply(extension_20_items =&gt; extension_20_items.Apply(getHubItemsResult =&gt; getHubItemsResult.Artifacts)),
        ///         ["hub-items"] = extension_20_items.Apply(extension_20_items =&gt; extension_20_items.Apply(getHubItemsResult =&gt; getHubItemsResult.Items)),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetHubItemsResult> InvokeAsync(GetHubItemsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetHubItemsResult>("dynatrace:index/getHubItems:getHubItems", args ?? new GetHubItemsArgs(), options.WithDefaults());

        /// <summary>
        /// &gt; This data source requires the API token scope `hub.read`)
        /// 
        /// - `type` (String) The type of hub item you are interested in. Possible values are `TECHNOLOGY`, `EXTENSION1` or `EXTENSION2`. If not specified, no restriction regarding type happens
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var extension_20_items = Dynatrace.GetHubItems.Invoke(new()
        ///     {
        ///         Type = "EXTENSION2",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["artifact-ids"] = extension_20_items.Apply(extension_20_items =&gt; extension_20_items.Apply(getHubItemsResult =&gt; getHubItemsResult.Artifacts)),
        ///         ["hub-items"] = extension_20_items.Apply(extension_20_items =&gt; extension_20_items.Apply(getHubItemsResult =&gt; getHubItemsResult.Items)),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetHubItemsResult> Invoke(GetHubItemsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetHubItemsResult>("dynatrace:index/getHubItems:getHubItems", args ?? new GetHubItemsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// &gt; This data source requires the API token scope `hub.read`)
        /// 
        /// - `type` (String) The type of hub item you are interested in. Possible values are `TECHNOLOGY`, `EXTENSION1` or `EXTENSION2`. If not specified, no restriction regarding type happens
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var extension_20_items = Dynatrace.GetHubItems.Invoke(new()
        ///     {
        ///         Type = "EXTENSION2",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["artifact-ids"] = extension_20_items.Apply(extension_20_items =&gt; extension_20_items.Apply(getHubItemsResult =&gt; getHubItemsResult.Artifacts)),
        ///         ["hub-items"] = extension_20_items.Apply(extension_20_items =&gt; extension_20_items.Apply(getHubItemsResult =&gt; getHubItemsResult.Items)),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetHubItemsResult> Invoke(GetHubItemsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetHubItemsResult>("dynatrace:index/getHubItems:getHubItems", args ?? new GetHubItemsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetHubItemsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Represents the type of item. It can be `TECHNOLOGY`, `EXTENSION1` or `EXTENSION2`. If not specified, no restriction regarding type happens
        /// </summary>
        [Input("type")]
        public string? Type { get; set; }

        public GetHubItemsArgs()
        {
        }
        public static new GetHubItemsArgs Empty => new GetHubItemsArgs();
    }

    public sealed class GetHubItemsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Represents the type of item. It can be `TECHNOLOGY`, `EXTENSION1` or `EXTENSION2`. If not specified, no restriction regarding type happens
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public GetHubItemsInvokeArgs()
        {
        }
        public static new GetHubItemsInvokeArgs Empty => new GetHubItemsInvokeArgs();
    }


    [OutputType]
    public sealed class GetHubItemsResult
    {
        /// <summary>
        /// The fully qualified names of the items as a map
        /// </summary>
        public readonly ImmutableDictionary<string, string> Artifacts;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The items within this list
        /// </summary>
        public readonly ImmutableArray<Outputs.GetHubItemsItemResult> Items;
        /// <summary>
        /// Represents the type of item. It can be `TECHNOLOGY`, `EXTENSION1` or `EXTENSION2`. If not specified, no restriction regarding type happens
        /// </summary>
        public readonly string? Type;

        [OutputConstructor]
        private GetHubItemsResult(
            ImmutableDictionary<string, string> artifacts,

            string id,

            ImmutableArray<Outputs.GetHubItemsItemResult> items,

            string? type)
        {
            Artifacts = artifacts;
            Id = id;
            Items = items;
            Type = type;
        }
    }
}
