// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    /// <summary>
    /// &gt; **Dynatrace SaaS only**
    /// 
    /// &gt; To utilize this resource, please define the environment variables `DT_CLIENT_ID`, `DT_CLIENT_SECRET`, `DT_ACCOUNT_ID` with an OAuth client including the following permissions: **Allow IAM policy configuration for environments** (`iam-policies-management`) and **View environments** (`account-env-read`).
    /// 
    /// &gt; This resource is excluded by default in the export utility, please explicitly specify the resource to retrieve existing configuration.
    /// 
    /// ## Dynatrace Documentation
    /// 
    /// - Dynatrace IAM Group Permissions - https://docs.dynatrace.com/docs/manage/identity-access-management/permission-management/manage-user-permissions-policies
    /// 
    /// - Settings API - https://www.dynatrace.com/support/help/how-to-use-dynatrace/user-management-and-sso/manage-groups-and-permissions/iam/iam-getting-started
    /// </summary>
    [DynatraceResourceType("dynatrace:index/iamPolicyBindingsV2:IamPolicyBindingsV2")]
    public partial class IamPolicyBindingsV2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The UUID of the account (`urn:dtaccount:&lt;account-uuid&gt;`). The attribute `policies` must contain ONLY policies defined for that account. The prefix `urn:dtaccount:` MUST be omitted here.
        /// </summary>
        [Output("account")]
        public Output<string?> Account { get; private set; } = null!;

        /// <summary>
        /// The ID of the environment (https://\n\n.live.dynatrace.com). The attribute `policies` must contain ONLY policies defined for that environment.
        /// </summary>
        [Output("environment")]
        public Output<string?> Environment { get; private set; } = null!;

        /// <summary>
        /// The name of the policy
        /// </summary>
        [Output("group")]
        public Output<string> Group { get; private set; } = null!;

        /// <summary>
        /// A list of Policies (ID and parameters/metadata) referring to policies bound to that group. It's not possible to mix policies here that are defined for different scopes (different accounts or environments) than specified via attributes `account` or `environment`.
        /// </summary>
        [Output("policies")]
        public Output<ImmutableArray<Outputs.IamPolicyBindingsV2Policy>> Policies { get; private set; } = null!;


        /// <summary>
        /// Create a IamPolicyBindingsV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IamPolicyBindingsV2(string name, IamPolicyBindingsV2Args args, CustomResourceOptions? options = null)
            : base("dynatrace:index/iamPolicyBindingsV2:IamPolicyBindingsV2", name, args ?? new IamPolicyBindingsV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private IamPolicyBindingsV2(string name, Input<string> id, IamPolicyBindingsV2State? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/iamPolicyBindingsV2:IamPolicyBindingsV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IamPolicyBindingsV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IamPolicyBindingsV2 Get(string name, Input<string> id, IamPolicyBindingsV2State? state = null, CustomResourceOptions? options = null)
        {
            return new IamPolicyBindingsV2(name, id, state, options);
        }
    }

    public sealed class IamPolicyBindingsV2Args : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The UUID of the account (`urn:dtaccount:&lt;account-uuid&gt;`). The attribute `policies` must contain ONLY policies defined for that account. The prefix `urn:dtaccount:` MUST be omitted here.
        /// </summary>
        [Input("account")]
        public Input<string>? Account { get; set; }

        /// <summary>
        /// The ID of the environment (https://\n\n.live.dynatrace.com). The attribute `policies` must contain ONLY policies defined for that environment.
        /// </summary>
        [Input("environment")]
        public Input<string>? Environment { get; set; }

        /// <summary>
        /// The name of the policy
        /// </summary>
        [Input("group", required: true)]
        public Input<string> Group { get; set; } = null!;

        [Input("policies")]
        private InputList<Inputs.IamPolicyBindingsV2PolicyArgs>? _policies;

        /// <summary>
        /// A list of Policies (ID and parameters/metadata) referring to policies bound to that group. It's not possible to mix policies here that are defined for different scopes (different accounts or environments) than specified via attributes `account` or `environment`.
        /// </summary>
        public InputList<Inputs.IamPolicyBindingsV2PolicyArgs> Policies
        {
            get => _policies ?? (_policies = new InputList<Inputs.IamPolicyBindingsV2PolicyArgs>());
            set => _policies = value;
        }

        public IamPolicyBindingsV2Args()
        {
        }
        public static new IamPolicyBindingsV2Args Empty => new IamPolicyBindingsV2Args();
    }

    public sealed class IamPolicyBindingsV2State : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The UUID of the account (`urn:dtaccount:&lt;account-uuid&gt;`). The attribute `policies` must contain ONLY policies defined for that account. The prefix `urn:dtaccount:` MUST be omitted here.
        /// </summary>
        [Input("account")]
        public Input<string>? Account { get; set; }

        /// <summary>
        /// The ID of the environment (https://\n\n.live.dynatrace.com). The attribute `policies` must contain ONLY policies defined for that environment.
        /// </summary>
        [Input("environment")]
        public Input<string>? Environment { get; set; }

        /// <summary>
        /// The name of the policy
        /// </summary>
        [Input("group")]
        public Input<string>? Group { get; set; }

        [Input("policies")]
        private InputList<Inputs.IamPolicyBindingsV2PolicyGetArgs>? _policies;

        /// <summary>
        /// A list of Policies (ID and parameters/metadata) referring to policies bound to that group. It's not possible to mix policies here that are defined for different scopes (different accounts or environments) than specified via attributes `account` or `environment`.
        /// </summary>
        public InputList<Inputs.IamPolicyBindingsV2PolicyGetArgs> Policies
        {
            get => _policies ?? (_policies = new InputList<Inputs.IamPolicyBindingsV2PolicyGetArgs>());
            set => _policies = value;
        }

        public IamPolicyBindingsV2State()
        {
        }
        public static new IamPolicyBindingsV2State Empty => new IamPolicyBindingsV2State();
    }
}
