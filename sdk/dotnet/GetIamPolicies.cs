// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    public static class GetIamPolicies
    {
        /// <summary>
        /// &gt; **Dynatrace SaaS only**
        /// 
        /// &gt; To utilize this resource, please define the environment variables `DT_CLIENT_ID`, `DT_CLIENT_SECRET`, `DT_ACCOUNT_ID` with an OAuth client including the following permissions: **Allow IAM policy configuration for environments** (`iam-policies-management`) and **View environments** (`account-env-read`).
        /// 
        /// You can use the attributes `environments`, `accounts` and `globals` to refine which policies you want to query for.
        /// * The attribute `global` indicates whether the results should also contain global (Dynatrace defined) policies
        /// * The attribute `environment` is an array of environment IDs.
        /// * The results won't contain any environment specific policies if the attribute `environments` has been omitted
        /// * The results will contain policies for all environments reachable via the given credentials if `environments` is set to `["*"]`
        /// * The attribute `accounts` is an array of accounts UUIDs. Set this to `["*"]` if you want to receive account specific policies.
        /// * The results won't contain any account specific policies if the attribute `accounts` has been omitted
        /// ## Example Usage
        /// 
        /// The following example queries for polices of all environments reachable via the given credentials, all accounts and all global policies.
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all = Dynatrace.GetIamPolicies.Invoke(new()
        ///     {
        ///         Accounts = new[]
        ///         {
        ///             "*",
        ///         },
        ///         Environments = new[]
        ///         {
        ///             "*",
        ///         },
        ///         Global = true,
        ///     });
        /// 
        /// });
        /// ```
        /// The following example queries for policies that are defined for the environment with the id `abce234`. No account specific or global policies will be included.
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all = Dynatrace.GetIamPolicies.Invoke(new()
        ///     {
        ///         Environments = new[]
        ///         {
        ///             "abce234",
        ///         },
        ///         Global = false,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## Example Output
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all = Dynatrace.GetIamPolicies.Invoke(new()
        ///     {
        ///         Environments = new[]
        ///         {
        ///             "*",
        ///         },
        ///         Accounts = new[]
        ///         {
        ///             "*",
        ///         },
        ///         Global = true,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["policies"] = all.Apply(getIamPoliciesResult =&gt; getIamPoliciesResult.Policies),
        ///     };
        /// });
        /// ```
        /// 
        /// ```
        /// Changes to Outputs:
        ///   + policies = [
        ///       + {
        ///           + account     = "########-86d8-####-88bd-############"
        ///           + environment = ""
        ///           + global      = false
        ///           + id          = "########-7a6a-####-a43e-#############-#account#-#########-86d8-####-88bd-############"      
        ///           + name        = "storage:bucket-definitions:delete"
        ///           + uuid        = "########-7a6a-####-a43e-############"
        ///         },
        ///         ...
        ///       + {
        ///           + account     = ""
        ///           + environment = "#######"
        ///           + global      = false
        ///           + id          = "########-c7d6-####-878c-#############-#environment#-########"
        ///           + name        = "some-policy"
        ///           + uuid        = "########-c7d6-####-878c-############"
        ///         }, 
        ///         ...
        ///       + {
        ///           + account     = ""
        ///           + environment = ""
        ///           + global      = true
        ///           + id          = "########-6852-####-9d1b-#############-#global#-#global"
        ///           + name        = "Storage Events Read"
        ///           + uuid        = "########-6852-####-9d1b-############"
        ///         },               
        ///     ]
        /// 
        /// ```
        /// </summary>
        public static Task<GetIamPoliciesResult> InvokeAsync(GetIamPoliciesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIamPoliciesResult>("dynatrace:index/getIamPolicies:getIamPolicies", args ?? new GetIamPoliciesArgs(), options.WithDefaults());

        /// <summary>
        /// &gt; **Dynatrace SaaS only**
        /// 
        /// &gt; To utilize this resource, please define the environment variables `DT_CLIENT_ID`, `DT_CLIENT_SECRET`, `DT_ACCOUNT_ID` with an OAuth client including the following permissions: **Allow IAM policy configuration for environments** (`iam-policies-management`) and **View environments** (`account-env-read`).
        /// 
        /// You can use the attributes `environments`, `accounts` and `globals` to refine which policies you want to query for.
        /// * The attribute `global` indicates whether the results should also contain global (Dynatrace defined) policies
        /// * The attribute `environment` is an array of environment IDs.
        /// * The results won't contain any environment specific policies if the attribute `environments` has been omitted
        /// * The results will contain policies for all environments reachable via the given credentials if `environments` is set to `["*"]`
        /// * The attribute `accounts` is an array of accounts UUIDs. Set this to `["*"]` if you want to receive account specific policies.
        /// * The results won't contain any account specific policies if the attribute `accounts` has been omitted
        /// ## Example Usage
        /// 
        /// The following example queries for polices of all environments reachable via the given credentials, all accounts and all global policies.
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all = Dynatrace.GetIamPolicies.Invoke(new()
        ///     {
        ///         Accounts = new[]
        ///         {
        ///             "*",
        ///         },
        ///         Environments = new[]
        ///         {
        ///             "*",
        ///         },
        ///         Global = true,
        ///     });
        /// 
        /// });
        /// ```
        /// The following example queries for policies that are defined for the environment with the id `abce234`. No account specific or global policies will be included.
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all = Dynatrace.GetIamPolicies.Invoke(new()
        ///     {
        ///         Environments = new[]
        ///         {
        ///             "abce234",
        ///         },
        ///         Global = false,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## Example Output
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all = Dynatrace.GetIamPolicies.Invoke(new()
        ///     {
        ///         Environments = new[]
        ///         {
        ///             "*",
        ///         },
        ///         Accounts = new[]
        ///         {
        ///             "*",
        ///         },
        ///         Global = true,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["policies"] = all.Apply(getIamPoliciesResult =&gt; getIamPoliciesResult.Policies),
        ///     };
        /// });
        /// ```
        /// 
        /// ```
        /// Changes to Outputs:
        ///   + policies = [
        ///       + {
        ///           + account     = "########-86d8-####-88bd-############"
        ///           + environment = ""
        ///           + global      = false
        ///           + id          = "########-7a6a-####-a43e-#############-#account#-#########-86d8-####-88bd-############"      
        ///           + name        = "storage:bucket-definitions:delete"
        ///           + uuid        = "########-7a6a-####-a43e-############"
        ///         },
        ///         ...
        ///       + {
        ///           + account     = ""
        ///           + environment = "#######"
        ///           + global      = false
        ///           + id          = "########-c7d6-####-878c-#############-#environment#-########"
        ///           + name        = "some-policy"
        ///           + uuid        = "########-c7d6-####-878c-############"
        ///         }, 
        ///         ...
        ///       + {
        ///           + account     = ""
        ///           + environment = ""
        ///           + global      = true
        ///           + id          = "########-6852-####-9d1b-#############-#global#-#global"
        ///           + name        = "Storage Events Read"
        ///           + uuid        = "########-6852-####-9d1b-############"
        ///         },               
        ///     ]
        /// 
        /// ```
        /// </summary>
        public static Output<GetIamPoliciesResult> Invoke(GetIamPoliciesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIamPoliciesResult>("dynatrace:index/getIamPolicies:getIamPolicies", args ?? new GetIamPoliciesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIamPoliciesArgs : global::Pulumi.InvokeArgs
    {
        [Input("accounts")]
        private List<string>? _accounts;

        /// <summary>
        /// The results will contain policies defined for the given accountID. If one of the entries contains `*` the results will contain policies for all accounts
        /// </summary>
        public List<string> Accounts
        {
            get => _accounts ?? (_accounts = new List<string>());
            set => _accounts = value;
        }

        [Input("environments")]
        private List<string>? _environments;

        /// <summary>
        /// The results will contain policies defined for the given environments. If one of the entries contains `*` the results will contain policies for all environments
        /// </summary>
        public List<string> Environments
        {
            get => _environments ?? (_environments = new List<string>());
            set => _environments = value;
        }

        /// <summary>
        /// If `true` the results will contain global policies
        /// </summary>
        [Input("global")]
        public bool? Global { get; set; }

        public GetIamPoliciesArgs()
        {
        }
        public static new GetIamPoliciesArgs Empty => new GetIamPoliciesArgs();
    }

    public sealed class GetIamPoliciesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("accounts")]
        private InputList<string>? _accounts;

        /// <summary>
        /// The results will contain policies defined for the given accountID. If one of the entries contains `*` the results will contain policies for all accounts
        /// </summary>
        public InputList<string> Accounts
        {
            get => _accounts ?? (_accounts = new InputList<string>());
            set => _accounts = value;
        }

        [Input("environments")]
        private InputList<string>? _environments;

        /// <summary>
        /// The results will contain policies defined for the given environments. If one of the entries contains `*` the results will contain policies for all environments
        /// </summary>
        public InputList<string> Environments
        {
            get => _environments ?? (_environments = new InputList<string>());
            set => _environments = value;
        }

        /// <summary>
        /// If `true` the results will contain global policies
        /// </summary>
        [Input("global")]
        public Input<bool>? Global { get; set; }

        public GetIamPoliciesInvokeArgs()
        {
        }
        public static new GetIamPoliciesInvokeArgs Empty => new GetIamPoliciesInvokeArgs();
    }


    [OutputType]
    public sealed class GetIamPoliciesResult
    {
        /// <summary>
        /// The results will contain policies defined for the given accountID. If one of the entries contains `*` the results will contain policies for all accounts
        /// </summary>
        public readonly ImmutableArray<string> Accounts;
        /// <summary>
        /// The results will contain policies defined for the given environments. If one of the entries contains `*` the results will contain policies for all environments
        /// </summary>
        public readonly ImmutableArray<string> Environments;
        /// <summary>
        /// If `true` the results will contain global policies
        /// </summary>
        public readonly bool? Global;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetIamPoliciesPolicyResult> Policies;

        [OutputConstructor]
        private GetIamPoliciesResult(
            ImmutableArray<string> accounts,

            ImmutableArray<string> environments,

            bool? global,

            string id,

            ImmutableArray<Outputs.GetIamPoliciesPolicyResult> policies)
        {
            Accounts = accounts;
            Environments = environments;
            Global = global;
            Id = id;
            Policies = policies;
        }
    }
}
