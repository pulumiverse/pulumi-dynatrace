// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    public static class GetApiToken
    {
        /// <summary>
        /// The API token data source allows a single access token to be retrieved by its name, note the token value is not included in the response.
        /// 
        /// If multiple tokens match the given name, the first result will be retrieved. To retrieve multiple tokens of the same name, please utilize the `dynatrace.getApiTokens` data source.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleApiToken = Dynatrace.GetApiToken.Invoke(new()
        ///     {
        ///         Name = "Terraform",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["example"] = exampleApiToken,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetApiTokenResult> InvokeAsync(GetApiTokenArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetApiTokenResult>("dynatrace:index/getApiToken:getApiToken", args ?? new GetApiTokenArgs(), options.WithDefaults());

        /// <summary>
        /// The API token data source allows a single access token to be retrieved by its name, note the token value is not included in the response.
        /// 
        /// If multiple tokens match the given name, the first result will be retrieved. To retrieve multiple tokens of the same name, please utilize the `dynatrace.getApiTokens` data source.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleApiToken = Dynatrace.GetApiToken.Invoke(new()
        ///     {
        ///         Name = "Terraform",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["example"] = exampleApiToken,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetApiTokenResult> Invoke(GetApiTokenInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetApiTokenResult>("dynatrace:index/getApiToken:getApiToken", args ?? new GetApiTokenInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The API token data source allows a single access token to be retrieved by its name, note the token value is not included in the response.
        /// 
        /// If multiple tokens match the given name, the first result will be retrieved. To retrieve multiple tokens of the same name, please utilize the `dynatrace.getApiTokens` data source.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleApiToken = Dynatrace.GetApiToken.Invoke(new()
        ///     {
        ///         Name = "Terraform",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["example"] = exampleApiToken,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetApiTokenResult> Invoke(GetApiTokenInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetApiTokenResult>("dynatrace:index/getApiToken:getApiToken", args ?? new GetApiTokenInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetApiTokenArgs : global::Pulumi.InvokeArgs
    {
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetApiTokenArgs()
        {
        }
        public static new GetApiTokenArgs Empty => new GetApiTokenArgs();
    }

    public sealed class GetApiTokenInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetApiTokenInvokeArgs()
        {
        }
        public static new GetApiTokenInvokeArgs Empty => new GetApiTokenInvokeArgs();
    }


    [OutputType]
    public sealed class GetApiTokenResult
    {
        /// <summary>
        /// Token creation date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z')
        /// </summary>
        public readonly string CreationDate;
        /// <summary>
        /// The token is enabled (true) or disabled (false), default disabled (false).
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// The expiration date of the token.
        /// </summary>
        public readonly string ExpirationDate;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        /// <summary>
        /// The owner of the token
        /// </summary>
        public readonly string Owner;
        /// <summary>
        /// The token is a personal access token (true) or an API token (false).
        /// </summary>
        public readonly bool PersonalAccessToken;
        /// <summary>
        /// A list of the scopes to be assigned to the token.
        /// </summary>
        public readonly ImmutableArray<string> Scopes;

        [OutputConstructor]
        private GetApiTokenResult(
            string creationDate,

            bool enabled,

            string expirationDate,

            string id,

            string name,

            string owner,

            bool personalAccessToken,

            ImmutableArray<string> scopes)
        {
            CreationDate = creationDate;
            Enabled = enabled;
            ExpirationDate = expirationDate;
            Id = id;
            Name = name;
            Owner = owner;
            PersonalAccessToken = personalAccessToken;
            Scopes = scopes;
        }
    }
}
