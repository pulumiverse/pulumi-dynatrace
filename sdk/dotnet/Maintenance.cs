// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/maintenance:Maintenance")]
    public partial class Maintenance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// This setting is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// ## Filters
        /// Add filters to limit the scope of maintenance to only select matching entities. If no filter is defined, the maintenance window is valid for the whole environment. Each filter is evaluated separately (**OR**).
        /// </summary>
        [Output("filters")]
        public Output<Outputs.MaintenanceFilters?> Filters { get; private set; } = null!;

        /// <summary>
        /// The general properties of the maintenance window
        /// </summary>
        [Output("generalProperties")]
        public Output<Outputs.MaintenanceGeneralProperties> GeneralProperties { get; private set; } = null!;

        /// <summary>
        /// The ID of this setting when referred to by the Config REST API V1
        /// </summary>
        [Output("legacyId")]
        public Output<string> LegacyId { get; private set; } = null!;

        /// <summary>
        /// The schedule of the maintenance window
        /// </summary>
        [Output("schedule")]
        public Output<Outputs.MaintenanceSchedule> Schedule { get; private set; } = null!;


        /// <summary>
        /// Create a Maintenance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Maintenance(string name, MaintenanceArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/maintenance:Maintenance", name, args ?? new MaintenanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Maintenance(string name, Input<string> id, MaintenanceState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/maintenance:Maintenance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Maintenance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Maintenance Get(string name, Input<string> id, MaintenanceState? state = null, CustomResourceOptions? options = null)
        {
            return new Maintenance(name, id, state, options);
        }
    }

    public sealed class MaintenanceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This setting is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// ## Filters
        /// Add filters to limit the scope of maintenance to only select matching entities. If no filter is defined, the maintenance window is valid for the whole environment. Each filter is evaluated separately (**OR**).
        /// </summary>
        [Input("filters")]
        public Input<Inputs.MaintenanceFiltersArgs>? Filters { get; set; }

        /// <summary>
        /// The general properties of the maintenance window
        /// </summary>
        [Input("generalProperties", required: true)]
        public Input<Inputs.MaintenanceGeneralPropertiesArgs> GeneralProperties { get; set; } = null!;

        /// <summary>
        /// The ID of this setting when referred to by the Config REST API V1
        /// </summary>
        [Input("legacyId")]
        public Input<string>? LegacyId { get; set; }

        /// <summary>
        /// The schedule of the maintenance window
        /// </summary>
        [Input("schedule", required: true)]
        public Input<Inputs.MaintenanceScheduleArgs> Schedule { get; set; } = null!;

        public MaintenanceArgs()
        {
        }
        public static new MaintenanceArgs Empty => new MaintenanceArgs();
    }

    public sealed class MaintenanceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This setting is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// ## Filters
        /// Add filters to limit the scope of maintenance to only select matching entities. If no filter is defined, the maintenance window is valid for the whole environment. Each filter is evaluated separately (**OR**).
        /// </summary>
        [Input("filters")]
        public Input<Inputs.MaintenanceFiltersGetArgs>? Filters { get; set; }

        /// <summary>
        /// The general properties of the maintenance window
        /// </summary>
        [Input("generalProperties")]
        public Input<Inputs.MaintenanceGeneralPropertiesGetArgs>? GeneralProperties { get; set; }

        /// <summary>
        /// The ID of this setting when referred to by the Config REST API V1
        /// </summary>
        [Input("legacyId")]
        public Input<string>? LegacyId { get; set; }

        /// <summary>
        /// The schedule of the maintenance window
        /// </summary>
        [Input("schedule")]
        public Input<Inputs.MaintenanceScheduleGetArgs>? Schedule { get; set; }

        public MaintenanceState()
        {
        }
        public static new MaintenanceState Empty => new MaintenanceState();
    }
}
