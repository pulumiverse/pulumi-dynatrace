// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/webAppInjectionCookie:WebAppInjectionCookie")]
    public partial class WebAppInjectionCookie : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
        /// </summary>
        [Output("applicationId")]
        public Output<string> ApplicationId { get; private set; } = null!;

        /// <summary>
        /// Specify an alternative domain for cookies set by Dynatrace. Keep in mind that your browser may not allow placement of cookies on certain domains (for example, top-level domains). Before typing a domain name here, confirm that the domain will accept cookies from your browser. For details, see the list of [forbidden top-level domains](https://dt-url.net/9n6b0pfz).
        /// </summary>
        [Output("cookiePlacementDomain")]
        public Output<string?> CookiePlacementDomain { get; private set; } = null!;

        /// <summary>
        /// Possible Values: `LAX`, `NONE`, `NOTSET`, `STRICT`
        /// </summary>
        [Output("sameSiteCookieAttribute")]
        public Output<string> SameSiteCookieAttribute { get; private set; } = null!;

        /// <summary>
        /// If your application is only accessible via SSL, you can add the Secure attribute to all cookies set by Dynatrace. This setting prevents the display of warnings from PCI-compliance security scanners. Be aware that with this setting enabled Dynatrace correlation of user actions with server-side web requests is only possible over SSL connections.
        /// </summary>
        [Output("useSecureCookieAttribute")]
        public Output<bool> UseSecureCookieAttribute { get; private set; } = null!;


        /// <summary>
        /// Create a WebAppInjectionCookie resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WebAppInjectionCookie(string name, WebAppInjectionCookieArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/webAppInjectionCookie:WebAppInjectionCookie", name, args ?? new WebAppInjectionCookieArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WebAppInjectionCookie(string name, Input<string> id, WebAppInjectionCookieState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/webAppInjectionCookie:WebAppInjectionCookie", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WebAppInjectionCookie resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WebAppInjectionCookie Get(string name, Input<string> id, WebAppInjectionCookieState? state = null, CustomResourceOptions? options = null)
        {
            return new WebAppInjectionCookie(name, id, state, options);
        }
    }

    public sealed class WebAppInjectionCookieArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
        /// </summary>
        [Input("applicationId", required: true)]
        public Input<string> ApplicationId { get; set; } = null!;

        /// <summary>
        /// Specify an alternative domain for cookies set by Dynatrace. Keep in mind that your browser may not allow placement of cookies on certain domains (for example, top-level domains). Before typing a domain name here, confirm that the domain will accept cookies from your browser. For details, see the list of [forbidden top-level domains](https://dt-url.net/9n6b0pfz).
        /// </summary>
        [Input("cookiePlacementDomain")]
        public Input<string>? CookiePlacementDomain { get; set; }

        /// <summary>
        /// Possible Values: `LAX`, `NONE`, `NOTSET`, `STRICT`
        /// </summary>
        [Input("sameSiteCookieAttribute", required: true)]
        public Input<string> SameSiteCookieAttribute { get; set; } = null!;

        /// <summary>
        /// If your application is only accessible via SSL, you can add the Secure attribute to all cookies set by Dynatrace. This setting prevents the display of warnings from PCI-compliance security scanners. Be aware that with this setting enabled Dynatrace correlation of user actions with server-side web requests is only possible over SSL connections.
        /// </summary>
        [Input("useSecureCookieAttribute", required: true)]
        public Input<bool> UseSecureCookieAttribute { get; set; } = null!;

        public WebAppInjectionCookieArgs()
        {
        }
        public static new WebAppInjectionCookieArgs Empty => new WebAppInjectionCookieArgs();
    }

    public sealed class WebAppInjectionCookieState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
        /// </summary>
        [Input("applicationId")]
        public Input<string>? ApplicationId { get; set; }

        /// <summary>
        /// Specify an alternative domain for cookies set by Dynatrace. Keep in mind that your browser may not allow placement of cookies on certain domains (for example, top-level domains). Before typing a domain name here, confirm that the domain will accept cookies from your browser. For details, see the list of [forbidden top-level domains](https://dt-url.net/9n6b0pfz).
        /// </summary>
        [Input("cookiePlacementDomain")]
        public Input<string>? CookiePlacementDomain { get; set; }

        /// <summary>
        /// Possible Values: `LAX`, `NONE`, `NOTSET`, `STRICT`
        /// </summary>
        [Input("sameSiteCookieAttribute")]
        public Input<string>? SameSiteCookieAttribute { get; set; }

        /// <summary>
        /// If your application is only accessible via SSL, you can add the Secure attribute to all cookies set by Dynatrace. This setting prevents the display of warnings from PCI-compliance security scanners. Be aware that with this setting enabled Dynatrace correlation of user actions with server-side web requests is only possible over SSL connections.
        /// </summary>
        [Input("useSecureCookieAttribute")]
        public Input<bool>? UseSecureCookieAttribute { get; set; }

        public WebAppInjectionCookieState()
        {
        }
        public static new WebAppInjectionCookieState Empty => new WebAppInjectionCookieState();
    }
}
