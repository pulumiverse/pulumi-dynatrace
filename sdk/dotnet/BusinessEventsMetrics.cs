// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/businessEventsMetrics:BusinessEventsMetrics")]
    public partial class BusinessEventsMetrics : global::Pulumi.CustomResource
    {
        /// <summary>
        /// no documentation available
        /// </summary>
        [Output("dimensions")]
        public Output<ImmutableArray<string>> Dimensions { get; private set; } = null!;

        /// <summary>
        /// This setting is enabled (`True`) or disabled (`False`)
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// Key
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        /// <summary>
        /// [See our documentation](https://dt-url.net/bp234rv)
        /// </summary>
        [Output("matcher")]
        public Output<string> Matcher { get; private set; } = null!;

        /// <summary>
        /// Possible Values: `ATTRIBUTE`, `OCCURRENCE`
        /// </summary>
        [Output("measure")]
        public Output<string> Measure { get; private set; } = null!;

        /// <summary>
        /// Attribute
        /// </summary>
        [Output("measureAttribute")]
        public Output<string?> MeasureAttribute { get; private set; } = null!;


        /// <summary>
        /// Create a BusinessEventsMetrics resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BusinessEventsMetrics(string name, BusinessEventsMetricsArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/businessEventsMetrics:BusinessEventsMetrics", name, args ?? new BusinessEventsMetricsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BusinessEventsMetrics(string name, Input<string> id, BusinessEventsMetricsState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/businessEventsMetrics:BusinessEventsMetrics", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BusinessEventsMetrics resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BusinessEventsMetrics Get(string name, Input<string> id, BusinessEventsMetricsState? state = null, CustomResourceOptions? options = null)
        {
            return new BusinessEventsMetrics(name, id, state, options);
        }
    }

    public sealed class BusinessEventsMetricsArgs : global::Pulumi.ResourceArgs
    {
        [Input("dimensions")]
        private InputList<string>? _dimensions;

        /// <summary>
        /// no documentation available
        /// </summary>
        public InputList<string> Dimensions
        {
            get => _dimensions ?? (_dimensions = new InputList<string>());
            set => _dimensions = value;
        }

        /// <summary>
        /// This setting is enabled (`True`) or disabled (`False`)
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// Key
        /// </summary>
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        /// <summary>
        /// [See our documentation](https://dt-url.net/bp234rv)
        /// </summary>
        [Input("matcher", required: true)]
        public Input<string> Matcher { get; set; } = null!;

        /// <summary>
        /// Possible Values: `ATTRIBUTE`, `OCCURRENCE`
        /// </summary>
        [Input("measure", required: true)]
        public Input<string> Measure { get; set; } = null!;

        /// <summary>
        /// Attribute
        /// </summary>
        [Input("measureAttribute")]
        public Input<string>? MeasureAttribute { get; set; }

        public BusinessEventsMetricsArgs()
        {
        }
        public static new BusinessEventsMetricsArgs Empty => new BusinessEventsMetricsArgs();
    }

    public sealed class BusinessEventsMetricsState : global::Pulumi.ResourceArgs
    {
        [Input("dimensions")]
        private InputList<string>? _dimensions;

        /// <summary>
        /// no documentation available
        /// </summary>
        public InputList<string> Dimensions
        {
            get => _dimensions ?? (_dimensions = new InputList<string>());
            set => _dimensions = value;
        }

        /// <summary>
        /// This setting is enabled (`True`) or disabled (`False`)
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Key
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// [See our documentation](https://dt-url.net/bp234rv)
        /// </summary>
        [Input("matcher")]
        public Input<string>? Matcher { get; set; }

        /// <summary>
        /// Possible Values: `ATTRIBUTE`, `OCCURRENCE`
        /// </summary>
        [Input("measure")]
        public Input<string>? Measure { get; set; }

        /// <summary>
        /// Attribute
        /// </summary>
        [Input("measureAttribute")]
        public Input<string>? MeasureAttribute { get; set; }

        public BusinessEventsMetricsState()
        {
        }
        public static new BusinessEventsMetricsState Empty => new BusinessEventsMetricsState();
    }
}
