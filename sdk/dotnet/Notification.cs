// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/notification:Notification")]
    public partial class Notification : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Configuration for Ansible Tower Notification
        /// </summary>
        [Output("ansibleTower")]
        public Output<Outputs.NotificationAnsibleTower?> AnsibleTower { get; private set; } = null!;

        /// <summary>
        /// Configuration for Generic Notification
        /// </summary>
        [Output("config")]
        public Output<Outputs.NotificationConfig?> Config { get; private set; } = null!;

        /// <summary>
        /// Configuration for Email Notification
        /// </summary>
        [Output("email")]
        public Output<Outputs.NotificationEmail?> Email { get; private set; } = null!;

        /// <summary>
        /// Configuration for Jira Notification
        /// </summary>
        [Output("jira")]
        public Output<Outputs.NotificationJira?> Jira { get; private set; } = null!;

        /// <summary>
        /// Configuration for OpsGenie Notification
        /// </summary>
        [Output("opsGenie")]
        public Output<Outputs.NotificationOpsGenie?> OpsGenie { get; private set; } = null!;

        /// <summary>
        /// Configuration for PagerDuty Notification
        /// </summary>
        [Output("pagerDuty")]
        public Output<Outputs.NotificationPagerDuty?> PagerDuty { get; private set; } = null!;

        /// <summary>
        /// Configuration for ServiceNow Notification
        /// </summary>
        [Output("serviceNow")]
        public Output<Outputs.NotificationServiceNow?> ServiceNow { get; private set; } = null!;

        /// <summary>
        /// Configuration for Slack Notification
        /// </summary>
        [Output("slack")]
        public Output<Outputs.NotificationSlack?> Slack { get; private set; } = null!;

        /// <summary>
        /// Configuration for Trello Notification
        /// </summary>
        [Output("trello")]
        public Output<Outputs.NotificationTrello?> Trello { get; private set; } = null!;

        /// <summary>
        /// Configuration for VictorOps Notification
        /// </summary>
        [Output("victorOps")]
        public Output<Outputs.NotificationVictorOps?> VictorOps { get; private set; } = null!;

        /// <summary>
        /// Configuration for WebHook Notification
        /// </summary>
        [Output("webHook")]
        public Output<Outputs.NotificationWebHook?> WebHook { get; private set; } = null!;

        /// <summary>
        /// Configuration for XMatters Notification
        /// </summary>
        [Output("xmatters")]
        public Output<Outputs.NotificationXmatters?> Xmatters { get; private set; } = null!;


        /// <summary>
        /// Create a Notification resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Notification(string name, NotificationArgs? args = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/notification:Notification", name, args ?? new NotificationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Notification(string name, Input<string> id, NotificationState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/notification:Notification", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Notification resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Notification Get(string name, Input<string> id, NotificationState? state = null, CustomResourceOptions? options = null)
        {
            return new Notification(name, id, state, options);
        }
    }

    public sealed class NotificationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration for Ansible Tower Notification
        /// </summary>
        [Input("ansibleTower")]
        public Input<Inputs.NotificationAnsibleTowerArgs>? AnsibleTower { get; set; }

        /// <summary>
        /// Configuration for Generic Notification
        /// </summary>
        [Input("config")]
        public Input<Inputs.NotificationConfigArgs>? Config { get; set; }

        /// <summary>
        /// Configuration for Email Notification
        /// </summary>
        [Input("email")]
        public Input<Inputs.NotificationEmailArgs>? Email { get; set; }

        /// <summary>
        /// Configuration for Jira Notification
        /// </summary>
        [Input("jira")]
        public Input<Inputs.NotificationJiraArgs>? Jira { get; set; }

        /// <summary>
        /// Configuration for OpsGenie Notification
        /// </summary>
        [Input("opsGenie")]
        public Input<Inputs.NotificationOpsGenieArgs>? OpsGenie { get; set; }

        /// <summary>
        /// Configuration for PagerDuty Notification
        /// </summary>
        [Input("pagerDuty")]
        public Input<Inputs.NotificationPagerDutyArgs>? PagerDuty { get; set; }

        /// <summary>
        /// Configuration for ServiceNow Notification
        /// </summary>
        [Input("serviceNow")]
        public Input<Inputs.NotificationServiceNowArgs>? ServiceNow { get; set; }

        /// <summary>
        /// Configuration for Slack Notification
        /// </summary>
        [Input("slack")]
        public Input<Inputs.NotificationSlackArgs>? Slack { get; set; }

        /// <summary>
        /// Configuration for Trello Notification
        /// </summary>
        [Input("trello")]
        public Input<Inputs.NotificationTrelloArgs>? Trello { get; set; }

        /// <summary>
        /// Configuration for VictorOps Notification
        /// </summary>
        [Input("victorOps")]
        public Input<Inputs.NotificationVictorOpsArgs>? VictorOps { get; set; }

        /// <summary>
        /// Configuration for WebHook Notification
        /// </summary>
        [Input("webHook")]
        public Input<Inputs.NotificationWebHookArgs>? WebHook { get; set; }

        /// <summary>
        /// Configuration for XMatters Notification
        /// </summary>
        [Input("xmatters")]
        public Input<Inputs.NotificationXmattersArgs>? Xmatters { get; set; }

        public NotificationArgs()
        {
        }
        public static new NotificationArgs Empty => new NotificationArgs();
    }

    public sealed class NotificationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration for Ansible Tower Notification
        /// </summary>
        [Input("ansibleTower")]
        public Input<Inputs.NotificationAnsibleTowerGetArgs>? AnsibleTower { get; set; }

        /// <summary>
        /// Configuration for Generic Notification
        /// </summary>
        [Input("config")]
        public Input<Inputs.NotificationConfigGetArgs>? Config { get; set; }

        /// <summary>
        /// Configuration for Email Notification
        /// </summary>
        [Input("email")]
        public Input<Inputs.NotificationEmailGetArgs>? Email { get; set; }

        /// <summary>
        /// Configuration for Jira Notification
        /// </summary>
        [Input("jira")]
        public Input<Inputs.NotificationJiraGetArgs>? Jira { get; set; }

        /// <summary>
        /// Configuration for OpsGenie Notification
        /// </summary>
        [Input("opsGenie")]
        public Input<Inputs.NotificationOpsGenieGetArgs>? OpsGenie { get; set; }

        /// <summary>
        /// Configuration for PagerDuty Notification
        /// </summary>
        [Input("pagerDuty")]
        public Input<Inputs.NotificationPagerDutyGetArgs>? PagerDuty { get; set; }

        /// <summary>
        /// Configuration for ServiceNow Notification
        /// </summary>
        [Input("serviceNow")]
        public Input<Inputs.NotificationServiceNowGetArgs>? ServiceNow { get; set; }

        /// <summary>
        /// Configuration for Slack Notification
        /// </summary>
        [Input("slack")]
        public Input<Inputs.NotificationSlackGetArgs>? Slack { get; set; }

        /// <summary>
        /// Configuration for Trello Notification
        /// </summary>
        [Input("trello")]
        public Input<Inputs.NotificationTrelloGetArgs>? Trello { get; set; }

        /// <summary>
        /// Configuration for VictorOps Notification
        /// </summary>
        [Input("victorOps")]
        public Input<Inputs.NotificationVictorOpsGetArgs>? VictorOps { get; set; }

        /// <summary>
        /// Configuration for WebHook Notification
        /// </summary>
        [Input("webHook")]
        public Input<Inputs.NotificationWebHookGetArgs>? WebHook { get; set; }

        /// <summary>
        /// Configuration for XMatters Notification
        /// </summary>
        [Input("xmatters")]
        public Input<Inputs.NotificationXmattersGetArgs>? Xmatters { get; set; }

        public NotificationState()
        {
        }
        public static new NotificationState Empty => new NotificationState();
    }
}
