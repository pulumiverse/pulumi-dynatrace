// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/vmware:Vmware")]
    public partial class Vmware : global::Pulumi.CustomResource
    {
        /// <summary>
        /// This setting is enabled (`True`) or disabled (`False`)
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// This string should have one of the following formats:
        /// - $prefix(parameter) - property value starting with 'parameter'
        /// - $eq(parameter) - property value exactly matching 'parameter'
        /// - $suffix(parameter) - property value ends with 'parameter'
        /// - $contains(parameter) - property value contains 'parameter'
        /// </summary>
        [Output("filter")]
        public Output<string?> Filter { get; private set; } = null!;

        /// <summary>
        /// Specify the IP address or name of the vCenter or standalone ESXi host:
        /// </summary>
        [Output("ipaddress")]
        public Output<string> Ipaddress { get; private set; } = null!;

        /// <summary>
        /// Name this connection
        /// </summary>
        [Output("label")]
        public Output<string> Label { get; private set; } = null!;

        /// <summary>
        /// no documentation available
        /// </summary>
        [Output("password")]
        public Output<string> Password { get; private set; } = null!;

        /// <summary>
        /// Provide user credentials for the vCenter or standalone ESXi host:
        /// </summary>
        [Output("username")]
        public Output<string> Username { get; private set; } = null!;


        /// <summary>
        /// Create a Vmware resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Vmware(string name, VmwareArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/vmware:Vmware", name, args ?? new VmwareArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Vmware(string name, Input<string> id, VmwareState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/vmware:Vmware", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Vmware resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Vmware Get(string name, Input<string> id, VmwareState? state = null, CustomResourceOptions? options = null)
        {
            return new Vmware(name, id, state, options);
        }
    }

    public sealed class VmwareArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This setting is enabled (`True`) or disabled (`False`)
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// This string should have one of the following formats:
        /// - $prefix(parameter) - property value starting with 'parameter'
        /// - $eq(parameter) - property value exactly matching 'parameter'
        /// - $suffix(parameter) - property value ends with 'parameter'
        /// - $contains(parameter) - property value contains 'parameter'
        /// </summary>
        [Input("filter")]
        public Input<string>? Filter { get; set; }

        /// <summary>
        /// Specify the IP address or name of the vCenter or standalone ESXi host:
        /// </summary>
        [Input("ipaddress", required: true)]
        public Input<string> Ipaddress { get; set; } = null!;

        /// <summary>
        /// Name this connection
        /// </summary>
        [Input("label", required: true)]
        public Input<string> Label { get; set; } = null!;

        [Input("password", required: true)]
        private Input<string>? _password;

        /// <summary>
        /// no documentation available
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Provide user credentials for the vCenter or standalone ESXi host:
        /// </summary>
        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        public VmwareArgs()
        {
        }
        public static new VmwareArgs Empty => new VmwareArgs();
    }

    public sealed class VmwareState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This setting is enabled (`True`) or disabled (`False`)
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// This string should have one of the following formats:
        /// - $prefix(parameter) - property value starting with 'parameter'
        /// - $eq(parameter) - property value exactly matching 'parameter'
        /// - $suffix(parameter) - property value ends with 'parameter'
        /// - $contains(parameter) - property value contains 'parameter'
        /// </summary>
        [Input("filter")]
        public Input<string>? Filter { get; set; }

        /// <summary>
        /// Specify the IP address or name of the vCenter or standalone ESXi host:
        /// </summary>
        [Input("ipaddress")]
        public Input<string>? Ipaddress { get; set; }

        /// <summary>
        /// Name this connection
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// no documentation available
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Provide user credentials for the vCenter or standalone ESXi host:
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public VmwareState()
        {
        }
        public static new VmwareState Empty => new VmwareState();
    }
}
