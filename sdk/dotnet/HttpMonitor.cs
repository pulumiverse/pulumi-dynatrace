// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/httpMonitor:HttpMonitor")]
    public partial class HttpMonitor : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The anomaly detection configuration.
        /// </summary>
        [Output("anomalyDetections")]
        public Output<ImmutableArray<Outputs.HttpMonitorAnomalyDetection>> AnomalyDetections { get; private set; } = null!;

        /// <summary>
        /// The monitor is enabled (`True`) or disabled (`False`).
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// The frequency of the monitor, in minutes.
        /// </summary>
        [Output("frequency")]
        public Output<int> Frequency { get; private set; } = null!;

        /// <summary>
        /// A list of locations from which the monitor is executed.
        /// 
        /// To specify a location, use its entity ID.
        /// </summary>
        [Output("locations")]
        public Output<ImmutableArray<string>> Locations { get; private set; } = null!;

        /// <summary>
        /// A set of manually assigned applications.
        /// </summary>
        [Output("manuallyAssignedApps")]
        public Output<ImmutableArray<string>> ManuallyAssignedApps { get; private set; } = null!;

        /// <summary>
        /// The name of the monitor.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// No script block - handle requests via `dynatrace.HttpMonitorScript` resource
        /// </summary>
        [Output("noScript")]
        public Output<bool?> NoScript { get; private set; } = null!;

        /// <summary>
        /// The HTTP Script
        /// </summary>
        [Output("script")]
        public Output<Outputs.HttpMonitorScript?> Script { get; private set; } = null!;

        /// <summary>
        /// A set of tags assigned to the monitor.
        /// 
        /// You can specify only the value of the tag here and the `CONTEXTLESS` context and source 'USER' will be added automatically.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.HttpMonitorTag>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a HttpMonitor resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public HttpMonitor(string name, HttpMonitorArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/httpMonitor:HttpMonitor", name, args ?? new HttpMonitorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private HttpMonitor(string name, Input<string> id, HttpMonitorState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/httpMonitor:HttpMonitor", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing HttpMonitor resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static HttpMonitor Get(string name, Input<string> id, HttpMonitorState? state = null, CustomResourceOptions? options = null)
        {
            return new HttpMonitor(name, id, state, options);
        }
    }

    public sealed class HttpMonitorArgs : global::Pulumi.ResourceArgs
    {
        [Input("anomalyDetections")]
        private InputList<Inputs.HttpMonitorAnomalyDetectionArgs>? _anomalyDetections;

        /// <summary>
        /// The anomaly detection configuration.
        /// </summary>
        public InputList<Inputs.HttpMonitorAnomalyDetectionArgs> AnomalyDetections
        {
            get => _anomalyDetections ?? (_anomalyDetections = new InputList<Inputs.HttpMonitorAnomalyDetectionArgs>());
            set => _anomalyDetections = value;
        }

        /// <summary>
        /// The monitor is enabled (`True`) or disabled (`False`).
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The frequency of the monitor, in minutes.
        /// </summary>
        [Input("frequency", required: true)]
        public Input<int> Frequency { get; set; } = null!;

        [Input("locations")]
        private InputList<string>? _locations;

        /// <summary>
        /// A list of locations from which the monitor is executed.
        /// 
        /// To specify a location, use its entity ID.
        /// </summary>
        public InputList<string> Locations
        {
            get => _locations ?? (_locations = new InputList<string>());
            set => _locations = value;
        }

        [Input("manuallyAssignedApps")]
        private InputList<string>? _manuallyAssignedApps;

        /// <summary>
        /// A set of manually assigned applications.
        /// </summary>
        public InputList<string> ManuallyAssignedApps
        {
            get => _manuallyAssignedApps ?? (_manuallyAssignedApps = new InputList<string>());
            set => _manuallyAssignedApps = value;
        }

        /// <summary>
        /// The name of the monitor.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// No script block - handle requests via `dynatrace.HttpMonitorScript` resource
        /// </summary>
        [Input("noScript")]
        public Input<bool>? NoScript { get; set; }

        /// <summary>
        /// The HTTP Script
        /// </summary>
        [Input("script")]
        public Input<Inputs.HttpMonitorScriptArgs>? Script { get; set; }

        [Input("tags")]
        private InputList<Inputs.HttpMonitorTagArgs>? _tags;

        /// <summary>
        /// A set of tags assigned to the monitor.
        /// 
        /// You can specify only the value of the tag here and the `CONTEXTLESS` context and source 'USER' will be added automatically.
        /// </summary>
        public InputList<Inputs.HttpMonitorTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.HttpMonitorTagArgs>());
            set => _tags = value;
        }

        public HttpMonitorArgs()
        {
        }
        public static new HttpMonitorArgs Empty => new HttpMonitorArgs();
    }

    public sealed class HttpMonitorState : global::Pulumi.ResourceArgs
    {
        [Input("anomalyDetections")]
        private InputList<Inputs.HttpMonitorAnomalyDetectionGetArgs>? _anomalyDetections;

        /// <summary>
        /// The anomaly detection configuration.
        /// </summary>
        public InputList<Inputs.HttpMonitorAnomalyDetectionGetArgs> AnomalyDetections
        {
            get => _anomalyDetections ?? (_anomalyDetections = new InputList<Inputs.HttpMonitorAnomalyDetectionGetArgs>());
            set => _anomalyDetections = value;
        }

        /// <summary>
        /// The monitor is enabled (`True`) or disabled (`False`).
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The frequency of the monitor, in minutes.
        /// </summary>
        [Input("frequency")]
        public Input<int>? Frequency { get; set; }

        [Input("locations")]
        private InputList<string>? _locations;

        /// <summary>
        /// A list of locations from which the monitor is executed.
        /// 
        /// To specify a location, use its entity ID.
        /// </summary>
        public InputList<string> Locations
        {
            get => _locations ?? (_locations = new InputList<string>());
            set => _locations = value;
        }

        [Input("manuallyAssignedApps")]
        private InputList<string>? _manuallyAssignedApps;

        /// <summary>
        /// A set of manually assigned applications.
        /// </summary>
        public InputList<string> ManuallyAssignedApps
        {
            get => _manuallyAssignedApps ?? (_manuallyAssignedApps = new InputList<string>());
            set => _manuallyAssignedApps = value;
        }

        /// <summary>
        /// The name of the monitor.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// No script block - handle requests via `dynatrace.HttpMonitorScript` resource
        /// </summary>
        [Input("noScript")]
        public Input<bool>? NoScript { get; set; }

        /// <summary>
        /// The HTTP Script
        /// </summary>
        [Input("script")]
        public Input<Inputs.HttpMonitorScriptGetArgs>? Script { get; set; }

        [Input("tags")]
        private InputList<Inputs.HttpMonitorTagGetArgs>? _tags;

        /// <summary>
        /// A set of tags assigned to the monitor.
        /// 
        /// You can specify only the value of the tag here and the `CONTEXTLESS` context and source 'USER' will be added automatically.
        /// </summary>
        public InputList<Inputs.HttpMonitorTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.HttpMonitorTagGetArgs>());
            set => _tags = value;
        }

        public HttpMonitorState()
        {
        }
        public static new HttpMonitorState Empty => new HttpMonitorState();
    }
}
