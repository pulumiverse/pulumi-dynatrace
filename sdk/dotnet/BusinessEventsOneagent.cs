// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/businessEventsOneagent:BusinessEventsOneagent")]
    public partial class BusinessEventsOneagent : global::Pulumi.CustomResource
    {
        /// <summary>
        /// This setting is enabled (`True`) or disabled (`False`)
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// Event meta data
        /// </summary>
        [Output("event")]
        public Output<Outputs.BusinessEventsOneagentEvent> Event { get; private set; } = null!;

        /// <summary>
        /// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        /// </summary>
        [Output("insertAfter")]
        public Output<string> InsertAfter { get; private set; } = null!;

        /// <summary>
        /// Rule name
        /// </summary>
        [Output("ruleName")]
        public Output<string> RuleName { get; private set; } = null!;

        /// <summary>
        /// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
        /// </summary>
        [Output("scope")]
        public Output<string?> Scope { get; private set; } = null!;

        /// <summary>
        /// Define conditions to trigger business events from incoming web requests. Triggers are connected by AND logic per capture rule. If you set multiple trigger rules, all of them need to be fulfilled to capture a business event.
        /// </summary>
        [Output("triggers")]
        public Output<Outputs.BusinessEventsOneagentTriggers> Triggers { get; private set; } = null!;


        /// <summary>
        /// Create a BusinessEventsOneagent resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BusinessEventsOneagent(string name, BusinessEventsOneagentArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/businessEventsOneagent:BusinessEventsOneagent", name, args ?? new BusinessEventsOneagentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BusinessEventsOneagent(string name, Input<string> id, BusinessEventsOneagentState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/businessEventsOneagent:BusinessEventsOneagent", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BusinessEventsOneagent resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BusinessEventsOneagent Get(string name, Input<string> id, BusinessEventsOneagentState? state = null, CustomResourceOptions? options = null)
        {
            return new BusinessEventsOneagent(name, id, state, options);
        }
    }

    public sealed class BusinessEventsOneagentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This setting is enabled (`True`) or disabled (`False`)
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// Event meta data
        /// </summary>
        [Input("event", required: true)]
        public Input<Inputs.BusinessEventsOneagentEventArgs> Event { get; set; } = null!;

        /// <summary>
        /// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        /// </summary>
        [Input("insertAfter")]
        public Input<string>? InsertAfter { get; set; }

        /// <summary>
        /// Rule name
        /// </summary>
        [Input("ruleName", required: true)]
        public Input<string> RuleName { get; set; } = null!;

        /// <summary>
        /// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        /// <summary>
        /// Define conditions to trigger business events from incoming web requests. Triggers are connected by AND logic per capture rule. If you set multiple trigger rules, all of them need to be fulfilled to capture a business event.
        /// </summary>
        [Input("triggers", required: true)]
        public Input<Inputs.BusinessEventsOneagentTriggersArgs> Triggers { get; set; } = null!;

        public BusinessEventsOneagentArgs()
        {
        }
        public static new BusinessEventsOneagentArgs Empty => new BusinessEventsOneagentArgs();
    }

    public sealed class BusinessEventsOneagentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This setting is enabled (`True`) or disabled (`False`)
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Event meta data
        /// </summary>
        [Input("event")]
        public Input<Inputs.BusinessEventsOneagentEventGetArgs>? Event { get; set; }

        /// <summary>
        /// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        /// </summary>
        [Input("insertAfter")]
        public Input<string>? InsertAfter { get; set; }

        /// <summary>
        /// Rule name
        /// </summary>
        [Input("ruleName")]
        public Input<string>? RuleName { get; set; }

        /// <summary>
        /// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        /// <summary>
        /// Define conditions to trigger business events from incoming web requests. Triggers are connected by AND logic per capture rule. If you set multiple trigger rules, all of them need to be fulfilled to capture a business event.
        /// </summary>
        [Input("triggers")]
        public Input<Inputs.BusinessEventsOneagentTriggersGetArgs>? Triggers { get; set; }

        public BusinessEventsOneagentState()
        {
        }
        public static new BusinessEventsOneagentState Empty => new BusinessEventsOneagentState();
    }
}
