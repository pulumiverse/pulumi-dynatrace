// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/userSessionMetrics:UserSessionMetrics")]
    public partial class UserSessionMetrics : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Defines the fields that are used as dimensions. A dimension is a collection of reference information about a metric data point that is of interest to your business. Dimensions are parameters like "browserFamily", "userType", "country". For example, using "userType" as a dimension allows you to split chart data based on user types.
        /// </summary>
        [Output("dimensions")]
        public Output<ImmutableArray<string>> Dimensions { get; private set; } = null!;

        /// <summary>
        /// This setting is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// Defines the filters for the user session. Filters apply at the moment of extracting the data and only sessions that satisfy the filtering criteria will be used to extract the custom metrics. You will not be able to modify these filters in the metric data explorer. For example, using "userType equals REAL_USER" will give you only data from real users, while forcing the synthetic sessions to be ignored.
        /// </summary>
        [Output("filters")]
        public Output<Outputs.UserSessionMetricsFilters?> Filters { get; private set; } = null!;

        /// <summary>
        /// Metric key
        /// </summary>
        [Output("metricKey")]
        public Output<string> MetricKey { get; private set; } = null!;

        /// <summary>
        /// Defines the type of value to be extracted from the user session. When using **User session counter**, the number of user sessions is counted (similar to count(*) when using USQL). When using **User session field value**, the value of a user session field is extracted.
        /// </summary>
        [Output("value")]
        public Output<Outputs.UserSessionMetricsValue> Value { get; private set; } = null!;


        /// <summary>
        /// Create a UserSessionMetrics resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public UserSessionMetrics(string name, UserSessionMetricsArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/userSessionMetrics:UserSessionMetrics", name, args ?? new UserSessionMetricsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private UserSessionMetrics(string name, Input<string> id, UserSessionMetricsState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/userSessionMetrics:UserSessionMetrics", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing UserSessionMetrics resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static UserSessionMetrics Get(string name, Input<string> id, UserSessionMetricsState? state = null, CustomResourceOptions? options = null)
        {
            return new UserSessionMetrics(name, id, state, options);
        }
    }

    public sealed class UserSessionMetricsArgs : global::Pulumi.ResourceArgs
    {
        [Input("dimensions")]
        private InputList<string>? _dimensions;

        /// <summary>
        /// Defines the fields that are used as dimensions. A dimension is a collection of reference information about a metric data point that is of interest to your business. Dimensions are parameters like "browserFamily", "userType", "country". For example, using "userType" as a dimension allows you to split chart data based on user types.
        /// </summary>
        public InputList<string> Dimensions
        {
            get => _dimensions ?? (_dimensions = new InputList<string>());
            set => _dimensions = value;
        }

        /// <summary>
        /// This setting is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// Defines the filters for the user session. Filters apply at the moment of extracting the data and only sessions that satisfy the filtering criteria will be used to extract the custom metrics. You will not be able to modify these filters in the metric data explorer. For example, using "userType equals REAL_USER" will give you only data from real users, while forcing the synthetic sessions to be ignored.
        /// </summary>
        [Input("filters")]
        public Input<Inputs.UserSessionMetricsFiltersArgs>? Filters { get; set; }

        /// <summary>
        /// Metric key
        /// </summary>
        [Input("metricKey", required: true)]
        public Input<string> MetricKey { get; set; } = null!;

        /// <summary>
        /// Defines the type of value to be extracted from the user session. When using **User session counter**, the number of user sessions is counted (similar to count(*) when using USQL). When using **User session field value**, the value of a user session field is extracted.
        /// </summary>
        [Input("value", required: true)]
        public Input<Inputs.UserSessionMetricsValueArgs> Value { get; set; } = null!;

        public UserSessionMetricsArgs()
        {
        }
        public static new UserSessionMetricsArgs Empty => new UserSessionMetricsArgs();
    }

    public sealed class UserSessionMetricsState : global::Pulumi.ResourceArgs
    {
        [Input("dimensions")]
        private InputList<string>? _dimensions;

        /// <summary>
        /// Defines the fields that are used as dimensions. A dimension is a collection of reference information about a metric data point that is of interest to your business. Dimensions are parameters like "browserFamily", "userType", "country". For example, using "userType" as a dimension allows you to split chart data based on user types.
        /// </summary>
        public InputList<string> Dimensions
        {
            get => _dimensions ?? (_dimensions = new InputList<string>());
            set => _dimensions = value;
        }

        /// <summary>
        /// This setting is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Defines the filters for the user session. Filters apply at the moment of extracting the data and only sessions that satisfy the filtering criteria will be used to extract the custom metrics. You will not be able to modify these filters in the metric data explorer. For example, using "userType equals REAL_USER" will give you only data from real users, while forcing the synthetic sessions to be ignored.
        /// </summary>
        [Input("filters")]
        public Input<Inputs.UserSessionMetricsFiltersGetArgs>? Filters { get; set; }

        /// <summary>
        /// Metric key
        /// </summary>
        [Input("metricKey")]
        public Input<string>? MetricKey { get; set; }

        /// <summary>
        /// Defines the type of value to be extracted from the user session. When using **User session counter**, the number of user sessions is counted (similar to count(*) when using USQL). When using **User session field value**, the value of a user session field is extracted.
        /// </summary>
        [Input("value")]
        public Input<Inputs.UserSessionMetricsValueGetArgs>? Value { get; set; }

        public UserSessionMetricsState()
        {
        }
        public static new UserSessionMetricsState Empty => new UserSessionMetricsState();
    }
}
