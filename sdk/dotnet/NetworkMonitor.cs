// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/networkMonitor:NetworkMonitor")]
    public partial class NetworkMonitor : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Description of the monitor
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// If true, the monitor is enabled
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Frequency of the monitor, in minutes
        /// </summary>
        [Output("frequencyMin")]
        public Output<int?> FrequencyMin { get; private set; } = null!;

        /// <summary>
        /// The locations to which the monitor is assigned
        /// </summary>
        [Output("locations")]
        public Output<ImmutableArray<string>> Locations { get; private set; } = null!;

        /// <summary>
        /// Name of the monitor
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Outage handling configuration
        /// </summary>
        [Output("outageHandling")]
        public Output<Outputs.NetworkMonitorOutageHandling?> OutageHandling { get; private set; } = null!;

        /// <summary>
        /// Performance thresholds configuration
        /// </summary>
        [Output("performanceThresholds")]
        public Output<Outputs.NetworkMonitorPerformanceThresholds?> PerformanceThresholds { get; private set; } = null!;

        /// <summary>
        /// The steps of the monitor
        /// </summary>
        [Output("steps")]
        public Output<ImmutableArray<Outputs.NetworkMonitorStep>> Steps { get; private set; } = null!;

        /// <summary>
        /// A set of tags assigned to the monitor.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.NetworkMonitorTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// Type of the monitor, possible values: `MULTI_PROTOCOL`
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a NetworkMonitor resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NetworkMonitor(string name, NetworkMonitorArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/networkMonitor:NetworkMonitor", name, args ?? new NetworkMonitorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NetworkMonitor(string name, Input<string> id, NetworkMonitorState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/networkMonitor:NetworkMonitor", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NetworkMonitor resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NetworkMonitor Get(string name, Input<string> id, NetworkMonitorState? state = null, CustomResourceOptions? options = null)
        {
            return new NetworkMonitor(name, id, state, options);
        }
    }

    public sealed class NetworkMonitorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the monitor
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// If true, the monitor is enabled
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Frequency of the monitor, in minutes
        /// </summary>
        [Input("frequencyMin")]
        public Input<int>? FrequencyMin { get; set; }

        [Input("locations", required: true)]
        private InputList<string>? _locations;

        /// <summary>
        /// The locations to which the monitor is assigned
        /// </summary>
        public InputList<string> Locations
        {
            get => _locations ?? (_locations = new InputList<string>());
            set => _locations = value;
        }

        /// <summary>
        /// Name of the monitor
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Outage handling configuration
        /// </summary>
        [Input("outageHandling")]
        public Input<Inputs.NetworkMonitorOutageHandlingArgs>? OutageHandling { get; set; }

        /// <summary>
        /// Performance thresholds configuration
        /// </summary>
        [Input("performanceThresholds")]
        public Input<Inputs.NetworkMonitorPerformanceThresholdsArgs>? PerformanceThresholds { get; set; }

        [Input("steps", required: true)]
        private InputList<Inputs.NetworkMonitorStepArgs>? _steps;

        /// <summary>
        /// The steps of the monitor
        /// </summary>
        public InputList<Inputs.NetworkMonitorStepArgs> Steps
        {
            get => _steps ?? (_steps = new InputList<Inputs.NetworkMonitorStepArgs>());
            set => _steps = value;
        }

        [Input("tags")]
        private InputList<Inputs.NetworkMonitorTagArgs>? _tags;

        /// <summary>
        /// A set of tags assigned to the monitor.
        /// </summary>
        public InputList<Inputs.NetworkMonitorTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.NetworkMonitorTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// Type of the monitor, possible values: `MULTI_PROTOCOL`
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public NetworkMonitorArgs()
        {
        }
        public static new NetworkMonitorArgs Empty => new NetworkMonitorArgs();
    }

    public sealed class NetworkMonitorState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the monitor
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// If true, the monitor is enabled
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Frequency of the monitor, in minutes
        /// </summary>
        [Input("frequencyMin")]
        public Input<int>? FrequencyMin { get; set; }

        [Input("locations")]
        private InputList<string>? _locations;

        /// <summary>
        /// The locations to which the monitor is assigned
        /// </summary>
        public InputList<string> Locations
        {
            get => _locations ?? (_locations = new InputList<string>());
            set => _locations = value;
        }

        /// <summary>
        /// Name of the monitor
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Outage handling configuration
        /// </summary>
        [Input("outageHandling")]
        public Input<Inputs.NetworkMonitorOutageHandlingGetArgs>? OutageHandling { get; set; }

        /// <summary>
        /// Performance thresholds configuration
        /// </summary>
        [Input("performanceThresholds")]
        public Input<Inputs.NetworkMonitorPerformanceThresholdsGetArgs>? PerformanceThresholds { get; set; }

        [Input("steps")]
        private InputList<Inputs.NetworkMonitorStepGetArgs>? _steps;

        /// <summary>
        /// The steps of the monitor
        /// </summary>
        public InputList<Inputs.NetworkMonitorStepGetArgs> Steps
        {
            get => _steps ?? (_steps = new InputList<Inputs.NetworkMonitorStepGetArgs>());
            set => _steps = value;
        }

        [Input("tags")]
        private InputList<Inputs.NetworkMonitorTagGetArgs>? _tags;

        /// <summary>
        /// A set of tags assigned to the monitor.
        /// </summary>
        public InputList<Inputs.NetworkMonitorTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.NetworkMonitorTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// Type of the monitor, possible values: `MULTI_PROTOCOL`
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public NetworkMonitorState()
        {
        }
        public static new NetworkMonitorState Empty => new NetworkMonitorState();
    }
}
