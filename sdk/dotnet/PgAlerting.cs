// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/pgAlerting:PgAlerting")]
    public partial class PgAlerting : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Possible Values: `ON_INSTANCE_COUNT_VIOLATION`, `ON_PGI_UNAVAILABILITY`
        /// </summary>
        [Output("alertingMode")]
        public Output<string?> AlertingMode { get; private set; } = null!;

        /// <summary>
        /// Enable (`True`) or disable (`False`) process group availability monitoring
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// Open a new problem if the number of active process instances in the group is fewer than X
        /// </summary>
        [Output("minimumInstanceThreshold")]
        public Output<int?> MinimumInstanceThreshold { get; private set; } = null!;

        /// <summary>
        /// The process group ID for availability monitoring
        /// </summary>
        [Output("processGroup")]
        public Output<string> ProcessGroup { get; private set; } = null!;


        /// <summary>
        /// Create a PgAlerting resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PgAlerting(string name, PgAlertingArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/pgAlerting:PgAlerting", name, args ?? new PgAlertingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PgAlerting(string name, Input<string> id, PgAlertingState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/pgAlerting:PgAlerting", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PgAlerting resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PgAlerting Get(string name, Input<string> id, PgAlertingState? state = null, CustomResourceOptions? options = null)
        {
            return new PgAlerting(name, id, state, options);
        }
    }

    public sealed class PgAlertingArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Possible Values: `ON_INSTANCE_COUNT_VIOLATION`, `ON_PGI_UNAVAILABILITY`
        /// </summary>
        [Input("alertingMode")]
        public Input<string>? AlertingMode { get; set; }

        /// <summary>
        /// Enable (`True`) or disable (`False`) process group availability monitoring
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// Open a new problem if the number of active process instances in the group is fewer than X
        /// </summary>
        [Input("minimumInstanceThreshold")]
        public Input<int>? MinimumInstanceThreshold { get; set; }

        /// <summary>
        /// The process group ID for availability monitoring
        /// </summary>
        [Input("processGroup", required: true)]
        public Input<string> ProcessGroup { get; set; } = null!;

        public PgAlertingArgs()
        {
        }
        public static new PgAlertingArgs Empty => new PgAlertingArgs();
    }

    public sealed class PgAlertingState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Possible Values: `ON_INSTANCE_COUNT_VIOLATION`, `ON_PGI_UNAVAILABILITY`
        /// </summary>
        [Input("alertingMode")]
        public Input<string>? AlertingMode { get; set; }

        /// <summary>
        /// Enable (`True`) or disable (`False`) process group availability monitoring
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Open a new problem if the number of active process instances in the group is fewer than X
        /// </summary>
        [Input("minimumInstanceThreshold")]
        public Input<int>? MinimumInstanceThreshold { get; set; }

        /// <summary>
        /// The process group ID for availability monitoring
        /// </summary>
        [Input("processGroup")]
        public Input<string>? ProcessGroup { get; set; }

        public PgAlertingState()
        {
        }
        public static new PgAlertingState Empty => new PgAlertingState();
    }
}
