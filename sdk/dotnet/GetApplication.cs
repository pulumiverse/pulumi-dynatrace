// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    public static class GetApplication
    {
        /// <summary>
        /// The application data source allows the application ID to be retrieved by its name.
        /// 
        /// - `name` queries for all applications with the specified name
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// using Dynatrace = Pulumiverse.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Dynatrace.GetApplication.Invoke(new()
        ///     {
        ///         Name = "Example",
        ///     });
        /// 
        ///     var _name_ = new Dynatrace.ApplicationDetectionRule("#name#", new()
        ///     {
        ///         ApplicationIdentifier = test.Apply(getApplicationResult =&gt; getApplicationResult.Id),
        ///         FilterConfig = new Dynatrace.Inputs.ApplicationDetectionRuleFilterConfigArgs
        ///         {
        ///             ApplicationMatchTarget = "DOMAIN",
        ///             ApplicationMatchType = "MATCHES",
        ///             Pattern = "www.google.com",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetApplicationResult> InvokeAsync(GetApplicationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetApplicationResult>("dynatrace:index/getApplication:getApplication", args ?? new GetApplicationArgs(), options.WithDefaults());

        /// <summary>
        /// The application data source allows the application ID to be retrieved by its name.
        /// 
        /// - `name` queries for all applications with the specified name
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// using Dynatrace = Pulumiverse.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Dynatrace.GetApplication.Invoke(new()
        ///     {
        ///         Name = "Example",
        ///     });
        /// 
        ///     var _name_ = new Dynatrace.ApplicationDetectionRule("#name#", new()
        ///     {
        ///         ApplicationIdentifier = test.Apply(getApplicationResult =&gt; getApplicationResult.Id),
        ///         FilterConfig = new Dynatrace.Inputs.ApplicationDetectionRuleFilterConfigArgs
        ///         {
        ///             ApplicationMatchTarget = "DOMAIN",
        ///             ApplicationMatchType = "MATCHES",
        ///             Pattern = "www.google.com",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetApplicationResult> Invoke(GetApplicationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetApplicationResult>("dynatrace:index/getApplication:getApplication", args ?? new GetApplicationInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The application data source allows the application ID to be retrieved by its name.
        /// 
        /// - `name` queries for all applications with the specified name
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// using Dynatrace = Pulumiverse.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Dynatrace.GetApplication.Invoke(new()
        ///     {
        ///         Name = "Example",
        ///     });
        /// 
        ///     var _name_ = new Dynatrace.ApplicationDetectionRule("#name#", new()
        ///     {
        ///         ApplicationIdentifier = test.Apply(getApplicationResult =&gt; getApplicationResult.Id),
        ///         FilterConfig = new Dynatrace.Inputs.ApplicationDetectionRuleFilterConfigArgs
        ///         {
        ///             ApplicationMatchTarget = "DOMAIN",
        ///             ApplicationMatchType = "MATCHES",
        ///             Pattern = "www.google.com",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetApplicationResult> Invoke(GetApplicationInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetApplicationResult>("dynatrace:index/getApplication:getApplication", args ?? new GetApplicationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetApplicationArgs : global::Pulumi.InvokeArgs
    {
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetApplicationArgs()
        {
        }
        public static new GetApplicationArgs Empty => new GetApplicationArgs();
    }

    public sealed class GetApplicationInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetApplicationInvokeArgs()
        {
        }
        public static new GetApplicationInvokeArgs Empty => new GetApplicationInvokeArgs();
    }


    [OutputType]
    public sealed class GetApplicationResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;

        [OutputConstructor]
        private GetApplicationResult(
            string id,

            string name)
        {
            Id = id;
            Name = name;
        }
    }
}
