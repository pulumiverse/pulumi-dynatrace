// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/logBuckets:LogBuckets")]
    public partial class LogBuckets : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A 'bucket' is the length of time your logs will be stored. Select the bucket that's best for you.
        /// </summary>
        [Output("bucketName")]
        public Output<string> BucketName { get; private set; } = null!;

        /// <summary>
        /// This setting is enabled (`True`) or disabled (`False`)
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        /// </summary>
        [Output("insertAfter")]
        public Output<string> InsertAfter { get; private set; } = null!;

        /// <summary>
        /// Matcher (DQL)
        /// </summary>
        [Output("matcher")]
        public Output<string> Matcher { get; private set; } = null!;

        /// <summary>
        /// Rule name
        /// </summary>
        [Output("ruleName")]
        public Output<string> RuleName { get; private set; } = null!;


        /// <summary>
        /// Create a LogBuckets resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LogBuckets(string name, LogBucketsArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/logBuckets:LogBuckets", name, args ?? new LogBucketsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LogBuckets(string name, Input<string> id, LogBucketsState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/logBuckets:LogBuckets", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LogBuckets resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LogBuckets Get(string name, Input<string> id, LogBucketsState? state = null, CustomResourceOptions? options = null)
        {
            return new LogBuckets(name, id, state, options);
        }
    }

    public sealed class LogBucketsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A 'bucket' is the length of time your logs will be stored. Select the bucket that's best for you.
        /// </summary>
        [Input("bucketName", required: true)]
        public Input<string> BucketName { get; set; } = null!;

        /// <summary>
        /// This setting is enabled (`True`) or disabled (`False`)
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        /// </summary>
        [Input("insertAfter")]
        public Input<string>? InsertAfter { get; set; }

        /// <summary>
        /// Matcher (DQL)
        /// </summary>
        [Input("matcher", required: true)]
        public Input<string> Matcher { get; set; } = null!;

        /// <summary>
        /// Rule name
        /// </summary>
        [Input("ruleName", required: true)]
        public Input<string> RuleName { get; set; } = null!;

        public LogBucketsArgs()
        {
        }
        public static new LogBucketsArgs Empty => new LogBucketsArgs();
    }

    public sealed class LogBucketsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A 'bucket' is the length of time your logs will be stored. Select the bucket that's best for you.
        /// </summary>
        [Input("bucketName")]
        public Input<string>? BucketName { get; set; }

        /// <summary>
        /// This setting is enabled (`True`) or disabled (`False`)
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        /// </summary>
        [Input("insertAfter")]
        public Input<string>? InsertAfter { get; set; }

        /// <summary>
        /// Matcher (DQL)
        /// </summary>
        [Input("matcher")]
        public Input<string>? Matcher { get; set; }

        /// <summary>
        /// Rule name
        /// </summary>
        [Input("ruleName")]
        public Input<string>? RuleName { get; set; }

        public LogBucketsState()
        {
        }
        public static new LogBucketsState Empty => new LogBucketsState();
    }
}
