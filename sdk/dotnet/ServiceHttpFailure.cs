// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/serviceHttpFailure:ServiceHttpFailure")]
    public partial class ServiceHttpFailure : global::Pulumi.CustomResource
    {
        /// <summary>
        /// HTTP 404 response codes are thrown when a web server can't find a certain page. 404s are classified as broken links on the client side and therefore aren't considered to be service failures. By enabling this setting, you can have 404s treated as server-side service failures.
        /// </summary>
        [Output("brokenLinks")]
        public Output<Outputs.ServiceHttpFailureBrokenLinks?> BrokenLinks { get; private set; } = null!;

        /// <summary>
        /// This setting is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// HTTP response codes
        /// </summary>
        [Output("httpResponseCodes")]
        public Output<Outputs.ServiceHttpFailureHttpResponseCodes?> HttpResponseCodes { get; private set; } = null!;

        /// <summary>
        /// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
        /// </summary>
        [Output("serviceId")]
        public Output<string> ServiceId { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceHttpFailure resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceHttpFailure(string name, ServiceHttpFailureArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/serviceHttpFailure:ServiceHttpFailure", name, args ?? new ServiceHttpFailureArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServiceHttpFailure(string name, Input<string> id, ServiceHttpFailureState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/serviceHttpFailure:ServiceHttpFailure", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceHttpFailure resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceHttpFailure Get(string name, Input<string> id, ServiceHttpFailureState? state = null, CustomResourceOptions? options = null)
        {
            return new ServiceHttpFailure(name, id, state, options);
        }
    }

    public sealed class ServiceHttpFailureArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// HTTP 404 response codes are thrown when a web server can't find a certain page. 404s are classified as broken links on the client side and therefore aren't considered to be service failures. By enabling this setting, you can have 404s treated as server-side service failures.
        /// </summary>
        [Input("brokenLinks")]
        public Input<Inputs.ServiceHttpFailureBrokenLinksArgs>? BrokenLinks { get; set; }

        /// <summary>
        /// This setting is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// HTTP response codes
        /// </summary>
        [Input("httpResponseCodes")]
        public Input<Inputs.ServiceHttpFailureHttpResponseCodesArgs>? HttpResponseCodes { get; set; }

        /// <summary>
        /// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
        /// </summary>
        [Input("serviceId", required: true)]
        public Input<string> ServiceId { get; set; } = null!;

        public ServiceHttpFailureArgs()
        {
        }
        public static new ServiceHttpFailureArgs Empty => new ServiceHttpFailureArgs();
    }

    public sealed class ServiceHttpFailureState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// HTTP 404 response codes are thrown when a web server can't find a certain page. 404s are classified as broken links on the client side and therefore aren't considered to be service failures. By enabling this setting, you can have 404s treated as server-side service failures.
        /// </summary>
        [Input("brokenLinks")]
        public Input<Inputs.ServiceHttpFailureBrokenLinksGetArgs>? BrokenLinks { get; set; }

        /// <summary>
        /// This setting is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// HTTP response codes
        /// </summary>
        [Input("httpResponseCodes")]
        public Input<Inputs.ServiceHttpFailureHttpResponseCodesGetArgs>? HttpResponseCodes { get; set; }

        /// <summary>
        /// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
        /// </summary>
        [Input("serviceId")]
        public Input<string>? ServiceId { get; set; }

        public ServiceHttpFailureState()
        {
        }
        public static new ServiceHttpFailureState Empty => new ServiceHttpFailureState();
    }
}
