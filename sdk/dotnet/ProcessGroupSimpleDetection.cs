// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/processGroupSimpleDetection:ProcessGroupSimpleDetection")]
    public partial class ProcessGroupSimpleDetection : global::Pulumi.CustomResource
    {
        /// <summary>
        /// This setting is enabled (`True`) or disabled (`False`)
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// If Dynatrace detects this property at startup of a process, it will use its value to identify process groups more granular.
        /// </summary>
        [Output("groupIdentifier")]
        public Output<string> GroupIdentifier { get; private set; } = null!;

        /// <summary>
        /// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        /// </summary>
        [Output("insertAfter")]
        public Output<string> InsertAfter { get; private set; } = null!;

        /// <summary>
        /// Use a variable to identify instances within a process group.
        /// </summary>
        [Output("instanceIdentifier")]
        public Output<string> InstanceIdentifier { get; private set; } = null!;

        /// <summary>
        /// Note: Not all types can be detected at startup.
        /// </summary>
        [Output("processType")]
        public Output<string?> ProcessType { get; private set; } = null!;

        /// <summary>
        /// Possible Values: `Prop`, `Env`
        /// </summary>
        [Output("ruleType")]
        public Output<string> RuleType { get; private set; } = null!;


        /// <summary>
        /// Create a ProcessGroupSimpleDetection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProcessGroupSimpleDetection(string name, ProcessGroupSimpleDetectionArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/processGroupSimpleDetection:ProcessGroupSimpleDetection", name, args ?? new ProcessGroupSimpleDetectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProcessGroupSimpleDetection(string name, Input<string> id, ProcessGroupSimpleDetectionState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/processGroupSimpleDetection:ProcessGroupSimpleDetection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProcessGroupSimpleDetection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProcessGroupSimpleDetection Get(string name, Input<string> id, ProcessGroupSimpleDetectionState? state = null, CustomResourceOptions? options = null)
        {
            return new ProcessGroupSimpleDetection(name, id, state, options);
        }
    }

    public sealed class ProcessGroupSimpleDetectionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This setting is enabled (`True`) or disabled (`False`)
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// If Dynatrace detects this property at startup of a process, it will use its value to identify process groups more granular.
        /// </summary>
        [Input("groupIdentifier", required: true)]
        public Input<string> GroupIdentifier { get; set; } = null!;

        /// <summary>
        /// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        /// </summary>
        [Input("insertAfter")]
        public Input<string>? InsertAfter { get; set; }

        /// <summary>
        /// Use a variable to identify instances within a process group.
        /// </summary>
        [Input("instanceIdentifier", required: true)]
        public Input<string> InstanceIdentifier { get; set; } = null!;

        /// <summary>
        /// Note: Not all types can be detected at startup.
        /// </summary>
        [Input("processType")]
        public Input<string>? ProcessType { get; set; }

        /// <summary>
        /// Possible Values: `Prop`, `Env`
        /// </summary>
        [Input("ruleType", required: true)]
        public Input<string> RuleType { get; set; } = null!;

        public ProcessGroupSimpleDetectionArgs()
        {
        }
        public static new ProcessGroupSimpleDetectionArgs Empty => new ProcessGroupSimpleDetectionArgs();
    }

    public sealed class ProcessGroupSimpleDetectionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This setting is enabled (`True`) or disabled (`False`)
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// If Dynatrace detects this property at startup of a process, it will use its value to identify process groups more granular.
        /// </summary>
        [Input("groupIdentifier")]
        public Input<string>? GroupIdentifier { get; set; }

        /// <summary>
        /// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        /// </summary>
        [Input("insertAfter")]
        public Input<string>? InsertAfter { get; set; }

        /// <summary>
        /// Use a variable to identify instances within a process group.
        /// </summary>
        [Input("instanceIdentifier")]
        public Input<string>? InstanceIdentifier { get; set; }

        /// <summary>
        /// Note: Not all types can be detected at startup.
        /// </summary>
        [Input("processType")]
        public Input<string>? ProcessType { get; set; }

        /// <summary>
        /// Possible Values: `Prop`, `Env`
        /// </summary>
        [Input("ruleType")]
        public Input<string>? RuleType { get; set; }

        public ProcessGroupSimpleDetectionState()
        {
        }
        public static new ProcessGroupSimpleDetectionState Empty => new ProcessGroupSimpleDetectionState();
    }
}
