// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    /// <summary>
    /// &gt; **Dynatrace SaaS only**
    /// 
    /// &gt; To utilize this resource with access to all segments, please define the environment variables `DT_CLIENT_ID`, `DT_CLIENT_SECRET`, `DT_ACCOUNT_ID` with an OAuth client including the following permissions: **View Filter-Segments** (`storage:filter-segments:read`), **Create and Update Filter-Segments** (`storage:filter-segments:write`), **Share Filter-Segments** (`storage:filter-segments:share`), **Delete Filter-Segments** (`storage:filter-segments:delete`) and **Maintain all Filter-Segments on the environment** (`storage:filter-segments:admin`).
    /// 
    /// &gt; This resource is excluded by default in the export utility, please explicitly specify the resource to retrieve existing configuration.
    /// 
    /// &gt; The `includes.items[X].filter` attribute, which is a JSON string, is unfriendly for configuration as code. The structure of that attribute is not publicly documented and therefore subject to change without warning. The resource schema has been created to match our REST API, but we will be reaching out to product management on further enhancement of this endpoint. In the meantime, please use the export utility to create configurations more efficiently.
    /// 
    /// ## Dynatrace Documentation
    /// 
    /// - Segments - https://docs.dynatrace.com/docs/manage/segments
    /// 
    /// - Grail Storage Filter-Segments (API) - https://########.apps.dynatrace.com/platform/swagger-ui/index.html?urls.primaryName=Grail+-+Filter+Segments
    /// 
    /// ## Resource Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Dynatrace = Pulumiverse.Dynatrace;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // ID GQ7NqJGPV1N
    ///     var _name_ = new Dynatrace.Segment("#name#", new()
    ///     {
    ///         Description = "Example description",
    ///         IsPublic = true,
    ///         Includes = new Dynatrace.Inputs.SegmentIncludesArgs
    ///         {
    ///             Items = new[]
    ///             {
    ///                 new Dynatrace.Inputs.SegmentIncludesItemArgs
    ///                 {
    ///                     DataObject = "_all_data_object",
    ///                     Filter = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["children"] = new[]
    ///                         {
    ///                             new Dictionary&lt;string, object?&gt;
    ///                             {
    ///                                 ["key"] = new Dictionary&lt;string, object?&gt;
    ///                                 {
    ///                                     ["range"] = new Dictionary&lt;string, object?&gt;
    ///                                     {
    ///                                         ["from"] = 0,
    ///                                         ["to"] = 16,
    ///                                     },
    ///                                     ["textValue"] = "k8s.cluster.name",
    ///                                     ["type"] = "Key",
    ///                                     ["value"] = "k8s.cluster.name",
    ///                                 },
    ///                                 ["operator"] = new Dictionary&lt;string, object?&gt;
    ///                                 {
    ///                                     ["range"] = new Dictionary&lt;string, object?&gt;
    ///                                     {
    ///                                         ["from"] = 17,
    ///                                         ["to"] = 18,
    ///                                     },
    ///                                     ["textValue"] = "=",
    ///                                     ["type"] = "ComparisonOperator",
    ///                                     ["value"] = "=",
    ///                                 },
    ///                                 ["range"] = new Dictionary&lt;string, object?&gt;
    ///                                 {
    ///                                     ["from"] = 0,
    ///                                     ["to"] = 27,
    ///                                 },
    ///                                 ["type"] = "Statement",
    ///                                 ["value"] = new Dictionary&lt;string, object?&gt;
    ///                                 {
    ///                                     ["range"] = new Dictionary&lt;string, object?&gt;
    ///                                     {
    ///                                         ["from"] = 19,
    ///                                         ["to"] = 27,
    ///                                     },
    ///                                     ["textValue"] = "$cluster",
    ///                                     ["type"] = "String",
    ///                                     ["value"] = "$cluster",
    ///                                 },
    ///                             },
    ///                         },
    ///                         ["explicit"] = false,
    ///                         ["logicalOperator"] = "AND",
    ///                         ["range"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["from"] = 0,
    ///                             ["to"] = 27,
    ///                         },
    ///                         ["type"] = "Group",
    ///                     }),
    ///                 },
    ///                 new Dynatrace.Inputs.SegmentIncludesItemArgs
    ///                 {
    ///                     DataObject = "dt.entity.cloud_application",
    ///                     Filter = "",
    ///                     Relationship = new Dynatrace.Inputs.SegmentIncludesItemRelationshipArgs
    ///                     {
    ///                         Name = "clustered_by",
    ///                         Target = "dt.entity.kubernetes_cluster",
    ///                     },
    ///                 },
    ///                 new Dynatrace.Inputs.SegmentIncludesItemArgs
    ///                 {
    ///                     DataObject = "dt.entity.cloud_application_instance",
    ///                     Filter = "",
    ///                     Relationship = new Dynatrace.Inputs.SegmentIncludesItemRelationshipArgs
    ///                     {
    ///                         Name = "clustered_by",
    ///                         Target = "dt.entity.kubernetes_cluster",
    ///                     },
    ///                 },
    ///                 new Dynatrace.Inputs.SegmentIncludesItemArgs
    ///                 {
    ///                     DataObject = "dt.entity.cloud_application_namespace",
    ///                     Filter = "",
    ///                     Relationship = new Dynatrace.Inputs.SegmentIncludesItemRelationshipArgs
    ///                     {
    ///                         Name = "clustered_by",
    ///                         Target = "dt.entity.kubernetes_cluster",
    ///                     },
    ///                 },
    ///                 new Dynatrace.Inputs.SegmentIncludesItemArgs
    ///                 {
    ///                     DataObject = "dt.entity.container_group_instance",
    ///                     Filter = "",
    ///                     Relationship = new Dynatrace.Inputs.SegmentIncludesItemRelationshipArgs
    ///                     {
    ///                         Name = "belongs_to",
    ///                         Target = "dt.entity.kubernetes_cluster",
    ///                     },
    ///                 },
    ///                 new Dynatrace.Inputs.SegmentIncludesItemArgs
    ///                 {
    ///                     DataObject = "dt.entity.host",
    ///                     Filter = "",
    ///                     Relationship = new Dynatrace.Inputs.SegmentIncludesItemRelationshipArgs
    ///                     {
    ///                         Name = "clustered_by",
    ///                         Target = "dt.entity.kubernetes_cluster",
    ///                     },
    ///                 },
    ///                 new Dynatrace.Inputs.SegmentIncludesItemArgs
    ///                 {
    ///                     DataObject = "dt.entity.kubernetes_cluster",
    ///                     Filter = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["children"] = new[]
    ///                         {
    ///                             new Dictionary&lt;string, object?&gt;
    ///                             {
    ///                                 ["key"] = new Dictionary&lt;string, object?&gt;
    ///                                 {
    ///                                     ["range"] = new Dictionary&lt;string, object?&gt;
    ///                                     {
    ///                                         ["from"] = 0,
    ///                                         ["to"] = 11,
    ///                                     },
    ///                                     ["textValue"] = "entity.name",
    ///                                     ["type"] = "Key",
    ///                                     ["value"] = "entity.name",
    ///                                 },
    ///                                 ["operator"] = new Dictionary&lt;string, object?&gt;
    ///                                 {
    ///                                     ["range"] = new Dictionary&lt;string, object?&gt;
    ///                                     {
    ///                                         ["from"] = 12,
    ///                                         ["to"] = 13,
    ///                                     },
    ///                                     ["textValue"] = "=",
    ///                                     ["type"] = "ComparisonOperator",
    ///                                     ["value"] = "=",
    ///                                 },
    ///                                 ["range"] = new Dictionary&lt;string, object?&gt;
    ///                                 {
    ///                                     ["from"] = 0,
    ///                                     ["to"] = 22,
    ///                                 },
    ///                                 ["type"] = "Statement",
    ///                                 ["value"] = new Dictionary&lt;string, object?&gt;
    ///                                 {
    ///                                     ["range"] = new Dictionary&lt;string, object?&gt;
    ///                                     {
    ///                                         ["from"] = 14,
    ///                                         ["to"] = 22,
    ///                                     },
    ///                                     ["textValue"] = "$cluster",
    ///                                     ["type"] = "String",
    ///                                     ["value"] = "$cluster",
    ///                                 },
    ///                             },
    ///                         },
    ///                         ["explicit"] = false,
    ///                         ["logicalOperator"] = "AND",
    ///                         ["range"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["from"] = 0,
    ///                             ["to"] = 22,
    ///                         },
    ///                         ["type"] = "Group",
    ///                     }),
    ///                 },
    ///                 new Dynatrace.Inputs.SegmentIncludesItemArgs
    ///                 {
    ///                     DataObject = "dt.entity.kubernetes_node",
    ///                     Filter = "",
    ///                     Relationship = new Dynatrace.Inputs.SegmentIncludesItemRelationshipArgs
    ///                     {
    ///                         Name = "clustered_by",
    ///                         Target = "dt.entity.kubernetes_cluster",
    ///                     },
    ///                 },
    ///                 new Dynatrace.Inputs.SegmentIncludesItemArgs
    ///                 {
    ///                     DataObject = "dt.entity.kubernetes_service",
    ///                     Filter = "",
    ///                     Relationship = new Dynatrace.Inputs.SegmentIncludesItemRelationshipArgs
    ///                     {
    ///                         Name = "clustered_by",
    ///                         Target = "dt.entity.kubernetes_cluster",
    ///                     },
    ///                 },
    ///                 new Dynatrace.Inputs.SegmentIncludesItemArgs
    ///                 {
    ///                     DataObject = "dt.entity.service",
    ///                     Filter = "",
    ///                     Relationship = new Dynatrace.Inputs.SegmentIncludesItemRelationshipArgs
    ///                     {
    ///                         Name = "clustered_by",
    ///                         Target = "dt.entity.kubernetes_cluster",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Variables = new Dynatrace.Inputs.SegmentVariablesArgs
    ///         {
    ///             Type = "query",
    ///             Value = @"fetch dt.entity.kubernetes_cluster
    /// | fields cluster = entity.name
    /// | sort cluster
    /// ",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [DynatraceResourceType("dynatrace:index/segment:Segment")]
    public partial class Segment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Description of the filter-segment
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// List of includes of the filter-segment
        /// </summary>
        [Output("includes")]
        public Output<Outputs.SegmentIncludes?> Includes { get; private set; } = null!;

        /// <summary>
        /// Indicates if the filter-segment is publicly accessible within the tenant
        /// </summary>
        [Output("isPublic")]
        public Output<bool> IsPublic { get; private set; } = null!;

        /// <summary>
        /// Name of the filter-segment
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Variables of the filter-segment
        /// </summary>
        [Output("variables")]
        public Output<Outputs.SegmentVariables?> Variables { get; private set; } = null!;


        /// <summary>
        /// Create a Segment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Segment(string name, SegmentArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/segment:Segment", name, args ?? new SegmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Segment(string name, Input<string> id, SegmentState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/segment:Segment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Segment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Segment Get(string name, Input<string> id, SegmentState? state = null, CustomResourceOptions? options = null)
        {
            return new Segment(name, id, state, options);
        }
    }

    public sealed class SegmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the filter-segment
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// List of includes of the filter-segment
        /// </summary>
        [Input("includes")]
        public Input<Inputs.SegmentIncludesArgs>? Includes { get; set; }

        /// <summary>
        /// Indicates if the filter-segment is publicly accessible within the tenant
        /// </summary>
        [Input("isPublic", required: true)]
        public Input<bool> IsPublic { get; set; } = null!;

        /// <summary>
        /// Name of the filter-segment
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Variables of the filter-segment
        /// </summary>
        [Input("variables")]
        public Input<Inputs.SegmentVariablesArgs>? Variables { get; set; }

        public SegmentArgs()
        {
        }
        public static new SegmentArgs Empty => new SegmentArgs();
    }

    public sealed class SegmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the filter-segment
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// List of includes of the filter-segment
        /// </summary>
        [Input("includes")]
        public Input<Inputs.SegmentIncludesGetArgs>? Includes { get; set; }

        /// <summary>
        /// Indicates if the filter-segment is publicly accessible within the tenant
        /// </summary>
        [Input("isPublic")]
        public Input<bool>? IsPublic { get; set; }

        /// <summary>
        /// Name of the filter-segment
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Variables of the filter-segment
        /// </summary>
        [Input("variables")]
        public Input<Inputs.SegmentVariablesGetArgs>? Variables { get; set; }

        public SegmentState()
        {
        }
        public static new SegmentState Empty => new SegmentState();
    }
}
