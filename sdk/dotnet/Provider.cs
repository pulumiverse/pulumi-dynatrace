// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    /// <summary>
    /// The provider type for the dynatrace package. By default, resources use package-wide configuration
    /// settings, however an explicit `Provider` instance may be created and passed during resource
    /// construction to achieve fine-grained programmatic control over provider settings. See the
    /// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
    /// </summary>
    [DynatraceResourceType("pulumi:providers:dynatrace")]
    public partial class Provider : global::Pulumi.ProviderResource
    {
        [Output("accountId")]
        public Output<string?> AccountId { get; private set; } = null!;

        [Output("automationClientId")]
        public Output<string?> AutomationClientId { get; private set; } = null!;

        [Output("automationClientSecret")]
        public Output<string?> AutomationClientSecret { get; private set; } = null!;

        /// <summary>
        /// The URL of the Dynatrace Environment with Platform capabilities turned on (`https://#####.apps.dynatrace.com)`. This is
        /// optional configuration when `dt_env_url` already specifies a SaaS Environment like `https://#####.live.dynatrace.com` or
        /// `https://#####.apps.dynatrace.com`
        /// </summary>
        [Output("automationEnvUrl")]
        public Output<string?> AutomationEnvUrl { get; private set; } = null!;

        /// <summary>
        /// The URL that provides the Bearer tokens when accessing the Automation REST API. This is optional configuration when
        /// `dt_env_url` already specifies a SaaS Environment like `https://#####.live.dynatrace.com` or
        /// `https://#####.apps.dynatrace.com`
        /// </summary>
        [Output("automationTokenUrl")]
        public Output<string?> AutomationTokenUrl { get; private set; } = null!;

        [Output("clientId")]
        public Output<string?> ClientId { get; private set; } = null!;

        [Output("clientSecret")]
        public Output<string?> ClientSecret { get; private set; } = null!;

        [Output("dtApiToken")]
        public Output<string?> DtApiToken { get; private set; } = null!;

        [Output("dtClusterApiToken")]
        public Output<string?> DtClusterApiToken { get; private set; } = null!;

        [Output("dtClusterUrl")]
        public Output<string?> DtClusterUrl { get; private set; } = null!;

        [Output("dtEnvUrl")]
        public Output<string?> DtEnvUrl { get; private set; } = null!;

        [Output("iamAccountId")]
        public Output<string?> IamAccountId { get; private set; } = null!;

        [Output("iamClientId")]
        public Output<string?> IamClientId { get; private set; } = null!;

        [Output("iamClientSecret")]
        public Output<string?> IamClientSecret { get; private set; } = null!;

        [Output("iamEndpointUrl")]
        public Output<string?> IamEndpointUrl { get; private set; } = null!;

        [Output("iamTokenUrl")]
        public Output<string?> IamTokenUrl { get; private set; } = null!;


        /// <summary>
        /// Create a Provider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Provider(string name, ProviderArgs? args = null, CustomResourceOptions? options = null)
            : base("dynatrace", name, args ?? new ProviderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
                AdditionalSecretOutputs =
                {
                    "accountId",
                    "automationClientId",
                    "automationClientSecret",
                    "clientId",
                    "clientSecret",
                    "dtApiToken",
                    "dtClusterApiToken",
                    "dtClusterUrl",
                    "iamAccountId",
                    "iamClientId",
                    "iamClientSecret",
                    "iamEndpointUrl",
                    "iamTokenUrl",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
    }

    public sealed class ProviderArgs : global::Pulumi.ResourceArgs
    {
        [Input("accountId")]
        private Input<string>? _accountId;
        public Input<string>? AccountId
        {
            get => _accountId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _accountId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("automationClientId")]
        private Input<string>? _automationClientId;
        public Input<string>? AutomationClientId
        {
            get => _automationClientId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _automationClientId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("automationClientSecret")]
        private Input<string>? _automationClientSecret;
        public Input<string>? AutomationClientSecret
        {
            get => _automationClientSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _automationClientSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The URL of the Dynatrace Environment with Platform capabilities turned on (`https://#####.apps.dynatrace.com)`. This is
        /// optional configuration when `dt_env_url` already specifies a SaaS Environment like `https://#####.live.dynatrace.com` or
        /// `https://#####.apps.dynatrace.com`
        /// </summary>
        [Input("automationEnvUrl")]
        public Input<string>? AutomationEnvUrl { get; set; }

        /// <summary>
        /// The URL that provides the Bearer tokens when accessing the Automation REST API. This is optional configuration when
        /// `dt_env_url` already specifies a SaaS Environment like `https://#####.live.dynatrace.com` or
        /// `https://#####.apps.dynatrace.com`
        /// </summary>
        [Input("automationTokenUrl")]
        public Input<string>? AutomationTokenUrl { get; set; }

        [Input("clientId")]
        private Input<string>? _clientId;
        public Input<string>? ClientId
        {
            get => _clientId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("clientSecret")]
        private Input<string>? _clientSecret;
        public Input<string>? ClientSecret
        {
            get => _clientSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("dtApiToken")]
        private Input<string>? _dtApiToken;
        public Input<string>? DtApiToken
        {
            get => _dtApiToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _dtApiToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("dtClusterApiToken")]
        private Input<string>? _dtClusterApiToken;
        public Input<string>? DtClusterApiToken
        {
            get => _dtClusterApiToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _dtClusterApiToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("dtClusterUrl")]
        private Input<string>? _dtClusterUrl;
        public Input<string>? DtClusterUrl
        {
            get => _dtClusterUrl;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _dtClusterUrl = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("dtEnvUrl")]
        public Input<string>? DtEnvUrl { get; set; }

        [Input("iamAccountId")]
        private Input<string>? _iamAccountId;
        public Input<string>? IamAccountId
        {
            get => _iamAccountId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _iamAccountId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("iamClientId")]
        private Input<string>? _iamClientId;
        public Input<string>? IamClientId
        {
            get => _iamClientId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _iamClientId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("iamClientSecret")]
        private Input<string>? _iamClientSecret;
        public Input<string>? IamClientSecret
        {
            get => _iamClientSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _iamClientSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("iamEndpointUrl")]
        private Input<string>? _iamEndpointUrl;
        public Input<string>? IamEndpointUrl
        {
            get => _iamEndpointUrl;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _iamEndpointUrl = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("iamTokenUrl")]
        private Input<string>? _iamTokenUrl;
        public Input<string>? IamTokenUrl
        {
            get => _iamTokenUrl;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _iamTokenUrl = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public ProviderArgs()
        {
            DtApiToken = Utilities.GetEnv("DYNATRACE_API_TOKEN", "DT_API_TOKEN");
            DtClusterApiToken = Utilities.GetEnv("DYNATRACE_CLUSTER_API_TOKEN", "DT_CLUSTER_API_TOKEN");
            DtClusterUrl = Utilities.GetEnv("DYNATRACE_CLUSTER_URL", "DT_CLUSTER_URL");
            DtEnvUrl = Utilities.GetEnv("DYNATRACE_ENV_URL", "DT_ENV_URL");
        }
        public static new ProviderArgs Empty => new ProviderArgs();
    }
}
