// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/managedBackup:ManagedBackup")]
    public partial class ManagedBackup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Cassandra backup bandwidth limit in Mbps
        /// </summary>
        [Output("bandwidthLimitMbits")]
        public Output<int?> BandwidthLimitMbits { get; private set; } = null!;

        /// <summary>
        /// Hour to start Cassandra backups each day.
        /// </summary>
        [Output("cassandraScheduledTime")]
        public Output<int> CassandraScheduledTime { get; private set; } = null!;

        /// <summary>
        /// For internal use: current state of rules in JSON format
        /// </summary>
        [Output("currentState")]
        public Output<string> CurrentState { get; private set; } = null!;

        /// <summary>
        /// Datacenter which will create backups
        /// </summary>
        [Output("datacenter")]
        public Output<string?> Datacenter { get; private set; } = null!;

        /// <summary>
        /// Backups are enabled (true) or disabled (false).
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Include (true) or exclude (false) Log Monitoring v2 data
        /// </summary>
        [Output("includeLm20Data")]
        public Output<bool?> IncludeLm20Data { get; private set; } = null!;

        /// <summary>
        /// Include user sessions (true) or GDPR compliance (false)
        /// </summary>
        [Output("includeRumData")]
        public Output<bool?> IncludeRumData { get; private set; } = null!;

        /// <summary>
        /// Include time series metric-data (true) or retain configuration data only (false))
        /// </summary>
        [Output("includeTsMetricData")]
        public Output<bool?> IncludeTsMetricData { get; private set; } = null!;

        /// <summary>
        /// Max number of Elasticsearch snapshots to clean. Elasticsearch snapshots won't be created anymore if there will be more backups to clean than this value.
        /// </summary>
        [Output("maxEsSnapshotsToClean")]
        public Output<int?> MaxEsSnapshotsToClean { get; private set; } = null!;

        /// <summary>
        /// Pauses Elasticsearch and Cassandra backups. In comparison to enable/disable backup, this option does not modify any configuration like Elasticsearch properties.
        /// </summary>
        [Output("pauseBackups")]
        public Output<bool?> PauseBackups { get; private set; } = null!;

        /// <summary>
        /// A full path to the backup archive
        /// </summary>
        [Output("storagePath")]
        public Output<string?> StoragePath { get; private set; } = null!;


        /// <summary>
        /// Create a ManagedBackup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ManagedBackup(string name, ManagedBackupArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/managedBackup:ManagedBackup", name, args ?? new ManagedBackupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ManagedBackup(string name, Input<string> id, ManagedBackupState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/managedBackup:ManagedBackup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ManagedBackup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ManagedBackup Get(string name, Input<string> id, ManagedBackupState? state = null, CustomResourceOptions? options = null)
        {
            return new ManagedBackup(name, id, state, options);
        }
    }

    public sealed class ManagedBackupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cassandra backup bandwidth limit in Mbps
        /// </summary>
        [Input("bandwidthLimitMbits")]
        public Input<int>? BandwidthLimitMbits { get; set; }

        /// <summary>
        /// Hour to start Cassandra backups each day.
        /// </summary>
        [Input("cassandraScheduledTime", required: true)]
        public Input<int> CassandraScheduledTime { get; set; } = null!;

        /// <summary>
        /// For internal use: current state of rules in JSON format
        /// </summary>
        [Input("currentState")]
        public Input<string>? CurrentState { get; set; }

        /// <summary>
        /// Datacenter which will create backups
        /// </summary>
        [Input("datacenter")]
        public Input<string>? Datacenter { get; set; }

        /// <summary>
        /// Backups are enabled (true) or disabled (false).
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Include (true) or exclude (false) Log Monitoring v2 data
        /// </summary>
        [Input("includeLm20Data")]
        public Input<bool>? IncludeLm20Data { get; set; }

        /// <summary>
        /// Include user sessions (true) or GDPR compliance (false)
        /// </summary>
        [Input("includeRumData")]
        public Input<bool>? IncludeRumData { get; set; }

        /// <summary>
        /// Include time series metric-data (true) or retain configuration data only (false))
        /// </summary>
        [Input("includeTsMetricData")]
        public Input<bool>? IncludeTsMetricData { get; set; }

        /// <summary>
        /// Max number of Elasticsearch snapshots to clean. Elasticsearch snapshots won't be created anymore if there will be more backups to clean than this value.
        /// </summary>
        [Input("maxEsSnapshotsToClean")]
        public Input<int>? MaxEsSnapshotsToClean { get; set; }

        /// <summary>
        /// Pauses Elasticsearch and Cassandra backups. In comparison to enable/disable backup, this option does not modify any configuration like Elasticsearch properties.
        /// </summary>
        [Input("pauseBackups")]
        public Input<bool>? PauseBackups { get; set; }

        /// <summary>
        /// A full path to the backup archive
        /// </summary>
        [Input("storagePath")]
        public Input<string>? StoragePath { get; set; }

        public ManagedBackupArgs()
        {
        }
        public static new ManagedBackupArgs Empty => new ManagedBackupArgs();
    }

    public sealed class ManagedBackupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cassandra backup bandwidth limit in Mbps
        /// </summary>
        [Input("bandwidthLimitMbits")]
        public Input<int>? BandwidthLimitMbits { get; set; }

        /// <summary>
        /// Hour to start Cassandra backups each day.
        /// </summary>
        [Input("cassandraScheduledTime")]
        public Input<int>? CassandraScheduledTime { get; set; }

        /// <summary>
        /// For internal use: current state of rules in JSON format
        /// </summary>
        [Input("currentState")]
        public Input<string>? CurrentState { get; set; }

        /// <summary>
        /// Datacenter which will create backups
        /// </summary>
        [Input("datacenter")]
        public Input<string>? Datacenter { get; set; }

        /// <summary>
        /// Backups are enabled (true) or disabled (false).
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Include (true) or exclude (false) Log Monitoring v2 data
        /// </summary>
        [Input("includeLm20Data")]
        public Input<bool>? IncludeLm20Data { get; set; }

        /// <summary>
        /// Include user sessions (true) or GDPR compliance (false)
        /// </summary>
        [Input("includeRumData")]
        public Input<bool>? IncludeRumData { get; set; }

        /// <summary>
        /// Include time series metric-data (true) or retain configuration data only (false))
        /// </summary>
        [Input("includeTsMetricData")]
        public Input<bool>? IncludeTsMetricData { get; set; }

        /// <summary>
        /// Max number of Elasticsearch snapshots to clean. Elasticsearch snapshots won't be created anymore if there will be more backups to clean than this value.
        /// </summary>
        [Input("maxEsSnapshotsToClean")]
        public Input<int>? MaxEsSnapshotsToClean { get; set; }

        /// <summary>
        /// Pauses Elasticsearch and Cassandra backups. In comparison to enable/disable backup, this option does not modify any configuration like Elasticsearch properties.
        /// </summary>
        [Input("pauseBackups")]
        public Input<bool>? PauseBackups { get; set; }

        /// <summary>
        /// A full path to the backup archive
        /// </summary>
        [Input("storagePath")]
        public Input<string>? StoragePath { get; set; }

        public ManagedBackupState()
        {
        }
        public static new ManagedBackupState Empty => new ManagedBackupState();
    }
}
