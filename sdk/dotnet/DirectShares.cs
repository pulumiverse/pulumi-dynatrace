// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    /// <summary>
    /// &gt; **Dynatrace SaaS only**
    /// 
    /// &gt; To utilize this resource, please define the environment variables `DT_CLIENT_ID`, `DT_CLIENT_SECRET`, `DT_ACCOUNT_ID` with an OAuth client including the following permissions: **Read direct-shares** (`document:direct-shares:read`), **Write direct-shares** (`document:direct-shares:write`), and **Delete direct-shares** (`document:direct-shares:delete`).
    /// 
    /// &gt; This resource is currently not covered by the export utility.
    /// 
    /// ## Dynatrace Documentation
    /// 
    /// - Dynatrace Documents - https://########.apps.dynatrace.com/platform/swagger-ui/index.html?urls.primaryName=Document%20Service
    /// 
    /// ## Resource Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Dynatrace = Pulumiverse.Dynatrace;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var thisDocument = new Dynatrace.Document("thisDocument", new()
    ///     {
    ///         Type = "dashboard",
    ///         Content = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["version"] = 13,
    ///             ["variables"] = new[]
    ///             {
    ///             },
    ///             ["tiles"] = new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["0"] = new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["type"] = "markdown",
    ///                     ["title"] = "",
    ///                     ["content"] = "![Image of a Dashboard](https://dt-cdn.net/wp-content/uploads/2022/09/pic1____Dashboard-Preset___PNG.png)",
    ///                 },
    ///                 ["1"] = new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["type"] = "data",
    ///                     ["title"] = "",
    ///                     ["query"] = "timeseries avg(dt.host.cpu.user)",
    ///                     ["queryConfig"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["additionalFilters"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                         },
    ///                         ["version"] = "4.3.1",
    ///                         ["datatype"] = "metrics",
    ///                         ["metricKey"] = "dt.host.cpu.user",
    ///                         ["aggregation"] = "avg",
    ///                         ["by"] = new[]
    ///                         {
    ///                         },
    ///                     },
    ///                     ["subType"] = "dql-builder-metrics",
    ///                     ["visualization"] = "lineChart",
    ///                     ["visualizationSettings"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["thresholds"] = new[]
    ///                         {
    ///                         },
    ///                         ["chartSettings"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["gapPolicy"] = "connect",
    ///                             ["circleChartSettings"] = new Dictionary&lt;string, object?&gt;
    ///                             {
    ///                                 ["groupingThresholdType"] = "relative",
    ///                                 ["groupingThresholdValue"] = 0,
    ///                                 ["valueType"] = "relative",
    ///                             },
    ///                             ["categoryOverrides"] = new Dictionary&lt;string, object?&gt;
    ///                             {
    ///                             },
    ///                             ["fieldMapping"] = new Dictionary&lt;string, object?&gt;
    ///                             {
    ///                                 ["timestamp"] = "timeframe",
    ///                                 ["leftAxisValues"] = new[]
    ///                                 {
    ///                                     "avg(dt.host.cpu.user)",
    ///                                 },
    ///                                 ["leftAxisDimensions"] = new[]
    ///                                 {
    ///                                 },
    ///                                 ["fields"] = new[]
    ///                                 {
    ///                                 },
    ///                                 ["values"] = new[]
    ///                                 {
    ///                                 },
    ///                             },
    ///                         },
    ///                         ["singleValue"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["showLabel"] = true,
    ///                             ["label"] = "",
    ///                             ["prefixIcon"] = "",
    ///                             ["autoscale"] = true,
    ///                             ["alignment"] = "center",
    ///                             ["colorThresholdTarget"] = "value",
    ///                         },
    ///                         ["table"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["rowDensity"] = "condensed",
    ///                             ["enableSparklines"] = false,
    ///                             ["hiddenColumns"] = new[]
    ///                             {
    ///                             },
    ///                             ["lineWrapIds"] = new[]
    ///                             {
    ///                             },
    ///                             ["columnWidths"] = new Dictionary&lt;string, object?&gt;
    ///                             {
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///                 ["2"] = new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["type"] = "data",
    ///                     ["title"] = "",
    ///                     ["query"] = "timeseries avg(dt.host.memory.used)",
    ///                     ["queryConfig"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["additionalFilters"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                         },
    ///                         ["version"] = "4.3.1",
    ///                         ["datatype"] = "metrics",
    ///                         ["metricKey"] = "dt.host.memory.used",
    ///                         ["aggregation"] = "avg",
    ///                         ["by"] = new[]
    ///                         {
    ///                         },
    ///                     },
    ///                     ["subType"] = "dql-builder-metrics",
    ///                     ["visualization"] = "lineChart",
    ///                     ["visualizationSettings"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["thresholds"] = new[]
    ///                         {
    ///                         },
    ///                         ["chartSettings"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["gapPolicy"] = "connect",
    ///                             ["circleChartSettings"] = new Dictionary&lt;string, object?&gt;
    ///                             {
    ///                                 ["groupingThresholdType"] = "relative",
    ///                                 ["groupingThresholdValue"] = 0,
    ///                                 ["valueType"] = "relative",
    ///                             },
    ///                             ["categoryOverrides"] = new Dictionary&lt;string, object?&gt;
    ///                             {
    ///                             },
    ///                             ["fieldMapping"] = new Dictionary&lt;string, object?&gt;
    ///                             {
    ///                                 ["timestamp"] = "timeframe",
    ///                                 ["leftAxisValues"] = new[]
    ///                                 {
    ///                                     "avg(dt.host.memory.used)",
    ///                                 },
    ///                                 ["leftAxisDimensions"] = new[]
    ///                                 {
    ///                                 },
    ///                                 ["fields"] = new[]
    ///                                 {
    ///                                 },
    ///                                 ["values"] = new[]
    ///                                 {
    ///                                 },
    ///                             },
    ///                             ["categoricalBarChartSettings"] = new Dictionary&lt;string, object?&gt;
    ///                             {
    ///                             },
    ///                         },
    ///                         ["singleValue"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["showLabel"] = true,
    ///                             ["label"] = "",
    ///                             ["prefixIcon"] = "",
    ///                             ["autoscale"] = true,
    ///                             ["alignment"] = "center",
    ///                             ["colorThresholdTarget"] = "value",
    ///                         },
    ///                         ["table"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["rowDensity"] = "condensed",
    ///                             ["enableSparklines"] = false,
    ///                             ["hiddenColumns"] = new[]
    ///                             {
    ///                             },
    ///                             ["lineWrapIds"] = new[]
    ///                             {
    ///                             },
    ///                             ["columnWidths"] = new Dictionary&lt;string, object?&gt;
    ///                             {
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             ["layouts"] = new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["0"] = new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["x"] = 0,
    ///                     ["y"] = 0,
    ///                     ["w"] = 24,
    ///                     ["h"] = 14,
    ///                 },
    ///                 ["1"] = new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["x"] = 0,
    ///                     ["y"] = 14,
    ///                     ["w"] = 9,
    ///                     ["h"] = 6,
    ///                 },
    ///                 ["2"] = new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["x"] = 15,
    ///                     ["y"] = 14,
    ///                     ["w"] = 9,
    ///                     ["h"] = 6,
    ///                 },
    ///             },
    ///         }),
    ///     });
    /// 
    ///     var thisDirectShares = new Dynatrace.DirectShares("thisDirectShares", new()
    ///     {
    ///         DocumentId = thisDocument.Id,
    ///         Access = "read-write",
    ///         Recipients = new Dynatrace.Inputs.DirectSharesRecipientsArgs
    ///         {
    ///             Recipients = new[]
    ///             {
    ///                 new Dynatrace.Inputs.DirectSharesRecipientsRecipientArgs
    ///                 {
    ///                     Id = "441664f0-23c9-40ef-b344-18c02c23d787",
    ///                     Type = "user",
    ///                 },
    ///                 new Dynatrace.Inputs.DirectSharesRecipientsRecipientArgs
    ///                 {
    ///                     Id = "441664f0-23c9-40ef-b344-18c02c23d788",
    ///                     Type = "group",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [DynatraceResourceType("dynatrace:index/directShares:DirectShares")]
    public partial class DirectShares : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Access grants. Possible values are `read` and `read-write`
        /// </summary>
        [Output("access")]
        public Output<string?> Access { get; private set; } = null!;

        /// <summary>
        /// Document ID
        /// </summary>
        [Output("documentId")]
        public Output<string> DocumentId { get; private set; } = null!;

        /// <summary>
        /// Recipients of the direct share
        /// </summary>
        [Output("recipients")]
        public Output<Outputs.DirectSharesRecipients> Recipients { get; private set; } = null!;


        /// <summary>
        /// Create a DirectShares resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DirectShares(string name, DirectSharesArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/directShares:DirectShares", name, args ?? new DirectSharesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DirectShares(string name, Input<string> id, DirectSharesState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/directShares:DirectShares", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DirectShares resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DirectShares Get(string name, Input<string> id, DirectSharesState? state = null, CustomResourceOptions? options = null)
        {
            return new DirectShares(name, id, state, options);
        }
    }

    public sealed class DirectSharesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Access grants. Possible values are `read` and `read-write`
        /// </summary>
        [Input("access")]
        public Input<string>? Access { get; set; }

        /// <summary>
        /// Document ID
        /// </summary>
        [Input("documentId", required: true)]
        public Input<string> DocumentId { get; set; } = null!;

        /// <summary>
        /// Recipients of the direct share
        /// </summary>
        [Input("recipients", required: true)]
        public Input<Inputs.DirectSharesRecipientsArgs> Recipients { get; set; } = null!;

        public DirectSharesArgs()
        {
        }
        public static new DirectSharesArgs Empty => new DirectSharesArgs();
    }

    public sealed class DirectSharesState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Access grants. Possible values are `read` and `read-write`
        /// </summary>
        [Input("access")]
        public Input<string>? Access { get; set; }

        /// <summary>
        /// Document ID
        /// </summary>
        [Input("documentId")]
        public Input<string>? DocumentId { get; set; }

        /// <summary>
        /// Recipients of the direct share
        /// </summary>
        [Input("recipients")]
        public Input<Inputs.DirectSharesRecipientsGetArgs>? Recipients { get; set; }

        public DirectSharesState()
        {
        }
        public static new DirectSharesState Empty => new DirectSharesState();
    }
}
