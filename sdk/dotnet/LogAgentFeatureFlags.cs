// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/logAgentFeatureFlags:LogAgentFeatureFlags")]
    public partial class LogAgentFeatureFlags : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enable OneAgent to collect logs from Journald on Linux systems. This setting enables: * Detection and to have logs
        /// ingested matching ingest rule is required.
        /// </summary>
        [Output("journaldLogDetector")]
        public Output<bool?> JournaldLogDetector { get; private set; } = null!;

        /// <summary>
        /// Enable OneAgent to collect all container logs in Kubernetes environments. This setting enables: * Detection and
        /// collection of logs from short-lived containers and processes in Kubernetes. * Detection and collection of logs from any
        /// processes in containers in Kubernetes. Up until now only processes detected by OneAgent are covered with the Log module.
        /// * Log events decoration according to semantic dictionary. **Note:** The matcher "Deployment name" in the log sources
        /// configuration will be ignored and needs to be replaced with "Workload name", requires **Dynatrace Operator 1.4.1+**. For
        /// more details, check our [documentation](https://dt-url.net/jn02ey0).
        /// </summary>
        [Output("newContainerLogDetector")]
        public Output<bool> NewContainerLogDetector { get; private set; } = null!;

        /// <summary>
        /// The scope of this setting (HOST, KUBERNETES_CLUSTER, HOST_GROUP). Omit this property if you want to cover the whole
        /// environment.
        /// </summary>
        [Output("scope")]
        public Output<string?> Scope { get; private set; } = null!;


        /// <summary>
        /// Create a LogAgentFeatureFlags resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LogAgentFeatureFlags(string name, LogAgentFeatureFlagsArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/logAgentFeatureFlags:LogAgentFeatureFlags", name, args ?? new LogAgentFeatureFlagsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LogAgentFeatureFlags(string name, Input<string> id, LogAgentFeatureFlagsState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/logAgentFeatureFlags:LogAgentFeatureFlags", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LogAgentFeatureFlags resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LogAgentFeatureFlags Get(string name, Input<string> id, LogAgentFeatureFlagsState? state = null, CustomResourceOptions? options = null)
        {
            return new LogAgentFeatureFlags(name, id, state, options);
        }
    }

    public sealed class LogAgentFeatureFlagsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable OneAgent to collect logs from Journald on Linux systems. This setting enables: * Detection and to have logs
        /// ingested matching ingest rule is required.
        /// </summary>
        [Input("journaldLogDetector")]
        public Input<bool>? JournaldLogDetector { get; set; }

        /// <summary>
        /// Enable OneAgent to collect all container logs in Kubernetes environments. This setting enables: * Detection and
        /// collection of logs from short-lived containers and processes in Kubernetes. * Detection and collection of logs from any
        /// processes in containers in Kubernetes. Up until now only processes detected by OneAgent are covered with the Log module.
        /// * Log events decoration according to semantic dictionary. **Note:** The matcher "Deployment name" in the log sources
        /// configuration will be ignored and needs to be replaced with "Workload name", requires **Dynatrace Operator 1.4.1+**. For
        /// more details, check our [documentation](https://dt-url.net/jn02ey0).
        /// </summary>
        [Input("newContainerLogDetector", required: true)]
        public Input<bool> NewContainerLogDetector { get; set; } = null!;

        /// <summary>
        /// The scope of this setting (HOST, KUBERNETES_CLUSTER, HOST_GROUP). Omit this property if you want to cover the whole
        /// environment.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        public LogAgentFeatureFlagsArgs()
        {
        }
        public static new LogAgentFeatureFlagsArgs Empty => new LogAgentFeatureFlagsArgs();
    }

    public sealed class LogAgentFeatureFlagsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable OneAgent to collect logs from Journald on Linux systems. This setting enables: * Detection and to have logs
        /// ingested matching ingest rule is required.
        /// </summary>
        [Input("journaldLogDetector")]
        public Input<bool>? JournaldLogDetector { get; set; }

        /// <summary>
        /// Enable OneAgent to collect all container logs in Kubernetes environments. This setting enables: * Detection and
        /// collection of logs from short-lived containers and processes in Kubernetes. * Detection and collection of logs from any
        /// processes in containers in Kubernetes. Up until now only processes detected by OneAgent are covered with the Log module.
        /// * Log events decoration according to semantic dictionary. **Note:** The matcher "Deployment name" in the log sources
        /// configuration will be ignored and needs to be replaced with "Workload name", requires **Dynatrace Operator 1.4.1+**. For
        /// more details, check our [documentation](https://dt-url.net/jn02ey0).
        /// </summary>
        [Input("newContainerLogDetector")]
        public Input<bool>? NewContainerLogDetector { get; set; }

        /// <summary>
        /// The scope of this setting (HOST, KUBERNETES_CLUSTER, HOST_GROUP). Omit this property if you want to cover the whole
        /// environment.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        public LogAgentFeatureFlagsState()
        {
        }
        public static new LogAgentFeatureFlagsState Empty => new LogAgentFeatureFlagsState();
    }
}
