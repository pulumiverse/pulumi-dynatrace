// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    /// <summary>
    /// &gt; **Dynatrace SaaS only**
    /// 
    /// &gt; To utilize this resource, please define the environment variables `DT_CLIENT_ID`, `DT_CLIENT_SECRET`, `DT_ACCOUNT_ID` with an OAuth client including the following permissions: **Create and edit documents** (`document:documents:write`), **View documents** (`document:documents:read`), **Delete documents** (`document:documents:delete`), and  **Delete documents from trash** (`document:trash.documents:delete`).
    /// 
    /// &gt; This resource is excluded by default in the export utility, please explicitly specify the resource to retrieve existing configuration.
    /// 
    /// ## Dynatrace Documentation
    /// 
    /// - Dynatrace Documents - https://########.apps.dynatrace.com/platform/swagger-ui/index.html?urls.primaryName=Document%20Service
    /// 
    /// ## Resource Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Dynatrace = Pulumiverse.Dynatrace;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @this = new Dynatrace.Document("this", new()
    ///     {
    ///         Type = "dashboard",
    ///         Content = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["version"] = 13,
    ///             ["variables"] = new[]
    ///             {
    ///             },
    ///             ["tiles"] = new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["0"] = new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["type"] = "markdown",
    ///                     ["title"] = "",
    ///                     ["content"] = "![Image of a Dashboard](https://dt-cdn.net/wp-content/uploads/2022/09/pic1____Dashboard-Preset___PNG.png)",
    ///                 },
    ///                 ["1"] = new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["type"] = "data",
    ///                     ["title"] = "",
    ///                     ["query"] = "timeseries avg(dt.host.cpu.user)",
    ///                     ["queryConfig"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["additionalFilters"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                         },
    ///                         ["version"] = "4.3.1",
    ///                         ["datatype"] = "metrics",
    ///                         ["metricKey"] = "dt.host.cpu.user",
    ///                         ["aggregation"] = "avg",
    ///                         ["by"] = new[]
    ///                         {
    ///                         },
    ///                     },
    ///                     ["subType"] = "dql-builder-metrics",
    ///                     ["visualization"] = "lineChart",
    ///                     ["visualizationSettings"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["thresholds"] = new[]
    ///                         {
    ///                         },
    ///                         ["chartSettings"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["gapPolicy"] = "connect",
    ///                             ["circleChartSettings"] = new Dictionary&lt;string, object?&gt;
    ///                             {
    ///                                 ["groupingThresholdType"] = "relative",
    ///                                 ["groupingThresholdValue"] = 0,
    ///                                 ["valueType"] = "relative",
    ///                             },
    ///                             ["categoryOverrides"] = new Dictionary&lt;string, object?&gt;
    ///                             {
    ///                             },
    ///                             ["fieldMapping"] = new Dictionary&lt;string, object?&gt;
    ///                             {
    ///                                 ["timestamp"] = "timeframe",
    ///                                 ["leftAxisValues"] = new[]
    ///                                 {
    ///                                     "avg(dt.host.cpu.user)",
    ///                                 },
    ///                                 ["leftAxisDimensions"] = new[]
    ///                                 {
    ///                                 },
    ///                                 ["fields"] = new[]
    ///                                 {
    ///                                 },
    ///                                 ["values"] = new[]
    ///                                 {
    ///                                 },
    ///                             },
    ///                         },
    ///                         ["singleValue"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["showLabel"] = true,
    ///                             ["label"] = "",
    ///                             ["prefixIcon"] = "",
    ///                             ["autoscale"] = true,
    ///                             ["alignment"] = "center",
    ///                             ["colorThresholdTarget"] = "value",
    ///                         },
    ///                         ["table"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["rowDensity"] = "condensed",
    ///                             ["enableSparklines"] = false,
    ///                             ["hiddenColumns"] = new[]
    ///                             {
    ///                             },
    ///                             ["lineWrapIds"] = new[]
    ///                             {
    ///                             },
    ///                             ["columnWidths"] = new Dictionary&lt;string, object?&gt;
    ///                             {
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///                 ["2"] = new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["type"] = "data",
    ///                     ["title"] = "",
    ///                     ["query"] = "timeseries avg(dt.host.memory.used)",
    ///                     ["queryConfig"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["additionalFilters"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                         },
    ///                         ["version"] = "4.3.1",
    ///                         ["datatype"] = "metrics",
    ///                         ["metricKey"] = "dt.host.memory.used",
    ///                         ["aggregation"] = "avg",
    ///                         ["by"] = new[]
    ///                         {
    ///                         },
    ///                     },
    ///                     ["subType"] = "dql-builder-metrics",
    ///                     ["visualization"] = "lineChart",
    ///                     ["visualizationSettings"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["thresholds"] = new[]
    ///                         {
    ///                         },
    ///                         ["chartSettings"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["gapPolicy"] = "connect",
    ///                             ["circleChartSettings"] = new Dictionary&lt;string, object?&gt;
    ///                             {
    ///                                 ["groupingThresholdType"] = "relative",
    ///                                 ["groupingThresholdValue"] = 0,
    ///                                 ["valueType"] = "relative",
    ///                             },
    ///                             ["categoryOverrides"] = new Dictionary&lt;string, object?&gt;
    ///                             {
    ///                             },
    ///                             ["fieldMapping"] = new Dictionary&lt;string, object?&gt;
    ///                             {
    ///                                 ["timestamp"] = "timeframe",
    ///                                 ["leftAxisValues"] = new[]
    ///                                 {
    ///                                     "avg(dt.host.memory.used)",
    ///                                 },
    ///                                 ["leftAxisDimensions"] = new[]
    ///                                 {
    ///                                 },
    ///                                 ["fields"] = new[]
    ///                                 {
    ///                                 },
    ///                                 ["values"] = new[]
    ///                                 {
    ///                                 },
    ///                             },
    ///                             ["categoricalBarChartSettings"] = new Dictionary&lt;string, object?&gt;
    ///                             {
    ///                             },
    ///                         },
    ///                         ["singleValue"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["showLabel"] = true,
    ///                             ["label"] = "",
    ///                             ["prefixIcon"] = "",
    ///                             ["autoscale"] = true,
    ///                             ["alignment"] = "center",
    ///                             ["colorThresholdTarget"] = "value",
    ///                         },
    ///                         ["table"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["rowDensity"] = "condensed",
    ///                             ["enableSparklines"] = false,
    ///                             ["hiddenColumns"] = new[]
    ///                             {
    ///                             },
    ///                             ["lineWrapIds"] = new[]
    ///                             {
    ///                             },
    ///                             ["columnWidths"] = new Dictionary&lt;string, object?&gt;
    ///                             {
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             ["layouts"] = new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["0"] = new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["x"] = 0,
    ///                     ["y"] = 0,
    ///                     ["w"] = 24,
    ///                     ["h"] = 14,
    ///                 },
    ///                 ["1"] = new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["x"] = 0,
    ///                     ["y"] = 14,
    ///                     ["w"] = 9,
    ///                     ["h"] = 6,
    ///                 },
    ///                 ["2"] = new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["x"] = 15,
    ///                     ["y"] = 14,
    ///                     ["w"] = 9,
    ///                     ["h"] = 6,
    ///                 },
    ///             },
    ///         }),
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [DynatraceResourceType("dynatrace:index/document:Document")]
    public partial class Document : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The user context the executions of the document will happen with
        /// </summary>
        [Output("actor")]
        public Output<string> Actor { get; private set; } = null!;

        /// <summary>
        /// Document content as JSON
        /// </summary>
        [Output("content")]
        public Output<string> Content { get; private set; } = null!;

        /// <summary>
        /// The name/name of the document
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the owner of this document
        /// </summary>
        [Output("owner")]
        public Output<string> Owner { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the document is private or readable by everybody
        /// </summary>
        [Output("private")]
        public Output<bool?> Private { get; private set; } = null!;

        /// <summary>
        /// Type of the document. Possible Values are `dashboard`, `launchpad` and `notebook`
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The version of the document
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a Document resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Document(string name, DocumentArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/document:Document", name, args ?? new DocumentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Document(string name, Input<string> id, DocumentState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/document:Document", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Document resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Document Get(string name, Input<string> id, DocumentState? state = null, CustomResourceOptions? options = null)
        {
            return new Document(name, id, state, options);
        }
    }

    public sealed class DocumentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The user context the executions of the document will happen with
        /// </summary>
        [Input("actor")]
        public Input<string>? Actor { get; set; }

        /// <summary>
        /// Document content as JSON
        /// </summary>
        [Input("content", required: true)]
        public Input<string> Content { get; set; } = null!;

        /// <summary>
        /// The name/name of the document
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the owner of this document
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        /// <summary>
        /// Specifies whether the document is private or readable by everybody
        /// </summary>
        [Input("private")]
        public Input<bool>? Private { get; set; }

        /// <summary>
        /// Type of the document. Possible Values are `dashboard`, `launchpad` and `notebook`
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public DocumentArgs()
        {
        }
        public static new DocumentArgs Empty => new DocumentArgs();
    }

    public sealed class DocumentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The user context the executions of the document will happen with
        /// </summary>
        [Input("actor")]
        public Input<string>? Actor { get; set; }

        /// <summary>
        /// Document content as JSON
        /// </summary>
        [Input("content")]
        public Input<string>? Content { get; set; }

        /// <summary>
        /// The name/name of the document
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the owner of this document
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        /// <summary>
        /// Specifies whether the document is private or readable by everybody
        /// </summary>
        [Input("private")]
        public Input<bool>? Private { get; set; }

        /// <summary>
        /// Type of the document. Possible Values are `dashboard`, `launchpad` and `notebook`
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The version of the document
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public DocumentState()
        {
        }
        public static new DocumentState Empty => new DocumentState();
    }
}
