// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace.Outputs
{

    [OutputType]
    public sealed class MetricEventsEventTemplate
    {
        /// <summary>
        /// DavisÂ® AI will try to merge this event into existing problems, otherwise a new problem will always be created.
        /// </summary>
        public readonly bool? DavisMerge;
        /// <summary>
        /// The description of the event to trigger.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Possible Values: `AVAILABILITY`, `CUSTOM_ALERT`, `CUSTOM_ANNOTATION`, `CUSTOM_CONFIGURATION`, `CUSTOM_DEPLOYMENT`, `ERROR`, `INFO`, `MARKED_FOR_TERMINATION`, `RESOURCE`, `SLOWDOWN`
        /// </summary>
        public readonly string EventType;
        /// <summary>
        /// Set of additional key-value properties to be attached to the triggered event.
        /// </summary>
        public readonly ImmutableArray<Outputs.MetricEventsEventTemplateMetadata> Metadatas;
        /// <summary>
        /// The title of the event to trigger.
        /// </summary>
        public readonly string Title;

        [OutputConstructor]
        private MetricEventsEventTemplate(
            bool? davisMerge,

            string description,

            string eventType,

            ImmutableArray<Outputs.MetricEventsEventTemplateMetadata> metadatas,

            string title)
        {
            DavisMerge = davisMerge;
            Description = description;
            EventType = eventType;
            Metadatas = metadatas;
            Title = title;
        }
    }
}
