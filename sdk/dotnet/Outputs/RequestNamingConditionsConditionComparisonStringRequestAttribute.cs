// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace.Outputs
{

    [OutputType]
    public sealed class RequestNamingConditionsConditionComparisonStringRequestAttribute
    {
        /// <summary>
        /// The comparison is case-sensitive (`true`) or not case-sensitive (`false`)
        /// </summary>
        public readonly bool? CaseSensitive;
        /// <summary>
        /// If `true`, the request attribute is matched on child service calls. Default is `false`
        /// </summary>
        public readonly bool? MatchOnChildCalls;
        /// <summary>
        /// Operator of the comparison. You can reverse it by setting `negate` to `true`. Possible values are `BEGINS_WITH`, `BEGINS_WITH_ANY_OF`, `CONTAINS`, `ENDS_WITH`, `ENDS_WITH_ANY_OF`, `EQUALS`, `EQUALS_ANY_OF`, `EXISTS` and `REGEX_MATCHES`
        /// </summary>
        public readonly string? Operator;
        /// <summary>
        /// No documentation available for this attribute
        /// </summary>
        public readonly string RequestAttribute;
        /// <summary>
        /// Defines valid sources of request attributes for conditions or placeholders
        /// </summary>
        public readonly Outputs.RequestNamingConditionsConditionComparisonStringRequestAttributeSource? Source;
        /// <summary>
        /// allows for configuring properties that are not explicitly supported by the current version of this provider
        /// </summary>
        public readonly string? Unknowns;
        /// <summary>
        /// The value to compare to
        /// </summary>
        public readonly string? Value;
        /// <summary>
        /// The values to compare to
        /// </summary>
        public readonly ImmutableArray<string> Values;

        [OutputConstructor]
        private RequestNamingConditionsConditionComparisonStringRequestAttribute(
            bool? caseSensitive,

            bool? matchOnChildCalls,

            string? @operator,

            string requestAttribute,

            Outputs.RequestNamingConditionsConditionComparisonStringRequestAttributeSource? source,

            string? unknowns,

            string? value,

            ImmutableArray<string> values)
        {
            CaseSensitive = caseSensitive;
            MatchOnChildCalls = matchOnChildCalls;
            Operator = @operator;
            RequestAttribute = requestAttribute;
            Source = source;
            Unknowns = unknowns;
            Value = value;
            Values = values;
        }
    }
}
