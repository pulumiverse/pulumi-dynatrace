// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace.Outputs
{

    [OutputType]
    public sealed class BrowserMonitorScriptEventsEventKeystrokes
    {
        /// <summary>
        /// Credentials for this event
        /// </summary>
        public readonly Outputs.BrowserMonitorScriptEventsEventKeystrokesCredential? Credential;
        /// <summary>
        /// Indicates whether the `textValue` is encrypted (`True`) or not (`False`). Must not be specified if `Credentials` from the vault are being used
        /// </summary>
        public readonly bool? Masked;
        /// <summary>
        /// Defines whether to blur the text field when it loses focus.
        /// Set to `True` to trigger the blur the `textValue`
        /// </summary>
        public readonly bool? SimulateBlurEvent;
        /// <summary>
        /// Simulates pressing the 'Return' key after simulating other keystrokes. For example, to submit a form or trigger a login.
        /// </summary>
        public readonly bool? SimulateReturnKey;
        /// <summary>
        /// The tab on which the page should open
        /// </summary>
        public readonly Outputs.BrowserMonitorScriptEventsEventKeystrokesTarget? Target;
        /// <summary>
        /// The text to enter. Must not be specified if `Credentials` from the vault are being used
        /// </summary>
        public readonly string? Text;
        /// <summary>
        /// The validation rules for the event—helps you verify that your browser monitor loads the expected page content or page element
        /// </summary>
        public readonly Outputs.BrowserMonitorScriptEventsEventKeystrokesValidate? Validate;
        /// <summary>
        /// The wait condition for the event—defines how long Dynatrace should wait before the next action is executed
        /// </summary>
        public readonly Outputs.BrowserMonitorScriptEventsEventKeystrokesWait? Wait;

        [OutputConstructor]
        private BrowserMonitorScriptEventsEventKeystrokes(
            Outputs.BrowserMonitorScriptEventsEventKeystrokesCredential? credential,

            bool? masked,

            bool? simulateBlurEvent,

            bool? simulateReturnKey,

            Outputs.BrowserMonitorScriptEventsEventKeystrokesTarget? target,

            string? text,

            Outputs.BrowserMonitorScriptEventsEventKeystrokesValidate? validate,

            Outputs.BrowserMonitorScriptEventsEventKeystrokesWait? wait)
        {
            Credential = credential;
            Masked = masked;
            SimulateBlurEvent = simulateBlurEvent;
            SimulateReturnKey = simulateReturnKey;
            Target = target;
            Text = text;
            Validate = validate;
            Wait = wait;
        }
    }
}
