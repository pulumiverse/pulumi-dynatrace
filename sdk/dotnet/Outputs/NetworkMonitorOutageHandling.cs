// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace.Outputs
{

    [OutputType]
    public sealed class NetworkMonitorOutageHandling
    {
        /// <summary>
        /// Number of consecutive failures for all locations
        /// </summary>
        public readonly int? GlobalConsecutiveOutageCountThreshold;
        /// <summary>
        /// Generate a problem and send an alert when the monitor is unavailable at all configured locations
        /// </summary>
        public readonly bool? GlobalOutages;
        /// <summary>
        /// Number of consecutive failures
        /// </summary>
        public readonly int? LocalConsecutiveOutageCountThreshold;
        /// <summary>
        /// Number of failing locations
        /// </summary>
        public readonly int? LocalLocationOutageCountThreshold;
        /// <summary>
        /// Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location
        /// </summary>
        public readonly bool? LocalOutages;

        [OutputConstructor]
        private NetworkMonitorOutageHandling(
            int? globalConsecutiveOutageCountThreshold,

            bool? globalOutages,

            int? localConsecutiveOutageCountThreshold,

            int? localLocationOutageCountThreshold,

            bool? localOutages)
        {
            GlobalConsecutiveOutageCountThreshold = globalConsecutiveOutageCountThreshold;
            GlobalOutages = globalOutages;
            LocalConsecutiveOutageCountThreshold = localConsecutiveOutageCountThreshold;
            LocalLocationOutageCountThreshold = localLocationOutageCountThreshold;
            LocalOutages = localOutages;
        }
    }
}
