// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace.Outputs
{

    [OutputType]
    public sealed class NetworkMonitorPerformanceThresholdsThresholdsThreshold
    {
        /// <summary>
        /// Aggregation type, possible values: `AVG`, `MAX`, `MIN`
        /// </summary>
        public readonly string? Aggregation;
        /// <summary>
        /// Number of most recent non-violating request executions that closes the problem
        /// </summary>
        public readonly int? DealertingSamples;
        /// <summary>
        /// Number of request executions in analyzed sliding window (sliding window size)
        /// </summary>
        public readonly int? Samples;
        /// <summary>
        /// Specify the step's index to which a threshold applies
        /// </summary>
        public readonly int? StepIndex;
        /// <summary>
        /// Notify if monitor request takes longer than X milliseconds to execute
        /// </summary>
        public readonly double? Threshold;
        /// <summary>
        /// Number of violating request executions in analyzed sliding window
        /// </summary>
        public readonly int? ViolatingSamples;

        [OutputConstructor]
        private NetworkMonitorPerformanceThresholdsThresholdsThreshold(
            string? aggregation,

            int? dealertingSamples,

            int? samples,

            int? stepIndex,

            double? threshold,

            int? violatingSamples)
        {
            Aggregation = aggregation;
            DealertingSamples = dealertingSamples;
            Samples = samples;
            StepIndex = stepIndex;
            Threshold = threshold;
            ViolatingSamples = violatingSamples;
        }
    }
}
