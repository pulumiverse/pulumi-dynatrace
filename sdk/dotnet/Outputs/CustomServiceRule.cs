// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace.Outputs
{

    [OutputType]
    public sealed class CustomServiceRule
    {
        /// <summary>
        /// Additional annotations filter of the rule. Only classes where all listed annotations are available in the class itself or any of its superclasses are instrumented. Not applicable to PHP
        /// </summary>
        public readonly ImmutableArray<string> Annotations;
        /// <summary>
        /// The fully qualified class or interface to instrument (or a substring if matching to a string). Required for Java and .NET custom services. Not applicable to PHP
        /// </summary>
        public readonly Outputs.CustomServiceRuleClass? Class;
        /// <summary>
        /// Rule enabled/disabled
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// The PHP file containing the class or methods to instrument. Required for PHP custom service. Not applicable to Java and .NET
        /// </summary>
        public readonly Outputs.CustomServiceRuleFile? File;
        /// <summary>
        /// methods to instrument
        /// </summary>
        public readonly ImmutableArray<Outputs.CustomServiceRuleMethod> Methods;
        /// <summary>
        /// allows for configuring properties that are not explicitly supported by the current version of this provider
        /// </summary>
        public readonly string? Unknowns;

        [OutputConstructor]
        private CustomServiceRule(
            ImmutableArray<string> annotations,

            Outputs.CustomServiceRuleClass? @class,

            bool enabled,

            Outputs.CustomServiceRuleFile? file,

            ImmutableArray<Outputs.CustomServiceRuleMethod> methods,

            string? unknowns)
        {
            Annotations = annotations;
            Class = @class;
            Enabled = enabled;
            File = file;
            Methods = methods;
            Unknowns = unknowns;
        }
    }
}
