// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace.Outputs
{

    [OutputType]
    public sealed class CustomAnomaliesScope
    {
        /// <summary>
        /// A scope filter for the related custom device group name
        /// </summary>
        public readonly ImmutableArray<Outputs.CustomAnomaliesScopeCustomDeviceGroupName> CustomDeviceGroupNames;
        /// <summary>
        /// A scope filter for a monitored entity identifier
        /// </summary>
        public readonly ImmutableArray<Outputs.CustomAnomaliesScopeEntity> Entities;
        /// <summary>
        /// A scope filter for the related host group name
        /// </summary>
        public readonly ImmutableArray<Outputs.CustomAnomaliesScopeHostGroupName> HostGroupNames;
        /// <summary>
        /// A scope filter for the related host name
        /// </summary>
        public readonly ImmutableArray<Outputs.CustomAnomaliesScopeHostName> HostNames;
        /// <summary>
        /// A scope filter for a management zone identifier
        /// </summary>
        public readonly ImmutableArray<Outputs.CustomAnomaliesScopeManagementZone> ManagementZones;
        /// <summary>
        /// A scope filter for a monitored entity name
        /// </summary>
        public readonly ImmutableArray<Outputs.CustomAnomaliesScopeName> Names;
        /// <summary>
        /// A scope filter for a process group identifier
        /// </summary>
        public readonly ImmutableArray<Outputs.CustomAnomaliesScopeProcessGroupId> ProcessGroupIds;
        /// <summary>
        /// A scope filter for the related process group name
        /// </summary>
        public readonly ImmutableArray<Outputs.CustomAnomaliesScopeProcessGroupName> ProcessGroupNames;
        /// <summary>
        /// A generic scope filter
        /// </summary>
        public readonly ImmutableArray<Outputs.CustomAnomaliesScopeScope> Scopes;
        /// <summary>
        /// A scope filter for tags on entities
        /// </summary>
        public readonly ImmutableArray<Outputs.CustomAnomaliesScopeTag> Tags;

        [OutputConstructor]
        private CustomAnomaliesScope(
            ImmutableArray<Outputs.CustomAnomaliesScopeCustomDeviceGroupName> customDeviceGroupNames,

            ImmutableArray<Outputs.CustomAnomaliesScopeEntity> entities,

            ImmutableArray<Outputs.CustomAnomaliesScopeHostGroupName> hostGroupNames,

            ImmutableArray<Outputs.CustomAnomaliesScopeHostName> hostNames,

            ImmutableArray<Outputs.CustomAnomaliesScopeManagementZone> managementZones,

            ImmutableArray<Outputs.CustomAnomaliesScopeName> names,

            ImmutableArray<Outputs.CustomAnomaliesScopeProcessGroupId> processGroupIds,

            ImmutableArray<Outputs.CustomAnomaliesScopeProcessGroupName> processGroupNames,

            ImmutableArray<Outputs.CustomAnomaliesScopeScope> scopes,

            ImmutableArray<Outputs.CustomAnomaliesScopeTag> tags)
        {
            CustomDeviceGroupNames = customDeviceGroupNames;
            Entities = entities;
            HostGroupNames = hostGroupNames;
            HostNames = hostNames;
            ManagementZones = managementZones;
            Names = names;
            ProcessGroupIds = processGroupIds;
            ProcessGroupNames = processGroupNames;
            Scopes = scopes;
            Tags = tags;
        }
    }
}
