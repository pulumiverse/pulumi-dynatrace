// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace.Outputs
{

    [OutputType]
    public sealed class WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderProcessingStepsStep
    {
        /// <summary>
        /// If set to `True`: Returns the input if `patternBefore` or `patternAfter` cannot be found and the `Type` is `SUBSTRING`. Returns the input if `regularExpression` doesn't match and `Type` is `EXTRACT_BY_REGULAR_EXPRESSION`.
        /// </summary>
        public readonly bool? FallbackToInput;
        /// <summary>
        /// The pattern after the required value. It will be removed.
        /// </summary>
        public readonly string? PatternAfter;
        /// <summary>
        /// The required occurrence of **patternAfter**. Possible values are `FIRST` and `LAST`.
        /// </summary>
        public readonly string? PatternAfterSearchType;
        /// <summary>
        /// The pattern before the required value. It will be removed.
        /// </summary>
        public readonly string? PatternBefore;
        /// <summary>
        /// The required occurrence of **patternBefore**. Possible values are `FIRST` and `LAST`.
        /// </summary>
        public readonly string? PatternBeforeSearchType;
        /// <summary>
        /// The pattern to be replaced. 
        /// 
        ///  Only applicable if the `Type` is `REPLACE_WITH_PATTERN`.
        /// </summary>
        public readonly string? PatternToReplace;
        /// <summary>
        /// A regular expression for the string to be extracted or replaced. Only applicable if the `Type` is `EXTRACT_BY_REGULAR_EXPRESSION` or `REPLACE_WITH_REGULAR_EXPRESSION`.
        /// </summary>
        public readonly string? RegularExpression;
        /// <summary>
        /// Replacement for the original value
        /// </summary>
        public readonly string? Replacement;
        /// <summary>
        /// An action to be taken by the processing:
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderProcessingStepsStep(
            bool? fallbackToInput,

            string? patternAfter,

            string? patternAfterSearchType,

            string? patternBefore,

            string? patternBeforeSearchType,

            string? patternToReplace,

            string? regularExpression,

            string? replacement,

            string type)
        {
            FallbackToInput = fallbackToInput;
            PatternAfter = patternAfter;
            PatternAfterSearchType = patternAfterSearchType;
            PatternBefore = patternBefore;
            PatternBeforeSearchType = patternBeforeSearchType;
            PatternToReplace = patternToReplace;
            RegularExpression = regularExpression;
            Replacement = replacement;
            Type = type;
        }
    }
}
