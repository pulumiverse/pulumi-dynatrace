// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace.Outputs
{

    [OutputType]
    public sealed class AutomationSchedulingRuleRecurrence
    {
        /// <summary>
        /// The recurrence start. Example: `2017-07-04` represents July 4th 2017
        /// </summary>
        public readonly string Datestart;
        /// <summary>
        /// Restricts the recurrence to specific days within a month. `1`, `2`, `3`, ... refers to the first, second, third day in the month. You can also specify negative values to refer to values relative to the last day. `-1` refers to the last day, `-2` refers to the second to the last day, ...
        /// </summary>
        public readonly ImmutableArray<int> DaysInMonths;
        /// <summary>
        /// Restricts the recurrence to specific days within a year. `1`, `2`, `3`, ... refers to the first, second, third day of the year. You can also specify negative values to refer to values relative to the last day. `-1` refers to the last day, `-2` refers to the second to the last day, ...
        /// </summary>
        public readonly ImmutableArray<int> DaysInYears;
        /// <summary>
        /// Restricts the recurrence to specific days relative to Easter Sunday. `0` will yield the Easter Sunday itself
        /// </summary>
        public readonly ImmutableArray<int> Easters;
        /// <summary>
        /// Possible values are `YEARLY`, `MONTHLY`, `WEEKLY`, `DAILY`, `HOURLY`, `MINUTELY` and `SECONDLY`. Example: `Frequency` = `DAILY` and `Interval` = `2` schedules for every other day
        /// </summary>
        public readonly string Frequency;
        /// <summary>
        /// The interval between each iteration. Default: 1. Example: `Frequency` = `DAILY` and `Interval` = `2` schedules for every other day
        /// </summary>
        public readonly int? Interval;
        /// <summary>
        /// Restricts the recurrence to specific months. `1` for `January`, `2` for `February`, ..., `12` for `December`
        /// </summary>
        public readonly ImmutableArray<int> Months;
        /// <summary>
        /// Restricts the recurrence to specific week days. Possible values are `MO`, `TU`, `WE`, `TH`, `FR`, `SA` and `SU`
        /// </summary>
        public readonly ImmutableArray<string> Weekdays;
        /// <summary>
        /// Restricts the recurrence to specific weeks within a year. `1`, `2`, `3`, ... refers to the first, second, third week of the year. You can also specify negative values to refer to values relative to the last week. `-1` refers to the last week, `-2` refers to the second to the last week, ...
        /// </summary>
        public readonly ImmutableArray<int> Weeks;
        /// <summary>
        /// Possible values are `WORKING` (Work days), `HOLIDAYS` (Holidays) and `OFF` (Weekends + Holidays)
        /// </summary>
        public readonly string Workdays;

        [OutputConstructor]
        private AutomationSchedulingRuleRecurrence(
            string datestart,

            ImmutableArray<int> daysInMonths,

            ImmutableArray<int> daysInYears,

            ImmutableArray<int> easters,

            string frequency,

            int? interval,

            ImmutableArray<int> months,

            ImmutableArray<string> weekdays,

            ImmutableArray<int> weeks,

            string workdays)
        {
            Datestart = datestart;
            DaysInMonths = daysInMonths;
            DaysInYears = daysInYears;
            Easters = easters;
            Frequency = frequency;
            Interval = interval;
            Months = months;
            Weekdays = weekdays;
            Weeks = weeks;
            Workdays = workdays;
        }
    }
}
