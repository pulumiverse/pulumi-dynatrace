// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace.Outputs
{

    [OutputType]
    public sealed class BrowserMonitorAnomalyDetectionOutageHandling
    {
        /// <summary>
        /// (Field has overlap with `dynatrace.BrowserMonitorOutage` and `dynatrace.HttpMonitorOutage`) When enabled (`true`), generate a problem and send an alert when the monitor is unavailable at all configured locations
        /// </summary>
        public readonly bool? GlobalOutage;
        /// <summary>
        /// (Field has overlap with `dynatrace.BrowserMonitorOutage` and `dynatrace.HttpMonitorOutage`) Global outage handling configuration.
        /// </summary>
        public readonly ImmutableArray<Outputs.BrowserMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicy> GlobalOutagePolicies;
        /// <summary>
        /// (Field has overlap with `dynatrace.BrowserMonitorOutage` and `dynatrace.HttpMonitorOutage`) When enabled (`true`), generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location
        /// </summary>
        public readonly bool? LocalOutage;
        /// <summary>
        /// (Field has overlap with `dynatrace.BrowserMonitorOutage` and `dynatrace.HttpMonitorOutage`) Local outage handling configuration. 
        /// 
        ///  Alert if **affectedLocations** of locations are unable to access the web application **consecutiveRuns** times consecutively
        /// </summary>
        public readonly ImmutableArray<Outputs.BrowserMonitorAnomalyDetectionOutageHandlingLocalOutagePolicy> LocalOutagePolicies;
        /// <summary>
        /// (Field has overlap with `dynatrace.BrowserMonitorOutage` and `dynatrace.HttpMonitorOutage`) Schedule retry if browser monitor execution results in a fail. For HTTP monitors this property is ignored
        /// </summary>
        public readonly bool? RetryOnError;

        [OutputConstructor]
        private BrowserMonitorAnomalyDetectionOutageHandling(
            bool? globalOutage,

            ImmutableArray<Outputs.BrowserMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicy> globalOutagePolicies,

            bool? localOutage,

            ImmutableArray<Outputs.BrowserMonitorAnomalyDetectionOutageHandlingLocalOutagePolicy> localOutagePolicies,

            bool? retryOnError)
        {
            GlobalOutage = globalOutage;
            GlobalOutagePolicies = globalOutagePolicies;
            LocalOutage = localOutage;
            LocalOutagePolicies = localOutagePolicies;
            RetryOnError = retryOnError;
        }
    }
}
