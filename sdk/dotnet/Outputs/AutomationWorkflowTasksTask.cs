// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace.Outputs
{

    [OutputType]
    public sealed class AutomationWorkflowTasksTask
    {
        /// <summary>
        /// Currently known and supported values are `dynatrace.automations:http-function`, `dynatrace.automations:run-javascript` and `dynatrace.automations:execute-dql-query`
        /// </summary>
        public readonly string Action;
        /// <summary>
        /// Specifies whether a task should be skipped as a no operation or not
        /// </summary>
        public readonly bool? Active;
        /// <summary>
        /// Required if `with_items` is specified. By default loops execute sequentially with concurrency set to 1. You can increase how often it runs in parallel
        /// </summary>
        public readonly string? Concurrency;
        /// <summary>
        /// Conditions that have to be met in order to execute that task
        /// </summary>
        public readonly Outputs.AutomationWorkflowTasksTaskConditions? Conditions;
        /// <summary>
        /// A description for this task
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Parameters and values for this task as JSON code. Contents depend on the kind of task - determined by the attribute `action`
        /// </summary>
        public readonly string? Input;
        /// <summary>
        /// The name of the task
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Layouting information about the task tile when visualized. If not specified Dynatrace will position the task tiles automatically
        /// </summary>
        public readonly Outputs.AutomationWorkflowTasksTaskPosition? Position;
        /// <summary>
        /// Configure whether to automatically rerun the task on failure. If not specified no retries will be attempted
        /// </summary>
        public readonly Outputs.AutomationWorkflowTasksTaskRetry? Retry;
        /// <summary>
        /// Specifies a default task timeout in seconds. 15 * 60 (15min) is used when not set. Minimum 1. Maximum 604800
        /// </summary>
        public readonly string? Timeout;
        /// <summary>
        /// Specifies a default task wait before in seconds. 0 is used when not set
        /// </summary>
        public readonly string? WaitBefore;
        /// <summary>
        /// Iterates over items in a list, allowing actions to be executed repeatedly. Example: Specifying `item in [1, 2, 3]` here will execute the task three times for the numbers 1, 2 and 3 - with the current number available for scripting using the expression `{{ _.item }}`
        /// </summary>
        public readonly string? WithItems;

        [OutputConstructor]
        private AutomationWorkflowTasksTask(
            string action,

            bool? active,

            string? concurrency,

            Outputs.AutomationWorkflowTasksTaskConditions? conditions,

            string? description,

            string? input,

            string name,

            Outputs.AutomationWorkflowTasksTaskPosition? position,

            Outputs.AutomationWorkflowTasksTaskRetry? retry,

            string? timeout,

            string? waitBefore,

            string? withItems)
        {
            Action = action;
            Active = active;
            Concurrency = concurrency;
            Conditions = conditions;
            Description = description;
            Input = input;
            Name = name;
            Position = position;
            Retry = retry;
            Timeout = timeout;
            WaitBefore = waitBefore;
            WithItems = withItems;
        }
    }
}
