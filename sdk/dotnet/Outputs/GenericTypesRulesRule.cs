// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace.Outputs
{

    [OutputType]
    public sealed class GenericTypesRulesRule
    {
        /// <summary>
        /// All attribute extraction rules will be applied and found attributes will be added to the extracted type.
        /// </summary>
        public readonly Outputs.GenericTypesRulesRuleAttributes? Attributes;
        /// <summary>
        /// Define a pattern which is used to set the icon attribute of the entity. The extracted values must reference barista icon ids. You may define placeholders referencing data source dimensions.
        /// </summary>
        public readonly string? IconPattern;
        /// <summary>
        /// ID patterns are comprised of static text and placeholders referring to dimensions in the ingest data. An ID pattern **must** contain at least one placeholder to ensure that different entities will be created.. Take care that the pattern results in the same ID for the same entity. For example, using timestamp or counter-like dimensions as part of the ID would lead to the creation of new entities for each ingest data and is strongly discouraged!
        /// </summary>
        public readonly string IdPattern;
        /// <summary>
        /// Define a pattern which is used to set the name attribute of the entity. You may define placeholders referencing data source dimensions.
        /// </summary>
        public readonly string? InstanceNamePattern;
        /// <summary>
        /// In addition to the dimensions already referred to in the ID pattern, you may specify additional dimensions which must be present in order to evaluate this rule.
        /// </summary>
        public readonly Outputs.GenericTypesRulesRuleRequiredDimensions? RequiredDimensions;
        /// <summary>
        /// If you want to extract multiple entities of the same type from a single ingest line you need to define multiple rules with different roles.
        /// </summary>
        public readonly string? Role;
        /// <summary>
        /// Specify all sources which should be evaluated for this rule. A rule is evaluated if any of the specified source filters match.
        /// </summary>
        public readonly Outputs.GenericTypesRulesRuleSources Sources;

        [OutputConstructor]
        private GenericTypesRulesRule(
            Outputs.GenericTypesRulesRuleAttributes? attributes,

            string? iconPattern,

            string idPattern,

            string? instanceNamePattern,

            Outputs.GenericTypesRulesRuleRequiredDimensions? requiredDimensions,

            string? role,

            Outputs.GenericTypesRulesRuleSources sources)
        {
            Attributes = attributes;
            IconPattern = iconPattern;
            IdPattern = idPattern;
            InstanceNamePattern = instanceNamePattern;
            RequiredDimensions = requiredDimensions;
            Role = role;
            Sources = sources;
        }
    }
}
