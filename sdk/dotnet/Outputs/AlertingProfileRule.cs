// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace.Outputs
{

    [OutputType]
    public sealed class AlertingProfileRule
    {
        /// <summary>
        /// Send a notification if a problem remains open longer than *X* minutes
        /// </summary>
        public readonly int DelayInMinutes;
        /// <summary>
        /// The severity level to trigger the alert. Possible values are `AVAILABILITY`,	`CUSTOM_ALERT`,	`ERROR`,`MONITORING_UNAVAILABLE`,`PERFORMANCE` and `RESOURCE_CONTENTION`.
        /// </summary>
        public readonly string SeverityLevel;
        /// <summary>
        /// Configuration of the tag filtering of the alerting profile
        /// </summary>
        public readonly ImmutableArray<Outputs.AlertingProfileRuleTagFilter> TagFilters;
        /// <summary>
        /// allows for configuring properties that are not explicitly supported by the current version of this provider
        /// </summary>
        public readonly string? Unknowns;

        [OutputConstructor]
        private AlertingProfileRule(
            int delayInMinutes,

            string severityLevel,

            ImmutableArray<Outputs.AlertingProfileRuleTagFilter> tagFilters,

            string? unknowns)
        {
            DelayInMinutes = delayInMinutes;
            SeverityLevel = severityLevel;
            TagFilters = tagFilters;
            Unknowns = unknowns;
        }
    }
}
