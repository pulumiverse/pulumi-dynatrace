// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace.Outputs
{

    [OutputType]
    public sealed class DashboardTile
    {
        /// <summary>
        /// The list of Dynatrace entities, assigned to the tile
        /// </summary>
        public readonly ImmutableArray<string> AssignedEntities;
        /// <summary>
        /// Auto Refresh is disabled (`True`)
        /// </summary>
        public readonly bool? AutoRefreshDisabled;
        /// <summary>
        /// the position and size of a tile
        /// </summary>
        public readonly Outputs.DashboardTileBounds? Bounds;
        public readonly bool? ChartVisible;
        /// <summary>
        /// The tile is configured and ready to use (`True`) or just placed on the dashboard (`False`)
        /// </summary>
        public readonly bool? Configured;
        /// <summary>
        /// The name of the tile, set by user
        /// </summary>
        public readonly string? CustomName;
        /// <summary>
        /// Include (`false') or exclude (`True`) maintenance windows from availability calculations
        /// </summary>
        public readonly bool? ExcludeMaintenanceWindows;
        /// <summary>
        /// is filter applied to a tile. It overrides dashboard's filter
        /// </summary>
        public readonly Outputs.DashboardTileFilter? Filter;
        /// <summary>
        /// the position and size of a tile
        /// </summary>
        public readonly Outputs.DashboardTileFilterConfig? FilterConfig;
        /// <summary>
        /// The limit of the results, if not set will use the default value of the system
        /// </summary>
        public readonly int? Limit;
        /// <summary>
        /// The markdown-formatted content of the tile
        /// </summary>
        public readonly string? Markdown;
        /// <summary>
        /// The metric assigned to the tile
        /// </summary>
        public readonly string? Metric;
        /// <summary>
        /// the name of the tile
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The size of the tile name. Possible values are `Small`, `Medium` and `Large`.
        /// </summary>
        public readonly string? NameSize;
        /// <summary>
        /// A [user session query](https://www.dynatrace.com/support/help/shortlink/usql-info) executed by the tile
        /// </summary>
        public readonly string? Query;
        /// <summary>
        /// the type of the tile. Must be either `APPLICATION_WORLDMAP`, `RESOURCES`, `THIRD_PARTY_MOST_ACTIVE`, `UEM_CONVERSIONS_PER_GOAL`, `PROCESS_GROUPS_ONE` or `HOST` .
        /// </summary>
        public readonly string TileType;
        /// <summary>
        /// The comparison timeframe of the query. If specified, you additionally get the results of the same query with the specified time shift
        /// </summary>
        public readonly string? TimeFrameShift;
        /// <summary>
        /// The attribute `Type` exists for backwards compatibilty. Usage is discouraged. You should use `Visualization` instead.
        /// </summary>
        public readonly string? Type;
        /// <summary>
        /// allows for configuring properties that are not explicitly supported by the current version of this provider
        /// </summary>
        public readonly string? Unknowns;
        /// <summary>
        /// The visualization of the tile. Possible values are: `COLUMN_CHART`, `FUNNEL`, `LINE_CHART`, `PIE_CHART`, `SINGLE_VALUE`, `TABLE`
        /// </summary>
        public readonly string? Visualization;
        /// <summary>
        /// Configuration of a User session query visualization tile
        /// </summary>
        public readonly Outputs.DashboardTileVisualizationConfig? VisualizationConfig;

        [OutputConstructor]
        private DashboardTile(
            ImmutableArray<string> assignedEntities,

            bool? autoRefreshDisabled,

            Outputs.DashboardTileBounds? bounds,

            bool? chartVisible,

            bool? configured,

            string? customName,

            bool? excludeMaintenanceWindows,

            Outputs.DashboardTileFilter? filter,

            Outputs.DashboardTileFilterConfig? filterConfig,

            int? limit,

            string? markdown,

            string? metric,

            string name,

            string? nameSize,

            string? query,

            string tileType,

            string? timeFrameShift,

            string? type,

            string? unknowns,

            string? visualization,

            Outputs.DashboardTileVisualizationConfig? visualizationConfig)
        {
            AssignedEntities = assignedEntities;
            AutoRefreshDisabled = autoRefreshDisabled;
            Bounds = bounds;
            ChartVisible = chartVisible;
            Configured = configured;
            CustomName = customName;
            ExcludeMaintenanceWindows = excludeMaintenanceWindows;
            Filter = filter;
            FilterConfig = filterConfig;
            Limit = limit;
            Markdown = markdown;
            Metric = metric;
            Name = name;
            NameSize = nameSize;
            Query = query;
            TileType = tileType;
            TimeFrameShift = timeFrameShift;
            Type = type;
            Unknowns = unknowns;
            Visualization = visualization;
            VisualizationConfig = visualizationConfig;
        }
    }
}
