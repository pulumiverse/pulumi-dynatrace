// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace.Outputs
{

    [OutputType]
    public sealed class AlertingRulesRule
    {
        /// <summary>
        /// Send a notification if a problem remains open longer than *X* minutes
        /// </summary>
        public readonly int DelayInMinutes;
        /// <summary>
        /// The filtering mode:  * `INCLUDE_ANY`: The rule applies to monitored entities that have at least one of the specified tags. You can specify up to 100 tags.  * `INCLUDE_ALL`: The rule applies to monitored entities that have **all** of the specified tags. You can specify up to 10 tags.  * `NONE`: The rule applies to all monitored entities
        /// </summary>
        public readonly string IncludeMode;
        /// <summary>
        /// The severity level to trigger the alert. Possible values are `AVAILABILITY`,	`CUSTOM_ALERT`,	`ERRORS`,`MONITORING_UNAVAILABLE`,`PERFORMANCE` and `RESOURCE_CONTENTION`.
        /// </summary>
        public readonly string SeverityLevel;
        /// <summary>
        /// Entities which contain any/all of the configured tags will match this alerting profile. It is recommended to use manual tags.
        /// </summary>
        public readonly ImmutableArray<string> Tags;

        [OutputConstructor]
        private AlertingRulesRule(
            int delayInMinutes,

            string includeMode,

            string severityLevel,

            ImmutableArray<string> tags)
        {
            DelayInMinutes = delayInMinutes;
            IncludeMode = includeMode;
            SeverityLevel = severityLevel;
            Tags = tags;
        }
    }
}
