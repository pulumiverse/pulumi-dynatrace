// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace.Outputs
{

    [OutputType]
    public sealed class OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessor
    {
        /// <summary>
        /// Azure log forwarding processor attributes
        /// </summary>
        public readonly Outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorAzureLogForwarding? AzureLogForwarding;
        /// <summary>
        /// Bizevent extraction processor attributes
        /// </summary>
        public readonly Outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorBizevent? Bizevent;
        /// <summary>
        /// Bucket assignment processor attributes
        /// </summary>
        public readonly Outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorBucketAssignment? BucketAssignment;
        /// <summary>
        /// Cost allocation processor attributes
        /// </summary>
        public readonly Outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorCostAllocation? CostAllocation;
        /// <summary>
        /// Counter metric processor attributes
        /// </summary>
        public readonly Outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorCounterMetric? CounterMetric;
        /// <summary>
        /// Davis event extraction processor attributes
        /// </summary>
        public readonly Outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorDavis? Davis;
        /// <summary>
        /// no documentation available
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// DQL processor attributes
        /// </summary>
        public readonly Outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorDql? Dql;
        /// <summary>
        /// This setting is enabled (`True`) or disabled (`False`)
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// Fields add processor attributes
        /// </summary>
        public readonly Outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorFieldsAdd? FieldsAdd;
        /// <summary>
        /// Fields remove processor attributes
        /// </summary>
        public readonly Outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorFieldsRemove? FieldsRemove;
        /// <summary>
        /// Fields rename processor attributes
        /// </summary>
        public readonly Outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorFieldsRename? FieldsRename;
        /// <summary>
        /// Histogram metric processor attributes
        /// </summary>
        public readonly Outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorHistogramMetric? HistogramMetric;
        /// <summary>
        /// Processor identifier
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// [See our documentation](https://dt-url.net/bp234rv)
        /// </summary>
        public readonly string? Matcher;
        /// <summary>
        /// Product allocation processor attributes
        /// </summary>
        public readonly Outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorProductAllocation? ProductAllocation;
        /// <summary>
        /// Sample data
        /// </summary>
        public readonly string? SampleData;
        /// <summary>
        /// Sampling-aware counter metric processor attributes
        /// </summary>
        public readonly Outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetric? SamplingAwareCounterMetric;
        /// <summary>
        /// Sampling aware value metric processor attributes
        /// </summary>
        public readonly Outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetric? SamplingAwareValueMetric;
        /// <summary>
        /// Security context processor attributes
        /// </summary>
        public readonly Outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorSecurityContext? SecurityContext;
        /// <summary>
        /// Security event extraction processor attributes
        /// </summary>
        public readonly Outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorSecurityEvent? SecurityEvent;
        /// <summary>
        /// Technology processor attributes
        /// </summary>
        public readonly Outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorTechnology? Technology;
        /// <summary>
        /// Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Value metric processor attributes
        /// </summary>
        public readonly Outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorValueMetric? ValueMetric;

        [OutputConstructor]
        private OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessor(
            Outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorAzureLogForwarding? azureLogForwarding,

            Outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorBizevent? bizevent,

            Outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorBucketAssignment? bucketAssignment,

            Outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorCostAllocation? costAllocation,

            Outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorCounterMetric? counterMetric,

            Outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorDavis? davis,

            string description,

            Outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorDql? dql,

            bool enabled,

            Outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorFieldsAdd? fieldsAdd,

            Outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorFieldsRemove? fieldsRemove,

            Outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorFieldsRename? fieldsRename,

            Outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorHistogramMetric? histogramMetric,

            string id,

            string? matcher,

            Outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorProductAllocation? productAllocation,

            string? sampleData,

            Outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetric? samplingAwareCounterMetric,

            Outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetric? samplingAwareValueMetric,

            Outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorSecurityContext? securityContext,

            Outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorSecurityEvent? securityEvent,

            Outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorTechnology? technology,

            string type,

            Outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorValueMetric? valueMetric)
        {
            AzureLogForwarding = azureLogForwarding;
            Bizevent = bizevent;
            BucketAssignment = bucketAssignment;
            CostAllocation = costAllocation;
            CounterMetric = counterMetric;
            Davis = davis;
            Description = description;
            Dql = dql;
            Enabled = enabled;
            FieldsAdd = fieldsAdd;
            FieldsRemove = fieldsRemove;
            FieldsRename = fieldsRename;
            HistogramMetric = histogramMetric;
            Id = id;
            Matcher = matcher;
            ProductAllocation = productAllocation;
            SampleData = sampleData;
            SamplingAwareCounterMetric = samplingAwareCounterMetric;
            SamplingAwareValueMetric = samplingAwareValueMetric;
            SecurityContext = securityContext;
            SecurityEvent = securityEvent;
            Technology = technology;
            Type = type;
            ValueMetric = valueMetric;
        }
    }
}
