// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    /// <summary>
    /// &gt; **Dynatrace SaaS only**
    /// 
    /// &gt; To utilize this resource, please define the environment variables `DT_CLIENT_ID`, `DT_CLIENT_SECRET`, `DT_ACCOUNT_ID` with an OAuth client including the following permissions: **Allow IAM policy configuration for environments** (`iam-policies-management`) and **View environments** (`account-env-read`).
    /// 
    /// &gt; This resource is excluded by default in the export utility, please explicitly specify the resource to retrieve existing configuration.
    /// 
    /// ## Dynatrace Documentation
    /// 
    /// - Dynatrace IAM Group Permissions - https://docs.dynatrace.com/docs/manage/identity-access-management/permission-management/manage-user-permissions-policies
    /// 
    /// - Settings API - https://www.dynatrace.com/support/help/how-to-use-dynatrace/user-management-and-sso/manage-groups-and-permissions/iam/iam-getting-started
    /// </summary>
    [DynatraceResourceType("dynatrace:index/iamPolicyBindings:IamPolicyBindings")]
    public partial class IamPolicyBindings : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The UUID of the account (`urn:dtaccount:&lt;account-uuid&gt;`). The attribute `Policies` must contain ONLY policies defined for that account. The prefix `urn:dtaccount:` MUST be omitted here.
        /// </summary>
        [Output("account")]
        public Output<string?> Account { get; private set; } = null!;

        /// <summary>
        /// The ID of the environment (https://\n\n.live.dynatrace.com). The attribute `Policies` must contain ONLY policies defined for that environment.
        /// </summary>
        [Output("environment")]
        public Output<string?> Environment { get; private set; } = null!;

        /// <summary>
        /// The name of the policy
        /// </summary>
        [Output("group")]
        public Output<string> Group { get; private set; } = null!;

        /// <summary>
        /// A list of IDs referring to policies bound to that group. It's not possible to mix policies here that are defined for different scopes (different accounts or environments) than specified via attributes `Account` or `Environment`.
        /// </summary>
        [Output("policies")]
        public Output<ImmutableArray<string>> Policies { get; private set; } = null!;


        /// <summary>
        /// Create a IamPolicyBindings resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IamPolicyBindings(string name, IamPolicyBindingsArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/iamPolicyBindings:IamPolicyBindings", name, args ?? new IamPolicyBindingsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IamPolicyBindings(string name, Input<string> id, IamPolicyBindingsState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/iamPolicyBindings:IamPolicyBindings", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IamPolicyBindings resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IamPolicyBindings Get(string name, Input<string> id, IamPolicyBindingsState? state = null, CustomResourceOptions? options = null)
        {
            return new IamPolicyBindings(name, id, state, options);
        }
    }

    public sealed class IamPolicyBindingsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The UUID of the account (`urn:dtaccount:&lt;account-uuid&gt;`). The attribute `Policies` must contain ONLY policies defined for that account. The prefix `urn:dtaccount:` MUST be omitted here.
        /// </summary>
        [Input("account")]
        public Input<string>? Account { get; set; }

        /// <summary>
        /// The ID of the environment (https://\n\n.live.dynatrace.com). The attribute `Policies` must contain ONLY policies defined for that environment.
        /// </summary>
        [Input("environment")]
        public Input<string>? Environment { get; set; }

        /// <summary>
        /// The name of the policy
        /// </summary>
        [Input("group", required: true)]
        public Input<string> Group { get; set; } = null!;

        [Input("policies", required: true)]
        private InputList<string>? _policies;

        /// <summary>
        /// A list of IDs referring to policies bound to that group. It's not possible to mix policies here that are defined for different scopes (different accounts or environments) than specified via attributes `Account` or `Environment`.
        /// </summary>
        public InputList<string> Policies
        {
            get => _policies ?? (_policies = new InputList<string>());
            set => _policies = value;
        }

        public IamPolicyBindingsArgs()
        {
        }
        public static new IamPolicyBindingsArgs Empty => new IamPolicyBindingsArgs();
    }

    public sealed class IamPolicyBindingsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The UUID of the account (`urn:dtaccount:&lt;account-uuid&gt;`). The attribute `Policies` must contain ONLY policies defined for that account. The prefix `urn:dtaccount:` MUST be omitted here.
        /// </summary>
        [Input("account")]
        public Input<string>? Account { get; set; }

        /// <summary>
        /// The ID of the environment (https://\n\n.live.dynatrace.com). The attribute `Policies` must contain ONLY policies defined for that environment.
        /// </summary>
        [Input("environment")]
        public Input<string>? Environment { get; set; }

        /// <summary>
        /// The name of the policy
        /// </summary>
        [Input("group")]
        public Input<string>? Group { get; set; }

        [Input("policies")]
        private InputList<string>? _policies;

        /// <summary>
        /// A list of IDs referring to policies bound to that group. It's not possible to mix policies here that are defined for different scopes (different accounts or environments) than specified via attributes `Account` or `Environment`.
        /// </summary>
        public InputList<string> Policies
        {
            get => _policies ?? (_policies = new InputList<string>());
            set => _policies = value;
        }

        public IamPolicyBindingsState()
        {
        }
        public static new IamPolicyBindingsState Empty => new IamPolicyBindingsState();
    }
}
