// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    /// <summary>
    /// &gt; This resource requires the API token scopes **Read settings** (`settings.read`) and **Write settings** (`settings.write`)
    /// 
    /// ## Dynatrace Documentation
    /// 
    /// - Services - https://docs.dynatrace.com/docs/observe/applications-and-microservices/services
    /// 
    /// - Settings API - https://www.dynatrace.com/support/help/dynatrace-api/environment-api/settings (schemaId: `builtin:service-detection-rules`)
    /// 
    /// ## Resource Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Dynatrace = Pulumiverse.Dynatrace;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var _name_ = new Dynatrace.ServiceDetectionRules("#name#", new()
    ///     {
    ///         Enabled = false,
    ///         Rule = new Dynatrace.Inputs.ServiceDetectionRulesRuleArgs
    ///         {
    ///             AdditionalRequiredAttributes = new[]
    ///             {
    ///                 "attribute-1",
    ///                 "attribute-2",
    ///             },
    ///             Condition = "matchesValue(k8s.cluster.name,\"terraform\")",
    ///             Description = "Example description",
    ///             RuleName = "#name#",
    ///             ServiceNameTemplate = "{k8s.workload.name}",
    ///         },
    ///         Scope = "environment",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [DynatraceResourceType("dynatrace:index/serviceDetectionRules:ServiceDetectionRules")]
    public partial class ServiceDetectionRules : global::Pulumi.CustomResource
    {
        /// <summary>
        /// This setting is enabled (`True`) or disabled (`False`)
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        /// </summary>
        [Output("insertAfter")]
        public Output<string> InsertAfter { get; private set; } = null!;

        /// <summary>
        /// Rule
        /// </summary>
        [Output("rule")]
        public Output<Outputs.ServiceDetectionRulesRule> Rule { get; private set; } = null!;

        /// <summary>
        /// The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
        /// </summary>
        [Output("scope")]
        public Output<string?> Scope { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceDetectionRules resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceDetectionRules(string name, ServiceDetectionRulesArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/serviceDetectionRules:ServiceDetectionRules", name, args ?? new ServiceDetectionRulesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServiceDetectionRules(string name, Input<string> id, ServiceDetectionRulesState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/serviceDetectionRules:ServiceDetectionRules", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceDetectionRules resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceDetectionRules Get(string name, Input<string> id, ServiceDetectionRulesState? state = null, CustomResourceOptions? options = null)
        {
            return new ServiceDetectionRules(name, id, state, options);
        }
    }

    public sealed class ServiceDetectionRulesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This setting is enabled (`True`) or disabled (`False`)
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        /// </summary>
        [Input("insertAfter")]
        public Input<string>? InsertAfter { get; set; }

        /// <summary>
        /// Rule
        /// </summary>
        [Input("rule", required: true)]
        public Input<Inputs.ServiceDetectionRulesRuleArgs> Rule { get; set; } = null!;

        /// <summary>
        /// The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        public ServiceDetectionRulesArgs()
        {
        }
        public static new ServiceDetectionRulesArgs Empty => new ServiceDetectionRulesArgs();
    }

    public sealed class ServiceDetectionRulesState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This setting is enabled (`True`) or disabled (`False`)
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        /// </summary>
        [Input("insertAfter")]
        public Input<string>? InsertAfter { get; set; }

        /// <summary>
        /// Rule
        /// </summary>
        [Input("rule")]
        public Input<Inputs.ServiceDetectionRulesRuleGetArgs>? Rule { get; set; }

        /// <summary>
        /// The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        public ServiceDetectionRulesState()
        {
        }
        public static new ServiceDetectionRulesState Empty => new ServiceDetectionRulesState();
    }
}
