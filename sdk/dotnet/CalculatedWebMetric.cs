// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/calculatedWebMetric:CalculatedWebMetric")]
    public partial class CalculatedWebMetric : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Dynatrace entity ID of the application to which the metric belongs.
        /// </summary>
        [Output("appIdentifier")]
        public Output<string> AppIdentifier { get; private set; } = null!;

        /// <summary>
        /// Descriptor of a calculated web metric.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Parameters of a definition of a calculated web metric.
        /// </summary>
        [Output("dimensions")]
        public Output<ImmutableArray<Outputs.CalculatedWebMetricDimension>> Dimensions { get; private set; } = null!;

        /// <summary>
        /// The metric is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// The definition of a calculated web metric.
        /// </summary>
        [Output("metricDefinition")]
        public Output<Outputs.CalculatedWebMetricMetricDefinition> MetricDefinition { get; private set; } = null!;

        /// <summary>
        /// The unique key of the calculated web metric.
        /// </summary>
        [Output("metricKey")]
        public Output<string> MetricKey { get; private set; } = null!;

        /// <summary>
        /// The displayed name of the metric.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Parameters of a definition of a calculated web metric.
        /// </summary>
        [Output("userActionFilter")]
        public Output<Outputs.CalculatedWebMetricUserActionFilter?> UserActionFilter { get; private set; } = null!;


        /// <summary>
        /// Create a CalculatedWebMetric resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CalculatedWebMetric(string name, CalculatedWebMetricArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/calculatedWebMetric:CalculatedWebMetric", name, args ?? new CalculatedWebMetricArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CalculatedWebMetric(string name, Input<string> id, CalculatedWebMetricState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/calculatedWebMetric:CalculatedWebMetric", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CalculatedWebMetric resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CalculatedWebMetric Get(string name, Input<string> id, CalculatedWebMetricState? state = null, CustomResourceOptions? options = null)
        {
            return new CalculatedWebMetric(name, id, state, options);
        }
    }

    public sealed class CalculatedWebMetricArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Dynatrace entity ID of the application to which the metric belongs.
        /// </summary>
        [Input("appIdentifier", required: true)]
        public Input<string> AppIdentifier { get; set; } = null!;

        /// <summary>
        /// Descriptor of a calculated web metric.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("dimensions")]
        private InputList<Inputs.CalculatedWebMetricDimensionArgs>? _dimensions;

        /// <summary>
        /// Parameters of a definition of a calculated web metric.
        /// </summary>
        public InputList<Inputs.CalculatedWebMetricDimensionArgs> Dimensions
        {
            get => _dimensions ?? (_dimensions = new InputList<Inputs.CalculatedWebMetricDimensionArgs>());
            set => _dimensions = value;
        }

        /// <summary>
        /// The metric is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// The definition of a calculated web metric.
        /// </summary>
        [Input("metricDefinition", required: true)]
        public Input<Inputs.CalculatedWebMetricMetricDefinitionArgs> MetricDefinition { get; set; } = null!;

        /// <summary>
        /// The unique key of the calculated web metric.
        /// </summary>
        [Input("metricKey", required: true)]
        public Input<string> MetricKey { get; set; } = null!;

        /// <summary>
        /// The displayed name of the metric.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Parameters of a definition of a calculated web metric.
        /// </summary>
        [Input("userActionFilter")]
        public Input<Inputs.CalculatedWebMetricUserActionFilterArgs>? UserActionFilter { get; set; }

        public CalculatedWebMetricArgs()
        {
        }
        public static new CalculatedWebMetricArgs Empty => new CalculatedWebMetricArgs();
    }

    public sealed class CalculatedWebMetricState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Dynatrace entity ID of the application to which the metric belongs.
        /// </summary>
        [Input("appIdentifier")]
        public Input<string>? AppIdentifier { get; set; }

        /// <summary>
        /// Descriptor of a calculated web metric.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("dimensions")]
        private InputList<Inputs.CalculatedWebMetricDimensionGetArgs>? _dimensions;

        /// <summary>
        /// Parameters of a definition of a calculated web metric.
        /// </summary>
        public InputList<Inputs.CalculatedWebMetricDimensionGetArgs> Dimensions
        {
            get => _dimensions ?? (_dimensions = new InputList<Inputs.CalculatedWebMetricDimensionGetArgs>());
            set => _dimensions = value;
        }

        /// <summary>
        /// The metric is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The definition of a calculated web metric.
        /// </summary>
        [Input("metricDefinition")]
        public Input<Inputs.CalculatedWebMetricMetricDefinitionGetArgs>? MetricDefinition { get; set; }

        /// <summary>
        /// The unique key of the calculated web metric.
        /// </summary>
        [Input("metricKey")]
        public Input<string>? MetricKey { get; set; }

        /// <summary>
        /// The displayed name of the metric.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Parameters of a definition of a calculated web metric.
        /// </summary>
        [Input("userActionFilter")]
        public Input<Inputs.CalculatedWebMetricUserActionFilterGetArgs>? UserActionFilter { get; set; }

        public CalculatedWebMetricState()
        {
        }
        public static new CalculatedWebMetricState Empty => new CalculatedWebMetricState();
    }
}
