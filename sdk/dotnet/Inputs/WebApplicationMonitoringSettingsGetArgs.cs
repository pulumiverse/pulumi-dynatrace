// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace.Inputs
{

    public sealed class WebApplicationMonitoringSettingsGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Add the cross origin = anonymous attribute to capture JavaScript error messages and W3C resource timings
        /// </summary>
        [Input("addCrossOriginAnonymousAttribute")]
        public Input<bool>? AddCrossOriginAnonymousAttribute { get; set; }

        /// <summary>
        /// Advanced JavaScript tag settings
        /// </summary>
        [Input("advancedJavascriptTagSettings", required: true)]
        public Input<Inputs.WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsGetArgs> AdvancedJavascriptTagSettings { get; set; } = null!;

        /// <summary>
        /// The name of the angular package
        /// </summary>
        [Input("angularPackageName")]
        public Input<string>? AngularPackageName { get; set; }

        /// <summary>
        /// Settings for restricting certain browser type, version, platform and, comparator. It also restricts the mode
        /// </summary>
        [Input("browserRestrictionSettings")]
        public Input<Inputs.WebApplicationMonitoringSettingsBrowserRestrictionSettingsGetArgs>? BrowserRestrictionSettings { get; set; }

        /// <summary>
        /// Optimize the value of cache control headers for use with Dynatrace real user monitoring enabled/disabled
        /// </summary>
        [Input("cacheControlHeaderOptimizations")]
        public Input<bool>? CacheControlHeaderOptimizations { get; set; }

        /// <summary>
        /// Settings for content capture
        /// </summary>
        [Input("contentCapture", required: true)]
        public Input<Inputs.WebApplicationMonitoringSettingsContentCaptureGetArgs> ContentCapture { get; set; } = null!;

        /// <summary>
        /// Domain for cookie placement. Maximum 150 characters.
        /// </summary>
        [Input("cookiePlacementDomain")]
        public Input<string>? CookiePlacementDomain { get; set; }

        /// <summary>
        /// To enable RUM for XHR calls to AWS Lambda, define a regular expression matching these calls, Dynatrace can then automatically add a custom header (`x-dtc`) to each such request to the respective endpoints in AWS.
        /// </summary>
        [Input("correlationHeaderInclusionRegex")]
        public Input<string>? CorrelationHeaderInclusionRegex { get; set; }

        /// <summary>
        /// The location to send monitoring data from the JavaScript tag.
        /// 
        ///  Specify either a relative or an absolute URL. If you use an absolute URL, data will be sent using CORS. 
        /// 
        ///  **Required** for auto-injected applications, optional for agentless applications. Maximum 512 characters.
        /// </summary>
        [Input("customConfigurationProperties")]
        public Input<string>? CustomConfigurationProperties { get; set; }

        /// <summary>
        /// You can exclude some actions from becoming XHR actions.
        /// 
        /// Put a regular expression, matching all the required URLs, here.
        /// 
        /// If noting specified the feature is disabled
        /// </summary>
        [Input("excludeXhrRegex")]
        public Input<string>? ExcludeXhrRegex { get; set; }

        /// <summary>
        /// `fetch()` request capture enabled/disabled
        /// </summary>
        [Input("fetchRequests")]
        public Input<bool>? FetchRequests { get; set; }

        /// <summary>
        /// Manage IP address exclusion settings with `dynatrace.WebAppIpAddressExclusion` resource
        /// </summary>
        [Input("ignoreIpAddressRestrictionSettings")]
        public Input<bool>? IgnoreIpAddressRestrictionSettings { get; set; }

        /// <summary>
        /// Possible valures are `CODE_SNIPPET`, `CODE_SNIPPET_ASYNC`, `INLINE_CODE`, `JAVASCRIPT_TAG`, `JAVASCRIPT_TAG_COMPLETE`, `JAVASCRIPT_TAG_SRI`
        /// </summary>
        [Input("injectionMode", required: true)]
        public Input<string> InjectionMode { get; set; } = null!;

        /// <summary>
        /// Instrumented web or app server.
        /// </summary>
        [Input("instrumentedWebServer")]
        public Input<bool>? InstrumentedWebServer { get; set; }

        /// <summary>
        /// Settings for restricting certain ip addresses and for introducing subnet mask. It also restricts the mode
        /// </summary>
        [Input("ipAddressRestrictionSettings")]
        public Input<Inputs.WebApplicationMonitoringSettingsIpAddressRestrictionSettingsGetArgs>? IpAddressRestrictionSettings { get; set; }

        /// <summary>
        /// Support of various JavaScript frameworks
        /// </summary>
        [Input("javascriptFrameworkSupport")]
        public Input<Inputs.WebApplicationMonitoringSettingsJavascriptFrameworkSupportGetArgs>? JavascriptFrameworkSupport { get; set; }

        /// <summary>
        /// Java script injection rules
        /// </summary>
        [Input("javascriptInjectionRules")]
        public Input<Inputs.WebApplicationMonitoringSettingsJavascriptInjectionRulesGetArgs>? JavascriptInjectionRules { get; set; }

        /// <summary>
        /// Get the JavaScript library file from the CDN. Not supported by agentless applications and assumed to be false for auto-injected applications if omitted.
        /// </summary>
        [Input("libraryFileFromCdn")]
        public Input<bool>? LibraryFileFromCdn { get; set; }

        /// <summary>
        /// The location of your application’s custom JavaScript library file. 
        /// 
        ///  If nothing specified the root directory of your web server is used. 
        /// 
        ///  **Required** for auto-injected applications, not supported by agentless applications. Maximum 512 characters.
        /// </summary>
        [Input("libraryFileLocation")]
        public Input<string>? LibraryFileLocation { get; set; }

        /// <summary>
        /// The location to send monitoring data from the JavaScript tag.
        /// 
        ///  Specify either a relative or an absolute URL. If you use an absolute URL, data will be sent using CORS. 
        /// 
        ///  **Required** for auto-injected applications, optional for agentless applications. Maximum 512 characters.
        /// </summary>
        [Input("monitoringDataPath")]
        public Input<string>? MonitoringDataPath { get; set; }

        /// <summary>
        /// Same site cookie attribute
        /// </summary>
        [Input("sameSiteCookieAttribute")]
        public Input<string>? SameSiteCookieAttribute { get; set; }

        /// <summary>
        /// Time duration for the cache settings
        /// </summary>
        [Input("scriptTagCacheDurationInHours")]
        public Input<int>? ScriptTagCacheDurationInHours { get; set; }

        /// <summary>
        /// Secure attribute usage for Dynatrace cookies enabled/disabled
        /// </summary>
        [Input("secureCookieAttribute")]
        public Input<bool>? SecureCookieAttribute { get; set; }

        /// <summary>
        /// Path to identify the server’s request ID. Maximum 150 characters.
        /// </summary>
        [Input("serverRequestPathId")]
        public Input<string>? ServerRequestPathId { get; set; }

        /// <summary>
        /// Send beacon data via CORS.
        /// </summary>
        [Input("useCors")]
        public Input<bool>? UseCors { get; set; }

        /// <summary>
        /// `XmlHttpRequest` support enabled/disabled
        /// </summary>
        [Input("xmlHttpRequest")]
        public Input<bool>? XmlHttpRequest { get; set; }

        public WebApplicationMonitoringSettingsGetArgs()
        {
        }
        public static new WebApplicationMonitoringSettingsGetArgs Empty => new WebApplicationMonitoringSettingsGetArgs();
    }
}
