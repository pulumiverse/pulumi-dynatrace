// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace.Inputs
{

    public sealed class MetricEventsModelPropertiesGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Possible Values: `ABOVE`, `BELOW`, `OUTSIDE`
        /// </summary>
        [Input("alertCondition", required: true)]
        public Input<string> AlertCondition { get; set; } = null!;

        /// <summary>
        /// The ability to set an alert on missing data in a metric. When enabled, missing data samples will be treated as violating samples defined in the advanced model properties. When disabled, missing data is not treated as a violation but will still contribute to dealerting. We recommend disabling alerting on missing data for sparse timeseries to avoid false alerts. To learn more, visit [anomaly detection configuration](https://dt-url.net/lz02mwi).
        /// </summary>
        [Input("alertOnNoData", required: true)]
        public Input<bool> AlertOnNoData { get; set; } = null!;

        /// <summary>
        /// The number of one-minute samples within the evaluation window that must go back to normal to close the event.
        /// </summary>
        [Input("dealertingSamples", required: true)]
        public Input<int> DealertingSamples { get; set; } = null!;

        /// <summary>
        /// The number of one-minute samples that form the sliding evaluation window.
        /// </summary>
        [Input("samples", required: true)]
        public Input<int> Samples { get; set; } = null!;

        /// <summary>
        /// Controls how many times the signal fluctuation is added to the baseline to produce the actual threshold for alerting
        /// </summary>
        [Input("signalFluctuation")]
        public Input<double>? SignalFluctuation { get; set; }

        /// <summary>
        /// Raise an event if this value is violated
        /// </summary>
        [Input("threshold")]
        public Input<double>? Threshold { get; set; }

        /// <summary>
        /// Controls the width of the confidence band and larger values lead to a less sensitive model
        /// </summary>
        [Input("tolerance")]
        public Input<double>? Tolerance { get; set; }

        /// <summary>
        /// Possible Values: `AUTO_ADAPTIVE_THRESHOLD`, `SEASONAL_BASELINE`, `STATIC_THRESHOLD`
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// The number of one-minute samples within the evaluation window that must violate to trigger an event.
        /// </summary>
        [Input("violatingSamples", required: true)]
        public Input<int> ViolatingSamples { get; set; } = null!;

        public MetricEventsModelPropertiesGetArgs()
        {
        }
        public static new MetricEventsModelPropertiesGetArgs Empty => new MetricEventsModelPropertiesGetArgs();
    }
}
