// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace.Inputs
{

    public sealed class AutotagRuleConditionGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("applicationTypeComparisons")]
        private InputList<Inputs.AutotagRuleConditionApplicationTypeComparisonGetArgs>? _applicationTypeComparisons;

        /// <summary>
        /// Comparison for `APPLICATION_TYPE` attributes
        /// </summary>
        [Obsolete(@"You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionApplicationTypeComparisonGetArgs> ApplicationTypeComparisons
        {
            get => _applicationTypeComparisons ?? (_applicationTypeComparisons = new InputList<Inputs.AutotagRuleConditionApplicationTypeComparisonGetArgs>());
            set => _applicationTypeComparisons = value;
        }

        [Input("applicationTypes")]
        private InputList<Inputs.AutotagRuleConditionApplicationTypeGetArgs>? _applicationTypes;

        /// <summary>
        /// Comparison for `APPLICATION_TYPE` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionApplicationTypeGetArgs> ApplicationTypes
        {
            get => _applicationTypes ?? (_applicationTypes = new InputList<Inputs.AutotagRuleConditionApplicationTypeGetArgs>());
            set => _applicationTypes = value;
        }

        [Input("azureComputeModeComparisons")]
        private InputList<Inputs.AutotagRuleConditionAzureComputeModeComparisonGetArgs>? _azureComputeModeComparisons;

        /// <summary>
        /// Comparison for `AZURE_COMPUTE_MODE` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionAzureComputeModeComparisonGetArgs> AzureComputeModeComparisons
        {
            get => _azureComputeModeComparisons ?? (_azureComputeModeComparisons = new InputList<Inputs.AutotagRuleConditionAzureComputeModeComparisonGetArgs>());
            set => _azureComputeModeComparisons = value;
        }

        [Input("azureComputeModes")]
        private InputList<Inputs.AutotagRuleConditionAzureComputeModeGetArgs>? _azureComputeModes;

        /// <summary>
        /// Comparison for `AZURE_COMPUTE_MODE` attributes
        /// </summary>
        [Obsolete(@"You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionAzureComputeModeGetArgs> AzureComputeModes
        {
            get => _azureComputeModes ?? (_azureComputeModes = new InputList<Inputs.AutotagRuleConditionAzureComputeModeGetArgs>());
            set => _azureComputeModes = value;
        }

        [Input("azureSkuComparisions")]
        private InputList<Inputs.AutotagRuleConditionAzureSkuComparisionGetArgs>? _azureSkuComparisions;

        /// <summary>
        /// Comparison for `AZURE_SKU` attributes
        /// </summary>
        [Obsolete(@"You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionAzureSkuComparisionGetArgs> AzureSkuComparisions
        {
            get => _azureSkuComparisions ?? (_azureSkuComparisions = new InputList<Inputs.AutotagRuleConditionAzureSkuComparisionGetArgs>());
            set => _azureSkuComparisions = value;
        }

        [Input("azureSkus")]
        private InputList<Inputs.AutotagRuleConditionAzureSkusGetArgs>? _azureSkus;

        /// <summary>
        /// Comparison for `AZURE_SKU` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionAzureSkusGetArgs> AzureSkus
        {
            get => _azureSkus ?? (_azureSkus = new InputList<Inputs.AutotagRuleConditionAzureSkusGetArgs>());
            set => _azureSkus = value;
        }

        [Input("baseComparisonBasics")]
        private InputList<Inputs.AutotagRuleConditionBaseComparisonBasicGetArgs>? _baseComparisonBasics;

        /// <summary>
        /// A comparison that's yet unknown to the provider. Operator and Value need to be encoded using the 'unknowns' property.
        /// </summary>
        [Obsolete(@"You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionBaseComparisonBasicGetArgs> BaseComparisonBasics
        {
            get => _baseComparisonBasics ?? (_baseComparisonBasics = new InputList<Inputs.AutotagRuleConditionBaseComparisonBasicGetArgs>());
            set => _baseComparisonBasics = value;
        }

        [Input("baseConditionKeys")]
        private InputList<Inputs.AutotagRuleConditionBaseConditionKeyGetArgs>? _baseConditionKeys;

        /// <summary>
        /// Fallback for not yet known type
        /// </summary>
        [Obsolete(@"'base_condition_key' is deprecated. You should use 'key'")]
        public InputList<Inputs.AutotagRuleConditionBaseConditionKeyGetArgs> BaseConditionKeys
        {
            get => _baseConditionKeys ?? (_baseConditionKeys = new InputList<Inputs.AutotagRuleConditionBaseConditionKeyGetArgs>());
            set => _baseConditionKeys = value;
        }

        [Input("bitnessComparisions")]
        private InputList<Inputs.AutotagRuleConditionBitnessComparisionGetArgs>? _bitnessComparisions;

        /// <summary>
        /// Comparison for `BITNESS` attributes
        /// </summary>
        [Obsolete(@"You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionBitnessComparisionGetArgs> BitnessComparisions
        {
            get => _bitnessComparisions ?? (_bitnessComparisions = new InputList<Inputs.AutotagRuleConditionBitnessComparisionGetArgs>());
            set => _bitnessComparisions = value;
        }

        [Input("bitnesses")]
        private InputList<Inputs.AutotagRuleConditionBitnessGetArgs>? _bitnesses;

        /// <summary>
        /// Comparison for `BITNESS` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionBitnessGetArgs> Bitnesses
        {
            get => _bitnesses ?? (_bitnesses = new InputList<Inputs.AutotagRuleConditionBitnessGetArgs>());
            set => _bitnesses = value;
        }

        [Input("cloudTypeComparisons")]
        private InputList<Inputs.AutotagRuleConditionCloudTypeComparisonGetArgs>? _cloudTypeComparisons;

        /// <summary>
        /// Comparison for `CLOUD_TYPE` attributes
        /// </summary>
        [Obsolete(@"You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionCloudTypeComparisonGetArgs> CloudTypeComparisons
        {
            get => _cloudTypeComparisons ?? (_cloudTypeComparisons = new InputList<Inputs.AutotagRuleConditionCloudTypeComparisonGetArgs>());
            set => _cloudTypeComparisons = value;
        }

        [Input("cloudTypes")]
        private InputList<Inputs.AutotagRuleConditionCloudTypeGetArgs>? _cloudTypes;

        /// <summary>
        /// Comparison for `CLOUD_TYPE` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionCloudTypeGetArgs> CloudTypes
        {
            get => _cloudTypes ?? (_cloudTypes = new InputList<Inputs.AutotagRuleConditionCloudTypeGetArgs>());
            set => _cloudTypes = value;
        }

        [Input("comparisons")]
        private InputList<Inputs.AutotagRuleConditionComparisonGetArgs>? _comparisons;

        /// <summary>
        /// A comparison that's yet unknown to the provider. Operator and Value need to be encoded using the 'unknowns' property.
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionComparisonGetArgs> Comparisons
        {
            get => _comparisons ?? (_comparisons = new InputList<Inputs.AutotagRuleConditionComparisonGetArgs>());
            set => _comparisons = value;
        }

        [Input("customApplicationTypeComparisons")]
        private InputList<Inputs.AutotagRuleConditionCustomApplicationTypeComparisonGetArgs>? _customApplicationTypeComparisons;

        /// <summary>
        /// Comparison for `CUSTOM_APPLICATION_TYPE` attributes
        /// </summary>
        [Obsolete(@"You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionCustomApplicationTypeComparisonGetArgs> CustomApplicationTypeComparisons
        {
            get => _customApplicationTypeComparisons ?? (_customApplicationTypeComparisons = new InputList<Inputs.AutotagRuleConditionCustomApplicationTypeComparisonGetArgs>());
            set => _customApplicationTypeComparisons = value;
        }

        [Input("customApplicationTypes")]
        private InputList<Inputs.AutotagRuleConditionCustomApplicationTypeGetArgs>? _customApplicationTypes;

        /// <summary>
        /// Comparison for `CUSTOM_APPLICATION_TYPE` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionCustomApplicationTypeGetArgs> CustomApplicationTypes
        {
            get => _customApplicationTypes ?? (_customApplicationTypes = new InputList<Inputs.AutotagRuleConditionCustomApplicationTypeGetArgs>());
            set => _customApplicationTypes = value;
        }

        [Input("customHostMetadataConditionKeys")]
        private InputList<Inputs.AutotagRuleConditionCustomHostMetadataConditionKeyGetArgs>? _customHostMetadataConditionKeys;

        /// <summary>
        /// Key for Custom Host Metadata
        /// </summary>
        [Obsolete(@"'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata'")]
        public InputList<Inputs.AutotagRuleConditionCustomHostMetadataConditionKeyGetArgs> CustomHostMetadataConditionKeys
        {
            get => _customHostMetadataConditionKeys ?? (_customHostMetadataConditionKeys = new InputList<Inputs.AutotagRuleConditionCustomHostMetadataConditionKeyGetArgs>());
            set => _customHostMetadataConditionKeys = value;
        }

        [Input("customHostMetadatas")]
        private InputList<Inputs.AutotagRuleConditionCustomHostMetadataGetArgs>? _customHostMetadatas;

        /// <summary>
        /// Key for Custom Host Metadata
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionCustomHostMetadataGetArgs> CustomHostMetadatas
        {
            get => _customHostMetadatas ?? (_customHostMetadatas = new InputList<Inputs.AutotagRuleConditionCustomHostMetadataGetArgs>());
            set => _customHostMetadatas = value;
        }

        [Input("customProcessMetadataConditionKeys")]
        private InputList<Inputs.AutotagRuleConditionCustomProcessMetadataConditionKeyGetArgs>? _customProcessMetadataConditionKeys;

        /// <summary>
        /// Key for Custom Process Metadata
        /// </summary>
        [Obsolete(@"'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata'")]
        public InputList<Inputs.AutotagRuleConditionCustomProcessMetadataConditionKeyGetArgs> CustomProcessMetadataConditionKeys
        {
            get => _customProcessMetadataConditionKeys ?? (_customProcessMetadataConditionKeys = new InputList<Inputs.AutotagRuleConditionCustomProcessMetadataConditionKeyGetArgs>());
            set => _customProcessMetadataConditionKeys = value;
        }

        [Input("customProcessMetadatas")]
        private InputList<Inputs.AutotagRuleConditionCustomProcessMetadataGetArgs>? _customProcessMetadatas;

        /// <summary>
        /// Key for Custom Process Metadata
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionCustomProcessMetadataGetArgs> CustomProcessMetadatas
        {
            get => _customProcessMetadatas ?? (_customProcessMetadatas = new InputList<Inputs.AutotagRuleConditionCustomProcessMetadataGetArgs>());
            set => _customProcessMetadatas = value;
        }

        [Input("databaseTopologies")]
        private InputList<Inputs.AutotagRuleConditionDatabaseTopologyGetArgs>? _databaseTopologies;

        /// <summary>
        /// Comparison for `DATABASE_TOPOLOGY` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionDatabaseTopologyGetArgs> DatabaseTopologies
        {
            get => _databaseTopologies ?? (_databaseTopologies = new InputList<Inputs.AutotagRuleConditionDatabaseTopologyGetArgs>());
            set => _databaseTopologies = value;
        }

        [Input("databaseTopologyComparisons")]
        private InputList<Inputs.AutotagRuleConditionDatabaseTopologyComparisonGetArgs>? _databaseTopologyComparisons;

        /// <summary>
        /// Comparison for `DATABASE_TOPOLOGY` attributes
        /// </summary>
        [Obsolete(@"You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionDatabaseTopologyComparisonGetArgs> DatabaseTopologyComparisons
        {
            get => _databaseTopologyComparisons ?? (_databaseTopologyComparisons = new InputList<Inputs.AutotagRuleConditionDatabaseTopologyComparisonGetArgs>());
            set => _databaseTopologyComparisons = value;
        }

        [Input("dcrumDecoderComparisons")]
        private InputList<Inputs.AutotagRuleConditionDcrumDecoderComparisonGetArgs>? _dcrumDecoderComparisons;

        /// <summary>
        /// Comparison for `DCRUM_DECODER_TYPE` attributes
        /// </summary>
        [Obsolete(@"You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionDcrumDecoderComparisonGetArgs> DcrumDecoderComparisons
        {
            get => _dcrumDecoderComparisons ?? (_dcrumDecoderComparisons = new InputList<Inputs.AutotagRuleConditionDcrumDecoderComparisonGetArgs>());
            set => _dcrumDecoderComparisons = value;
        }

        [Input("dcrumDecoders")]
        private InputList<Inputs.AutotagRuleConditionDcrumDecoderGetArgs>? _dcrumDecoders;

        /// <summary>
        /// Comparison for `DCRUM_DECODER_TYPE` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionDcrumDecoderGetArgs> DcrumDecoders
        {
            get => _dcrumDecoders ?? (_dcrumDecoders = new InputList<Inputs.AutotagRuleConditionDcrumDecoderGetArgs>());
            set => _dcrumDecoders = value;
        }

        [Input("entities")]
        private InputList<Inputs.AutotagRuleConditionEntityGetArgs>? _entities;

        /// <summary>
        /// Comparison for `ENTITY_ID` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionEntityGetArgs> Entities
        {
            get => _entities ?? (_entities = new InputList<Inputs.AutotagRuleConditionEntityGetArgs>());
            set => _entities = value;
        }

        [Input("entityIdComparisons")]
        private InputList<Inputs.AutotagRuleConditionEntityIdComparisonGetArgs>? _entityIdComparisons;

        /// <summary>
        /// Comparison for `ENTITY_ID` attributes
        /// </summary>
        [Obsolete(@"You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionEntityIdComparisonGetArgs> EntityIdComparisons
        {
            get => _entityIdComparisons ?? (_entityIdComparisons = new InputList<Inputs.AutotagRuleConditionEntityIdComparisonGetArgs>());
            set => _entityIdComparisons = value;
        }

        [Input("hostTeches")]
        private InputList<Inputs.AutotagRuleConditionHostTechGetArgs>? _hostTeches;

        /// <summary>
        /// Comparison for `SIMPLE_HOST_TECH` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionHostTechGetArgs> HostTeches
        {
            get => _hostTeches ?? (_hostTeches = new InputList<Inputs.AutotagRuleConditionHostTechGetArgs>());
            set => _hostTeches = value;
        }

        [Input("hypervisorTypeComparisions")]
        private InputList<Inputs.AutotagRuleConditionHypervisorTypeComparisionGetArgs>? _hypervisorTypeComparisions;

        /// <summary>
        /// `HypervisorTypeComparision` is deprecated. Use `Hypervisor` instead
        /// </summary>
        [Obsolete(@"`HypervisorTypeComparision` is deprecated. Use `Hypervisor` instead")]
        public InputList<Inputs.AutotagRuleConditionHypervisorTypeComparisionGetArgs> HypervisorTypeComparisions
        {
            get => _hypervisorTypeComparisions ?? (_hypervisorTypeComparisions = new InputList<Inputs.AutotagRuleConditionHypervisorTypeComparisionGetArgs>());
            set => _hypervisorTypeComparisions = value;
        }

        [Input("hypervisors")]
        private InputList<Inputs.AutotagRuleConditionHypervisorGetArgs>? _hypervisors;

        /// <summary>
        /// Comparison for `HYPERVISOR_TYPE` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionHypervisorGetArgs> Hypervisors
        {
            get => _hypervisors ?? (_hypervisors = new InputList<Inputs.AutotagRuleConditionHypervisorGetArgs>());
            set => _hypervisors = value;
        }

        [Input("indexedNameComparisons")]
        private InputList<Inputs.AutotagRuleConditionIndexedNameComparisonGetArgs>? _indexedNameComparisons;

        /// <summary>
        /// Comparison for `INDEXED_NAME` attributes
        /// </summary>
        [Obsolete(@"You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionIndexedNameComparisonGetArgs> IndexedNameComparisons
        {
            get => _indexedNameComparisons ?? (_indexedNameComparisons = new InputList<Inputs.AutotagRuleConditionIndexedNameComparisonGetArgs>());
            set => _indexedNameComparisons = value;
        }

        [Input("indexedNames")]
        private InputList<Inputs.AutotagRuleConditionIndexedNameGetArgs>? _indexedNames;

        /// <summary>
        /// Comparison for `INDEXED_NAME` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionIndexedNameGetArgs> IndexedNames
        {
            get => _indexedNames ?? (_indexedNames = new InputList<Inputs.AutotagRuleConditionIndexedNameGetArgs>());
            set => _indexedNames = value;
        }

        [Input("indexedStringComparisons")]
        private InputList<Inputs.AutotagRuleConditionIndexedStringComparisonGetArgs>? _indexedStringComparisons;

        /// <summary>
        /// Comparison for `INDEXED_STRING` attributes
        /// </summary>
        [Obsolete(@"You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionIndexedStringComparisonGetArgs> IndexedStringComparisons
        {
            get => _indexedStringComparisons ?? (_indexedStringComparisons = new InputList<Inputs.AutotagRuleConditionIndexedStringComparisonGetArgs>());
            set => _indexedStringComparisons = value;
        }

        [Input("indexedStrings")]
        private InputList<Inputs.AutotagRuleConditionIndexedStringGetArgs>? _indexedStrings;

        /// <summary>
        /// Comparison for `INDEXED_STRING` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionIndexedStringGetArgs> IndexedStrings
        {
            get => _indexedStrings ?? (_indexedStrings = new InputList<Inputs.AutotagRuleConditionIndexedStringGetArgs>());
            set => _indexedStrings = value;
        }

        [Input("indexedTagComparisons")]
        private InputList<Inputs.AutotagRuleConditionIndexedTagComparisonGetArgs>? _indexedTagComparisons;

        /// <summary>
        /// Comparison for `INDEXED_TAG` attributes
        /// </summary>
        [Obsolete(@"You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionIndexedTagComparisonGetArgs> IndexedTagComparisons
        {
            get => _indexedTagComparisons ?? (_indexedTagComparisons = new InputList<Inputs.AutotagRuleConditionIndexedTagComparisonGetArgs>());
            set => _indexedTagComparisons = value;
        }

        [Input("indexedTags")]
        private InputList<Inputs.AutotagRuleConditionIndexedTagGetArgs>? _indexedTags;

        /// <summary>
        /// Comparison for `INDEXED_TAG` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionIndexedTagGetArgs> IndexedTags
        {
            get => _indexedTags ?? (_indexedTags = new InputList<Inputs.AutotagRuleConditionIndexedTagGetArgs>());
            set => _indexedTags = value;
        }

        [Input("integerComparisons")]
        private InputList<Inputs.AutotagRuleConditionIntegerComparisonGetArgs>? _integerComparisons;

        /// <summary>
        /// Comparison for `INTEGER` attributes
        /// </summary>
        [Obsolete(@"You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionIntegerComparisonGetArgs> IntegerComparisons
        {
            get => _integerComparisons ?? (_integerComparisons = new InputList<Inputs.AutotagRuleConditionIntegerComparisonGetArgs>());
            set => _integerComparisons = value;
        }

        [Input("integers")]
        private InputList<Inputs.AutotagRuleConditionIntegerGetArgs>? _integers;

        /// <summary>
        /// Comparison for `INTEGER` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionIntegerGetArgs> Integers
        {
            get => _integers ?? (_integers = new InputList<Inputs.AutotagRuleConditionIntegerGetArgs>());
            set => _integers = value;
        }

        [Input("ipaddressComparisons")]
        private InputList<Inputs.AutotagRuleConditionIpaddressComparisonGetArgs>? _ipaddressComparisons;

        /// <summary>
        /// Comparison for `IP_ADDRESS` attributes
        /// </summary>
        [Obsolete(@"You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionIpaddressComparisonGetArgs> IpaddressComparisons
        {
            get => _ipaddressComparisons ?? (_ipaddressComparisons = new InputList<Inputs.AutotagRuleConditionIpaddressComparisonGetArgs>());
            set => _ipaddressComparisons = value;
        }

        [Input("ipaddresses")]
        private InputList<Inputs.AutotagRuleConditionIpaddressGetArgs>? _ipaddresses;

        /// <summary>
        /// Comparison for `IP_ADDRESS` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionIpaddressGetArgs> Ipaddresses
        {
            get => _ipaddresses ?? (_ipaddresses = new InputList<Inputs.AutotagRuleConditionIpaddressGetArgs>());
            set => _ipaddresses = value;
        }

        [Input("keys")]
        private InputList<Inputs.AutotagRuleConditionKeyGetArgs>? _keys;

        /// <summary>
        /// Fallback for not yet known type
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionKeyGetArgs> Keys
        {
            get => _keys ?? (_keys = new InputList<Inputs.AutotagRuleConditionKeyGetArgs>());
            set => _keys = value;
        }

        [Input("mobilePlatformComparisons")]
        private InputList<Inputs.AutotagRuleConditionMobilePlatformComparisonGetArgs>? _mobilePlatformComparisons;

        /// <summary>
        /// Comparison for `MOBILE_PLATFORM` attributes
        /// </summary>
        [Obsolete(@"You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionMobilePlatformComparisonGetArgs> MobilePlatformComparisons
        {
            get => _mobilePlatformComparisons ?? (_mobilePlatformComparisons = new InputList<Inputs.AutotagRuleConditionMobilePlatformComparisonGetArgs>());
            set => _mobilePlatformComparisons = value;
        }

        [Input("mobilePlatforms")]
        private InputList<Inputs.AutotagRuleConditionMobilePlatformGetArgs>? _mobilePlatforms;

        /// <summary>
        /// Comparison for `MOBILE_PLATFORM` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionMobilePlatformGetArgs> MobilePlatforms
        {
            get => _mobilePlatforms ?? (_mobilePlatforms = new InputList<Inputs.AutotagRuleConditionMobilePlatformGetArgs>());
            set => _mobilePlatforms = value;
        }

        [Input("osArches")]
        private InputList<Inputs.AutotagRuleConditionOsArchGetArgs>? _osArches;

        /// <summary>
        /// Comparison for `OS_ARCHITECTURE` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionOsArchGetArgs> OsArches
        {
            get => _osArches ?? (_osArches = new InputList<Inputs.AutotagRuleConditionOsArchGetArgs>());
            set => _osArches = value;
        }

        [Input("osTypes")]
        private InputList<Inputs.AutotagRuleConditionOsTypeGetArgs>? _osTypes;

        /// <summary>
        /// Comparison for `OS_TYPE` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionOsTypeGetArgs> OsTypes
        {
            get => _osTypes ?? (_osTypes = new InputList<Inputs.AutotagRuleConditionOsTypeGetArgs>());
            set => _osTypes = value;
        }

        [Input("osarchitectureComparisons")]
        private InputList<Inputs.AutotagRuleConditionOsarchitectureComparisonGetArgs>? _osarchitectureComparisons;

        /// <summary>
        /// Comparison for `OS_ARCHITECTURE` attributes
        /// </summary>
        [Obsolete(@"You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionOsarchitectureComparisonGetArgs> OsarchitectureComparisons
        {
            get => _osarchitectureComparisons ?? (_osarchitectureComparisons = new InputList<Inputs.AutotagRuleConditionOsarchitectureComparisonGetArgs>());
            set => _osarchitectureComparisons = value;
        }

        [Input("ostypeComparisons")]
        private InputList<Inputs.AutotagRuleConditionOstypeComparisonGetArgs>? _ostypeComparisons;

        /// <summary>
        /// Comparison for `OS_TYPE` attributes
        /// </summary>
        [Obsolete(@"You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionOstypeComparisonGetArgs> OstypeComparisons
        {
            get => _ostypeComparisons ?? (_ostypeComparisons = new InputList<Inputs.AutotagRuleConditionOstypeComparisonGetArgs>());
            set => _ostypeComparisons = value;
        }

        [Input("paasTypeComparisons")]
        private InputList<Inputs.AutotagRuleConditionPaasTypeComparisonGetArgs>? _paasTypeComparisons;

        /// <summary>
        /// Comparison for `PAAS_TYPE` attributes
        /// </summary>
        [Obsolete(@"You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionPaasTypeComparisonGetArgs> PaasTypeComparisons
        {
            get => _paasTypeComparisons ?? (_paasTypeComparisons = new InputList<Inputs.AutotagRuleConditionPaasTypeComparisonGetArgs>());
            set => _paasTypeComparisons = value;
        }

        [Input("paasTypes")]
        private InputList<Inputs.AutotagRuleConditionPaasTypeGetArgs>? _paasTypes;

        /// <summary>
        /// Comparison for `PAAS_TYPE` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionPaasTypeGetArgs> PaasTypes
        {
            get => _paasTypes ?? (_paasTypes = new InputList<Inputs.AutotagRuleConditionPaasTypeGetArgs>());
            set => _paasTypes = value;
        }

        [Input("processMetadataConditionKeys")]
        private InputList<Inputs.AutotagRuleConditionProcessMetadataConditionKeyGetArgs>? _processMetadataConditionKeys;

        /// <summary>
        /// The key for dynamic attributes of the `PROCESS_PREDEFINED_METADATA_KEY` type
        /// </summary>
        [Obsolete(@"'process_metadata_condition_key' is deprecated. You should use 'process_metadata'")]
        public InputList<Inputs.AutotagRuleConditionProcessMetadataConditionKeyGetArgs> ProcessMetadataConditionKeys
        {
            get => _processMetadataConditionKeys ?? (_processMetadataConditionKeys = new InputList<Inputs.AutotagRuleConditionProcessMetadataConditionKeyGetArgs>());
            set => _processMetadataConditionKeys = value;
        }

        [Input("processMetadatas")]
        private InputList<Inputs.AutotagRuleConditionProcessMetadataGetArgs>? _processMetadatas;

        /// <summary>
        /// The key for dynamic attributes of the `PROCESS_PREDEFINED_METADATA_KEY` type
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionProcessMetadataGetArgs> ProcessMetadatas
        {
            get => _processMetadatas ?? (_processMetadatas = new InputList<Inputs.AutotagRuleConditionProcessMetadataGetArgs>());
            set => _processMetadatas = value;
        }

        [Input("serviceTopologies")]
        private InputList<Inputs.AutotagRuleConditionServiceTopologyGetArgs>? _serviceTopologies;

        /// <summary>
        /// Comparison for `SERVICE_TOPOLOGY` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionServiceTopologyGetArgs> ServiceTopologies
        {
            get => _serviceTopologies ?? (_serviceTopologies = new InputList<Inputs.AutotagRuleConditionServiceTopologyGetArgs>());
            set => _serviceTopologies = value;
        }

        [Input("serviceTopologyComparisons")]
        private InputList<Inputs.AutotagRuleConditionServiceTopologyComparisonGetArgs>? _serviceTopologyComparisons;

        /// <summary>
        /// Comparison for `SERVICE_TOPOLOGY` attributes
        /// </summary>
        [Obsolete(@"You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionServiceTopologyComparisonGetArgs> ServiceTopologyComparisons
        {
            get => _serviceTopologyComparisons ?? (_serviceTopologyComparisons = new InputList<Inputs.AutotagRuleConditionServiceTopologyComparisonGetArgs>());
            set => _serviceTopologyComparisons = value;
        }

        [Input("serviceTypeComparisons")]
        private InputList<Inputs.AutotagRuleConditionServiceTypeComparisonGetArgs>? _serviceTypeComparisons;

        /// <summary>
        /// Comparison for `SERVICE_TYPE` attributes
        /// </summary>
        [Obsolete(@"You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionServiceTypeComparisonGetArgs> ServiceTypeComparisons
        {
            get => _serviceTypeComparisons ?? (_serviceTypeComparisons = new InputList<Inputs.AutotagRuleConditionServiceTypeComparisonGetArgs>());
            set => _serviceTypeComparisons = value;
        }

        [Input("serviceTypes")]
        private InputList<Inputs.AutotagRuleConditionServiceTypeGetArgs>? _serviceTypes;

        /// <summary>
        /// Comparison for `SERVICE_TYPE` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionServiceTypeGetArgs> ServiceTypes
        {
            get => _serviceTypes ?? (_serviceTypes = new InputList<Inputs.AutotagRuleConditionServiceTypeGetArgs>());
            set => _serviceTypes = value;
        }

        [Input("simpleHostTechComparisons")]
        private InputList<Inputs.AutotagRuleConditionSimpleHostTechComparisonGetArgs>? _simpleHostTechComparisons;

        /// <summary>
        /// Comparison for `SIMPLE_HOST_TECH` attributes
        /// </summary>
        [Obsolete(@"You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionSimpleHostTechComparisonGetArgs> SimpleHostTechComparisons
        {
            get => _simpleHostTechComparisons ?? (_simpleHostTechComparisons = new InputList<Inputs.AutotagRuleConditionSimpleHostTechComparisonGetArgs>());
            set => _simpleHostTechComparisons = value;
        }

        [Input("simpleTechComparisons")]
        private InputList<Inputs.AutotagRuleConditionSimpleTechComparisonGetArgs>? _simpleTechComparisons;

        /// <summary>
        /// Comparison for `SIMPLE_TECH` attributes
        /// </summary>
        [Obsolete(@"You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionSimpleTechComparisonGetArgs> SimpleTechComparisons
        {
            get => _simpleTechComparisons ?? (_simpleTechComparisons = new InputList<Inputs.AutotagRuleConditionSimpleTechComparisonGetArgs>());
            set => _simpleTechComparisons = value;
        }

        [Input("stringComparisons")]
        private InputList<Inputs.AutotagRuleConditionStringComparisonGetArgs>? _stringComparisons;

        /// <summary>
        /// Comparison for `STRING` attributes
        /// </summary>
        [Obsolete(@"You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionStringComparisonGetArgs> StringComparisons
        {
            get => _stringComparisons ?? (_stringComparisons = new InputList<Inputs.AutotagRuleConditionStringComparisonGetArgs>());
            set => _stringComparisons = value;
        }

        [Input("stringConditionKeys")]
        private InputList<Inputs.AutotagRuleConditionStringConditionKeyGetArgs>? _stringConditionKeys;

        /// <summary>
        /// The key for dynamic attributes of the `STRING` type
        /// </summary>
        [Obsolete(@"'string_condition_key' is deprecated. You should use 'string_key'")]
        public InputList<Inputs.AutotagRuleConditionStringConditionKeyGetArgs> StringConditionKeys
        {
            get => _stringConditionKeys ?? (_stringConditionKeys = new InputList<Inputs.AutotagRuleConditionStringConditionKeyGetArgs>());
            set => _stringConditionKeys = value;
        }

        [Input("stringKeys")]
        private InputList<Inputs.AutotagRuleConditionStringKeyGetArgs>? _stringKeys;

        /// <summary>
        /// The key for dynamic attributes of the `STRING` type
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionStringKeyGetArgs> StringKeys
        {
            get => _stringKeys ?? (_stringKeys = new InputList<Inputs.AutotagRuleConditionStringKeyGetArgs>());
            set => _stringKeys = value;
        }

        [Input("strings")]
        private InputList<Inputs.AutotagRuleConditionStringGetArgs>? _strings;

        /// <summary>
        /// Comparison for `STRING` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionStringGetArgs> Strings
        {
            get => _strings ?? (_strings = new InputList<Inputs.AutotagRuleConditionStringGetArgs>());
            set => _strings = value;
        }

        [Input("syntheticEngineTypeComparisons")]
        private InputList<Inputs.AutotagRuleConditionSyntheticEngineTypeComparisonGetArgs>? _syntheticEngineTypeComparisons;

        /// <summary>
        /// Comparison for `SYNTHETIC_ENGINE_TYPE` attributes
        /// </summary>
        [Obsolete(@"You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionSyntheticEngineTypeComparisonGetArgs> SyntheticEngineTypeComparisons
        {
            get => _syntheticEngineTypeComparisons ?? (_syntheticEngineTypeComparisons = new InputList<Inputs.AutotagRuleConditionSyntheticEngineTypeComparisonGetArgs>());
            set => _syntheticEngineTypeComparisons = value;
        }

        [Input("syntheticEngines")]
        private InputList<Inputs.AutotagRuleConditionSyntheticEngineGetArgs>? _syntheticEngines;

        /// <summary>
        /// Comparison for `SYNTHETIC_ENGINE_TYPE` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionSyntheticEngineGetArgs> SyntheticEngines
        {
            get => _syntheticEngines ?? (_syntheticEngines = new InputList<Inputs.AutotagRuleConditionSyntheticEngineGetArgs>());
            set => _syntheticEngines = value;
        }

        [Input("tagComparisons")]
        private InputList<Inputs.AutotagRuleConditionTagComparisonGetArgs>? _tagComparisons;

        /// <summary>
        /// Comparison for `TAG` attributes
        /// </summary>
        [Obsolete(@"You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionTagComparisonGetArgs> TagComparisons
        {
            get => _tagComparisons ?? (_tagComparisons = new InputList<Inputs.AutotagRuleConditionTagComparisonGetArgs>());
            set => _tagComparisons = value;
        }

        [Input("tags")]
        private InputList<Inputs.AutotagRuleConditionTagGetArgs>? _tags;

        /// <summary>
        /// Comparison for `TAG` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.AutotagRuleConditionTagGetArgs>());
            set => _tags = value;
        }

        [Input("teches")]
        private InputList<Inputs.AutotagRuleConditionTechGetArgs>? _teches;

        /// <summary>
        /// Comparison for `SIMPLE_TECH` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionTechGetArgs> Teches
        {
            get => _teches ?? (_teches = new InputList<Inputs.AutotagRuleConditionTechGetArgs>());
            set => _teches = value;
        }

        /// <summary>
        /// Any attributes that aren't yet supported by this provider
        /// </summary>
        [Input("unknowns")]
        public Input<string>? Unknowns { get; set; }

        public AutotagRuleConditionGetArgs()
        {
        }
        public static new AutotagRuleConditionGetArgs Empty => new AutotagRuleConditionGetArgs();
    }
}
