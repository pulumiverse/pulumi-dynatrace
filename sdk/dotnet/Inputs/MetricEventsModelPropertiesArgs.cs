// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace.Inputs
{

    public sealed class MetricEventsModelPropertiesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Possible Values: `ABOVE`, `BELOW`, `OUTSIDE`
        /// </summary>
        [Input("alertCondition", required: true)]
        public Input<string> AlertCondition { get; set; } = null!;

        /// <summary>
        /// The ability to set an alert on missing data in a metric. When enabled, missing data samples will contribute as violating samples defined in advanced model properties. We recommend to not alert on missing data for sparse timeseries as this leads to alert spam.
        /// </summary>
        [Input("alertOnNoData", required: true)]
        public Input<bool> AlertOnNoData { get; set; } = null!;

        /// <summary>
        /// The number of one-minute samples within the evaluation window that must go back to normal to close the event.
        /// </summary>
        [Input("dealertingSamples", required: true)]
        public Input<int> DealertingSamples { get; set; } = null!;

        /// <summary>
        /// The number of one-minute samples that form the sliding evaluation window.
        /// </summary>
        [Input("samples", required: true)]
        public Input<int> Samples { get; set; } = null!;

        /// <summary>
        /// Controls how many times the signal fluctuation is added to the baseline to produce the actual threshold for alerting
        /// </summary>
        [Input("signalFluctuation")]
        public Input<double>? SignalFluctuation { get; set; }

        /// <summary>
        /// Raise an event if this value is violated
        /// </summary>
        [Input("threshold")]
        public Input<double>? Threshold { get; set; }

        /// <summary>
        /// Controls the width of the confidence band and larger values lead to a less sensitive model
        /// </summary>
        [Input("tolerance")]
        public Input<double>? Tolerance { get; set; }

        /// <summary>
        /// Possible Values: `AUTO_ADAPTIVE_THRESHOLD`, `SEASONAL_BASELINE`, `STATIC_THRESHOLD`
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// The number of one-minute samples within the evaluation window that must violate to trigger an event.
        /// </summary>
        [Input("violatingSamples", required: true)]
        public Input<int> ViolatingSamples { get; set; } = null!;

        public MetricEventsModelPropertiesArgs()
        {
        }
        public static new MetricEventsModelPropertiesArgs Empty => new MetricEventsModelPropertiesArgs();
    }
}
