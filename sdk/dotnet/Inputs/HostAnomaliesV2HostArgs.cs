// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace.Inputs
{

    public sealed class HostAnomaliesV2HostArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// no documentation available
        /// </summary>
        [Input("connectionLostDetection", required: true)]
        public Input<Inputs.HostAnomaliesV2HostConnectionLostDetectionArgs> ConnectionLostDetection { get; set; } = null!;

        /// <summary>
        /// no documentation available
        /// </summary>
        [Input("highCpuSaturationDetection", required: true)]
        public Input<Inputs.HostAnomaliesV2HostHighCpuSaturationDetectionArgs> HighCpuSaturationDetection { get; set; } = null!;

        /// <summary>
        /// no documentation available
        /// </summary>
        [Input("highGcActivityDetection", required: true)]
        public Input<Inputs.HostAnomaliesV2HostHighGcActivityDetectionArgs> HighGcActivityDetection { get; set; } = null!;

        /// <summary>
        /// no documentation available
        /// </summary>
        [Input("highMemoryDetection", required: true)]
        public Input<Inputs.HostAnomaliesV2HostHighMemoryDetectionArgs> HighMemoryDetection { get; set; } = null!;

        /// <summary>
        /// no documentation available
        /// </summary>
        [Input("highSystemLoadDetection", required: true)]
        public Input<Inputs.HostAnomaliesV2HostHighSystemLoadDetectionArgs> HighSystemLoadDetection { get; set; } = null!;

        /// <summary>
        /// no documentation available
        /// </summary>
        [Input("outOfMemoryDetection", required: true)]
        public Input<Inputs.HostAnomaliesV2HostOutOfMemoryDetectionArgs> OutOfMemoryDetection { get; set; } = null!;

        /// <summary>
        /// no documentation available
        /// </summary>
        [Input("outOfThreadsDetection", required: true)]
        public Input<Inputs.HostAnomaliesV2HostOutOfThreadsDetectionArgs> OutOfThreadsDetection { get; set; } = null!;

        public HostAnomaliesV2HostArgs()
        {
        }
        public static new HostAnomaliesV2HostArgs Empty => new HostAnomaliesV2HostArgs();
    }
}
