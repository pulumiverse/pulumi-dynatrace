// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace.Inputs
{

    public sealed class ProcessAvailabilityRulesRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// - $contains(svc) – Matches if svc appears anywhere in the process property value.
        /// - $eq(svc.exe) – Matches if svc.exe matches the process property value exactly.
        /// - $prefix(svc) – Matches if app matches the prefix of the process property value.
        /// - $suffix(svc.py) – Matches if svc.py matches the suffix of the process property value.
        /// 
        /// For example, $suffix(svc.py) would detect processes named loyaltysvc.py and paymentssvc.py.
        /// 
        /// For more details, see [Process availability](https://dt-url.net/v923x37).
        /// </summary>
        [Input("condition")]
        public Input<string>? Condition { get; set; }

        /// <summary>
        /// Host custom metadata refers to user-defined key-value pairs that you can assign to hosts monitored by Dynatrace.
        /// 
        /// By defining custom metadata, you can enrich the monitoring data with context specific to your organization's needs, such as environment names, team ownership, application versions, or any other relevant details.
        /// 
        /// See [Define tags and metadata for hosts](https://dt-url.net/w3hv0kbw).
        /// </summary>
        [Input("hostMetadataCondition")]
        public Input<Inputs.ProcessAvailabilityRulesRuleHostMetadataConditionArgs>? HostMetadataCondition { get; set; }

        /// <summary>
        /// Possible Values: `CommandLine`, `Executable`, `ExecutablePath`, `User`
        /// </summary>
        [Input("property")]
        public Input<string>? Property { get; set; }

        /// <summary>
        /// Possible Values: `RuleTypeHost`, `RuleTypeProcess`
        /// </summary>
        [Input("ruleType")]
        public Input<string>? RuleType { get; set; }

        public ProcessAvailabilityRulesRuleArgs()
        {
        }
        public static new ProcessAvailabilityRulesRuleArgs Empty => new ProcessAvailabilityRulesRuleArgs();
    }
}
