// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace.Inputs
{

    public sealed class MetricEventsQueryDefinitionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Possible Values: `AVG`, `COUNT`, `MAX`, `MEDIAN`, `MIN`, `PERCENTILE90`, `SUM`, `VALUE`
        /// </summary>
        [Input("aggregation")]
        public Input<string>? Aggregation { get; set; }

        /// <summary>
        /// Dimension filter
        /// </summary>
        [Input("dimensionFilter")]
        public Input<Inputs.MetricEventsQueryDefinitionDimensionFilterArgs>? DimensionFilter { get; set; }

        /// <summary>
        /// Use rule-based filters to define the scope this event monitors.
        /// </summary>
        [Input("entityFilter")]
        public Input<Inputs.MetricEventsQueryDefinitionEntityFilterArgs>? EntityFilter { get; set; }

        /// <summary>
        /// The `legacy_id` of a Management Zone (as provided by the resource `dynatrace.ManagementZoneV2` or the data source `dynatrace.ManagementZone`)
        /// </summary>
        [Input("managementZone")]
        public Input<string>? ManagementZone { get; set; }

        /// <summary>
        /// Metric key
        /// </summary>
        [Input("metricKey")]
        public Input<string>? MetricKey { get; set; }

        /// <summary>
        /// To learn more, visit [Metric Selector](https://dt-url.net/metselad)
        /// </summary>
        [Input("metricSelector")]
        public Input<string>? MetricSelector { get; set; }

        /// <summary>
        /// Minute offset of sliding evaluation window for metrics with latency
        /// </summary>
        [Input("queryOffset")]
        public Input<int>? QueryOffset { get; set; }

        /// <summary>
        /// Possible Values: `METRIC_KEY`, `METRIC_SELECTOR`
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public MetricEventsQueryDefinitionArgs()
        {
        }
        public static new MetricEventsQueryDefinitionArgs Empty => new MetricEventsQueryDefinitionArgs();
    }
}
