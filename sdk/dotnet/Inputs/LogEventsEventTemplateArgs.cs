// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace.Inputs
{

    public sealed class LogEventsEventTemplateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// DavisÂ® AI will try to merge this event into existing problems, otherwise a new problem will always be created.
        /// </summary>
        [Input("davisMerge")]
        public Input<bool>? DavisMerge { get; set; }

        /// <summary>
        /// The description of the event to trigger.
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// Possible Values: `AVAILABILITY`, `CUSTOM_ALERT`, `CUSTOM_ANNOTATION`, `CUSTOM_CONFIGURATION`, `CUSTOM_DEPLOYMENT`, `ERROR`, `INFO`, `MARKED_FOR_TERMINATION`, `RESOURCE`, `SLOWDOWN`
        /// </summary>
        [Input("eventType", required: true)]
        public Input<string> EventType { get; set; } = null!;

        /// <summary>
        /// Set of additional key-value properties to be attached to the triggered event.
        /// </summary>
        [Input("metadata")]
        public Input<Inputs.LogEventsEventTemplateMetadataArgs>? Metadata { get; set; }

        /// <summary>
        /// The title of the event to trigger.
        /// </summary>
        [Input("title", required: true)]
        public Input<string> Title { get; set; } = null!;

        public LogEventsEventTemplateArgs()
        {
        }
        public static new LogEventsEventTemplateArgs Empty => new LogEventsEventTemplateArgs();
    }
}
