// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace.Inputs
{

    public sealed class CalculatedMobileMetricUserActionFilterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Only actions with a duration more than or equal to this value (in milliseconds) are included in the metric calculation.
        /// </summary>
        [Input("actionDurationFromMilliseconds")]
        public Input<int>? ActionDurationFromMilliseconds { get; set; }

        /// <summary>
        /// Only actions with a duration less than or equal to this value (in milliseconds) are included in the metric calculation.
        /// </summary>
        [Input("actionDurationToMilliseconds")]
        public Input<int>? ActionDurationToMilliseconds { get; set; }

        /// <summary>
        /// Only actions with the specified Apdex score are included in the metric calculation. Possible values: [ Frustrated, Satisfied, Tolerating, Unknown ]
        /// </summary>
        [Input("apdex")]
        public Input<string>? Apdex { get; set; }

        /// <summary>
        /// Only actions coming from this app version are included in the metric calculation.
        /// </summary>
        [Input("appVersion")]
        public Input<string>? AppVersion { get; set; }

        /// <summary>
        /// Only actions coming from this carrier type are included in the metric calculation.
        /// </summary>
        [Input("carrier")]
        public Input<string>? Carrier { get; set; }

        /// <summary>
        /// Only actions of users from this city are included in the metric calculation. Specify geolocation ID here.
        /// </summary>
        [Input("city")]
        public Input<string>? City { get; set; }

        /// <summary>
        /// Only actions coming from this connection type are included in the metric calculation. Possible values: [ LAN, MOBILE, OFFLINE, UNKNOWN, WIFI ]
        /// </summary>
        [Input("connectionType")]
        public Input<string>? ConnectionType { get; set; }

        /// <summary>
        /// Only actions of users from this continent are included in the metric calculation. Specify geolocation ID here.
        /// </summary>
        [Input("continent")]
        public Input<string>? Continent { get; set; }

        /// <summary>
        /// Only actions of users from this country are included in the metric calculation. Specify geolocation ID here.
        /// </summary>
        [Input("country")]
        public Input<string>? Country { get; set; }

        /// <summary>
        /// Only actions coming from this app version are included in the metric calculation.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// The request error status of the actions to be included in the metric calculation: `True` or `False`
        /// </summary>
        [Input("hasHttpError")]
        public Input<bool>? HasHttpError { get; set; }

        /// <summary>
        /// The error status of the actions to be included in the metric calculation: `True` or `False`
        /// </summary>
        [Input("hasReportedError")]
        public Input<bool>? HasReportedError { get; set; }

        /// <summary>
        /// Only actions coming from this internet service provider are included in the metric calculation.
        /// </summary>
        [Input("isp")]
        public Input<string>? Isp { get; set; }

        /// <summary>
        /// Only actions coming from devices of this manufacturer are included in the metric calculation.
        /// </summary>
        [Input("manufacturer")]
        public Input<string>? Manufacturer { get; set; }

        /// <summary>
        /// Filter by network technology
        /// </summary>
        [Input("networkTechnology")]
        public Input<string>? NetworkTechnology { get; set; }

        /// <summary>
        /// Only actions coming from devices with this display orientation are included in the metric calculation. Possible values: [ LANDSCAPE, PORTRAIT, UNKNOWN ]
        /// </summary>
        [Input("orientation")]
        public Input<string>? Orientation { get; set; }

        /// <summary>
        /// Only actions coming from this OS family are included in the metric calculation.
        /// </summary>
        [Input("osFamily")]
        public Input<string>? OsFamily { get; set; }

        /// <summary>
        /// Only actions coming from this OS version are included in the metric calculation.
        /// </summary>
        [Input("osVersion")]
        public Input<string>? OsVersion { get; set; }

        /// <summary>
        /// Only actions of users from this region are included in the metric calculation. Specify geolocation ID here.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Only actions coming from devices with this display resolution are included in the metric calculation. Possible values: [ CGA, DCI2K, DCI4K, DVGA, FHD, FWVGA, FWXGA, GHDPlus, HD, HQVGA, HQVGA2, HSXGA, HUXGA, HVGA, HXGA, NTSC, PAL, QHD, QQVGA, QSXGA, QUXGA, QVGA, QWXGA, QXGA, SVGA, SXGA, SXGAMinus, SXGAPlus, UGA, UHD16K, UHD4K, UHD8K, UHDPlus, UNKNOWN, UWQHD, UXGA, VGA, WHSXGA, WHUXGA, WHXGA, WQSXGA, WQUXGA, WQVGA, WQVGA2, WQVGA3, WQXGA, WQXGA2, WSVGA, WSVGA2, WSXGA, WSXGAPlus, WUXGA, WVGA, WVGA2, WXGA, WXGA2, WXGA3, WXGAPlus, XGA, XGAPLUS, _1280x854, nHD, qHD ]
        /// </summary>
        [Input("resolution")]
        public Input<string>? Resolution { get; set; }

        /// <summary>
        /// Only actions with this name are included in the metric calculation.
        /// </summary>
        [Input("userActionName")]
        public Input<string>? UserActionName { get; set; }

        public CalculatedMobileMetricUserActionFilterArgs()
        {
        }
        public static new CalculatedMobileMetricUserActionFilterArgs Empty => new CalculatedMobileMetricUserActionFilterArgs();
    }
}
