// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace.Inputs
{

    public sealed class AutomationWorkflowTasksTaskGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the action type for the task. Examples include `dynatrace.automations:http-function`, `dynatrace.automations:run-javascript`, and `dynatrace.automations:execute-dql-query`. Additional action types are also supported.
        /// </summary>
        [Input("action", required: true)]
        public Input<string> Action { get; set; } = null!;

        /// <summary>
        /// Specifies whether a task should be skipped as a no operation or not
        /// </summary>
        [Input("active")]
        public Input<bool>? Active { get; set; }

        /// <summary>
        /// Required if `WithItems` is specified. By default loops execute sequentially with concurrency set to 1. You can increase how often it runs in parallel
        /// </summary>
        [Input("concurrency")]
        public Input<string>? Concurrency { get; set; }

        /// <summary>
        /// Conditions that have to be met in order to execute that task
        /// </summary>
        [Input("conditions")]
        public Input<Inputs.AutomationWorkflowTasksTaskConditionsGetArgs>? Conditions { get; set; }

        /// <summary>
        /// A description for this task
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Parameters and values for this task as JSON code. Contents depend on the kind of task - determined by the attribute `Action`
        /// </summary>
        [Input("input")]
        public Input<string>? Input { get; set; }

        /// <summary>
        /// The name of the task
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Layouting information about the task tile when visualized. If not specified Dynatrace will position the task tiles automatically
        /// </summary>
        [Input("position")]
        public Input<Inputs.AutomationWorkflowTasksTaskPositionGetArgs>? Position { get; set; }

        /// <summary>
        /// Configure whether to automatically rerun the task on failure. If not specified no retries will be attempted
        /// </summary>
        [Input("retry")]
        public Input<Inputs.AutomationWorkflowTasksTaskRetryGetArgs>? Retry { get; set; }

        /// <summary>
        /// Specifies a default task timeout in seconds. 15 * 60 (15min) is used when not set. Minimum 1. Maximum 604800
        /// </summary>
        [Input("timeout")]
        public Input<string>? Timeout { get; set; }

        /// <summary>
        /// Specifies a default task wait before in seconds. 0 is used when not set
        /// </summary>
        [Input("waitBefore")]
        public Input<string>? WaitBefore { get; set; }

        /// <summary>
        /// Iterates over items in a list, allowing actions to be executed repeatedly. Example: Specifying `item in [1, 2, 3]` here will execute the task three times for the numbers 1, 2 and 3 - with the current number available for scripting using the expression `{{ _.item }}`
        /// </summary>
        [Input("withItems")]
        public Input<string>? WithItems { get; set; }

        public AutomationWorkflowTasksTaskGetArgs()
        {
        }
        public static new AutomationWorkflowTasksTaskGetArgs Empty => new AutomationWorkflowTasksTaskGetArgs();
    }
}
