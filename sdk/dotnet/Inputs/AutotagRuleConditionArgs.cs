// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace.Inputs
{

    public sealed class AutotagRuleConditionArgs : global::Pulumi.ResourceArgs
    {
        [Input("applicationTypeComparisons")]
        private InputList<Inputs.AutotagRuleConditionApplicationTypeComparisonArgs>? _applicationTypeComparisons;

        /// <summary>
        /// Comparison for `APPLICATION_TYPE` attributes
        /// </summary>
        [Obsolete(@"You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionApplicationTypeComparisonArgs> ApplicationTypeComparisons
        {
            get => _applicationTypeComparisons ?? (_applicationTypeComparisons = new InputList<Inputs.AutotagRuleConditionApplicationTypeComparisonArgs>());
            set => _applicationTypeComparisons = value;
        }

        [Input("applicationTypes")]
        private InputList<Inputs.AutotagRuleConditionApplicationTypeArgs>? _applicationTypes;

        /// <summary>
        /// Comparison for `APPLICATION_TYPE` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionApplicationTypeArgs> ApplicationTypes
        {
            get => _applicationTypes ?? (_applicationTypes = new InputList<Inputs.AutotagRuleConditionApplicationTypeArgs>());
            set => _applicationTypes = value;
        }

        [Input("azureComputeModeComparisons")]
        private InputList<Inputs.AutotagRuleConditionAzureComputeModeComparisonArgs>? _azureComputeModeComparisons;

        /// <summary>
        /// Comparison for `AZURE_COMPUTE_MODE` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionAzureComputeModeComparisonArgs> AzureComputeModeComparisons
        {
            get => _azureComputeModeComparisons ?? (_azureComputeModeComparisons = new InputList<Inputs.AutotagRuleConditionAzureComputeModeComparisonArgs>());
            set => _azureComputeModeComparisons = value;
        }

        [Input("azureComputeModes")]
        private InputList<Inputs.AutotagRuleConditionAzureComputeModeArgs>? _azureComputeModes;

        /// <summary>
        /// Comparison for `AZURE_COMPUTE_MODE` attributes
        /// </summary>
        [Obsolete(@"You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionAzureComputeModeArgs> AzureComputeModes
        {
            get => _azureComputeModes ?? (_azureComputeModes = new InputList<Inputs.AutotagRuleConditionAzureComputeModeArgs>());
            set => _azureComputeModes = value;
        }

        [Input("azureSkuComparisions")]
        private InputList<Inputs.AutotagRuleConditionAzureSkuComparisionArgs>? _azureSkuComparisions;

        /// <summary>
        /// Comparison for `AZURE_SKU` attributes
        /// </summary>
        [Obsolete(@"You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionAzureSkuComparisionArgs> AzureSkuComparisions
        {
            get => _azureSkuComparisions ?? (_azureSkuComparisions = new InputList<Inputs.AutotagRuleConditionAzureSkuComparisionArgs>());
            set => _azureSkuComparisions = value;
        }

        [Input("azureSkus")]
        private InputList<Inputs.AutotagRuleConditionAzureSkusArgs>? _azureSkus;

        /// <summary>
        /// Comparison for `AZURE_SKU` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionAzureSkusArgs> AzureSkus
        {
            get => _azureSkus ?? (_azureSkus = new InputList<Inputs.AutotagRuleConditionAzureSkusArgs>());
            set => _azureSkus = value;
        }

        [Input("baseComparisonBasics")]
        private InputList<Inputs.AutotagRuleConditionBaseComparisonBasicArgs>? _baseComparisonBasics;

        /// <summary>
        /// A comparison that's yet unknown to the provider. Operator and Value need to be encoded using the 'unknowns' property.
        /// </summary>
        [Obsolete(@"You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionBaseComparisonBasicArgs> BaseComparisonBasics
        {
            get => _baseComparisonBasics ?? (_baseComparisonBasics = new InputList<Inputs.AutotagRuleConditionBaseComparisonBasicArgs>());
            set => _baseComparisonBasics = value;
        }

        [Input("baseConditionKeys")]
        private InputList<Inputs.AutotagRuleConditionBaseConditionKeyArgs>? _baseConditionKeys;

        /// <summary>
        /// Fallback for not yet known type
        /// </summary>
        [Obsolete(@"'base_condition_key' is deprecated. You should use 'key'")]
        public InputList<Inputs.AutotagRuleConditionBaseConditionKeyArgs> BaseConditionKeys
        {
            get => _baseConditionKeys ?? (_baseConditionKeys = new InputList<Inputs.AutotagRuleConditionBaseConditionKeyArgs>());
            set => _baseConditionKeys = value;
        }

        [Input("bitnessComparisions")]
        private InputList<Inputs.AutotagRuleConditionBitnessComparisionArgs>? _bitnessComparisions;

        /// <summary>
        /// Comparison for `BITNESS` attributes
        /// </summary>
        [Obsolete(@"You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionBitnessComparisionArgs> BitnessComparisions
        {
            get => _bitnessComparisions ?? (_bitnessComparisions = new InputList<Inputs.AutotagRuleConditionBitnessComparisionArgs>());
            set => _bitnessComparisions = value;
        }

        [Input("bitnesses")]
        private InputList<Inputs.AutotagRuleConditionBitnessArgs>? _bitnesses;

        /// <summary>
        /// Comparison for `BITNESS` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionBitnessArgs> Bitnesses
        {
            get => _bitnesses ?? (_bitnesses = new InputList<Inputs.AutotagRuleConditionBitnessArgs>());
            set => _bitnesses = value;
        }

        [Input("cloudTypeComparisons")]
        private InputList<Inputs.AutotagRuleConditionCloudTypeComparisonArgs>? _cloudTypeComparisons;

        /// <summary>
        /// Comparison for `CLOUD_TYPE` attributes
        /// </summary>
        [Obsolete(@"You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionCloudTypeComparisonArgs> CloudTypeComparisons
        {
            get => _cloudTypeComparisons ?? (_cloudTypeComparisons = new InputList<Inputs.AutotagRuleConditionCloudTypeComparisonArgs>());
            set => _cloudTypeComparisons = value;
        }

        [Input("cloudTypes")]
        private InputList<Inputs.AutotagRuleConditionCloudTypeArgs>? _cloudTypes;

        /// <summary>
        /// Comparison for `CLOUD_TYPE` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionCloudTypeArgs> CloudTypes
        {
            get => _cloudTypes ?? (_cloudTypes = new InputList<Inputs.AutotagRuleConditionCloudTypeArgs>());
            set => _cloudTypes = value;
        }

        [Input("comparisons")]
        private InputList<Inputs.AutotagRuleConditionComparisonArgs>? _comparisons;

        /// <summary>
        /// A comparison that's yet unknown to the provider. Operator and Value need to be encoded using the 'unknowns' property.
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionComparisonArgs> Comparisons
        {
            get => _comparisons ?? (_comparisons = new InputList<Inputs.AutotagRuleConditionComparisonArgs>());
            set => _comparisons = value;
        }

        [Input("customApplicationTypeComparisons")]
        private InputList<Inputs.AutotagRuleConditionCustomApplicationTypeComparisonArgs>? _customApplicationTypeComparisons;

        /// <summary>
        /// Comparison for `CUSTOM_APPLICATION_TYPE` attributes
        /// </summary>
        [Obsolete(@"You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionCustomApplicationTypeComparisonArgs> CustomApplicationTypeComparisons
        {
            get => _customApplicationTypeComparisons ?? (_customApplicationTypeComparisons = new InputList<Inputs.AutotagRuleConditionCustomApplicationTypeComparisonArgs>());
            set => _customApplicationTypeComparisons = value;
        }

        [Input("customApplicationTypes")]
        private InputList<Inputs.AutotagRuleConditionCustomApplicationTypeArgs>? _customApplicationTypes;

        /// <summary>
        /// Comparison for `CUSTOM_APPLICATION_TYPE` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionCustomApplicationTypeArgs> CustomApplicationTypes
        {
            get => _customApplicationTypes ?? (_customApplicationTypes = new InputList<Inputs.AutotagRuleConditionCustomApplicationTypeArgs>());
            set => _customApplicationTypes = value;
        }

        [Input("customHostMetadataConditionKeys")]
        private InputList<Inputs.AutotagRuleConditionCustomHostMetadataConditionKeyArgs>? _customHostMetadataConditionKeys;

        /// <summary>
        /// Key for Custom Host Metadata
        /// </summary>
        [Obsolete(@"'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata'")]
        public InputList<Inputs.AutotagRuleConditionCustomHostMetadataConditionKeyArgs> CustomHostMetadataConditionKeys
        {
            get => _customHostMetadataConditionKeys ?? (_customHostMetadataConditionKeys = new InputList<Inputs.AutotagRuleConditionCustomHostMetadataConditionKeyArgs>());
            set => _customHostMetadataConditionKeys = value;
        }

        [Input("customHostMetadatas")]
        private InputList<Inputs.AutotagRuleConditionCustomHostMetadataArgs>? _customHostMetadatas;

        /// <summary>
        /// Key for Custom Host Metadata
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionCustomHostMetadataArgs> CustomHostMetadatas
        {
            get => _customHostMetadatas ?? (_customHostMetadatas = new InputList<Inputs.AutotagRuleConditionCustomHostMetadataArgs>());
            set => _customHostMetadatas = value;
        }

        [Input("customProcessMetadataConditionKeys")]
        private InputList<Inputs.AutotagRuleConditionCustomProcessMetadataConditionKeyArgs>? _customProcessMetadataConditionKeys;

        /// <summary>
        /// Key for Custom Process Metadata
        /// </summary>
        [Obsolete(@"'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata'")]
        public InputList<Inputs.AutotagRuleConditionCustomProcessMetadataConditionKeyArgs> CustomProcessMetadataConditionKeys
        {
            get => _customProcessMetadataConditionKeys ?? (_customProcessMetadataConditionKeys = new InputList<Inputs.AutotagRuleConditionCustomProcessMetadataConditionKeyArgs>());
            set => _customProcessMetadataConditionKeys = value;
        }

        [Input("customProcessMetadatas")]
        private InputList<Inputs.AutotagRuleConditionCustomProcessMetadataArgs>? _customProcessMetadatas;

        /// <summary>
        /// Key for Custom Process Metadata
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionCustomProcessMetadataArgs> CustomProcessMetadatas
        {
            get => _customProcessMetadatas ?? (_customProcessMetadatas = new InputList<Inputs.AutotagRuleConditionCustomProcessMetadataArgs>());
            set => _customProcessMetadatas = value;
        }

        [Input("databaseTopologies")]
        private InputList<Inputs.AutotagRuleConditionDatabaseTopologyArgs>? _databaseTopologies;

        /// <summary>
        /// Comparison for `DATABASE_TOPOLOGY` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionDatabaseTopologyArgs> DatabaseTopologies
        {
            get => _databaseTopologies ?? (_databaseTopologies = new InputList<Inputs.AutotagRuleConditionDatabaseTopologyArgs>());
            set => _databaseTopologies = value;
        }

        [Input("databaseTopologyComparisons")]
        private InputList<Inputs.AutotagRuleConditionDatabaseTopologyComparisonArgs>? _databaseTopologyComparisons;

        /// <summary>
        /// Comparison for `DATABASE_TOPOLOGY` attributes
        /// </summary>
        [Obsolete(@"You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionDatabaseTopologyComparisonArgs> DatabaseTopologyComparisons
        {
            get => _databaseTopologyComparisons ?? (_databaseTopologyComparisons = new InputList<Inputs.AutotagRuleConditionDatabaseTopologyComparisonArgs>());
            set => _databaseTopologyComparisons = value;
        }

        [Input("dcrumDecoderComparisons")]
        private InputList<Inputs.AutotagRuleConditionDcrumDecoderComparisonArgs>? _dcrumDecoderComparisons;

        /// <summary>
        /// Comparison for `DCRUM_DECODER_TYPE` attributes
        /// </summary>
        [Obsolete(@"You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionDcrumDecoderComparisonArgs> DcrumDecoderComparisons
        {
            get => _dcrumDecoderComparisons ?? (_dcrumDecoderComparisons = new InputList<Inputs.AutotagRuleConditionDcrumDecoderComparisonArgs>());
            set => _dcrumDecoderComparisons = value;
        }

        [Input("dcrumDecoders")]
        private InputList<Inputs.AutotagRuleConditionDcrumDecoderArgs>? _dcrumDecoders;

        /// <summary>
        /// Comparison for `DCRUM_DECODER_TYPE` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionDcrumDecoderArgs> DcrumDecoders
        {
            get => _dcrumDecoders ?? (_dcrumDecoders = new InputList<Inputs.AutotagRuleConditionDcrumDecoderArgs>());
            set => _dcrumDecoders = value;
        }

        [Input("entities")]
        private InputList<Inputs.AutotagRuleConditionEntityArgs>? _entities;

        /// <summary>
        /// Comparison for `ENTITY_ID` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionEntityArgs> Entities
        {
            get => _entities ?? (_entities = new InputList<Inputs.AutotagRuleConditionEntityArgs>());
            set => _entities = value;
        }

        [Input("entityIdComparisons")]
        private InputList<Inputs.AutotagRuleConditionEntityIdComparisonArgs>? _entityIdComparisons;

        /// <summary>
        /// Comparison for `ENTITY_ID` attributes
        /// </summary>
        [Obsolete(@"You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionEntityIdComparisonArgs> EntityIdComparisons
        {
            get => _entityIdComparisons ?? (_entityIdComparisons = new InputList<Inputs.AutotagRuleConditionEntityIdComparisonArgs>());
            set => _entityIdComparisons = value;
        }

        [Input("hostTeches")]
        private InputList<Inputs.AutotagRuleConditionHostTechArgs>? _hostTeches;

        /// <summary>
        /// Comparison for `SIMPLE_HOST_TECH` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionHostTechArgs> HostTeches
        {
            get => _hostTeches ?? (_hostTeches = new InputList<Inputs.AutotagRuleConditionHostTechArgs>());
            set => _hostTeches = value;
        }

        [Input("hypervisorTypeComparisions")]
        private InputList<Inputs.AutotagRuleConditionHypervisorTypeComparisionArgs>? _hypervisorTypeComparisions;

        /// <summary>
        /// `HypervisorTypeComparision` is deprecated. Use `Hypervisor` instead
        /// </summary>
        [Obsolete(@"`HypervisorTypeComparision` is deprecated. Use `Hypervisor` instead")]
        public InputList<Inputs.AutotagRuleConditionHypervisorTypeComparisionArgs> HypervisorTypeComparisions
        {
            get => _hypervisorTypeComparisions ?? (_hypervisorTypeComparisions = new InputList<Inputs.AutotagRuleConditionHypervisorTypeComparisionArgs>());
            set => _hypervisorTypeComparisions = value;
        }

        [Input("hypervisors")]
        private InputList<Inputs.AutotagRuleConditionHypervisorArgs>? _hypervisors;

        /// <summary>
        /// Comparison for `HYPERVISOR_TYPE` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionHypervisorArgs> Hypervisors
        {
            get => _hypervisors ?? (_hypervisors = new InputList<Inputs.AutotagRuleConditionHypervisorArgs>());
            set => _hypervisors = value;
        }

        [Input("indexedNameComparisons")]
        private InputList<Inputs.AutotagRuleConditionIndexedNameComparisonArgs>? _indexedNameComparisons;

        /// <summary>
        /// Comparison for `INDEXED_NAME` attributes
        /// </summary>
        [Obsolete(@"You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionIndexedNameComparisonArgs> IndexedNameComparisons
        {
            get => _indexedNameComparisons ?? (_indexedNameComparisons = new InputList<Inputs.AutotagRuleConditionIndexedNameComparisonArgs>());
            set => _indexedNameComparisons = value;
        }

        [Input("indexedNames")]
        private InputList<Inputs.AutotagRuleConditionIndexedNameArgs>? _indexedNames;

        /// <summary>
        /// Comparison for `INDEXED_NAME` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionIndexedNameArgs> IndexedNames
        {
            get => _indexedNames ?? (_indexedNames = new InputList<Inputs.AutotagRuleConditionIndexedNameArgs>());
            set => _indexedNames = value;
        }

        [Input("indexedStringComparisons")]
        private InputList<Inputs.AutotagRuleConditionIndexedStringComparisonArgs>? _indexedStringComparisons;

        /// <summary>
        /// Comparison for `INDEXED_STRING` attributes
        /// </summary>
        [Obsolete(@"You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionIndexedStringComparisonArgs> IndexedStringComparisons
        {
            get => _indexedStringComparisons ?? (_indexedStringComparisons = new InputList<Inputs.AutotagRuleConditionIndexedStringComparisonArgs>());
            set => _indexedStringComparisons = value;
        }

        [Input("indexedStrings")]
        private InputList<Inputs.AutotagRuleConditionIndexedStringArgs>? _indexedStrings;

        /// <summary>
        /// Comparison for `INDEXED_STRING` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionIndexedStringArgs> IndexedStrings
        {
            get => _indexedStrings ?? (_indexedStrings = new InputList<Inputs.AutotagRuleConditionIndexedStringArgs>());
            set => _indexedStrings = value;
        }

        [Input("indexedTagComparisons")]
        private InputList<Inputs.AutotagRuleConditionIndexedTagComparisonArgs>? _indexedTagComparisons;

        /// <summary>
        /// Comparison for `INDEXED_TAG` attributes
        /// </summary>
        [Obsolete(@"You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionIndexedTagComparisonArgs> IndexedTagComparisons
        {
            get => _indexedTagComparisons ?? (_indexedTagComparisons = new InputList<Inputs.AutotagRuleConditionIndexedTagComparisonArgs>());
            set => _indexedTagComparisons = value;
        }

        [Input("indexedTags")]
        private InputList<Inputs.AutotagRuleConditionIndexedTagArgs>? _indexedTags;

        /// <summary>
        /// Comparison for `INDEXED_TAG` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionIndexedTagArgs> IndexedTags
        {
            get => _indexedTags ?? (_indexedTags = new InputList<Inputs.AutotagRuleConditionIndexedTagArgs>());
            set => _indexedTags = value;
        }

        [Input("integerComparisons")]
        private InputList<Inputs.AutotagRuleConditionIntegerComparisonArgs>? _integerComparisons;

        /// <summary>
        /// Comparison for `INTEGER` attributes
        /// </summary>
        [Obsolete(@"You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionIntegerComparisonArgs> IntegerComparisons
        {
            get => _integerComparisons ?? (_integerComparisons = new InputList<Inputs.AutotagRuleConditionIntegerComparisonArgs>());
            set => _integerComparisons = value;
        }

        [Input("integers")]
        private InputList<Inputs.AutotagRuleConditionIntegerArgs>? _integers;

        /// <summary>
        /// Comparison for `INTEGER` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionIntegerArgs> Integers
        {
            get => _integers ?? (_integers = new InputList<Inputs.AutotagRuleConditionIntegerArgs>());
            set => _integers = value;
        }

        [Input("ipaddressComparisons")]
        private InputList<Inputs.AutotagRuleConditionIpaddressComparisonArgs>? _ipaddressComparisons;

        /// <summary>
        /// Comparison for `IP_ADDRESS` attributes
        /// </summary>
        [Obsolete(@"You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionIpaddressComparisonArgs> IpaddressComparisons
        {
            get => _ipaddressComparisons ?? (_ipaddressComparisons = new InputList<Inputs.AutotagRuleConditionIpaddressComparisonArgs>());
            set => _ipaddressComparisons = value;
        }

        [Input("ipaddresses")]
        private InputList<Inputs.AutotagRuleConditionIpaddressArgs>? _ipaddresses;

        /// <summary>
        /// Comparison for `IP_ADDRESS` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionIpaddressArgs> Ipaddresses
        {
            get => _ipaddresses ?? (_ipaddresses = new InputList<Inputs.AutotagRuleConditionIpaddressArgs>());
            set => _ipaddresses = value;
        }

        [Input("keys")]
        private InputList<Inputs.AutotagRuleConditionKeyArgs>? _keys;

        /// <summary>
        /// Fallback for not yet known type
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionKeyArgs> Keys
        {
            get => _keys ?? (_keys = new InputList<Inputs.AutotagRuleConditionKeyArgs>());
            set => _keys = value;
        }

        [Input("mobilePlatformComparisons")]
        private InputList<Inputs.AutotagRuleConditionMobilePlatformComparisonArgs>? _mobilePlatformComparisons;

        /// <summary>
        /// Comparison for `MOBILE_PLATFORM` attributes
        /// </summary>
        [Obsolete(@"You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionMobilePlatformComparisonArgs> MobilePlatformComparisons
        {
            get => _mobilePlatformComparisons ?? (_mobilePlatformComparisons = new InputList<Inputs.AutotagRuleConditionMobilePlatformComparisonArgs>());
            set => _mobilePlatformComparisons = value;
        }

        [Input("mobilePlatforms")]
        private InputList<Inputs.AutotagRuleConditionMobilePlatformArgs>? _mobilePlatforms;

        /// <summary>
        /// Comparison for `MOBILE_PLATFORM` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionMobilePlatformArgs> MobilePlatforms
        {
            get => _mobilePlatforms ?? (_mobilePlatforms = new InputList<Inputs.AutotagRuleConditionMobilePlatformArgs>());
            set => _mobilePlatforms = value;
        }

        [Input("osArches")]
        private InputList<Inputs.AutotagRuleConditionOsArchArgs>? _osArches;

        /// <summary>
        /// Comparison for `OS_ARCHITECTURE` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionOsArchArgs> OsArches
        {
            get => _osArches ?? (_osArches = new InputList<Inputs.AutotagRuleConditionOsArchArgs>());
            set => _osArches = value;
        }

        [Input("osTypes")]
        private InputList<Inputs.AutotagRuleConditionOsTypeArgs>? _osTypes;

        /// <summary>
        /// Comparison for `OS_TYPE` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionOsTypeArgs> OsTypes
        {
            get => _osTypes ?? (_osTypes = new InputList<Inputs.AutotagRuleConditionOsTypeArgs>());
            set => _osTypes = value;
        }

        [Input("osarchitectureComparisons")]
        private InputList<Inputs.AutotagRuleConditionOsarchitectureComparisonArgs>? _osarchitectureComparisons;

        /// <summary>
        /// Comparison for `OS_ARCHITECTURE` attributes
        /// </summary>
        [Obsolete(@"You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionOsarchitectureComparisonArgs> OsarchitectureComparisons
        {
            get => _osarchitectureComparisons ?? (_osarchitectureComparisons = new InputList<Inputs.AutotagRuleConditionOsarchitectureComparisonArgs>());
            set => _osarchitectureComparisons = value;
        }

        [Input("ostypeComparisons")]
        private InputList<Inputs.AutotagRuleConditionOstypeComparisonArgs>? _ostypeComparisons;

        /// <summary>
        /// Comparison for `OS_TYPE` attributes
        /// </summary>
        [Obsolete(@"You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionOstypeComparisonArgs> OstypeComparisons
        {
            get => _ostypeComparisons ?? (_ostypeComparisons = new InputList<Inputs.AutotagRuleConditionOstypeComparisonArgs>());
            set => _ostypeComparisons = value;
        }

        [Input("paasTypeComparisons")]
        private InputList<Inputs.AutotagRuleConditionPaasTypeComparisonArgs>? _paasTypeComparisons;

        /// <summary>
        /// Comparison for `PAAS_TYPE` attributes
        /// </summary>
        [Obsolete(@"You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionPaasTypeComparisonArgs> PaasTypeComparisons
        {
            get => _paasTypeComparisons ?? (_paasTypeComparisons = new InputList<Inputs.AutotagRuleConditionPaasTypeComparisonArgs>());
            set => _paasTypeComparisons = value;
        }

        [Input("paasTypes")]
        private InputList<Inputs.AutotagRuleConditionPaasTypeArgs>? _paasTypes;

        /// <summary>
        /// Comparison for `PAAS_TYPE` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionPaasTypeArgs> PaasTypes
        {
            get => _paasTypes ?? (_paasTypes = new InputList<Inputs.AutotagRuleConditionPaasTypeArgs>());
            set => _paasTypes = value;
        }

        [Input("processMetadataConditionKeys")]
        private InputList<Inputs.AutotagRuleConditionProcessMetadataConditionKeyArgs>? _processMetadataConditionKeys;

        /// <summary>
        /// The key for dynamic attributes of the `PROCESS_PREDEFINED_METADATA_KEY` type
        /// </summary>
        [Obsolete(@"'process_metadata_condition_key' is deprecated. You should use 'process_metadata'")]
        public InputList<Inputs.AutotagRuleConditionProcessMetadataConditionKeyArgs> ProcessMetadataConditionKeys
        {
            get => _processMetadataConditionKeys ?? (_processMetadataConditionKeys = new InputList<Inputs.AutotagRuleConditionProcessMetadataConditionKeyArgs>());
            set => _processMetadataConditionKeys = value;
        }

        [Input("processMetadatas")]
        private InputList<Inputs.AutotagRuleConditionProcessMetadataArgs>? _processMetadatas;

        /// <summary>
        /// The key for dynamic attributes of the `PROCESS_PREDEFINED_METADATA_KEY` type
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionProcessMetadataArgs> ProcessMetadatas
        {
            get => _processMetadatas ?? (_processMetadatas = new InputList<Inputs.AutotagRuleConditionProcessMetadataArgs>());
            set => _processMetadatas = value;
        }

        [Input("serviceTopologies")]
        private InputList<Inputs.AutotagRuleConditionServiceTopologyArgs>? _serviceTopologies;

        /// <summary>
        /// Comparison for `SERVICE_TOPOLOGY` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionServiceTopologyArgs> ServiceTopologies
        {
            get => _serviceTopologies ?? (_serviceTopologies = new InputList<Inputs.AutotagRuleConditionServiceTopologyArgs>());
            set => _serviceTopologies = value;
        }

        [Input("serviceTopologyComparisons")]
        private InputList<Inputs.AutotagRuleConditionServiceTopologyComparisonArgs>? _serviceTopologyComparisons;

        /// <summary>
        /// Comparison for `SERVICE_TOPOLOGY` attributes
        /// </summary>
        [Obsolete(@"You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionServiceTopologyComparisonArgs> ServiceTopologyComparisons
        {
            get => _serviceTopologyComparisons ?? (_serviceTopologyComparisons = new InputList<Inputs.AutotagRuleConditionServiceTopologyComparisonArgs>());
            set => _serviceTopologyComparisons = value;
        }

        [Input("serviceTypeComparisons")]
        private InputList<Inputs.AutotagRuleConditionServiceTypeComparisonArgs>? _serviceTypeComparisons;

        /// <summary>
        /// Comparison for `SERVICE_TYPE` attributes
        /// </summary>
        [Obsolete(@"You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionServiceTypeComparisonArgs> ServiceTypeComparisons
        {
            get => _serviceTypeComparisons ?? (_serviceTypeComparisons = new InputList<Inputs.AutotagRuleConditionServiceTypeComparisonArgs>());
            set => _serviceTypeComparisons = value;
        }

        [Input("serviceTypes")]
        private InputList<Inputs.AutotagRuleConditionServiceTypeArgs>? _serviceTypes;

        /// <summary>
        /// Comparison for `SERVICE_TYPE` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionServiceTypeArgs> ServiceTypes
        {
            get => _serviceTypes ?? (_serviceTypes = new InputList<Inputs.AutotagRuleConditionServiceTypeArgs>());
            set => _serviceTypes = value;
        }

        [Input("simpleHostTechComparisons")]
        private InputList<Inputs.AutotagRuleConditionSimpleHostTechComparisonArgs>? _simpleHostTechComparisons;

        /// <summary>
        /// Comparison for `SIMPLE_HOST_TECH` attributes
        /// </summary>
        [Obsolete(@"You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionSimpleHostTechComparisonArgs> SimpleHostTechComparisons
        {
            get => _simpleHostTechComparisons ?? (_simpleHostTechComparisons = new InputList<Inputs.AutotagRuleConditionSimpleHostTechComparisonArgs>());
            set => _simpleHostTechComparisons = value;
        }

        [Input("simpleTechComparisons")]
        private InputList<Inputs.AutotagRuleConditionSimpleTechComparisonArgs>? _simpleTechComparisons;

        /// <summary>
        /// Comparison for `SIMPLE_TECH` attributes
        /// </summary>
        [Obsolete(@"You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionSimpleTechComparisonArgs> SimpleTechComparisons
        {
            get => _simpleTechComparisons ?? (_simpleTechComparisons = new InputList<Inputs.AutotagRuleConditionSimpleTechComparisonArgs>());
            set => _simpleTechComparisons = value;
        }

        [Input("stringComparisons")]
        private InputList<Inputs.AutotagRuleConditionStringComparisonArgs>? _stringComparisons;

        /// <summary>
        /// Comparison for `STRING` attributes
        /// </summary>
        [Obsolete(@"You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionStringComparisonArgs> StringComparisons
        {
            get => _stringComparisons ?? (_stringComparisons = new InputList<Inputs.AutotagRuleConditionStringComparisonArgs>());
            set => _stringComparisons = value;
        }

        [Input("stringConditionKeys")]
        private InputList<Inputs.AutotagRuleConditionStringConditionKeyArgs>? _stringConditionKeys;

        /// <summary>
        /// The key for dynamic attributes of the `STRING` type
        /// </summary>
        [Obsolete(@"'string_condition_key' is deprecated. You should use 'string_key'")]
        public InputList<Inputs.AutotagRuleConditionStringConditionKeyArgs> StringConditionKeys
        {
            get => _stringConditionKeys ?? (_stringConditionKeys = new InputList<Inputs.AutotagRuleConditionStringConditionKeyArgs>());
            set => _stringConditionKeys = value;
        }

        [Input("stringKeys")]
        private InputList<Inputs.AutotagRuleConditionStringKeyArgs>? _stringKeys;

        /// <summary>
        /// The key for dynamic attributes of the `STRING` type
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionStringKeyArgs> StringKeys
        {
            get => _stringKeys ?? (_stringKeys = new InputList<Inputs.AutotagRuleConditionStringKeyArgs>());
            set => _stringKeys = value;
        }

        [Input("strings")]
        private InputList<Inputs.AutotagRuleConditionStringArgs>? _strings;

        /// <summary>
        /// Comparison for `STRING` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionStringArgs> Strings
        {
            get => _strings ?? (_strings = new InputList<Inputs.AutotagRuleConditionStringArgs>());
            set => _strings = value;
        }

        [Input("syntheticEngineTypeComparisons")]
        private InputList<Inputs.AutotagRuleConditionSyntheticEngineTypeComparisonArgs>? _syntheticEngineTypeComparisons;

        /// <summary>
        /// Comparison for `SYNTHETIC_ENGINE_TYPE` attributes
        /// </summary>
        [Obsolete(@"You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionSyntheticEngineTypeComparisonArgs> SyntheticEngineTypeComparisons
        {
            get => _syntheticEngineTypeComparisons ?? (_syntheticEngineTypeComparisons = new InputList<Inputs.AutotagRuleConditionSyntheticEngineTypeComparisonArgs>());
            set => _syntheticEngineTypeComparisons = value;
        }

        [Input("syntheticEngines")]
        private InputList<Inputs.AutotagRuleConditionSyntheticEngineArgs>? _syntheticEngines;

        /// <summary>
        /// Comparison for `SYNTHETIC_ENGINE_TYPE` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionSyntheticEngineArgs> SyntheticEngines
        {
            get => _syntheticEngines ?? (_syntheticEngines = new InputList<Inputs.AutotagRuleConditionSyntheticEngineArgs>());
            set => _syntheticEngines = value;
        }

        [Input("tagComparisons")]
        private InputList<Inputs.AutotagRuleConditionTagComparisonArgs>? _tagComparisons;

        /// <summary>
        /// Comparison for `TAG` attributes
        /// </summary>
        [Obsolete(@"You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.AutotagRuleConditionTagComparisonArgs> TagComparisons
        {
            get => _tagComparisons ?? (_tagComparisons = new InputList<Inputs.AutotagRuleConditionTagComparisonArgs>());
            set => _tagComparisons = value;
        }

        [Input("tags")]
        private InputList<Inputs.AutotagRuleConditionTagArgs>? _tags;

        /// <summary>
        /// Comparison for `TAG` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.AutotagRuleConditionTagArgs>());
            set => _tags = value;
        }

        [Input("teches")]
        private InputList<Inputs.AutotagRuleConditionTechArgs>? _teches;

        /// <summary>
        /// Comparison for `SIMPLE_TECH` attributes
        /// </summary>
        public InputList<Inputs.AutotagRuleConditionTechArgs> Teches
        {
            get => _teches ?? (_teches = new InputList<Inputs.AutotagRuleConditionTechArgs>());
            set => _teches = value;
        }

        /// <summary>
        /// Any attributes that aren't yet supported by this provider
        /// </summary>
        [Input("unknowns")]
        public Input<string>? Unknowns { get; set; }

        public AutotagRuleConditionArgs()
        {
        }
        public static new AutotagRuleConditionArgs Empty => new AutotagRuleConditionArgs();
    }
}
