// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace.Inputs
{

    public sealed class HostNamingConditionConditionArgs : global::Pulumi.ResourceArgs
    {
        [Input("applicationTypeComparisons")]
        private InputList<Inputs.HostNamingConditionConditionApplicationTypeComparisonArgs>? _applicationTypeComparisons;

        /// <summary>
        /// Comparison for `APPLICATION_TYPE` attributes
        /// </summary>
        [Obsolete(@"You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.HostNamingConditionConditionApplicationTypeComparisonArgs> ApplicationTypeComparisons
        {
            get => _applicationTypeComparisons ?? (_applicationTypeComparisons = new InputList<Inputs.HostNamingConditionConditionApplicationTypeComparisonArgs>());
            set => _applicationTypeComparisons = value;
        }

        [Input("applicationTypes")]
        private InputList<Inputs.HostNamingConditionConditionApplicationTypeArgs>? _applicationTypes;

        /// <summary>
        /// Comparison for `APPLICATION_TYPE` attributes
        /// </summary>
        public InputList<Inputs.HostNamingConditionConditionApplicationTypeArgs> ApplicationTypes
        {
            get => _applicationTypes ?? (_applicationTypes = new InputList<Inputs.HostNamingConditionConditionApplicationTypeArgs>());
            set => _applicationTypes = value;
        }

        [Input("azureComputeModeComparisons")]
        private InputList<Inputs.HostNamingConditionConditionAzureComputeModeComparisonArgs>? _azureComputeModeComparisons;

        /// <summary>
        /// Comparison for `AZURE_COMPUTE_MODE` attributes
        /// </summary>
        public InputList<Inputs.HostNamingConditionConditionAzureComputeModeComparisonArgs> AzureComputeModeComparisons
        {
            get => _azureComputeModeComparisons ?? (_azureComputeModeComparisons = new InputList<Inputs.HostNamingConditionConditionAzureComputeModeComparisonArgs>());
            set => _azureComputeModeComparisons = value;
        }

        [Input("azureComputeModes")]
        private InputList<Inputs.HostNamingConditionConditionAzureComputeModeArgs>? _azureComputeModes;

        /// <summary>
        /// Comparison for `AZURE_COMPUTE_MODE` attributes
        /// </summary>
        [Obsolete(@"You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.HostNamingConditionConditionAzureComputeModeArgs> AzureComputeModes
        {
            get => _azureComputeModes ?? (_azureComputeModes = new InputList<Inputs.HostNamingConditionConditionAzureComputeModeArgs>());
            set => _azureComputeModes = value;
        }

        [Input("azureSkuComparisions")]
        private InputList<Inputs.HostNamingConditionConditionAzureSkuComparisionArgs>? _azureSkuComparisions;

        /// <summary>
        /// Comparison for `AZURE_SKU` attributes
        /// </summary>
        [Obsolete(@"You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.HostNamingConditionConditionAzureSkuComparisionArgs> AzureSkuComparisions
        {
            get => _azureSkuComparisions ?? (_azureSkuComparisions = new InputList<Inputs.HostNamingConditionConditionAzureSkuComparisionArgs>());
            set => _azureSkuComparisions = value;
        }

        [Input("azureSkus")]
        private InputList<Inputs.HostNamingConditionConditionAzureSkusArgs>? _azureSkus;

        /// <summary>
        /// Comparison for `AZURE_SKU` attributes
        /// </summary>
        public InputList<Inputs.HostNamingConditionConditionAzureSkusArgs> AzureSkus
        {
            get => _azureSkus ?? (_azureSkus = new InputList<Inputs.HostNamingConditionConditionAzureSkusArgs>());
            set => _azureSkus = value;
        }

        [Input("baseComparisonBasics")]
        private InputList<Inputs.HostNamingConditionConditionBaseComparisonBasicArgs>? _baseComparisonBasics;

        /// <summary>
        /// A comparison that's yet unknown to the provider. Operator and Value need to be encoded using the 'unknowns' property.
        /// </summary>
        [Obsolete(@"You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.HostNamingConditionConditionBaseComparisonBasicArgs> BaseComparisonBasics
        {
            get => _baseComparisonBasics ?? (_baseComparisonBasics = new InputList<Inputs.HostNamingConditionConditionBaseComparisonBasicArgs>());
            set => _baseComparisonBasics = value;
        }

        [Input("baseConditionKeys")]
        private InputList<Inputs.HostNamingConditionConditionBaseConditionKeyArgs>? _baseConditionKeys;

        /// <summary>
        /// Fallback for not yet known type
        /// </summary>
        [Obsolete(@"'base_condition_key' is deprecated. You should use 'key'")]
        public InputList<Inputs.HostNamingConditionConditionBaseConditionKeyArgs> BaseConditionKeys
        {
            get => _baseConditionKeys ?? (_baseConditionKeys = new InputList<Inputs.HostNamingConditionConditionBaseConditionKeyArgs>());
            set => _baseConditionKeys = value;
        }

        [Input("bitnessComparisions")]
        private InputList<Inputs.HostNamingConditionConditionBitnessComparisionArgs>? _bitnessComparisions;

        /// <summary>
        /// Comparison for `BITNESS` attributes
        /// </summary>
        [Obsolete(@"You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.HostNamingConditionConditionBitnessComparisionArgs> BitnessComparisions
        {
            get => _bitnessComparisions ?? (_bitnessComparisions = new InputList<Inputs.HostNamingConditionConditionBitnessComparisionArgs>());
            set => _bitnessComparisions = value;
        }

        [Input("bitnesses")]
        private InputList<Inputs.HostNamingConditionConditionBitnessArgs>? _bitnesses;

        /// <summary>
        /// Comparison for `BITNESS` attributes
        /// </summary>
        public InputList<Inputs.HostNamingConditionConditionBitnessArgs> Bitnesses
        {
            get => _bitnesses ?? (_bitnesses = new InputList<Inputs.HostNamingConditionConditionBitnessArgs>());
            set => _bitnesses = value;
        }

        [Input("cloudTypeComparisons")]
        private InputList<Inputs.HostNamingConditionConditionCloudTypeComparisonArgs>? _cloudTypeComparisons;

        /// <summary>
        /// Comparison for `CLOUD_TYPE` attributes
        /// </summary>
        [Obsolete(@"You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.HostNamingConditionConditionCloudTypeComparisonArgs> CloudTypeComparisons
        {
            get => _cloudTypeComparisons ?? (_cloudTypeComparisons = new InputList<Inputs.HostNamingConditionConditionCloudTypeComparisonArgs>());
            set => _cloudTypeComparisons = value;
        }

        [Input("cloudTypes")]
        private InputList<Inputs.HostNamingConditionConditionCloudTypeArgs>? _cloudTypes;

        /// <summary>
        /// Comparison for `CLOUD_TYPE` attributes
        /// </summary>
        public InputList<Inputs.HostNamingConditionConditionCloudTypeArgs> CloudTypes
        {
            get => _cloudTypes ?? (_cloudTypes = new InputList<Inputs.HostNamingConditionConditionCloudTypeArgs>());
            set => _cloudTypes = value;
        }

        [Input("comparisons")]
        private InputList<Inputs.HostNamingConditionConditionComparisonArgs>? _comparisons;

        /// <summary>
        /// A comparison that's yet unknown to the provider. Operator and Value need to be encoded using the 'unknowns' property.
        /// </summary>
        public InputList<Inputs.HostNamingConditionConditionComparisonArgs> Comparisons
        {
            get => _comparisons ?? (_comparisons = new InputList<Inputs.HostNamingConditionConditionComparisonArgs>());
            set => _comparisons = value;
        }

        [Input("customApplicationTypeComparisons")]
        private InputList<Inputs.HostNamingConditionConditionCustomApplicationTypeComparisonArgs>? _customApplicationTypeComparisons;

        /// <summary>
        /// Comparison for `CUSTOM_APPLICATION_TYPE` attributes
        /// </summary>
        [Obsolete(@"You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.HostNamingConditionConditionCustomApplicationTypeComparisonArgs> CustomApplicationTypeComparisons
        {
            get => _customApplicationTypeComparisons ?? (_customApplicationTypeComparisons = new InputList<Inputs.HostNamingConditionConditionCustomApplicationTypeComparisonArgs>());
            set => _customApplicationTypeComparisons = value;
        }

        [Input("customApplicationTypes")]
        private InputList<Inputs.HostNamingConditionConditionCustomApplicationTypeArgs>? _customApplicationTypes;

        /// <summary>
        /// Comparison for `CUSTOM_APPLICATION_TYPE` attributes
        /// </summary>
        public InputList<Inputs.HostNamingConditionConditionCustomApplicationTypeArgs> CustomApplicationTypes
        {
            get => _customApplicationTypes ?? (_customApplicationTypes = new InputList<Inputs.HostNamingConditionConditionCustomApplicationTypeArgs>());
            set => _customApplicationTypes = value;
        }

        [Input("customHostMetadataConditionKeys")]
        private InputList<Inputs.HostNamingConditionConditionCustomHostMetadataConditionKeyArgs>? _customHostMetadataConditionKeys;

        /// <summary>
        /// Key for Custom Host Metadata
        /// </summary>
        [Obsolete(@"'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata'")]
        public InputList<Inputs.HostNamingConditionConditionCustomHostMetadataConditionKeyArgs> CustomHostMetadataConditionKeys
        {
            get => _customHostMetadataConditionKeys ?? (_customHostMetadataConditionKeys = new InputList<Inputs.HostNamingConditionConditionCustomHostMetadataConditionKeyArgs>());
            set => _customHostMetadataConditionKeys = value;
        }

        [Input("customHostMetadatas")]
        private InputList<Inputs.HostNamingConditionConditionCustomHostMetadataArgs>? _customHostMetadatas;

        /// <summary>
        /// Key for Custom Host Metadata
        /// </summary>
        public InputList<Inputs.HostNamingConditionConditionCustomHostMetadataArgs> CustomHostMetadatas
        {
            get => _customHostMetadatas ?? (_customHostMetadatas = new InputList<Inputs.HostNamingConditionConditionCustomHostMetadataArgs>());
            set => _customHostMetadatas = value;
        }

        [Input("customProcessMetadataConditionKeys")]
        private InputList<Inputs.HostNamingConditionConditionCustomProcessMetadataConditionKeyArgs>? _customProcessMetadataConditionKeys;

        /// <summary>
        /// Key for Custom Process Metadata
        /// </summary>
        [Obsolete(@"'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata'")]
        public InputList<Inputs.HostNamingConditionConditionCustomProcessMetadataConditionKeyArgs> CustomProcessMetadataConditionKeys
        {
            get => _customProcessMetadataConditionKeys ?? (_customProcessMetadataConditionKeys = new InputList<Inputs.HostNamingConditionConditionCustomProcessMetadataConditionKeyArgs>());
            set => _customProcessMetadataConditionKeys = value;
        }

        [Input("customProcessMetadatas")]
        private InputList<Inputs.HostNamingConditionConditionCustomProcessMetadataArgs>? _customProcessMetadatas;

        /// <summary>
        /// Key for Custom Process Metadata
        /// </summary>
        public InputList<Inputs.HostNamingConditionConditionCustomProcessMetadataArgs> CustomProcessMetadatas
        {
            get => _customProcessMetadatas ?? (_customProcessMetadatas = new InputList<Inputs.HostNamingConditionConditionCustomProcessMetadataArgs>());
            set => _customProcessMetadatas = value;
        }

        [Input("databaseTopologies")]
        private InputList<Inputs.HostNamingConditionConditionDatabaseTopologyArgs>? _databaseTopologies;

        /// <summary>
        /// Comparison for `DATABASE_TOPOLOGY` attributes
        /// </summary>
        public InputList<Inputs.HostNamingConditionConditionDatabaseTopologyArgs> DatabaseTopologies
        {
            get => _databaseTopologies ?? (_databaseTopologies = new InputList<Inputs.HostNamingConditionConditionDatabaseTopologyArgs>());
            set => _databaseTopologies = value;
        }

        [Input("databaseTopologyComparisons")]
        private InputList<Inputs.HostNamingConditionConditionDatabaseTopologyComparisonArgs>? _databaseTopologyComparisons;

        /// <summary>
        /// Comparison for `DATABASE_TOPOLOGY` attributes
        /// </summary>
        [Obsolete(@"You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.HostNamingConditionConditionDatabaseTopologyComparisonArgs> DatabaseTopologyComparisons
        {
            get => _databaseTopologyComparisons ?? (_databaseTopologyComparisons = new InputList<Inputs.HostNamingConditionConditionDatabaseTopologyComparisonArgs>());
            set => _databaseTopologyComparisons = value;
        }

        [Input("dcrumDecoderComparisons")]
        private InputList<Inputs.HostNamingConditionConditionDcrumDecoderComparisonArgs>? _dcrumDecoderComparisons;

        /// <summary>
        /// Comparison for `DCRUM_DECODER_TYPE` attributes
        /// </summary>
        [Obsolete(@"You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.HostNamingConditionConditionDcrumDecoderComparisonArgs> DcrumDecoderComparisons
        {
            get => _dcrumDecoderComparisons ?? (_dcrumDecoderComparisons = new InputList<Inputs.HostNamingConditionConditionDcrumDecoderComparisonArgs>());
            set => _dcrumDecoderComparisons = value;
        }

        [Input("dcrumDecoders")]
        private InputList<Inputs.HostNamingConditionConditionDcrumDecoderArgs>? _dcrumDecoders;

        /// <summary>
        /// Comparison for `DCRUM_DECODER_TYPE` attributes
        /// </summary>
        public InputList<Inputs.HostNamingConditionConditionDcrumDecoderArgs> DcrumDecoders
        {
            get => _dcrumDecoders ?? (_dcrumDecoders = new InputList<Inputs.HostNamingConditionConditionDcrumDecoderArgs>());
            set => _dcrumDecoders = value;
        }

        [Input("entities")]
        private InputList<Inputs.HostNamingConditionConditionEntityArgs>? _entities;

        /// <summary>
        /// Comparison for `ENTITY_ID` attributes
        /// </summary>
        public InputList<Inputs.HostNamingConditionConditionEntityArgs> Entities
        {
            get => _entities ?? (_entities = new InputList<Inputs.HostNamingConditionConditionEntityArgs>());
            set => _entities = value;
        }

        [Input("entityIdComparisons")]
        private InputList<Inputs.HostNamingConditionConditionEntityIdComparisonArgs>? _entityIdComparisons;

        /// <summary>
        /// Comparison for `ENTITY_ID` attributes
        /// </summary>
        [Obsolete(@"You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.HostNamingConditionConditionEntityIdComparisonArgs> EntityIdComparisons
        {
            get => _entityIdComparisons ?? (_entityIdComparisons = new InputList<Inputs.HostNamingConditionConditionEntityIdComparisonArgs>());
            set => _entityIdComparisons = value;
        }

        [Input("hostTeches")]
        private InputList<Inputs.HostNamingConditionConditionHostTechArgs>? _hostTeches;

        /// <summary>
        /// Comparison for `SIMPLE_HOST_TECH` attributes
        /// </summary>
        public InputList<Inputs.HostNamingConditionConditionHostTechArgs> HostTeches
        {
            get => _hostTeches ?? (_hostTeches = new InputList<Inputs.HostNamingConditionConditionHostTechArgs>());
            set => _hostTeches = value;
        }

        [Input("hypervisorTypeComparisions")]
        private InputList<Inputs.HostNamingConditionConditionHypervisorTypeComparisionArgs>? _hypervisorTypeComparisions;

        /// <summary>
        /// `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead
        /// </summary>
        [Obsolete(@"`hypervisor_type_comparision` is deprecated. Use `hypervisor` instead")]
        public InputList<Inputs.HostNamingConditionConditionHypervisorTypeComparisionArgs> HypervisorTypeComparisions
        {
            get => _hypervisorTypeComparisions ?? (_hypervisorTypeComparisions = new InputList<Inputs.HostNamingConditionConditionHypervisorTypeComparisionArgs>());
            set => _hypervisorTypeComparisions = value;
        }

        [Input("hypervisors")]
        private InputList<Inputs.HostNamingConditionConditionHypervisorArgs>? _hypervisors;

        /// <summary>
        /// Comparison for `HYPERVISOR_TYPE` attributes
        /// </summary>
        public InputList<Inputs.HostNamingConditionConditionHypervisorArgs> Hypervisors
        {
            get => _hypervisors ?? (_hypervisors = new InputList<Inputs.HostNamingConditionConditionHypervisorArgs>());
            set => _hypervisors = value;
        }

        [Input("indexedNameComparisons")]
        private InputList<Inputs.HostNamingConditionConditionIndexedNameComparisonArgs>? _indexedNameComparisons;

        /// <summary>
        /// Comparison for `INDEXED_NAME` attributes
        /// </summary>
        [Obsolete(@"You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.HostNamingConditionConditionIndexedNameComparisonArgs> IndexedNameComparisons
        {
            get => _indexedNameComparisons ?? (_indexedNameComparisons = new InputList<Inputs.HostNamingConditionConditionIndexedNameComparisonArgs>());
            set => _indexedNameComparisons = value;
        }

        [Input("indexedNames")]
        private InputList<Inputs.HostNamingConditionConditionIndexedNameArgs>? _indexedNames;

        /// <summary>
        /// Comparison for `INDEXED_NAME` attributes
        /// </summary>
        public InputList<Inputs.HostNamingConditionConditionIndexedNameArgs> IndexedNames
        {
            get => _indexedNames ?? (_indexedNames = new InputList<Inputs.HostNamingConditionConditionIndexedNameArgs>());
            set => _indexedNames = value;
        }

        [Input("indexedStringComparisons")]
        private InputList<Inputs.HostNamingConditionConditionIndexedStringComparisonArgs>? _indexedStringComparisons;

        /// <summary>
        /// Comparison for `INDEXED_STRING` attributes
        /// </summary>
        [Obsolete(@"You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.HostNamingConditionConditionIndexedStringComparisonArgs> IndexedStringComparisons
        {
            get => _indexedStringComparisons ?? (_indexedStringComparisons = new InputList<Inputs.HostNamingConditionConditionIndexedStringComparisonArgs>());
            set => _indexedStringComparisons = value;
        }

        [Input("indexedStrings")]
        private InputList<Inputs.HostNamingConditionConditionIndexedStringArgs>? _indexedStrings;

        /// <summary>
        /// Comparison for `INDEXED_STRING` attributes
        /// </summary>
        public InputList<Inputs.HostNamingConditionConditionIndexedStringArgs> IndexedStrings
        {
            get => _indexedStrings ?? (_indexedStrings = new InputList<Inputs.HostNamingConditionConditionIndexedStringArgs>());
            set => _indexedStrings = value;
        }

        [Input("indexedTagComparisons")]
        private InputList<Inputs.HostNamingConditionConditionIndexedTagComparisonArgs>? _indexedTagComparisons;

        /// <summary>
        /// Comparison for `INDEXED_TAG` attributes
        /// </summary>
        [Obsolete(@"You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.HostNamingConditionConditionIndexedTagComparisonArgs> IndexedTagComparisons
        {
            get => _indexedTagComparisons ?? (_indexedTagComparisons = new InputList<Inputs.HostNamingConditionConditionIndexedTagComparisonArgs>());
            set => _indexedTagComparisons = value;
        }

        [Input("indexedTags")]
        private InputList<Inputs.HostNamingConditionConditionIndexedTagArgs>? _indexedTags;

        /// <summary>
        /// Comparison for `INDEXED_TAG` attributes
        /// </summary>
        public InputList<Inputs.HostNamingConditionConditionIndexedTagArgs> IndexedTags
        {
            get => _indexedTags ?? (_indexedTags = new InputList<Inputs.HostNamingConditionConditionIndexedTagArgs>());
            set => _indexedTags = value;
        }

        [Input("integerComparisons")]
        private InputList<Inputs.HostNamingConditionConditionIntegerComparisonArgs>? _integerComparisons;

        /// <summary>
        /// Comparison for `INTEGER` attributes
        /// </summary>
        [Obsolete(@"You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.HostNamingConditionConditionIntegerComparisonArgs> IntegerComparisons
        {
            get => _integerComparisons ?? (_integerComparisons = new InputList<Inputs.HostNamingConditionConditionIntegerComparisonArgs>());
            set => _integerComparisons = value;
        }

        [Input("integers")]
        private InputList<Inputs.HostNamingConditionConditionIntegerArgs>? _integers;

        /// <summary>
        /// Comparison for `INTEGER` attributes
        /// </summary>
        public InputList<Inputs.HostNamingConditionConditionIntegerArgs> Integers
        {
            get => _integers ?? (_integers = new InputList<Inputs.HostNamingConditionConditionIntegerArgs>());
            set => _integers = value;
        }

        [Input("ipaddressComparisons")]
        private InputList<Inputs.HostNamingConditionConditionIpaddressComparisonArgs>? _ipaddressComparisons;

        /// <summary>
        /// Comparison for `IP_ADDRESS` attributes
        /// </summary>
        [Obsolete(@"You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.HostNamingConditionConditionIpaddressComparisonArgs> IpaddressComparisons
        {
            get => _ipaddressComparisons ?? (_ipaddressComparisons = new InputList<Inputs.HostNamingConditionConditionIpaddressComparisonArgs>());
            set => _ipaddressComparisons = value;
        }

        [Input("ipaddresses")]
        private InputList<Inputs.HostNamingConditionConditionIpaddressArgs>? _ipaddresses;

        /// <summary>
        /// Comparison for `IP_ADDRESS` attributes
        /// </summary>
        public InputList<Inputs.HostNamingConditionConditionIpaddressArgs> Ipaddresses
        {
            get => _ipaddresses ?? (_ipaddresses = new InputList<Inputs.HostNamingConditionConditionIpaddressArgs>());
            set => _ipaddresses = value;
        }

        [Input("keys")]
        private InputList<Inputs.HostNamingConditionConditionKeyArgs>? _keys;

        /// <summary>
        /// Fallback for not yet known type
        /// </summary>
        public InputList<Inputs.HostNamingConditionConditionKeyArgs> Keys
        {
            get => _keys ?? (_keys = new InputList<Inputs.HostNamingConditionConditionKeyArgs>());
            set => _keys = value;
        }

        [Input("mobilePlatformComparisons")]
        private InputList<Inputs.HostNamingConditionConditionMobilePlatformComparisonArgs>? _mobilePlatformComparisons;

        /// <summary>
        /// Comparison for `MOBILE_PLATFORM` attributes
        /// </summary>
        [Obsolete(@"You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.HostNamingConditionConditionMobilePlatformComparisonArgs> MobilePlatformComparisons
        {
            get => _mobilePlatformComparisons ?? (_mobilePlatformComparisons = new InputList<Inputs.HostNamingConditionConditionMobilePlatformComparisonArgs>());
            set => _mobilePlatformComparisons = value;
        }

        [Input("mobilePlatforms")]
        private InputList<Inputs.HostNamingConditionConditionMobilePlatformArgs>? _mobilePlatforms;

        /// <summary>
        /// Comparison for `MOBILE_PLATFORM` attributes
        /// </summary>
        public InputList<Inputs.HostNamingConditionConditionMobilePlatformArgs> MobilePlatforms
        {
            get => _mobilePlatforms ?? (_mobilePlatforms = new InputList<Inputs.HostNamingConditionConditionMobilePlatformArgs>());
            set => _mobilePlatforms = value;
        }

        [Input("osArches")]
        private InputList<Inputs.HostNamingConditionConditionOsArchArgs>? _osArches;

        /// <summary>
        /// Comparison for `OS_ARCHITECTURE` attributes
        /// </summary>
        public InputList<Inputs.HostNamingConditionConditionOsArchArgs> OsArches
        {
            get => _osArches ?? (_osArches = new InputList<Inputs.HostNamingConditionConditionOsArchArgs>());
            set => _osArches = value;
        }

        [Input("osTypes")]
        private InputList<Inputs.HostNamingConditionConditionOsTypeArgs>? _osTypes;

        /// <summary>
        /// Comparison for `OS_TYPE` attributes
        /// </summary>
        public InputList<Inputs.HostNamingConditionConditionOsTypeArgs> OsTypes
        {
            get => _osTypes ?? (_osTypes = new InputList<Inputs.HostNamingConditionConditionOsTypeArgs>());
            set => _osTypes = value;
        }

        [Input("osarchitectureComparisons")]
        private InputList<Inputs.HostNamingConditionConditionOsarchitectureComparisonArgs>? _osarchitectureComparisons;

        /// <summary>
        /// Comparison for `OS_ARCHITECTURE` attributes
        /// </summary>
        [Obsolete(@"You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.HostNamingConditionConditionOsarchitectureComparisonArgs> OsarchitectureComparisons
        {
            get => _osarchitectureComparisons ?? (_osarchitectureComparisons = new InputList<Inputs.HostNamingConditionConditionOsarchitectureComparisonArgs>());
            set => _osarchitectureComparisons = value;
        }

        [Input("ostypeComparisons")]
        private InputList<Inputs.HostNamingConditionConditionOstypeComparisonArgs>? _ostypeComparisons;

        /// <summary>
        /// Comparison for `OS_TYPE` attributes
        /// </summary>
        [Obsolete(@"You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.HostNamingConditionConditionOstypeComparisonArgs> OstypeComparisons
        {
            get => _ostypeComparisons ?? (_ostypeComparisons = new InputList<Inputs.HostNamingConditionConditionOstypeComparisonArgs>());
            set => _ostypeComparisons = value;
        }

        [Input("paasTypeComparisons")]
        private InputList<Inputs.HostNamingConditionConditionPaasTypeComparisonArgs>? _paasTypeComparisons;

        /// <summary>
        /// Comparison for `PAAS_TYPE` attributes
        /// </summary>
        [Obsolete(@"You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.HostNamingConditionConditionPaasTypeComparisonArgs> PaasTypeComparisons
        {
            get => _paasTypeComparisons ?? (_paasTypeComparisons = new InputList<Inputs.HostNamingConditionConditionPaasTypeComparisonArgs>());
            set => _paasTypeComparisons = value;
        }

        [Input("paasTypes")]
        private InputList<Inputs.HostNamingConditionConditionPaasTypeArgs>? _paasTypes;

        /// <summary>
        /// Comparison for `PAAS_TYPE` attributes
        /// </summary>
        public InputList<Inputs.HostNamingConditionConditionPaasTypeArgs> PaasTypes
        {
            get => _paasTypes ?? (_paasTypes = new InputList<Inputs.HostNamingConditionConditionPaasTypeArgs>());
            set => _paasTypes = value;
        }

        [Input("processMetadataConditionKeys")]
        private InputList<Inputs.HostNamingConditionConditionProcessMetadataConditionKeyArgs>? _processMetadataConditionKeys;

        /// <summary>
        /// The key for dynamic attributes of the `PROCESS_PREDEFINED_METADATA_KEY` type
        /// </summary>
        [Obsolete(@"'process_metadata_condition_key' is deprecated. You should use 'process_metadata'")]
        public InputList<Inputs.HostNamingConditionConditionProcessMetadataConditionKeyArgs> ProcessMetadataConditionKeys
        {
            get => _processMetadataConditionKeys ?? (_processMetadataConditionKeys = new InputList<Inputs.HostNamingConditionConditionProcessMetadataConditionKeyArgs>());
            set => _processMetadataConditionKeys = value;
        }

        [Input("processMetadatas")]
        private InputList<Inputs.HostNamingConditionConditionProcessMetadataArgs>? _processMetadatas;

        /// <summary>
        /// The key for dynamic attributes of the `PROCESS_PREDEFINED_METADATA_KEY` type
        /// </summary>
        public InputList<Inputs.HostNamingConditionConditionProcessMetadataArgs> ProcessMetadatas
        {
            get => _processMetadatas ?? (_processMetadatas = new InputList<Inputs.HostNamingConditionConditionProcessMetadataArgs>());
            set => _processMetadatas = value;
        }

        [Input("serviceTopologies")]
        private InputList<Inputs.HostNamingConditionConditionServiceTopologyArgs>? _serviceTopologies;

        /// <summary>
        /// Comparison for `SERVICE_TOPOLOGY` attributes
        /// </summary>
        public InputList<Inputs.HostNamingConditionConditionServiceTopologyArgs> ServiceTopologies
        {
            get => _serviceTopologies ?? (_serviceTopologies = new InputList<Inputs.HostNamingConditionConditionServiceTopologyArgs>());
            set => _serviceTopologies = value;
        }

        [Input("serviceTopologyComparisons")]
        private InputList<Inputs.HostNamingConditionConditionServiceTopologyComparisonArgs>? _serviceTopologyComparisons;

        /// <summary>
        /// Comparison for `SERVICE_TOPOLOGY` attributes
        /// </summary>
        [Obsolete(@"You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.HostNamingConditionConditionServiceTopologyComparisonArgs> ServiceTopologyComparisons
        {
            get => _serviceTopologyComparisons ?? (_serviceTopologyComparisons = new InputList<Inputs.HostNamingConditionConditionServiceTopologyComparisonArgs>());
            set => _serviceTopologyComparisons = value;
        }

        [Input("serviceTypeComparisons")]
        private InputList<Inputs.HostNamingConditionConditionServiceTypeComparisonArgs>? _serviceTypeComparisons;

        /// <summary>
        /// Comparison for `SERVICE_TYPE` attributes
        /// </summary>
        [Obsolete(@"You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.HostNamingConditionConditionServiceTypeComparisonArgs> ServiceTypeComparisons
        {
            get => _serviceTypeComparisons ?? (_serviceTypeComparisons = new InputList<Inputs.HostNamingConditionConditionServiceTypeComparisonArgs>());
            set => _serviceTypeComparisons = value;
        }

        [Input("serviceTypes")]
        private InputList<Inputs.HostNamingConditionConditionServiceTypeArgs>? _serviceTypes;

        /// <summary>
        /// Comparison for `SERVICE_TYPE` attributes
        /// </summary>
        public InputList<Inputs.HostNamingConditionConditionServiceTypeArgs> ServiceTypes
        {
            get => _serviceTypes ?? (_serviceTypes = new InputList<Inputs.HostNamingConditionConditionServiceTypeArgs>());
            set => _serviceTypes = value;
        }

        [Input("simpleHostTechComparisons")]
        private InputList<Inputs.HostNamingConditionConditionSimpleHostTechComparisonArgs>? _simpleHostTechComparisons;

        /// <summary>
        /// Comparison for `SIMPLE_HOST_TECH` attributes
        /// </summary>
        [Obsolete(@"You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.HostNamingConditionConditionSimpleHostTechComparisonArgs> SimpleHostTechComparisons
        {
            get => _simpleHostTechComparisons ?? (_simpleHostTechComparisons = new InputList<Inputs.HostNamingConditionConditionSimpleHostTechComparisonArgs>());
            set => _simpleHostTechComparisons = value;
        }

        [Input("simpleTechComparisons")]
        private InputList<Inputs.HostNamingConditionConditionSimpleTechComparisonArgs>? _simpleTechComparisons;

        /// <summary>
        /// Comparison for `SIMPLE_TECH` attributes
        /// </summary>
        [Obsolete(@"You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.HostNamingConditionConditionSimpleTechComparisonArgs> SimpleTechComparisons
        {
            get => _simpleTechComparisons ?? (_simpleTechComparisons = new InputList<Inputs.HostNamingConditionConditionSimpleTechComparisonArgs>());
            set => _simpleTechComparisons = value;
        }

        [Input("stringComparisons")]
        private InputList<Inputs.HostNamingConditionConditionStringComparisonArgs>? _stringComparisons;

        /// <summary>
        /// Comparison for `STRING` attributes
        /// </summary>
        [Obsolete(@"You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.HostNamingConditionConditionStringComparisonArgs> StringComparisons
        {
            get => _stringComparisons ?? (_stringComparisons = new InputList<Inputs.HostNamingConditionConditionStringComparisonArgs>());
            set => _stringComparisons = value;
        }

        [Input("stringConditionKeys")]
        private InputList<Inputs.HostNamingConditionConditionStringConditionKeyArgs>? _stringConditionKeys;

        /// <summary>
        /// The key for dynamic attributes of the `STRING` type
        /// </summary>
        [Obsolete(@"'string_condition_key' is deprecated. You should use 'string_key'")]
        public InputList<Inputs.HostNamingConditionConditionStringConditionKeyArgs> StringConditionKeys
        {
            get => _stringConditionKeys ?? (_stringConditionKeys = new InputList<Inputs.HostNamingConditionConditionStringConditionKeyArgs>());
            set => _stringConditionKeys = value;
        }

        [Input("stringKeys")]
        private InputList<Inputs.HostNamingConditionConditionStringKeyArgs>? _stringKeys;

        /// <summary>
        /// The key for dynamic attributes of the `STRING` type
        /// </summary>
        public InputList<Inputs.HostNamingConditionConditionStringKeyArgs> StringKeys
        {
            get => _stringKeys ?? (_stringKeys = new InputList<Inputs.HostNamingConditionConditionStringKeyArgs>());
            set => _stringKeys = value;
        }

        [Input("strings")]
        private InputList<Inputs.HostNamingConditionConditionStringArgs>? _strings;

        /// <summary>
        /// Comparison for `STRING` attributes
        /// </summary>
        public InputList<Inputs.HostNamingConditionConditionStringArgs> Strings
        {
            get => _strings ?? (_strings = new InputList<Inputs.HostNamingConditionConditionStringArgs>());
            set => _strings = value;
        }

        [Input("syntheticEngineTypeComparisons")]
        private InputList<Inputs.HostNamingConditionConditionSyntheticEngineTypeComparisonArgs>? _syntheticEngineTypeComparisons;

        /// <summary>
        /// Comparison for `SYNTHETIC_ENGINE_TYPE` attributes
        /// </summary>
        [Obsolete(@"You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.HostNamingConditionConditionSyntheticEngineTypeComparisonArgs> SyntheticEngineTypeComparisons
        {
            get => _syntheticEngineTypeComparisons ?? (_syntheticEngineTypeComparisons = new InputList<Inputs.HostNamingConditionConditionSyntheticEngineTypeComparisonArgs>());
            set => _syntheticEngineTypeComparisons = value;
        }

        [Input("syntheticEngines")]
        private InputList<Inputs.HostNamingConditionConditionSyntheticEngineArgs>? _syntheticEngines;

        /// <summary>
        /// Comparison for `SYNTHETIC_ENGINE_TYPE` attributes
        /// </summary>
        public InputList<Inputs.HostNamingConditionConditionSyntheticEngineArgs> SyntheticEngines
        {
            get => _syntheticEngines ?? (_syntheticEngines = new InputList<Inputs.HostNamingConditionConditionSyntheticEngineArgs>());
            set => _syntheticEngines = value;
        }

        [Input("tagComparisons")]
        private InputList<Inputs.HostNamingConditionConditionTagComparisonArgs>? _tagComparisons;

        /// <summary>
        /// Comparison for `TAG` attributes
        /// </summary>
        [Obsolete(@"You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility.")]
        public InputList<Inputs.HostNamingConditionConditionTagComparisonArgs> TagComparisons
        {
            get => _tagComparisons ?? (_tagComparisons = new InputList<Inputs.HostNamingConditionConditionTagComparisonArgs>());
            set => _tagComparisons = value;
        }

        [Input("tags")]
        private InputList<Inputs.HostNamingConditionConditionTagArgs>? _tags;

        /// <summary>
        /// Comparison for `TAG` attributes
        /// </summary>
        public InputList<Inputs.HostNamingConditionConditionTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.HostNamingConditionConditionTagArgs>());
            set => _tags = value;
        }

        [Input("teches")]
        private InputList<Inputs.HostNamingConditionConditionTechArgs>? _teches;

        /// <summary>
        /// Comparison for `SIMPLE_TECH` attributes
        /// </summary>
        public InputList<Inputs.HostNamingConditionConditionTechArgs> Teches
        {
            get => _teches ?? (_teches = new InputList<Inputs.HostNamingConditionConditionTechArgs>());
            set => _teches = value;
        }

        /// <summary>
        /// Any attributes that aren't yet supported by this provider
        /// </summary>
        [Input("unknowns")]
        public Input<string>? Unknowns { get; set; }

        public HostNamingConditionConditionArgs()
        {
        }
        public static new HostNamingConditionConditionArgs Empty => new HostNamingConditionConditionArgs();
    }
}
