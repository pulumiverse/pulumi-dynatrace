// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace.Inputs
{

    public sealed class CalculatedWebMetricUserActionFilterGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Only actions with a duration more than or equal to this value (in milliseconds) are included in the metric calculation.
        /// </summary>
        [Input("actionDurationFromMilliseconds")]
        public Input<int>? ActionDurationFromMilliseconds { get; set; }

        /// <summary>
        /// Only actions with a duration less than or equal to this value (in milliseconds) are included in the metric calculation.
        /// </summary>
        [Input("actionDurationToMilliseconds")]
        public Input<int>? ActionDurationToMilliseconds { get; set; }

        /// <summary>
        /// Only actions with the specified Apdex score are included in the metric calculation. Possible values: [ Frustrated, Satisfied, Tolerating, Unknown ]
        /// </summary>
        [Input("apdex")]
        public Input<string>? Apdex { get; set; }

        /// <summary>
        /// Only user actions coming from the specified browser family are included in the metric calculation.
        /// </summary>
        [Input("browserFamily")]
        public Input<string>? BrowserFamily { get; set; }

        /// <summary>
        /// Only user actions coming from the specified browser type are included in the metric calculation.
        /// </summary>
        [Input("browserType")]
        public Input<string>? BrowserType { get; set; }

        /// <summary>
        /// Only user actions coming from the specified browser version are included in the metric calculation.
        /// </summary>
        [Input("browserVersion")]
        public Input<string>? BrowserVersion { get; set; }

        /// <summary>
        /// Only actions of users from this city are included in the metric calculation. Specify geolocation ID here.
        /// </summary>
        [Input("city")]
        public Input<string>? City { get; set; }

        /// <summary>
        /// Only actions of users from this continent are included in the metric calculation. Specify geolocation ID here.
        /// </summary>
        [Input("continent")]
        public Input<string>? Continent { get; set; }

        /// <summary>
        /// Only actions of users from this country are included in the metric calculation. Specify geolocation ID here.
        /// </summary>
        [Input("country")]
        public Input<string>? Country { get; set; }

        /// <summary>
        /// The status of custom actions in the metric calculation: `true` or `false`
        /// </summary>
        [Input("customAction")]
        public Input<bool>? CustomAction { get; set; }

        /// <summary>
        /// The custom error name of the actions to be included in the metric calculation.
        /// </summary>
        [Input("customErrorName")]
        public Input<string>? CustomErrorName { get; set; }

        /// <summary>
        /// The custom error type of the actions to be included in the metric calculation.
        /// </summary>
        [Input("customErrorType")]
        public Input<string>? CustomErrorType { get; set; }

        /// <summary>
        /// Only user actions coming from the specified domain are included in the metric calculation.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// The error status of the actions to be included in the metric calculation: `true` or `false`
        /// </summary>
        [Input("hasAnyError")]
        public Input<bool>? HasAnyError { get; set; }

        /// <summary>
        /// The custom error status of the actions to be included in the metric calculation: `true` or `false`
        /// </summary>
        [Input("hasCustomErrors")]
        public Input<bool>? HasCustomErrors { get; set; }

        /// <summary>
        /// The request error status of the actions to be included in the metric calculation: `true` or `false`
        /// </summary>
        [Input("hasHttpErrors")]
        public Input<bool>? HasHttpErrors { get; set; }

        /// <summary>
        /// The JavaScript error status of the actions to be included in the metric calculation: `true` or `false`
        /// </summary>
        [Input("hasJavascriptErrors")]
        public Input<bool>? HasJavascriptErrors { get; set; }

        /// <summary>
        /// The HTTP error status code of the actions to be included in the metric calculation.
        /// </summary>
        [Input("httpErrorCode")]
        public Input<int>? HttpErrorCode { get; set; }

        /// <summary>
        /// Can be used in combination with httpErrorCode to define a range of error codes that will be included in the metric calculation.
        /// </summary>
        [Input("httpErrorCodeTo")]
        public Input<int>? HttpErrorCodeTo { get; set; }

        /// <summary>
        /// The request path that has been determined to be the origin of an HTTP error of the actions to be included in the metric calculation.
        /// </summary>
        [Input("httpPath")]
        public Input<string>? HttpPath { get; set; }

        /// <summary>
        /// Only actions coming from this IP address are included in the metric calculation.
        /// </summary>
        [Input("ip")]
        public Input<string>? Ip { get; set; }

        /// <summary>
        /// The IPv6 status of the actions to be included in the metric calculation: `true` or `false`
        /// </summary>
        [Input("ipV6Traffic")]
        public Input<bool>? IpV6Traffic { get; set; }

        /// <summary>
        /// The status of load actions in the metric calculation: `true` or `false`
        /// </summary>
        [Input("loadAction")]
        public Input<bool>? LoadAction { get; set; }

        /// <summary>
        /// Only actions coming from this OS family are included in the metric calculation.
        /// </summary>
        [Input("osFamily")]
        public Input<string>? OsFamily { get; set; }

        /// <summary>
        /// Only actions coming from this OS version are included in the metric calculation.
        /// </summary>
        [Input("osVersion")]
        public Input<string>? OsVersion { get; set; }

        /// <summary>
        /// The status of actions coming from real users in the metric calculation: `true` or `false`
        /// </summary>
        [Input("realUser")]
        public Input<bool>? RealUser { get; set; }

        /// <summary>
        /// Only actions of users from this region are included in the metric calculation. Specify geolocation ID here.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The status of actions coming from robots in the metric calculation: `true` or `false`
        /// </summary>
        [Input("robot")]
        public Input<bool>? Robot { get; set; }

        /// <summary>
        /// The status of actions coming from synthetic monitors in the metric calculation: `true` or `false`
        /// </summary>
        [Input("synthetic")]
        public Input<bool>? Synthetic { get; set; }

        /// <summary>
        /// Only actions on the specified group of views are included in the metric calculation.
        /// </summary>
        [Input("targetViewGroup")]
        public Input<string>? TargetViewGroup { get; set; }

        /// <summary>
        /// Specifies the match type of the view group filter, e.g. using Contains or Equals. Defaults to Equals.
        /// </summary>
        [Input("targetViewGroupNameMatchType")]
        public Input<string>? TargetViewGroupNameMatchType { get; set; }

        /// <summary>
        /// Only actions on the specified view are included in the metric calculation.
        /// </summary>
        [Input("targetViewName")]
        public Input<string>? TargetViewName { get; set; }

        /// <summary>
        /// Specifies the match type of the view name filter, e.g. using Contains or Equals. Defaults to Equals.
        /// </summary>
        [Input("targetViewNameMatchType")]
        public Input<string>? TargetViewNameMatchType { get; set; }

        /// <summary>
        /// Only actions with this name are included in the metric calculation.
        /// </summary>
        [Input("userActionName")]
        public Input<string>? UserActionName { get; set; }

        [Input("userActionProperties")]
        private InputList<Inputs.CalculatedWebMetricUserActionFilterUserActionPropertyGetArgs>? _userActionProperties;

        /// <summary>
        /// The definition of a calculated web metric.
        /// </summary>
        public InputList<Inputs.CalculatedWebMetricUserActionFilterUserActionPropertyGetArgs> UserActionProperties
        {
            get => _userActionProperties ?? (_userActionProperties = new InputList<Inputs.CalculatedWebMetricUserActionFilterUserActionPropertyGetArgs>());
            set => _userActionProperties = value;
        }

        /// <summary>
        /// The status of xhr actions in the metric calculation: `true` or `false`
        /// </summary>
        [Input("xhrAction")]
        public Input<bool>? XhrAction { get; set; }

        /// <summary>
        /// The status of route actions in the metric calculation: `true` or `false`
        /// </summary>
        [Input("xhrRouteChangeAction")]
        public Input<bool>? XhrRouteChangeAction { get; set; }

        public CalculatedWebMetricUserActionFilterGetArgs()
        {
        }
        public static new CalculatedWebMetricUserActionFilterGetArgs Empty => new CalculatedWebMetricUserActionFilterGetArgs();
    }
}
