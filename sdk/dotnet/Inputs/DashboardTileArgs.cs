// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace.Inputs
{

    public sealed class DashboardTileArgs : global::Pulumi.ResourceArgs
    {
        [Input("assignedEntities")]
        private InputList<string>? _assignedEntities;

        /// <summary>
        /// The list of Dynatrace entities, assigned to the tile
        /// </summary>
        public InputList<string> AssignedEntities
        {
            get => _assignedEntities ?? (_assignedEntities = new InputList<string>());
            set => _assignedEntities = value;
        }

        /// <summary>
        /// Auto Refresh is disabled (`True`)
        /// </summary>
        [Input("autoRefreshDisabled")]
        public Input<bool>? AutoRefreshDisabled { get; set; }

        /// <summary>
        /// the position and size of a tile
        /// </summary>
        [Input("bounds")]
        public Input<Inputs.DashboardTileBoundsArgs>? Bounds { get; set; }

        [Input("chartVisible")]
        public Input<bool>? ChartVisible { get; set; }

        /// <summary>
        /// The tile is configured and ready to use (`True`) or just placed on the dashboard (`False`)
        /// </summary>
        [Input("configured")]
        public Input<bool>? Configured { get; set; }

        /// <summary>
        /// The name of the tile, set by user
        /// </summary>
        [Input("customName")]
        public Input<string>? CustomName { get; set; }

        /// <summary>
        /// Include (`false') or exclude (`True`) maintenance windows from availability calculations
        /// </summary>
        [Input("excludeMaintenanceWindows")]
        public Input<bool>? ExcludeMaintenanceWindows { get; set; }

        /// <summary>
        /// is filter applied to a tile. It overrides dashboard's filter
        /// </summary>
        [Input("filter")]
        public Input<Inputs.DashboardTileFilterArgs>? Filter { get; set; }

        /// <summary>
        /// the position and size of a tile
        /// </summary>
        [Input("filterConfig")]
        public Input<Inputs.DashboardTileFilterConfigArgs>? FilterConfig { get; set; }

        /// <summary>
        /// The limit of the results, if not set will use the default value of the system
        /// </summary>
        [Input("limit")]
        public Input<int>? Limit { get; set; }

        /// <summary>
        /// The markdown-formatted content of the tile
        /// </summary>
        [Input("markdown")]
        public Input<string>? Markdown { get; set; }

        /// <summary>
        /// The metric assigned to the tile
        /// </summary>
        [Input("metric")]
        public Input<string>? Metric { get; set; }

        /// <summary>
        /// the name of the tile
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The size of the tile name. Possible values are `Small`, `Medium` and `Large`.
        /// </summary>
        [Input("nameSize")]
        public Input<string>? NameSize { get; set; }

        /// <summary>
        /// A [user session query](https://www.dynatrace.com/support/help/shortlink/usql-info) executed by the tile
        /// </summary>
        [Input("query")]
        public Input<string>? Query { get; set; }

        /// <summary>
        /// the type of the tile. Must be either `APPLICATION_WORLDMAP`, `RESOURCES`, `THIRD_PARTY_MOST_ACTIVE`, `UEM_CONVERSIONS_PER_GOAL`, `PROCESS_GROUPS_ONE` or `HOST` .
        /// </summary>
        [Input("tileType", required: true)]
        public Input<string> TileType { get; set; } = null!;

        /// <summary>
        /// The comparison timeframe of the query. If specified, you additionally get the results of the same query with the specified time shift
        /// </summary>
        [Input("timeFrameShift")]
        public Input<string>? TimeFrameShift { get; set; }

        /// <summary>
        /// The attribute `Type` exists for backwards compatibilty. Usage is discouraged. You should use `Visualization` instead.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// allows for configuring properties that are not explicitly supported by the current version of this provider
        /// </summary>
        [Input("unknowns")]
        public Input<string>? Unknowns { get; set; }

        /// <summary>
        /// The visualization of the tile. Possible values are: `COLUMN_CHART`, `FUNNEL`, `LINE_CHART`, `PIE_CHART`, `SINGLE_VALUE`, `TABLE`
        /// </summary>
        [Input("visualization")]
        public Input<string>? Visualization { get; set; }

        /// <summary>
        /// Configuration of a User session query visualization tile
        /// </summary>
        [Input("visualizationConfig")]
        public Input<Inputs.DashboardTileVisualizationConfigArgs>? VisualizationConfig { get; set; }

        public DashboardTileArgs()
        {
        }
        public static new DashboardTileArgs Empty => new DashboardTileArgs();
    }
}
