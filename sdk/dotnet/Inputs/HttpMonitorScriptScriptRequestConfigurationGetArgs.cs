// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace.Inputs
{

    public sealed class HttpMonitorScriptScriptRequestConfigurationGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If set to `false`, then the monitor fails with invalid SSL certificates.
        /// </summary>
        [Input("acceptAnyCertificate")]
        public Input<bool>? AcceptAnyCertificate { get; set; }

        [Input("clientCertificate")]
        private Input<string>? _clientCertificate;

        /// <summary>
        /// The client certificate, if applicable - eg. CREDENTIALS_VAULT-XXXXXXXXXXXXXXXX
        /// </summary>
        public Input<string>? ClientCertificate
        {
            get => _clientCertificate;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientCertificate = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// If set to `false`, redirects are reported as successful requests with response code 3xx.
        /// 
        /// If not set, the `false` option is used.
        /// </summary>
        [Input("followRedirects")]
        public Input<bool>? FollowRedirects { get; set; }

        /// <summary>
        /// The setup of the monitor
        /// </summary>
        [Input("headers")]
        public Input<Inputs.HttpMonitorScriptScriptRequestConfigurationHeadersGetArgs>? Headers { get; set; }

        /// <summary>
        /// Option not to store and display request and response bodies and header values in execution details, `true` or `false`. If not set, `false`.
        /// </summary>
        [Input("sensitiveData")]
        public Input<bool>? SensitiveData { get; set; }

        /// <summary>
        /// The User agent of the request
        /// </summary>
        [Input("userAgent")]
        public Input<string>? UserAgent { get; set; }

        public HttpMonitorScriptScriptRequestConfigurationGetArgs()
        {
        }
        public static new HttpMonitorScriptScriptRequestConfigurationGetArgs Empty => new HttpMonitorScriptScriptRequestConfigurationGetArgs();
    }
}
