// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace.Inputs
{

    public sealed class OpenpipelineUserSessionsPipelinesPipelineMetricExtractionProcessorSamplingAwareValueMetricExtractionProcessorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates whether aggregation is considered for metric extraction. Possible values: 'DISABLED', 'ENABLED'
        /// </summary>
        [Input("aggregation")]
        public Input<string>? Aggregation { get; set; }

        /// <summary>
        /// The default value to use if the given field value could not be extracted. String value must be a number
        /// </summary>
        [Input("defaultValue")]
        public Input<string>? DefaultValue { get; set; }

        /// <summary>
        /// Name or description of the processor
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        [Input("dimensions")]
        private InputList<string>? _dimensions;

        /// <summary>
        /// List of unique dimensions to add to the metric.
        /// Dimensions are represented in the format '({dimensionName}=)?{sourceField}'.
        /// '{dimensionName}' is optional if {sourceField} represents a valid metric dimension name.
        /// '{sourceField}' has to represent a valid DQL field accessor and it can access a nested field (for example, 'field[field2][0]')
        /// </summary>
        public InputList<string> Dimensions
        {
            get => _dimensions ?? (_dimensions = new InputList<string>());
            set => _dimensions = value;
        }

        /// <summary>
        /// Indicates if the object is active
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// The field from which to extract the value for the metric, or 'null' for a duration measurement
        /// </summary>
        [Input("field")]
        public Input<string>? Field { get; set; }

        /// <summary>
        /// Identifier of the processor. Must be unique within a stage.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        /// <summary>
        /// Matching condition to apply on incoming records
        /// </summary>
        [Input("matcher", required: true)]
        public Input<string> Matcher { get; set; } = null!;

        /// <summary>
        /// Indicates whether the metric value should be the specified field or duration. Possible values: 'DURATION', 'FIELD'
        /// </summary>
        [Input("measurement", required: true)]
        public Input<string> Measurement { get; set; } = null!;

        /// <summary>
        /// The key of the metric to write
        /// </summary>
        [Input("metricKey", required: true)]
        public Input<string> MetricKey { get; set; } = null!;

        /// <summary>
        /// Sample data related to the processor for documentation or testing
        /// </summary>
        [Input("sampleData")]
        public Input<string>? SampleData { get; set; }

        /// <summary>
        /// Indicates whether sampling is considered for metric extraction. Possible values: 'DISABLED', 'ENABLED'
        /// </summary>
        [Input("sampling")]
        public Input<string>? Sampling { get; set; }

        public OpenpipelineUserSessionsPipelinesPipelineMetricExtractionProcessorSamplingAwareValueMetricExtractionProcessorArgs()
        {
        }
        public static new OpenpipelineUserSessionsPipelinesPipelineMetricExtractionProcessorSamplingAwareValueMetricExtractionProcessorArgs Empty => new OpenpipelineUserSessionsPipelinesPipelineMetricExtractionProcessorSamplingAwareValueMetricExtractionProcessorArgs();
    }
}
