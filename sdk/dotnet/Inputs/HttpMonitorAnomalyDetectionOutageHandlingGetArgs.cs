// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace.Inputs
{

    public sealed class HttpMonitorAnomalyDetectionOutageHandlingGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Field has overlap with `dynatrace.BrowserMonitorOutage` and `dynatrace.HttpMonitorOutage`) When enabled (`True`), generate a problem and send an alert when the monitor is unavailable at all configured locations
        /// </summary>
        [Input("globalOutage")]
        public Input<bool>? GlobalOutage { get; set; }

        [Input("globalOutagePolicies")]
        private InputList<Inputs.HttpMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicyGetArgs>? _globalOutagePolicies;

        /// <summary>
        /// (Field has overlap with `dynatrace.BrowserMonitorOutage` and `dynatrace.HttpMonitorOutage`) Global outage handling configuration.
        /// </summary>
        public InputList<Inputs.HttpMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicyGetArgs> GlobalOutagePolicies
        {
            get => _globalOutagePolicies ?? (_globalOutagePolicies = new InputList<Inputs.HttpMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicyGetArgs>());
            set => _globalOutagePolicies = value;
        }

        /// <summary>
        /// (Field has overlap with `dynatrace.BrowserMonitorOutage` and `dynatrace.HttpMonitorOutage`) When enabled (`True`), generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location
        /// </summary>
        [Input("localOutage")]
        public Input<bool>? LocalOutage { get; set; }

        [Input("localOutagePolicies")]
        private InputList<Inputs.HttpMonitorAnomalyDetectionOutageHandlingLocalOutagePolicyGetArgs>? _localOutagePolicies;

        /// <summary>
        /// (Field has overlap with `dynatrace.BrowserMonitorOutage` and `dynatrace.HttpMonitorOutage`) Local outage handling configuration. 
        /// 
        ///  Alert if **affectedLocations** of locations are unable to access the web application **consecutiveRuns** times consecutively
        /// </summary>
        public InputList<Inputs.HttpMonitorAnomalyDetectionOutageHandlingLocalOutagePolicyGetArgs> LocalOutagePolicies
        {
            get => _localOutagePolicies ?? (_localOutagePolicies = new InputList<Inputs.HttpMonitorAnomalyDetectionOutageHandlingLocalOutagePolicyGetArgs>());
            set => _localOutagePolicies = value;
        }

        /// <summary>
        /// (Field has overlap with `dynatrace.BrowserMonitorOutage` and `dynatrace.HttpMonitorOutage`) Schedule retry if browser monitor execution results in a fail. For HTTP monitors this property is ignored
        /// </summary>
        [Input("retryOnError")]
        public Input<bool>? RetryOnError { get; set; }

        public HttpMonitorAnomalyDetectionOutageHandlingGetArgs()
        {
        }
        public static new HttpMonitorAnomalyDetectionOutageHandlingGetArgs Empty => new HttpMonitorAnomalyDetectionOutageHandlingGetArgs();
    }
}
