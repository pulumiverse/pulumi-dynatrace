// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace.Inputs
{

    public sealed class AutomationSchedulingRuleRecurrenceGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The recurrence start. Example: `2017-07-04` represents July 4th 2017
        /// </summary>
        [Input("datestart", required: true)]
        public Input<string> Datestart { get; set; } = null!;

        [Input("daysInMonths")]
        private InputList<int>? _daysInMonths;

        /// <summary>
        /// Restricts the recurrence to specific days within a month. `1`, `2`, `3`, ... refers to the first, second, third day in the month. You can also specify negative values to refer to values relative to the last day. `-1` refers to the last day, `-2` refers to the second to the last day, ...
        /// </summary>
        public InputList<int> DaysInMonths
        {
            get => _daysInMonths ?? (_daysInMonths = new InputList<int>());
            set => _daysInMonths = value;
        }

        [Input("daysInYears")]
        private InputList<int>? _daysInYears;

        /// <summary>
        /// Restricts the recurrence to specific days within a year. `1`, `2`, `3`, ... refers to the first, second, third day of the year. You can also specify negative values to refer to values relative to the last day. `-1` refers to the last day, `-2` refers to the second to the last day, ...
        /// </summary>
        public InputList<int> DaysInYears
        {
            get => _daysInYears ?? (_daysInYears = new InputList<int>());
            set => _daysInYears = value;
        }

        [Input("easters")]
        private InputList<int>? _easters;

        /// <summary>
        /// Restricts the recurrence to specific days relative to Easter Sunday. `0` will yield the Easter Sunday itself
        /// </summary>
        public InputList<int> Easters
        {
            get => _easters ?? (_easters = new InputList<int>());
            set => _easters = value;
        }

        /// <summary>
        /// Possible values are `YEARLY`, `MONTHLY`, `WEEKLY`, `DAILY`, `HOURLY`, `MINUTELY` and `SECONDLY`. Example: `frequency` = `DAILY` and `interval` = `2` schedules for every other day
        /// </summary>
        [Input("frequency", required: true)]
        public Input<string> Frequency { get; set; } = null!;

        /// <summary>
        /// The interval between each iteration. Default: 1. Example: `frequency` = `DAILY` and `interval` = `2` schedules for every other day
        /// </summary>
        [Input("interval")]
        public Input<int>? Interval { get; set; }

        [Input("months")]
        private InputList<int>? _months;

        /// <summary>
        /// Restricts the recurrence to specific months. `1` for `January`, `2` for `February`, ..., `12` for `December`
        /// </summary>
        public InputList<int> Months
        {
            get => _months ?? (_months = new InputList<int>());
            set => _months = value;
        }

        [Input("weekdays")]
        private InputList<string>? _weekdays;

        /// <summary>
        /// Restricts the recurrence to specific week days. Possible values are `MO`, `TU`, `WE`, `TH`, `FR`, `SA` and `SU`
        /// </summary>
        public InputList<string> Weekdays
        {
            get => _weekdays ?? (_weekdays = new InputList<string>());
            set => _weekdays = value;
        }

        [Input("weeks")]
        private InputList<int>? _weeks;

        /// <summary>
        /// Restricts the recurrence to specific weeks within a year. `1`, `2`, `3`, ... refers to the first, second, third week of the year. You can also specify negative values to refer to values relative to the last week. `-1` refers to the last week, `-2` refers to the second to the last week, ...
        /// </summary>
        public InputList<int> Weeks
        {
            get => _weeks ?? (_weeks = new InputList<int>());
            set => _weeks = value;
        }

        /// <summary>
        /// Possible values are `WORKING` (Work days), `HOLIDAYS` (Holidays) and `OFF` (Weekends + Holidays)
        /// </summary>
        [Input("workdays", required: true)]
        public Input<string> Workdays { get; set; } = null!;

        public AutomationSchedulingRuleRecurrenceGetArgs()
        {
        }
        public static new AutomationSchedulingRuleRecurrenceGetArgs Empty => new AutomationSchedulingRuleRecurrenceGetArgs();
    }
}
