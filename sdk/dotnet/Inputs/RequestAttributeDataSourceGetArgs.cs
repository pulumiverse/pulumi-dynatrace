// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace.Inputs
{

    public sealed class RequestAttributeDataSourceGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the location where the values are captured and stored.  Required if the **source** is one of the following: `GET_PARAMETER`, `URI`, `REQUEST_HEADER`, `RESPONSE_HEADER`.   Not applicable in other cases.   If the **source** value is `REQUEST_HEADER` or `RESPONSE_HEADER`, the `CAPTURE_AND_STORE_ON_BOTH` location is not allowed
        /// </summary>
        [Input("capturingAndStorageLocation")]
        public Input<string>? CapturingAndStorageLocation { get; set; }

        /// <summary>
        /// IBM integration bus label node name condition for which the value is captured
        /// </summary>
        [Input("cicsSdkMethodNodeCondition")]
        public Input<Inputs.RequestAttributeDataSourceCicsSdkMethodNodeConditionGetArgs>? CicsSdkMethodNodeCondition { get; set; }

        /// <summary>
        /// CICS transaction call type condition for which the value is captured. Required if the source is: `CICS_TRANSACTION_CALL_TYPE`. Not applicable in other cases.
        /// </summary>
        [Input("cicsTransactionCallType")]
        public Input<string>? CicsTransactionCallType { get; set; }

        /// <summary>
        /// The data source is enabled (`True`) or disabled (`False`)
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// IBM integration bus label node name condition for which the value is captured
        /// </summary>
        [Input("iibLabelMethodNodeCondition")]
        public Input<Inputs.RequestAttributeDataSourceIibLabelMethodNodeConditionGetArgs>? IibLabelMethodNodeCondition { get; set; }

        /// <summary>
        /// IBM integration bus label node name condition for which the value is captured
        /// </summary>
        [Input("iibMethodNodeCondition")]
        public Input<Inputs.RequestAttributeDataSourceIibMethodNodeConditionGetArgs>? IibMethodNodeCondition { get; set; }

        /// <summary>
        /// The IBM integration bus node type for which the value is captured.  This or `iibMethodNodeCondition` is required if the **source** is: `IIB_NODE`.  Not applicable in other cases
        /// </summary>
        [Input("iibNodeType")]
        public Input<string>? IibNodeType { get; set; }

        /// <summary>
        /// IBM integration bus label node name condition for which the value is captured
        /// </summary>
        [Input("iibNodeTypeCondition")]
        public Input<Inputs.RequestAttributeDataSourceIibNodeTypeConditionGetArgs>? IibNodeTypeCondition { get; set; }

        /// <summary>
        /// IMS transaction call type condition for which the value is captured. Required if the source is: `IMS_TRANSACTION_CALL_TYPE`. Not applicable in other cases.
        /// </summary>
        [Input("imsTransactionCallType")]
        public Input<string>? ImsTransactionCallType { get; set; }

        [Input("methods")]
        private InputList<Inputs.RequestAttributeDataSourceMethodGetArgs>? _methods;

        /// <summary>
        /// The method specification if the **source** value is `METHOD_PARAM`.   Not applicable in other cases
        /// </summary>
        public InputList<Inputs.RequestAttributeDataSourceMethodGetArgs> Methods
        {
            get => _methods ?? (_methods = new InputList<Inputs.RequestAttributeDataSourceMethodGetArgs>());
            set => _methods = value;
        }

        /// <summary>
        /// The name of the web request parameter to capture.  Required if the **source** is one of the following: `POST_PARAMETER`, `GET_PARAMETER`, `REQUEST_HEADER`, `RESPONSE_HEADER`, `CUSTOM_ATTRIBUTE`.  Not applicable in other cases
        /// </summary>
        [Input("parameterName")]
        public Input<string>? ParameterName { get; set; }

        /// <summary>
        /// Conditions for data capturing
        /// </summary>
        [Input("scope")]
        public Input<Inputs.RequestAttributeDataSourceScopeGetArgs>? Scope { get; set; }

        /// <summary>
        /// The technology of the server variable to capture if the source value is SERVER_VARIABLE.
        /// </summary>
        [Input("serverVariableTechnology")]
        public Input<string>? ServerVariableTechnology { get; set; }

        /// <summary>
        /// The technology of the session attribute to capture if the **source** value is `SESSION_ATTRIBUTE`. 
        /// 
        ///  Not applicable in other cases
        /// </summary>
        [Input("sessionAttributeTechnology")]
        public Input<string>? SessionAttributeTechnology { get; set; }

        /// <summary>
        /// The source of the attribute to capture. Works in conjunction with **parameterName** or **methods** and **technology**
        /// </summary>
        [Input("source", required: true)]
        public Input<string> Source { get; set; } = null!;

        /// <summary>
        /// The key of the span attribute to capture. Required if the source is: `SPAN_ATTRIBUTE`. Not applicable in other cases.
        /// </summary>
        [Input("spanAttributeKey")]
        public Input<string>? SpanAttributeKey { get; set; }

        /// <summary>
        /// The technology of the method to capture if the **source** value is `METHOD_PARAM`. 
        /// 
        ///  Not applicable in other cases
        /// </summary>
        [Input("technology")]
        public Input<string>? Technology { get; set; }

        /// <summary>
        /// allows for configuring properties that are not explicitly supported by the current version of this provider
        /// </summary>
        [Input("unknowns")]
        public Input<string>? Unknowns { get; set; }

        /// <summary>
        /// Process values as specified
        /// </summary>
        [Input("valueProcessing")]
        public Input<Inputs.RequestAttributeDataSourceValueProcessingGetArgs>? ValueProcessing { get; set; }

        public RequestAttributeDataSourceGetArgs()
        {
        }
        public static new RequestAttributeDataSourceGetArgs Empty => new RequestAttributeDataSourceGetArgs();
    }
}
