// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace.Inputs
{

    public sealed class OsServicesDetectionConditionsLinuxLinuxDetectionConditionGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk).
        /// </summary>
        [Input("condition")]
        public Input<string>? Condition { get; set; }

        /// <summary>
        /// Custom metadata
        /// </summary>
        [Input("hostMetadataCondition")]
        public Input<Inputs.OsServicesDetectionConditionsLinuxLinuxDetectionConditionHostMetadataConditionGetArgs>? HostMetadataCondition { get; set; }

        /// <summary>
        /// Possible Values: `ServiceName`, `StartupType`
        /// </summary>
        [Input("property")]
        public Input<string>? Property { get; set; }

        /// <summary>
        /// Possible Values: `RuleTypeHost`, `RuleTypeOsService`
        /// </summary>
        [Input("ruleType")]
        public Input<string>? RuleType { get; set; }

        /// <summary>
        /// This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk).
        /// 
        /// - `$eq(enabled)` – Matches services with startup type equal to enabled.
        /// 
        /// Available logic operations:
        /// - `$not($eq(enabled))` – Matches services with startup type different from enabled.
        /// - `$or($eq(enabled),$eq(disabled))` - Matches services that are either enabled or disabled.
        /// 
        /// Use one of the following values as a parameter for this condition:
        /// 
        /// - `enabled`
        /// - `enabled-runtime`
        /// - `static`
        /// - `disabled`
        /// </summary>
        [Input("startupCondition")]
        public Input<string>? StartupCondition { get; set; }

        public OsServicesDetectionConditionsLinuxLinuxDetectionConditionGetArgs()
        {
        }
        public static new OsServicesDetectionConditionsLinuxLinuxDetectionConditionGetArgs Empty => new OsServicesDetectionConditionsLinuxLinuxDetectionConditionGetArgs();
    }
}
