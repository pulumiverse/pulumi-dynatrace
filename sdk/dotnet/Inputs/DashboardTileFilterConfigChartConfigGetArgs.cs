// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace.Inputs
{

    public sealed class DashboardTileFilterConfigChartConfigGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("axisLimits")]
        private InputMap<double>? _axisLimits;

        /// <summary>
        /// The optional custom y-axis limits
        /// </summary>
        public InputMap<double> AxisLimits
        {
            get => _axisLimits ?? (_axisLimits = new InputMap<double>());
            set => _axisLimits = value;
        }

        /// <summary>
        /// Either one of `Bit`, `BitPerHour`, `BitPerMinute`, `BitPerSecond`, `Byte`, `BytePerHour`, `BytePerMinute`, `BytePerSecond`, `Cores`, `Count`, `Day`, `DecibelMilliWatt`, `GibiByte`, `Giga`, `GigaByte`, `Hour`, `KibiByte`, `KibiBytePerHour`, `KibiBytePerMinute`, `KibiBytePerSecond`, `Kilo`, `KiloByte`, `KiloBytePerHour`, `KiloBytePerMinute`, `KiloBytePerSecond`, `MebiByte`, `MebiBytePerHour`, `MebiBytePerMinute`, `MebiBytePerSecond`, `Mega`, `MegaByte`, `MegaBytePerHour`, `MegaBytePerMinute`, `MegaBytePerSecond`, `MicroSecond`, `MilliCores`, `MilliSecond`, `MilliSecondPerMinute`, `Minute`, `Month`, `NanoSecond`, `NanoSecondPerMinute`, `NotApplicable`, `PerHour`, `PerMinute`, `PerSecond`, `Percent`, `Pixel`, `Promille`, `Ratio`, `Second`, `State`, `Unspecified`, `Week`, `Year`
        /// </summary>
        [Input("leftAxisCustomUnit")]
        public Input<string>? LeftAxisCustomUnit { get; set; }

        /// <summary>
        /// Defines if a legend should be shown
        /// </summary>
        [Input("legend")]
        public Input<bool>? Legend { get; set; }

        [Input("resultMetadatas")]
        private InputList<Inputs.DashboardTileFilterConfigChartConfigResultMetadataGetArgs>? _resultMetadatas;

        /// <summary>
        /// Additional information about charted metric
        /// </summary>
        public InputList<Inputs.DashboardTileFilterConfigChartConfigResultMetadataGetArgs> ResultMetadatas
        {
            get => _resultMetadatas ?? (_resultMetadatas = new InputList<Inputs.DashboardTileFilterConfigChartConfigResultMetadataGetArgs>());
            set => _resultMetadatas = value;
        }

        /// <summary>
        /// Either one of `Bit`, `BitPerHour`, `BitPerMinute`, `BitPerSecond`, `Byte`, `BytePerHour`, `BytePerMinute`, `BytePerSecond`, `Cores`, `Count`, `Day`, `DecibelMilliWatt`, `GibiByte`, `Giga`, `GigaByte`, `Hour`, `KibiByte`, `KibiBytePerHour`, `KibiBytePerMinute`, `KibiBytePerSecond`, `Kilo`, `KiloByte`, `KiloBytePerHour`, `KiloBytePerMinute`, `KiloBytePerSecond`, `MebiByte`, `MebiBytePerHour`, `MebiBytePerMinute`, `MebiBytePerSecond`, `Mega`, `MegaByte`, `MegaBytePerHour`, `MegaBytePerMinute`, `MegaBytePerSecond`, `MicroSecond`, `MilliCores`, `MilliSecond`, `MilliSecondPerMinute`, `Minute`, `Month`, `NanoSecond`, `NanoSecondPerMinute`, `NotApplicable`, `PerHour`, `PerMinute`, `PerSecond`, `Percent`, `Pixel`, `Promille`, `Ratio`, `Second`, `State`, `Unspecified`, `Week`, `Year`
        /// </summary>
        [Input("rightAxisCustomUnit")]
        public Input<string>? RightAxisCustomUnit { get; set; }

        [Input("series")]
        private InputList<Inputs.DashboardTileFilterConfigChartConfigSeriesGetArgs>? _series;

        /// <summary>
        /// A list of charted metrics
        /// </summary>
        public InputList<Inputs.DashboardTileFilterConfigChartConfigSeriesGetArgs> Series
        {
            get => _series ?? (_series = new InputList<Inputs.DashboardTileFilterConfigChartConfigSeriesGetArgs>());
            set => _series = value;
        }

        /// <summary>
        /// The type of the chart
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// allows for configuring properties that are not explicitly supported by the current version of this provider
        /// </summary>
        [Input("unknowns")]
        public Input<string>? Unknowns { get; set; }

        public DashboardTileFilterConfigChartConfigGetArgs()
        {
        }
        public static new DashboardTileFilterConfigChartConfigGetArgs Empty => new DashboardTileFilterConfigChartConfigGetArgs();
    }
}
