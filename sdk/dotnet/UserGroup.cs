// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/userGroup:UserGroup")]
    public partial class UserGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// If `true`, then the group has the access account rights
        /// </summary>
        [Output("accessAccount")]
        public Output<bool?> AccessAccount { get; private set; } = null!;

        /// <summary>
        /// If `true`, then the group has the cluster administrator rights
        /// </summary>
        [Output("clusterAdmin")]
        public Output<bool?> ClusterAdmin { get; private set; } = null!;

        /// <summary>
        /// LDAP group names
        /// </summary>
        [Output("ldapGroups")]
        public Output<ImmutableArray<string>> LdapGroups { get; private set; } = null!;

        /// <summary>
        /// If `true`, then the group has the manage account rights
        /// </summary>
        [Output("manageAccount")]
        public Output<bool?> ManageAccount { get; private set; } = null!;

        /// <summary>
        /// The name of the user group
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Permissions for environments
        /// </summary>
        [Output("permissions")]
        public Output<Outputs.UserGroupPermissions?> Permissions { get; private set; } = null!;

        /// <summary>
        /// SSO group names. If defined it's used to map SSO group name to Dynatrace group name, otherwise mapping is done by group name
        /// </summary>
        [Output("ssoGroups")]
        public Output<ImmutableArray<string>> SsoGroups { get; private set; } = null!;


        /// <summary>
        /// Create a UserGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public UserGroup(string name, UserGroupArgs? args = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/userGroup:UserGroup", name, args ?? new UserGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private UserGroup(string name, Input<string> id, UserGroupState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/userGroup:UserGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing UserGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static UserGroup Get(string name, Input<string> id, UserGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new UserGroup(name, id, state, options);
        }
    }

    public sealed class UserGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If `true`, then the group has the access account rights
        /// </summary>
        [Input("accessAccount")]
        public Input<bool>? AccessAccount { get; set; }

        /// <summary>
        /// If `true`, then the group has the cluster administrator rights
        /// </summary>
        [Input("clusterAdmin")]
        public Input<bool>? ClusterAdmin { get; set; }

        [Input("ldapGroups")]
        private InputList<string>? _ldapGroups;

        /// <summary>
        /// LDAP group names
        /// </summary>
        public InputList<string> LdapGroups
        {
            get => _ldapGroups ?? (_ldapGroups = new InputList<string>());
            set => _ldapGroups = value;
        }

        /// <summary>
        /// If `true`, then the group has the manage account rights
        /// </summary>
        [Input("manageAccount")]
        public Input<bool>? ManageAccount { get; set; }

        /// <summary>
        /// The name of the user group
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Permissions for environments
        /// </summary>
        [Input("permissions")]
        public Input<Inputs.UserGroupPermissionsArgs>? Permissions { get; set; }

        [Input("ssoGroups")]
        private InputList<string>? _ssoGroups;

        /// <summary>
        /// SSO group names. If defined it's used to map SSO group name to Dynatrace group name, otherwise mapping is done by group name
        /// </summary>
        public InputList<string> SsoGroups
        {
            get => _ssoGroups ?? (_ssoGroups = new InputList<string>());
            set => _ssoGroups = value;
        }

        public UserGroupArgs()
        {
        }
        public static new UserGroupArgs Empty => new UserGroupArgs();
    }

    public sealed class UserGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If `true`, then the group has the access account rights
        /// </summary>
        [Input("accessAccount")]
        public Input<bool>? AccessAccount { get; set; }

        /// <summary>
        /// If `true`, then the group has the cluster administrator rights
        /// </summary>
        [Input("clusterAdmin")]
        public Input<bool>? ClusterAdmin { get; set; }

        [Input("ldapGroups")]
        private InputList<string>? _ldapGroups;

        /// <summary>
        /// LDAP group names
        /// </summary>
        public InputList<string> LdapGroups
        {
            get => _ldapGroups ?? (_ldapGroups = new InputList<string>());
            set => _ldapGroups = value;
        }

        /// <summary>
        /// If `true`, then the group has the manage account rights
        /// </summary>
        [Input("manageAccount")]
        public Input<bool>? ManageAccount { get; set; }

        /// <summary>
        /// The name of the user group
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Permissions for environments
        /// </summary>
        [Input("permissions")]
        public Input<Inputs.UserGroupPermissionsGetArgs>? Permissions { get; set; }

        [Input("ssoGroups")]
        private InputList<string>? _ssoGroups;

        /// <summary>
        /// SSO group names. If defined it's used to map SSO group name to Dynatrace group name, otherwise mapping is done by group name
        /// </summary>
        public InputList<string> SsoGroups
        {
            get => _ssoGroups ?? (_ssoGroups = new InputList<string>());
            set => _ssoGroups = value;
        }

        public UserGroupState()
        {
        }
        public static new UserGroupState Empty => new UserGroupState();
    }
}
