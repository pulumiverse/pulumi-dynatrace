// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/ownershipTeams:OwnershipTeams")]
    public partial class OwnershipTeams : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Define key/value pairs that further describe this team — for example, cost center, solution type, or business unit assignments.
        /// </summary>
        [Output("additionalInformation")]
        public Output<Outputs.OwnershipTeamsAdditionalInformation?> AdditionalInformation { get; private set; } = null!;

        /// <summary>
        /// Define options for messaging integration or other means of contacting this team.
        /// </summary>
        [Output("contactDetails")]
        public Output<Outputs.OwnershipTeamsContactDetails?> ContactDetails { get; private set; } = null!;

        /// <summary>
        /// Description
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// This field should only be used for the automation purpose when importing team information.
        /// </summary>
        [Output("externalId")]
        public Output<string?> ExternalId { get; private set; } = null!;

        /// <summary>
        /// The team identifier is used to reference the team from any entity in Dynatrace. If you are using Kubernetes labels, keep in mind the 63 character limit that they enforce.
        /// </summary>
        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// Include links to online resources where information relevant to this team’s responsibilities can be found.
        /// </summary>
        [Output("links")]
        public Output<Outputs.OwnershipTeamsLinks?> Links { get; private set; } = null!;

        /// <summary>
        /// Team name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Turn on all responsibility assignments that apply to this team.
        /// </summary>
        [Output("responsibilities")]
        public Output<Outputs.OwnershipTeamsResponsibilities> Responsibilities { get; private set; } = null!;

        /// <summary>
        /// The supplementary team identifiers can be optionally used in addition to the main team identifier to reference this team from any entity in Dynatrace. Up to 3 supplementary identifiers are supported.
        /// </summary>
        [Output("supplementaryIdentifiers")]
        public Output<Outputs.OwnershipTeamsSupplementaryIdentifiers?> SupplementaryIdentifiers { get; private set; } = null!;


        /// <summary>
        /// Create a OwnershipTeams resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OwnershipTeams(string name, OwnershipTeamsArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/ownershipTeams:OwnershipTeams", name, args ?? new OwnershipTeamsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OwnershipTeams(string name, Input<string> id, OwnershipTeamsState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/ownershipTeams:OwnershipTeams", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OwnershipTeams resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OwnershipTeams Get(string name, Input<string> id, OwnershipTeamsState? state = null, CustomResourceOptions? options = null)
        {
            return new OwnershipTeams(name, id, state, options);
        }
    }

    public sealed class OwnershipTeamsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Define key/value pairs that further describe this team — for example, cost center, solution type, or business unit assignments.
        /// </summary>
        [Input("additionalInformation")]
        public Input<Inputs.OwnershipTeamsAdditionalInformationArgs>? AdditionalInformation { get; set; }

        /// <summary>
        /// Define options for messaging integration or other means of contacting this team.
        /// </summary>
        [Input("contactDetails")]
        public Input<Inputs.OwnershipTeamsContactDetailsArgs>? ContactDetails { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// This field should only be used for the automation purpose when importing team information.
        /// </summary>
        [Input("externalId")]
        public Input<string>? ExternalId { get; set; }

        /// <summary>
        /// The team identifier is used to reference the team from any entity in Dynatrace. If you are using Kubernetes labels, keep in mind the 63 character limit that they enforce.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Include links to online resources where information relevant to this team’s responsibilities can be found.
        /// </summary>
        [Input("links")]
        public Input<Inputs.OwnershipTeamsLinksArgs>? Links { get; set; }

        /// <summary>
        /// Team name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Turn on all responsibility assignments that apply to this team.
        /// </summary>
        [Input("responsibilities", required: true)]
        public Input<Inputs.OwnershipTeamsResponsibilitiesArgs> Responsibilities { get; set; } = null!;

        /// <summary>
        /// The supplementary team identifiers can be optionally used in addition to the main team identifier to reference this team from any entity in Dynatrace. Up to 3 supplementary identifiers are supported.
        /// </summary>
        [Input("supplementaryIdentifiers")]
        public Input<Inputs.OwnershipTeamsSupplementaryIdentifiersArgs>? SupplementaryIdentifiers { get; set; }

        public OwnershipTeamsArgs()
        {
        }
        public static new OwnershipTeamsArgs Empty => new OwnershipTeamsArgs();
    }

    public sealed class OwnershipTeamsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Define key/value pairs that further describe this team — for example, cost center, solution type, or business unit assignments.
        /// </summary>
        [Input("additionalInformation")]
        public Input<Inputs.OwnershipTeamsAdditionalInformationGetArgs>? AdditionalInformation { get; set; }

        /// <summary>
        /// Define options for messaging integration or other means of contacting this team.
        /// </summary>
        [Input("contactDetails")]
        public Input<Inputs.OwnershipTeamsContactDetailsGetArgs>? ContactDetails { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// This field should only be used for the automation purpose when importing team information.
        /// </summary>
        [Input("externalId")]
        public Input<string>? ExternalId { get; set; }

        /// <summary>
        /// The team identifier is used to reference the team from any entity in Dynatrace. If you are using Kubernetes labels, keep in mind the 63 character limit that they enforce.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// Include links to online resources where information relevant to this team’s responsibilities can be found.
        /// </summary>
        [Input("links")]
        public Input<Inputs.OwnershipTeamsLinksGetArgs>? Links { get; set; }

        /// <summary>
        /// Team name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Turn on all responsibility assignments that apply to this team.
        /// </summary>
        [Input("responsibilities")]
        public Input<Inputs.OwnershipTeamsResponsibilitiesGetArgs>? Responsibilities { get; set; }

        /// <summary>
        /// The supplementary team identifiers can be optionally used in addition to the main team identifier to reference this team from any entity in Dynatrace. Up to 3 supplementary identifiers are supported.
        /// </summary>
        [Input("supplementaryIdentifiers")]
        public Input<Inputs.OwnershipTeamsSupplementaryIdentifiersGetArgs>? SupplementaryIdentifiers { get; set; }

        public OwnershipTeamsState()
        {
        }
        public static new OwnershipTeamsState Empty => new OwnershipTeamsState();
    }
}
