// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    public static class GetIamUser
    {
        /// <summary>
        /// &gt; **Dynatrace SaaS only**
        /// 
        /// &gt; To utilize this resource, please define the environment variables `DT_CLIENT_ID`, `DT_CLIENT_SECRET`, `DT_ACCOUNT_ID` with an OAuth client including the following permission: **Allow read access for identity resources (users and groups)** (`account-idm-read`).
        /// 
        /// This data source allows you to specify the email address of the user and produces an ordered list of group IDs this user is a member of
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var userA = Dynatrace.GetIamUser.Invoke(new()
        ///     {
        ///         Email = "me@example.com",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["groups"] = userA.Apply(getIamUserResult =&gt; getIamUserResult.Groups),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetIamUserResult> InvokeAsync(GetIamUserArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIamUserResult>("dynatrace:index/getIamUser:getIamUser", args ?? new GetIamUserArgs(), options.WithDefaults());

        /// <summary>
        /// &gt; **Dynatrace SaaS only**
        /// 
        /// &gt; To utilize this resource, please define the environment variables `DT_CLIENT_ID`, `DT_CLIENT_SECRET`, `DT_ACCOUNT_ID` with an OAuth client including the following permission: **Allow read access for identity resources (users and groups)** (`account-idm-read`).
        /// 
        /// This data source allows you to specify the email address of the user and produces an ordered list of group IDs this user is a member of
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var userA = Dynatrace.GetIamUser.Invoke(new()
        ///     {
        ///         Email = "me@example.com",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["groups"] = userA.Apply(getIamUserResult =&gt; getIamUserResult.Groups),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetIamUserResult> Invoke(GetIamUserInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIamUserResult>("dynatrace:index/getIamUser:getIamUser", args ?? new GetIamUserInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// &gt; **Dynatrace SaaS only**
        /// 
        /// &gt; To utilize this resource, please define the environment variables `DT_CLIENT_ID`, `DT_CLIENT_SECRET`, `DT_ACCOUNT_ID` with an OAuth client including the following permission: **Allow read access for identity resources (users and groups)** (`account-idm-read`).
        /// 
        /// This data source allows you to specify the email address of the user and produces an ordered list of group IDs this user is a member of
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var userA = Dynatrace.GetIamUser.Invoke(new()
        ///     {
        ///         Email = "me@example.com",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["groups"] = userA.Apply(getIamUserResult =&gt; getIamUserResult.Groups),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetIamUserResult> Invoke(GetIamUserInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetIamUserResult>("dynatrace:index/getIamUser:getIamUser", args ?? new GetIamUserInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIamUserArgs : global::Pulumi.InvokeArgs
    {
        [Input("email", required: true)]
        public string Email { get; set; } = null!;

        public GetIamUserArgs()
        {
        }
        public static new GetIamUserArgs Empty => new GetIamUserArgs();
    }

    public sealed class GetIamUserInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("email", required: true)]
        public Input<string> Email { get; set; } = null!;

        public GetIamUserInvokeArgs()
        {
        }
        public static new GetIamUserInvokeArgs Empty => new GetIamUserInvokeArgs();
    }


    [OutputType]
    public sealed class GetIamUserResult
    {
        public readonly string Email;
        public readonly ImmutableArray<string> Groups;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Uid;

        [OutputConstructor]
        private GetIamUserResult(
            string email,

            ImmutableArray<string> groups,

            string id,

            string uid)
        {
            Email = email;
            Groups = groups;
            Id = id;
            Uid = uid;
        }
    }
}
