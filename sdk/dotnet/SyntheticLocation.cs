// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/syntheticLocation:SyntheticLocation")]
    public partial class SyntheticLocation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Auto upgrade of Chromium is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Output("autoUpdateChromium")]
        public Output<bool?> AutoUpdateChromium { get; private set; } = null!;

        /// <summary>
        /// The alerting of location outage is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Output("availabilityLocationOutage")]
        public Output<bool?> AvailabilityLocationOutage { get; private set; } = null!;

        /// <summary>
        /// The alerting of node outage is enabled (`true`) or disabled (`false`).
        /// </summary>
        [Output("availabilityNodeOutage")]
        public Output<bool?> AvailabilityNodeOutage { get; private set; } = null!;

        /// <summary>
        /// The notifications of location and node outage is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Output("availabilityNotificationsEnabled")]
        public Output<bool?> AvailabilityNotificationsEnabled { get; private set; } = null!;

        /// <summary>
        /// The city of the location
        /// </summary>
        [Output("city")]
        public Output<string?> City { get; private set; } = null!;

        /// <summary>
        /// The country code of the location. To fetch the list of available country codes, use the [GET all
        /// countries](https://dt-url.net/37030go) request
        /// </summary>
        [Output("countryCode")]
        public Output<string?> CountryCode { get; private set; } = null!;

        /// <summary>
        /// The deployment type of the location: * `STANDARD`: The location is deployed on Windows or Linux. * `KUBERNETES`: The
        /// location is deployed on Kubernetes
        /// </summary>
        [Output("deploymentType")]
        public Output<string?> DeploymentType { get; private set; } = null!;

        /// <summary>
        /// The latitude of the location in `DDD.dddd` format
        /// </summary>
        [Output("latitude")]
        public Output<double> Latitude { get; private set; } = null!;

        /// <summary>
        /// Alert if the location or node outage lasts longer than *X* minutes. Only applicable when
        /// **availability_location_outage** or **availability_node_outage** is set to `true`
        /// </summary>
        [Output("locationNodeOutageDelayInMinutes")]
        public Output<int?> LocationNodeOutageDelayInMinutes { get; private set; } = null!;

        /// <summary>
        /// The longitude of the location in `DDD.dddd` format
        /// </summary>
        [Output("longitude")]
        public Output<double> Longitude { get; private set; } = null!;

        /// <summary>
        /// The maximum number of Active Gates required for that location. Not required when `deployment_type` is set to `STANDARD`
        /// </summary>
        [Output("maxActiveGateCount")]
        public Output<int?> MaxActiveGateCount { get; private set; } = null!;

        /// <summary>
        /// The minimum number of Active Gates required for that location. Not required when `deployment_type` is set to `STANDARD`
        /// </summary>
        [Output("minActiveGateCount")]
        public Output<int?> MinActiveGateCount { get; private set; } = null!;

        /// <summary>
        /// The name of the location
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Possible values: `UNSUPPORTED`, `XS`, `S` and `M`. Not required when `deployment_type` is set to `STANDARD`.
        /// </summary>
        [Output("nodeSize")]
        public Output<string?> NodeSize { get; private set; } = null!;

        /// <summary>
        /// A list of synthetic nodes belonging to the location. You can retrieve the list of available nodes with the [GET all
        /// nodes](https://dt-url.net/miy3rpl) call
        /// </summary>
        [Output("nodes")]
        public Output<ImmutableArray<string>> Nodes { get; private set; } = null!;

        /// <summary>
        /// The region code of the location. To fetch the list of available region codes, use the [GET regions of the
        /// country](https://dt-url.net/az230x0) request
        /// </summary>
        [Output("regionCode")]
        public Output<string?> RegionCode { get; private set; } = null!;


        /// <summary>
        /// Create a SyntheticLocation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SyntheticLocation(string name, SyntheticLocationArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/syntheticLocation:SyntheticLocation", name, args ?? new SyntheticLocationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SyntheticLocation(string name, Input<string> id, SyntheticLocationState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/syntheticLocation:SyntheticLocation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SyntheticLocation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SyntheticLocation Get(string name, Input<string> id, SyntheticLocationState? state = null, CustomResourceOptions? options = null)
        {
            return new SyntheticLocation(name, id, state, options);
        }
    }

    public sealed class SyntheticLocationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Auto upgrade of Chromium is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Input("autoUpdateChromium")]
        public Input<bool>? AutoUpdateChromium { get; set; }

        /// <summary>
        /// The alerting of location outage is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Input("availabilityLocationOutage")]
        public Input<bool>? AvailabilityLocationOutage { get; set; }

        /// <summary>
        /// The alerting of node outage is enabled (`true`) or disabled (`false`).
        /// </summary>
        [Input("availabilityNodeOutage")]
        public Input<bool>? AvailabilityNodeOutage { get; set; }

        /// <summary>
        /// The notifications of location and node outage is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Input("availabilityNotificationsEnabled")]
        public Input<bool>? AvailabilityNotificationsEnabled { get; set; }

        /// <summary>
        /// The city of the location
        /// </summary>
        [Input("city")]
        public Input<string>? City { get; set; }

        /// <summary>
        /// The country code of the location. To fetch the list of available country codes, use the [GET all
        /// countries](https://dt-url.net/37030go) request
        /// </summary>
        [Input("countryCode")]
        public Input<string>? CountryCode { get; set; }

        /// <summary>
        /// The deployment type of the location: * `STANDARD`: The location is deployed on Windows or Linux. * `KUBERNETES`: The
        /// location is deployed on Kubernetes
        /// </summary>
        [Input("deploymentType")]
        public Input<string>? DeploymentType { get; set; }

        /// <summary>
        /// The latitude of the location in `DDD.dddd` format
        /// </summary>
        [Input("latitude", required: true)]
        public Input<double> Latitude { get; set; } = null!;

        /// <summary>
        /// Alert if the location or node outage lasts longer than *X* minutes. Only applicable when
        /// **availability_location_outage** or **availability_node_outage** is set to `true`
        /// </summary>
        [Input("locationNodeOutageDelayInMinutes")]
        public Input<int>? LocationNodeOutageDelayInMinutes { get; set; }

        /// <summary>
        /// The longitude of the location in `DDD.dddd` format
        /// </summary>
        [Input("longitude", required: true)]
        public Input<double> Longitude { get; set; } = null!;

        /// <summary>
        /// The maximum number of Active Gates required for that location. Not required when `deployment_type` is set to `STANDARD`
        /// </summary>
        [Input("maxActiveGateCount")]
        public Input<int>? MaxActiveGateCount { get; set; }

        /// <summary>
        /// The minimum number of Active Gates required for that location. Not required when `deployment_type` is set to `STANDARD`
        /// </summary>
        [Input("minActiveGateCount")]
        public Input<int>? MinActiveGateCount { get; set; }

        /// <summary>
        /// The name of the location
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Possible values: `UNSUPPORTED`, `XS`, `S` and `M`. Not required when `deployment_type` is set to `STANDARD`.
        /// </summary>
        [Input("nodeSize")]
        public Input<string>? NodeSize { get; set; }

        [Input("nodes")]
        private InputList<string>? _nodes;

        /// <summary>
        /// A list of synthetic nodes belonging to the location. You can retrieve the list of available nodes with the [GET all
        /// nodes](https://dt-url.net/miy3rpl) call
        /// </summary>
        public InputList<string> Nodes
        {
            get => _nodes ?? (_nodes = new InputList<string>());
            set => _nodes = value;
        }

        /// <summary>
        /// The region code of the location. To fetch the list of available region codes, use the [GET regions of the
        /// country](https://dt-url.net/az230x0) request
        /// </summary>
        [Input("regionCode")]
        public Input<string>? RegionCode { get; set; }

        public SyntheticLocationArgs()
        {
        }
        public static new SyntheticLocationArgs Empty => new SyntheticLocationArgs();
    }

    public sealed class SyntheticLocationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Auto upgrade of Chromium is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Input("autoUpdateChromium")]
        public Input<bool>? AutoUpdateChromium { get; set; }

        /// <summary>
        /// The alerting of location outage is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Input("availabilityLocationOutage")]
        public Input<bool>? AvailabilityLocationOutage { get; set; }

        /// <summary>
        /// The alerting of node outage is enabled (`true`) or disabled (`false`).
        /// </summary>
        [Input("availabilityNodeOutage")]
        public Input<bool>? AvailabilityNodeOutage { get; set; }

        /// <summary>
        /// The notifications of location and node outage is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Input("availabilityNotificationsEnabled")]
        public Input<bool>? AvailabilityNotificationsEnabled { get; set; }

        /// <summary>
        /// The city of the location
        /// </summary>
        [Input("city")]
        public Input<string>? City { get; set; }

        /// <summary>
        /// The country code of the location. To fetch the list of available country codes, use the [GET all
        /// countries](https://dt-url.net/37030go) request
        /// </summary>
        [Input("countryCode")]
        public Input<string>? CountryCode { get; set; }

        /// <summary>
        /// The deployment type of the location: * `STANDARD`: The location is deployed on Windows or Linux. * `KUBERNETES`: The
        /// location is deployed on Kubernetes
        /// </summary>
        [Input("deploymentType")]
        public Input<string>? DeploymentType { get; set; }

        /// <summary>
        /// The latitude of the location in `DDD.dddd` format
        /// </summary>
        [Input("latitude")]
        public Input<double>? Latitude { get; set; }

        /// <summary>
        /// Alert if the location or node outage lasts longer than *X* minutes. Only applicable when
        /// **availability_location_outage** or **availability_node_outage** is set to `true`
        /// </summary>
        [Input("locationNodeOutageDelayInMinutes")]
        public Input<int>? LocationNodeOutageDelayInMinutes { get; set; }

        /// <summary>
        /// The longitude of the location in `DDD.dddd` format
        /// </summary>
        [Input("longitude")]
        public Input<double>? Longitude { get; set; }

        /// <summary>
        /// The maximum number of Active Gates required for that location. Not required when `deployment_type` is set to `STANDARD`
        /// </summary>
        [Input("maxActiveGateCount")]
        public Input<int>? MaxActiveGateCount { get; set; }

        /// <summary>
        /// The minimum number of Active Gates required for that location. Not required when `deployment_type` is set to `STANDARD`
        /// </summary>
        [Input("minActiveGateCount")]
        public Input<int>? MinActiveGateCount { get; set; }

        /// <summary>
        /// The name of the location
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Possible values: `UNSUPPORTED`, `XS`, `S` and `M`. Not required when `deployment_type` is set to `STANDARD`.
        /// </summary>
        [Input("nodeSize")]
        public Input<string>? NodeSize { get; set; }

        [Input("nodes")]
        private InputList<string>? _nodes;

        /// <summary>
        /// A list of synthetic nodes belonging to the location. You can retrieve the list of available nodes with the [GET all
        /// nodes](https://dt-url.net/miy3rpl) call
        /// </summary>
        public InputList<string> Nodes
        {
            get => _nodes ?? (_nodes = new InputList<string>());
            set => _nodes = value;
        }

        /// <summary>
        /// The region code of the location. To fetch the list of available region codes, use the [GET regions of the
        /// country](https://dt-url.net/az230x0) request
        /// </summary>
        [Input("regionCode")]
        public Input<string>? RegionCode { get; set; }

        public SyntheticLocationState()
        {
        }
        public static new SyntheticLocationState Empty => new SyntheticLocationState();
    }
}
