// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    /// <summary>
    /// &gt; This resource requires the API token scopes **Read configuration** (`ReadConfig`) and **Write configuration** (`WriteConfig`)
    /// 
    /// ## Dynatrace Documentation
    /// 
    /// - Subscribe to Dynatrace dashboard reports - https://docs.dynatrace.com/docs/observe-and-explore/dashboards-classic/dashboards/subscribe-to-dashboard-reports
    /// 
    /// - Reports API - https://docs.dynatrace.com/docs/dynatrace-api/configuration-api/reports-api
    /// </summary>
    [DynatraceResourceType("dynatrace:index/report:Report")]
    public partial class Report : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the associated dashboard
        /// </summary>
        [Output("dashboardId")]
        public Output<string> DashboardId { get; private set; } = null!;

        /// <summary>
        /// The email notifications for the dashboard report are enabled (true) or disabled (false).
        /// </summary>
        [Output("emailNotifications")]
        public Output<bool?> EmailNotifications { get; private set; } = null!;

        /// <summary>
        /// A list of the report subscribers
        /// </summary>
        [Output("subscriptions")]
        public Output<Outputs.ReportSubscriptions?> Subscriptions { get; private set; } = null!;

        /// <summary>
        /// The type of report
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Report resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Report(string name, ReportArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/report:Report", name, args ?? new ReportArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Report(string name, Input<string> id, ReportState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/report:Report", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Report resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Report Get(string name, Input<string> id, ReportState? state = null, CustomResourceOptions? options = null)
        {
            return new Report(name, id, state, options);
        }
    }

    public sealed class ReportArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the associated dashboard
        /// </summary>
        [Input("dashboardId", required: true)]
        public Input<string> DashboardId { get; set; } = null!;

        /// <summary>
        /// The email notifications for the dashboard report are enabled (true) or disabled (false).
        /// </summary>
        [Input("emailNotifications")]
        public Input<bool>? EmailNotifications { get; set; }

        /// <summary>
        /// A list of the report subscribers
        /// </summary>
        [Input("subscriptions")]
        public Input<Inputs.ReportSubscriptionsArgs>? Subscriptions { get; set; }

        /// <summary>
        /// The type of report
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public ReportArgs()
        {
        }
        public static new ReportArgs Empty => new ReportArgs();
    }

    public sealed class ReportState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the associated dashboard
        /// </summary>
        [Input("dashboardId")]
        public Input<string>? DashboardId { get; set; }

        /// <summary>
        /// The email notifications for the dashboard report are enabled (true) or disabled (false).
        /// </summary>
        [Input("emailNotifications")]
        public Input<bool>? EmailNotifications { get; set; }

        /// <summary>
        /// A list of the report subscribers
        /// </summary>
        [Input("subscriptions")]
        public Input<Inputs.ReportSubscriptionsGetArgs>? Subscriptions { get; set; }

        /// <summary>
        /// The type of report
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public ReportState()
        {
        }
        public static new ReportState Empty => new ReportState();
    }
}
