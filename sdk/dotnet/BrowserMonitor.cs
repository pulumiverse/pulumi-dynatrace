// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/browserMonitor:BrowserMonitor")]
    public partial class BrowserMonitor : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The anomaly detection configuration.
        /// </summary>
        [Output("anomalyDetection")]
        public Output<Outputs.BrowserMonitorAnomalyDetection?> AnomalyDetection { get; private set; } = null!;

        /// <summary>
        /// The monitor is enabled (`true`) or disabled (`false`).
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// The frequency of the monitor, in minutes.
        /// </summary>
        [Output("frequency")]
        public Output<int> Frequency { get; private set; } = null!;

        /// <summary>
        /// The key performance metrics configuration
        /// </summary>
        [Output("keyPerformanceMetrics")]
        public Output<Outputs.BrowserMonitorKeyPerformanceMetrics> KeyPerformanceMetrics { get; private set; } = null!;

        /// <summary>
        /// A list of locations from which the monitor is executed. To specify a location, use its entity ID.
        /// </summary>
        [Output("locations")]
        public Output<ImmutableArray<string>> Locations { get; private set; } = null!;

        /// <summary>
        /// A set of manually assigned applications.
        /// </summary>
        [Output("manuallyAssignedApps")]
        public Output<ImmutableArray<string>> ManuallyAssignedApps { get; private set; } = null!;

        /// <summary>
        /// The name of the monitor.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The Browser Script
        /// </summary>
        [Output("script")]
        public Output<Outputs.BrowserMonitorScript?> Script { get; private set; } = null!;

        /// <summary>
        /// A set of tags assigned to the monitor. You can specify only the value of the tag here and the `CONTEXTLESS` context and
        /// source 'USER' will be added automatically.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.BrowserMonitorTag>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a BrowserMonitor resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BrowserMonitor(string name, BrowserMonitorArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/browserMonitor:BrowserMonitor", name, args ?? new BrowserMonitorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BrowserMonitor(string name, Input<string> id, BrowserMonitorState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/browserMonitor:BrowserMonitor", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BrowserMonitor resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BrowserMonitor Get(string name, Input<string> id, BrowserMonitorState? state = null, CustomResourceOptions? options = null)
        {
            return new BrowserMonitor(name, id, state, options);
        }
    }

    public sealed class BrowserMonitorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The anomaly detection configuration.
        /// </summary>
        [Input("anomalyDetection")]
        public Input<Inputs.BrowserMonitorAnomalyDetectionArgs>? AnomalyDetection { get; set; }

        /// <summary>
        /// The monitor is enabled (`true`) or disabled (`false`).
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The frequency of the monitor, in minutes.
        /// </summary>
        [Input("frequency", required: true)]
        public Input<int> Frequency { get; set; } = null!;

        /// <summary>
        /// The key performance metrics configuration
        /// </summary>
        [Input("keyPerformanceMetrics", required: true)]
        public Input<Inputs.BrowserMonitorKeyPerformanceMetricsArgs> KeyPerformanceMetrics { get; set; } = null!;

        [Input("locations")]
        private InputList<string>? _locations;

        /// <summary>
        /// A list of locations from which the monitor is executed. To specify a location, use its entity ID.
        /// </summary>
        public InputList<string> Locations
        {
            get => _locations ?? (_locations = new InputList<string>());
            set => _locations = value;
        }

        [Input("manuallyAssignedApps")]
        private InputList<string>? _manuallyAssignedApps;

        /// <summary>
        /// A set of manually assigned applications.
        /// </summary>
        public InputList<string> ManuallyAssignedApps
        {
            get => _manuallyAssignedApps ?? (_manuallyAssignedApps = new InputList<string>());
            set => _manuallyAssignedApps = value;
        }

        /// <summary>
        /// The name of the monitor.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Browser Script
        /// </summary>
        [Input("script")]
        public Input<Inputs.BrowserMonitorScriptArgs>? Script { get; set; }

        [Input("tags")]
        private InputList<Inputs.BrowserMonitorTagArgs>? _tags;

        /// <summary>
        /// A set of tags assigned to the monitor. You can specify only the value of the tag here and the `CONTEXTLESS` context and
        /// source 'USER' will be added automatically.
        /// </summary>
        public InputList<Inputs.BrowserMonitorTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.BrowserMonitorTagArgs>());
            set => _tags = value;
        }

        public BrowserMonitorArgs()
        {
        }
        public static new BrowserMonitorArgs Empty => new BrowserMonitorArgs();
    }

    public sealed class BrowserMonitorState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The anomaly detection configuration.
        /// </summary>
        [Input("anomalyDetection")]
        public Input<Inputs.BrowserMonitorAnomalyDetectionGetArgs>? AnomalyDetection { get; set; }

        /// <summary>
        /// The monitor is enabled (`true`) or disabled (`false`).
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The frequency of the monitor, in minutes.
        /// </summary>
        [Input("frequency")]
        public Input<int>? Frequency { get; set; }

        /// <summary>
        /// The key performance metrics configuration
        /// </summary>
        [Input("keyPerformanceMetrics")]
        public Input<Inputs.BrowserMonitorKeyPerformanceMetricsGetArgs>? KeyPerformanceMetrics { get; set; }

        [Input("locations")]
        private InputList<string>? _locations;

        /// <summary>
        /// A list of locations from which the monitor is executed. To specify a location, use its entity ID.
        /// </summary>
        public InputList<string> Locations
        {
            get => _locations ?? (_locations = new InputList<string>());
            set => _locations = value;
        }

        [Input("manuallyAssignedApps")]
        private InputList<string>? _manuallyAssignedApps;

        /// <summary>
        /// A set of manually assigned applications.
        /// </summary>
        public InputList<string> ManuallyAssignedApps
        {
            get => _manuallyAssignedApps ?? (_manuallyAssignedApps = new InputList<string>());
            set => _manuallyAssignedApps = value;
        }

        /// <summary>
        /// The name of the monitor.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Browser Script
        /// </summary>
        [Input("script")]
        public Input<Inputs.BrowserMonitorScriptGetArgs>? Script { get; set; }

        [Input("tags")]
        private InputList<Inputs.BrowserMonitorTagGetArgs>? _tags;

        /// <summary>
        /// A set of tags assigned to the monitor. You can specify only the value of the tag here and the `CONTEXTLESS` context and
        /// source 'USER' will be added automatically.
        /// </summary>
        public InputList<Inputs.BrowserMonitorTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.BrowserMonitorTagGetArgs>());
            set => _tags = value;
        }

        public BrowserMonitorState()
        {
        }
        public static new BrowserMonitorState Empty => new BrowserMonitorState();
    }
}
