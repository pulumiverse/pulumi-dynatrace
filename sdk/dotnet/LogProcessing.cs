// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/logProcessing:LogProcessing")]
    public partial class LogProcessing : global::Pulumi.CustomResource
    {
        /// <summary>
        /// This setting is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        /// </summary>
        [Output("insertAfter")]
        public Output<string> InsertAfter { get; private set; } = null!;

        /// <summary>
        /// ## Processor definition
        /// Add a rule definition using our syntax. [In our documentation](https://dt-url.net/8k03xm2) you will find instructions and application [examples](https://dt-url.net/m24305t).
        /// </summary>
        [Output("processorDefinition")]
        public Output<Outputs.LogProcessingProcessorDefinition> ProcessorDefinition { get; private set; } = null!;

        /// <summary>
        /// Matcher
        /// </summary>
        [Output("query")]
        public Output<string> Query { get; private set; } = null!;

        /// <summary>
        /// Rule name
        /// </summary>
        [Output("ruleName")]
        public Output<string> RuleName { get; private set; } = null!;

        /// <summary>
        /// ## Rule testing
        /// ### 1. Paste a log / JSON sample
        /// </summary>
        [Output("ruleTesting")]
        public Output<Outputs.LogProcessingRuleTesting> RuleTesting { get; private set; } = null!;


        /// <summary>
        /// Create a LogProcessing resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LogProcessing(string name, LogProcessingArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/logProcessing:LogProcessing", name, args ?? new LogProcessingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LogProcessing(string name, Input<string> id, LogProcessingState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/logProcessing:LogProcessing", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LogProcessing resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LogProcessing Get(string name, Input<string> id, LogProcessingState? state = null, CustomResourceOptions? options = null)
        {
            return new LogProcessing(name, id, state, options);
        }
    }

    public sealed class LogProcessingArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This setting is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        /// </summary>
        [Input("insertAfter")]
        public Input<string>? InsertAfter { get; set; }

        /// <summary>
        /// ## Processor definition
        /// Add a rule definition using our syntax. [In our documentation](https://dt-url.net/8k03xm2) you will find instructions and application [examples](https://dt-url.net/m24305t).
        /// </summary>
        [Input("processorDefinition", required: true)]
        public Input<Inputs.LogProcessingProcessorDefinitionArgs> ProcessorDefinition { get; set; } = null!;

        /// <summary>
        /// Matcher
        /// </summary>
        [Input("query", required: true)]
        public Input<string> Query { get; set; } = null!;

        /// <summary>
        /// Rule name
        /// </summary>
        [Input("ruleName", required: true)]
        public Input<string> RuleName { get; set; } = null!;

        /// <summary>
        /// ## Rule testing
        /// ### 1. Paste a log / JSON sample
        /// </summary>
        [Input("ruleTesting", required: true)]
        public Input<Inputs.LogProcessingRuleTestingArgs> RuleTesting { get; set; } = null!;

        public LogProcessingArgs()
        {
        }
        public static new LogProcessingArgs Empty => new LogProcessingArgs();
    }

    public sealed class LogProcessingState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This setting is enabled (`true`) or disabled (`false`)
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        /// </summary>
        [Input("insertAfter")]
        public Input<string>? InsertAfter { get; set; }

        /// <summary>
        /// ## Processor definition
        /// Add a rule definition using our syntax. [In our documentation](https://dt-url.net/8k03xm2) you will find instructions and application [examples](https://dt-url.net/m24305t).
        /// </summary>
        [Input("processorDefinition")]
        public Input<Inputs.LogProcessingProcessorDefinitionGetArgs>? ProcessorDefinition { get; set; }

        /// <summary>
        /// Matcher
        /// </summary>
        [Input("query")]
        public Input<string>? Query { get; set; }

        /// <summary>
        /// Rule name
        /// </summary>
        [Input("ruleName")]
        public Input<string>? RuleName { get; set; }

        /// <summary>
        /// ## Rule testing
        /// ### 1. Paste a log / JSON sample
        /// </summary>
        [Input("ruleTesting")]
        public Input<Inputs.LogProcessingRuleTestingGetArgs>? RuleTesting { get; set; }

        public LogProcessingState()
        {
        }
        public static new LogProcessingState Empty => new LogProcessingState();
    }
}
