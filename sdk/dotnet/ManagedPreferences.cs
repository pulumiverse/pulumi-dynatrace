// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/managedPreferences:ManagedPreferences")]
    public partial class ManagedPreferences : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Default: `false`
        /// </summary>
        [Output("certificateManagementEnabled")]
        public Output<bool?> CertificateManagementEnabled { get; private set; } = null!;

        /// <summary>
        /// Default: `true`
        /// </summary>
        [Output("certificateManagementPossible")]
        public Output<bool?> CertificateManagementPossible { get; private set; } = null!;

        /// <summary>
        /// If true, each new user will get an invitation to set up a Dynatrace user account to access Dynatrace support resources user upon first login. Default: `false`
        /// </summary>
        [Output("communityCreateUser")]
        public Output<bool?> CommunityCreateUser { get; private set; } = null!;

        /// <summary>
        /// If true, results from Documentation are included in platform search. Default: `false`
        /// </summary>
        [Output("communityExternalSearch")]
        public Output<bool?> CommunityExternalSearch { get; private set; } = null!;

        /// <summary>
        /// If true, live, in-product assistance with our Product Experts is enabled. Default: `false`
        /// </summary>
        [Output("helpChatEnabled")]
        public Output<bool?> HelpChatEnabled { get; private set; } = null!;

        /// <summary>
        /// If true, audited, read-only remote access to your Dynatrace configuration settings is allowed. Default: `false`
        /// </summary>
        [Output("readOnlyRemoteAccessAllowed")]
        public Output<bool?> ReadOnlyRemoteAccessAllowed { get; private set; } = null!;

        /// <summary>
        /// If true, audited access to your Dynatrace cluster is allowed by approved Dynatrace employees otherwise by privileged Dynatrace employees. Default: `false`
        /// </summary>
        [Output("remoteAccessOnDemandOnly")]
        public Output<bool?> RemoteAccessOnDemandOnly { get; private set; } = null!;

        /// <summary>
        /// If true, Dynatrace OneAgent monitors Dynatrace. Default: `true`
        /// </summary>
        [Output("ruxitMonitorsRuxit")]
        public Output<bool> RuxitMonitorsRuxit { get; private set; } = null!;

        /// <summary>
        /// If true, audited remote-access to your Dynatrace configuration is allowed settings. Default: `true`
        /// </summary>
        [Output("supportAllowRemoteAccess")]
        public Output<bool?> SupportAllowRemoteAccess { get; private set; } = null!;

        /// <summary>
        /// If true, usage and billing information will be reported.
        /// </summary>
        [Output("supportSendBilling")]
        public Output<bool> SupportSendBilling { get; private set; } = null!;

        /// <summary>
        /// If true, Dynatrace cluster health will be reported.
        /// </summary>
        [Output("supportSendClusterHealth")]
        public Output<bool> SupportSendClusterHealth { get; private set; } = null!;

        /// <summary>
        /// If true, Dynatrace cluster health and OneAgent events will be reported. Default: `true`
        /// </summary>
        [Output("supportSendEvents")]
        public Output<bool?> SupportSendEvents { get; private set; } = null!;

        /// <summary>
        /// If true, usage and billing information will NOT be reported.
        /// </summary>
        [Output("suppressNonBillingRelevantData")]
        public Output<bool> SuppressNonBillingRelevantData { get; private set; } = null!;

        /// <summary>
        /// Default: `false`
        /// </summary>
        [Output("telemetrySharing")]
        public Output<bool?> TelemetrySharing { get; private set; } = null!;


        /// <summary>
        /// Create a ManagedPreferences resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ManagedPreferences(string name, ManagedPreferencesArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/managedPreferences:ManagedPreferences", name, args ?? new ManagedPreferencesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ManagedPreferences(string name, Input<string> id, ManagedPreferencesState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/managedPreferences:ManagedPreferences", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ManagedPreferences resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ManagedPreferences Get(string name, Input<string> id, ManagedPreferencesState? state = null, CustomResourceOptions? options = null)
        {
            return new ManagedPreferences(name, id, state, options);
        }
    }

    public sealed class ManagedPreferencesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Default: `false`
        /// </summary>
        [Input("certificateManagementEnabled")]
        public Input<bool>? CertificateManagementEnabled { get; set; }

        /// <summary>
        /// Default: `true`
        /// </summary>
        [Input("certificateManagementPossible")]
        public Input<bool>? CertificateManagementPossible { get; set; }

        /// <summary>
        /// If true, each new user will get an invitation to set up a Dynatrace user account to access Dynatrace support resources user upon first login. Default: `false`
        /// </summary>
        [Input("communityCreateUser")]
        public Input<bool>? CommunityCreateUser { get; set; }

        /// <summary>
        /// If true, results from Documentation are included in platform search. Default: `false`
        /// </summary>
        [Input("communityExternalSearch")]
        public Input<bool>? CommunityExternalSearch { get; set; }

        /// <summary>
        /// If true, live, in-product assistance with our Product Experts is enabled. Default: `false`
        /// </summary>
        [Input("helpChatEnabled")]
        public Input<bool>? HelpChatEnabled { get; set; }

        /// <summary>
        /// If true, audited, read-only remote access to your Dynatrace configuration settings is allowed. Default: `false`
        /// </summary>
        [Input("readOnlyRemoteAccessAllowed")]
        public Input<bool>? ReadOnlyRemoteAccessAllowed { get; set; }

        /// <summary>
        /// If true, audited access to your Dynatrace cluster is allowed by approved Dynatrace employees otherwise by privileged Dynatrace employees. Default: `false`
        /// </summary>
        [Input("remoteAccessOnDemandOnly")]
        public Input<bool>? RemoteAccessOnDemandOnly { get; set; }

        /// <summary>
        /// If true, Dynatrace OneAgent monitors Dynatrace. Default: `true`
        /// </summary>
        [Input("ruxitMonitorsRuxit", required: true)]
        public Input<bool> RuxitMonitorsRuxit { get; set; } = null!;

        /// <summary>
        /// If true, audited remote-access to your Dynatrace configuration is allowed settings. Default: `true`
        /// </summary>
        [Input("supportAllowRemoteAccess")]
        public Input<bool>? SupportAllowRemoteAccess { get; set; }

        /// <summary>
        /// If true, usage and billing information will be reported.
        /// </summary>
        [Input("supportSendBilling", required: true)]
        public Input<bool> SupportSendBilling { get; set; } = null!;

        /// <summary>
        /// If true, Dynatrace cluster health will be reported.
        /// </summary>
        [Input("supportSendClusterHealth", required: true)]
        public Input<bool> SupportSendClusterHealth { get; set; } = null!;

        /// <summary>
        /// If true, Dynatrace cluster health and OneAgent events will be reported. Default: `true`
        /// </summary>
        [Input("supportSendEvents")]
        public Input<bool>? SupportSendEvents { get; set; }

        /// <summary>
        /// If true, usage and billing information will NOT be reported.
        /// </summary>
        [Input("suppressNonBillingRelevantData", required: true)]
        public Input<bool> SuppressNonBillingRelevantData { get; set; } = null!;

        /// <summary>
        /// Default: `false`
        /// </summary>
        [Input("telemetrySharing")]
        public Input<bool>? TelemetrySharing { get; set; }

        public ManagedPreferencesArgs()
        {
        }
        public static new ManagedPreferencesArgs Empty => new ManagedPreferencesArgs();
    }

    public sealed class ManagedPreferencesState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Default: `false`
        /// </summary>
        [Input("certificateManagementEnabled")]
        public Input<bool>? CertificateManagementEnabled { get; set; }

        /// <summary>
        /// Default: `true`
        /// </summary>
        [Input("certificateManagementPossible")]
        public Input<bool>? CertificateManagementPossible { get; set; }

        /// <summary>
        /// If true, each new user will get an invitation to set up a Dynatrace user account to access Dynatrace support resources user upon first login. Default: `false`
        /// </summary>
        [Input("communityCreateUser")]
        public Input<bool>? CommunityCreateUser { get; set; }

        /// <summary>
        /// If true, results from Documentation are included in platform search. Default: `false`
        /// </summary>
        [Input("communityExternalSearch")]
        public Input<bool>? CommunityExternalSearch { get; set; }

        /// <summary>
        /// If true, live, in-product assistance with our Product Experts is enabled. Default: `false`
        /// </summary>
        [Input("helpChatEnabled")]
        public Input<bool>? HelpChatEnabled { get; set; }

        /// <summary>
        /// If true, audited, read-only remote access to your Dynatrace configuration settings is allowed. Default: `false`
        /// </summary>
        [Input("readOnlyRemoteAccessAllowed")]
        public Input<bool>? ReadOnlyRemoteAccessAllowed { get; set; }

        /// <summary>
        /// If true, audited access to your Dynatrace cluster is allowed by approved Dynatrace employees otherwise by privileged Dynatrace employees. Default: `false`
        /// </summary>
        [Input("remoteAccessOnDemandOnly")]
        public Input<bool>? RemoteAccessOnDemandOnly { get; set; }

        /// <summary>
        /// If true, Dynatrace OneAgent monitors Dynatrace. Default: `true`
        /// </summary>
        [Input("ruxitMonitorsRuxit")]
        public Input<bool>? RuxitMonitorsRuxit { get; set; }

        /// <summary>
        /// If true, audited remote-access to your Dynatrace configuration is allowed settings. Default: `true`
        /// </summary>
        [Input("supportAllowRemoteAccess")]
        public Input<bool>? SupportAllowRemoteAccess { get; set; }

        /// <summary>
        /// If true, usage and billing information will be reported.
        /// </summary>
        [Input("supportSendBilling")]
        public Input<bool>? SupportSendBilling { get; set; }

        /// <summary>
        /// If true, Dynatrace cluster health will be reported.
        /// </summary>
        [Input("supportSendClusterHealth")]
        public Input<bool>? SupportSendClusterHealth { get; set; }

        /// <summary>
        /// If true, Dynatrace cluster health and OneAgent events will be reported. Default: `true`
        /// </summary>
        [Input("supportSendEvents")]
        public Input<bool>? SupportSendEvents { get; set; }

        /// <summary>
        /// If true, usage and billing information will NOT be reported.
        /// </summary>
        [Input("suppressNonBillingRelevantData")]
        public Input<bool>? SuppressNonBillingRelevantData { get; set; }

        /// <summary>
        /// Default: `false`
        /// </summary>
        [Input("telemetrySharing")]
        public Input<bool>? TelemetrySharing { get; set; }

        public ManagedPreferencesState()
        {
        }
        public static new ManagedPreferencesState Empty => new ManagedPreferencesState();
    }
}
