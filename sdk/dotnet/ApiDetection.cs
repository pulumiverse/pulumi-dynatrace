// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/apiDetection:ApiDetection")]
    public partial class ApiDetection : global::Pulumi.CustomResource
    {
        /// <summary>
        /// This color will be used to highlight APIs when viewing code level data, such as distributed traces or method hotspots.
        /// </summary>
        [Output("apiColor")]
        public Output<string> ApiColor { get; private set; } = null!;

        /// <summary>
        /// API name
        /// </summary>
        [Output("apiName")]
        public Output<string> ApiName { get; private set; } = null!;

        /// <summary>
        /// List of conditions
        /// </summary>
        [Output("conditions")]
        public Output<Outputs.ApiDetectionConditions?> Conditions { get; private set; } = null!;

        /// <summary>
        /// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        /// </summary>
        [Output("insertAfter")]
        public Output<string> InsertAfter { get; private set; } = null!;

        /// <summary>
        /// Restrict this rule to a specific technology.
        /// </summary>
        [Output("technology")]
        public Output<string?> Technology { get; private set; } = null!;

        /// <summary>
        /// This API defines a third party library
        /// </summary>
        [Output("thirdPartyApi")]
        public Output<bool> ThirdPartyApi { get; private set; } = null!;


        /// <summary>
        /// Create a ApiDetection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ApiDetection(string name, ApiDetectionArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/apiDetection:ApiDetection", name, args ?? new ApiDetectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ApiDetection(string name, Input<string> id, ApiDetectionState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/apiDetection:ApiDetection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ApiDetection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ApiDetection Get(string name, Input<string> id, ApiDetectionState? state = null, CustomResourceOptions? options = null)
        {
            return new ApiDetection(name, id, state, options);
        }
    }

    public sealed class ApiDetectionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This color will be used to highlight APIs when viewing code level data, such as distributed traces or method hotspots.
        /// </summary>
        [Input("apiColor", required: true)]
        public Input<string> ApiColor { get; set; } = null!;

        /// <summary>
        /// API name
        /// </summary>
        [Input("apiName", required: true)]
        public Input<string> ApiName { get; set; } = null!;

        /// <summary>
        /// List of conditions
        /// </summary>
        [Input("conditions")]
        public Input<Inputs.ApiDetectionConditionsArgs>? Conditions { get; set; }

        /// <summary>
        /// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        /// </summary>
        [Input("insertAfter")]
        public Input<string>? InsertAfter { get; set; }

        /// <summary>
        /// Restrict this rule to a specific technology.
        /// </summary>
        [Input("technology")]
        public Input<string>? Technology { get; set; }

        /// <summary>
        /// This API defines a third party library
        /// </summary>
        [Input("thirdPartyApi", required: true)]
        public Input<bool> ThirdPartyApi { get; set; } = null!;

        public ApiDetectionArgs()
        {
        }
        public static new ApiDetectionArgs Empty => new ApiDetectionArgs();
    }

    public sealed class ApiDetectionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This color will be used to highlight APIs when viewing code level data, such as distributed traces or method hotspots.
        /// </summary>
        [Input("apiColor")]
        public Input<string>? ApiColor { get; set; }

        /// <summary>
        /// API name
        /// </summary>
        [Input("apiName")]
        public Input<string>? ApiName { get; set; }

        /// <summary>
        /// List of conditions
        /// </summary>
        [Input("conditions")]
        public Input<Inputs.ApiDetectionConditionsGetArgs>? Conditions { get; set; }

        /// <summary>
        /// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        /// </summary>
        [Input("insertAfter")]
        public Input<string>? InsertAfter { get; set; }

        /// <summary>
        /// Restrict this rule to a specific technology.
        /// </summary>
        [Input("technology")]
        public Input<string>? Technology { get; set; }

        /// <summary>
        /// This API defines a third party library
        /// </summary>
        [Input("thirdPartyApi")]
        public Input<bool>? ThirdPartyApi { get; set; }

        public ApiDetectionState()
        {
        }
        public static new ApiDetectionState Empty => new ApiDetectionState();
    }
}
