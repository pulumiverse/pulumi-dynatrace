// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/webAppAutoInjection:WebAppAutoInjection")]
    public partial class WebAppAutoInjection : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
        /// </summary>
        [Output("applicationId")]
        public Output<string> ApplicationId { get; private set; } = null!;

        /// <summary>
        /// Cache control headers
        /// </summary>
        [Output("cacheControlHeaders")]
        public Output<Outputs.WebAppAutoInjectionCacheControlHeaders> CacheControlHeaders { get; private set; } = null!;

        /// <summary>
        /// Real User Monitoring code source
        /// </summary>
        [Output("monitoringCodeSourceSection")]
        public Output<Outputs.WebAppAutoInjectionMonitoringCodeSourceSection> MonitoringCodeSourceSection { get; private set; } = null!;

        /// <summary>
        /// *Code Snippet:* OneAgent injects an inline script that initializes Dynatrace and dynamically downloads the monitoring code into your application. Use when you want to inject the monitoring code in deferred mode.
        /// </summary>
        [Output("snippetFormat")]
        public Output<Outputs.WebAppAutoInjectionSnippetFormat> SnippetFormat { get; private set; } = null!;


        /// <summary>
        /// Create a WebAppAutoInjection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WebAppAutoInjection(string name, WebAppAutoInjectionArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/webAppAutoInjection:WebAppAutoInjection", name, args ?? new WebAppAutoInjectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WebAppAutoInjection(string name, Input<string> id, WebAppAutoInjectionState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/webAppAutoInjection:WebAppAutoInjection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WebAppAutoInjection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WebAppAutoInjection Get(string name, Input<string> id, WebAppAutoInjectionState? state = null, CustomResourceOptions? options = null)
        {
            return new WebAppAutoInjection(name, id, state, options);
        }
    }

    public sealed class WebAppAutoInjectionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
        /// </summary>
        [Input("applicationId", required: true)]
        public Input<string> ApplicationId { get; set; } = null!;

        /// <summary>
        /// Cache control headers
        /// </summary>
        [Input("cacheControlHeaders", required: true)]
        public Input<Inputs.WebAppAutoInjectionCacheControlHeadersArgs> CacheControlHeaders { get; set; } = null!;

        /// <summary>
        /// Real User Monitoring code source
        /// </summary>
        [Input("monitoringCodeSourceSection", required: true)]
        public Input<Inputs.WebAppAutoInjectionMonitoringCodeSourceSectionArgs> MonitoringCodeSourceSection { get; set; } = null!;

        /// <summary>
        /// *Code Snippet:* OneAgent injects an inline script that initializes Dynatrace and dynamically downloads the monitoring code into your application. Use when you want to inject the monitoring code in deferred mode.
        /// </summary>
        [Input("snippetFormat", required: true)]
        public Input<Inputs.WebAppAutoInjectionSnippetFormatArgs> SnippetFormat { get; set; } = null!;

        public WebAppAutoInjectionArgs()
        {
        }
        public static new WebAppAutoInjectionArgs Empty => new WebAppAutoInjectionArgs();
    }

    public sealed class WebAppAutoInjectionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
        /// </summary>
        [Input("applicationId")]
        public Input<string>? ApplicationId { get; set; }

        /// <summary>
        /// Cache control headers
        /// </summary>
        [Input("cacheControlHeaders")]
        public Input<Inputs.WebAppAutoInjectionCacheControlHeadersGetArgs>? CacheControlHeaders { get; set; }

        /// <summary>
        /// Real User Monitoring code source
        /// </summary>
        [Input("monitoringCodeSourceSection")]
        public Input<Inputs.WebAppAutoInjectionMonitoringCodeSourceSectionGetArgs>? MonitoringCodeSourceSection { get; set; }

        /// <summary>
        /// *Code Snippet:* OneAgent injects an inline script that initializes Dynatrace and dynamically downloads the monitoring code into your application. Use when you want to inject the monitoring code in deferred mode.
        /// </summary>
        [Input("snippetFormat")]
        public Input<Inputs.WebAppAutoInjectionSnippetFormatGetArgs>? SnippetFormat { get; set; }

        public WebAppAutoInjectionState()
        {
        }
        public static new WebAppAutoInjectionState Empty => new WebAppAutoInjectionState();
    }
}
