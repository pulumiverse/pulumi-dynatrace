// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/sloNormalization:SloNormalization")]
    public partial class SloNormalization : global::Pulumi.CustomResource
    {
        /// <summary>
        /// When set to true, the error budget left will be shown in percent of the total error budget. For more details see [SLO normalization help](https://dt-url.net/slo-normalize-error-budget).
        /// </summary>
        [Output("normalize")]
        public Output<bool> Normalize { get; private set; } = null!;


        /// <summary>
        /// Create a SloNormalization resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SloNormalization(string name, SloNormalizationArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/sloNormalization:SloNormalization", name, args ?? new SloNormalizationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SloNormalization(string name, Input<string> id, SloNormalizationState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/sloNormalization:SloNormalization", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SloNormalization resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SloNormalization Get(string name, Input<string> id, SloNormalizationState? state = null, CustomResourceOptions? options = null)
        {
            return new SloNormalization(name, id, state, options);
        }
    }

    public sealed class SloNormalizationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When set to true, the error budget left will be shown in percent of the total error budget. For more details see [SLO normalization help](https://dt-url.net/slo-normalize-error-budget).
        /// </summary>
        [Input("normalize", required: true)]
        public Input<bool> Normalize { get; set; } = null!;

        public SloNormalizationArgs()
        {
        }
        public static new SloNormalizationArgs Empty => new SloNormalizationArgs();
    }

    public sealed class SloNormalizationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When set to true, the error budget left will be shown in percent of the total error budget. For more details see [SLO normalization help](https://dt-url.net/slo-normalize-error-budget).
        /// </summary>
        [Input("normalize")]
        public Input<bool>? Normalize { get; set; }

        public SloNormalizationState()
        {
        }
        public static new SloNormalizationState Empty => new SloNormalizationState();
    }
}
