// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    /// <summary>
    /// !&gt; This resource API endpoint has been deprecated.
    /// 
    /// &gt; This resource requires the API token scopes **Read settings** (`settings.read`) and **Write settings** (`settings.write`)
    /// 
    /// ## Dynatrace Documentation
    /// 
    /// - DDU Pools - https://www.dynatrace.com/support/help/monitoring-consumption/davis-data-units#ddu-pools
    /// 
    /// - Settings API - https://www.dynatrace.com/support/help/dynatrace-api/environment-api/settings (schemaId: `builtin:accounting.ddu.limit`)
    /// 
    /// ## Resource Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Dynatrace = Pulumiverse.Dynatrace;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var _name_ = new Dynatrace.DduPool("#name#", new()
    ///     {
    ///         Events = new Dynatrace.Inputs.DduPoolEventsArgs
    ///         {
    ///             Enabled = true,
    ///             Type = "MONTHLY",
    ///             Value = 125,
    ///         },
    ///         LogMonitoring = new Dynatrace.Inputs.DduPoolLogMonitoringArgs
    ///         {
    ///             Enabled = true,
    ///             Type = "MONTHLY",
    ///             Value = 124,
    ///         },
    ///         Metrics = new Dynatrace.Inputs.DduPoolMetricsArgs
    ///         {
    ///             Enabled = true,
    ///             Type = "MONTHLY",
    ///             Value = 123,
    ///         },
    ///         Serverless = new Dynatrace.Inputs.DduPoolServerlessArgs
    ///         {
    ///             Enabled = true,
    ///             Type = "MONTHLY",
    ///             Value = 126,
    ///         },
    ///         Traces = new Dynatrace.Inputs.DduPoolTracesArgs
    ///         {
    ///             Enabled = true,
    ///             Type = "MONTHLY",
    ///             Value = 127,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [DynatraceResourceType("dynatrace:index/dduPool:DduPool")]
    public partial class DduPool : global::Pulumi.CustomResource
    {
        /// <summary>
        /// DDU pool settings for Events
        /// </summary>
        [Output("events")]
        public Output<Outputs.DduPoolEvents?> Events { get; private set; } = null!;

        /// <summary>
        /// DDU pool settings for Log Monitoring
        /// </summary>
        [Output("logMonitoring")]
        public Output<Outputs.DduPoolLogMonitoring?> LogMonitoring { get; private set; } = null!;

        /// <summary>
        /// DDU pool settings for Metrics
        /// </summary>
        [Output("metrics")]
        public Output<Outputs.DduPoolMetrics?> Metrics { get; private set; } = null!;

        /// <summary>
        /// DDU pool settings for Serverless
        /// </summary>
        [Output("serverless")]
        public Output<Outputs.DduPoolServerless?> Serverless { get; private set; } = null!;

        /// <summary>
        /// DDU pool settings for Traces
        /// </summary>
        [Output("traces")]
        public Output<Outputs.DduPoolTraces?> Traces { get; private set; } = null!;


        /// <summary>
        /// Create a DduPool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DduPool(string name, DduPoolArgs? args = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/dduPool:DduPool", name, args ?? new DduPoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DduPool(string name, Input<string> id, DduPoolState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/dduPool:DduPool", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DduPool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DduPool Get(string name, Input<string> id, DduPoolState? state = null, CustomResourceOptions? options = null)
        {
            return new DduPool(name, id, state, options);
        }
    }

    public sealed class DduPoolArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// DDU pool settings for Events
        /// </summary>
        [Input("events")]
        public Input<Inputs.DduPoolEventsArgs>? Events { get; set; }

        /// <summary>
        /// DDU pool settings for Log Monitoring
        /// </summary>
        [Input("logMonitoring")]
        public Input<Inputs.DduPoolLogMonitoringArgs>? LogMonitoring { get; set; }

        /// <summary>
        /// DDU pool settings for Metrics
        /// </summary>
        [Input("metrics")]
        public Input<Inputs.DduPoolMetricsArgs>? Metrics { get; set; }

        /// <summary>
        /// DDU pool settings for Serverless
        /// </summary>
        [Input("serverless")]
        public Input<Inputs.DduPoolServerlessArgs>? Serverless { get; set; }

        /// <summary>
        /// DDU pool settings for Traces
        /// </summary>
        [Input("traces")]
        public Input<Inputs.DduPoolTracesArgs>? Traces { get; set; }

        public DduPoolArgs()
        {
        }
        public static new DduPoolArgs Empty => new DduPoolArgs();
    }

    public sealed class DduPoolState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// DDU pool settings for Events
        /// </summary>
        [Input("events")]
        public Input<Inputs.DduPoolEventsGetArgs>? Events { get; set; }

        /// <summary>
        /// DDU pool settings for Log Monitoring
        /// </summary>
        [Input("logMonitoring")]
        public Input<Inputs.DduPoolLogMonitoringGetArgs>? LogMonitoring { get; set; }

        /// <summary>
        /// DDU pool settings for Metrics
        /// </summary>
        [Input("metrics")]
        public Input<Inputs.DduPoolMetricsGetArgs>? Metrics { get; set; }

        /// <summary>
        /// DDU pool settings for Serverless
        /// </summary>
        [Input("serverless")]
        public Input<Inputs.DduPoolServerlessGetArgs>? Serverless { get; set; }

        /// <summary>
        /// DDU pool settings for Traces
        /// </summary>
        [Input("traces")]
        public Input<Inputs.DduPoolTracesGetArgs>? Traces { get; set; }

        public DduPoolState()
        {
        }
        public static new DduPoolState Empty => new DduPoolState();
    }
}
