// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    public static class GetGenericSettings
    {
        /// <summary>
        /// The generic settings data source allows Settings 2.0 objects to be retrieved by its schema ID, scope, and/or filter.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Dynatrace.GetGenericSettings.Invoke(new()
        ///     {
        ///         Schema = "builtin:alerting.maintenance-window",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["genericSettings"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetGenericSettingsResult> InvokeAsync(GetGenericSettingsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGenericSettingsResult>("dynatrace:index/getGenericSettings:getGenericSettings", args ?? new GetGenericSettingsArgs(), options.WithDefaults());

        /// <summary>
        /// The generic settings data source allows Settings 2.0 objects to be retrieved by its schema ID, scope, and/or filter.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Dynatrace.GetGenericSettings.Invoke(new()
        ///     {
        ///         Schema = "builtin:alerting.maintenance-window",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["genericSettings"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetGenericSettingsResult> Invoke(GetGenericSettingsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGenericSettingsResult>("dynatrace:index/getGenericSettings:getGenericSettings", args ?? new GetGenericSettingsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The generic settings data source allows Settings 2.0 objects to be retrieved by its schema ID, scope, and/or filter.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Dynatrace.GetGenericSettings.Invoke(new()
        ///     {
        ///         Schema = "builtin:alerting.maintenance-window",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["genericSettings"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetGenericSettingsResult> Invoke(GetGenericSettingsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetGenericSettingsResult>("dynatrace:index/getGenericSettings:getGenericSettings", args ?? new GetGenericSettingsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGenericSettingsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Filter of the requested objects
        /// </summary>
        [Input("filter")]
        public string? Filter { get; set; }

        /// <summary>
        /// Schema IDs to which the requested objects belong
        /// </summary>
        [Input("schema")]
        public string? Schema { get; set; }

        /// <summary>
        /// Scope that the requested objects target
        /// </summary>
        [Input("scope")]
        public string? Scope { get; set; }

        public GetGenericSettingsArgs()
        {
        }
        public static new GetGenericSettingsArgs Empty => new GetGenericSettingsArgs();
    }

    public sealed class GetGenericSettingsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Filter of the requested objects
        /// </summary>
        [Input("filter")]
        public Input<string>? Filter { get; set; }

        /// <summary>
        /// Schema IDs to which the requested objects belong
        /// </summary>
        [Input("schema")]
        public Input<string>? Schema { get; set; }

        /// <summary>
        /// Scope that the requested objects target
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        public GetGenericSettingsInvokeArgs()
        {
        }
        public static new GetGenericSettingsInvokeArgs Empty => new GetGenericSettingsInvokeArgs();
    }


    [OutputType]
    public sealed class GetGenericSettingsResult
    {
        /// <summary>
        /// Filter of the requested objects
        /// </summary>
        public readonly string? Filter;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Schema IDs to which the requested objects belong
        /// </summary>
        public readonly string Schema;
        /// <summary>
        /// Scope that the requested objects target
        /// </summary>
        public readonly string Scope;
        public readonly ImmutableArray<Outputs.GetGenericSettingsValueResult> Values;

        [OutputConstructor]
        private GetGenericSettingsResult(
            string? filter,

            string id,

            string schema,

            string scope,

            ImmutableArray<Outputs.GetGenericSettingsValueResult> values)
        {
            Filter = filter;
            Id = id;
            Schema = schema;
            Scope = scope;
            Values = values;
        }
    }
}
