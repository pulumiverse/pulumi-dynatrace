// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/httpMonitorScript:HttpMonitorScript")]
    public partial class HttpMonitorScript : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the HTTP monitor
        /// </summary>
        [Output("httpId")]
        public Output<string> HttpId { get; private set; } = null!;

        /// <summary>
        /// The HTTP Script
        /// </summary>
        [Output("script")]
        public Output<Outputs.HttpMonitorScriptScript> Script { get; private set; } = null!;


        /// <summary>
        /// Create a HttpMonitorScript resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public HttpMonitorScript(string name, HttpMonitorScriptArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/httpMonitorScript:HttpMonitorScript", name, args ?? new HttpMonitorScriptArgs(), MakeResourceOptions(options, ""))
        {
        }

        private HttpMonitorScript(string name, Input<string> id, HttpMonitorScriptState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/httpMonitorScript:HttpMonitorScript", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing HttpMonitorScript resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static HttpMonitorScript Get(string name, Input<string> id, HttpMonitorScriptState? state = null, CustomResourceOptions? options = null)
        {
            return new HttpMonitorScript(name, id, state, options);
        }
    }

    public sealed class HttpMonitorScriptArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the HTTP monitor
        /// </summary>
        [Input("httpId", required: true)]
        public Input<string> HttpId { get; set; } = null!;

        /// <summary>
        /// The HTTP Script
        /// </summary>
        [Input("script", required: true)]
        public Input<Inputs.HttpMonitorScriptScriptArgs> Script { get; set; } = null!;

        public HttpMonitorScriptArgs()
        {
        }
        public static new HttpMonitorScriptArgs Empty => new HttpMonitorScriptArgs();
    }

    public sealed class HttpMonitorScriptState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the HTTP monitor
        /// </summary>
        [Input("httpId")]
        public Input<string>? HttpId { get; set; }

        /// <summary>
        /// The HTTP Script
        /// </summary>
        [Input("script")]
        public Input<Inputs.HttpMonitorScriptScriptGetArgs>? Script { get; set; }

        public HttpMonitorScriptState()
        {
        }
        public static new HttpMonitorScriptState Empty => new HttpMonitorScriptState();
    }
}
