// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/alerting:Alerting")]
    public partial class Alerting : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The list of event filters.  For all filters that are *negated* inside of these event filters, that is all `Predefined` as well as `Custom` (Title and/or Description) ones the AND logic applies. For all *non-negated* ones the OR logic applies. Between these two groups, negated and non-negated, the AND logic applies.  If you specify both severity rule and event filter, the AND logic applies
        /// </summary>
        [Output("filters")]
        public Output<Outputs.AlertingFilters?> Filters { get; private set; } = null!;

        /// <summary>
        /// The ID of this setting when referred to by the Config REST API V1
        /// </summary>
        [Output("legacyId")]
        public Output<string> LegacyId { get; private set; } = null!;

        /// <summary>
        /// Entities which are part of the configured management zones will match this alerting profile. It is recommended to use manual tags instead.
        /// </summary>
        [Output("managementZone")]
        public Output<string?> ManagementZone { get; private set; } = null!;

        /// <summary>
        /// The name of the alerting profile, displayed in the UI
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
        /// </summary>
        [Output("rules")]
        public Output<Outputs.AlertingRules?> Rules { get; private set; } = null!;


        /// <summary>
        /// Create a Alerting resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Alerting(string name, AlertingArgs? args = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/alerting:Alerting", name, args ?? new AlertingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Alerting(string name, Input<string> id, AlertingState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/alerting:Alerting", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Alerting resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Alerting Get(string name, Input<string> id, AlertingState? state = null, CustomResourceOptions? options = null)
        {
            return new Alerting(name, id, state, options);
        }
    }

    public sealed class AlertingArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The list of event filters.  For all filters that are *negated* inside of these event filters, that is all `Predefined` as well as `Custom` (Title and/or Description) ones the AND logic applies. For all *non-negated* ones the OR logic applies. Between these two groups, negated and non-negated, the AND logic applies.  If you specify both severity rule and event filter, the AND logic applies
        /// </summary>
        [Input("filters")]
        public Input<Inputs.AlertingFiltersArgs>? Filters { get; set; }

        /// <summary>
        /// The ID of this setting when referred to by the Config REST API V1
        /// </summary>
        [Input("legacyId")]
        public Input<string>? LegacyId { get; set; }

        /// <summary>
        /// Entities which are part of the configured management zones will match this alerting profile. It is recommended to use manual tags instead.
        /// </summary>
        [Input("managementZone")]
        public Input<string>? ManagementZone { get; set; }

        /// <summary>
        /// The name of the alerting profile, displayed in the UI
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
        /// </summary>
        [Input("rules")]
        public Input<Inputs.AlertingRulesArgs>? Rules { get; set; }

        public AlertingArgs()
        {
        }
        public static new AlertingArgs Empty => new AlertingArgs();
    }

    public sealed class AlertingState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The list of event filters.  For all filters that are *negated* inside of these event filters, that is all `Predefined` as well as `Custom` (Title and/or Description) ones the AND logic applies. For all *non-negated* ones the OR logic applies. Between these two groups, negated and non-negated, the AND logic applies.  If you specify both severity rule and event filter, the AND logic applies
        /// </summary>
        [Input("filters")]
        public Input<Inputs.AlertingFiltersGetArgs>? Filters { get; set; }

        /// <summary>
        /// The ID of this setting when referred to by the Config REST API V1
        /// </summary>
        [Input("legacyId")]
        public Input<string>? LegacyId { get; set; }

        /// <summary>
        /// Entities which are part of the configured management zones will match this alerting profile. It is recommended to use manual tags instead.
        /// </summary>
        [Input("managementZone")]
        public Input<string>? ManagementZone { get; set; }

        /// <summary>
        /// The name of the alerting profile, displayed in the UI
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
        /// </summary>
        [Input("rules")]
        public Input<Inputs.AlertingRulesGetArgs>? Rules { get; set; }

        public AlertingState()
        {
        }
        public static new AlertingState Empty => new AlertingState();
    }
}
