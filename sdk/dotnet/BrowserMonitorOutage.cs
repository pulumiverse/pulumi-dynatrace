// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/browserMonitorOutage:BrowserMonitorOutage")]
    public partial class BrowserMonitorOutage : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (Field has overlap with `dynatrace.BrowserMonitor`) Alert if all locations are unable to access my web application
        /// </summary>
        [Output("globalConsecutiveOutageCountThreshold")]
        public Output<int?> GlobalConsecutiveOutageCountThreshold { get; private set; } = null!;

        /// <summary>
        /// (Field has overlap with `dynatrace.BrowserMonitor`) Generate a problem and send an alert when the monitor is unavailable at all configured locations.
        /// </summary>
        [Output("globalOutages")]
        public Output<bool> GlobalOutages { get; private set; } = null!;

        /// <summary>
        /// (Field has overlap with `dynatrace.BrowserMonitor`) are unable to access my web application
        /// </summary>
        [Output("localConsecutiveOutageCountThreshold")]
        public Output<int?> LocalConsecutiveOutageCountThreshold { get; private set; } = null!;

        /// <summary>
        /// (Field has overlap with `dynatrace.BrowserMonitor`) Alert if at least
        /// </summary>
        [Output("localLocationOutageCountThreshold")]
        public Output<int?> LocalLocationOutageCountThreshold { get; private set; } = null!;

        /// <summary>
        /// (Field has overlap with `dynatrace.BrowserMonitor`) Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
        /// </summary>
        [Output("localOutages")]
        public Output<bool> LocalOutages { get; private set; } = null!;

        /// <summary>
        /// (Field has overlap with `dynatrace.BrowserMonitor`) When enabled, which is the default, failing monitor executions are retried immediately one time to avoid false positives and only the second result is used. When disabled, we use the first result right away.
        /// Requires ActiveGate version 1.207+ for private locations.
        /// </summary>
        [Output("retryOnError")]
        public Output<bool> RetryOnError { get; private set; } = null!;

        /// <summary>
        /// The scope of this setting (SYNTHETIC_TEST). Omit this property if you want to cover the whole environment.
        /// </summary>
        [Output("scope")]
        public Output<string?> Scope { get; private set; } = null!;


        /// <summary>
        /// Create a BrowserMonitorOutage resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BrowserMonitorOutage(string name, BrowserMonitorOutageArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/browserMonitorOutage:BrowserMonitorOutage", name, args ?? new BrowserMonitorOutageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BrowserMonitorOutage(string name, Input<string> id, BrowserMonitorOutageState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/browserMonitorOutage:BrowserMonitorOutage", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BrowserMonitorOutage resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BrowserMonitorOutage Get(string name, Input<string> id, BrowserMonitorOutageState? state = null, CustomResourceOptions? options = null)
        {
            return new BrowserMonitorOutage(name, id, state, options);
        }
    }

    public sealed class BrowserMonitorOutageArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Field has overlap with `dynatrace.BrowserMonitor`) Alert if all locations are unable to access my web application
        /// </summary>
        [Input("globalConsecutiveOutageCountThreshold")]
        public Input<int>? GlobalConsecutiveOutageCountThreshold { get; set; }

        /// <summary>
        /// (Field has overlap with `dynatrace.BrowserMonitor`) Generate a problem and send an alert when the monitor is unavailable at all configured locations.
        /// </summary>
        [Input("globalOutages", required: true)]
        public Input<bool> GlobalOutages { get; set; } = null!;

        /// <summary>
        /// (Field has overlap with `dynatrace.BrowserMonitor`) are unable to access my web application
        /// </summary>
        [Input("localConsecutiveOutageCountThreshold")]
        public Input<int>? LocalConsecutiveOutageCountThreshold { get; set; }

        /// <summary>
        /// (Field has overlap with `dynatrace.BrowserMonitor`) Alert if at least
        /// </summary>
        [Input("localLocationOutageCountThreshold")]
        public Input<int>? LocalLocationOutageCountThreshold { get; set; }

        /// <summary>
        /// (Field has overlap with `dynatrace.BrowserMonitor`) Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
        /// </summary>
        [Input("localOutages", required: true)]
        public Input<bool> LocalOutages { get; set; } = null!;

        /// <summary>
        /// (Field has overlap with `dynatrace.BrowserMonitor`) When enabled, which is the default, failing monitor executions are retried immediately one time to avoid false positives and only the second result is used. When disabled, we use the first result right away.
        /// Requires ActiveGate version 1.207+ for private locations.
        /// </summary>
        [Input("retryOnError", required: true)]
        public Input<bool> RetryOnError { get; set; } = null!;

        /// <summary>
        /// The scope of this setting (SYNTHETIC_TEST). Omit this property if you want to cover the whole environment.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        public BrowserMonitorOutageArgs()
        {
        }
        public static new BrowserMonitorOutageArgs Empty => new BrowserMonitorOutageArgs();
    }

    public sealed class BrowserMonitorOutageState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Field has overlap with `dynatrace.BrowserMonitor`) Alert if all locations are unable to access my web application
        /// </summary>
        [Input("globalConsecutiveOutageCountThreshold")]
        public Input<int>? GlobalConsecutiveOutageCountThreshold { get; set; }

        /// <summary>
        /// (Field has overlap with `dynatrace.BrowserMonitor`) Generate a problem and send an alert when the monitor is unavailable at all configured locations.
        /// </summary>
        [Input("globalOutages")]
        public Input<bool>? GlobalOutages { get; set; }

        /// <summary>
        /// (Field has overlap with `dynatrace.BrowserMonitor`) are unable to access my web application
        /// </summary>
        [Input("localConsecutiveOutageCountThreshold")]
        public Input<int>? LocalConsecutiveOutageCountThreshold { get; set; }

        /// <summary>
        /// (Field has overlap with `dynatrace.BrowserMonitor`) Alert if at least
        /// </summary>
        [Input("localLocationOutageCountThreshold")]
        public Input<int>? LocalLocationOutageCountThreshold { get; set; }

        /// <summary>
        /// (Field has overlap with `dynatrace.BrowserMonitor`) Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
        /// </summary>
        [Input("localOutages")]
        public Input<bool>? LocalOutages { get; set; }

        /// <summary>
        /// (Field has overlap with `dynatrace.BrowserMonitor`) When enabled, which is the default, failing monitor executions are retried immediately one time to avoid false positives and only the second result is used. When disabled, we use the first result right away.
        /// Requires ActiveGate version 1.207+ for private locations.
        /// </summary>
        [Input("retryOnError")]
        public Input<bool>? RetryOnError { get; set; }

        /// <summary>
        /// The scope of this setting (SYNTHETIC_TEST). Omit this property if you want to cover the whole environment.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        public BrowserMonitorOutageState()
        {
        }
        public static new BrowserMonitorOutageState Empty => new BrowserMonitorOutageState();
    }
}
