// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/webApplication:WebApplication")]
    public partial class WebApplication : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A list of conversion goals of the application
        /// </summary>
        [Output("conversionGoals")]
        public Output<Outputs.WebApplicationConversionGoals?> ConversionGoals { get; private set; } = null!;

        /// <summary>
        /// (Field has overlap with `dynatrace.WebAppEnablement`) Analize *X*% of user sessions
        /// </summary>
        [Output("costControlUserSessionPercentage")]
        public Output<int> CostControlUserSessionPercentage { get; private set; } = null!;

        /// <summary>
        /// Defines the Custom Action Apdex settings of an application
        /// </summary>
        [Output("customActionApdexSettings")]
        public Output<Outputs.WebApplicationCustomActionApdexSettings> CustomActionApdexSettings { get; private set; } = null!;

        /// <summary>
        /// User Action names to be flagged as Key User Actions
        /// </summary>
        [Output("keyUserActions")]
        public Output<ImmutableArray<Outputs.WebApplicationKeyUserAction>> KeyUserActions { get; private set; } = null!;

        /// <summary>
        /// Defines the Load Action Apdex settings of an application
        /// </summary>
        [Output("loadActionApdexSettings")]
        public Output<Outputs.WebApplicationLoadActionApdexSettings> LoadActionApdexSettings { get; private set; } = null!;

        /// <summary>
        /// The key performance metric of load actions. Possible values are `ACTION_DURATION`, `CUMULATIVE_LAYOUT_SHIFT`, `DOM_INTERACTIVE`, `FIRST_INPUT_DELAY`, `LARGEST_CONTENTFUL_PAINT`, `LOAD_EVENT_END`, `LOAD_EVENT_START`, `RESPONSE_END`, `RESPONSE_START`, `SPEED_INDEX` and `VISUALLY_COMPLETE`
        /// </summary>
        [Output("loadActionKeyPerformanceMetric")]
        public Output<string> LoadActionKeyPerformanceMetric { get; private set; } = null!;

        /// <summary>
        /// Java script agent meta data capture settings
        /// </summary>
        [Output("metaDataCaptureSettings")]
        public Output<Outputs.WebApplicationMetaDataCaptureSettings?> MetaDataCaptureSettings { get; private set; } = null!;

        /// <summary>
        /// Real user monitoring settings
        /// </summary>
        [Output("monitoringSettings")]
        public Output<Outputs.WebApplicationMonitoringSettings> MonitoringSettings { get; private set; } = null!;

        /// <summary>
        /// The name of the web application, displayed in the UI
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// (Field has overlap with `dynatrace.WebAppEnablement`) Real user monitoring enabled/disabled
        /// </summary>
        [Output("realUserMonitoringEnabled")]
        public Output<bool?> RealUserMonitoringEnabled { get; private set; } = null!;

        /// <summary>
        /// Settings regarding Session Replay
        /// </summary>
        [Output("sessionReplayConfig")]
        public Output<Outputs.WebApplicationSessionReplayConfig> SessionReplayConfig { get; private set; } = null!;

        /// <summary>
        /// The type of the web application. Possible values are `AUTO_INJECTED`, `BROWSER_EXTENSION_INJECTED` and `MANUALLY_INJECTED`
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// URL injection pattern for manual web application
        /// </summary>
        [Output("urlInjectionPattern")]
        public Output<string?> UrlInjectionPattern { get; private set; } = null!;

        /// <summary>
        /// User action and session properties settings
        /// </summary>
        [Output("userActionAndSessionProperties")]
        public Output<Outputs.WebApplicationUserActionAndSessionProperties?> UserActionAndSessionProperties { get; private set; } = null!;

        /// <summary>
        /// The settings of user action naming
        /// </summary>
        [Output("userActionNamingSettings")]
        public Output<Outputs.WebApplicationUserActionNamingSettings?> UserActionNamingSettings { get; private set; } = null!;

        /// <summary>
        /// User tags settings
        /// </summary>
        [Output("userTags")]
        public Output<Outputs.WebApplicationUserTags?> UserTags { get; private set; } = null!;

        /// <summary>
        /// These settings influence the monitoring data you receive for 3rd party, CDN, and 1st party resources
        /// </summary>
        [Output("waterfallSettings")]
        public Output<Outputs.WebApplicationWaterfallSettings> WaterfallSettings { get; private set; } = null!;

        /// <summary>
        /// Defines the XHR Action Apdex settings of an application
        /// </summary>
        [Output("xhrActionApdexSettings")]
        public Output<Outputs.WebApplicationXhrActionApdexSettings> XhrActionApdexSettings { get; private set; } = null!;

        /// <summary>
        /// The key performance metric of XHR actions. Possible values are `ACTION_DURATION`, `RESPONSE_END`, `RESPONSE_START` and `VISUALLY_COMPLETE`.
        /// </summary>
        [Output("xhrActionKeyPerformanceMetric")]
        public Output<string> XhrActionKeyPerformanceMetric { get; private set; } = null!;


        /// <summary>
        /// Create a WebApplication resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WebApplication(string name, WebApplicationArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/webApplication:WebApplication", name, args ?? new WebApplicationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WebApplication(string name, Input<string> id, WebApplicationState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/webApplication:WebApplication", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WebApplication resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WebApplication Get(string name, Input<string> id, WebApplicationState? state = null, CustomResourceOptions? options = null)
        {
            return new WebApplication(name, id, state, options);
        }
    }

    public sealed class WebApplicationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A list of conversion goals of the application
        /// </summary>
        [Input("conversionGoals")]
        public Input<Inputs.WebApplicationConversionGoalsArgs>? ConversionGoals { get; set; }

        /// <summary>
        /// (Field has overlap with `dynatrace.WebAppEnablement`) Analize *X*% of user sessions
        /// </summary>
        [Input("costControlUserSessionPercentage", required: true)]
        public Input<int> CostControlUserSessionPercentage { get; set; } = null!;

        /// <summary>
        /// Defines the Custom Action Apdex settings of an application
        /// </summary>
        [Input("customActionApdexSettings", required: true)]
        public Input<Inputs.WebApplicationCustomActionApdexSettingsArgs> CustomActionApdexSettings { get; set; } = null!;

        [Input("keyUserActions")]
        private InputList<Inputs.WebApplicationKeyUserActionArgs>? _keyUserActions;

        /// <summary>
        /// User Action names to be flagged as Key User Actions
        /// </summary>
        [Obsolete(@"Configuring Key User Actions within `dynatrace.WebApplication` is discouraged. Use the dedicated resource `dynatrace.KeyUserAction` instead.")]
        public InputList<Inputs.WebApplicationKeyUserActionArgs> KeyUserActions
        {
            get => _keyUserActions ?? (_keyUserActions = new InputList<Inputs.WebApplicationKeyUserActionArgs>());
            set => _keyUserActions = value;
        }

        /// <summary>
        /// Defines the Load Action Apdex settings of an application
        /// </summary>
        [Input("loadActionApdexSettings", required: true)]
        public Input<Inputs.WebApplicationLoadActionApdexSettingsArgs> LoadActionApdexSettings { get; set; } = null!;

        /// <summary>
        /// The key performance metric of load actions. Possible values are `ACTION_DURATION`, `CUMULATIVE_LAYOUT_SHIFT`, `DOM_INTERACTIVE`, `FIRST_INPUT_DELAY`, `LARGEST_CONTENTFUL_PAINT`, `LOAD_EVENT_END`, `LOAD_EVENT_START`, `RESPONSE_END`, `RESPONSE_START`, `SPEED_INDEX` and `VISUALLY_COMPLETE`
        /// </summary>
        [Input("loadActionKeyPerformanceMetric", required: true)]
        public Input<string> LoadActionKeyPerformanceMetric { get; set; } = null!;

        /// <summary>
        /// Java script agent meta data capture settings
        /// </summary>
        [Input("metaDataCaptureSettings")]
        public Input<Inputs.WebApplicationMetaDataCaptureSettingsArgs>? MetaDataCaptureSettings { get; set; }

        /// <summary>
        /// Real user monitoring settings
        /// </summary>
        [Input("monitoringSettings", required: true)]
        public Input<Inputs.WebApplicationMonitoringSettingsArgs> MonitoringSettings { get; set; } = null!;

        /// <summary>
        /// The name of the web application, displayed in the UI
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// (Field has overlap with `dynatrace.WebAppEnablement`) Real user monitoring enabled/disabled
        /// </summary>
        [Input("realUserMonitoringEnabled")]
        public Input<bool>? RealUserMonitoringEnabled { get; set; }

        /// <summary>
        /// Settings regarding Session Replay
        /// </summary>
        [Input("sessionReplayConfig")]
        public Input<Inputs.WebApplicationSessionReplayConfigArgs>? SessionReplayConfig { get; set; }

        /// <summary>
        /// The type of the web application. Possible values are `AUTO_INJECTED`, `BROWSER_EXTENSION_INJECTED` and `MANUALLY_INJECTED`
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// URL injection pattern for manual web application
        /// </summary>
        [Input("urlInjectionPattern")]
        public Input<string>? UrlInjectionPattern { get; set; }

        /// <summary>
        /// User action and session properties settings
        /// </summary>
        [Input("userActionAndSessionProperties")]
        public Input<Inputs.WebApplicationUserActionAndSessionPropertiesArgs>? UserActionAndSessionProperties { get; set; }

        /// <summary>
        /// The settings of user action naming
        /// </summary>
        [Input("userActionNamingSettings")]
        public Input<Inputs.WebApplicationUserActionNamingSettingsArgs>? UserActionNamingSettings { get; set; }

        /// <summary>
        /// User tags settings
        /// </summary>
        [Input("userTags")]
        public Input<Inputs.WebApplicationUserTagsArgs>? UserTags { get; set; }

        /// <summary>
        /// These settings influence the monitoring data you receive for 3rd party, CDN, and 1st party resources
        /// </summary>
        [Input("waterfallSettings", required: true)]
        public Input<Inputs.WebApplicationWaterfallSettingsArgs> WaterfallSettings { get; set; } = null!;

        /// <summary>
        /// Defines the XHR Action Apdex settings of an application
        /// </summary>
        [Input("xhrActionApdexSettings", required: true)]
        public Input<Inputs.WebApplicationXhrActionApdexSettingsArgs> XhrActionApdexSettings { get; set; } = null!;

        /// <summary>
        /// The key performance metric of XHR actions. Possible values are `ACTION_DURATION`, `RESPONSE_END`, `RESPONSE_START` and `VISUALLY_COMPLETE`.
        /// </summary>
        [Input("xhrActionKeyPerformanceMetric", required: true)]
        public Input<string> XhrActionKeyPerformanceMetric { get; set; } = null!;

        public WebApplicationArgs()
        {
        }
        public static new WebApplicationArgs Empty => new WebApplicationArgs();
    }

    public sealed class WebApplicationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A list of conversion goals of the application
        /// </summary>
        [Input("conversionGoals")]
        public Input<Inputs.WebApplicationConversionGoalsGetArgs>? ConversionGoals { get; set; }

        /// <summary>
        /// (Field has overlap with `dynatrace.WebAppEnablement`) Analize *X*% of user sessions
        /// </summary>
        [Input("costControlUserSessionPercentage")]
        public Input<int>? CostControlUserSessionPercentage { get; set; }

        /// <summary>
        /// Defines the Custom Action Apdex settings of an application
        /// </summary>
        [Input("customActionApdexSettings")]
        public Input<Inputs.WebApplicationCustomActionApdexSettingsGetArgs>? CustomActionApdexSettings { get; set; }

        [Input("keyUserActions")]
        private InputList<Inputs.WebApplicationKeyUserActionGetArgs>? _keyUserActions;

        /// <summary>
        /// User Action names to be flagged as Key User Actions
        /// </summary>
        [Obsolete(@"Configuring Key User Actions within `dynatrace.WebApplication` is discouraged. Use the dedicated resource `dynatrace.KeyUserAction` instead.")]
        public InputList<Inputs.WebApplicationKeyUserActionGetArgs> KeyUserActions
        {
            get => _keyUserActions ?? (_keyUserActions = new InputList<Inputs.WebApplicationKeyUserActionGetArgs>());
            set => _keyUserActions = value;
        }

        /// <summary>
        /// Defines the Load Action Apdex settings of an application
        /// </summary>
        [Input("loadActionApdexSettings")]
        public Input<Inputs.WebApplicationLoadActionApdexSettingsGetArgs>? LoadActionApdexSettings { get; set; }

        /// <summary>
        /// The key performance metric of load actions. Possible values are `ACTION_DURATION`, `CUMULATIVE_LAYOUT_SHIFT`, `DOM_INTERACTIVE`, `FIRST_INPUT_DELAY`, `LARGEST_CONTENTFUL_PAINT`, `LOAD_EVENT_END`, `LOAD_EVENT_START`, `RESPONSE_END`, `RESPONSE_START`, `SPEED_INDEX` and `VISUALLY_COMPLETE`
        /// </summary>
        [Input("loadActionKeyPerformanceMetric")]
        public Input<string>? LoadActionKeyPerformanceMetric { get; set; }

        /// <summary>
        /// Java script agent meta data capture settings
        /// </summary>
        [Input("metaDataCaptureSettings")]
        public Input<Inputs.WebApplicationMetaDataCaptureSettingsGetArgs>? MetaDataCaptureSettings { get; set; }

        /// <summary>
        /// Real user monitoring settings
        /// </summary>
        [Input("monitoringSettings")]
        public Input<Inputs.WebApplicationMonitoringSettingsGetArgs>? MonitoringSettings { get; set; }

        /// <summary>
        /// The name of the web application, displayed in the UI
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// (Field has overlap with `dynatrace.WebAppEnablement`) Real user monitoring enabled/disabled
        /// </summary>
        [Input("realUserMonitoringEnabled")]
        public Input<bool>? RealUserMonitoringEnabled { get; set; }

        /// <summary>
        /// Settings regarding Session Replay
        /// </summary>
        [Input("sessionReplayConfig")]
        public Input<Inputs.WebApplicationSessionReplayConfigGetArgs>? SessionReplayConfig { get; set; }

        /// <summary>
        /// The type of the web application. Possible values are `AUTO_INJECTED`, `BROWSER_EXTENSION_INJECTED` and `MANUALLY_INJECTED`
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// URL injection pattern for manual web application
        /// </summary>
        [Input("urlInjectionPattern")]
        public Input<string>? UrlInjectionPattern { get; set; }

        /// <summary>
        /// User action and session properties settings
        /// </summary>
        [Input("userActionAndSessionProperties")]
        public Input<Inputs.WebApplicationUserActionAndSessionPropertiesGetArgs>? UserActionAndSessionProperties { get; set; }

        /// <summary>
        /// The settings of user action naming
        /// </summary>
        [Input("userActionNamingSettings")]
        public Input<Inputs.WebApplicationUserActionNamingSettingsGetArgs>? UserActionNamingSettings { get; set; }

        /// <summary>
        /// User tags settings
        /// </summary>
        [Input("userTags")]
        public Input<Inputs.WebApplicationUserTagsGetArgs>? UserTags { get; set; }

        /// <summary>
        /// These settings influence the monitoring data you receive for 3rd party, CDN, and 1st party resources
        /// </summary>
        [Input("waterfallSettings")]
        public Input<Inputs.WebApplicationWaterfallSettingsGetArgs>? WaterfallSettings { get; set; }

        /// <summary>
        /// Defines the XHR Action Apdex settings of an application
        /// </summary>
        [Input("xhrActionApdexSettings")]
        public Input<Inputs.WebApplicationXhrActionApdexSettingsGetArgs>? XhrActionApdexSettings { get; set; }

        /// <summary>
        /// The key performance metric of XHR actions. Possible values are `ACTION_DURATION`, `RESPONSE_END`, `RESPONSE_START` and `VISUALLY_COMPLETE`.
        /// </summary>
        [Input("xhrActionKeyPerformanceMetric")]
        public Input<string>? XhrActionKeyPerformanceMetric { get; set; }

        public WebApplicationState()
        {
        }
        public static new WebApplicationState Empty => new WebApplicationState();
    }
}
