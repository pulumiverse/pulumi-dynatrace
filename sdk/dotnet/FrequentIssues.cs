// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/frequentIssues:FrequentIssues")]
    public partial class FrequentIssues : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Detect frequent issues within applications, enabled (`true`) or disabled (`false`)
        /// </summary>
        [Output("detectApps")]
        public Output<bool> DetectApps { get; private set; } = null!;

        /// <summary>
        /// Events raised at this level typically occur when no specific topological entity is applicable, often based on data such as logs and metrics. This does not impact the detection of issues within applications, transactions, services, or infrastructure.
        /// </summary>
        [Output("detectEnv")]
        public Output<bool?> DetectEnv { get; private set; } = null!;

        /// <summary>
        /// Detect frequent issues within infrastructure, enabled (`true`) or disabled (`false`)
        /// </summary>
        [Output("detectInfra")]
        public Output<bool> DetectInfra { get; private set; } = null!;

        /// <summary>
        /// Detect frequent issues within transactions and services, enabled (`true`) or disabled (`false`)
        /// </summary>
        [Output("detectTxn")]
        public Output<bool> DetectTxn { get; private set; } = null!;


        /// <summary>
        /// Create a FrequentIssues resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FrequentIssues(string name, FrequentIssuesArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/frequentIssues:FrequentIssues", name, args ?? new FrequentIssuesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FrequentIssues(string name, Input<string> id, FrequentIssuesState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/frequentIssues:FrequentIssues", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FrequentIssues resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FrequentIssues Get(string name, Input<string> id, FrequentIssuesState? state = null, CustomResourceOptions? options = null)
        {
            return new FrequentIssues(name, id, state, options);
        }
    }

    public sealed class FrequentIssuesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Detect frequent issues within applications, enabled (`true`) or disabled (`false`)
        /// </summary>
        [Input("detectApps", required: true)]
        public Input<bool> DetectApps { get; set; } = null!;

        /// <summary>
        /// Events raised at this level typically occur when no specific topological entity is applicable, often based on data such as logs and metrics. This does not impact the detection of issues within applications, transactions, services, or infrastructure.
        /// </summary>
        [Input("detectEnv")]
        public Input<bool>? DetectEnv { get; set; }

        /// <summary>
        /// Detect frequent issues within infrastructure, enabled (`true`) or disabled (`false`)
        /// </summary>
        [Input("detectInfra", required: true)]
        public Input<bool> DetectInfra { get; set; } = null!;

        /// <summary>
        /// Detect frequent issues within transactions and services, enabled (`true`) or disabled (`false`)
        /// </summary>
        [Input("detectTxn", required: true)]
        public Input<bool> DetectTxn { get; set; } = null!;

        public FrequentIssuesArgs()
        {
        }
        public static new FrequentIssuesArgs Empty => new FrequentIssuesArgs();
    }

    public sealed class FrequentIssuesState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Detect frequent issues within applications, enabled (`true`) or disabled (`false`)
        /// </summary>
        [Input("detectApps")]
        public Input<bool>? DetectApps { get; set; }

        /// <summary>
        /// Events raised at this level typically occur when no specific topological entity is applicable, often based on data such as logs and metrics. This does not impact the detection of issues within applications, transactions, services, or infrastructure.
        /// </summary>
        [Input("detectEnv")]
        public Input<bool>? DetectEnv { get; set; }

        /// <summary>
        /// Detect frequent issues within infrastructure, enabled (`true`) or disabled (`false`)
        /// </summary>
        [Input("detectInfra")]
        public Input<bool>? DetectInfra { get; set; }

        /// <summary>
        /// Detect frequent issues within transactions and services, enabled (`true`) or disabled (`false`)
        /// </summary>
        [Input("detectTxn")]
        public Input<bool>? DetectTxn { get; set; }

        public FrequentIssuesState()
        {
        }
        public static new FrequentIssuesState Empty => new FrequentIssuesState();
    }
}
