// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    [DynatraceResourceType("dynatrace:index/genericRelationships:GenericRelationships")]
    public partial class GenericRelationships : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The user or extension that created this relationship.
        /// </summary>
        [Output("createdBy")]
        public Output<string> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// This setting is enabled (`True`) or disabled (`False`)
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// Specify a role for the source entity. If both source and destination type are the same, referring different roles will allow identification of a relationships direction. If role is left blank, any role of the source type is considered for the relationship.
        /// </summary>
        [Output("fromRole")]
        public Output<string?> FromRole { get; private set; } = null!;

        /// <summary>
        /// Define an entity type as the source of the relationship.
        /// </summary>
        [Output("fromType")]
        public Output<string> FromType { get; private set; } = null!;

        /// <summary>
        /// Specify all sources which should be evaluated for this relationship rule. The relationship is only created when any of the filters match.
        /// </summary>
        [Output("sources")]
        public Output<Outputs.GenericRelationshipsSources> Sources { get; private set; } = null!;

        /// <summary>
        /// Specify a role for the destination entity. If both source and destination type are the same, referring different roles will allow identification of a relationships direction. If role is left blank, any role of the destination type is considered for the relationship.
        /// </summary>
        [Output("toRole")]
        public Output<string?> ToRole { get; private set; } = null!;

        /// <summary>
        /// Define an entity type as the destination of the relationship. You can choose the same type as the source type. In this case you also may assign different roles for source and destination for having directed relationships.
        /// </summary>
        [Output("toType")]
        public Output<string> ToType { get; private set; } = null!;

        /// <summary>
        /// Possible Values: `CALLS`, `CHILD_OF`, `INSTANCE_OF`, `PART_OF`, `RUNS_ON`, `SAME_AS`
        /// </summary>
        [Output("typeOfRelation")]
        public Output<string> TypeOfRelation { get; private set; } = null!;


        /// <summary>
        /// Create a GenericRelationships resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GenericRelationships(string name, GenericRelationshipsArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/genericRelationships:GenericRelationships", name, args ?? new GenericRelationshipsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GenericRelationships(string name, Input<string> id, GenericRelationshipsState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/genericRelationships:GenericRelationships", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GenericRelationships resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GenericRelationships Get(string name, Input<string> id, GenericRelationshipsState? state = null, CustomResourceOptions? options = null)
        {
            return new GenericRelationships(name, id, state, options);
        }
    }

    public sealed class GenericRelationshipsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The user or extension that created this relationship.
        /// </summary>
        [Input("createdBy", required: true)]
        public Input<string> CreatedBy { get; set; } = null!;

        /// <summary>
        /// This setting is enabled (`True`) or disabled (`False`)
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// Specify a role for the source entity. If both source and destination type are the same, referring different roles will allow identification of a relationships direction. If role is left blank, any role of the source type is considered for the relationship.
        /// </summary>
        [Input("fromRole")]
        public Input<string>? FromRole { get; set; }

        /// <summary>
        /// Define an entity type as the source of the relationship.
        /// </summary>
        [Input("fromType", required: true)]
        public Input<string> FromType { get; set; } = null!;

        /// <summary>
        /// Specify all sources which should be evaluated for this relationship rule. The relationship is only created when any of the filters match.
        /// </summary>
        [Input("sources", required: true)]
        public Input<Inputs.GenericRelationshipsSourcesArgs> Sources { get; set; } = null!;

        /// <summary>
        /// Specify a role for the destination entity. If both source and destination type are the same, referring different roles will allow identification of a relationships direction. If role is left blank, any role of the destination type is considered for the relationship.
        /// </summary>
        [Input("toRole")]
        public Input<string>? ToRole { get; set; }

        /// <summary>
        /// Define an entity type as the destination of the relationship. You can choose the same type as the source type. In this case you also may assign different roles for source and destination for having directed relationships.
        /// </summary>
        [Input("toType", required: true)]
        public Input<string> ToType { get; set; } = null!;

        /// <summary>
        /// Possible Values: `CALLS`, `CHILD_OF`, `INSTANCE_OF`, `PART_OF`, `RUNS_ON`, `SAME_AS`
        /// </summary>
        [Input("typeOfRelation", required: true)]
        public Input<string> TypeOfRelation { get; set; } = null!;

        public GenericRelationshipsArgs()
        {
        }
        public static new GenericRelationshipsArgs Empty => new GenericRelationshipsArgs();
    }

    public sealed class GenericRelationshipsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The user or extension that created this relationship.
        /// </summary>
        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// This setting is enabled (`True`) or disabled (`False`)
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Specify a role for the source entity. If both source and destination type are the same, referring different roles will allow identification of a relationships direction. If role is left blank, any role of the source type is considered for the relationship.
        /// </summary>
        [Input("fromRole")]
        public Input<string>? FromRole { get; set; }

        /// <summary>
        /// Define an entity type as the source of the relationship.
        /// </summary>
        [Input("fromType")]
        public Input<string>? FromType { get; set; }

        /// <summary>
        /// Specify all sources which should be evaluated for this relationship rule. The relationship is only created when any of the filters match.
        /// </summary>
        [Input("sources")]
        public Input<Inputs.GenericRelationshipsSourcesGetArgs>? Sources { get; set; }

        /// <summary>
        /// Specify a role for the destination entity. If both source and destination type are the same, referring different roles will allow identification of a relationships direction. If role is left blank, any role of the destination type is considered for the relationship.
        /// </summary>
        [Input("toRole")]
        public Input<string>? ToRole { get; set; }

        /// <summary>
        /// Define an entity type as the destination of the relationship. You can choose the same type as the source type. In this case you also may assign different roles for source and destination for having directed relationships.
        /// </summary>
        [Input("toType")]
        public Input<string>? ToType { get; set; }

        /// <summary>
        /// Possible Values: `CALLS`, `CHILD_OF`, `INSTANCE_OF`, `PART_OF`, `RUNS_ON`, `SAME_AS`
        /// </summary>
        [Input("typeOfRelation")]
        public Input<string>? TypeOfRelation { get; set; }

        public GenericRelationshipsState()
        {
        }
        public static new GenericRelationshipsState Empty => new GenericRelationshipsState();
    }
}
