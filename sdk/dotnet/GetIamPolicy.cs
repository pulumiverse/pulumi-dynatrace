// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    public static class GetIamPolicy
    {
        /// <summary>
        /// &gt; **Dynatrace SaaS only**
        /// 
        /// &gt; To utilize this resource, please define the environment variables `DT_CLIENT_ID`, `DT_CLIENT_SECRET`, `DT_ACCOUNT_ID` with an OAuth client including the following permissions: **Allow IAM policy configuration for environments** (`iam-policies-management`) and **View environments** (`account-env-read`).
        /// 
        /// The IAM policy data source allows the policy UUID to be retrieved by its name and account/environment (exclude for global).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var appengineadmin = Dynatrace.GetIamPolicy.Invoke(new()
        ///     {
        ///         Name = "AppEngine - Admin",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["policies"] = appengineadmin,
        ///     };
        /// });
        /// ```
        /// 
        /// ## Example Output
        /// 
        /// ```
        /// Changes to Outputs:
        ///   + policies = {
        ///       + account     = null
        ///       + environment = null
        ///       + id          = "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX#-#global#-#global"
        ///       + name        = "AppEngine - Admin"
        ///       + uuid        = "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX"
        ///     }
        /// ```
        /// </summary>
        public static Task<GetIamPolicyResult> InvokeAsync(GetIamPolicyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIamPolicyResult>("dynatrace:index/getIamPolicy:getIamPolicy", args ?? new GetIamPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// &gt; **Dynatrace SaaS only**
        /// 
        /// &gt; To utilize this resource, please define the environment variables `DT_CLIENT_ID`, `DT_CLIENT_SECRET`, `DT_ACCOUNT_ID` with an OAuth client including the following permissions: **Allow IAM policy configuration for environments** (`iam-policies-management`) and **View environments** (`account-env-read`).
        /// 
        /// The IAM policy data source allows the policy UUID to be retrieved by its name and account/environment (exclude for global).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Dynatrace = Pulumi.Dynatrace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var appengineadmin = Dynatrace.GetIamPolicy.Invoke(new()
        ///     {
        ///         Name = "AppEngine - Admin",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["policies"] = appengineadmin,
        ///     };
        /// });
        /// ```
        /// 
        /// ## Example Output
        /// 
        /// ```
        /// Changes to Outputs:
        ///   + policies = {
        ///       + account     = null
        ///       + environment = null
        ///       + id          = "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX#-#global#-#global"
        ///       + name        = "AppEngine - Admin"
        ///       + uuid        = "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX"
        ///     }
        /// ```
        /// </summary>
        public static Output<GetIamPolicyResult> Invoke(GetIamPolicyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIamPolicyResult>("dynatrace:index/getIamPolicy:getIamPolicy", args ?? new GetIamPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIamPolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The account that policiy is defined for. Omit if the policy is not defined for an account but for an environment or is global
        /// </summary>
        [Input("account")]
        public string? Account { get; set; }

        /// <summary>
        /// The environment that policiy is defined for. Omit if the policy is not defined for an environment but for an account or is global
        /// </summary>
        [Input("environment")]
        public string? Environment { get; set; }

        /// <summary>
        /// The name of the policy
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The UUID of the policy
        /// </summary>
        [Input("uuid")]
        public string? Uuid { get; set; }

        public GetIamPolicyArgs()
        {
        }
        public static new GetIamPolicyArgs Empty => new GetIamPolicyArgs();
    }

    public sealed class GetIamPolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The account that policiy is defined for. Omit if the policy is not defined for an account but for an environment or is global
        /// </summary>
        [Input("account")]
        public Input<string>? Account { get; set; }

        /// <summary>
        /// The environment that policiy is defined for. Omit if the policy is not defined for an environment but for an account or is global
        /// </summary>
        [Input("environment")]
        public Input<string>? Environment { get; set; }

        /// <summary>
        /// The name of the policy
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The UUID of the policy
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        public GetIamPolicyInvokeArgs()
        {
        }
        public static new GetIamPolicyInvokeArgs Empty => new GetIamPolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetIamPolicyResult
    {
        /// <summary>
        /// The account that policiy is defined for. Omit if the policy is not defined for an account but for an environment or is global
        /// </summary>
        public readonly string? Account;
        /// <summary>
        /// The environment that policiy is defined for. Omit if the policy is not defined for an environment but for an account or is global
        /// </summary>
        public readonly string? Environment;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the policy
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The UUID of the policy
        /// </summary>
        public readonly string Uuid;

        [OutputConstructor]
        private GetIamPolicyResult(
            string? account,

            string? environment,

            string id,

            string name,

            string uuid)
        {
            Account = account;
            Environment = environment;
            Id = id;
            Name = name;
            Uuid = uuid;
        }
    }
}
