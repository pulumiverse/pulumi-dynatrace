// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Dynatrace
{
    /// <summary>
    /// !&gt; This resource API endpoint has been deprecated, please use dynatrace.Maintenance instead.
    /// 
    /// &gt; This resource requires the API token scopes **Read configuration** (`ReadConfig`) and **Write configuration** (`WriteConfig`)
    /// 
    /// ## Dynatrace Documentation
    /// 
    /// - Maintenance windows - https://www.dynatrace.com/support/help/how-to-use-dynatrace/problem-detection-and-analysis/notifications-and-alerting/maintenance-windows
    /// 
    /// - Maintenance windows API - https://www.dynatrace.com/support/help/dynatrace-api/configuration-api/maintenance-windows-api
    /// 
    /// ## Resource Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Dynatrace = Pulumiverse.Dynatrace;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var _name_ = new Dynatrace.MaintenanceWindow("#name#", new()
    ///     {
    ///         Schedule = new Dynatrace.Inputs.MaintenanceWindowScheduleArgs
    ///         {
    ///             End = "2021-05-11 14:41",
    ///             RecurrenceType = "ONCE",
    ///             Start = "2021-05-11 13:41",
    ///             ZoneId = "Europe/Vienna",
    ///         },
    ///         Scope = new Dynatrace.Inputs.MaintenanceWindowScopeArgs
    ///         {
    ///             Matches = new[]
    ///             {
    ///                 new Dynatrace.Inputs.MaintenanceWindowScopeMatchArgs
    ///                 {
    ///                     TagCombination = "AND",
    ///                     Tags = new[]
    ///                     {
    ///                         new Dynatrace.Inputs.MaintenanceWindowScopeMatchTagArgs
    ///                         {
    ///                             Context = "CONTEXTLESS",
    ///                             Key = "bggtedgxen",
    ///                         },
    ///                         new Dynatrace.Inputs.MaintenanceWindowScopeMatchTagArgs
    ///                         {
    ///                             Context = "CONTEXTLESS",
    ///                             Key = "deldel1",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         SuppressSynthMonExec = true,
    ///         Suppression = "DONT_DETECT_PROBLEMS",
    ///         Type = "PLANNED",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [DynatraceResourceType("dynatrace:index/maintenanceWindow:MaintenanceWindow")]
    public partial class MaintenanceWindow : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A short description of the maintenance purpose
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The Maintenance Window is enabled or disabled
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// The name of the maintenance window, displayed in the UI
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The schedule of the maintenance window
        /// </summary>
        [Output("schedule")]
        public Output<Outputs.MaintenanceWindowSchedule?> Schedule { get; private set; } = null!;

        /// <summary>
        /// the tiles this Dashboard consist of
        /// </summary>
        [Output("scope")]
        public Output<Outputs.MaintenanceWindowScope?> Scope { get; private set; } = null!;

        /// <summary>
        /// Suppress execution of synthetic monitors during the maintenance
        /// </summary>
        [Output("suppressSynthMonExec")]
        public Output<bool?> SuppressSynthMonExec { get; private set; } = null!;

        /// <summary>
        /// The type of suppression of alerting and problem detection during the maintenance
        /// </summary>
        [Output("suppression")]
        public Output<string> Suppression { get; private set; } = null!;

        /// <summary>
        /// The type of the maintenance: planned or unplanned
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// allows for configuring properties that are not explicitly supported by the current version of this provider
        /// </summary>
        [Output("unknowns")]
        public Output<string?> Unknowns { get; private set; } = null!;


        /// <summary>
        /// Create a MaintenanceWindow resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MaintenanceWindow(string name, MaintenanceWindowArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/maintenanceWindow:MaintenanceWindow", name, args ?? new MaintenanceWindowArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MaintenanceWindow(string name, Input<string> id, MaintenanceWindowState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/maintenanceWindow:MaintenanceWindow", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MaintenanceWindow resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MaintenanceWindow Get(string name, Input<string> id, MaintenanceWindowState? state = null, CustomResourceOptions? options = null)
        {
            return new MaintenanceWindow(name, id, state, options);
        }
    }

    public sealed class MaintenanceWindowArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A short description of the maintenance purpose
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The Maintenance Window is enabled or disabled
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The name of the maintenance window, displayed in the UI
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The schedule of the maintenance window
        /// </summary>
        [Input("schedule")]
        public Input<Inputs.MaintenanceWindowScheduleArgs>? Schedule { get; set; }

        /// <summary>
        /// the tiles this Dashboard consist of
        /// </summary>
        [Input("scope")]
        public Input<Inputs.MaintenanceWindowScopeArgs>? Scope { get; set; }

        /// <summary>
        /// Suppress execution of synthetic monitors during the maintenance
        /// </summary>
        [Input("suppressSynthMonExec")]
        public Input<bool>? SuppressSynthMonExec { get; set; }

        /// <summary>
        /// The type of suppression of alerting and problem detection during the maintenance
        /// </summary>
        [Input("suppression", required: true)]
        public Input<string> Suppression { get; set; } = null!;

        /// <summary>
        /// The type of the maintenance: planned or unplanned
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// allows for configuring properties that are not explicitly supported by the current version of this provider
        /// </summary>
        [Input("unknowns")]
        public Input<string>? Unknowns { get; set; }

        public MaintenanceWindowArgs()
        {
        }
        public static new MaintenanceWindowArgs Empty => new MaintenanceWindowArgs();
    }

    public sealed class MaintenanceWindowState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A short description of the maintenance purpose
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The Maintenance Window is enabled or disabled
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The name of the maintenance window, displayed in the UI
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The schedule of the maintenance window
        /// </summary>
        [Input("schedule")]
        public Input<Inputs.MaintenanceWindowScheduleGetArgs>? Schedule { get; set; }

        /// <summary>
        /// the tiles this Dashboard consist of
        /// </summary>
        [Input("scope")]
        public Input<Inputs.MaintenanceWindowScopeGetArgs>? Scope { get; set; }

        /// <summary>
        /// Suppress execution of synthetic monitors during the maintenance
        /// </summary>
        [Input("suppressSynthMonExec")]
        public Input<bool>? SuppressSynthMonExec { get; set; }

        /// <summary>
        /// The type of suppression of alerting and problem detection during the maintenance
        /// </summary>
        [Input("suppression")]
        public Input<string>? Suppression { get; set; }

        /// <summary>
        /// The type of the maintenance: planned or unplanned
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// allows for configuring properties that are not explicitly supported by the current version of this provider
        /// </summary>
        [Input("unknowns")]
        public Input<string>? Unknowns { get; set; }

        public MaintenanceWindowState()
        {
        }
        public static new MaintenanceWindowState Empty => new MaintenanceWindowState();
    }
}
