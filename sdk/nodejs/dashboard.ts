// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Dashboard extends pulumi.CustomResource {
    /**
     * Get an existing Dashboard resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DashboardState, opts?: pulumi.CustomResourceOptions): Dashboard {
        return new Dashboard(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/dashboard:Dashboard';

    /**
     * Returns true if the given object is an instance of Dashboard.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Dashboard {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Dashboard.__pulumiType;
    }

    /**
     * contains parameters of a dashboard
     */
    declare public readonly dashboardMetadata: pulumi.Output<outputs.DashboardDashboardMetadata | undefined>;
    /**
     * `metadata` exists for backwards compatibility but shouldn't get specified anymore
     *
     * @deprecated `metadata` exists for backwards compatibility but shouldn't get specified anymore
     */
    declare public readonly metadata: pulumi.Output<outputs.DashboardMetadata | undefined>;
    /**
     * the tiles this Dashboard consist of
     */
    declare public readonly tiles: pulumi.Output<outputs.DashboardTile[] | undefined>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    declare public readonly unknowns: pulumi.Output<string | undefined>;

    /**
     * Create a Dashboard resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DashboardArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DashboardArgs | DashboardState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DashboardState | undefined;
            resourceInputs["dashboardMetadata"] = state?.dashboardMetadata;
            resourceInputs["metadata"] = state?.metadata;
            resourceInputs["tiles"] = state?.tiles;
            resourceInputs["unknowns"] = state?.unknowns;
        } else {
            const args = argsOrState as DashboardArgs | undefined;
            resourceInputs["dashboardMetadata"] = args?.dashboardMetadata;
            resourceInputs["metadata"] = args?.metadata;
            resourceInputs["tiles"] = args?.tiles;
            resourceInputs["unknowns"] = args?.unknowns;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Dashboard.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Dashboard resources.
 */
export interface DashboardState {
    /**
     * contains parameters of a dashboard
     */
    dashboardMetadata?: pulumi.Input<inputs.DashboardDashboardMetadata>;
    /**
     * `metadata` exists for backwards compatibility but shouldn't get specified anymore
     *
     * @deprecated `metadata` exists for backwards compatibility but shouldn't get specified anymore
     */
    metadata?: pulumi.Input<inputs.DashboardMetadata>;
    /**
     * the tiles this Dashboard consist of
     */
    tiles?: pulumi.Input<pulumi.Input<inputs.DashboardTile>[]>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Dashboard resource.
 */
export interface DashboardArgs {
    /**
     * contains parameters of a dashboard
     */
    dashboardMetadata?: pulumi.Input<inputs.DashboardDashboardMetadata>;
    /**
     * `metadata` exists for backwards compatibility but shouldn't get specified anymore
     *
     * @deprecated `metadata` exists for backwards compatibility but shouldn't get specified anymore
     */
    metadata?: pulumi.Input<inputs.DashboardMetadata>;
    /**
     * the tiles this Dashboard consist of
     */
    tiles?: pulumi.Input<pulumi.Input<inputs.DashboardTile>[]>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}
