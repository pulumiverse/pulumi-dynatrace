// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DevobsGitOnprem extends pulumi.CustomResource {
    /**
     * Get an existing DevobsGitOnprem resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DevobsGitOnpremState, opts?: pulumi.CustomResourceOptions): DevobsGitOnprem {
        return new DevobsGitOnprem(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/devobsGitOnprem:DevobsGitOnprem';

    /**
     * Returns true if the given object is an instance of DevobsGitOnprem.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DevobsGitOnprem {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DevobsGitOnprem.__pulumiType;
    }

    /**
     * Possible Values: `AzureOnPrem`, `BitbucketOnPrem`, `GithubOnPrem`, `GitlabOnPrem`
     */
    public readonly gitProvider!: pulumi.Output<string>;
    /**
     * If turned on, requests to your Gitlab server will have the `credentials` option set to `include`. Otherwise, it will be set to `omit`.
     */
    public readonly includeCredentials!: pulumi.Output<boolean | undefined>;
    /**
     * An HTTP/HTTPS URL of your server
     */
    public readonly url!: pulumi.Output<string>;

    /**
     * Create a DevobsGitOnprem resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DevobsGitOnpremArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DevobsGitOnpremArgs | DevobsGitOnpremState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DevobsGitOnpremState | undefined;
            resourceInputs["gitProvider"] = state ? state.gitProvider : undefined;
            resourceInputs["includeCredentials"] = state ? state.includeCredentials : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as DevobsGitOnpremArgs | undefined;
            if ((!args || args.gitProvider === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gitProvider'");
            }
            if ((!args || args.url === undefined) && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["gitProvider"] = args ? args.gitProvider : undefined;
            resourceInputs["includeCredentials"] = args ? args.includeCredentials : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DevobsGitOnprem.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DevobsGitOnprem resources.
 */
export interface DevobsGitOnpremState {
    /**
     * Possible Values: `AzureOnPrem`, `BitbucketOnPrem`, `GithubOnPrem`, `GitlabOnPrem`
     */
    gitProvider?: pulumi.Input<string>;
    /**
     * If turned on, requests to your Gitlab server will have the `credentials` option set to `include`. Otherwise, it will be set to `omit`.
     */
    includeCredentials?: pulumi.Input<boolean>;
    /**
     * An HTTP/HTTPS URL of your server
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DevobsGitOnprem resource.
 */
export interface DevobsGitOnpremArgs {
    /**
     * Possible Values: `AzureOnPrem`, `BitbucketOnPrem`, `GithubOnPrem`, `GitlabOnPrem`
     */
    gitProvider: pulumi.Input<string>;
    /**
     * If turned on, requests to your Gitlab server will have the `credentials` option set to `include`. Otherwise, it will be set to `omit`.
     */
    includeCredentials?: pulumi.Input<boolean>;
    /**
     * An HTTP/HTTPS URL of your server
     */
    url: pulumi.Input<string>;
}
