// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DiskEdgeAnomalyDetectors extends pulumi.CustomResource {
    /**
     * Get an existing DiskEdgeAnomalyDetectors resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DiskEdgeAnomalyDetectorsState, opts?: pulumi.CustomResourceOptions): DiskEdgeAnomalyDetectors {
        return new DiskEdgeAnomalyDetectors(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/diskEdgeAnomalyDetectors:DiskEdgeAnomalyDetectors';

    /**
     * Returns true if the given object is an instance of DiskEdgeAnomalyDetectors.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DiskEdgeAnomalyDetectors {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DiskEdgeAnomalyDetectors.__pulumiType;
    }

    /**
     * Alerts
     */
    public readonly alerts!: pulumi.Output<outputs.DiskEdgeAnomalyDetectorsAlerts | undefined>;
    /**
     * Disk will be included in this policy if **any** of the filters match
     */
    public readonly diskNameFilters!: pulumi.Output<string[] | undefined>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Set of additional key-value properties to be attached to the triggered event.
     */
    public readonly eventProperties!: pulumi.Output<outputs.DiskEdgeAnomalyDetectorsEventProperties | undefined>;
    /**
     * The policy will be enabled if **all** conditions are met
     */
    public readonly hostMetadataConditions!: pulumi.Output<outputs.DiskEdgeAnomalyDetectorsHostMetadataConditions | undefined>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
     */
    public readonly insertAfter!: pulumi.Output<string>;
    /**
     * Select the operating systems on which policy should be applied
     */
    public readonly operatingSystems!: pulumi.Output<string[] | undefined>;
    /**
     * Policy name
     */
    public readonly policyName!: pulumi.Output<string>;
    /**
     * The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
     */
    public readonly scope!: pulumi.Output<string | undefined>;

    /**
     * Create a DiskEdgeAnomalyDetectors resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DiskEdgeAnomalyDetectorsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DiskEdgeAnomalyDetectorsArgs | DiskEdgeAnomalyDetectorsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DiskEdgeAnomalyDetectorsState | undefined;
            resourceInputs["alerts"] = state ? state.alerts : undefined;
            resourceInputs["diskNameFilters"] = state ? state.diskNameFilters : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["eventProperties"] = state ? state.eventProperties : undefined;
            resourceInputs["hostMetadataConditions"] = state ? state.hostMetadataConditions : undefined;
            resourceInputs["insertAfter"] = state ? state.insertAfter : undefined;
            resourceInputs["operatingSystems"] = state ? state.operatingSystems : undefined;
            resourceInputs["policyName"] = state ? state.policyName : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
        } else {
            const args = argsOrState as DiskEdgeAnomalyDetectorsArgs | undefined;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.policyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyName'");
            }
            resourceInputs["alerts"] = args ? args.alerts : undefined;
            resourceInputs["diskNameFilters"] = args ? args.diskNameFilters : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["eventProperties"] = args ? args.eventProperties : undefined;
            resourceInputs["hostMetadataConditions"] = args ? args.hostMetadataConditions : undefined;
            resourceInputs["insertAfter"] = args ? args.insertAfter : undefined;
            resourceInputs["operatingSystems"] = args ? args.operatingSystems : undefined;
            resourceInputs["policyName"] = args ? args.policyName : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DiskEdgeAnomalyDetectors.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DiskEdgeAnomalyDetectors resources.
 */
export interface DiskEdgeAnomalyDetectorsState {
    /**
     * Alerts
     */
    alerts?: pulumi.Input<inputs.DiskEdgeAnomalyDetectorsAlerts>;
    /**
     * Disk will be included in this policy if **any** of the filters match
     */
    diskNameFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Set of additional key-value properties to be attached to the triggered event.
     */
    eventProperties?: pulumi.Input<inputs.DiskEdgeAnomalyDetectorsEventProperties>;
    /**
     * The policy will be enabled if **all** conditions are met
     */
    hostMetadataConditions?: pulumi.Input<inputs.DiskEdgeAnomalyDetectorsHostMetadataConditions>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
     */
    insertAfter?: pulumi.Input<string>;
    /**
     * Select the operating systems on which policy should be applied
     */
    operatingSystems?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Policy name
     */
    policyName?: pulumi.Input<string>;
    /**
     * The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
     */
    scope?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DiskEdgeAnomalyDetectors resource.
 */
export interface DiskEdgeAnomalyDetectorsArgs {
    /**
     * Alerts
     */
    alerts?: pulumi.Input<inputs.DiskEdgeAnomalyDetectorsAlerts>;
    /**
     * Disk will be included in this policy if **any** of the filters match
     */
    diskNameFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Set of additional key-value properties to be attached to the triggered event.
     */
    eventProperties?: pulumi.Input<inputs.DiskEdgeAnomalyDetectorsEventProperties>;
    /**
     * The policy will be enabled if **all** conditions are met
     */
    hostMetadataConditions?: pulumi.Input<inputs.DiskEdgeAnomalyDetectorsHostMetadataConditions>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
     */
    insertAfter?: pulumi.Input<string>;
    /**
     * Select the operating systems on which policy should be applied
     */
    operatingSystems?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Policy name
     */
    policyName: pulumi.Input<string>;
    /**
     * The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
     */
    scope?: pulumi.Input<string>;
}
