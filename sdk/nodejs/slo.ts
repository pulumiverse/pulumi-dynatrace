// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Slo extends pulumi.CustomResource {
    /**
     * Get an existing Slo resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SloState, opts?: pulumi.CustomResourceOptions): Slo {
        return new Slo(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/slo:Slo';

    /**
     * Returns true if the given object is an instance of Slo.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Slo {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Slo.__pulumiType;
    }

    /**
     * The total count metric (the denominator in rate calculation)
     */
    declare public readonly denominator: pulumi.Output<string | undefined>;
    /**
     * The custom description of the SLO (optional)
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The SLO is enabled (`false`) or disabled (`true`)
     */
    declare public readonly disabled: pulumi.Output<boolean | undefined>;
    /**
     * Error budget burn rate configuration of a service-level objective (SLO).
     */
    declare public readonly errorBudgetBurnRate: pulumi.Output<outputs.SloErrorBudgetBurnRate | undefined>;
    /**
     * The evaluation type of the SLO. Currently only `AGGREGATE` is supported
     */
    declare public readonly evaluation: pulumi.Output<string>;
    /**
     * The entity filter for the SLO evaluation. Use the [syntax of entity selector](https://dt-url.net/entityselector)
     */
    declare public readonly filter: pulumi.Output<string | undefined>;
    /**
     * The percentage-based metric expression for the calculation of the SLO
     */
    declare public readonly metricExpression: pulumi.Output<string | undefined>;
    /**
     * The name that is used to create SLO func metrics keys. Once created, metric name cannot be changed.
     */
    declare public readonly metricName: pulumi.Output<string | undefined>;
    /**
     * The name of the rule
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The metric for the count of successes (the numerator in rate calculation)
     *
     * @deprecated `numerator` and `denominator` have been replaced by `metricExpression`
     */
    declare public readonly numerator: pulumi.Output<string | undefined>;
    /**
     * The percentage-based metric for the calculation of the SLO
     */
    declare public readonly rate: pulumi.Output<string | undefined>;
    /**
     * The target value of the SLO
     */
    declare public readonly target: pulumi.Output<number>;
    /**
     * The timeframe for the SLO evaluation. Use the syntax of the global timeframe selector
     */
    declare public readonly timeframe: pulumi.Output<string>;
    /**
     * The warning value of the SLO. At warning state the SLO is still fulfilled but is getting close to failure
     */
    declare public readonly warning: pulumi.Output<number>;

    /**
     * Create a Slo resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SloArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SloArgs | SloState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SloState | undefined;
            resourceInputs["denominator"] = state?.denominator;
            resourceInputs["description"] = state?.description;
            resourceInputs["disabled"] = state?.disabled;
            resourceInputs["errorBudgetBurnRate"] = state?.errorBudgetBurnRate;
            resourceInputs["evaluation"] = state?.evaluation;
            resourceInputs["filter"] = state?.filter;
            resourceInputs["metricExpression"] = state?.metricExpression;
            resourceInputs["metricName"] = state?.metricName;
            resourceInputs["name"] = state?.name;
            resourceInputs["numerator"] = state?.numerator;
            resourceInputs["rate"] = state?.rate;
            resourceInputs["target"] = state?.target;
            resourceInputs["timeframe"] = state?.timeframe;
            resourceInputs["warning"] = state?.warning;
        } else {
            const args = argsOrState as SloArgs | undefined;
            if (args?.evaluation === undefined && !opts.urn) {
                throw new Error("Missing required property 'evaluation'");
            }
            if (args?.target === undefined && !opts.urn) {
                throw new Error("Missing required property 'target'");
            }
            if (args?.timeframe === undefined && !opts.urn) {
                throw new Error("Missing required property 'timeframe'");
            }
            if (args?.warning === undefined && !opts.urn) {
                throw new Error("Missing required property 'warning'");
            }
            resourceInputs["denominator"] = args?.denominator;
            resourceInputs["description"] = args?.description;
            resourceInputs["disabled"] = args?.disabled;
            resourceInputs["errorBudgetBurnRate"] = args?.errorBudgetBurnRate;
            resourceInputs["evaluation"] = args?.evaluation;
            resourceInputs["filter"] = args?.filter;
            resourceInputs["metricExpression"] = args?.metricExpression;
            resourceInputs["metricName"] = args?.metricName;
            resourceInputs["name"] = args?.name;
            resourceInputs["numerator"] = args?.numerator;
            resourceInputs["rate"] = args?.rate;
            resourceInputs["target"] = args?.target;
            resourceInputs["timeframe"] = args?.timeframe;
            resourceInputs["warning"] = args?.warning;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Slo.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Slo resources.
 */
export interface SloState {
    /**
     * The total count metric (the denominator in rate calculation)
     */
    denominator?: pulumi.Input<string>;
    /**
     * The custom description of the SLO (optional)
     */
    description?: pulumi.Input<string>;
    /**
     * The SLO is enabled (`false`) or disabled (`true`)
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Error budget burn rate configuration of a service-level objective (SLO).
     */
    errorBudgetBurnRate?: pulumi.Input<inputs.SloErrorBudgetBurnRate>;
    /**
     * The evaluation type of the SLO. Currently only `AGGREGATE` is supported
     */
    evaluation?: pulumi.Input<string>;
    /**
     * The entity filter for the SLO evaluation. Use the [syntax of entity selector](https://dt-url.net/entityselector)
     */
    filter?: pulumi.Input<string>;
    /**
     * The percentage-based metric expression for the calculation of the SLO
     */
    metricExpression?: pulumi.Input<string>;
    /**
     * The name that is used to create SLO func metrics keys. Once created, metric name cannot be changed.
     */
    metricName?: pulumi.Input<string>;
    /**
     * The name of the rule
     */
    name?: pulumi.Input<string>;
    /**
     * The metric for the count of successes (the numerator in rate calculation)
     *
     * @deprecated `numerator` and `denominator` have been replaced by `metricExpression`
     */
    numerator?: pulumi.Input<string>;
    /**
     * The percentage-based metric for the calculation of the SLO
     */
    rate?: pulumi.Input<string>;
    /**
     * The target value of the SLO
     */
    target?: pulumi.Input<number>;
    /**
     * The timeframe for the SLO evaluation. Use the syntax of the global timeframe selector
     */
    timeframe?: pulumi.Input<string>;
    /**
     * The warning value of the SLO. At warning state the SLO is still fulfilled but is getting close to failure
     */
    warning?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Slo resource.
 */
export interface SloArgs {
    /**
     * The total count metric (the denominator in rate calculation)
     */
    denominator?: pulumi.Input<string>;
    /**
     * The custom description of the SLO (optional)
     */
    description?: pulumi.Input<string>;
    /**
     * The SLO is enabled (`false`) or disabled (`true`)
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Error budget burn rate configuration of a service-level objective (SLO).
     */
    errorBudgetBurnRate?: pulumi.Input<inputs.SloErrorBudgetBurnRate>;
    /**
     * The evaluation type of the SLO. Currently only `AGGREGATE` is supported
     */
    evaluation: pulumi.Input<string>;
    /**
     * The entity filter for the SLO evaluation. Use the [syntax of entity selector](https://dt-url.net/entityselector)
     */
    filter?: pulumi.Input<string>;
    /**
     * The percentage-based metric expression for the calculation of the SLO
     */
    metricExpression?: pulumi.Input<string>;
    /**
     * The name that is used to create SLO func metrics keys. Once created, metric name cannot be changed.
     */
    metricName?: pulumi.Input<string>;
    /**
     * The name of the rule
     */
    name?: pulumi.Input<string>;
    /**
     * The metric for the count of successes (the numerator in rate calculation)
     *
     * @deprecated `numerator` and `denominator` have been replaced by `metricExpression`
     */
    numerator?: pulumi.Input<string>;
    /**
     * The percentage-based metric for the calculation of the SLO
     */
    rate?: pulumi.Input<string>;
    /**
     * The target value of the SLO
     */
    target: pulumi.Input<number>;
    /**
     * The timeframe for the SLO evaluation. Use the syntax of the global timeframe selector
     */
    timeframe: pulumi.Input<string>;
    /**
     * The warning value of the SLO. At warning state the SLO is still fulfilled but is getting close to failure
     */
    warning: pulumi.Input<number>;
}
