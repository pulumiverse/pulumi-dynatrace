// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CustomAnomalies extends pulumi.CustomResource {
    /**
     * Get an existing CustomAnomalies resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CustomAnomaliesState, opts?: pulumi.CustomResourceOptions): CustomAnomalies {
        return new CustomAnomalies(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/customAnomalies:CustomAnomalies';

    /**
     * Returns true if the given object is an instance of CustomAnomalies.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CustomAnomalies {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomAnomalies.__pulumiType;
    }

    /**
     * How the metric data points are aggregated for the evaluation. The timeseries must support this aggregation
     */
    declare public readonly aggregationType: pulumi.Output<string | undefined>;
    /**
     * The description of the metric event
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * Defines the dimensions of the metric to alert on. The filters are combined by conjunction
     */
    declare public readonly dimensions: pulumi.Output<outputs.CustomAnomaliesDimension[] | undefined>;
    /**
     * The reason of automatic disabling.  The `NONE` means config was not disabled automatically. Possible values are `METRIC_DEFINITION_INCONSISTENCY`, `NONE`, `TOO_MANY_DIMS` and `TOPX_FORCIBLY_DEACTIVATED`
     *
     * @deprecated This property is not meant to be configured from the outside. It will get removed completely in future versions
     */
    declare public readonly disabledReason: pulumi.Output<string | undefined>;
    /**
     * The metric event is enabled (`true`) or disabled (`false`)
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * The ID of the metric evaluated by the metric event
     */
    declare public readonly metricId: pulumi.Output<string | undefined>;
    /**
     * The metric selector that should be executed
     */
    declare public readonly metricSelector: pulumi.Output<string | undefined>;
    /**
     * The name of the metric event displayed in the UI
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Defines which dimension key should be used for the **alertingScope**
     */
    declare public readonly primaryDimensionKey: pulumi.Output<string | undefined>;
    /**
     * Defines the scope of the metric event. Only one filter is allowed per filter type, except for tags, where up to 3 are allowed. The filters are combined by conjunction
     */
    declare public readonly scopes: pulumi.Output<outputs.CustomAnomaliesScope[] | undefined>;
    /**
     * The type of the event to trigger on the threshold violation.  The `CUSTOM_ALERT` type is not correlated with other alerts. The `INFO` type does not open a problem
     */
    declare public readonly severity: pulumi.Output<string | undefined>;
    /**
     * A monitoring strategy for a metric event config. This is the base version of the monitoring strategy, depending on the type,  the actual JSON may contain additional fields
     */
    declare public readonly strategy: pulumi.Output<outputs.CustomAnomaliesStrategy>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    declare public readonly unknowns: pulumi.Output<string | undefined>;
    /**
     * The reason of a warning set on the config. The `NONE` means config has no warnings. The other supported value is `TOO_MANY_DIMS`
     *
     * @deprecated This property is not meant to be configured from the outside. It will get removed completely in future versions
     */
    declare public readonly warningReason: pulumi.Output<string | undefined>;

    /**
     * Create a CustomAnomalies resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CustomAnomaliesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CustomAnomaliesArgs | CustomAnomaliesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CustomAnomaliesState | undefined;
            resourceInputs["aggregationType"] = state?.aggregationType;
            resourceInputs["description"] = state?.description;
            resourceInputs["dimensions"] = state?.dimensions;
            resourceInputs["disabledReason"] = state?.disabledReason;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["metricId"] = state?.metricId;
            resourceInputs["metricSelector"] = state?.metricSelector;
            resourceInputs["name"] = state?.name;
            resourceInputs["primaryDimensionKey"] = state?.primaryDimensionKey;
            resourceInputs["scopes"] = state?.scopes;
            resourceInputs["severity"] = state?.severity;
            resourceInputs["strategy"] = state?.strategy;
            resourceInputs["unknowns"] = state?.unknowns;
            resourceInputs["warningReason"] = state?.warningReason;
        } else {
            const args = argsOrState as CustomAnomaliesArgs | undefined;
            if (args?.description === undefined && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if (args?.enabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if (args?.strategy === undefined && !opts.urn) {
                throw new Error("Missing required property 'strategy'");
            }
            resourceInputs["aggregationType"] = args?.aggregationType;
            resourceInputs["description"] = args?.description;
            resourceInputs["dimensions"] = args?.dimensions;
            resourceInputs["disabledReason"] = args?.disabledReason;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["metricId"] = args?.metricId;
            resourceInputs["metricSelector"] = args?.metricSelector;
            resourceInputs["name"] = args?.name;
            resourceInputs["primaryDimensionKey"] = args?.primaryDimensionKey;
            resourceInputs["scopes"] = args?.scopes;
            resourceInputs["severity"] = args?.severity;
            resourceInputs["strategy"] = args?.strategy;
            resourceInputs["unknowns"] = args?.unknowns;
            resourceInputs["warningReason"] = args?.warningReason;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CustomAnomalies.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CustomAnomalies resources.
 */
export interface CustomAnomaliesState {
    /**
     * How the metric data points are aggregated for the evaluation. The timeseries must support this aggregation
     */
    aggregationType?: pulumi.Input<string>;
    /**
     * The description of the metric event
     */
    description?: pulumi.Input<string>;
    /**
     * Defines the dimensions of the metric to alert on. The filters are combined by conjunction
     */
    dimensions?: pulumi.Input<pulumi.Input<inputs.CustomAnomaliesDimension>[]>;
    /**
     * The reason of automatic disabling.  The `NONE` means config was not disabled automatically. Possible values are `METRIC_DEFINITION_INCONSISTENCY`, `NONE`, `TOO_MANY_DIMS` and `TOPX_FORCIBLY_DEACTIVATED`
     *
     * @deprecated This property is not meant to be configured from the outside. It will get removed completely in future versions
     */
    disabledReason?: pulumi.Input<string>;
    /**
     * The metric event is enabled (`true`) or disabled (`false`)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The ID of the metric evaluated by the metric event
     */
    metricId?: pulumi.Input<string>;
    /**
     * The metric selector that should be executed
     */
    metricSelector?: pulumi.Input<string>;
    /**
     * The name of the metric event displayed in the UI
     */
    name?: pulumi.Input<string>;
    /**
     * Defines which dimension key should be used for the **alertingScope**
     */
    primaryDimensionKey?: pulumi.Input<string>;
    /**
     * Defines the scope of the metric event. Only one filter is allowed per filter type, except for tags, where up to 3 are allowed. The filters are combined by conjunction
     */
    scopes?: pulumi.Input<pulumi.Input<inputs.CustomAnomaliesScope>[]>;
    /**
     * The type of the event to trigger on the threshold violation.  The `CUSTOM_ALERT` type is not correlated with other alerts. The `INFO` type does not open a problem
     */
    severity?: pulumi.Input<string>;
    /**
     * A monitoring strategy for a metric event config. This is the base version of the monitoring strategy, depending on the type,  the actual JSON may contain additional fields
     */
    strategy?: pulumi.Input<inputs.CustomAnomaliesStrategy>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    /**
     * The reason of a warning set on the config. The `NONE` means config has no warnings. The other supported value is `TOO_MANY_DIMS`
     *
     * @deprecated This property is not meant to be configured from the outside. It will get removed completely in future versions
     */
    warningReason?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CustomAnomalies resource.
 */
export interface CustomAnomaliesArgs {
    /**
     * How the metric data points are aggregated for the evaluation. The timeseries must support this aggregation
     */
    aggregationType?: pulumi.Input<string>;
    /**
     * The description of the metric event
     */
    description: pulumi.Input<string>;
    /**
     * Defines the dimensions of the metric to alert on. The filters are combined by conjunction
     */
    dimensions?: pulumi.Input<pulumi.Input<inputs.CustomAnomaliesDimension>[]>;
    /**
     * The reason of automatic disabling.  The `NONE` means config was not disabled automatically. Possible values are `METRIC_DEFINITION_INCONSISTENCY`, `NONE`, `TOO_MANY_DIMS` and `TOPX_FORCIBLY_DEACTIVATED`
     *
     * @deprecated This property is not meant to be configured from the outside. It will get removed completely in future versions
     */
    disabledReason?: pulumi.Input<string>;
    /**
     * The metric event is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * The ID of the metric evaluated by the metric event
     */
    metricId?: pulumi.Input<string>;
    /**
     * The metric selector that should be executed
     */
    metricSelector?: pulumi.Input<string>;
    /**
     * The name of the metric event displayed in the UI
     */
    name?: pulumi.Input<string>;
    /**
     * Defines which dimension key should be used for the **alertingScope**
     */
    primaryDimensionKey?: pulumi.Input<string>;
    /**
     * Defines the scope of the metric event. Only one filter is allowed per filter type, except for tags, where up to 3 are allowed. The filters are combined by conjunction
     */
    scopes?: pulumi.Input<pulumi.Input<inputs.CustomAnomaliesScope>[]>;
    /**
     * The type of the event to trigger on the threshold violation.  The `CUSTOM_ALERT` type is not correlated with other alerts. The `INFO` type does not open a problem
     */
    severity?: pulumi.Input<string>;
    /**
     * A monitoring strategy for a metric event config. This is the base version of the monitoring strategy, depending on the type,  the actual JSON may contain additional fields
     */
    strategy: pulumi.Input<inputs.CustomAnomaliesStrategy>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
    /**
     * The reason of a warning set on the config. The `NONE` means config has no warnings. The other supported value is `TOO_MANY_DIMS`
     *
     * @deprecated This property is not meant to be configured from the outside. It will get removed completely in future versions
     */
    warningReason?: pulumi.Input<string>;
}
