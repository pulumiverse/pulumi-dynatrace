// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DbAppFeatureFlags extends pulumi.CustomResource {
    /**
     * Get an existing DbAppFeatureFlags resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DbAppFeatureFlagsState, opts?: pulumi.CustomResourceOptions): DbAppFeatureFlags {
        return new DbAppFeatureFlags(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/dbAppFeatureFlags:DbAppFeatureFlags';

    /**
     * Returns true if the given object is an instance of DbAppFeatureFlags.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DbAppFeatureFlags {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DbAppFeatureFlags.__pulumiType;
    }

    /**
     * State of boolean feature flag
     */
    declare public readonly booleanValue: pulumi.Output<boolean | undefined>;
    /**
     * Name of the feature
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * State of numeric feature flag
     */
    declare public readonly numberValue: pulumi.Output<number | undefined>;
    /**
     * State of textual feature flag
     */
    declare public readonly stringValue: pulumi.Output<string | undefined>;
    /**
     * Possible Values: `Boolean`, `Number`, `String`
     */
    declare public readonly type: pulumi.Output<string>;

    /**
     * Create a DbAppFeatureFlags resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DbAppFeatureFlagsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DbAppFeatureFlagsArgs | DbAppFeatureFlagsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DbAppFeatureFlagsState | undefined;
            resourceInputs["booleanValue"] = state?.booleanValue;
            resourceInputs["name"] = state?.name;
            resourceInputs["numberValue"] = state?.numberValue;
            resourceInputs["stringValue"] = state?.stringValue;
            resourceInputs["type"] = state?.type;
        } else {
            const args = argsOrState as DbAppFeatureFlagsArgs | undefined;
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["booleanValue"] = args?.booleanValue;
            resourceInputs["name"] = args?.name;
            resourceInputs["numberValue"] = args?.numberValue;
            resourceInputs["stringValue"] = args?.stringValue;
            resourceInputs["type"] = args?.type;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DbAppFeatureFlags.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DbAppFeatureFlags resources.
 */
export interface DbAppFeatureFlagsState {
    /**
     * State of boolean feature flag
     */
    booleanValue?: pulumi.Input<boolean>;
    /**
     * Name of the feature
     */
    name?: pulumi.Input<string>;
    /**
     * State of numeric feature flag
     */
    numberValue?: pulumi.Input<number>;
    /**
     * State of textual feature flag
     */
    stringValue?: pulumi.Input<string>;
    /**
     * Possible Values: `Boolean`, `Number`, `String`
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DbAppFeatureFlags resource.
 */
export interface DbAppFeatureFlagsArgs {
    /**
     * State of boolean feature flag
     */
    booleanValue?: pulumi.Input<boolean>;
    /**
     * Name of the feature
     */
    name?: pulumi.Input<string>;
    /**
     * State of numeric feature flag
     */
    numberValue?: pulumi.Input<number>;
    /**
     * State of textual feature flag
     */
    stringValue?: pulumi.Input<string>;
    /**
     * Possible Values: `Boolean`, `Number`, `String`
     */
    type: pulumi.Input<string>;
}
