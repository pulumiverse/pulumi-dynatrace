// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * > This data source requires the API token scope `hub.read`)
 *
 * - `type` (String) The type of hub item you are interested in. Possible values are `TECHNOLOGY`, `EXTENSION1` or `EXTENSION2`. If not specified, no restriction regarding type happens
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dynatrace from "@pulumi/dynatrace";
 *
 * export = async () => {
 *     const extension-20-items = await dynatrace.getHubItems({
 *         type: "EXTENSION2",
 *     });
 *     return {
 *         "artifact-ids": extension_20_items.artifacts,
 *         "hub-items": extension_20_items.items,
 *     };
 * }
 * ```
 */
export function getHubItems(args?: GetHubItemsArgs, opts?: pulumi.InvokeOptions): Promise<GetHubItemsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("dynatrace:index/getHubItems:getHubItems", {
        "type": args.type,
    }, opts);
}

/**
 * A collection of arguments for invoking getHubItems.
 */
export interface GetHubItemsArgs {
    /**
     * Represents the type of item. It can be `TECHNOLOGY`, `EXTENSION1` or `EXTENSION2`. If not specified, no restriction regarding type happens
     */
    type?: string;
}

/**
 * A collection of values returned by getHubItems.
 */
export interface GetHubItemsResult {
    /**
     * The fully qualified names of the items as a map
     */
    readonly artifacts: {[key: string]: string};
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The items within this list
     */
    readonly items: outputs.GetHubItemsItem[];
    /**
     * Represents the type of item. It can be `TECHNOLOGY`, `EXTENSION1` or `EXTENSION2`. If not specified, no restriction regarding type happens
     */
    readonly type?: string;
}
/**
 * > This data source requires the API token scope `hub.read`)
 *
 * - `type` (String) The type of hub item you are interested in. Possible values are `TECHNOLOGY`, `EXTENSION1` or `EXTENSION2`. If not specified, no restriction regarding type happens
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dynatrace from "@pulumi/dynatrace";
 *
 * export = async () => {
 *     const extension-20-items = await dynatrace.getHubItems({
 *         type: "EXTENSION2",
 *     });
 *     return {
 *         "artifact-ids": extension_20_items.artifacts,
 *         "hub-items": extension_20_items.items,
 *     };
 * }
 * ```
 */
export function getHubItemsOutput(args?: GetHubItemsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetHubItemsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("dynatrace:index/getHubItems:getHubItems", {
        "type": args.type,
    }, opts);
}

/**
 * A collection of arguments for invoking getHubItems.
 */
export interface GetHubItemsOutputArgs {
    /**
     * Represents the type of item. It can be `TECHNOLOGY`, `EXTENSION1` or `EXTENSION2`. If not specified, no restriction regarding type happens
     */
    type?: pulumi.Input<string>;
}
