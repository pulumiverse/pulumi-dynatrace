// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class WebAppAutoInjection extends pulumi.CustomResource {
    /**
     * Get an existing WebAppAutoInjection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WebAppAutoInjectionState, opts?: pulumi.CustomResourceOptions): WebAppAutoInjection {
        return new WebAppAutoInjection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/webAppAutoInjection:WebAppAutoInjection';

    /**
     * Returns true if the given object is an instance of WebAppAutoInjection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WebAppAutoInjection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WebAppAutoInjection.__pulumiType;
    }

    /**
     * The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
     */
    declare public readonly applicationId: pulumi.Output<string>;
    /**
     * Cache control headers
     */
    declare public readonly cacheControlHeaders: pulumi.Output<outputs.WebAppAutoInjectionCacheControlHeaders>;
    /**
     * Real User Monitoring code source
     */
    declare public readonly monitoringCodeSourceSection: pulumi.Output<outputs.WebAppAutoInjectionMonitoringCodeSourceSection>;
    /**
     * *Code Snippet:* OneAgent injects an inline script that initializes Dynatrace and dynamically downloads the monitoring code into your application. Use when you want to inject the monitoring code in deferred mode.
     */
    declare public readonly snippetFormat: pulumi.Output<outputs.WebAppAutoInjectionSnippetFormat>;

    /**
     * Create a WebAppAutoInjection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WebAppAutoInjectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WebAppAutoInjectionArgs | WebAppAutoInjectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WebAppAutoInjectionState | undefined;
            resourceInputs["applicationId"] = state?.applicationId;
            resourceInputs["cacheControlHeaders"] = state?.cacheControlHeaders;
            resourceInputs["monitoringCodeSourceSection"] = state?.monitoringCodeSourceSection;
            resourceInputs["snippetFormat"] = state?.snippetFormat;
        } else {
            const args = argsOrState as WebAppAutoInjectionArgs | undefined;
            if (args?.applicationId === undefined && !opts.urn) {
                throw new Error("Missing required property 'applicationId'");
            }
            if (args?.cacheControlHeaders === undefined && !opts.urn) {
                throw new Error("Missing required property 'cacheControlHeaders'");
            }
            if (args?.monitoringCodeSourceSection === undefined && !opts.urn) {
                throw new Error("Missing required property 'monitoringCodeSourceSection'");
            }
            if (args?.snippetFormat === undefined && !opts.urn) {
                throw new Error("Missing required property 'snippetFormat'");
            }
            resourceInputs["applicationId"] = args?.applicationId;
            resourceInputs["cacheControlHeaders"] = args?.cacheControlHeaders;
            resourceInputs["monitoringCodeSourceSection"] = args?.monitoringCodeSourceSection;
            resourceInputs["snippetFormat"] = args?.snippetFormat;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WebAppAutoInjection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WebAppAutoInjection resources.
 */
export interface WebAppAutoInjectionState {
    /**
     * The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
     */
    applicationId?: pulumi.Input<string>;
    /**
     * Cache control headers
     */
    cacheControlHeaders?: pulumi.Input<inputs.WebAppAutoInjectionCacheControlHeaders>;
    /**
     * Real User Monitoring code source
     */
    monitoringCodeSourceSection?: pulumi.Input<inputs.WebAppAutoInjectionMonitoringCodeSourceSection>;
    /**
     * *Code Snippet:* OneAgent injects an inline script that initializes Dynatrace and dynamically downloads the monitoring code into your application. Use when you want to inject the monitoring code in deferred mode.
     */
    snippetFormat?: pulumi.Input<inputs.WebAppAutoInjectionSnippetFormat>;
}

/**
 * The set of arguments for constructing a WebAppAutoInjection resource.
 */
export interface WebAppAutoInjectionArgs {
    /**
     * The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
     */
    applicationId: pulumi.Input<string>;
    /**
     * Cache control headers
     */
    cacheControlHeaders: pulumi.Input<inputs.WebAppAutoInjectionCacheControlHeaders>;
    /**
     * Real User Monitoring code source
     */
    monitoringCodeSourceSection: pulumi.Input<inputs.WebAppAutoInjectionMonitoringCodeSourceSection>;
    /**
     * *Code Snippet:* OneAgent injects an inline script that initializes Dynatrace and dynamically downloads the monitoring code into your application. Use when you want to inject the monitoring code in deferred mode.
     */
    snippetFormat: pulumi.Input<inputs.WebAppAutoInjectionSnippetFormat>;
}
