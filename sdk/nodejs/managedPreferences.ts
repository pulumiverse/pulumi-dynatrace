// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ManagedPreferences extends pulumi.CustomResource {
    /**
     * Get an existing ManagedPreferences resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagedPreferencesState, opts?: pulumi.CustomResourceOptions): ManagedPreferences {
        return new ManagedPreferences(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/managedPreferences:ManagedPreferences';

    /**
     * Returns true if the given object is an instance of ManagedPreferences.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagedPreferences {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagedPreferences.__pulumiType;
    }

    /**
     * Default: `false`
     */
    public readonly certificateManagementEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Default: `true`
     */
    public readonly certificateManagementPossible!: pulumi.Output<boolean | undefined>;
    /**
     * If true, each new user will get an invitation to set up a Dynatrace user account to access Dynatrace support resources user upon first login. Default: `false`
     */
    public readonly communityCreateUser!: pulumi.Output<boolean | undefined>;
    /**
     * If true, results from Documentation are included in platform search. Default: `false`
     */
    public readonly communityExternalSearch!: pulumi.Output<boolean | undefined>;
    /**
     * If true, live, in-product assistance with our Product Experts is enabled. Default: `false`
     */
    public readonly helpChatEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * If true, audited, read-only remote access to your Dynatrace configuration settings is allowed. Default: `false`
     */
    public readonly readOnlyRemoteAccessAllowed!: pulumi.Output<boolean | undefined>;
    /**
     * If true, audited access to your Dynatrace cluster is allowed by approved Dynatrace employees otherwise by privileged Dynatrace employees. Default: `false`
     */
    public readonly remoteAccessOnDemandOnly!: pulumi.Output<boolean | undefined>;
    /**
     * If true, Dynatrace OneAgent monitors Dynatrace. Default: `true`
     */
    public readonly ruxitMonitorsRuxit!: pulumi.Output<boolean>;
    /**
     * If true, audited remote-access to your Dynatrace configuration is allowed settings. Default: `true`
     */
    public readonly supportAllowRemoteAccess!: pulumi.Output<boolean | undefined>;
    /**
     * If true, usage and billing information will be reported.
     */
    public readonly supportSendBilling!: pulumi.Output<boolean>;
    /**
     * If true, Dynatrace cluster health will be reported.
     */
    public readonly supportSendClusterHealth!: pulumi.Output<boolean>;
    /**
     * If true, Dynatrace cluster health and OneAgent events will be reported. Default: `true`
     */
    public readonly supportSendEvents!: pulumi.Output<boolean | undefined>;
    /**
     * If true, usage and billing information will NOT be reported.
     */
    public readonly suppressNonBillingRelevantData!: pulumi.Output<boolean>;
    /**
     * Default: `false`
     */
    public readonly telemetrySharing!: pulumi.Output<boolean | undefined>;

    /**
     * Create a ManagedPreferences resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagedPreferencesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagedPreferencesArgs | ManagedPreferencesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagedPreferencesState | undefined;
            resourceInputs["certificateManagementEnabled"] = state ? state.certificateManagementEnabled : undefined;
            resourceInputs["certificateManagementPossible"] = state ? state.certificateManagementPossible : undefined;
            resourceInputs["communityCreateUser"] = state ? state.communityCreateUser : undefined;
            resourceInputs["communityExternalSearch"] = state ? state.communityExternalSearch : undefined;
            resourceInputs["helpChatEnabled"] = state ? state.helpChatEnabled : undefined;
            resourceInputs["readOnlyRemoteAccessAllowed"] = state ? state.readOnlyRemoteAccessAllowed : undefined;
            resourceInputs["remoteAccessOnDemandOnly"] = state ? state.remoteAccessOnDemandOnly : undefined;
            resourceInputs["ruxitMonitorsRuxit"] = state ? state.ruxitMonitorsRuxit : undefined;
            resourceInputs["supportAllowRemoteAccess"] = state ? state.supportAllowRemoteAccess : undefined;
            resourceInputs["supportSendBilling"] = state ? state.supportSendBilling : undefined;
            resourceInputs["supportSendClusterHealth"] = state ? state.supportSendClusterHealth : undefined;
            resourceInputs["supportSendEvents"] = state ? state.supportSendEvents : undefined;
            resourceInputs["suppressNonBillingRelevantData"] = state ? state.suppressNonBillingRelevantData : undefined;
            resourceInputs["telemetrySharing"] = state ? state.telemetrySharing : undefined;
        } else {
            const args = argsOrState as ManagedPreferencesArgs | undefined;
            if ((!args || args.ruxitMonitorsRuxit === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruxitMonitorsRuxit'");
            }
            if ((!args || args.supportSendBilling === undefined) && !opts.urn) {
                throw new Error("Missing required property 'supportSendBilling'");
            }
            if ((!args || args.supportSendClusterHealth === undefined) && !opts.urn) {
                throw new Error("Missing required property 'supportSendClusterHealth'");
            }
            if ((!args || args.suppressNonBillingRelevantData === undefined) && !opts.urn) {
                throw new Error("Missing required property 'suppressNonBillingRelevantData'");
            }
            resourceInputs["certificateManagementEnabled"] = args ? args.certificateManagementEnabled : undefined;
            resourceInputs["certificateManagementPossible"] = args ? args.certificateManagementPossible : undefined;
            resourceInputs["communityCreateUser"] = args ? args.communityCreateUser : undefined;
            resourceInputs["communityExternalSearch"] = args ? args.communityExternalSearch : undefined;
            resourceInputs["helpChatEnabled"] = args ? args.helpChatEnabled : undefined;
            resourceInputs["readOnlyRemoteAccessAllowed"] = args ? args.readOnlyRemoteAccessAllowed : undefined;
            resourceInputs["remoteAccessOnDemandOnly"] = args ? args.remoteAccessOnDemandOnly : undefined;
            resourceInputs["ruxitMonitorsRuxit"] = args ? args.ruxitMonitorsRuxit : undefined;
            resourceInputs["supportAllowRemoteAccess"] = args ? args.supportAllowRemoteAccess : undefined;
            resourceInputs["supportSendBilling"] = args ? args.supportSendBilling : undefined;
            resourceInputs["supportSendClusterHealth"] = args ? args.supportSendClusterHealth : undefined;
            resourceInputs["supportSendEvents"] = args ? args.supportSendEvents : undefined;
            resourceInputs["suppressNonBillingRelevantData"] = args ? args.suppressNonBillingRelevantData : undefined;
            resourceInputs["telemetrySharing"] = args ? args.telemetrySharing : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagedPreferences.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ManagedPreferences resources.
 */
export interface ManagedPreferencesState {
    /**
     * Default: `false`
     */
    certificateManagementEnabled?: pulumi.Input<boolean>;
    /**
     * Default: `true`
     */
    certificateManagementPossible?: pulumi.Input<boolean>;
    /**
     * If true, each new user will get an invitation to set up a Dynatrace user account to access Dynatrace support resources user upon first login. Default: `false`
     */
    communityCreateUser?: pulumi.Input<boolean>;
    /**
     * If true, results from Documentation are included in platform search. Default: `false`
     */
    communityExternalSearch?: pulumi.Input<boolean>;
    /**
     * If true, live, in-product assistance with our Product Experts is enabled. Default: `false`
     */
    helpChatEnabled?: pulumi.Input<boolean>;
    /**
     * If true, audited, read-only remote access to your Dynatrace configuration settings is allowed. Default: `false`
     */
    readOnlyRemoteAccessAllowed?: pulumi.Input<boolean>;
    /**
     * If true, audited access to your Dynatrace cluster is allowed by approved Dynatrace employees otherwise by privileged Dynatrace employees. Default: `false`
     */
    remoteAccessOnDemandOnly?: pulumi.Input<boolean>;
    /**
     * If true, Dynatrace OneAgent monitors Dynatrace. Default: `true`
     */
    ruxitMonitorsRuxit?: pulumi.Input<boolean>;
    /**
     * If true, audited remote-access to your Dynatrace configuration is allowed settings. Default: `true`
     */
    supportAllowRemoteAccess?: pulumi.Input<boolean>;
    /**
     * If true, usage and billing information will be reported.
     */
    supportSendBilling?: pulumi.Input<boolean>;
    /**
     * If true, Dynatrace cluster health will be reported.
     */
    supportSendClusterHealth?: pulumi.Input<boolean>;
    /**
     * If true, Dynatrace cluster health and OneAgent events will be reported. Default: `true`
     */
    supportSendEvents?: pulumi.Input<boolean>;
    /**
     * If true, usage and billing information will NOT be reported.
     */
    suppressNonBillingRelevantData?: pulumi.Input<boolean>;
    /**
     * Default: `false`
     */
    telemetrySharing?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ManagedPreferences resource.
 */
export interface ManagedPreferencesArgs {
    /**
     * Default: `false`
     */
    certificateManagementEnabled?: pulumi.Input<boolean>;
    /**
     * Default: `true`
     */
    certificateManagementPossible?: pulumi.Input<boolean>;
    /**
     * If true, each new user will get an invitation to set up a Dynatrace user account to access Dynatrace support resources user upon first login. Default: `false`
     */
    communityCreateUser?: pulumi.Input<boolean>;
    /**
     * If true, results from Documentation are included in platform search. Default: `false`
     */
    communityExternalSearch?: pulumi.Input<boolean>;
    /**
     * If true, live, in-product assistance with our Product Experts is enabled. Default: `false`
     */
    helpChatEnabled?: pulumi.Input<boolean>;
    /**
     * If true, audited, read-only remote access to your Dynatrace configuration settings is allowed. Default: `false`
     */
    readOnlyRemoteAccessAllowed?: pulumi.Input<boolean>;
    /**
     * If true, audited access to your Dynatrace cluster is allowed by approved Dynatrace employees otherwise by privileged Dynatrace employees. Default: `false`
     */
    remoteAccessOnDemandOnly?: pulumi.Input<boolean>;
    /**
     * If true, Dynatrace OneAgent monitors Dynatrace. Default: `true`
     */
    ruxitMonitorsRuxit: pulumi.Input<boolean>;
    /**
     * If true, audited remote-access to your Dynatrace configuration is allowed settings. Default: `true`
     */
    supportAllowRemoteAccess?: pulumi.Input<boolean>;
    /**
     * If true, usage and billing information will be reported.
     */
    supportSendBilling: pulumi.Input<boolean>;
    /**
     * If true, Dynatrace cluster health will be reported.
     */
    supportSendClusterHealth: pulumi.Input<boolean>;
    /**
     * If true, Dynatrace cluster health and OneAgent events will be reported. Default: `true`
     */
    supportSendEvents?: pulumi.Input<boolean>;
    /**
     * If true, usage and billing information will NOT be reported.
     */
    suppressNonBillingRelevantData: pulumi.Input<boolean>;
    /**
     * Default: `false`
     */
    telemetrySharing?: pulumi.Input<boolean>;
}
