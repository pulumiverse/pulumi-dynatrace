// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class BusinessEventsMetrics extends pulumi.CustomResource {
    /**
     * Get an existing BusinessEventsMetrics resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BusinessEventsMetricsState, opts?: pulumi.CustomResourceOptions): BusinessEventsMetrics {
        return new BusinessEventsMetrics(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/businessEventsMetrics:BusinessEventsMetrics';

    /**
     * Returns true if the given object is an instance of BusinessEventsMetrics.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BusinessEventsMetrics {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BusinessEventsMetrics.__pulumiType;
    }

    /**
     * no documentation available
     */
    public readonly dimensions!: pulumi.Output<string[] | undefined>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Key
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    public readonly matcher!: pulumi.Output<string>;
    /**
     * Possible Values: `ATTRIBUTE`, `OCCURRENCE`
     */
    public readonly measure!: pulumi.Output<string>;
    /**
     * Attribute
     */
    public readonly measureAttribute!: pulumi.Output<string | undefined>;

    /**
     * Create a BusinessEventsMetrics resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BusinessEventsMetricsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BusinessEventsMetricsArgs | BusinessEventsMetricsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BusinessEventsMetricsState | undefined;
            resourceInputs["dimensions"] = state ? state.dimensions : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["matcher"] = state ? state.matcher : undefined;
            resourceInputs["measure"] = state ? state.measure : undefined;
            resourceInputs["measureAttribute"] = state ? state.measureAttribute : undefined;
        } else {
            const args = argsOrState as BusinessEventsMetricsArgs | undefined;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            if ((!args || args.matcher === undefined) && !opts.urn) {
                throw new Error("Missing required property 'matcher'");
            }
            if ((!args || args.measure === undefined) && !opts.urn) {
                throw new Error("Missing required property 'measure'");
            }
            resourceInputs["dimensions"] = args ? args.dimensions : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["matcher"] = args ? args.matcher : undefined;
            resourceInputs["measure"] = args ? args.measure : undefined;
            resourceInputs["measureAttribute"] = args ? args.measureAttribute : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BusinessEventsMetrics.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BusinessEventsMetrics resources.
 */
export interface BusinessEventsMetricsState {
    /**
     * no documentation available
     */
    dimensions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Key
     */
    key?: pulumi.Input<string>;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: pulumi.Input<string>;
    /**
     * Possible Values: `ATTRIBUTE`, `OCCURRENCE`
     */
    measure?: pulumi.Input<string>;
    /**
     * Attribute
     */
    measureAttribute?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BusinessEventsMetrics resource.
 */
export interface BusinessEventsMetricsArgs {
    /**
     * no documentation available
     */
    dimensions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Key
     */
    key: pulumi.Input<string>;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher: pulumi.Input<string>;
    /**
     * Possible Values: `ATTRIBUTE`, `OCCURRENCE`
     */
    measure: pulumi.Input<string>;
    /**
     * Attribute
     */
    measureAttribute?: pulumi.Input<string>;
}
