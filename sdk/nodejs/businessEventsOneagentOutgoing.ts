// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BusinessEventsOneagentOutgoing extends pulumi.CustomResource {
    /**
     * Get an existing BusinessEventsOneagentOutgoing resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BusinessEventsOneagentOutgoingState, opts?: pulumi.CustomResourceOptions): BusinessEventsOneagentOutgoing {
        return new BusinessEventsOneagentOutgoing(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/businessEventsOneagentOutgoing:BusinessEventsOneagentOutgoing';

    /**
     * Returns true if the given object is an instance of BusinessEventsOneagentOutgoing.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BusinessEventsOneagentOutgoing {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BusinessEventsOneagentOutgoing.__pulumiType;
    }

    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * Event meta data
     */
    declare public readonly event: pulumi.Output<outputs.BusinessEventsOneagentOutgoingEvent>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
     */
    declare public readonly insertAfter: pulumi.Output<string>;
    /**
     * Rule name
     */
    declare public readonly ruleName: pulumi.Output<string>;
    /**
     * The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
     */
    declare public readonly scope: pulumi.Output<string | undefined>;
    /**
     * Define conditions to trigger business events from incoming web requests. Triggers are connected by AND logic per capture rule. If you set multiple trigger rules, all of them need to be fulfilled to capture a business event.
     */
    declare public readonly triggers: pulumi.Output<outputs.BusinessEventsOneagentOutgoingTriggers>;

    /**
     * Create a BusinessEventsOneagentOutgoing resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BusinessEventsOneagentOutgoingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BusinessEventsOneagentOutgoingArgs | BusinessEventsOneagentOutgoingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BusinessEventsOneagentOutgoingState | undefined;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["event"] = state?.event;
            resourceInputs["insertAfter"] = state?.insertAfter;
            resourceInputs["ruleName"] = state?.ruleName;
            resourceInputs["scope"] = state?.scope;
            resourceInputs["triggers"] = state?.triggers;
        } else {
            const args = argsOrState as BusinessEventsOneagentOutgoingArgs | undefined;
            if (args?.enabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if (args?.event === undefined && !opts.urn) {
                throw new Error("Missing required property 'event'");
            }
            if (args?.ruleName === undefined && !opts.urn) {
                throw new Error("Missing required property 'ruleName'");
            }
            if (args?.triggers === undefined && !opts.urn) {
                throw new Error("Missing required property 'triggers'");
            }
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["event"] = args?.event;
            resourceInputs["insertAfter"] = args?.insertAfter;
            resourceInputs["ruleName"] = args?.ruleName;
            resourceInputs["scope"] = args?.scope;
            resourceInputs["triggers"] = args?.triggers;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BusinessEventsOneagentOutgoing.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BusinessEventsOneagentOutgoing resources.
 */
export interface BusinessEventsOneagentOutgoingState {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Event meta data
     */
    event?: pulumi.Input<inputs.BusinessEventsOneagentOutgoingEvent>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
     */
    insertAfter?: pulumi.Input<string>;
    /**
     * Rule name
     */
    ruleName?: pulumi.Input<string>;
    /**
     * The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
     */
    scope?: pulumi.Input<string>;
    /**
     * Define conditions to trigger business events from incoming web requests. Triggers are connected by AND logic per capture rule. If you set multiple trigger rules, all of them need to be fulfilled to capture a business event.
     */
    triggers?: pulumi.Input<inputs.BusinessEventsOneagentOutgoingTriggers>;
}

/**
 * The set of arguments for constructing a BusinessEventsOneagentOutgoing resource.
 */
export interface BusinessEventsOneagentOutgoingArgs {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Event meta data
     */
    event: pulumi.Input<inputs.BusinessEventsOneagentOutgoingEvent>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
     */
    insertAfter?: pulumi.Input<string>;
    /**
     * Rule name
     */
    ruleName: pulumi.Input<string>;
    /**
     * The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
     */
    scope?: pulumi.Input<string>;
    /**
     * Define conditions to trigger business events from incoming web requests. Triggers are connected by AND logic per capture rule. If you set multiple trigger rules, all of them need to be fulfilled to capture a business event.
     */
    triggers: pulumi.Input<inputs.BusinessEventsOneagentOutgoingTriggers>;
}
