// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MobileAppKeyPerformance extends pulumi.CustomResource {
    /**
     * Get an existing MobileAppKeyPerformance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MobileAppKeyPerformanceState, opts?: pulumi.CustomResourceOptions): MobileAppKeyPerformance {
        return new MobileAppKeyPerformance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/mobileAppKeyPerformance:MobileAppKeyPerformance';

    /**
     * Returns true if the given object is an instance of MobileAppKeyPerformance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MobileAppKeyPerformance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MobileAppKeyPerformance.__pulumiType;
    }

    /**
     * Treat user actions with reported errors or web request errors as erroneous and rate their performance as Frustrating. Turn off this setting if errors should not affect the Apdex rate.
     */
    declare public readonly frustratingIfReportedOrWebRequestError: pulumi.Output<boolean>;
    /**
     * The scope of this setting (DEVICE*APPLICATION*METHOD, MOBILE*APPLICATION, CUSTOM*APPLICATION)
     */
    declare public readonly scope: pulumi.Output<string>;
    /**
     * no documentation available
     */
    declare public readonly thresholds: pulumi.Output<outputs.MobileAppKeyPerformanceThresholds>;

    /**
     * Create a MobileAppKeyPerformance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MobileAppKeyPerformanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MobileAppKeyPerformanceArgs | MobileAppKeyPerformanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MobileAppKeyPerformanceState | undefined;
            resourceInputs["frustratingIfReportedOrWebRequestError"] = state?.frustratingIfReportedOrWebRequestError;
            resourceInputs["scope"] = state?.scope;
            resourceInputs["thresholds"] = state?.thresholds;
        } else {
            const args = argsOrState as MobileAppKeyPerformanceArgs | undefined;
            if (args?.frustratingIfReportedOrWebRequestError === undefined && !opts.urn) {
                throw new Error("Missing required property 'frustratingIfReportedOrWebRequestError'");
            }
            if (args?.scope === undefined && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            if (args?.thresholds === undefined && !opts.urn) {
                throw new Error("Missing required property 'thresholds'");
            }
            resourceInputs["frustratingIfReportedOrWebRequestError"] = args?.frustratingIfReportedOrWebRequestError;
            resourceInputs["scope"] = args?.scope;
            resourceInputs["thresholds"] = args?.thresholds;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MobileAppKeyPerformance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MobileAppKeyPerformance resources.
 */
export interface MobileAppKeyPerformanceState {
    /**
     * Treat user actions with reported errors or web request errors as erroneous and rate their performance as Frustrating. Turn off this setting if errors should not affect the Apdex rate.
     */
    frustratingIfReportedOrWebRequestError?: pulumi.Input<boolean>;
    /**
     * The scope of this setting (DEVICE*APPLICATION*METHOD, MOBILE*APPLICATION, CUSTOM*APPLICATION)
     */
    scope?: pulumi.Input<string>;
    /**
     * no documentation available
     */
    thresholds?: pulumi.Input<inputs.MobileAppKeyPerformanceThresholds>;
}

/**
 * The set of arguments for constructing a MobileAppKeyPerformance resource.
 */
export interface MobileAppKeyPerformanceArgs {
    /**
     * Treat user actions with reported errors or web request errors as erroneous and rate their performance as Frustrating. Turn off this setting if errors should not affect the Apdex rate.
     */
    frustratingIfReportedOrWebRequestError: pulumi.Input<boolean>;
    /**
     * The scope of this setting (DEVICE*APPLICATION*METHOD, MOBILE*APPLICATION, CUSTOM*APPLICATION)
     */
    scope: pulumi.Input<string>;
    /**
     * no documentation available
     */
    thresholds: pulumi.Input<inputs.MobileAppKeyPerformanceThresholds>;
}
