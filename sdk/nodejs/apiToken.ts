// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ApiToken extends pulumi.CustomResource {
    /**
     * Get an existing ApiToken resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApiTokenState, opts?: pulumi.CustomResourceOptions): ApiToken {
        return new ApiToken(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/apiToken:ApiToken';

    /**
     * Returns true if the given object is an instance of ApiToken.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApiToken {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApiToken.__pulumiType;
    }

    /**
     * Token creation date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z')
     */
    declare public readonly creationDate: pulumi.Output<string>;
    /**
     * The token is enabled (true) or disabled (false), default disabled (false).
     */
    declare public readonly enabled: pulumi.Output<boolean | undefined>;
    /**
     * The expiration date of the token.
     */
    declare public readonly expirationDate: pulumi.Output<string | undefined>;
    /**
     * Token last used date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z')
     */
    declare public readonly lastUsedDate: pulumi.Output<string>;
    /**
     * Token last used IP address.
     */
    declare public readonly lastUsedIpAddress: pulumi.Output<string>;
    /**
     * Token last modified date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z').
     */
    declare public readonly modifiedDate: pulumi.Output<string>;
    /**
     * The name of the token.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The owner of the token
     */
    declare public readonly owner: pulumi.Output<string>;
    /**
     * The token is a personal access token (true) or an API token (false).
     */
    declare public readonly personalAccessToken: pulumi.Output<boolean | undefined>;
    /**
     * A list of the scopes to be assigned to the token.
     */
    declare public readonly scopes: pulumi.Output<string[]>;
    /**
     * The secret of the token.
     */
    declare public /*out*/ readonly token: pulumi.Output<string>;

    /**
     * Create a ApiToken resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApiTokenArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApiTokenArgs | ApiTokenState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApiTokenState | undefined;
            resourceInputs["creationDate"] = state?.creationDate;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["expirationDate"] = state?.expirationDate;
            resourceInputs["lastUsedDate"] = state?.lastUsedDate;
            resourceInputs["lastUsedIpAddress"] = state?.lastUsedIpAddress;
            resourceInputs["modifiedDate"] = state?.modifiedDate;
            resourceInputs["name"] = state?.name;
            resourceInputs["owner"] = state?.owner;
            resourceInputs["personalAccessToken"] = state?.personalAccessToken;
            resourceInputs["scopes"] = state?.scopes;
            resourceInputs["token"] = state?.token;
        } else {
            const args = argsOrState as ApiTokenArgs | undefined;
            if (args?.scopes === undefined && !opts.urn) {
                throw new Error("Missing required property 'scopes'");
            }
            resourceInputs["creationDate"] = args?.creationDate;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["expirationDate"] = args?.expirationDate;
            resourceInputs["lastUsedDate"] = args?.lastUsedDate;
            resourceInputs["lastUsedIpAddress"] = args?.lastUsedIpAddress;
            resourceInputs["modifiedDate"] = args?.modifiedDate;
            resourceInputs["name"] = args?.name;
            resourceInputs["owner"] = args?.owner;
            resourceInputs["personalAccessToken"] = args?.personalAccessToken;
            resourceInputs["scopes"] = args?.scopes;
            resourceInputs["token"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["token"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ApiToken.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApiToken resources.
 */
export interface ApiTokenState {
    /**
     * Token creation date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z')
     */
    creationDate?: pulumi.Input<string>;
    /**
     * The token is enabled (true) or disabled (false), default disabled (false).
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The expiration date of the token.
     */
    expirationDate?: pulumi.Input<string>;
    /**
     * Token last used date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z')
     */
    lastUsedDate?: pulumi.Input<string>;
    /**
     * Token last used IP address.
     */
    lastUsedIpAddress?: pulumi.Input<string>;
    /**
     * Token last modified date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z').
     */
    modifiedDate?: pulumi.Input<string>;
    /**
     * The name of the token.
     */
    name?: pulumi.Input<string>;
    /**
     * The owner of the token
     */
    owner?: pulumi.Input<string>;
    /**
     * The token is a personal access token (true) or an API token (false).
     */
    personalAccessToken?: pulumi.Input<boolean>;
    /**
     * A list of the scopes to be assigned to the token.
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The secret of the token.
     */
    token?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApiToken resource.
 */
export interface ApiTokenArgs {
    /**
     * Token creation date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z')
     */
    creationDate?: pulumi.Input<string>;
    /**
     * The token is enabled (true) or disabled (false), default disabled (false).
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The expiration date of the token.
     */
    expirationDate?: pulumi.Input<string>;
    /**
     * Token last used date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z')
     */
    lastUsedDate?: pulumi.Input<string>;
    /**
     * Token last used IP address.
     */
    lastUsedIpAddress?: pulumi.Input<string>;
    /**
     * Token last modified date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z').
     */
    modifiedDate?: pulumi.Input<string>;
    /**
     * The name of the token.
     */
    name?: pulumi.Input<string>;
    /**
     * The owner of the token
     */
    owner?: pulumi.Input<string>;
    /**
     * The token is a personal access token (true) or an API token (false).
     */
    personalAccessToken?: pulumi.Input<boolean>;
    /**
     * A list of the scopes to be assigned to the token.
     */
    scopes: pulumi.Input<pulumi.Input<string>[]>;
}
