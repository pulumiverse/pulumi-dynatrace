// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PagerDutyNotification extends pulumi.CustomResource {
    /**
     * Get an existing PagerDutyNotification resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PagerDutyNotificationState, opts?: pulumi.CustomResourceOptions): PagerDutyNotification {
        return new PagerDutyNotification(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/pagerDutyNotification:PagerDutyNotification';

    /**
     * Returns true if the given object is an instance of PagerDutyNotification.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PagerDutyNotification {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PagerDutyNotification.__pulumiType;
    }

    /**
     * The name of the PagerDuty account
     */
    declare public readonly account: pulumi.Output<string>;
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    declare public readonly active: pulumi.Output<boolean>;
    /**
     * The API key to access PagerDuty
     */
    declare public readonly apiKey: pulumi.Output<string | undefined>;
    /**
     * The ID of these settings when referred to from resources requiring the REST API V1 keys
     */
    declare public readonly legacyId: pulumi.Output<string>;
    /**
     * The name of the notification configuration
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The ID of the associated alerting profile
     */
    declare public readonly profile: pulumi.Output<string>;
    /**
     * The name of the PagerDuty Service
     */
    declare public readonly service: pulumi.Output<string>;

    /**
     * Create a PagerDutyNotification resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PagerDutyNotificationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PagerDutyNotificationArgs | PagerDutyNotificationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PagerDutyNotificationState | undefined;
            resourceInputs["account"] = state?.account;
            resourceInputs["active"] = state?.active;
            resourceInputs["apiKey"] = state?.apiKey;
            resourceInputs["legacyId"] = state?.legacyId;
            resourceInputs["name"] = state?.name;
            resourceInputs["profile"] = state?.profile;
            resourceInputs["service"] = state?.service;
        } else {
            const args = argsOrState as PagerDutyNotificationArgs | undefined;
            if (args?.account === undefined && !opts.urn) {
                throw new Error("Missing required property 'account'");
            }
            if (args?.active === undefined && !opts.urn) {
                throw new Error("Missing required property 'active'");
            }
            if (args?.profile === undefined && !opts.urn) {
                throw new Error("Missing required property 'profile'");
            }
            if (args?.service === undefined && !opts.urn) {
                throw new Error("Missing required property 'service'");
            }
            resourceInputs["account"] = args?.account;
            resourceInputs["active"] = args?.active;
            resourceInputs["apiKey"] = args?.apiKey ? pulumi.secret(args.apiKey) : undefined;
            resourceInputs["legacyId"] = args?.legacyId;
            resourceInputs["name"] = args?.name;
            resourceInputs["profile"] = args?.profile;
            resourceInputs["service"] = args?.service;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["apiKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(PagerDutyNotification.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PagerDutyNotification resources.
 */
export interface PagerDutyNotificationState {
    /**
     * The name of the PagerDuty account
     */
    account?: pulumi.Input<string>;
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active?: pulumi.Input<boolean>;
    /**
     * The API key to access PagerDuty
     */
    apiKey?: pulumi.Input<string>;
    /**
     * The ID of these settings when referred to from resources requiring the REST API V1 keys
     */
    legacyId?: pulumi.Input<string>;
    /**
     * The name of the notification configuration
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the associated alerting profile
     */
    profile?: pulumi.Input<string>;
    /**
     * The name of the PagerDuty Service
     */
    service?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PagerDutyNotification resource.
 */
export interface PagerDutyNotificationArgs {
    /**
     * The name of the PagerDuty account
     */
    account: pulumi.Input<string>;
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: pulumi.Input<boolean>;
    /**
     * The API key to access PagerDuty
     */
    apiKey?: pulumi.Input<string>;
    /**
     * The ID of these settings when referred to from resources requiring the REST API V1 keys
     */
    legacyId?: pulumi.Input<string>;
    /**
     * The name of the notification configuration
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the associated alerting profile
     */
    profile: pulumi.Input<string>;
    /**
     * The name of the PagerDuty Service
     */
    service: pulumi.Input<string>;
}
