// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LogOneagent extends pulumi.CustomResource {
    /**
     * Get an existing LogOneagent resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogOneagentState, opts?: pulumi.CustomResourceOptions): LogOneagent {
        return new LogOneagent(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/logOneagent:LogOneagent';

    /**
     * Returns true if the given object is an instance of LogOneagent.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogOneagent {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogOneagent.__pulumiType;
    }

    /**
     * Enables automatic detection of timezone in container's logs if it is not explicitly defined in content or configured.
     */
    declare public readonly containerTimezoneHeuristicEnabled: pulumi.Output<boolean>;
    /**
     * Allows detection of log messages written to the containerized application's stdout/stderr streams.
     */
    declare public readonly containersLogsDetectionEnabled: pulumi.Output<boolean>;
    /**
     * Defines the number of characters in every log line (starting from the first character in the line) where the timestamp is searched.
     */
    declare public readonly dateSearchLimitBytes: pulumi.Output<number>;
    /**
     * Default timezone for agent if more specific configurations is not defined.
     */
    declare public readonly defaultTimezone: pulumi.Output<string>;
    /**
     * Defines the maximum timeout value, in seconds, for the query extracting Windows Event Logs
     */
    declare public readonly eventLogQueryTimeoutSec: pulumi.Output<number>;
    /**
     * Allows detection of logs and event logs written by IIS server.
     */
    declare public readonly iisdetectionEnabled: pulumi.Output<boolean>;
    /**
     * Allows detection of logs written to mounted network storage drives. Applies only to Linux hosts. For other OSes it's always enabled.
     */
    declare public readonly logScannerLinuxNfsEnabled: pulumi.Output<boolean>;
    /**
     * Defines the maximum number of log group instances per entity after which, the new automatic ones wouldn't be added.
     */
    declare public readonly maxLgisPerEntityCount: pulumi.Output<number>;
    /**
     * Defines the minimum number of bytes in log file required for binary detection.
     */
    declare public readonly minBinaryDetectionLimitBytes: pulumi.Output<number>;
    /**
     * Enabling this option may affect your licensing costs. For more details, see [documentation](https://dt-url.net/4l02yi8).
     */
    declare public readonly monitorOwnLogsEnabled: pulumi.Output<boolean>;
    /**
     * Automatically detect logs written by important processes. For more details, check our [documentation](https://dt-url.net/7v02z76)
     */
    declare public readonly openLogFilesDetectionEnabled: pulumi.Output<boolean>;
    /**
     * The scope of this setting (HOST, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
     */
    declare public readonly scope: pulumi.Output<string | undefined>;
    /**
     * Defines the number of characters in every log line (starting from the first character in the line) where severity is searched.
     */
    declare public readonly severityDetectionLimitBytes: pulumi.Output<number>;
    /**
     * Defines the number of the first lines of every log entry where severity is searched.
     */
    declare public readonly severityDetectionLinesLimit: pulumi.Output<number>;
    /**
     * Linux: syslog, message log Windows: system, application, security event logs
     */
    declare public readonly systemLogsDetectionEnabled: pulumi.Output<boolean>;

    /**
     * Create a LogOneagent resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogOneagentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogOneagentArgs | LogOneagentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogOneagentState | undefined;
            resourceInputs["containerTimezoneHeuristicEnabled"] = state?.containerTimezoneHeuristicEnabled;
            resourceInputs["containersLogsDetectionEnabled"] = state?.containersLogsDetectionEnabled;
            resourceInputs["dateSearchLimitBytes"] = state?.dateSearchLimitBytes;
            resourceInputs["defaultTimezone"] = state?.defaultTimezone;
            resourceInputs["eventLogQueryTimeoutSec"] = state?.eventLogQueryTimeoutSec;
            resourceInputs["iisdetectionEnabled"] = state?.iisdetectionEnabled;
            resourceInputs["logScannerLinuxNfsEnabled"] = state?.logScannerLinuxNfsEnabled;
            resourceInputs["maxLgisPerEntityCount"] = state?.maxLgisPerEntityCount;
            resourceInputs["minBinaryDetectionLimitBytes"] = state?.minBinaryDetectionLimitBytes;
            resourceInputs["monitorOwnLogsEnabled"] = state?.monitorOwnLogsEnabled;
            resourceInputs["openLogFilesDetectionEnabled"] = state?.openLogFilesDetectionEnabled;
            resourceInputs["scope"] = state?.scope;
            resourceInputs["severityDetectionLimitBytes"] = state?.severityDetectionLimitBytes;
            resourceInputs["severityDetectionLinesLimit"] = state?.severityDetectionLinesLimit;
            resourceInputs["systemLogsDetectionEnabled"] = state?.systemLogsDetectionEnabled;
        } else {
            const args = argsOrState as LogOneagentArgs | undefined;
            if (args?.containerTimezoneHeuristicEnabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'containerTimezoneHeuristicEnabled'");
            }
            if (args?.containersLogsDetectionEnabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'containersLogsDetectionEnabled'");
            }
            if (args?.dateSearchLimitBytes === undefined && !opts.urn) {
                throw new Error("Missing required property 'dateSearchLimitBytes'");
            }
            if (args?.defaultTimezone === undefined && !opts.urn) {
                throw new Error("Missing required property 'defaultTimezone'");
            }
            if (args?.eventLogQueryTimeoutSec === undefined && !opts.urn) {
                throw new Error("Missing required property 'eventLogQueryTimeoutSec'");
            }
            if (args?.iisdetectionEnabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'iisdetectionEnabled'");
            }
            if (args?.logScannerLinuxNfsEnabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'logScannerLinuxNfsEnabled'");
            }
            if (args?.maxLgisPerEntityCount === undefined && !opts.urn) {
                throw new Error("Missing required property 'maxLgisPerEntityCount'");
            }
            if (args?.minBinaryDetectionLimitBytes === undefined && !opts.urn) {
                throw new Error("Missing required property 'minBinaryDetectionLimitBytes'");
            }
            if (args?.monitorOwnLogsEnabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'monitorOwnLogsEnabled'");
            }
            if (args?.openLogFilesDetectionEnabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'openLogFilesDetectionEnabled'");
            }
            if (args?.severityDetectionLimitBytes === undefined && !opts.urn) {
                throw new Error("Missing required property 'severityDetectionLimitBytes'");
            }
            if (args?.severityDetectionLinesLimit === undefined && !opts.urn) {
                throw new Error("Missing required property 'severityDetectionLinesLimit'");
            }
            if (args?.systemLogsDetectionEnabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'systemLogsDetectionEnabled'");
            }
            resourceInputs["containerTimezoneHeuristicEnabled"] = args?.containerTimezoneHeuristicEnabled;
            resourceInputs["containersLogsDetectionEnabled"] = args?.containersLogsDetectionEnabled;
            resourceInputs["dateSearchLimitBytes"] = args?.dateSearchLimitBytes;
            resourceInputs["defaultTimezone"] = args?.defaultTimezone;
            resourceInputs["eventLogQueryTimeoutSec"] = args?.eventLogQueryTimeoutSec;
            resourceInputs["iisdetectionEnabled"] = args?.iisdetectionEnabled;
            resourceInputs["logScannerLinuxNfsEnabled"] = args?.logScannerLinuxNfsEnabled;
            resourceInputs["maxLgisPerEntityCount"] = args?.maxLgisPerEntityCount;
            resourceInputs["minBinaryDetectionLimitBytes"] = args?.minBinaryDetectionLimitBytes;
            resourceInputs["monitorOwnLogsEnabled"] = args?.monitorOwnLogsEnabled;
            resourceInputs["openLogFilesDetectionEnabled"] = args?.openLogFilesDetectionEnabled;
            resourceInputs["scope"] = args?.scope;
            resourceInputs["severityDetectionLimitBytes"] = args?.severityDetectionLimitBytes;
            resourceInputs["severityDetectionLinesLimit"] = args?.severityDetectionLinesLimit;
            resourceInputs["systemLogsDetectionEnabled"] = args?.systemLogsDetectionEnabled;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogOneagent.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LogOneagent resources.
 */
export interface LogOneagentState {
    /**
     * Enables automatic detection of timezone in container's logs if it is not explicitly defined in content or configured.
     */
    containerTimezoneHeuristicEnabled?: pulumi.Input<boolean>;
    /**
     * Allows detection of log messages written to the containerized application's stdout/stderr streams.
     */
    containersLogsDetectionEnabled?: pulumi.Input<boolean>;
    /**
     * Defines the number of characters in every log line (starting from the first character in the line) where the timestamp is searched.
     */
    dateSearchLimitBytes?: pulumi.Input<number>;
    /**
     * Default timezone for agent if more specific configurations is not defined.
     */
    defaultTimezone?: pulumi.Input<string>;
    /**
     * Defines the maximum timeout value, in seconds, for the query extracting Windows Event Logs
     */
    eventLogQueryTimeoutSec?: pulumi.Input<number>;
    /**
     * Allows detection of logs and event logs written by IIS server.
     */
    iisdetectionEnabled?: pulumi.Input<boolean>;
    /**
     * Allows detection of logs written to mounted network storage drives. Applies only to Linux hosts. For other OSes it's always enabled.
     */
    logScannerLinuxNfsEnabled?: pulumi.Input<boolean>;
    /**
     * Defines the maximum number of log group instances per entity after which, the new automatic ones wouldn't be added.
     */
    maxLgisPerEntityCount?: pulumi.Input<number>;
    /**
     * Defines the minimum number of bytes in log file required for binary detection.
     */
    minBinaryDetectionLimitBytes?: pulumi.Input<number>;
    /**
     * Enabling this option may affect your licensing costs. For more details, see [documentation](https://dt-url.net/4l02yi8).
     */
    monitorOwnLogsEnabled?: pulumi.Input<boolean>;
    /**
     * Automatically detect logs written by important processes. For more details, check our [documentation](https://dt-url.net/7v02z76)
     */
    openLogFilesDetectionEnabled?: pulumi.Input<boolean>;
    /**
     * The scope of this setting (HOST, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
     */
    scope?: pulumi.Input<string>;
    /**
     * Defines the number of characters in every log line (starting from the first character in the line) where severity is searched.
     */
    severityDetectionLimitBytes?: pulumi.Input<number>;
    /**
     * Defines the number of the first lines of every log entry where severity is searched.
     */
    severityDetectionLinesLimit?: pulumi.Input<number>;
    /**
     * Linux: syslog, message log Windows: system, application, security event logs
     */
    systemLogsDetectionEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a LogOneagent resource.
 */
export interface LogOneagentArgs {
    /**
     * Enables automatic detection of timezone in container's logs if it is not explicitly defined in content or configured.
     */
    containerTimezoneHeuristicEnabled: pulumi.Input<boolean>;
    /**
     * Allows detection of log messages written to the containerized application's stdout/stderr streams.
     */
    containersLogsDetectionEnabled: pulumi.Input<boolean>;
    /**
     * Defines the number of characters in every log line (starting from the first character in the line) where the timestamp is searched.
     */
    dateSearchLimitBytes: pulumi.Input<number>;
    /**
     * Default timezone for agent if more specific configurations is not defined.
     */
    defaultTimezone: pulumi.Input<string>;
    /**
     * Defines the maximum timeout value, in seconds, for the query extracting Windows Event Logs
     */
    eventLogQueryTimeoutSec: pulumi.Input<number>;
    /**
     * Allows detection of logs and event logs written by IIS server.
     */
    iisdetectionEnabled: pulumi.Input<boolean>;
    /**
     * Allows detection of logs written to mounted network storage drives. Applies only to Linux hosts. For other OSes it's always enabled.
     */
    logScannerLinuxNfsEnabled: pulumi.Input<boolean>;
    /**
     * Defines the maximum number of log group instances per entity after which, the new automatic ones wouldn't be added.
     */
    maxLgisPerEntityCount: pulumi.Input<number>;
    /**
     * Defines the minimum number of bytes in log file required for binary detection.
     */
    minBinaryDetectionLimitBytes: pulumi.Input<number>;
    /**
     * Enabling this option may affect your licensing costs. For more details, see [documentation](https://dt-url.net/4l02yi8).
     */
    monitorOwnLogsEnabled: pulumi.Input<boolean>;
    /**
     * Automatically detect logs written by important processes. For more details, check our [documentation](https://dt-url.net/7v02z76)
     */
    openLogFilesDetectionEnabled: pulumi.Input<boolean>;
    /**
     * The scope of this setting (HOST, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
     */
    scope?: pulumi.Input<string>;
    /**
     * Defines the number of characters in every log line (starting from the first character in the line) where severity is searched.
     */
    severityDetectionLimitBytes: pulumi.Input<number>;
    /**
     * Defines the number of the first lines of every log entry where severity is searched.
     */
    severityDetectionLinesLimit: pulumi.Input<number>;
    /**
     * Linux: syslog, message log Windows: system, application, security event logs
     */
    systemLogsDetectionEnabled: pulumi.Input<boolean>;
}
