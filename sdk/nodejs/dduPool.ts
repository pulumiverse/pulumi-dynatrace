// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * !> This resource API endpoint has been deprecated.
 *
 * > This resource requires the API token scopes **Read settings** (`settings.read`) and **Write settings** (`settings.write`)
 *
 * ## Dynatrace Documentation
 *
 * - DDU Pools - https://www.dynatrace.com/support/help/monitoring-consumption/davis-data-units#ddu-pools
 *
 * - Settings API - https://www.dynatrace.com/support/help/dynatrace-api/environment-api/settings (schemaId: `builtin:accounting.ddu.limit`)
 *
 * ## Resource Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dynatrace from "@pulumiverse/dynatrace";
 *
 * const _name_ = new dynatrace.DduPool("#name#", {
 *     events: {
 *         enabled: true,
 *         type: "MONTHLY",
 *         value: 125,
 *     },
 *     logMonitoring: {
 *         enabled: true,
 *         type: "MONTHLY",
 *         value: 124,
 *     },
 *     metrics: {
 *         enabled: true,
 *         type: "MONTHLY",
 *         value: 123,
 *     },
 *     serverless: {
 *         enabled: true,
 *         type: "MONTHLY",
 *         value: 126,
 *     },
 *     traces: {
 *         enabled: true,
 *         type: "MONTHLY",
 *         value: 127,
 *     },
 * });
 * ```
 */
export class DduPool extends pulumi.CustomResource {
    /**
     * Get an existing DduPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DduPoolState, opts?: pulumi.CustomResourceOptions): DduPool {
        return new DduPool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/dduPool:DduPool';

    /**
     * Returns true if the given object is an instance of DduPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DduPool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DduPool.__pulumiType;
    }

    /**
     * DDU pool settings for Events
     */
    public readonly events!: pulumi.Output<outputs.DduPoolEvents | undefined>;
    /**
     * DDU pool settings for Log Monitoring
     */
    public readonly logMonitoring!: pulumi.Output<outputs.DduPoolLogMonitoring | undefined>;
    /**
     * DDU pool settings for Metrics
     */
    public readonly metrics!: pulumi.Output<outputs.DduPoolMetrics | undefined>;
    /**
     * DDU pool settings for Serverless
     */
    public readonly serverless!: pulumi.Output<outputs.DduPoolServerless | undefined>;
    /**
     * DDU pool settings for Traces
     */
    public readonly traces!: pulumi.Output<outputs.DduPoolTraces | undefined>;

    /**
     * Create a DduPool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DduPoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DduPoolArgs | DduPoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DduPoolState | undefined;
            resourceInputs["events"] = state ? state.events : undefined;
            resourceInputs["logMonitoring"] = state ? state.logMonitoring : undefined;
            resourceInputs["metrics"] = state ? state.metrics : undefined;
            resourceInputs["serverless"] = state ? state.serverless : undefined;
            resourceInputs["traces"] = state ? state.traces : undefined;
        } else {
            const args = argsOrState as DduPoolArgs | undefined;
            resourceInputs["events"] = args ? args.events : undefined;
            resourceInputs["logMonitoring"] = args ? args.logMonitoring : undefined;
            resourceInputs["metrics"] = args ? args.metrics : undefined;
            resourceInputs["serverless"] = args ? args.serverless : undefined;
            resourceInputs["traces"] = args ? args.traces : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DduPool.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DduPool resources.
 */
export interface DduPoolState {
    /**
     * DDU pool settings for Events
     */
    events?: pulumi.Input<inputs.DduPoolEvents>;
    /**
     * DDU pool settings for Log Monitoring
     */
    logMonitoring?: pulumi.Input<inputs.DduPoolLogMonitoring>;
    /**
     * DDU pool settings for Metrics
     */
    metrics?: pulumi.Input<inputs.DduPoolMetrics>;
    /**
     * DDU pool settings for Serverless
     */
    serverless?: pulumi.Input<inputs.DduPoolServerless>;
    /**
     * DDU pool settings for Traces
     */
    traces?: pulumi.Input<inputs.DduPoolTraces>;
}

/**
 * The set of arguments for constructing a DduPool resource.
 */
export interface DduPoolArgs {
    /**
     * DDU pool settings for Events
     */
    events?: pulumi.Input<inputs.DduPoolEvents>;
    /**
     * DDU pool settings for Log Monitoring
     */
    logMonitoring?: pulumi.Input<inputs.DduPoolLogMonitoring>;
    /**
     * DDU pool settings for Metrics
     */
    metrics?: pulumi.Input<inputs.DduPoolMetrics>;
    /**
     * DDU pool settings for Serverless
     */
    serverless?: pulumi.Input<inputs.DduPoolServerless>;
    /**
     * DDU pool settings for Traces
     */
    traces?: pulumi.Input<inputs.DduPoolTraces>;
}
