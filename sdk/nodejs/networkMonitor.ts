// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetworkMonitor extends pulumi.CustomResource {
    /**
     * Get an existing NetworkMonitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkMonitorState, opts?: pulumi.CustomResourceOptions): NetworkMonitor {
        return new NetworkMonitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/networkMonitor:NetworkMonitor';

    /**
     * Returns true if the given object is an instance of NetworkMonitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkMonitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkMonitor.__pulumiType;
    }

    /**
     * Description of the monitor
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * If true, the monitor is enabled
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Frequency of the monitor, in minutes
     */
    public readonly frequencyMin!: pulumi.Output<number | undefined>;
    /**
     * The locations to which the monitor is assigned
     */
    public readonly locations!: pulumi.Output<string[]>;
    /**
     * Name of the monitor
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Outage handling configuration
     */
    public readonly outageHandling!: pulumi.Output<outputs.NetworkMonitorOutageHandling | undefined>;
    /**
     * Performance thresholds configuration
     */
    public readonly performanceThresholds!: pulumi.Output<outputs.NetworkMonitorPerformanceThresholds | undefined>;
    /**
     * The steps of the monitor
     */
    public readonly steps!: pulumi.Output<outputs.NetworkMonitorStep[]>;
    /**
     * A set of tags assigned to the monitor.
     */
    public readonly tags!: pulumi.Output<outputs.NetworkMonitorTag[] | undefined>;
    /**
     * Type of the monitor, possible values: `MULTI_PROTOCOL`
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a NetworkMonitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkMonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkMonitorArgs | NetworkMonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkMonitorState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["frequencyMin"] = state ? state.frequencyMin : undefined;
            resourceInputs["locations"] = state ? state.locations : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["outageHandling"] = state ? state.outageHandling : undefined;
            resourceInputs["performanceThresholds"] = state ? state.performanceThresholds : undefined;
            resourceInputs["steps"] = state ? state.steps : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as NetworkMonitorArgs | undefined;
            if ((!args || args.locations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'locations'");
            }
            if ((!args || args.steps === undefined) && !opts.urn) {
                throw new Error("Missing required property 'steps'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["frequencyMin"] = args ? args.frequencyMin : undefined;
            resourceInputs["locations"] = args ? args.locations : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["outageHandling"] = args ? args.outageHandling : undefined;
            resourceInputs["performanceThresholds"] = args ? args.performanceThresholds : undefined;
            resourceInputs["steps"] = args ? args.steps : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkMonitor.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetworkMonitor resources.
 */
export interface NetworkMonitorState {
    /**
     * Description of the monitor
     */
    description?: pulumi.Input<string>;
    /**
     * If true, the monitor is enabled
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Frequency of the monitor, in minutes
     */
    frequencyMin?: pulumi.Input<number>;
    /**
     * The locations to which the monitor is assigned
     */
    locations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the monitor
     */
    name?: pulumi.Input<string>;
    /**
     * Outage handling configuration
     */
    outageHandling?: pulumi.Input<inputs.NetworkMonitorOutageHandling>;
    /**
     * Performance thresholds configuration
     */
    performanceThresholds?: pulumi.Input<inputs.NetworkMonitorPerformanceThresholds>;
    /**
     * The steps of the monitor
     */
    steps?: pulumi.Input<pulumi.Input<inputs.NetworkMonitorStep>[]>;
    /**
     * A set of tags assigned to the monitor.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NetworkMonitorTag>[]>;
    /**
     * Type of the monitor, possible values: `MULTI_PROTOCOL`
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkMonitor resource.
 */
export interface NetworkMonitorArgs {
    /**
     * Description of the monitor
     */
    description?: pulumi.Input<string>;
    /**
     * If true, the monitor is enabled
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Frequency of the monitor, in minutes
     */
    frequencyMin?: pulumi.Input<number>;
    /**
     * The locations to which the monitor is assigned
     */
    locations: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the monitor
     */
    name?: pulumi.Input<string>;
    /**
     * Outage handling configuration
     */
    outageHandling?: pulumi.Input<inputs.NetworkMonitorOutageHandling>;
    /**
     * Performance thresholds configuration
     */
    performanceThresholds?: pulumi.Input<inputs.NetworkMonitorPerformanceThresholds>;
    /**
     * The steps of the monitor
     */
    steps: pulumi.Input<pulumi.Input<inputs.NetworkMonitorStep>[]>;
    /**
     * A set of tags assigned to the monitor.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NetworkMonitorTag>[]>;
    /**
     * Type of the monitor, possible values: `MULTI_PROTOCOL`
     */
    type: pulumi.Input<string>;
}
