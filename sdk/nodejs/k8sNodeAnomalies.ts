// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class K8sNodeAnomalies extends pulumi.CustomResource {
    /**
     * Get an existing K8sNodeAnomalies resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: K8sNodeAnomaliesState, opts?: pulumi.CustomResourceOptions): K8sNodeAnomalies {
        return new K8sNodeAnomalies(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/k8sNodeAnomalies:K8sNodeAnomalies';

    /**
     * Returns true if the given object is an instance of K8sNodeAnomalies.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is K8sNodeAnomalies {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === K8sNodeAnomalies.__pulumiType;
    }

    /**
     * no documentation available
     */
    declare public readonly cpuRequestsSaturation: pulumi.Output<outputs.K8sNodeAnomaliesCpuRequestsSaturation>;
    /**
     * no documentation available
     */
    declare public readonly memoryRequestsSaturation: pulumi.Output<outputs.K8sNodeAnomaliesMemoryRequestsSaturation>;
    /**
     * no documentation available
     */
    declare public readonly nodeProblematicCondition: pulumi.Output<outputs.K8sNodeAnomaliesNodeProblematicCondition>;
    /**
     * no documentation available
     */
    declare public readonly podsSaturation: pulumi.Output<outputs.K8sNodeAnomaliesPodsSaturation>;
    /**
     * Alerts if node has not been available for a given amount of time
     */
    declare public readonly readinessIssues: pulumi.Output<outputs.K8sNodeAnomaliesReadinessIssues>;
    /**
     * The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
     */
    declare public readonly scope: pulumi.Output<string | undefined>;

    /**
     * Create a K8sNodeAnomalies resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: K8sNodeAnomaliesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: K8sNodeAnomaliesArgs | K8sNodeAnomaliesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as K8sNodeAnomaliesState | undefined;
            resourceInputs["cpuRequestsSaturation"] = state?.cpuRequestsSaturation;
            resourceInputs["memoryRequestsSaturation"] = state?.memoryRequestsSaturation;
            resourceInputs["nodeProblematicCondition"] = state?.nodeProblematicCondition;
            resourceInputs["podsSaturation"] = state?.podsSaturation;
            resourceInputs["readinessIssues"] = state?.readinessIssues;
            resourceInputs["scope"] = state?.scope;
        } else {
            const args = argsOrState as K8sNodeAnomaliesArgs | undefined;
            if (args?.cpuRequestsSaturation === undefined && !opts.urn) {
                throw new Error("Missing required property 'cpuRequestsSaturation'");
            }
            if (args?.memoryRequestsSaturation === undefined && !opts.urn) {
                throw new Error("Missing required property 'memoryRequestsSaturation'");
            }
            if (args?.nodeProblematicCondition === undefined && !opts.urn) {
                throw new Error("Missing required property 'nodeProblematicCondition'");
            }
            if (args?.podsSaturation === undefined && !opts.urn) {
                throw new Error("Missing required property 'podsSaturation'");
            }
            if (args?.readinessIssues === undefined && !opts.urn) {
                throw new Error("Missing required property 'readinessIssues'");
            }
            resourceInputs["cpuRequestsSaturation"] = args?.cpuRequestsSaturation;
            resourceInputs["memoryRequestsSaturation"] = args?.memoryRequestsSaturation;
            resourceInputs["nodeProblematicCondition"] = args?.nodeProblematicCondition;
            resourceInputs["podsSaturation"] = args?.podsSaturation;
            resourceInputs["readinessIssues"] = args?.readinessIssues;
            resourceInputs["scope"] = args?.scope;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(K8sNodeAnomalies.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering K8sNodeAnomalies resources.
 */
export interface K8sNodeAnomaliesState {
    /**
     * no documentation available
     */
    cpuRequestsSaturation?: pulumi.Input<inputs.K8sNodeAnomaliesCpuRequestsSaturation>;
    /**
     * no documentation available
     */
    memoryRequestsSaturation?: pulumi.Input<inputs.K8sNodeAnomaliesMemoryRequestsSaturation>;
    /**
     * no documentation available
     */
    nodeProblematicCondition?: pulumi.Input<inputs.K8sNodeAnomaliesNodeProblematicCondition>;
    /**
     * no documentation available
     */
    podsSaturation?: pulumi.Input<inputs.K8sNodeAnomaliesPodsSaturation>;
    /**
     * Alerts if node has not been available for a given amount of time
     */
    readinessIssues?: pulumi.Input<inputs.K8sNodeAnomaliesReadinessIssues>;
    /**
     * The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
     */
    scope?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a K8sNodeAnomalies resource.
 */
export interface K8sNodeAnomaliesArgs {
    /**
     * no documentation available
     */
    cpuRequestsSaturation: pulumi.Input<inputs.K8sNodeAnomaliesCpuRequestsSaturation>;
    /**
     * no documentation available
     */
    memoryRequestsSaturation: pulumi.Input<inputs.K8sNodeAnomaliesMemoryRequestsSaturation>;
    /**
     * no documentation available
     */
    nodeProblematicCondition: pulumi.Input<inputs.K8sNodeAnomaliesNodeProblematicCondition>;
    /**
     * no documentation available
     */
    podsSaturation: pulumi.Input<inputs.K8sNodeAnomaliesPodsSaturation>;
    /**
     * Alerts if node has not been available for a given amount of time
     */
    readinessIssues: pulumi.Input<inputs.K8sNodeAnomaliesReadinessIssues>;
    /**
     * The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
     */
    scope?: pulumi.Input<string>;
}
