// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * > This resource is excluded by default in the export utility. You can, of course, specify that resource explicitly in order to export it. In that case, don't forget to specify the environment variables `DYNATRACE_AUTOMATION_CLIENT_ID` and `DYNATRACE_AUTOMATION_CLIENT_SECRET` for authentication.
 *
 * ## Dynatrace Documentation
 *
 * - Dynatrace Documents - https://########.apps.dynatrace.com/platform/swagger-ui/index.html?urls.primaryName=Document%20Service
 *
 * ## Prerequisites
 *
 * Using this resource requires an OAuth client to be configured within your account settings.
 * The scopes of the OAuth Client need to include `Create and edit documents (document:documents:write)`, `View documents (document:documents:read)`, `Delete documents (document:documents:delete)`.
 *
 * Finally the provider configuration requires the credentials for that OAuth Client.
 * The configuration section of your provider needs to look like this.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * ```
 *
 * > In order to handle credentials in a secure manner we recommend to use the environment variables `DYNATRACE_AUTOMATION_CLIENT_ID` and `DYNATRACE_AUTOMATION_CLIENT_SECRET` as an alternative.
 */
export class Document extends pulumi.CustomResource {
    /**
     * Get an existing Document resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DocumentState, opts?: pulumi.CustomResourceOptions): Document {
        return new Document(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/document:Document';

    /**
     * Returns true if the given object is an instance of Document.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Document {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Document.__pulumiType;
    }

    /**
     * The user context the executions of the document will happen with
     */
    public readonly actor!: pulumi.Output<string>;
    /**
     * Document content as JSON
     */
    public readonly content!: pulumi.Output<string>;
    /**
     * The name/name of the document
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the owner of this document
     */
    public readonly owner!: pulumi.Output<string>;
    /**
     * Specifies whether the document is private or readable by everybody
     */
    public readonly private!: pulumi.Output<boolean | undefined>;
    /**
     * Type of the document. Possible Values are `dashboard` and `notebook`
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The version of the document
     */
    public /*out*/ readonly version!: pulumi.Output<number>;

    /**
     * Create a Document resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DocumentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DocumentArgs | DocumentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DocumentState | undefined;
            resourceInputs["actor"] = state ? state.actor : undefined;
            resourceInputs["content"] = state ? state.content : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["private"] = state ? state.private : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as DocumentArgs | undefined;
            if ((!args || args.content === undefined) && !opts.urn) {
                throw new Error("Missing required property 'content'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["actor"] = args ? args.actor : undefined;
            resourceInputs["content"] = args ? args.content : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["owner"] = args ? args.owner : undefined;
            resourceInputs["private"] = args ? args.private : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Document.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Document resources.
 */
export interface DocumentState {
    /**
     * The user context the executions of the document will happen with
     */
    actor?: pulumi.Input<string>;
    /**
     * Document content as JSON
     */
    content?: pulumi.Input<string>;
    /**
     * The name/name of the document
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the owner of this document
     */
    owner?: pulumi.Input<string>;
    /**
     * Specifies whether the document is private or readable by everybody
     */
    private?: pulumi.Input<boolean>;
    /**
     * Type of the document. Possible Values are `dashboard` and `notebook`
     */
    type?: pulumi.Input<string>;
    /**
     * The version of the document
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Document resource.
 */
export interface DocumentArgs {
    /**
     * The user context the executions of the document will happen with
     */
    actor?: pulumi.Input<string>;
    /**
     * Document content as JSON
     */
    content: pulumi.Input<string>;
    /**
     * The name/name of the document
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the owner of this document
     */
    owner?: pulumi.Input<string>;
    /**
     * Specifies whether the document is private or readable by everybody
     */
    private?: pulumi.Input<boolean>;
    /**
     * Type of the document. Possible Values are `dashboard` and `notebook`
     */
    type: pulumi.Input<string>;
}
