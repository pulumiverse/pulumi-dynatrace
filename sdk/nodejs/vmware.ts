// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Vmware extends pulumi.CustomResource {
    /**
     * Get an existing Vmware resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VmwareState, opts?: pulumi.CustomResourceOptions): Vmware {
        return new Vmware(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/vmware:Vmware';

    /**
     * Returns true if the given object is an instance of Vmware.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vmware {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vmware.__pulumiType;
    }

    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * This string should have one of the following formats:
     * - $prefix(parameter) - property value starting with 'parameter'
     * - $eq(parameter) - property value exactly matching 'parameter'
     * - $suffix(parameter) - property value ends with 'parameter'
     * - $contains(parameter) - property value contains 'parameter'
     */
    declare public readonly filter: pulumi.Output<string | undefined>;
    /**
     * Specify the IP address or name of the vCenter or standalone ESXi host:
     */
    declare public readonly ipaddress: pulumi.Output<string>;
    /**
     * Name this connection
     */
    declare public readonly label: pulumi.Output<string>;
    /**
     * no documentation available
     */
    declare public readonly password: pulumi.Output<string>;
    /**
     * Provide user credentials for the vCenter or standalone ESXi host:
     */
    declare public readonly username: pulumi.Output<string>;

    /**
     * Create a Vmware resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VmwareArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VmwareArgs | VmwareState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VmwareState | undefined;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["filter"] = state?.filter;
            resourceInputs["ipaddress"] = state?.ipaddress;
            resourceInputs["label"] = state?.label;
            resourceInputs["password"] = state?.password;
            resourceInputs["username"] = state?.username;
        } else {
            const args = argsOrState as VmwareArgs | undefined;
            if (args?.enabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if (args?.ipaddress === undefined && !opts.urn) {
                throw new Error("Missing required property 'ipaddress'");
            }
            if (args?.label === undefined && !opts.urn) {
                throw new Error("Missing required property 'label'");
            }
            if (args?.password === undefined && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if (args?.username === undefined && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["filter"] = args?.filter;
            resourceInputs["ipaddress"] = args?.ipaddress;
            resourceInputs["label"] = args?.label;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["username"] = args?.username;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Vmware.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Vmware resources.
 */
export interface VmwareState {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * This string should have one of the following formats:
     * - $prefix(parameter) - property value starting with 'parameter'
     * - $eq(parameter) - property value exactly matching 'parameter'
     * - $suffix(parameter) - property value ends with 'parameter'
     * - $contains(parameter) - property value contains 'parameter'
     */
    filter?: pulumi.Input<string>;
    /**
     * Specify the IP address or name of the vCenter or standalone ESXi host:
     */
    ipaddress?: pulumi.Input<string>;
    /**
     * Name this connection
     */
    label?: pulumi.Input<string>;
    /**
     * no documentation available
     */
    password?: pulumi.Input<string>;
    /**
     * Provide user credentials for the vCenter or standalone ESXi host:
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Vmware resource.
 */
export interface VmwareArgs {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * This string should have one of the following formats:
     * - $prefix(parameter) - property value starting with 'parameter'
     * - $eq(parameter) - property value exactly matching 'parameter'
     * - $suffix(parameter) - property value ends with 'parameter'
     * - $contains(parameter) - property value contains 'parameter'
     */
    filter?: pulumi.Input<string>;
    /**
     * Specify the IP address or name of the vCenter or standalone ESXi host:
     */
    ipaddress: pulumi.Input<string>;
    /**
     * Name this connection
     */
    label: pulumi.Input<string>;
    /**
     * no documentation available
     */
    password: pulumi.Input<string>;
    /**
     * Provide user credentials for the vCenter or standalone ESXi host:
     */
    username: pulumi.Input<string>;
}
