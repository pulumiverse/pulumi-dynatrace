// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class WebAppCustomInjection extends pulumi.CustomResource {
    /**
     * Get an existing WebAppCustomInjection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WebAppCustomInjectionState, opts?: pulumi.CustomResourceOptions): WebAppCustomInjection {
        return new WebAppCustomInjection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/webAppCustomInjection:WebAppCustomInjection';

    /**
     * Returns true if the given object is an instance of WebAppCustomInjection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WebAppCustomInjection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WebAppCustomInjection.__pulumiType;
    }

    /**
     * The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
     */
    declare public readonly applicationId: pulumi.Output<string>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * no documentation available
     */
    declare public readonly htmlPattern: pulumi.Output<string | undefined>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
     */
    declare public readonly insertAfter: pulumi.Output<string>;
    /**
     * Possible Values: `AllPages`, `Contains`, `Ends`, `Equals`, `Starts`
     */
    declare public readonly operator: pulumi.Output<string>;
    /**
     * Possible Values: `AfterSpecificHtml`, `Automatic`, `BeforeSpecificHtml`, `DoNotInject`
     */
    declare public readonly rule: pulumi.Output<string>;
    /**
     * URL pattern
     */
    declare public readonly urlPattern: pulumi.Output<string | undefined>;

    /**
     * Create a WebAppCustomInjection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WebAppCustomInjectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WebAppCustomInjectionArgs | WebAppCustomInjectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WebAppCustomInjectionState | undefined;
            resourceInputs["applicationId"] = state?.applicationId;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["htmlPattern"] = state?.htmlPattern;
            resourceInputs["insertAfter"] = state?.insertAfter;
            resourceInputs["operator"] = state?.operator;
            resourceInputs["rule"] = state?.rule;
            resourceInputs["urlPattern"] = state?.urlPattern;
        } else {
            const args = argsOrState as WebAppCustomInjectionArgs | undefined;
            if (args?.applicationId === undefined && !opts.urn) {
                throw new Error("Missing required property 'applicationId'");
            }
            if (args?.enabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if (args?.operator === undefined && !opts.urn) {
                throw new Error("Missing required property 'operator'");
            }
            if (args?.rule === undefined && !opts.urn) {
                throw new Error("Missing required property 'rule'");
            }
            resourceInputs["applicationId"] = args?.applicationId;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["htmlPattern"] = args?.htmlPattern;
            resourceInputs["insertAfter"] = args?.insertAfter;
            resourceInputs["operator"] = args?.operator;
            resourceInputs["rule"] = args?.rule;
            resourceInputs["urlPattern"] = args?.urlPattern;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WebAppCustomInjection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WebAppCustomInjection resources.
 */
export interface WebAppCustomInjectionState {
    /**
     * The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
     */
    applicationId?: pulumi.Input<string>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * no documentation available
     */
    htmlPattern?: pulumi.Input<string>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
     */
    insertAfter?: pulumi.Input<string>;
    /**
     * Possible Values: `AllPages`, `Contains`, `Ends`, `Equals`, `Starts`
     */
    operator?: pulumi.Input<string>;
    /**
     * Possible Values: `AfterSpecificHtml`, `Automatic`, `BeforeSpecificHtml`, `DoNotInject`
     */
    rule?: pulumi.Input<string>;
    /**
     * URL pattern
     */
    urlPattern?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WebAppCustomInjection resource.
 */
export interface WebAppCustomInjectionArgs {
    /**
     * The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
     */
    applicationId: pulumi.Input<string>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * no documentation available
     */
    htmlPattern?: pulumi.Input<string>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
     */
    insertAfter?: pulumi.Input<string>;
    /**
     * Possible Values: `AllPages`, `Contains`, `Ends`, `Equals`, `Starts`
     */
    operator: pulumi.Input<string>;
    /**
     * Possible Values: `AfterSpecificHtml`, `Automatic`, `BeforeSpecificHtml`, `DoNotInject`
     */
    rule: pulumi.Input<string>;
    /**
     * URL pattern
     */
    urlPattern?: pulumi.Input<string>;
}
