// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The management zone data source allows the management zone ID to be retrieved by its name.
 *
 * > This data source requires the API token scopes **Read settings** (`settings.read`)
 *
 * - `name` queries for all management zones with the specified name
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dynatrace from "@pulumiverse/dynatrace";
 *
 * const test = dynatrace.getManagementZoneV2({
 *     name: "Example",
 * });
 * const _name_ = new dynatrace.CalculatedServiceMetric("#name#", {
 *     conditions: [{
 *         conditions: [{
 *             attribute: "HTTP_REQUEST_METHOD",
 *             comparison: {
 *                 httpMethod: {
 *                     operator: "EQUALS_ANY_OF",
 *                     values: [
 *                         "POST",
 *                         "GET",
 *                     ],
 *                 },
 *                 negate: false,
 *             },
 *         }],
 *     }],
 *     enabled: true,
 *     managementZones: [test.then(test => test.legacyId)],
 *     metricDefinition: {
 *         metric: "REQUEST_ATTRIBUTE",
 *         requestAttribute: "foo",
 *     },
 *     metricKey: "calc:service.#name#",
 *     unit: "MILLI_SECOND_PER_MINUTE",
 * });
 * ```
 */
export function getManagementZoneV2(args: GetManagementZoneV2Args, opts?: pulumi.InvokeOptions): Promise<GetManagementZoneV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("dynatrace:index/getManagementZoneV2:getManagementZoneV2", {
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getManagementZoneV2.
 */
export interface GetManagementZoneV2Args {
    name: string;
}

/**
 * A collection of values returned by getManagementZoneV2.
 */
export interface GetManagementZoneV2Result {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly legacyId: string;
    readonly name: string;
    readonly settings20Id: string;
}
/**
 * The management zone data source allows the management zone ID to be retrieved by its name.
 *
 * > This data source requires the API token scopes **Read settings** (`settings.read`)
 *
 * - `name` queries for all management zones with the specified name
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dynatrace from "@pulumiverse/dynatrace";
 *
 * const test = dynatrace.getManagementZoneV2({
 *     name: "Example",
 * });
 * const _name_ = new dynatrace.CalculatedServiceMetric("#name#", {
 *     conditions: [{
 *         conditions: [{
 *             attribute: "HTTP_REQUEST_METHOD",
 *             comparison: {
 *                 httpMethod: {
 *                     operator: "EQUALS_ANY_OF",
 *                     values: [
 *                         "POST",
 *                         "GET",
 *                     ],
 *                 },
 *                 negate: false,
 *             },
 *         }],
 *     }],
 *     enabled: true,
 *     managementZones: [test.then(test => test.legacyId)],
 *     metricDefinition: {
 *         metric: "REQUEST_ATTRIBUTE",
 *         requestAttribute: "foo",
 *     },
 *     metricKey: "calc:service.#name#",
 *     unit: "MILLI_SECOND_PER_MINUTE",
 * });
 * ```
 */
export function getManagementZoneV2Output(args: GetManagementZoneV2OutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetManagementZoneV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("dynatrace:index/getManagementZoneV2:getManagementZoneV2", {
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getManagementZoneV2.
 */
export interface GetManagementZoneV2OutputArgs {
    name: pulumi.Input<string>;
}
