// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ApiDetection extends pulumi.CustomResource {
    /**
     * Get an existing ApiDetection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApiDetectionState, opts?: pulumi.CustomResourceOptions): ApiDetection {
        return new ApiDetection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/apiDetection:ApiDetection';

    /**
     * Returns true if the given object is an instance of ApiDetection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApiDetection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApiDetection.__pulumiType;
    }

    /**
     * This color will be used to highlight APIs when viewing code level data, such as distributed traces or method hotspots.
     */
    declare public readonly apiColor: pulumi.Output<string>;
    /**
     * API name
     */
    declare public readonly apiName: pulumi.Output<string>;
    /**
     * List of conditions
     */
    declare public readonly conditions: pulumi.Output<outputs.ApiDetectionConditions | undefined>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
     */
    declare public readonly insertAfter: pulumi.Output<string>;
    /**
     * Restrict this rule to a specific technology.
     */
    declare public readonly technology: pulumi.Output<string | undefined>;
    /**
     * This API defines a third party library
     */
    declare public readonly thirdPartyApi: pulumi.Output<boolean>;

    /**
     * Create a ApiDetection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApiDetectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApiDetectionArgs | ApiDetectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApiDetectionState | undefined;
            resourceInputs["apiColor"] = state?.apiColor;
            resourceInputs["apiName"] = state?.apiName;
            resourceInputs["conditions"] = state?.conditions;
            resourceInputs["insertAfter"] = state?.insertAfter;
            resourceInputs["technology"] = state?.technology;
            resourceInputs["thirdPartyApi"] = state?.thirdPartyApi;
        } else {
            const args = argsOrState as ApiDetectionArgs | undefined;
            if (args?.apiColor === undefined && !opts.urn) {
                throw new Error("Missing required property 'apiColor'");
            }
            if (args?.apiName === undefined && !opts.urn) {
                throw new Error("Missing required property 'apiName'");
            }
            if (args?.thirdPartyApi === undefined && !opts.urn) {
                throw new Error("Missing required property 'thirdPartyApi'");
            }
            resourceInputs["apiColor"] = args?.apiColor;
            resourceInputs["apiName"] = args?.apiName;
            resourceInputs["conditions"] = args?.conditions;
            resourceInputs["insertAfter"] = args?.insertAfter;
            resourceInputs["technology"] = args?.technology;
            resourceInputs["thirdPartyApi"] = args?.thirdPartyApi;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApiDetection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApiDetection resources.
 */
export interface ApiDetectionState {
    /**
     * This color will be used to highlight APIs when viewing code level data, such as distributed traces or method hotspots.
     */
    apiColor?: pulumi.Input<string>;
    /**
     * API name
     */
    apiName?: pulumi.Input<string>;
    /**
     * List of conditions
     */
    conditions?: pulumi.Input<inputs.ApiDetectionConditions>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
     */
    insertAfter?: pulumi.Input<string>;
    /**
     * Restrict this rule to a specific technology.
     */
    technology?: pulumi.Input<string>;
    /**
     * This API defines a third party library
     */
    thirdPartyApi?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ApiDetection resource.
 */
export interface ApiDetectionArgs {
    /**
     * This color will be used to highlight APIs when viewing code level data, such as distributed traces or method hotspots.
     */
    apiColor: pulumi.Input<string>;
    /**
     * API name
     */
    apiName: pulumi.Input<string>;
    /**
     * List of conditions
     */
    conditions?: pulumi.Input<inputs.ApiDetectionConditions>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
     */
    insertAfter?: pulumi.Input<string>;
    /**
     * Restrict this rule to a specific technology.
     */
    technology?: pulumi.Input<string>;
    /**
     * This API defines a third party library
     */
    thirdPartyApi: pulumi.Input<boolean>;
}
