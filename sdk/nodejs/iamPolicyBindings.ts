// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * > **Dynatrace SaaS only**
 *
 * > To utilize this resource, please define the environment variables `DT_CLIENT_ID`, `DT_CLIENT_SECRET`, `DT_ACCOUNT_ID` with an OAuth client including the following permissions: **Allow IAM policy configuration for environments** (`iam-policies-management`) and **View environments** (`account-env-read`).
 *
 * > This resource is excluded by default in the export utility, please explicitly specify the resource to retrieve existing configuration.
 *
 * ## Dynatrace Documentation
 *
 * - Dynatrace IAM Group Permissions - https://docs.dynatrace.com/docs/manage/identity-access-management/permission-management/manage-user-permissions-policies
 *
 * - Settings API - https://www.dynatrace.com/support/help/how-to-use-dynatrace/user-management-and-sso/manage-groups-and-permissions/iam/iam-getting-started
 */
export class IamPolicyBindings extends pulumi.CustomResource {
    /**
     * Get an existing IamPolicyBindings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IamPolicyBindingsState, opts?: pulumi.CustomResourceOptions): IamPolicyBindings {
        return new IamPolicyBindings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/iamPolicyBindings:IamPolicyBindings';

    /**
     * Returns true if the given object is an instance of IamPolicyBindings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IamPolicyBindings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IamPolicyBindings.__pulumiType;
    }

    /**
     * The UUID of the account (`urn:dtaccount:<account-uuid>`). The attribute `policies` must contain ONLY policies defined for that account. The prefix `urn:dtaccount:` MUST be omitted here.
     */
    declare public readonly account: pulumi.Output<string | undefined>;
    /**
     * The ID of the environment (https://\n\n.live.dynatrace.com). The attribute `policies` must contain ONLY policies defined for that environment.
     */
    declare public readonly environment: pulumi.Output<string | undefined>;
    /**
     * The name of the policy
     */
    declare public readonly group: pulumi.Output<string>;
    /**
     * A list of IDs referring to policies bound to that group. It's not possible to mix policies here that are defined for different scopes (different accounts or environments) than specified via attributes `account` or `environment`.
     */
    declare public readonly policies: pulumi.Output<string[]>;

    /**
     * Create a IamPolicyBindings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IamPolicyBindingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IamPolicyBindingsArgs | IamPolicyBindingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IamPolicyBindingsState | undefined;
            resourceInputs["account"] = state?.account;
            resourceInputs["environment"] = state?.environment;
            resourceInputs["group"] = state?.group;
            resourceInputs["policies"] = state?.policies;
        } else {
            const args = argsOrState as IamPolicyBindingsArgs | undefined;
            if (args?.group === undefined && !opts.urn) {
                throw new Error("Missing required property 'group'");
            }
            if (args?.policies === undefined && !opts.urn) {
                throw new Error("Missing required property 'policies'");
            }
            resourceInputs["account"] = args?.account;
            resourceInputs["environment"] = args?.environment;
            resourceInputs["group"] = args?.group;
            resourceInputs["policies"] = args?.policies;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IamPolicyBindings.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IamPolicyBindings resources.
 */
export interface IamPolicyBindingsState {
    /**
     * The UUID of the account (`urn:dtaccount:<account-uuid>`). The attribute `policies` must contain ONLY policies defined for that account. The prefix `urn:dtaccount:` MUST be omitted here.
     */
    account?: pulumi.Input<string>;
    /**
     * The ID of the environment (https://\n\n.live.dynatrace.com). The attribute `policies` must contain ONLY policies defined for that environment.
     */
    environment?: pulumi.Input<string>;
    /**
     * The name of the policy
     */
    group?: pulumi.Input<string>;
    /**
     * A list of IDs referring to policies bound to that group. It's not possible to mix policies here that are defined for different scopes (different accounts or environments) than specified via attributes `account` or `environment`.
     */
    policies?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a IamPolicyBindings resource.
 */
export interface IamPolicyBindingsArgs {
    /**
     * The UUID of the account (`urn:dtaccount:<account-uuid>`). The attribute `policies` must contain ONLY policies defined for that account. The prefix `urn:dtaccount:` MUST be omitted here.
     */
    account?: pulumi.Input<string>;
    /**
     * The ID of the environment (https://\n\n.live.dynatrace.com). The attribute `policies` must contain ONLY policies defined for that environment.
     */
    environment?: pulumi.Input<string>;
    /**
     * The name of the policy
     */
    group: pulumi.Input<string>;
    /**
     * A list of IDs referring to policies bound to that group. It's not possible to mix policies here that are defined for different scopes (different accounts or environments) than specified via attributes `account` or `environment`.
     */
    policies: pulumi.Input<pulumi.Input<string>[]>;
}
