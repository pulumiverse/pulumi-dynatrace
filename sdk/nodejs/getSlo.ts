// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `dynatrace.Slo` data source allows the SLO ID to be retrieved by its name.
 *
 * - `name` (String) - The name of the SLO
 *
 * If multiple services match the given criteria, the first result will be retrieved.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dynatrace from "@pulumi/dynatrace";
 *
 * const example = dynatrace.getSlo({
 *     name: "Terraform",
 * });
 * export const id = example.then(example => example.id);
 * ```
 */
export function getSlo(args: GetSloArgs, opts?: pulumi.InvokeOptions): Promise<GetSloResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("dynatrace:index/getSlo:getSlo", {
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getSlo.
 */
export interface GetSloArgs {
    name: string;
}

/**
 * A collection of values returned by getSlo.
 */
export interface GetSloResult {
    /**
     * Burn rate visualization is enabled (`true`) or disabled (`false`)
     */
    readonly burnRateVisualizationEnabled: boolean;
    /**
     * The custom description of the SLO
     */
    readonly description: string;
    /**
     * The SLO is enabled (`true`) or disabled (`false`)
     */
    readonly enabled: boolean;
    /**
     * The evaluation type of the SLO. Currently only `AGGREGATE` is supported
     */
    readonly evaluationType: string;
    /**
     * The timeframe during which the SLO is to be evaluated. For the timeframe you can enter expressions like -1h (last hour), -1w (last week) or complex expressions like -2d to now (last two days), -1d/d to now/d (beginning of yesterday to beginning of today).
     */
    readonly evaluationWindow: string;
    /**
     * The threshold defines when a burn rate is marked as fast-burning (high-emergency). Burn rates lower than this threshold (and greater than 1) are highlighted as slow-burn (low-emergency)
     */
    readonly fastBurnThreshold: number;
    /**
     * The entity filter for the SLO evaluation. See [syntax of entity selector](https://dt-url.net/entityselector) for details
     */
    readonly filter: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The ID of this setting when referred to by the Config REST API V1
     */
    readonly legacyId: string;
    /**
     * The percentage-based metric expression for the calculation of the SLO
     */
    readonly metricExpression: string;
    /**
     * No documentation available
     */
    readonly metricName: string;
    readonly name: string;
    /**
     * The target value of the SLO
     */
    readonly targetSuccess: number;
    /**
     * The warning value of the SLO. At warning state the SLO is still fulfilled but is getting close to failure
     */
    readonly targetWarning: number;
}
/**
 * The `dynatrace.Slo` data source allows the SLO ID to be retrieved by its name.
 *
 * - `name` (String) - The name of the SLO
 *
 * If multiple services match the given criteria, the first result will be retrieved.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dynatrace from "@pulumi/dynatrace";
 *
 * const example = dynatrace.getSlo({
 *     name: "Terraform",
 * });
 * export const id = example.then(example => example.id);
 * ```
 */
export function getSloOutput(args: GetSloOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetSloResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("dynatrace:index/getSlo:getSlo", {
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getSlo.
 */
export interface GetSloOutputArgs {
    name: pulumi.Input<string>;
}
