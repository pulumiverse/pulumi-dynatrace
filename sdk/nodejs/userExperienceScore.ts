// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class UserExperienceScore extends pulumi.CustomResource {
    /**
     * Get an existing UserExperienceScore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserExperienceScoreState, opts?: pulumi.CustomResourceOptions): UserExperienceScore {
        return new UserExperienceScore(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/userExperienceScore:UserExperienceScore';

    /**
     * Returns true if the given object is an instance of UserExperienceScore.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserExperienceScore {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserExperienceScore.__pulumiType;
    }

    /**
     * If last user action in a session is classified as Frustrating, classify the entire session as Frustrating
     */
    declare public readonly considerLastAction: pulumi.Output<boolean>;
    /**
     * Consider rage clicks / rage taps in score calculation
     */
    declare public readonly considerRageClick: pulumi.Output<boolean>;
    /**
     * User experience is considered Frustrating when the selected percentage or more of the user actions in a session are rated as Frustrating.
     */
    declare public readonly maxFrustratedUserActionsThreshold: pulumi.Output<number>;
    /**
     * User experience is considered Satisfying when at least the selected percentage of the user actions in a session are rated as Satisfying.
     */
    declare public readonly minSatisfiedUserActionsThreshold: pulumi.Output<number>;

    /**
     * Create a UserExperienceScore resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserExperienceScoreArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserExperienceScoreArgs | UserExperienceScoreState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserExperienceScoreState | undefined;
            resourceInputs["considerLastAction"] = state?.considerLastAction;
            resourceInputs["considerRageClick"] = state?.considerRageClick;
            resourceInputs["maxFrustratedUserActionsThreshold"] = state?.maxFrustratedUserActionsThreshold;
            resourceInputs["minSatisfiedUserActionsThreshold"] = state?.minSatisfiedUserActionsThreshold;
        } else {
            const args = argsOrState as UserExperienceScoreArgs | undefined;
            if (args?.considerLastAction === undefined && !opts.urn) {
                throw new Error("Missing required property 'considerLastAction'");
            }
            if (args?.considerRageClick === undefined && !opts.urn) {
                throw new Error("Missing required property 'considerRageClick'");
            }
            if (args?.maxFrustratedUserActionsThreshold === undefined && !opts.urn) {
                throw new Error("Missing required property 'maxFrustratedUserActionsThreshold'");
            }
            if (args?.minSatisfiedUserActionsThreshold === undefined && !opts.urn) {
                throw new Error("Missing required property 'minSatisfiedUserActionsThreshold'");
            }
            resourceInputs["considerLastAction"] = args?.considerLastAction;
            resourceInputs["considerRageClick"] = args?.considerRageClick;
            resourceInputs["maxFrustratedUserActionsThreshold"] = args?.maxFrustratedUserActionsThreshold;
            resourceInputs["minSatisfiedUserActionsThreshold"] = args?.minSatisfiedUserActionsThreshold;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserExperienceScore.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserExperienceScore resources.
 */
export interface UserExperienceScoreState {
    /**
     * If last user action in a session is classified as Frustrating, classify the entire session as Frustrating
     */
    considerLastAction?: pulumi.Input<boolean>;
    /**
     * Consider rage clicks / rage taps in score calculation
     */
    considerRageClick?: pulumi.Input<boolean>;
    /**
     * User experience is considered Frustrating when the selected percentage or more of the user actions in a session are rated as Frustrating.
     */
    maxFrustratedUserActionsThreshold?: pulumi.Input<number>;
    /**
     * User experience is considered Satisfying when at least the selected percentage of the user actions in a session are rated as Satisfying.
     */
    minSatisfiedUserActionsThreshold?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a UserExperienceScore resource.
 */
export interface UserExperienceScoreArgs {
    /**
     * If last user action in a session is classified as Frustrating, classify the entire session as Frustrating
     */
    considerLastAction: pulumi.Input<boolean>;
    /**
     * Consider rage clicks / rage taps in score calculation
     */
    considerRageClick: pulumi.Input<boolean>;
    /**
     * User experience is considered Frustrating when the selected percentage or more of the user actions in a session are rated as Frustrating.
     */
    maxFrustratedUserActionsThreshold: pulumi.Input<number>;
    /**
     * User experience is considered Satisfying when at least the selected percentage of the user actions in a session are rated as Satisfying.
     */
    minSatisfiedUserActionsThreshold: pulumi.Input<number>;
}
