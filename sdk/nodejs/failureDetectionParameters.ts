// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FailureDetectionParameters extends pulumi.CustomResource {
    /**
     * Get an existing FailureDetectionParameters resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FailureDetectionParametersState, opts?: pulumi.CustomResourceOptions): FailureDetectionParameters {
        return new FailureDetectionParameters(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/failureDetectionParameters:FailureDetectionParameters';

    /**
     * Returns true if the given object is an instance of FailureDetectionParameters.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FailureDetectionParameters {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FailureDetectionParameters.__pulumiType;
    }

    /**
     * HTTP 404 response codes are thrown when a web server can't find a certain page. 404s are classified as broken links on the client side and therefore aren't considered to be service failures. By enabling this setting, you can have 404s treated as server-side service failures.
     */
    public readonly brokenLinks!: pulumi.Output<outputs.FailureDetectionParametersBrokenLinks>;
    /**
     * Description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Customize failure detection for specific exceptions and errors
     */
    public readonly exceptionRules!: pulumi.Output<outputs.FailureDetectionParametersExceptionRules>;
    /**
     * HTTP response codes
     */
    public readonly httpResponseCodes!: pulumi.Output<outputs.FailureDetectionParametersHttpResponseCodes>;
    /**
     * Name
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a FailureDetectionParameters resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FailureDetectionParametersArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FailureDetectionParametersArgs | FailureDetectionParametersState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FailureDetectionParametersState | undefined;
            resourceInputs["brokenLinks"] = state ? state.brokenLinks : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["exceptionRules"] = state ? state.exceptionRules : undefined;
            resourceInputs["httpResponseCodes"] = state ? state.httpResponseCodes : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as FailureDetectionParametersArgs | undefined;
            if ((!args || args.brokenLinks === undefined) && !opts.urn) {
                throw new Error("Missing required property 'brokenLinks'");
            }
            if ((!args || args.exceptionRules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'exceptionRules'");
            }
            if ((!args || args.httpResponseCodes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'httpResponseCodes'");
            }
            resourceInputs["brokenLinks"] = args ? args.brokenLinks : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["exceptionRules"] = args ? args.exceptionRules : undefined;
            resourceInputs["httpResponseCodes"] = args ? args.httpResponseCodes : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FailureDetectionParameters.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FailureDetectionParameters resources.
 */
export interface FailureDetectionParametersState {
    /**
     * HTTP 404 response codes are thrown when a web server can't find a certain page. 404s are classified as broken links on the client side and therefore aren't considered to be service failures. By enabling this setting, you can have 404s treated as server-side service failures.
     */
    brokenLinks?: pulumi.Input<inputs.FailureDetectionParametersBrokenLinks>;
    /**
     * Description
     */
    description?: pulumi.Input<string>;
    /**
     * Customize failure detection for specific exceptions and errors
     */
    exceptionRules?: pulumi.Input<inputs.FailureDetectionParametersExceptionRules>;
    /**
     * HTTP response codes
     */
    httpResponseCodes?: pulumi.Input<inputs.FailureDetectionParametersHttpResponseCodes>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FailureDetectionParameters resource.
 */
export interface FailureDetectionParametersArgs {
    /**
     * HTTP 404 response codes are thrown when a web server can't find a certain page. 404s are classified as broken links on the client side and therefore aren't considered to be service failures. By enabling this setting, you can have 404s treated as server-side service failures.
     */
    brokenLinks: pulumi.Input<inputs.FailureDetectionParametersBrokenLinks>;
    /**
     * Description
     */
    description?: pulumi.Input<string>;
    /**
     * Customize failure detection for specific exceptions and errors
     */
    exceptionRules: pulumi.Input<inputs.FailureDetectionParametersExceptionRules>;
    /**
     * HTTP response codes
     */
    httpResponseCodes: pulumi.Input<inputs.FailureDetectionParametersHttpResponseCodes>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
}
