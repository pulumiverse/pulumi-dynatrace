// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ContainerTechnology extends pulumi.CustomResource {
    /**
     * Get an existing ContainerTechnology resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContainerTechnologyState, opts?: pulumi.CustomResourceOptions): ContainerTechnology {
        return new ContainerTechnology(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/containerTechnology:ContainerTechnology';

    /**
     * Returns true if the given object is an instance of ContainerTechnology.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContainerTechnology {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContainerTechnology.__pulumiType;
    }

    /**
     * Platform: Cloud Foundry
     */
    declare public readonly boshProcessManager: pulumi.Output<boolean>;
    /**
     * Platform: Kubernetes
     *
     * Status: Released
     *
     * Operating system: Linux
     *
     * Min agent version: 1.169
     */
    declare public readonly containerd: pulumi.Output<boolean>;
    /**
     * Platform: Kubernetes
     *
     * Status: Released
     *
     * Operating system: Linux
     *
     * Min agent version: 1.163
     */
    declare public readonly crio: pulumi.Output<boolean>;
    /**
     * Platform: Docker and Kubernetes
     *
     * Status: Released
     *
     * Operating system: Linux
     */
    declare public readonly docker: pulumi.Output<boolean>;
    /**
     * Platform: Docker
     *
     * Status: Early adopter
     *
     * Operating system: Windows
     *
     * Min agent version: 1.149
     */
    declare public readonly dockerWindows: pulumi.Output<boolean>;
    /**
     * Platform: Cloud Foundry
     *
     * Status: Released
     *
     * Operating system: Linux
     *
     * Min agent version: 1.133
     */
    declare public readonly garden: pulumi.Output<boolean>;
    /**
     * Platform: Podman
     *
     * Status: Released
     *
     * Operating system: Linux
     *
     * Min agent version: 1.267
     */
    declare public readonly podman: pulumi.Output<boolean>;
    /**
     * The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
     */
    declare public readonly scope: pulumi.Output<string | undefined>;
    /**
     * Platform: Cloud Foundry
     *
     * Status: Early adopter
     *
     * Operating system: Windows
     *
     * Min agent version: 1.175
     */
    declare public readonly winc: pulumi.Output<boolean>;

    /**
     * Create a ContainerTechnology resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContainerTechnologyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContainerTechnologyArgs | ContainerTechnologyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContainerTechnologyState | undefined;
            resourceInputs["boshProcessManager"] = state?.boshProcessManager;
            resourceInputs["containerd"] = state?.containerd;
            resourceInputs["crio"] = state?.crio;
            resourceInputs["docker"] = state?.docker;
            resourceInputs["dockerWindows"] = state?.dockerWindows;
            resourceInputs["garden"] = state?.garden;
            resourceInputs["podman"] = state?.podman;
            resourceInputs["scope"] = state?.scope;
            resourceInputs["winc"] = state?.winc;
        } else {
            const args = argsOrState as ContainerTechnologyArgs | undefined;
            if (args?.boshProcessManager === undefined && !opts.urn) {
                throw new Error("Missing required property 'boshProcessManager'");
            }
            if (args?.containerd === undefined && !opts.urn) {
                throw new Error("Missing required property 'containerd'");
            }
            if (args?.crio === undefined && !opts.urn) {
                throw new Error("Missing required property 'crio'");
            }
            if (args?.docker === undefined && !opts.urn) {
                throw new Error("Missing required property 'docker'");
            }
            if (args?.dockerWindows === undefined && !opts.urn) {
                throw new Error("Missing required property 'dockerWindows'");
            }
            if (args?.garden === undefined && !opts.urn) {
                throw new Error("Missing required property 'garden'");
            }
            if (args?.podman === undefined && !opts.urn) {
                throw new Error("Missing required property 'podman'");
            }
            if (args?.winc === undefined && !opts.urn) {
                throw new Error("Missing required property 'winc'");
            }
            resourceInputs["boshProcessManager"] = args?.boshProcessManager;
            resourceInputs["containerd"] = args?.containerd;
            resourceInputs["crio"] = args?.crio;
            resourceInputs["docker"] = args?.docker;
            resourceInputs["dockerWindows"] = args?.dockerWindows;
            resourceInputs["garden"] = args?.garden;
            resourceInputs["podman"] = args?.podman;
            resourceInputs["scope"] = args?.scope;
            resourceInputs["winc"] = args?.winc;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ContainerTechnology.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ContainerTechnology resources.
 */
export interface ContainerTechnologyState {
    /**
     * Platform: Cloud Foundry
     */
    boshProcessManager?: pulumi.Input<boolean>;
    /**
     * Platform: Kubernetes
     *
     * Status: Released
     *
     * Operating system: Linux
     *
     * Min agent version: 1.169
     */
    containerd?: pulumi.Input<boolean>;
    /**
     * Platform: Kubernetes
     *
     * Status: Released
     *
     * Operating system: Linux
     *
     * Min agent version: 1.163
     */
    crio?: pulumi.Input<boolean>;
    /**
     * Platform: Docker and Kubernetes
     *
     * Status: Released
     *
     * Operating system: Linux
     */
    docker?: pulumi.Input<boolean>;
    /**
     * Platform: Docker
     *
     * Status: Early adopter
     *
     * Operating system: Windows
     *
     * Min agent version: 1.149
     */
    dockerWindows?: pulumi.Input<boolean>;
    /**
     * Platform: Cloud Foundry
     *
     * Status: Released
     *
     * Operating system: Linux
     *
     * Min agent version: 1.133
     */
    garden?: pulumi.Input<boolean>;
    /**
     * Platform: Podman
     *
     * Status: Released
     *
     * Operating system: Linux
     *
     * Min agent version: 1.267
     */
    podman?: pulumi.Input<boolean>;
    /**
     * The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
     */
    scope?: pulumi.Input<string>;
    /**
     * Platform: Cloud Foundry
     *
     * Status: Early adopter
     *
     * Operating system: Windows
     *
     * Min agent version: 1.175
     */
    winc?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ContainerTechnology resource.
 */
export interface ContainerTechnologyArgs {
    /**
     * Platform: Cloud Foundry
     */
    boshProcessManager: pulumi.Input<boolean>;
    /**
     * Platform: Kubernetes
     *
     * Status: Released
     *
     * Operating system: Linux
     *
     * Min agent version: 1.169
     */
    containerd: pulumi.Input<boolean>;
    /**
     * Platform: Kubernetes
     *
     * Status: Released
     *
     * Operating system: Linux
     *
     * Min agent version: 1.163
     */
    crio: pulumi.Input<boolean>;
    /**
     * Platform: Docker and Kubernetes
     *
     * Status: Released
     *
     * Operating system: Linux
     */
    docker: pulumi.Input<boolean>;
    /**
     * Platform: Docker
     *
     * Status: Early adopter
     *
     * Operating system: Windows
     *
     * Min agent version: 1.149
     */
    dockerWindows: pulumi.Input<boolean>;
    /**
     * Platform: Cloud Foundry
     *
     * Status: Released
     *
     * Operating system: Linux
     *
     * Min agent version: 1.133
     */
    garden: pulumi.Input<boolean>;
    /**
     * Platform: Podman
     *
     * Status: Released
     *
     * Operating system: Linux
     *
     * Min agent version: 1.267
     */
    podman: pulumi.Input<boolean>;
    /**
     * The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
     */
    scope?: pulumi.Input<string>;
    /**
     * Platform: Cloud Foundry
     *
     * Status: Early adopter
     *
     * Operating system: Windows
     *
     * Min agent version: 1.175
     */
    winc: pulumi.Input<boolean>;
}
