// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OpenpipelineV2SystemEventsPipelines extends pulumi.CustomResource {
    /**
     * Get an existing OpenpipelineV2SystemEventsPipelines resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OpenpipelineV2SystemEventsPipelinesState, opts?: pulumi.CustomResourceOptions): OpenpipelineV2SystemEventsPipelines {
        return new OpenpipelineV2SystemEventsPipelines(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/openpipelineV2SystemEventsPipelines:OpenpipelineV2SystemEventsPipelines';

    /**
     * Returns true if the given object is an instance of OpenpipelineV2SystemEventsPipelines.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OpenpipelineV2SystemEventsPipelines {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OpenpipelineV2SystemEventsPipelines.__pulumiType;
    }

    /**
     * Cost allocation stage
     */
    declare public readonly costAllocation: pulumi.Output<outputs.OpenpipelineV2SystemEventsPipelinesCostAllocation>;
    /**
     * Custom pipeline id
     */
    declare public readonly customId: pulumi.Output<string>;
    /**
     * Data extraction stage
     */
    declare public readonly dataExtraction: pulumi.Output<outputs.OpenpipelineV2SystemEventsPipelinesDataExtraction>;
    /**
     * Davis event extraction stage
     */
    declare public readonly davis: pulumi.Output<outputs.OpenpipelineV2SystemEventsPipelinesDavis>;
    /**
     * Display name
     */
    declare public readonly displayName: pulumi.Output<string>;
    /**
     * Metrics extraction stage
     */
    declare public readonly metricExtraction: pulumi.Output<outputs.OpenpipelineV2SystemEventsPipelinesMetricExtraction>;
    /**
     * Processing stage
     */
    declare public readonly processing: pulumi.Output<outputs.OpenpipelineV2SystemEventsPipelinesProcessing>;
    /**
     * Product allocation stage
     */
    declare public readonly productAllocation: pulumi.Output<outputs.OpenpipelineV2SystemEventsPipelinesProductAllocation>;
    /**
     * Security context stage
     */
    declare public readonly securityContext: pulumi.Output<outputs.OpenpipelineV2SystemEventsPipelinesSecurityContext>;
    /**
     * Storage stage
     */
    declare public readonly storage: pulumi.Output<outputs.OpenpipelineV2SystemEventsPipelinesStorage>;

    /**
     * Create a OpenpipelineV2SystemEventsPipelines resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OpenpipelineV2SystemEventsPipelinesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OpenpipelineV2SystemEventsPipelinesArgs | OpenpipelineV2SystemEventsPipelinesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OpenpipelineV2SystemEventsPipelinesState | undefined;
            resourceInputs["costAllocation"] = state?.costAllocation;
            resourceInputs["customId"] = state?.customId;
            resourceInputs["dataExtraction"] = state?.dataExtraction;
            resourceInputs["davis"] = state?.davis;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["metricExtraction"] = state?.metricExtraction;
            resourceInputs["processing"] = state?.processing;
            resourceInputs["productAllocation"] = state?.productAllocation;
            resourceInputs["securityContext"] = state?.securityContext;
            resourceInputs["storage"] = state?.storage;
        } else {
            const args = argsOrState as OpenpipelineV2SystemEventsPipelinesArgs | undefined;
            if (args?.costAllocation === undefined && !opts.urn) {
                throw new Error("Missing required property 'costAllocation'");
            }
            if (args?.customId === undefined && !opts.urn) {
                throw new Error("Missing required property 'customId'");
            }
            if (args?.dataExtraction === undefined && !opts.urn) {
                throw new Error("Missing required property 'dataExtraction'");
            }
            if (args?.davis === undefined && !opts.urn) {
                throw new Error("Missing required property 'davis'");
            }
            if (args?.displayName === undefined && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if (args?.metricExtraction === undefined && !opts.urn) {
                throw new Error("Missing required property 'metricExtraction'");
            }
            if (args?.processing === undefined && !opts.urn) {
                throw new Error("Missing required property 'processing'");
            }
            if (args?.productAllocation === undefined && !opts.urn) {
                throw new Error("Missing required property 'productAllocation'");
            }
            if (args?.securityContext === undefined && !opts.urn) {
                throw new Error("Missing required property 'securityContext'");
            }
            if (args?.storage === undefined && !opts.urn) {
                throw new Error("Missing required property 'storage'");
            }
            resourceInputs["costAllocation"] = args?.costAllocation;
            resourceInputs["customId"] = args?.customId;
            resourceInputs["dataExtraction"] = args?.dataExtraction;
            resourceInputs["davis"] = args?.davis;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["metricExtraction"] = args?.metricExtraction;
            resourceInputs["processing"] = args?.processing;
            resourceInputs["productAllocation"] = args?.productAllocation;
            resourceInputs["securityContext"] = args?.securityContext;
            resourceInputs["storage"] = args?.storage;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OpenpipelineV2SystemEventsPipelines.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OpenpipelineV2SystemEventsPipelines resources.
 */
export interface OpenpipelineV2SystemEventsPipelinesState {
    /**
     * Cost allocation stage
     */
    costAllocation?: pulumi.Input<inputs.OpenpipelineV2SystemEventsPipelinesCostAllocation>;
    /**
     * Custom pipeline id
     */
    customId?: pulumi.Input<string>;
    /**
     * Data extraction stage
     */
    dataExtraction?: pulumi.Input<inputs.OpenpipelineV2SystemEventsPipelinesDataExtraction>;
    /**
     * Davis event extraction stage
     */
    davis?: pulumi.Input<inputs.OpenpipelineV2SystemEventsPipelinesDavis>;
    /**
     * Display name
     */
    displayName?: pulumi.Input<string>;
    /**
     * Metrics extraction stage
     */
    metricExtraction?: pulumi.Input<inputs.OpenpipelineV2SystemEventsPipelinesMetricExtraction>;
    /**
     * Processing stage
     */
    processing?: pulumi.Input<inputs.OpenpipelineV2SystemEventsPipelinesProcessing>;
    /**
     * Product allocation stage
     */
    productAllocation?: pulumi.Input<inputs.OpenpipelineV2SystemEventsPipelinesProductAllocation>;
    /**
     * Security context stage
     */
    securityContext?: pulumi.Input<inputs.OpenpipelineV2SystemEventsPipelinesSecurityContext>;
    /**
     * Storage stage
     */
    storage?: pulumi.Input<inputs.OpenpipelineV2SystemEventsPipelinesStorage>;
}

/**
 * The set of arguments for constructing a OpenpipelineV2SystemEventsPipelines resource.
 */
export interface OpenpipelineV2SystemEventsPipelinesArgs {
    /**
     * Cost allocation stage
     */
    costAllocation: pulumi.Input<inputs.OpenpipelineV2SystemEventsPipelinesCostAllocation>;
    /**
     * Custom pipeline id
     */
    customId: pulumi.Input<string>;
    /**
     * Data extraction stage
     */
    dataExtraction: pulumi.Input<inputs.OpenpipelineV2SystemEventsPipelinesDataExtraction>;
    /**
     * Davis event extraction stage
     */
    davis: pulumi.Input<inputs.OpenpipelineV2SystemEventsPipelinesDavis>;
    /**
     * Display name
     */
    displayName: pulumi.Input<string>;
    /**
     * Metrics extraction stage
     */
    metricExtraction: pulumi.Input<inputs.OpenpipelineV2SystemEventsPipelinesMetricExtraction>;
    /**
     * Processing stage
     */
    processing: pulumi.Input<inputs.OpenpipelineV2SystemEventsPipelinesProcessing>;
    /**
     * Product allocation stage
     */
    productAllocation: pulumi.Input<inputs.OpenpipelineV2SystemEventsPipelinesProductAllocation>;
    /**
     * Security context stage
     */
    securityContext: pulumi.Input<inputs.OpenpipelineV2SystemEventsPipelinesSecurityContext>;
    /**
     * Storage stage
     */
    storage: pulumi.Input<inputs.OpenpipelineV2SystemEventsPipelinesStorage>;
}
