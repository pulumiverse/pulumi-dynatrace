// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LogAgentFeatureFlags extends pulumi.CustomResource {
    /**
     * Get an existing LogAgentFeatureFlags resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogAgentFeatureFlagsState, opts?: pulumi.CustomResourceOptions): LogAgentFeatureFlags {
        return new LogAgentFeatureFlags(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/logAgentFeatureFlags:LogAgentFeatureFlags';

    /**
     * Returns true if the given object is an instance of LogAgentFeatureFlags.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogAgentFeatureFlags {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogAgentFeatureFlags.__pulumiType;
    }

    /**
     * Enable OneAgent to collect logs from Journald on Linux systems. 
     * This setting enables:
     * * Detection and to have logs ingested matching ingest rule is required.
     */
    declare public readonly journaldLogDetector: pulumi.Output<boolean | undefined>;
    /**
     * Enable OneAgent to collect all container logs in Kubernetes environments. 
     * This setting enables:
     * * Detection and collection of logs from short-lived containers and processes in Kubernetes.
     * * Detection and collection of logs from any processes in containers in Kubernetes. Up until now only processes detected by OneAgent are covered with the Log module.
     * * Log events decoration according to semantic dictionary.
     *  **Note:** The matcher "Deployment name" in the log sources configuration will be ignored and needs to be replaced with "Workload name", requires **Dynatrace Operator 1.4.2+**.
     *
     *  For more details, check our [documentation](https://dt-url.net/jn02ey0).
     */
    declare public readonly newContainerLogDetector: pulumi.Output<boolean>;
    /**
     * The scope of this setting (HOST, KUBERNETES_CLUSTER, HOST_GROUP). Omit this property if you want to cover the whole environment.
     */
    declare public readonly scope: pulumi.Output<string | undefined>;
    /**
     * Enable OneAgent to collect data from Event Logs in the User Data and Event Data sections.
     */
    declare public readonly userAndEventData: pulumi.Output<boolean | undefined>;

    /**
     * Create a LogAgentFeatureFlags resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogAgentFeatureFlagsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogAgentFeatureFlagsArgs | LogAgentFeatureFlagsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogAgentFeatureFlagsState | undefined;
            resourceInputs["journaldLogDetector"] = state?.journaldLogDetector;
            resourceInputs["newContainerLogDetector"] = state?.newContainerLogDetector;
            resourceInputs["scope"] = state?.scope;
            resourceInputs["userAndEventData"] = state?.userAndEventData;
        } else {
            const args = argsOrState as LogAgentFeatureFlagsArgs | undefined;
            if (args?.newContainerLogDetector === undefined && !opts.urn) {
                throw new Error("Missing required property 'newContainerLogDetector'");
            }
            resourceInputs["journaldLogDetector"] = args?.journaldLogDetector;
            resourceInputs["newContainerLogDetector"] = args?.newContainerLogDetector;
            resourceInputs["scope"] = args?.scope;
            resourceInputs["userAndEventData"] = args?.userAndEventData;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogAgentFeatureFlags.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LogAgentFeatureFlags resources.
 */
export interface LogAgentFeatureFlagsState {
    /**
     * Enable OneAgent to collect logs from Journald on Linux systems. 
     * This setting enables:
     * * Detection and to have logs ingested matching ingest rule is required.
     */
    journaldLogDetector?: pulumi.Input<boolean>;
    /**
     * Enable OneAgent to collect all container logs in Kubernetes environments. 
     * This setting enables:
     * * Detection and collection of logs from short-lived containers and processes in Kubernetes.
     * * Detection and collection of logs from any processes in containers in Kubernetes. Up until now only processes detected by OneAgent are covered with the Log module.
     * * Log events decoration according to semantic dictionary.
     *  **Note:** The matcher "Deployment name" in the log sources configuration will be ignored and needs to be replaced with "Workload name", requires **Dynatrace Operator 1.4.2+**.
     *
     *  For more details, check our [documentation](https://dt-url.net/jn02ey0).
     */
    newContainerLogDetector?: pulumi.Input<boolean>;
    /**
     * The scope of this setting (HOST, KUBERNETES_CLUSTER, HOST_GROUP). Omit this property if you want to cover the whole environment.
     */
    scope?: pulumi.Input<string>;
    /**
     * Enable OneAgent to collect data from Event Logs in the User Data and Event Data sections.
     */
    userAndEventData?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a LogAgentFeatureFlags resource.
 */
export interface LogAgentFeatureFlagsArgs {
    /**
     * Enable OneAgent to collect logs from Journald on Linux systems. 
     * This setting enables:
     * * Detection and to have logs ingested matching ingest rule is required.
     */
    journaldLogDetector?: pulumi.Input<boolean>;
    /**
     * Enable OneAgent to collect all container logs in Kubernetes environments. 
     * This setting enables:
     * * Detection and collection of logs from short-lived containers and processes in Kubernetes.
     * * Detection and collection of logs from any processes in containers in Kubernetes. Up until now only processes detected by OneAgent are covered with the Log module.
     * * Log events decoration according to semantic dictionary.
     *  **Note:** The matcher "Deployment name" in the log sources configuration will be ignored and needs to be replaced with "Workload name", requires **Dynatrace Operator 1.4.2+**.
     *
     *  For more details, check our [documentation](https://dt-url.net/jn02ey0).
     */
    newContainerLogDetector: pulumi.Input<boolean>;
    /**
     * The scope of this setting (HOST, KUBERNETES_CLUSTER, HOST_GROUP). Omit this property if you want to cover the whole environment.
     */
    scope?: pulumi.Input<string>;
    /**
     * Enable OneAgent to collect data from Event Logs in the User Data and Event Data sections.
     */
    userAndEventData?: pulumi.Input<boolean>;
}
