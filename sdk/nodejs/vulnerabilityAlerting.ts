// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VulnerabilityAlerting extends pulumi.CustomResource {
    /**
     * Get an existing VulnerabilityAlerting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VulnerabilityAlertingState, opts?: pulumi.CustomResourceOptions): VulnerabilityAlerting {
        return new VulnerabilityAlerting(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/vulnerabilityAlerting:VulnerabilityAlerting';

    /**
     * Returns true if the given object is an instance of VulnerabilityAlerting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VulnerabilityAlerting {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VulnerabilityAlerting.__pulumiType;
    }

    /**
     * Alerting profile is enabled (`true`) or disabled (`false`)
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * List of risk levels to alert
     */
    public readonly enabledRiskLevels!: pulumi.Output<string[] | undefined>;
    /**
     * List of events to alert
     */
    public readonly enabledTriggerEvents!: pulumi.Output<string[] | undefined>;
    /**
     * Alert only if the following management zone is affected (optional)
     */
    public readonly managementZone!: pulumi.Output<string | undefined>;
    /**
     * Alerting profile name
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a VulnerabilityAlerting resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VulnerabilityAlertingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VulnerabilityAlertingArgs | VulnerabilityAlertingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VulnerabilityAlertingState | undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["enabledRiskLevels"] = state ? state.enabledRiskLevels : undefined;
            resourceInputs["enabledTriggerEvents"] = state ? state.enabledTriggerEvents : undefined;
            resourceInputs["managementZone"] = state ? state.managementZone : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as VulnerabilityAlertingArgs | undefined;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["enabledRiskLevels"] = args ? args.enabledRiskLevels : undefined;
            resourceInputs["enabledTriggerEvents"] = args ? args.enabledTriggerEvents : undefined;
            resourceInputs["managementZone"] = args ? args.managementZone : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VulnerabilityAlerting.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VulnerabilityAlerting resources.
 */
export interface VulnerabilityAlertingState {
    /**
     * Alerting profile is enabled (`true`) or disabled (`false`)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * List of risk levels to alert
     */
    enabledRiskLevels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of events to alert
     */
    enabledTriggerEvents?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Alert only if the following management zone is affected (optional)
     */
    managementZone?: pulumi.Input<string>;
    /**
     * Alerting profile name
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VulnerabilityAlerting resource.
 */
export interface VulnerabilityAlertingArgs {
    /**
     * Alerting profile is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * List of risk levels to alert
     */
    enabledRiskLevels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of events to alert
     */
    enabledTriggerEvents?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Alert only if the following management zone is affected (optional)
     */
    managementZone?: pulumi.Input<string>;
    /**
     * Alerting profile name
     */
    name?: pulumi.Input<string>;
}
