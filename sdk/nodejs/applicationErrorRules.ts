// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ApplicationErrorRules extends pulumi.CustomResource {
    /**
     * Get an existing ApplicationErrorRules resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationErrorRulesState, opts?: pulumi.CustomResourceOptions): ApplicationErrorRules {
        return new ApplicationErrorRules(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/applicationErrorRules:ApplicationErrorRules';

    /**
     * Returns true if the given object is an instance of ApplicationErrorRules.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplicationErrorRules {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplicationErrorRules.__pulumiType;
    }

    /**
     * (Field has overlap with `dynatrace.WebAppCustomErrors`) An ordered list of HTTP errors.
     */
    declare public readonly customErrors: pulumi.Output<outputs.ApplicationErrorRulesCustomErrors | undefined>;
    /**
     * (Field has overlap with `dynatrace.WebAppRequestErrors`) An ordered list of HTTP errors.
     *
     *  Rules are evaluated from top to bottom; the first matching rule applies
     */
    declare public readonly httpErrors: pulumi.Output<outputs.ApplicationErrorRulesHttpErrors | undefined>;
    /**
     * (Field has overlap with `dynatrace.WebAppCustomErrors`) Exclude (`true`) or include (`false`) custom errors listed in **customErrorRules** in Apdex calculation
     */
    declare public readonly ignoreCustomErrorsApdex: pulumi.Output<boolean | undefined>;
    /**
     * (Field has overlap with `dynatrace.WebAppRequestErrors`) Exclude (`true`) or include (`false`) HTTP errors listed in **httpErrorRules** in Apdex calculation
     */
    declare public readonly ignoreHttpErrorsApdex: pulumi.Output<boolean | undefined>;
    /**
     * Exclude (`true`) or include (`false`) JavaScript errors in Apdex calculation
     */
    declare public readonly ignoreJsErrorsApdex: pulumi.Output<boolean | undefined>;
    /**
     * The EntityID of the the WebApplication
     */
    declare public readonly webApplicationId: pulumi.Output<string | undefined>;

    /**
     * Create a ApplicationErrorRules resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ApplicationErrorRulesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationErrorRulesArgs | ApplicationErrorRulesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplicationErrorRulesState | undefined;
            resourceInputs["customErrors"] = state?.customErrors;
            resourceInputs["httpErrors"] = state?.httpErrors;
            resourceInputs["ignoreCustomErrorsApdex"] = state?.ignoreCustomErrorsApdex;
            resourceInputs["ignoreHttpErrorsApdex"] = state?.ignoreHttpErrorsApdex;
            resourceInputs["ignoreJsErrorsApdex"] = state?.ignoreJsErrorsApdex;
            resourceInputs["webApplicationId"] = state?.webApplicationId;
        } else {
            const args = argsOrState as ApplicationErrorRulesArgs | undefined;
            resourceInputs["customErrors"] = args?.customErrors;
            resourceInputs["httpErrors"] = args?.httpErrors;
            resourceInputs["ignoreCustomErrorsApdex"] = args?.ignoreCustomErrorsApdex;
            resourceInputs["ignoreHttpErrorsApdex"] = args?.ignoreHttpErrorsApdex;
            resourceInputs["ignoreJsErrorsApdex"] = args?.ignoreJsErrorsApdex;
            resourceInputs["webApplicationId"] = args?.webApplicationId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApplicationErrorRules.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApplicationErrorRules resources.
 */
export interface ApplicationErrorRulesState {
    /**
     * (Field has overlap with `dynatrace.WebAppCustomErrors`) An ordered list of HTTP errors.
     */
    customErrors?: pulumi.Input<inputs.ApplicationErrorRulesCustomErrors>;
    /**
     * (Field has overlap with `dynatrace.WebAppRequestErrors`) An ordered list of HTTP errors.
     *
     *  Rules are evaluated from top to bottom; the first matching rule applies
     */
    httpErrors?: pulumi.Input<inputs.ApplicationErrorRulesHttpErrors>;
    /**
     * (Field has overlap with `dynatrace.WebAppCustomErrors`) Exclude (`true`) or include (`false`) custom errors listed in **customErrorRules** in Apdex calculation
     */
    ignoreCustomErrorsApdex?: pulumi.Input<boolean>;
    /**
     * (Field has overlap with `dynatrace.WebAppRequestErrors`) Exclude (`true`) or include (`false`) HTTP errors listed in **httpErrorRules** in Apdex calculation
     */
    ignoreHttpErrorsApdex?: pulumi.Input<boolean>;
    /**
     * Exclude (`true`) or include (`false`) JavaScript errors in Apdex calculation
     */
    ignoreJsErrorsApdex?: pulumi.Input<boolean>;
    /**
     * The EntityID of the the WebApplication
     */
    webApplicationId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApplicationErrorRules resource.
 */
export interface ApplicationErrorRulesArgs {
    /**
     * (Field has overlap with `dynatrace.WebAppCustomErrors`) An ordered list of HTTP errors.
     */
    customErrors?: pulumi.Input<inputs.ApplicationErrorRulesCustomErrors>;
    /**
     * (Field has overlap with `dynatrace.WebAppRequestErrors`) An ordered list of HTTP errors.
     *
     *  Rules are evaluated from top to bottom; the first matching rule applies
     */
    httpErrors?: pulumi.Input<inputs.ApplicationErrorRulesHttpErrors>;
    /**
     * (Field has overlap with `dynatrace.WebAppCustomErrors`) Exclude (`true`) or include (`false`) custom errors listed in **customErrorRules** in Apdex calculation
     */
    ignoreCustomErrorsApdex?: pulumi.Input<boolean>;
    /**
     * (Field has overlap with `dynatrace.WebAppRequestErrors`) Exclude (`true`) or include (`false`) HTTP errors listed in **httpErrorRules** in Apdex calculation
     */
    ignoreHttpErrorsApdex?: pulumi.Input<boolean>;
    /**
     * Exclude (`true`) or include (`false`) JavaScript errors in Apdex calculation
     */
    ignoreJsErrorsApdex?: pulumi.Input<boolean>;
    /**
     * The EntityID of the the WebApplication
     */
    webApplicationId?: pulumi.Input<string>;
}
