// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class NetworkMonitorOutage extends pulumi.CustomResource {
    /**
     * Get an existing NetworkMonitorOutage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkMonitorOutageState, opts?: pulumi.CustomResourceOptions): NetworkMonitorOutage {
        return new NetworkMonitorOutage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/networkMonitorOutage:NetworkMonitorOutage';

    /**
     * Returns true if the given object is an instance of NetworkMonitorOutage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkMonitorOutage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkMonitorOutage.__pulumiType;
    }

    /**
     * Alert if all locations are unable to access my target address
     */
    declare public readonly globalConsecutiveOutageCountThreshold: pulumi.Output<number | undefined>;
    /**
     * Generate a problem and send an alert when the monitor is unavailable at all configured locations.
     */
    declare public readonly globalOutages: pulumi.Output<boolean>;
    /**
     * are unable to access my target address
     */
    declare public readonly localConsecutiveOutageCountThreshold: pulumi.Output<number | undefined>;
    /**
     * Alert if at least
     */
    declare public readonly localLocationOutageCountThreshold: pulumi.Output<number | undefined>;
    /**
     * Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
     */
    declare public readonly localOutages: pulumi.Output<boolean>;
    /**
     * The scope of this setting (MULTIPROTOCOL_MONITOR). Omit this property if you want to cover the whole environment.
     */
    declare public readonly scope: pulumi.Output<string | undefined>;

    /**
     * Create a NetworkMonitorOutage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkMonitorOutageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkMonitorOutageArgs | NetworkMonitorOutageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkMonitorOutageState | undefined;
            resourceInputs["globalConsecutiveOutageCountThreshold"] = state?.globalConsecutiveOutageCountThreshold;
            resourceInputs["globalOutages"] = state?.globalOutages;
            resourceInputs["localConsecutiveOutageCountThreshold"] = state?.localConsecutiveOutageCountThreshold;
            resourceInputs["localLocationOutageCountThreshold"] = state?.localLocationOutageCountThreshold;
            resourceInputs["localOutages"] = state?.localOutages;
            resourceInputs["scope"] = state?.scope;
        } else {
            const args = argsOrState as NetworkMonitorOutageArgs | undefined;
            if (args?.globalOutages === undefined && !opts.urn) {
                throw new Error("Missing required property 'globalOutages'");
            }
            if (args?.localOutages === undefined && !opts.urn) {
                throw new Error("Missing required property 'localOutages'");
            }
            resourceInputs["globalConsecutiveOutageCountThreshold"] = args?.globalConsecutiveOutageCountThreshold;
            resourceInputs["globalOutages"] = args?.globalOutages;
            resourceInputs["localConsecutiveOutageCountThreshold"] = args?.localConsecutiveOutageCountThreshold;
            resourceInputs["localLocationOutageCountThreshold"] = args?.localLocationOutageCountThreshold;
            resourceInputs["localOutages"] = args?.localOutages;
            resourceInputs["scope"] = args?.scope;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkMonitorOutage.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetworkMonitorOutage resources.
 */
export interface NetworkMonitorOutageState {
    /**
     * Alert if all locations are unable to access my target address
     */
    globalConsecutiveOutageCountThreshold?: pulumi.Input<number>;
    /**
     * Generate a problem and send an alert when the monitor is unavailable at all configured locations.
     */
    globalOutages?: pulumi.Input<boolean>;
    /**
     * are unable to access my target address
     */
    localConsecutiveOutageCountThreshold?: pulumi.Input<number>;
    /**
     * Alert if at least
     */
    localLocationOutageCountThreshold?: pulumi.Input<number>;
    /**
     * Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
     */
    localOutages?: pulumi.Input<boolean>;
    /**
     * The scope of this setting (MULTIPROTOCOL_MONITOR). Omit this property if you want to cover the whole environment.
     */
    scope?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkMonitorOutage resource.
 */
export interface NetworkMonitorOutageArgs {
    /**
     * Alert if all locations are unable to access my target address
     */
    globalConsecutiveOutageCountThreshold?: pulumi.Input<number>;
    /**
     * Generate a problem and send an alert when the monitor is unavailable at all configured locations.
     */
    globalOutages: pulumi.Input<boolean>;
    /**
     * are unable to access my target address
     */
    localConsecutiveOutageCountThreshold?: pulumi.Input<number>;
    /**
     * Alert if at least
     */
    localLocationOutageCountThreshold?: pulumi.Input<number>;
    /**
     * Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
     */
    localOutages: pulumi.Input<boolean>;
    /**
     * The scope of this setting (MULTIPROTOCOL_MONITOR). Omit this property if you want to cover the whole environment.
     */
    scope?: pulumi.Input<string>;
}
