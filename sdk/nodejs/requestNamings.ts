// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * > This resource requires the API token scopes **Read configuration** (`ReadConfig`) and **Write configuration** (`WriteConfig`)
 *
 * ## Dynatrace Documentation
 *
 * - Set up request naming - https://www.dynatrace.com/support/help/how-to-use-dynatrace/services/service-monitoring-settings/set-up-request-naming
 *
 * - Request naming API - https://www.dynatrace.com/support/help/dynatrace-api/configuration-api/service-api/request-naming-api
 */
export class RequestNamings extends pulumi.CustomResource {
    /**
     * Get an existing RequestNamings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RequestNamingsState, opts?: pulumi.CustomResourceOptions): RequestNamings {
        return new RequestNamings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/requestNamings:RequestNamings';

    /**
     * Returns true if the given object is an instance of RequestNamings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RequestNamings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RequestNamings.__pulumiType;
    }

    /**
     * The IDs of the request namings in the order they should be taken into consideration
     */
    declare public readonly ids: pulumi.Output<string[] | undefined>;

    /**
     * Create a RequestNamings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RequestNamingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RequestNamingsArgs | RequestNamingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RequestNamingsState | undefined;
            resourceInputs["ids"] = state?.ids;
        } else {
            const args = argsOrState as RequestNamingsArgs | undefined;
            resourceInputs["ids"] = args?.ids;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RequestNamings.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RequestNamings resources.
 */
export interface RequestNamingsState {
    /**
     * The IDs of the request namings in the order they should be taken into consideration
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a RequestNamings resource.
 */
export interface RequestNamingsArgs {
    /**
     * The IDs of the request namings in the order they should be taken into consideration
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
}
