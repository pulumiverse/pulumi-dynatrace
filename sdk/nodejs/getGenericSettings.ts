// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The generic settings data source allows Settings 2.0 objects to be retrieved by its schema ID, scope, and/or filter.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dynatrace from "@pulumi/dynatrace";
 *
 * const example = dynatrace.getGenericSettings({
 *     schema: "builtin:alerting.maintenance-window",
 * });
 * export const genericSettings = example;
 * ```
 */
export function getGenericSettings(args?: GetGenericSettingsArgs, opts?: pulumi.InvokeOptions): Promise<GetGenericSettingsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("dynatrace:index/getGenericSettings:getGenericSettings", {
        "filter": args.filter,
        "schema": args.schema,
        "scope": args.scope,
    }, opts);
}

/**
 * A collection of arguments for invoking getGenericSettings.
 */
export interface GetGenericSettingsArgs {
    /**
     * Filter of the requested objects
     */
    filter?: string;
    /**
     * Schema IDs to which the requested objects belong
     */
    schema?: string;
    /**
     * Scope that the requested objects target
     */
    scope?: string;
}

/**
 * A collection of values returned by getGenericSettings.
 */
export interface GetGenericSettingsResult {
    /**
     * Filter of the requested objects
     */
    readonly filter?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Schema IDs to which the requested objects belong
     */
    readonly schema: string;
    /**
     * Scope that the requested objects target
     */
    readonly scope: string;
    readonly values: outputs.GetGenericSettingsValue[];
}
/**
 * The generic settings data source allows Settings 2.0 objects to be retrieved by its schema ID, scope, and/or filter.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dynatrace from "@pulumi/dynatrace";
 *
 * const example = dynatrace.getGenericSettings({
 *     schema: "builtin:alerting.maintenance-window",
 * });
 * export const genericSettings = example;
 * ```
 */
export function getGenericSettingsOutput(args?: GetGenericSettingsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGenericSettingsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("dynatrace:index/getGenericSettings:getGenericSettings", {
        "filter": args.filter,
        "schema": args.schema,
        "scope": args.scope,
    }, opts);
}

/**
 * A collection of arguments for invoking getGenericSettings.
 */
export interface GetGenericSettingsOutputArgs {
    /**
     * Filter of the requested objects
     */
    filter?: pulumi.Input<string>;
    /**
     * Schema IDs to which the requested objects belong
     */
    schema?: pulumi.Input<string>;
    /**
     * Scope that the requested objects target
     */
    scope?: pulumi.Input<string>;
}
