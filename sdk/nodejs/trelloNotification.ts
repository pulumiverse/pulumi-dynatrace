// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class TrelloNotification extends pulumi.CustomResource {
    /**
     * Get an existing TrelloNotification resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TrelloNotificationState, opts?: pulumi.CustomResourceOptions): TrelloNotification {
        return new TrelloNotification(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/trelloNotification:TrelloNotification';

    /**
     * Returns true if the given object is an instance of TrelloNotification.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TrelloNotification {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TrelloNotification.__pulumiType;
    }

    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    public readonly active!: pulumi.Output<boolean>;
    /**
     * The application key for the Trello account
     */
    public readonly applicationKey!: pulumi.Output<string>;
    /**
     * The application token for the Trello account
     */
    public readonly authorizationToken!: pulumi.Output<string | undefined>;
    /**
     * The Trello board to which the card should be assigned
     */
    public readonly boardId!: pulumi.Output<string>;
    /**
     * The description of the Trello card.   You can use same placeholders as in card text
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The ID of these settings when referred to from resources requiring the REST API V1 keys
     */
    public readonly legacyId!: pulumi.Output<string>;
    /**
     * The Trello list to which the card should be assigned
     */
    public readonly listId!: pulumi.Output<string>;
    /**
     * The name of the notification configuration
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the associated alerting profile
     */
    public readonly profile!: pulumi.Output<string>;
    /**
     * The Trello list to which the card of the resolved problem should be assigned
     */
    public readonly resolvedListId!: pulumi.Output<string>;
    /**
     * The text of the generated Trello card.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     */
    public readonly text!: pulumi.Output<string>;

    /**
     * Create a TrelloNotification resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TrelloNotificationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TrelloNotificationArgs | TrelloNotificationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TrelloNotificationState | undefined;
            resourceInputs["active"] = state ? state.active : undefined;
            resourceInputs["applicationKey"] = state ? state.applicationKey : undefined;
            resourceInputs["authorizationToken"] = state ? state.authorizationToken : undefined;
            resourceInputs["boardId"] = state ? state.boardId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["legacyId"] = state ? state.legacyId : undefined;
            resourceInputs["listId"] = state ? state.listId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["profile"] = state ? state.profile : undefined;
            resourceInputs["resolvedListId"] = state ? state.resolvedListId : undefined;
            resourceInputs["text"] = state ? state.text : undefined;
        } else {
            const args = argsOrState as TrelloNotificationArgs | undefined;
            if ((!args || args.active === undefined) && !opts.urn) {
                throw new Error("Missing required property 'active'");
            }
            if ((!args || args.applicationKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationKey'");
            }
            if ((!args || args.boardId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'boardId'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.listId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'listId'");
            }
            if ((!args || args.profile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'profile'");
            }
            if ((!args || args.resolvedListId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resolvedListId'");
            }
            if ((!args || args.text === undefined) && !opts.urn) {
                throw new Error("Missing required property 'text'");
            }
            resourceInputs["active"] = args ? args.active : undefined;
            resourceInputs["applicationKey"] = args ? args.applicationKey : undefined;
            resourceInputs["authorizationToken"] = args?.authorizationToken ? pulumi.secret(args.authorizationToken) : undefined;
            resourceInputs["boardId"] = args ? args.boardId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["legacyId"] = args ? args.legacyId : undefined;
            resourceInputs["listId"] = args ? args.listId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["profile"] = args ? args.profile : undefined;
            resourceInputs["resolvedListId"] = args ? args.resolvedListId : undefined;
            resourceInputs["text"] = args ? args.text : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["authorizationToken"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(TrelloNotification.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TrelloNotification resources.
 */
export interface TrelloNotificationState {
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active?: pulumi.Input<boolean>;
    /**
     * The application key for the Trello account
     */
    applicationKey?: pulumi.Input<string>;
    /**
     * The application token for the Trello account
     */
    authorizationToken?: pulumi.Input<string>;
    /**
     * The Trello board to which the card should be assigned
     */
    boardId?: pulumi.Input<string>;
    /**
     * The description of the Trello card.   You can use same placeholders as in card text
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of these settings when referred to from resources requiring the REST API V1 keys
     */
    legacyId?: pulumi.Input<string>;
    /**
     * The Trello list to which the card should be assigned
     */
    listId?: pulumi.Input<string>;
    /**
     * The name of the notification configuration
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the associated alerting profile
     */
    profile?: pulumi.Input<string>;
    /**
     * The Trello list to which the card of the resolved problem should be assigned
     */
    resolvedListId?: pulumi.Input<string>;
    /**
     * The text of the generated Trello card.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     */
    text?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TrelloNotification resource.
 */
export interface TrelloNotificationArgs {
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: pulumi.Input<boolean>;
    /**
     * The application key for the Trello account
     */
    applicationKey: pulumi.Input<string>;
    /**
     * The application token for the Trello account
     */
    authorizationToken?: pulumi.Input<string>;
    /**
     * The Trello board to which the card should be assigned
     */
    boardId: pulumi.Input<string>;
    /**
     * The description of the Trello card.   You can use same placeholders as in card text
     */
    description: pulumi.Input<string>;
    /**
     * The ID of these settings when referred to from resources requiring the REST API V1 keys
     */
    legacyId?: pulumi.Input<string>;
    /**
     * The Trello list to which the card should be assigned
     */
    listId: pulumi.Input<string>;
    /**
     * The name of the notification configuration
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the associated alerting profile
     */
    profile: pulumi.Input<string>;
    /**
     * The Trello list to which the card of the resolved problem should be assigned
     */
    resolvedListId: pulumi.Input<string>;
    /**
     * The text of the generated Trello card.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     */
    text: pulumi.Input<string>;
}
