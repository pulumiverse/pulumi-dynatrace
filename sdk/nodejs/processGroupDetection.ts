// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ProcessGroupDetection extends pulumi.CustomResource {
    /**
     * Get an existing ProcessGroupDetection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProcessGroupDetectionState, opts?: pulumi.CustomResourceOptions): ProcessGroupDetection {
        return new ProcessGroupDetection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/processGroupDetection:ProcessGroupDetection';

    /**
     * Returns true if the given object is an instance of ProcessGroupDetection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProcessGroupDetection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProcessGroupDetection.__pulumiType;
    }

    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * You can define the properties that should be used to identify your process groups.
     */
    public readonly groupExtraction!: pulumi.Output<outputs.ProcessGroupDetectionGroupExtraction>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
     */
    public readonly insertAfter!: pulumi.Output<string>;
    /**
     * You can define the properties that should be used to identify your process instances.
     */
    public readonly instanceExtraction!: pulumi.Output<outputs.ProcessGroupDetectionInstanceExtraction | undefined>;
    /**
     * Apply this rule to processes where the selected property contains the specified string.
     */
    public readonly processDetection!: pulumi.Output<outputs.ProcessGroupDetectionProcessDetection>;

    /**
     * Create a ProcessGroupDetection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProcessGroupDetectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProcessGroupDetectionArgs | ProcessGroupDetectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProcessGroupDetectionState | undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["groupExtraction"] = state ? state.groupExtraction : undefined;
            resourceInputs["insertAfter"] = state ? state.insertAfter : undefined;
            resourceInputs["instanceExtraction"] = state ? state.instanceExtraction : undefined;
            resourceInputs["processDetection"] = state ? state.processDetection : undefined;
        } else {
            const args = argsOrState as ProcessGroupDetectionArgs | undefined;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.groupExtraction === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupExtraction'");
            }
            if ((!args || args.processDetection === undefined) && !opts.urn) {
                throw new Error("Missing required property 'processDetection'");
            }
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["groupExtraction"] = args ? args.groupExtraction : undefined;
            resourceInputs["insertAfter"] = args ? args.insertAfter : undefined;
            resourceInputs["instanceExtraction"] = args ? args.instanceExtraction : undefined;
            resourceInputs["processDetection"] = args ? args.processDetection : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProcessGroupDetection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProcessGroupDetection resources.
 */
export interface ProcessGroupDetectionState {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * You can define the properties that should be used to identify your process groups.
     */
    groupExtraction?: pulumi.Input<inputs.ProcessGroupDetectionGroupExtraction>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
     */
    insertAfter?: pulumi.Input<string>;
    /**
     * You can define the properties that should be used to identify your process instances.
     */
    instanceExtraction?: pulumi.Input<inputs.ProcessGroupDetectionInstanceExtraction>;
    /**
     * Apply this rule to processes where the selected property contains the specified string.
     */
    processDetection?: pulumi.Input<inputs.ProcessGroupDetectionProcessDetection>;
}

/**
 * The set of arguments for constructing a ProcessGroupDetection resource.
 */
export interface ProcessGroupDetectionArgs {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * You can define the properties that should be used to identify your process groups.
     */
    groupExtraction: pulumi.Input<inputs.ProcessGroupDetectionGroupExtraction>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
     */
    insertAfter?: pulumi.Input<string>;
    /**
     * You can define the properties that should be used to identify your process instances.
     */
    instanceExtraction?: pulumi.Input<inputs.ProcessGroupDetectionInstanceExtraction>;
    /**
     * Apply this rule to processes where the selected property contains the specified string.
     */
    processDetection: pulumi.Input<inputs.ProcessGroupDetectionProcessDetection>;
}
