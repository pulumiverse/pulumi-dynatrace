// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ManagedSmtp extends pulumi.CustomResource {
    /**
     * Get an existing ManagedSmtp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagedSmtpState, opts?: pulumi.CustomResourceOptions): ManagedSmtp {
        return new ManagedSmtp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/managedSmtp:ManagedSmtp';

    /**
     * Returns true if the given object is an instance of ManagedSmtp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagedSmtp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagedSmtp.__pulumiType;
    }

    /**
     * If true, we will send e-mails via Mission Control in case of problems with SMTP server.
     */
    declare public readonly allowFallbackViaMissionControl: pulumi.Output<boolean | undefined>;
    /**
     * Connection security, possible values: `NO_ENCRYPTION`, `OPTIONAL_STARTTLS`, `REQUIRE_STARTTLS`, `TLS`. Default: `NO_ENCRYPTION`
     */
    declare public readonly connectionSecurity: pulumi.Output<string | undefined>;
    /**
     * Host Name
     */
    declare public readonly hostName: pulumi.Output<string>;
    /**
     * If true, a password has been configured. Default: `false`.
     */
    declare public readonly isPasswordConfigured: pulumi.Output<boolean | undefined>;
    /**
     * Password
     */
    declare public readonly password: pulumi.Output<string>;
    /**
     * Integer value of port. Default: `25`
     */
    declare public readonly port: pulumi.Output<number | undefined>;
    /**
     * Sender email address
     */
    declare public readonly senderEmailAddress: pulumi.Output<string>;
    /**
     * If true, we will send e-mails via SMTP server.
     */
    declare public readonly useSmtpServer: pulumi.Output<boolean | undefined>;
    /**
     * User Name
     */
    declare public readonly userName: pulumi.Output<string>;

    /**
     * Create a ManagedSmtp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagedSmtpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagedSmtpArgs | ManagedSmtpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagedSmtpState | undefined;
            resourceInputs["allowFallbackViaMissionControl"] = state?.allowFallbackViaMissionControl;
            resourceInputs["connectionSecurity"] = state?.connectionSecurity;
            resourceInputs["hostName"] = state?.hostName;
            resourceInputs["isPasswordConfigured"] = state?.isPasswordConfigured;
            resourceInputs["password"] = state?.password;
            resourceInputs["port"] = state?.port;
            resourceInputs["senderEmailAddress"] = state?.senderEmailAddress;
            resourceInputs["useSmtpServer"] = state?.useSmtpServer;
            resourceInputs["userName"] = state?.userName;
        } else {
            const args = argsOrState as ManagedSmtpArgs | undefined;
            if (args?.hostName === undefined && !opts.urn) {
                throw new Error("Missing required property 'hostName'");
            }
            if (args?.password === undefined && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if (args?.senderEmailAddress === undefined && !opts.urn) {
                throw new Error("Missing required property 'senderEmailAddress'");
            }
            if (args?.userName === undefined && !opts.urn) {
                throw new Error("Missing required property 'userName'");
            }
            resourceInputs["allowFallbackViaMissionControl"] = args?.allowFallbackViaMissionControl;
            resourceInputs["connectionSecurity"] = args?.connectionSecurity;
            resourceInputs["hostName"] = args?.hostName;
            resourceInputs["isPasswordConfigured"] = args?.isPasswordConfigured;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["port"] = args?.port;
            resourceInputs["senderEmailAddress"] = args?.senderEmailAddress;
            resourceInputs["useSmtpServer"] = args?.useSmtpServer;
            resourceInputs["userName"] = args?.userName;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ManagedSmtp.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ManagedSmtp resources.
 */
export interface ManagedSmtpState {
    /**
     * If true, we will send e-mails via Mission Control in case of problems with SMTP server.
     */
    allowFallbackViaMissionControl?: pulumi.Input<boolean>;
    /**
     * Connection security, possible values: `NO_ENCRYPTION`, `OPTIONAL_STARTTLS`, `REQUIRE_STARTTLS`, `TLS`. Default: `NO_ENCRYPTION`
     */
    connectionSecurity?: pulumi.Input<string>;
    /**
     * Host Name
     */
    hostName?: pulumi.Input<string>;
    /**
     * If true, a password has been configured. Default: `false`.
     */
    isPasswordConfigured?: pulumi.Input<boolean>;
    /**
     * Password
     */
    password?: pulumi.Input<string>;
    /**
     * Integer value of port. Default: `25`
     */
    port?: pulumi.Input<number>;
    /**
     * Sender email address
     */
    senderEmailAddress?: pulumi.Input<string>;
    /**
     * If true, we will send e-mails via SMTP server.
     */
    useSmtpServer?: pulumi.Input<boolean>;
    /**
     * User Name
     */
    userName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ManagedSmtp resource.
 */
export interface ManagedSmtpArgs {
    /**
     * If true, we will send e-mails via Mission Control in case of problems with SMTP server.
     */
    allowFallbackViaMissionControl?: pulumi.Input<boolean>;
    /**
     * Connection security, possible values: `NO_ENCRYPTION`, `OPTIONAL_STARTTLS`, `REQUIRE_STARTTLS`, `TLS`. Default: `NO_ENCRYPTION`
     */
    connectionSecurity?: pulumi.Input<string>;
    /**
     * Host Name
     */
    hostName: pulumi.Input<string>;
    /**
     * If true, a password has been configured. Default: `false`.
     */
    isPasswordConfigured?: pulumi.Input<boolean>;
    /**
     * Password
     */
    password: pulumi.Input<string>;
    /**
     * Integer value of port. Default: `25`
     */
    port?: pulumi.Input<number>;
    /**
     * Sender email address
     */
    senderEmailAddress: pulumi.Input<string>;
    /**
     * If true, we will send e-mails via SMTP server.
     */
    useSmtpServer?: pulumi.Input<boolean>;
    /**
     * User Name
     */
    userName: pulumi.Input<string>;
}
