// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BusinessEventsProcessing extends pulumi.CustomResource {
    /**
     * Get an existing BusinessEventsProcessing resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BusinessEventsProcessingState, opts?: pulumi.CustomResourceOptions): BusinessEventsProcessing {
        return new BusinessEventsProcessing(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/businessEventsProcessing:BusinessEventsProcessing';

    /**
     * Returns true if the given object is an instance of BusinessEventsProcessing.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BusinessEventsProcessing {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BusinessEventsProcessing.__pulumiType;
    }

    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this
     * instance regarding order. If not specified when creating the setting will be added to the end of the list. If not
     * specified during update the order will remain untouched
     */
    declare public readonly insertAfter: pulumi.Output<string>;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    declare public readonly matcher: pulumi.Output<string>;
    /**
     * Rule name
     */
    declare public readonly ruleName: pulumi.Output<string>;
    /**
     * ## Rule testing ### 1. Paste an event sample
     */
    declare public readonly ruleTesting: pulumi.Output<outputs.BusinessEventsProcessingRuleTesting>;
    /**
     * [See our documentation](https://dt-url.net/pz030w5)
     */
    declare public readonly script: pulumi.Output<string>;
    /**
     * Transformation fields
     */
    declare public readonly transformationFields: pulumi.Output<outputs.BusinessEventsProcessingTransformationFields | undefined>;

    /**
     * Create a BusinessEventsProcessing resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BusinessEventsProcessingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BusinessEventsProcessingArgs | BusinessEventsProcessingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BusinessEventsProcessingState | undefined;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["insertAfter"] = state?.insertAfter;
            resourceInputs["matcher"] = state?.matcher;
            resourceInputs["ruleName"] = state?.ruleName;
            resourceInputs["ruleTesting"] = state?.ruleTesting;
            resourceInputs["script"] = state?.script;
            resourceInputs["transformationFields"] = state?.transformationFields;
        } else {
            const args = argsOrState as BusinessEventsProcessingArgs | undefined;
            if (args?.enabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if (args?.matcher === undefined && !opts.urn) {
                throw new Error("Missing required property 'matcher'");
            }
            if (args?.ruleName === undefined && !opts.urn) {
                throw new Error("Missing required property 'ruleName'");
            }
            if (args?.ruleTesting === undefined && !opts.urn) {
                throw new Error("Missing required property 'ruleTesting'");
            }
            if (args?.script === undefined && !opts.urn) {
                throw new Error("Missing required property 'script'");
            }
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["insertAfter"] = args?.insertAfter;
            resourceInputs["matcher"] = args?.matcher;
            resourceInputs["ruleName"] = args?.ruleName;
            resourceInputs["ruleTesting"] = args?.ruleTesting;
            resourceInputs["script"] = args?.script;
            resourceInputs["transformationFields"] = args?.transformationFields;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BusinessEventsProcessing.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BusinessEventsProcessing resources.
 */
export interface BusinessEventsProcessingState {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this
     * instance regarding order. If not specified when creating the setting will be added to the end of the list. If not
     * specified during update the order will remain untouched
     */
    insertAfter?: pulumi.Input<string>;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: pulumi.Input<string>;
    /**
     * Rule name
     */
    ruleName?: pulumi.Input<string>;
    /**
     * ## Rule testing ### 1. Paste an event sample
     */
    ruleTesting?: pulumi.Input<inputs.BusinessEventsProcessingRuleTesting>;
    /**
     * [See our documentation](https://dt-url.net/pz030w5)
     */
    script?: pulumi.Input<string>;
    /**
     * Transformation fields
     */
    transformationFields?: pulumi.Input<inputs.BusinessEventsProcessingTransformationFields>;
}

/**
 * The set of arguments for constructing a BusinessEventsProcessing resource.
 */
export interface BusinessEventsProcessingArgs {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this
     * instance regarding order. If not specified when creating the setting will be added to the end of the list. If not
     * specified during update the order will remain untouched
     */
    insertAfter?: pulumi.Input<string>;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher: pulumi.Input<string>;
    /**
     * Rule name
     */
    ruleName: pulumi.Input<string>;
    /**
     * ## Rule testing ### 1. Paste an event sample
     */
    ruleTesting: pulumi.Input<inputs.BusinessEventsProcessingRuleTesting>;
    /**
     * [See our documentation](https://dt-url.net/pz030w5)
     */
    script: pulumi.Input<string>;
    /**
     * Transformation fields
     */
    transformationFields?: pulumi.Input<inputs.BusinessEventsProcessingTransformationFields>;
}
