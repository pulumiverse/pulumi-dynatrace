// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OsServices extends pulumi.CustomResource {
    /**
     * Get an existing OsServices resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OsServicesState, opts?: pulumi.CustomResourceOptions): OsServices {
        return new OsServices(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/osServices:OsServices';

    /**
     * Returns true if the given object is an instance of OsServices.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OsServices {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OsServices.__pulumiType;
    }

    /**
     * The number of **10-second measurement cycles** before alerting is triggered
     */
    public readonly alertActivationDuration!: pulumi.Output<number | undefined>;
    /**
     * Toggle the switch in order to enable or disable alerting for this policy
     */
    public readonly alerting!: pulumi.Output<boolean>;
    /**
     * Detection rules
     */
    public readonly detectionConditionsLinux!: pulumi.Output<outputs.OsServicesDetectionConditionsLinux | undefined>;
    /**
     * Detection rules
     */
    public readonly detectionConditionsWindows!: pulumi.Output<outputs.OsServicesDetectionConditionsWindows | undefined>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
     */
    public readonly insertAfter!: pulumi.Output<string>;
    /**
     * Set of additional key-value properties to be attached to the triggered event.
     */
    public readonly metadata!: pulumi.Output<outputs.OsServicesMetadata | undefined>;
    /**
     * Toggle the switch in order to enable or disable availability metric monitoring for this policy. Availability metrics produce custom metrics. Refer to [documentation](https://dt-url.net/vl03xzk) for consumption examples. Each monitored service consumes one custom metric.
     */
    public readonly monitoring!: pulumi.Output<boolean>;
    /**
     * Rule name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * By default, Dynatrace does not alert if the service is not installed. Toggle the switch to enable or disable this feature
     */
    public readonly notInstalledAlerting!: pulumi.Output<boolean | undefined>;
    /**
     * The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
     */
    public readonly scope!: pulumi.Output<string | undefined>;
    /**
     * This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk).
     */
    public readonly statusConditionLinux!: pulumi.Output<string | undefined>;
    /**
     * This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk). - `$eq(paused)`
     * – Matches services that are in paused state. Available logic operations: - `$not($eq(paused))` – Matches services
     * that are in state different from paused. - `$or($eq(paused),$eq(running))` – Matches services that are either in
     * paused or running state. Use one of the following values as a parameter for this condition: - `running` - `stopped` -
     * `startPending` - `stopPending` - `continuePending` - `pausePending` - `paused`
     */
    public readonly statusConditionWindows!: pulumi.Output<string | undefined>;
    /**
     * Possible Values: `LINUX`, `WINDOWS`
     */
    public readonly system!: pulumi.Output<string>;

    /**
     * Create a OsServices resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OsServicesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OsServicesArgs | OsServicesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OsServicesState | undefined;
            resourceInputs["alertActivationDuration"] = state ? state.alertActivationDuration : undefined;
            resourceInputs["alerting"] = state ? state.alerting : undefined;
            resourceInputs["detectionConditionsLinux"] = state ? state.detectionConditionsLinux : undefined;
            resourceInputs["detectionConditionsWindows"] = state ? state.detectionConditionsWindows : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["insertAfter"] = state ? state.insertAfter : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["monitoring"] = state ? state.monitoring : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notInstalledAlerting"] = state ? state.notInstalledAlerting : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["statusConditionLinux"] = state ? state.statusConditionLinux : undefined;
            resourceInputs["statusConditionWindows"] = state ? state.statusConditionWindows : undefined;
            resourceInputs["system"] = state ? state.system : undefined;
        } else {
            const args = argsOrState as OsServicesArgs | undefined;
            if ((!args || args.alerting === undefined) && !opts.urn) {
                throw new Error("Missing required property 'alerting'");
            }
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.monitoring === undefined) && !opts.urn) {
                throw new Error("Missing required property 'monitoring'");
            }
            if ((!args || args.system === undefined) && !opts.urn) {
                throw new Error("Missing required property 'system'");
            }
            resourceInputs["alertActivationDuration"] = args ? args.alertActivationDuration : undefined;
            resourceInputs["alerting"] = args ? args.alerting : undefined;
            resourceInputs["detectionConditionsLinux"] = args ? args.detectionConditionsLinux : undefined;
            resourceInputs["detectionConditionsWindows"] = args ? args.detectionConditionsWindows : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["insertAfter"] = args ? args.insertAfter : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["monitoring"] = args ? args.monitoring : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notInstalledAlerting"] = args ? args.notInstalledAlerting : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["statusConditionLinux"] = args ? args.statusConditionLinux : undefined;
            resourceInputs["statusConditionWindows"] = args ? args.statusConditionWindows : undefined;
            resourceInputs["system"] = args ? args.system : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OsServices.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OsServices resources.
 */
export interface OsServicesState {
    /**
     * The number of **10-second measurement cycles** before alerting is triggered
     */
    alertActivationDuration?: pulumi.Input<number>;
    /**
     * Toggle the switch in order to enable or disable alerting for this policy
     */
    alerting?: pulumi.Input<boolean>;
    /**
     * Detection rules
     */
    detectionConditionsLinux?: pulumi.Input<inputs.OsServicesDetectionConditionsLinux>;
    /**
     * Detection rules
     */
    detectionConditionsWindows?: pulumi.Input<inputs.OsServicesDetectionConditionsWindows>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
     */
    insertAfter?: pulumi.Input<string>;
    /**
     * Set of additional key-value properties to be attached to the triggered event.
     */
    metadata?: pulumi.Input<inputs.OsServicesMetadata>;
    /**
     * Toggle the switch in order to enable or disable availability metric monitoring for this policy. Availability metrics produce custom metrics. Refer to [documentation](https://dt-url.net/vl03xzk) for consumption examples. Each monitored service consumes one custom metric.
     */
    monitoring?: pulumi.Input<boolean>;
    /**
     * Rule name
     */
    name?: pulumi.Input<string>;
    /**
     * By default, Dynatrace does not alert if the service is not installed. Toggle the switch to enable or disable this feature
     */
    notInstalledAlerting?: pulumi.Input<boolean>;
    /**
     * The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
     */
    scope?: pulumi.Input<string>;
    /**
     * This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk).
     */
    statusConditionLinux?: pulumi.Input<string>;
    /**
     * This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk). - `$eq(paused)`
     * – Matches services that are in paused state. Available logic operations: - `$not($eq(paused))` – Matches services
     * that are in state different from paused. - `$or($eq(paused),$eq(running))` – Matches services that are either in
     * paused or running state. Use one of the following values as a parameter for this condition: - `running` - `stopped` -
     * `startPending` - `stopPending` - `continuePending` - `pausePending` - `paused`
     */
    statusConditionWindows?: pulumi.Input<string>;
    /**
     * Possible Values: `LINUX`, `WINDOWS`
     */
    system?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OsServices resource.
 */
export interface OsServicesArgs {
    /**
     * The number of **10-second measurement cycles** before alerting is triggered
     */
    alertActivationDuration?: pulumi.Input<number>;
    /**
     * Toggle the switch in order to enable or disable alerting for this policy
     */
    alerting: pulumi.Input<boolean>;
    /**
     * Detection rules
     */
    detectionConditionsLinux?: pulumi.Input<inputs.OsServicesDetectionConditionsLinux>;
    /**
     * Detection rules
     */
    detectionConditionsWindows?: pulumi.Input<inputs.OsServicesDetectionConditionsWindows>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
     */
    insertAfter?: pulumi.Input<string>;
    /**
     * Set of additional key-value properties to be attached to the triggered event.
     */
    metadata?: pulumi.Input<inputs.OsServicesMetadata>;
    /**
     * Toggle the switch in order to enable or disable availability metric monitoring for this policy. Availability metrics produce custom metrics. Refer to [documentation](https://dt-url.net/vl03xzk) for consumption examples. Each monitored service consumes one custom metric.
     */
    monitoring: pulumi.Input<boolean>;
    /**
     * Rule name
     */
    name?: pulumi.Input<string>;
    /**
     * By default, Dynatrace does not alert if the service is not installed. Toggle the switch to enable or disable this feature
     */
    notInstalledAlerting?: pulumi.Input<boolean>;
    /**
     * The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
     */
    scope?: pulumi.Input<string>;
    /**
     * This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk).
     */
    statusConditionLinux?: pulumi.Input<string>;
    /**
     * This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk). - `$eq(paused)`
     * – Matches services that are in paused state. Available logic operations: - `$not($eq(paused))` – Matches services
     * that are in state different from paused. - `$or($eq(paused),$eq(running))` – Matches services that are either in
     * paused or running state. Use one of the following values as a parameter for this condition: - `running` - `stopped` -
     * `startPending` - `stopPending` - `continuePending` - `pausePending` - `paused`
     */
    statusConditionWindows?: pulumi.Input<string>;
    /**
     * Possible Values: `LINUX`, `WINDOWS`
     */
    system: pulumi.Input<string>;
}
