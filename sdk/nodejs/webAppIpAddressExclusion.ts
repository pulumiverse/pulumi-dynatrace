// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * > Configuration overlaps with dynatrace_web_application.
 *
 * > This resource requires the API token scopes **Read settings** (`settings.read`) and **Write settings** (`settings.write`)
 *
 * ## Dynatrace Documentation
 *
 * - Exclude IP addresses, browsers, bots, and spiders from monitoring for web applications - https://docs.dynatrace.com/docs/shortlink/rum-exclude-bots
 *
 * - Settings API - https://www.dynatrace.com/support/help/dynatrace-api/environment-api/settings (schemaId: `builtin:rum.web.ipaddress-exclusion`)
 *
 * ## Resource Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dynatrace from "@pulumiverse/dynatrace";
 *
 * const _name_ = new dynatrace.WebAppIpAddressExclusion("#name#", {
 *     applicationId: "APPLICATION-1234567890000000",
 *     ipAddressExclusionInclude: false,
 *     ipExclusionList: {
 *         ipExclusions: [
 *             {
 *                 ip: "192.168.1.5",
 *             },
 *             {
 *                 ip: "10.0.0.1",
 *                 ipTo: "10.0.0.5",
 *             },
 *         ],
 *     },
 * });
 * ```
 */
export class WebAppIpAddressExclusion extends pulumi.CustomResource {
    /**
     * Get an existing WebAppIpAddressExclusion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WebAppIpAddressExclusionState, opts?: pulumi.CustomResourceOptions): WebAppIpAddressExclusion {
        return new WebAppIpAddressExclusion(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/webAppIpAddressExclusion:WebAppIpAddressExclusion';

    /**
     * Returns true if the given object is an instance of WebAppIpAddressExclusion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WebAppIpAddressExclusion {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WebAppIpAddressExclusion.__pulumiType;
    }

    /**
     * The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
     */
    public readonly applicationId!: pulumi.Output<string>;
    /**
     * These are the only IP addresses that should be monitored
     */
    public readonly ipAddressExclusionInclude!: pulumi.Output<boolean>;
    /**
     * **Examples:** - 84.112.10.5 - fe80::10a1:c6b2:5f68:785d
     */
    public readonly ipExclusionList!: pulumi.Output<outputs.WebAppIpAddressExclusionIpExclusionList | undefined>;

    /**
     * Create a WebAppIpAddressExclusion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WebAppIpAddressExclusionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WebAppIpAddressExclusionArgs | WebAppIpAddressExclusionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WebAppIpAddressExclusionState | undefined;
            resourceInputs["applicationId"] = state ? state.applicationId : undefined;
            resourceInputs["ipAddressExclusionInclude"] = state ? state.ipAddressExclusionInclude : undefined;
            resourceInputs["ipExclusionList"] = state ? state.ipExclusionList : undefined;
        } else {
            const args = argsOrState as WebAppIpAddressExclusionArgs | undefined;
            if ((!args || args.applicationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationId'");
            }
            if ((!args || args.ipAddressExclusionInclude === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipAddressExclusionInclude'");
            }
            resourceInputs["applicationId"] = args ? args.applicationId : undefined;
            resourceInputs["ipAddressExclusionInclude"] = args ? args.ipAddressExclusionInclude : undefined;
            resourceInputs["ipExclusionList"] = args ? args.ipExclusionList : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WebAppIpAddressExclusion.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WebAppIpAddressExclusion resources.
 */
export interface WebAppIpAddressExclusionState {
    /**
     * The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
     */
    applicationId?: pulumi.Input<string>;
    /**
     * These are the only IP addresses that should be monitored
     */
    ipAddressExclusionInclude?: pulumi.Input<boolean>;
    /**
     * **Examples:** - 84.112.10.5 - fe80::10a1:c6b2:5f68:785d
     */
    ipExclusionList?: pulumi.Input<inputs.WebAppIpAddressExclusionIpExclusionList>;
}

/**
 * The set of arguments for constructing a WebAppIpAddressExclusion resource.
 */
export interface WebAppIpAddressExclusionArgs {
    /**
     * The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
     */
    applicationId: pulumi.Input<string>;
    /**
     * These are the only IP addresses that should be monitored
     */
    ipAddressExclusionInclude: pulumi.Input<boolean>;
    /**
     * **Examples:** - 84.112.10.5 - fe80::10a1:c6b2:5f68:785d
     */
    ipExclusionList?: pulumi.Input<inputs.WebAppIpAddressExclusionIpExclusionList>;
}
