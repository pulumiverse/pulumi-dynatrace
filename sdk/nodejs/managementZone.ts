// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ManagementZone extends pulumi.CustomResource {
    /**
     * Get an existing ManagementZone resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagementZoneState, opts?: pulumi.CustomResourceOptions): ManagementZone {
        return new ManagementZone(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/managementZone:ManagementZone';

    /**
     * Returns true if the given object is an instance of ManagementZone.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagementZone {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagementZone.__pulumiType;
    }

    /**
     * The description of the management zone
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * A list of dimensional data rules for management zone usage. If several rules are specified, the `or` logic applies
     */
    declare public readonly dimensionalRules: pulumi.Output<outputs.ManagementZoneDimensionalRule[] | undefined>;
    /**
     * A list of entity-selector based rules for management zone usage. If several rules are specified, the `or` logic applies
     */
    declare public readonly entitySelectorBasedRules: pulumi.Output<outputs.ManagementZoneEntitySelectorBasedRule[] | undefined>;
    /**
     * The name of the management zone
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
     */
    declare public readonly rules: pulumi.Output<outputs.ManagementZoneRule[] | undefined>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    declare public readonly unknowns: pulumi.Output<string | undefined>;

    /**
     * Create a ManagementZone resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ManagementZoneArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagementZoneArgs | ManagementZoneState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagementZoneState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["dimensionalRules"] = state?.dimensionalRules;
            resourceInputs["entitySelectorBasedRules"] = state?.entitySelectorBasedRules;
            resourceInputs["name"] = state?.name;
            resourceInputs["rules"] = state?.rules;
            resourceInputs["unknowns"] = state?.unknowns;
        } else {
            const args = argsOrState as ManagementZoneArgs | undefined;
            resourceInputs["description"] = args?.description;
            resourceInputs["dimensionalRules"] = args?.dimensionalRules;
            resourceInputs["entitySelectorBasedRules"] = args?.entitySelectorBasedRules;
            resourceInputs["name"] = args?.name;
            resourceInputs["rules"] = args?.rules;
            resourceInputs["unknowns"] = args?.unknowns;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagementZone.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ManagementZone resources.
 */
export interface ManagementZoneState {
    /**
     * The description of the management zone
     */
    description?: pulumi.Input<string>;
    /**
     * A list of dimensional data rules for management zone usage. If several rules are specified, the `or` logic applies
     */
    dimensionalRules?: pulumi.Input<pulumi.Input<inputs.ManagementZoneDimensionalRule>[]>;
    /**
     * A list of entity-selector based rules for management zone usage. If several rules are specified, the `or` logic applies
     */
    entitySelectorBasedRules?: pulumi.Input<pulumi.Input<inputs.ManagementZoneEntitySelectorBasedRule>[]>;
    /**
     * The name of the management zone
     */
    name?: pulumi.Input<string>;
    /**
     * A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
     */
    rules?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRule>[]>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ManagementZone resource.
 */
export interface ManagementZoneArgs {
    /**
     * The description of the management zone
     */
    description?: pulumi.Input<string>;
    /**
     * A list of dimensional data rules for management zone usage. If several rules are specified, the `or` logic applies
     */
    dimensionalRules?: pulumi.Input<pulumi.Input<inputs.ManagementZoneDimensionalRule>[]>;
    /**
     * A list of entity-selector based rules for management zone usage. If several rules are specified, the `or` logic applies
     */
    entitySelectorBasedRules?: pulumi.Input<pulumi.Input<inputs.ManagementZoneEntitySelectorBasedRule>[]>;
    /**
     * The name of the management zone
     */
    name?: pulumi.Input<string>;
    /**
     * A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
     */
    rules?: pulumi.Input<pulumi.Input<inputs.ManagementZoneRule>[]>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}
