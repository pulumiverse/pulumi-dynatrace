// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CalculatedSyntheticMetric extends pulumi.CustomResource {
    /**
     * Get an existing CalculatedSyntheticMetric resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CalculatedSyntheticMetricState, opts?: pulumi.CustomResourceOptions): CalculatedSyntheticMetric {
        return new CalculatedSyntheticMetric(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/calculatedSyntheticMetric:CalculatedSyntheticMetric';

    /**
     * Returns true if the given object is an instance of CalculatedSyntheticMetric.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CalculatedSyntheticMetric {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CalculatedSyntheticMetric.__pulumiType;
    }

    /**
     * Descriptor of a calculated synthetic metric.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Dimension of the calculated synthetic metric.
     */
    declare public readonly dimensions: pulumi.Output<outputs.CalculatedSyntheticMetricDimension[] | undefined>;
    /**
     * The metric is enabled (`true`) or disabled (`false`)
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * Filter of the calculated synthetic metric.
     */
    declare public readonly filter: pulumi.Output<outputs.CalculatedSyntheticMetricFilter | undefined>;
    /**
     * The type of the synthetic metric. Possible values: [ ApplicationCache, Callback, CumulativeLayoutShift, DNSLookup, DOMComplete, DOMContentLoaded, DOMInteractive, FailedRequestsResources, FirstContentfulPaint, FirstInputDelay, FirstInputStart, FirstPaint, HTMLDownloaded, HttpErrors, JavaScriptErrors, LargestContentfulPaint, LoadEventEnd, LoadEventStart, LongTasks, NavigationStart, OnDOMContentLoaded, OnLoad, Processing, RedirectTime, Request, RequestStart, ResourceCount, Response, SecureConnect, SpeedIndex, TCPConnect, TimeToFirstByte, TotalDuration, TransferSize, UserActionDuration, VisuallyComplete ]
     */
    declare public readonly metric: pulumi.Output<string>;
    /**
     * The unique key of the calculated synthetic metric.
     */
    declare public readonly metricKey: pulumi.Output<string>;
    /**
     * The Dynatrace entity ID of the monitor to which the metric belongs.
     */
    declare public readonly monitorIdentifier: pulumi.Output<string>;
    /**
     * The displayed name of the metric.
     */
    declare public readonly name: pulumi.Output<string>;

    /**
     * Create a CalculatedSyntheticMetric resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CalculatedSyntheticMetricArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CalculatedSyntheticMetricArgs | CalculatedSyntheticMetricState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CalculatedSyntheticMetricState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["dimensions"] = state?.dimensions;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["filter"] = state?.filter;
            resourceInputs["metric"] = state?.metric;
            resourceInputs["metricKey"] = state?.metricKey;
            resourceInputs["monitorIdentifier"] = state?.monitorIdentifier;
            resourceInputs["name"] = state?.name;
        } else {
            const args = argsOrState as CalculatedSyntheticMetricArgs | undefined;
            if (args?.enabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if (args?.metric === undefined && !opts.urn) {
                throw new Error("Missing required property 'metric'");
            }
            if (args?.metricKey === undefined && !opts.urn) {
                throw new Error("Missing required property 'metricKey'");
            }
            if (args?.monitorIdentifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'monitorIdentifier'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["dimensions"] = args?.dimensions;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["filter"] = args?.filter;
            resourceInputs["metric"] = args?.metric;
            resourceInputs["metricKey"] = args?.metricKey;
            resourceInputs["monitorIdentifier"] = args?.monitorIdentifier;
            resourceInputs["name"] = args?.name;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CalculatedSyntheticMetric.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CalculatedSyntheticMetric resources.
 */
export interface CalculatedSyntheticMetricState {
    /**
     * Descriptor of a calculated synthetic metric.
     */
    description?: pulumi.Input<string>;
    /**
     * Dimension of the calculated synthetic metric.
     */
    dimensions?: pulumi.Input<pulumi.Input<inputs.CalculatedSyntheticMetricDimension>[]>;
    /**
     * The metric is enabled (`true`) or disabled (`false`)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Filter of the calculated synthetic metric.
     */
    filter?: pulumi.Input<inputs.CalculatedSyntheticMetricFilter>;
    /**
     * The type of the synthetic metric. Possible values: [ ApplicationCache, Callback, CumulativeLayoutShift, DNSLookup, DOMComplete, DOMContentLoaded, DOMInteractive, FailedRequestsResources, FirstContentfulPaint, FirstInputDelay, FirstInputStart, FirstPaint, HTMLDownloaded, HttpErrors, JavaScriptErrors, LargestContentfulPaint, LoadEventEnd, LoadEventStart, LongTasks, NavigationStart, OnDOMContentLoaded, OnLoad, Processing, RedirectTime, Request, RequestStart, ResourceCount, Response, SecureConnect, SpeedIndex, TCPConnect, TimeToFirstByte, TotalDuration, TransferSize, UserActionDuration, VisuallyComplete ]
     */
    metric?: pulumi.Input<string>;
    /**
     * The unique key of the calculated synthetic metric.
     */
    metricKey?: pulumi.Input<string>;
    /**
     * The Dynatrace entity ID of the monitor to which the metric belongs.
     */
    monitorIdentifier?: pulumi.Input<string>;
    /**
     * The displayed name of the metric.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CalculatedSyntheticMetric resource.
 */
export interface CalculatedSyntheticMetricArgs {
    /**
     * Descriptor of a calculated synthetic metric.
     */
    description?: pulumi.Input<string>;
    /**
     * Dimension of the calculated synthetic metric.
     */
    dimensions?: pulumi.Input<pulumi.Input<inputs.CalculatedSyntheticMetricDimension>[]>;
    /**
     * The metric is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Filter of the calculated synthetic metric.
     */
    filter?: pulumi.Input<inputs.CalculatedSyntheticMetricFilter>;
    /**
     * The type of the synthetic metric. Possible values: [ ApplicationCache, Callback, CumulativeLayoutShift, DNSLookup, DOMComplete, DOMContentLoaded, DOMInteractive, FailedRequestsResources, FirstContentfulPaint, FirstInputDelay, FirstInputStart, FirstPaint, HTMLDownloaded, HttpErrors, JavaScriptErrors, LargestContentfulPaint, LoadEventEnd, LoadEventStart, LongTasks, NavigationStart, OnDOMContentLoaded, OnLoad, Processing, RedirectTime, Request, RequestStart, ResourceCount, Response, SecureConnect, SpeedIndex, TCPConnect, TimeToFirstByte, TotalDuration, TransferSize, UserActionDuration, VisuallyComplete ]
     */
    metric: pulumi.Input<string>;
    /**
     * The unique key of the calculated synthetic metric.
     */
    metricKey: pulumi.Input<string>;
    /**
     * The Dynatrace entity ID of the monitor to which the metric belongs.
     */
    monitorIdentifier: pulumi.Input<string>;
    /**
     * The displayed name of the metric.
     */
    name?: pulumi.Input<string>;
}
