// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * > This is a child resource of dynatrace_json_dashboard, therefore it is automatically retrieved with the dashboard.
 *
 * > This resource requires the API token scopes **Read configuration** (`ReadConfig`) and **Write configuration** (`WriteConfig`)
 *
 * ## Dynatrace Documentation
 *
 * - Share Dynatrace dashboards - https://www.dynatrace.com/support/help/how-to-use-dynatrace/dashboards-and-charts/dashboards/share-dashboards
 *
 * - Dashboards API - https://www.dynatrace.com/support/help/dynatrace-api/configuration-api/dashboards-api
 */
export class DashboardSharing extends pulumi.CustomResource {
    /**
     * Get an existing DashboardSharing resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DashboardSharingState, opts?: pulumi.CustomResourceOptions): DashboardSharing {
        return new DashboardSharing(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/dashboardSharing:DashboardSharing';

    /**
     * Returns true if the given object is an instance of DashboardSharing.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DashboardSharing {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DashboardSharing.__pulumiType;
    }

    /**
     * The Dynatrace entity ID of the dashboard
     */
    declare public readonly dashboardId: pulumi.Output<string>;
    /**
     * The dashboard is shared (`true`) or private (`false`). Make sure that this value is aligned with the attribute `shared` of the resources `dynatrace.Dashboard` and `dynatrace.JsonDashboard`. Otherwise you will encounter non-empty plans.
     */
    declare public readonly enabled: pulumi.Output<boolean | undefined>;
    /**
     * Reserved for internal use by the provider
     */
    declare public /*out*/ readonly muted: pulumi.Output<boolean>;
    /**
     * Access permissions of the dashboard
     */
    declare public readonly permissions: pulumi.Output<outputs.DashboardSharingPermissions | undefined>;
    /**
     * If `true` the dashboard will be marked as preset. Setting this attribute to `true` will automatically enforce a specific set of permissions - Dashboards flagged as Preset are shared by default. Make sure that this value is aligned with the attribute `preset` of the resources `dynatrace.Dashboard` and `dynatrace.JsonDashboard`. Otherwise you will encounter non-empty plans.
     */
    declare public readonly preset: pulumi.Output<boolean | undefined>;
    /**
     * Configuration of the [anonymous access](https://dt-url.net/ov03sf1) to the dashboard
     */
    declare public readonly public: pulumi.Output<outputs.DashboardSharingPublic | undefined>;

    /**
     * Create a DashboardSharing resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DashboardSharingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DashboardSharingArgs | DashboardSharingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DashboardSharingState | undefined;
            resourceInputs["dashboardId"] = state?.dashboardId;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["muted"] = state?.muted;
            resourceInputs["permissions"] = state?.permissions;
            resourceInputs["preset"] = state?.preset;
            resourceInputs["public"] = state?.public;
        } else {
            const args = argsOrState as DashboardSharingArgs | undefined;
            if (args?.dashboardId === undefined && !opts.urn) {
                throw new Error("Missing required property 'dashboardId'");
            }
            resourceInputs["dashboardId"] = args?.dashboardId;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["permissions"] = args?.permissions;
            resourceInputs["preset"] = args?.preset;
            resourceInputs["public"] = args?.public;
            resourceInputs["muted"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DashboardSharing.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DashboardSharing resources.
 */
export interface DashboardSharingState {
    /**
     * The Dynatrace entity ID of the dashboard
     */
    dashboardId?: pulumi.Input<string>;
    /**
     * The dashboard is shared (`true`) or private (`false`). Make sure that this value is aligned with the attribute `shared` of the resources `dynatrace.Dashboard` and `dynatrace.JsonDashboard`. Otherwise you will encounter non-empty plans.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Reserved for internal use by the provider
     */
    muted?: pulumi.Input<boolean>;
    /**
     * Access permissions of the dashboard
     */
    permissions?: pulumi.Input<inputs.DashboardSharingPermissions>;
    /**
     * If `true` the dashboard will be marked as preset. Setting this attribute to `true` will automatically enforce a specific set of permissions - Dashboards flagged as Preset are shared by default. Make sure that this value is aligned with the attribute `preset` of the resources `dynatrace.Dashboard` and `dynatrace.JsonDashboard`. Otherwise you will encounter non-empty plans.
     */
    preset?: pulumi.Input<boolean>;
    /**
     * Configuration of the [anonymous access](https://dt-url.net/ov03sf1) to the dashboard
     */
    public?: pulumi.Input<inputs.DashboardSharingPublic>;
}

/**
 * The set of arguments for constructing a DashboardSharing resource.
 */
export interface DashboardSharingArgs {
    /**
     * The Dynatrace entity ID of the dashboard
     */
    dashboardId: pulumi.Input<string>;
    /**
     * The dashboard is shared (`true`) or private (`false`). Make sure that this value is aligned with the attribute `shared` of the resources `dynatrace.Dashboard` and `dynatrace.JsonDashboard`. Otherwise you will encounter non-empty plans.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Access permissions of the dashboard
     */
    permissions?: pulumi.Input<inputs.DashboardSharingPermissions>;
    /**
     * If `true` the dashboard will be marked as preset. Setting this attribute to `true` will automatically enforce a specific set of permissions - Dashboards flagged as Preset are shared by default. Make sure that this value is aligned with the attribute `preset` of the resources `dynatrace.Dashboard` and `dynatrace.JsonDashboard`. Otherwise you will encounter non-empty plans.
     */
    preset?: pulumi.Input<boolean>;
    /**
     * Configuration of the [anonymous access](https://dt-url.net/ov03sf1) to the dashboard
     */
    public?: pulumi.Input<inputs.DashboardSharingPublic>;
}
