// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VulnerabilitySettings extends pulumi.CustomResource {
    /**
     * Get an existing VulnerabilitySettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VulnerabilitySettingsState, opts?: pulumi.CustomResourceOptions): VulnerabilitySettings {
        return new VulnerabilitySettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/vulnerabilitySettings:VulnerabilitySettings';

    /**
     * Returns true if the given object is an instance of VulnerabilitySettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VulnerabilitySettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VulnerabilitySettings.__pulumiType;
    }

    /**
     * Enable Code-level Vulnerability Analytics
     */
    public readonly enableCodeLevelVulnerabilityDetection!: pulumi.Output<boolean>;
    /**
     * When new monitoring rules are enabled, classic rules are disabled. To re-enable classic rules, disable the new monitoring rules.
     */
    public readonly enableResourceAttributeRules!: pulumi.Output<boolean | undefined>;
    /**
     * Enable Third-party Vulnerability Analytics
     */
    public readonly enableRuntimeVulnerabilityDetection!: pulumi.Output<boolean>;
    /**
     * (v1.290) Global .NET code-level vulnerability detection control defines the default for all process groups. You can use monitoring rules to override the default for certain processes. Possible Values: `MONITORING_OFF`, `MONITORING_ON`
     */
    public readonly globalMonitoringModeDotNet!: pulumi.Output<string | undefined>;
    /**
     * Global Go code-level vulnerability detection control defines the default for all process groups. You can use monitoring rules to override the default for certain processes.
     */
    public readonly globalMonitoringModeGo!: pulumi.Output<string | undefined>;
    /**
     * Global Java code-level vulnerability detection control defines the default for all process groups. You can use monitoring rules to override the default for certain processes. Possible Values: `MONITORING_OFF`, `MONITORING_ON`
     */
    public readonly globalMonitoringModeJava!: pulumi.Output<string>;
    /**
     * Global third-party vulnerability detection control defines the default for all processes. Possible Values: `MONITORING_OFF`, `MONITORING_ON`
     */
    public readonly globalMonitoringModeTpv!: pulumi.Output<string | undefined>;
    /**
     * Vulnerability Analytics can be enabled/disabled per supported technology.
     */
    public readonly technologies!: pulumi.Output<outputs.VulnerabilitySettingsTechnologies>;

    /**
     * Create a VulnerabilitySettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VulnerabilitySettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VulnerabilitySettingsArgs | VulnerabilitySettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VulnerabilitySettingsState | undefined;
            resourceInputs["enableCodeLevelVulnerabilityDetection"] = state ? state.enableCodeLevelVulnerabilityDetection : undefined;
            resourceInputs["enableResourceAttributeRules"] = state ? state.enableResourceAttributeRules : undefined;
            resourceInputs["enableRuntimeVulnerabilityDetection"] = state ? state.enableRuntimeVulnerabilityDetection : undefined;
            resourceInputs["globalMonitoringModeDotNet"] = state ? state.globalMonitoringModeDotNet : undefined;
            resourceInputs["globalMonitoringModeGo"] = state ? state.globalMonitoringModeGo : undefined;
            resourceInputs["globalMonitoringModeJava"] = state ? state.globalMonitoringModeJava : undefined;
            resourceInputs["globalMonitoringModeTpv"] = state ? state.globalMonitoringModeTpv : undefined;
            resourceInputs["technologies"] = state ? state.technologies : undefined;
        } else {
            const args = argsOrState as VulnerabilitySettingsArgs | undefined;
            if ((!args || args.enableCodeLevelVulnerabilityDetection === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enableCodeLevelVulnerabilityDetection'");
            }
            if ((!args || args.enableRuntimeVulnerabilityDetection === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enableRuntimeVulnerabilityDetection'");
            }
            if ((!args || args.globalMonitoringModeJava === undefined) && !opts.urn) {
                throw new Error("Missing required property 'globalMonitoringModeJava'");
            }
            if ((!args || args.technologies === undefined) && !opts.urn) {
                throw new Error("Missing required property 'technologies'");
            }
            resourceInputs["enableCodeLevelVulnerabilityDetection"] = args ? args.enableCodeLevelVulnerabilityDetection : undefined;
            resourceInputs["enableResourceAttributeRules"] = args ? args.enableResourceAttributeRules : undefined;
            resourceInputs["enableRuntimeVulnerabilityDetection"] = args ? args.enableRuntimeVulnerabilityDetection : undefined;
            resourceInputs["globalMonitoringModeDotNet"] = args ? args.globalMonitoringModeDotNet : undefined;
            resourceInputs["globalMonitoringModeGo"] = args ? args.globalMonitoringModeGo : undefined;
            resourceInputs["globalMonitoringModeJava"] = args ? args.globalMonitoringModeJava : undefined;
            resourceInputs["globalMonitoringModeTpv"] = args ? args.globalMonitoringModeTpv : undefined;
            resourceInputs["technologies"] = args ? args.technologies : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VulnerabilitySettings.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VulnerabilitySettings resources.
 */
export interface VulnerabilitySettingsState {
    /**
     * Enable Code-level Vulnerability Analytics
     */
    enableCodeLevelVulnerabilityDetection?: pulumi.Input<boolean>;
    /**
     * When new monitoring rules are enabled, classic rules are disabled. To re-enable classic rules, disable the new monitoring rules.
     */
    enableResourceAttributeRules?: pulumi.Input<boolean>;
    /**
     * Enable Third-party Vulnerability Analytics
     */
    enableRuntimeVulnerabilityDetection?: pulumi.Input<boolean>;
    /**
     * (v1.290) Global .NET code-level vulnerability detection control defines the default for all process groups. You can use monitoring rules to override the default for certain processes. Possible Values: `MONITORING_OFF`, `MONITORING_ON`
     */
    globalMonitoringModeDotNet?: pulumi.Input<string>;
    /**
     * Global Go code-level vulnerability detection control defines the default for all process groups. You can use monitoring rules to override the default for certain processes.
     */
    globalMonitoringModeGo?: pulumi.Input<string>;
    /**
     * Global Java code-level vulnerability detection control defines the default for all process groups. You can use monitoring rules to override the default for certain processes. Possible Values: `MONITORING_OFF`, `MONITORING_ON`
     */
    globalMonitoringModeJava?: pulumi.Input<string>;
    /**
     * Global third-party vulnerability detection control defines the default for all processes. Possible Values: `MONITORING_OFF`, `MONITORING_ON`
     */
    globalMonitoringModeTpv?: pulumi.Input<string>;
    /**
     * Vulnerability Analytics can be enabled/disabled per supported technology.
     */
    technologies?: pulumi.Input<inputs.VulnerabilitySettingsTechnologies>;
}

/**
 * The set of arguments for constructing a VulnerabilitySettings resource.
 */
export interface VulnerabilitySettingsArgs {
    /**
     * Enable Code-level Vulnerability Analytics
     */
    enableCodeLevelVulnerabilityDetection: pulumi.Input<boolean>;
    /**
     * When new monitoring rules are enabled, classic rules are disabled. To re-enable classic rules, disable the new monitoring rules.
     */
    enableResourceAttributeRules?: pulumi.Input<boolean>;
    /**
     * Enable Third-party Vulnerability Analytics
     */
    enableRuntimeVulnerabilityDetection: pulumi.Input<boolean>;
    /**
     * (v1.290) Global .NET code-level vulnerability detection control defines the default for all process groups. You can use monitoring rules to override the default for certain processes. Possible Values: `MONITORING_OFF`, `MONITORING_ON`
     */
    globalMonitoringModeDotNet?: pulumi.Input<string>;
    /**
     * Global Go code-level vulnerability detection control defines the default for all process groups. You can use monitoring rules to override the default for certain processes.
     */
    globalMonitoringModeGo?: pulumi.Input<string>;
    /**
     * Global Java code-level vulnerability detection control defines the default for all process groups. You can use monitoring rules to override the default for certain processes. Possible Values: `MONITORING_OFF`, `MONITORING_ON`
     */
    globalMonitoringModeJava: pulumi.Input<string>;
    /**
     * Global third-party vulnerability detection control defines the default for all processes. Possible Values: `MONITORING_OFF`, `MONITORING_ON`
     */
    globalMonitoringModeTpv?: pulumi.Input<string>;
    /**
     * Vulnerability Analytics can be enabled/disabled per supported technology.
     */
    technologies: pulumi.Input<inputs.VulnerabilitySettingsTechnologies>;
}
