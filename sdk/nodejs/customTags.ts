// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CustomTags extends pulumi.CustomResource {
    /**
     * Get an existing CustomTags resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CustomTagsState, opts?: pulumi.CustomResourceOptions): CustomTags {
        return new CustomTags(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/customTags:CustomTags';

    /**
     * Returns true if the given object is an instance of CustomTags.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CustomTags {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomTags.__pulumiType;
    }

    /**
     * For internal use: current state of tags in JSON format
     */
    public readonly currentState!: pulumi.Output<string>;
    /**
     * Specifies the entities where you want to update tags
     */
    public readonly entitySelector!: pulumi.Output<string>;
    /**
     * The number of monitored entities where the tags have been added.
     */
    public readonly matchedEntities!: pulumi.Output<number>;
    /**
     * Specifies the entities where you want to update tags
     */
    public readonly tags!: pulumi.Output<outputs.CustomTagsTags>;

    /**
     * Create a CustomTags resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CustomTagsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CustomTagsArgs | CustomTagsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CustomTagsState | undefined;
            resourceInputs["currentState"] = state ? state.currentState : undefined;
            resourceInputs["entitySelector"] = state ? state.entitySelector : undefined;
            resourceInputs["matchedEntities"] = state ? state.matchedEntities : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as CustomTagsArgs | undefined;
            if ((!args || args.entitySelector === undefined) && !opts.urn) {
                throw new Error("Missing required property 'entitySelector'");
            }
            if ((!args || args.tags === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tags'");
            }
            resourceInputs["currentState"] = args ? args.currentState : undefined;
            resourceInputs["entitySelector"] = args ? args.entitySelector : undefined;
            resourceInputs["matchedEntities"] = args ? args.matchedEntities : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CustomTags.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CustomTags resources.
 */
export interface CustomTagsState {
    /**
     * For internal use: current state of tags in JSON format
     */
    currentState?: pulumi.Input<string>;
    /**
     * Specifies the entities where you want to update tags
     */
    entitySelector?: pulumi.Input<string>;
    /**
     * The number of monitored entities where the tags have been added.
     */
    matchedEntities?: pulumi.Input<number>;
    /**
     * Specifies the entities where you want to update tags
     */
    tags?: pulumi.Input<inputs.CustomTagsTags>;
}

/**
 * The set of arguments for constructing a CustomTags resource.
 */
export interface CustomTagsArgs {
    /**
     * For internal use: current state of tags in JSON format
     */
    currentState?: pulumi.Input<string>;
    /**
     * Specifies the entities where you want to update tags
     */
    entitySelector: pulumi.Input<string>;
    /**
     * The number of monitored entities where the tags have been added.
     */
    matchedEntities?: pulumi.Input<number>;
    /**
     * Specifies the entities where you want to update tags
     */
    tags: pulumi.Input<inputs.CustomTagsTags>;
}
