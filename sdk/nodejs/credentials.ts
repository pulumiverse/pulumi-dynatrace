// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Credentials extends pulumi.CustomResource {
    /**
     * Get an existing Credentials resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CredentialsState, opts?: pulumi.CustomResourceOptions): Credentials {
        return new Credentials(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/credentials:Credentials';

    /**
     * Returns true if the given object is an instance of Credentials.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Credentials {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Credentials.__pulumiType;
    }

    /**
     * Allow ad-hoc functions to access the credential details (requires the APP_ENGINE scope).
     */
    declare public readonly allowContextlessRequests: pulumi.Output<boolean | undefined>;
    /**
     * The set of entities allowed to use the credential.
     */
    declare public readonly allowedEntities: pulumi.Output<outputs.CredentialsAllowedEntities | undefined>;
    /**
     * The certificate in the string format.
     */
    declare public readonly certificate: pulumi.Output<string | undefined>;
    /**
     * The list contains summary data related to the use of credentials
     *
     * @deprecated `credentialUsageSummary` will be removed in future versions. It's not getting filled anymore, because it's runtime data
     */
    declare public readonly credentialUsageSummaries: pulumi.Output<outputs.CredentialsCredentialUsageSummary[] | undefined>;
    /**
     * A short description of the credentials set
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * External Vault Configuration
     */
    declare public readonly external: pulumi.Output<outputs.CredentialsExternal | undefined>;
    /**
     * The certificate format. Possible values are `PEM`, `PKCS12` and `UNKNOWN`.
     */
    declare public readonly format: pulumi.Output<string | undefined>;
    /**
     * The name of the credentials set
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The credentials set is available to every user (`false`) or to owner only (`true`)
     */
    declare public readonly ownerAccessOnly: pulumi.Output<boolean | undefined>;
    declare public readonly password: pulumi.Output<string | undefined>;
    /**
     * For certificate authentication specifies whether it's public certificate auth (`true`) or not (`false`).
     */
    declare public readonly public: pulumi.Output<boolean | undefined>;
    /**
     * The scope of the credentials set. Possible values are `ALL`, `APP_ENGINE`, `EXTENSION` and `SYNTHETIC`
     *
     * @deprecated Deprecated(v279), please use `scopes` instead.
     */
    declare public readonly scope: pulumi.Output<string | undefined>;
    /**
     * The set of scopes of the credentials set. Possible values are `APP_ENGINE` and `SYNTHETIC`
     */
    declare public readonly scopes: pulumi.Output<string[] | undefined>;
    /**
     * Token in the string format. Specifying a token implies `Token Authentication`.
     */
    declare public readonly token: pulumi.Output<string | undefined>;
    /**
     * The username of the credentials set.
     */
    declare public readonly username: pulumi.Output<string | undefined>;

    /**
     * Create a Credentials resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CredentialsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CredentialsArgs | CredentialsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CredentialsState | undefined;
            resourceInputs["allowContextlessRequests"] = state?.allowContextlessRequests;
            resourceInputs["allowedEntities"] = state?.allowedEntities;
            resourceInputs["certificate"] = state?.certificate;
            resourceInputs["credentialUsageSummaries"] = state?.credentialUsageSummaries;
            resourceInputs["description"] = state?.description;
            resourceInputs["external"] = state?.external;
            resourceInputs["format"] = state?.format;
            resourceInputs["name"] = state?.name;
            resourceInputs["ownerAccessOnly"] = state?.ownerAccessOnly;
            resourceInputs["password"] = state?.password;
            resourceInputs["public"] = state?.public;
            resourceInputs["scope"] = state?.scope;
            resourceInputs["scopes"] = state?.scopes;
            resourceInputs["token"] = state?.token;
            resourceInputs["username"] = state?.username;
        } else {
            const args = argsOrState as CredentialsArgs | undefined;
            resourceInputs["allowContextlessRequests"] = args?.allowContextlessRequests;
            resourceInputs["allowedEntities"] = args?.allowedEntities;
            resourceInputs["certificate"] = args?.certificate;
            resourceInputs["credentialUsageSummaries"] = args?.credentialUsageSummaries;
            resourceInputs["description"] = args?.description;
            resourceInputs["external"] = args?.external;
            resourceInputs["format"] = args?.format;
            resourceInputs["name"] = args?.name;
            resourceInputs["ownerAccessOnly"] = args?.ownerAccessOnly;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["public"] = args?.public;
            resourceInputs["scope"] = args?.scope;
            resourceInputs["scopes"] = args?.scopes;
            resourceInputs["token"] = args?.token ? pulumi.secret(args.token) : undefined;
            resourceInputs["username"] = args?.username ? pulumi.secret(args.username) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password", "token", "username"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Credentials.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Credentials resources.
 */
export interface CredentialsState {
    /**
     * Allow ad-hoc functions to access the credential details (requires the APP_ENGINE scope).
     */
    allowContextlessRequests?: pulumi.Input<boolean>;
    /**
     * The set of entities allowed to use the credential.
     */
    allowedEntities?: pulumi.Input<inputs.CredentialsAllowedEntities>;
    /**
     * The certificate in the string format.
     */
    certificate?: pulumi.Input<string>;
    /**
     * The list contains summary data related to the use of credentials
     *
     * @deprecated `credentialUsageSummary` will be removed in future versions. It's not getting filled anymore, because it's runtime data
     */
    credentialUsageSummaries?: pulumi.Input<pulumi.Input<inputs.CredentialsCredentialUsageSummary>[]>;
    /**
     * A short description of the credentials set
     */
    description?: pulumi.Input<string>;
    /**
     * External Vault Configuration
     */
    external?: pulumi.Input<inputs.CredentialsExternal>;
    /**
     * The certificate format. Possible values are `PEM`, `PKCS12` and `UNKNOWN`.
     */
    format?: pulumi.Input<string>;
    /**
     * The name of the credentials set
     */
    name?: pulumi.Input<string>;
    /**
     * The credentials set is available to every user (`false`) or to owner only (`true`)
     */
    ownerAccessOnly?: pulumi.Input<boolean>;
    password?: pulumi.Input<string>;
    /**
     * For certificate authentication specifies whether it's public certificate auth (`true`) or not (`false`).
     */
    public?: pulumi.Input<boolean>;
    /**
     * The scope of the credentials set. Possible values are `ALL`, `APP_ENGINE`, `EXTENSION` and `SYNTHETIC`
     *
     * @deprecated Deprecated(v279), please use `scopes` instead.
     */
    scope?: pulumi.Input<string>;
    /**
     * The set of scopes of the credentials set. Possible values are `APP_ENGINE` and `SYNTHETIC`
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Token in the string format. Specifying a token implies `Token Authentication`.
     */
    token?: pulumi.Input<string>;
    /**
     * The username of the credentials set.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Credentials resource.
 */
export interface CredentialsArgs {
    /**
     * Allow ad-hoc functions to access the credential details (requires the APP_ENGINE scope).
     */
    allowContextlessRequests?: pulumi.Input<boolean>;
    /**
     * The set of entities allowed to use the credential.
     */
    allowedEntities?: pulumi.Input<inputs.CredentialsAllowedEntities>;
    /**
     * The certificate in the string format.
     */
    certificate?: pulumi.Input<string>;
    /**
     * The list contains summary data related to the use of credentials
     *
     * @deprecated `credentialUsageSummary` will be removed in future versions. It's not getting filled anymore, because it's runtime data
     */
    credentialUsageSummaries?: pulumi.Input<pulumi.Input<inputs.CredentialsCredentialUsageSummary>[]>;
    /**
     * A short description of the credentials set
     */
    description?: pulumi.Input<string>;
    /**
     * External Vault Configuration
     */
    external?: pulumi.Input<inputs.CredentialsExternal>;
    /**
     * The certificate format. Possible values are `PEM`, `PKCS12` and `UNKNOWN`.
     */
    format?: pulumi.Input<string>;
    /**
     * The name of the credentials set
     */
    name?: pulumi.Input<string>;
    /**
     * The credentials set is available to every user (`false`) or to owner only (`true`)
     */
    ownerAccessOnly?: pulumi.Input<boolean>;
    password?: pulumi.Input<string>;
    /**
     * For certificate authentication specifies whether it's public certificate auth (`true`) or not (`false`).
     */
    public?: pulumi.Input<boolean>;
    /**
     * The scope of the credentials set. Possible values are `ALL`, `APP_ENGINE`, `EXTENSION` and `SYNTHETIC`
     *
     * @deprecated Deprecated(v279), please use `scopes` instead.
     */
    scope?: pulumi.Input<string>;
    /**
     * The set of scopes of the credentials set. Possible values are `APP_ENGINE` and `SYNTHETIC`
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Token in the string format. Specifying a token implies `Token Authentication`.
     */
    token?: pulumi.Input<string>;
    /**
     * The username of the credentials set.
     */
    username?: pulumi.Input<string>;
}
