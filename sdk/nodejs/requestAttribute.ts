// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RequestAttribute extends pulumi.CustomResource {
    /**
     * Get an existing RequestAttribute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RequestAttributeState, opts?: pulumi.CustomResourceOptions): RequestAttribute {
        return new RequestAttribute(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/requestAttribute:RequestAttribute';

    /**
     * Returns true if the given object is an instance of RequestAttribute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RequestAttribute {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RequestAttribute.__pulumiType;
    }

    /**
     * Aggregation type for the request values
     */
    public readonly aggregation!: pulumi.Output<string>;
    /**
     * Confidential data flag. Set `true` to treat the captured data as confidential
     */
    public readonly confidential!: pulumi.Output<boolean | undefined>;
    /**
     * The list of data sources
     */
    public readonly dataSources!: pulumi.Output<outputs.RequestAttributeDataSource[] | undefined>;
    /**
     * The data type of the request attribute
     */
    public readonly dataType!: pulumi.Output<string>;
    /**
     * The request attribute is enabled (`true`) or disabled (`false`)
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the request attribute
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * String values transformation.   If the **dataType** is not `string`, set the `Original` here
     */
    public readonly normalization!: pulumi.Output<string>;
    /**
     * Personal data masking flag. Set `true` to skip masking.   Warning: This will potentially access personalized data
     */
    public readonly skipPersonalDataMasking!: pulumi.Output<boolean | undefined>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    public readonly unknowns!: pulumi.Output<string | undefined>;

    /**
     * Create a RequestAttribute resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RequestAttributeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RequestAttributeArgs | RequestAttributeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RequestAttributeState | undefined;
            resourceInputs["aggregation"] = state ? state.aggregation : undefined;
            resourceInputs["confidential"] = state ? state.confidential : undefined;
            resourceInputs["dataSources"] = state ? state.dataSources : undefined;
            resourceInputs["dataType"] = state ? state.dataType : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["normalization"] = state ? state.normalization : undefined;
            resourceInputs["skipPersonalDataMasking"] = state ? state.skipPersonalDataMasking : undefined;
            resourceInputs["unknowns"] = state ? state.unknowns : undefined;
        } else {
            const args = argsOrState as RequestAttributeArgs | undefined;
            if ((!args || args.aggregation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aggregation'");
            }
            if ((!args || args.dataType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataType'");
            }
            if ((!args || args.normalization === undefined) && !opts.urn) {
                throw new Error("Missing required property 'normalization'");
            }
            resourceInputs["aggregation"] = args ? args.aggregation : undefined;
            resourceInputs["confidential"] = args ? args.confidential : undefined;
            resourceInputs["dataSources"] = args ? args.dataSources : undefined;
            resourceInputs["dataType"] = args ? args.dataType : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["normalization"] = args ? args.normalization : undefined;
            resourceInputs["skipPersonalDataMasking"] = args ? args.skipPersonalDataMasking : undefined;
            resourceInputs["unknowns"] = args ? args.unknowns : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RequestAttribute.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RequestAttribute resources.
 */
export interface RequestAttributeState {
    /**
     * Aggregation type for the request values
     */
    aggregation?: pulumi.Input<string>;
    /**
     * Confidential data flag. Set `true` to treat the captured data as confidential
     */
    confidential?: pulumi.Input<boolean>;
    /**
     * The list of data sources
     */
    dataSources?: pulumi.Input<pulumi.Input<inputs.RequestAttributeDataSource>[]>;
    /**
     * The data type of the request attribute
     */
    dataType?: pulumi.Input<string>;
    /**
     * The request attribute is enabled (`true`) or disabled (`false`)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The name of the request attribute
     */
    name?: pulumi.Input<string>;
    /**
     * String values transformation.   If the **dataType** is not `string`, set the `Original` here
     */
    normalization?: pulumi.Input<string>;
    /**
     * Personal data masking flag. Set `true` to skip masking.   Warning: This will potentially access personalized data
     */
    skipPersonalDataMasking?: pulumi.Input<boolean>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RequestAttribute resource.
 */
export interface RequestAttributeArgs {
    /**
     * Aggregation type for the request values
     */
    aggregation: pulumi.Input<string>;
    /**
     * Confidential data flag. Set `true` to treat the captured data as confidential
     */
    confidential?: pulumi.Input<boolean>;
    /**
     * The list of data sources
     */
    dataSources?: pulumi.Input<pulumi.Input<inputs.RequestAttributeDataSource>[]>;
    /**
     * The data type of the request attribute
     */
    dataType: pulumi.Input<string>;
    /**
     * The request attribute is enabled (`true`) or disabled (`false`)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The name of the request attribute
     */
    name?: pulumi.Input<string>;
    /**
     * String values transformation.   If the **dataType** is not `string`, set the `Original` here
     */
    normalization: pulumi.Input<string>;
    /**
     * Personal data masking flag. Set `true` to skip masking.   Warning: This will potentially access personalized data
     */
    skipPersonalDataMasking?: pulumi.Input<boolean>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}
