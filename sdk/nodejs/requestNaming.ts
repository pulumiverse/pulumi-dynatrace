// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RequestNaming extends pulumi.CustomResource {
    /**
     * Get an existing RequestNaming resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RequestNamingState, opts?: pulumi.CustomResourceOptions): RequestNaming {
        return new RequestNaming(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/requestNaming:RequestNaming';

    /**
     * Returns true if the given object is an instance of RequestNaming.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RequestNaming {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RequestNaming.__pulumiType;
    }

    /**
     * The set of conditions for the request naming rule usage. You can specify several conditions. The request has to match
     * **all** the specified conditions for the rule to trigger
     */
    declare public readonly conditions: pulumi.Output<outputs.RequestNamingConditions>;
    /**
     * The rule is enabled (`true`) or disabled (`false`)
     */
    declare public readonly enabled: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the management zones for which this rule should be applied
     */
    declare public readonly managementZones: pulumi.Output<string[] | undefined>;
    /**
     * The name to be assigned to matching requests
     */
    declare public readonly namingPattern: pulumi.Output<string>;
    /**
     * The list of custom placeholders to be used in the naming pattern. It enables you to extract a request attribute value or
     * other request attribute and use it in the request naming pattern.
     */
    declare public readonly placeholders: pulumi.Output<outputs.RequestNamingPlaceholders | undefined>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    declare public readonly unknowns: pulumi.Output<string | undefined>;

    /**
     * Create a RequestNaming resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RequestNamingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RequestNamingArgs | RequestNamingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RequestNamingState | undefined;
            resourceInputs["conditions"] = state?.conditions;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["managementZones"] = state?.managementZones;
            resourceInputs["namingPattern"] = state?.namingPattern;
            resourceInputs["placeholders"] = state?.placeholders;
            resourceInputs["unknowns"] = state?.unknowns;
        } else {
            const args = argsOrState as RequestNamingArgs | undefined;
            if (args?.conditions === undefined && !opts.urn) {
                throw new Error("Missing required property 'conditions'");
            }
            if (args?.namingPattern === undefined && !opts.urn) {
                throw new Error("Missing required property 'namingPattern'");
            }
            resourceInputs["conditions"] = args?.conditions;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["managementZones"] = args?.managementZones;
            resourceInputs["namingPattern"] = args?.namingPattern;
            resourceInputs["placeholders"] = args?.placeholders;
            resourceInputs["unknowns"] = args?.unknowns;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RequestNaming.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RequestNaming resources.
 */
export interface RequestNamingState {
    /**
     * The set of conditions for the request naming rule usage. You can specify several conditions. The request has to match
     * **all** the specified conditions for the rule to trigger
     */
    conditions?: pulumi.Input<inputs.RequestNamingConditions>;
    /**
     * The rule is enabled (`true`) or disabled (`false`)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Specifies the management zones for which this rule should be applied
     */
    managementZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name to be assigned to matching requests
     */
    namingPattern?: pulumi.Input<string>;
    /**
     * The list of custom placeholders to be used in the naming pattern. It enables you to extract a request attribute value or
     * other request attribute and use it in the request naming pattern.
     */
    placeholders?: pulumi.Input<inputs.RequestNamingPlaceholders>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RequestNaming resource.
 */
export interface RequestNamingArgs {
    /**
     * The set of conditions for the request naming rule usage. You can specify several conditions. The request has to match
     * **all** the specified conditions for the rule to trigger
     */
    conditions: pulumi.Input<inputs.RequestNamingConditions>;
    /**
     * The rule is enabled (`true`) or disabled (`false`)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Specifies the management zones for which this rule should be applied
     */
    managementZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name to be assigned to matching requests
     */
    namingPattern: pulumi.Input<string>;
    /**
     * The list of custom placeholders to be used in the naming pattern. It enables you to extract a request attribute value or
     * other request attribute and use it in the request naming pattern.
     */
    placeholders?: pulumi.Input<inputs.RequestNamingPlaceholders>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}
