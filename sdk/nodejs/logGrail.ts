// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LogGrail extends pulumi.CustomResource {
    /**
     * Get an existing LogGrail resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogGrailState, opts?: pulumi.CustomResourceOptions): LogGrail {
        return new LogGrail(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/logGrail:LogGrail';

    /**
     * Returns true if the given object is an instance of LogGrail.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogGrail {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogGrail.__pulumiType;
    }

    /**
     * Activate logs powered by Grail.
     */
    declare public readonly activated: pulumi.Output<boolean>;
    /**
     * Possible Values: `NONE`, `SEVEN_DAYS`, `THIRTY_FIVE_DAYS`
     */
    declare public readonly parallelIngestPeriod: pulumi.Output<string>;

    /**
     * Create a LogGrail resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogGrailArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogGrailArgs | LogGrailState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogGrailState | undefined;
            resourceInputs["activated"] = state?.activated;
            resourceInputs["parallelIngestPeriod"] = state?.parallelIngestPeriod;
        } else {
            const args = argsOrState as LogGrailArgs | undefined;
            if (args?.activated === undefined && !opts.urn) {
                throw new Error("Missing required property 'activated'");
            }
            if (args?.parallelIngestPeriod === undefined && !opts.urn) {
                throw new Error("Missing required property 'parallelIngestPeriod'");
            }
            resourceInputs["activated"] = args?.activated;
            resourceInputs["parallelIngestPeriod"] = args?.parallelIngestPeriod;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogGrail.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LogGrail resources.
 */
export interface LogGrailState {
    /**
     * Activate logs powered by Grail.
     */
    activated?: pulumi.Input<boolean>;
    /**
     * Possible Values: `NONE`, `SEVEN_DAYS`, `THIRTY_FIVE_DAYS`
     */
    parallelIngestPeriod?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LogGrail resource.
 */
export interface LogGrailArgs {
    /**
     * Activate logs powered by Grail.
     */
    activated: pulumi.Input<boolean>;
    /**
     * Possible Values: `NONE`, `SEVEN_DAYS`, `THIRTY_FIVE_DAYS`
     */
    parallelIngestPeriod: pulumi.Input<string>;
}
