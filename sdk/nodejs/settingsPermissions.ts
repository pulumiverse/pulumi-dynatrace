// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SettingsPermissions extends pulumi.CustomResource {
    /**
     * Get an existing SettingsPermissions resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SettingsPermissionsState, opts?: pulumi.CustomResourceOptions): SettingsPermissions {
        return new SettingsPermissions(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/settingsPermissions:SettingsPermissions';

    /**
     * Returns true if the given object is an instance of SettingsPermissions.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SettingsPermissions {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SettingsPermissions.__pulumiType;
    }

    /**
     * Defines the default access level granted to all users in this environment. Allowed values are `read`, `write`, or `none`
     */
    declare public readonly allUsers: pulumi.Output<string | undefined>;
    declare public readonly groups: pulumi.Output<outputs.SettingsPermissionsGroups | undefined>;
    /**
     * The ID of the settings object for which access is to be granted. Here, you can use the `id` attribute of the respective settings object resource
     */
    declare public readonly settingsObjectId: pulumi.Output<string>;
    declare public readonly users: pulumi.Output<outputs.SettingsPermissionsUsers | undefined>;

    /**
     * Create a SettingsPermissions resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SettingsPermissionsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SettingsPermissionsArgs | SettingsPermissionsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SettingsPermissionsState | undefined;
            resourceInputs["allUsers"] = state?.allUsers;
            resourceInputs["groups"] = state?.groups;
            resourceInputs["settingsObjectId"] = state?.settingsObjectId;
            resourceInputs["users"] = state?.users;
        } else {
            const args = argsOrState as SettingsPermissionsArgs | undefined;
            if (args?.settingsObjectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'settingsObjectId'");
            }
            resourceInputs["allUsers"] = args?.allUsers;
            resourceInputs["groups"] = args?.groups;
            resourceInputs["settingsObjectId"] = args?.settingsObjectId;
            resourceInputs["users"] = args?.users;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SettingsPermissions.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SettingsPermissions resources.
 */
export interface SettingsPermissionsState {
    /**
     * Defines the default access level granted to all users in this environment. Allowed values are `read`, `write`, or `none`
     */
    allUsers?: pulumi.Input<string>;
    groups?: pulumi.Input<inputs.SettingsPermissionsGroups>;
    /**
     * The ID of the settings object for which access is to be granted. Here, you can use the `id` attribute of the respective settings object resource
     */
    settingsObjectId?: pulumi.Input<string>;
    users?: pulumi.Input<inputs.SettingsPermissionsUsers>;
}

/**
 * The set of arguments for constructing a SettingsPermissions resource.
 */
export interface SettingsPermissionsArgs {
    /**
     * Defines the default access level granted to all users in this environment. Allowed values are `read`, `write`, or `none`
     */
    allUsers?: pulumi.Input<string>;
    groups?: pulumi.Input<inputs.SettingsPermissionsGroups>;
    /**
     * The ID of the settings object for which access is to be granted. Here, you can use the `id` attribute of the respective settings object resource
     */
    settingsObjectId: pulumi.Input<string>;
    users?: pulumi.Input<inputs.SettingsPermissionsUsers>;
}
