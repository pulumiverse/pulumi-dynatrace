// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Policy extends pulumi.CustomResource {
    /**
     * Get an existing Policy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyState, opts?: pulumi.CustomResourceOptions): Policy {
        return new Policy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/policy:Policy';

    /**
     * Returns true if the given object is an instance of Policy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Policy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Policy.__pulumiType;
    }

    /**
     * The UUID of the cluster in case the policy should be applied to all environments of this cluster.
     */
    declare public readonly cluster: pulumi.Output<string | undefined>;
    /**
     * An optional description text for the policy
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The ID of the environment if the policy should be applied to a specific environment
     */
    declare public readonly environment: pulumi.Output<string | undefined>;
    /**
     * The name of the policy
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The Statement Query of the policy
     */
    declare public readonly statementQuery: pulumi.Output<string>;
    /**
     * Tags for this policy
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;

    /**
     * Create a Policy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyArgs | PolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyState | undefined;
            resourceInputs["cluster"] = state?.cluster;
            resourceInputs["description"] = state?.description;
            resourceInputs["environment"] = state?.environment;
            resourceInputs["name"] = state?.name;
            resourceInputs["statementQuery"] = state?.statementQuery;
            resourceInputs["tags"] = state?.tags;
        } else {
            const args = argsOrState as PolicyArgs | undefined;
            if (args?.statementQuery === undefined && !opts.urn) {
                throw new Error("Missing required property 'statementQuery'");
            }
            resourceInputs["cluster"] = args?.cluster;
            resourceInputs["description"] = args?.description;
            resourceInputs["environment"] = args?.environment;
            resourceInputs["name"] = args?.name;
            resourceInputs["statementQuery"] = args?.statementQuery;
            resourceInputs["tags"] = args?.tags;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Policy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Policy resources.
 */
export interface PolicyState {
    /**
     * The UUID of the cluster in case the policy should be applied to all environments of this cluster.
     */
    cluster?: pulumi.Input<string>;
    /**
     * An optional description text for the policy
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the environment if the policy should be applied to a specific environment
     */
    environment?: pulumi.Input<string>;
    /**
     * The name of the policy
     */
    name?: pulumi.Input<string>;
    /**
     * The Statement Query of the policy
     */
    statementQuery?: pulumi.Input<string>;
    /**
     * Tags for this policy
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Policy resource.
 */
export interface PolicyArgs {
    /**
     * The UUID of the cluster in case the policy should be applied to all environments of this cluster.
     */
    cluster?: pulumi.Input<string>;
    /**
     * An optional description text for the policy
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the environment if the policy should be applied to a specific environment
     */
    environment?: pulumi.Input<string>;
    /**
     * The name of the policy
     */
    name?: pulumi.Input<string>;
    /**
     * The Statement Query of the policy
     */
    statementQuery: pulumi.Input<string>;
    /**
     * Tags for this policy
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
