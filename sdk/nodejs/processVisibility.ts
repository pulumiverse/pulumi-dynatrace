// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ProcessVisibility extends pulumi.CustomResource {
    /**
     * Get an existing ProcessVisibility resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProcessVisibilityState, opts?: pulumi.CustomResourceOptions): ProcessVisibility {
        return new ProcessVisibility(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/processVisibility:ProcessVisibility';

    /**
     * Returns true if the given object is an instance of ProcessVisibility.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProcessVisibility {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProcessVisibility.__pulumiType;
    }

    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The maximum amount of processes that host may report is **100**
     */
    public readonly maxProcesses!: pulumi.Output<number>;
    /**
     * The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
     */
    public readonly scope!: pulumi.Output<string | undefined>;

    /**
     * Create a ProcessVisibility resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProcessVisibilityArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProcessVisibilityArgs | ProcessVisibilityState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProcessVisibilityState | undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["maxProcesses"] = state ? state.maxProcesses : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
        } else {
            const args = argsOrState as ProcessVisibilityArgs | undefined;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.maxProcesses === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxProcesses'");
            }
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["maxProcesses"] = args ? args.maxProcesses : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProcessVisibility.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProcessVisibility resources.
 */
export interface ProcessVisibilityState {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The maximum amount of processes that host may report is **100**
     */
    maxProcesses?: pulumi.Input<number>;
    /**
     * The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
     */
    scope?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProcessVisibility resource.
 */
export interface ProcessVisibilityArgs {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * The maximum amount of processes that host may report is **100**
     */
    maxProcesses: pulumi.Input<number>;
    /**
     * The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
     */
    scope?: pulumi.Input<string>;
}
