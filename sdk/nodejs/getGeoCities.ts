// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The `dynatrace.getGeoCities` data source retrieves the list of cities and their codes based on country and region code.
 *
 * - `countryCode` (String) - The ISO code of the required country
 * - `regionCode` (String) - The code of the required region
 *
 * Geographic regions API: GET regions of a country - https://docs.dynatrace.com/docs/shortlink/api-v2-rum-geographic-regions-get-regions-country
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dynatrace from "@pulumi/dynatrace";
 *
 * const example = dynatrace.getGeoCities({
 *     countryCode: "FR",
 *     regionCode: "BRE",
 * });
 * export const test = example;
 * ```
 */
export function getGeoCities(args: GetGeoCitiesArgs, opts?: pulumi.InvokeOptions): Promise<GetGeoCitiesResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("dynatrace:index/getGeoCities:getGeoCities", {
        "countryCode": args.countryCode,
        "regionCode": args.regionCode,
    }, opts);
}

/**
 * A collection of arguments for invoking getGeoCities.
 */
export interface GetGeoCitiesArgs {
    /**
     * The ISO code of the required country
     */
    countryCode: string;
    /**
     * The code of the required region
     */
    regionCode: string;
}

/**
 * A collection of values returned by getGeoCities.
 */
export interface GetGeoCitiesResult {
    readonly cities: outputs.GetGeoCitiesCity[];
    /**
     * The ISO code of the required country
     */
    readonly countryCode: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The code of the required region
     */
    readonly regionCode: string;
}
/**
 * The `dynatrace.getGeoCities` data source retrieves the list of cities and their codes based on country and region code.
 *
 * - `countryCode` (String) - The ISO code of the required country
 * - `regionCode` (String) - The code of the required region
 *
 * Geographic regions API: GET regions of a country - https://docs.dynatrace.com/docs/shortlink/api-v2-rum-geographic-regions-get-regions-country
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dynatrace from "@pulumi/dynatrace";
 *
 * const example = dynatrace.getGeoCities({
 *     countryCode: "FR",
 *     regionCode: "BRE",
 * });
 * export const test = example;
 * ```
 */
export function getGeoCitiesOutput(args: GetGeoCitiesOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetGeoCitiesResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("dynatrace:index/getGeoCities:getGeoCities", {
        "countryCode": args.countryCode,
        "regionCode": args.regionCode,
    }, opts);
}

/**
 * A collection of arguments for invoking getGeoCities.
 */
export interface GetGeoCitiesOutputArgs {
    /**
     * The ISO code of the required country
     */
    countryCode: pulumi.Input<string>;
    /**
     * The code of the required region
     */
    regionCode: pulumi.Input<string>;
}
