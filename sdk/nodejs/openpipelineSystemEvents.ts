// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OpenpipelineSystemEvents extends pulumi.CustomResource {
    /**
     * Get an existing OpenpipelineSystemEvents resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OpenpipelineSystemEventsState, opts?: pulumi.CustomResourceOptions): OpenpipelineSystemEvents {
        return new OpenpipelineSystemEvents(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/openpipelineSystemEvents:OpenpipelineSystemEvents';

    /**
     * Returns true if the given object is an instance of OpenpipelineSystemEvents.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OpenpipelineSystemEvents {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OpenpipelineSystemEvents.__pulumiType;
    }

    /**
     * List of all ingest sources of the configuration
     */
    declare public readonly endpoints: pulumi.Output<outputs.OpenpipelineSystemEventsEndpoints | undefined>;
    /**
     * List of all pipelines of the configuration
     */
    declare public readonly pipelines: pulumi.Output<outputs.OpenpipelineSystemEventsPipelines | undefined>;
    /**
     * Dynamic routing definition
     */
    declare public readonly routing: pulumi.Output<outputs.OpenpipelineSystemEventsRouting | undefined>;

    /**
     * Create a OpenpipelineSystemEvents resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: OpenpipelineSystemEventsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OpenpipelineSystemEventsArgs | OpenpipelineSystemEventsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OpenpipelineSystemEventsState | undefined;
            resourceInputs["endpoints"] = state?.endpoints;
            resourceInputs["pipelines"] = state?.pipelines;
            resourceInputs["routing"] = state?.routing;
        } else {
            const args = argsOrState as OpenpipelineSystemEventsArgs | undefined;
            resourceInputs["endpoints"] = args?.endpoints;
            resourceInputs["pipelines"] = args?.pipelines;
            resourceInputs["routing"] = args?.routing;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OpenpipelineSystemEvents.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OpenpipelineSystemEvents resources.
 */
export interface OpenpipelineSystemEventsState {
    /**
     * List of all ingest sources of the configuration
     */
    endpoints?: pulumi.Input<inputs.OpenpipelineSystemEventsEndpoints>;
    /**
     * List of all pipelines of the configuration
     */
    pipelines?: pulumi.Input<inputs.OpenpipelineSystemEventsPipelines>;
    /**
     * Dynamic routing definition
     */
    routing?: pulumi.Input<inputs.OpenpipelineSystemEventsRouting>;
}

/**
 * The set of arguments for constructing a OpenpipelineSystemEvents resource.
 */
export interface OpenpipelineSystemEventsArgs {
    /**
     * List of all ingest sources of the configuration
     */
    endpoints?: pulumi.Input<inputs.OpenpipelineSystemEventsEndpoints>;
    /**
     * List of all pipelines of the configuration
     */
    pipelines?: pulumi.Input<inputs.OpenpipelineSystemEventsPipelines>;
    /**
     * Dynamic routing definition
     */
    routing?: pulumi.Input<inputs.OpenpipelineSystemEventsRouting>;
}
