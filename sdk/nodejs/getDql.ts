// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getDql(args: GetDqlArgs, opts?: pulumi.InvokeOptions): Promise<GetDqlResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("dynatrace:index/getDql:getDql", {
        "defaultSamplingRatio": args.defaultSamplingRatio,
        "defaultScanLimitGbytes": args.defaultScanLimitGbytes,
        "defaultTimeframeEnd": args.defaultTimeframeEnd,
        "defaultTimeframeStart": args.defaultTimeframeStart,
        "fetchTimeoutSeconds": args.fetchTimeoutSeconds,
        "locale": args.locale,
        "maxResultBytes": args.maxResultBytes,
        "maxResultRecords": args.maxResultRecords,
        "query": args.query,
        "requestTimeoutMilliseconds": args.requestTimeoutMilliseconds,
        "timezone": args.timezone,
    }, opts);
}

/**
 * A collection of arguments for invoking getDql.
 */
export interface GetDqlArgs {
    /**
     * In case not specified in the DQL string, the sampling ratio defined here is applied. Note that this is only applicable to log queries
     */
    defaultSamplingRatio?: number;
    /**
     * Limit in gigabytes for the amount data that will be scanned during read
     */
    defaultScanLimitGbytes?: number;
    /**
     * The query timeframe 'end' timestamp in ISO-8601 or RFC3339 format. If the timeframe 'start' parameter is missing, the whole timeframe is ignored. Note that if a timeframe is specified within the query string (query) then it has precedence over this query request parameter
     */
    defaultTimeframeEnd?: string;
    /**
     * The query timeframe 'start' timestamp in ISO-8601 or RFC3339 format. If the timeframe 'end' parameter is missing, the whole timeframe is ignored. Note that if a timeframe is specified within the query string (query) then it has precedence over this query request parameter
     */
    defaultTimeframeStart?: string;
    /**
     * The query will stop reading data after reaching the fetch-timeout. The query execution will continue, providing a partial result based on the read data
     */
    fetchTimeoutSeconds?: number;
    /**
     * The query locale. If none specified, then a language/country neutral locale is chosen. The input values take the ISO-639 Language code with an optional ISO-3166 country code appended to it with an underscore. For instance, both values are valid 'en' or 'en_US'
     */
    locale?: string;
    /**
     * The maximum number of result bytes that this query will return
     */
    maxResultBytes?: number;
    /**
     * The maximum number of result records that this query will return
     */
    maxResultRecords?: number;
    /**
     * example: fetch events | filter event.type == "davis" AND davis.status != "CLOSED" | fields timestamp, davis.title, davis.underMaintenance, davis.status | sort timestamp | limit 10
     */
    query: string;
    /**
     * The time a client is willing to wait for the query result. In case the query finishes within the specified timeout, the query result is returned. Otherwise, the requestToken is returned, allowing polling for the result
     */
    requestTimeoutMilliseconds?: number;
    /**
     * The query timezone. If none is specified, UTC is used as fallback. The list of valid input values matches that of the IANA Time Zone Database (TZDB). It accepts values in their canonical names like 'Europe/Paris', the abbreviated version like CET or the UTC offset format like '+01:00'
     */
    timezone?: string;
}

/**
 * A collection of values returned by getDql.
 */
export interface GetDqlResult {
    /**
     * In case not specified in the DQL string, the sampling ratio defined here is applied. Note that this is only applicable to log queries
     */
    readonly defaultSamplingRatio?: number;
    /**
     * Limit in gigabytes for the amount data that will be scanned during read
     */
    readonly defaultScanLimitGbytes?: number;
    /**
     * The query timeframe 'end' timestamp in ISO-8601 or RFC3339 format. If the timeframe 'start' parameter is missing, the whole timeframe is ignored. Note that if a timeframe is specified within the query string (query) then it has precedence over this query request parameter
     */
    readonly defaultTimeframeEnd?: string;
    /**
     * The query timeframe 'start' timestamp in ISO-8601 or RFC3339 format. If the timeframe 'end' parameter is missing, the whole timeframe is ignored. Note that if a timeframe is specified within the query string (query) then it has precedence over this query request parameter
     */
    readonly defaultTimeframeStart?: string;
    /**
     * The query will stop reading data after reaching the fetch-timeout. The query execution will continue, providing a partial result based on the read data
     */
    readonly fetchTimeoutSeconds?: number;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The query locale. If none specified, then a language/country neutral locale is chosen. The input values take the ISO-639 Language code with an optional ISO-3166 country code appended to it with an underscore. For instance, both values are valid 'en' or 'en_US'
     */
    readonly locale?: string;
    /**
     * The maximum number of result bytes that this query will return
     */
    readonly maxResultBytes?: number;
    /**
     * The maximum number of result records that this query will return
     */
    readonly maxResultRecords?: number;
    /**
     * example: fetch events | filter event.type == "davis" AND davis.status != "CLOSED" | fields timestamp, davis.title, davis.underMaintenance, davis.status | sort timestamp | limit 10
     */
    readonly query: string;
    readonly records: string;
    /**
     * The time a client is willing to wait for the query result. In case the query finishes within the specified timeout, the query result is returned. Otherwise, the requestToken is returned, allowing polling for the result
     */
    readonly requestTimeoutMilliseconds?: number;
    /**
     * The query timezone. If none is specified, UTC is used as fallback. The list of valid input values matches that of the IANA Time Zone Database (TZDB). It accepts values in their canonical names like 'Europe/Paris', the abbreviated version like CET or the UTC offset format like '+01:00'
     */
    readonly timezone?: string;
}
export function getDqlOutput(args: GetDqlOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetDqlResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("dynatrace:index/getDql:getDql", {
        "defaultSamplingRatio": args.defaultSamplingRatio,
        "defaultScanLimitGbytes": args.defaultScanLimitGbytes,
        "defaultTimeframeEnd": args.defaultTimeframeEnd,
        "defaultTimeframeStart": args.defaultTimeframeStart,
        "fetchTimeoutSeconds": args.fetchTimeoutSeconds,
        "locale": args.locale,
        "maxResultBytes": args.maxResultBytes,
        "maxResultRecords": args.maxResultRecords,
        "query": args.query,
        "requestTimeoutMilliseconds": args.requestTimeoutMilliseconds,
        "timezone": args.timezone,
    }, opts);
}

/**
 * A collection of arguments for invoking getDql.
 */
export interface GetDqlOutputArgs {
    /**
     * In case not specified in the DQL string, the sampling ratio defined here is applied. Note that this is only applicable to log queries
     */
    defaultSamplingRatio?: pulumi.Input<number>;
    /**
     * Limit in gigabytes for the amount data that will be scanned during read
     */
    defaultScanLimitGbytes?: pulumi.Input<number>;
    /**
     * The query timeframe 'end' timestamp in ISO-8601 or RFC3339 format. If the timeframe 'start' parameter is missing, the whole timeframe is ignored. Note that if a timeframe is specified within the query string (query) then it has precedence over this query request parameter
     */
    defaultTimeframeEnd?: pulumi.Input<string>;
    /**
     * The query timeframe 'start' timestamp in ISO-8601 or RFC3339 format. If the timeframe 'end' parameter is missing, the whole timeframe is ignored. Note that if a timeframe is specified within the query string (query) then it has precedence over this query request parameter
     */
    defaultTimeframeStart?: pulumi.Input<string>;
    /**
     * The query will stop reading data after reaching the fetch-timeout. The query execution will continue, providing a partial result based on the read data
     */
    fetchTimeoutSeconds?: pulumi.Input<number>;
    /**
     * The query locale. If none specified, then a language/country neutral locale is chosen. The input values take the ISO-639 Language code with an optional ISO-3166 country code appended to it with an underscore. For instance, both values are valid 'en' or 'en_US'
     */
    locale?: pulumi.Input<string>;
    /**
     * The maximum number of result bytes that this query will return
     */
    maxResultBytes?: pulumi.Input<number>;
    /**
     * The maximum number of result records that this query will return
     */
    maxResultRecords?: pulumi.Input<number>;
    /**
     * example: fetch events | filter event.type == "davis" AND davis.status != "CLOSED" | fields timestamp, davis.title, davis.underMaintenance, davis.status | sort timestamp | limit 10
     */
    query: pulumi.Input<string>;
    /**
     * The time a client is willing to wait for the query result. In case the query finishes within the specified timeout, the query result is returned. Otherwise, the requestToken is returned, allowing polling for the result
     */
    requestTimeoutMilliseconds?: pulumi.Input<number>;
    /**
     * The query timezone. If none is specified, UTC is used as fallback. The list of valid input values matches that of the IANA Time Zone Database (TZDB). It accepts values in their canonical names like 'Europe/Paris', the abbreviated version like CET or the UTC offset format like '+01:00'
     */
    timezone?: pulumi.Input<string>;
}
