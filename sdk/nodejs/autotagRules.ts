// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * > `dynatrace.AutotagV2` is the primary resource to manage auto tags. This particular resource allows you to manage a subset of tags of a given auto tag ID. The benefit of this is that it allows the flexibility of multiple users to manage the same automatically applied tag.
 *
 * > This resource requires the API token scopes **Read settings** (`settings.read`) and **Write settings** (`settings.write`)
 *
 * ## Dynatrace Documentation
 *
 * - Define and apply tags - https://www.dynatrace.com/support/help/how-to-use-dynatrace/tags-and-metadata/setup/how-to-define-tags
 *
 * - Settings API - https://www.dynatrace.com/support/help/dynatrace-api/environment-api/settings (schemaId: `builtin:tags.auto-tagging`)
 *
 * The full documentation of the export feature is available [here](https://dt-url.net/h203qmc).
 *
 * ## Resource Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dynatrace from "@pulumiverse/dynatrace";
 *
 * const sampleAutotagV2 = new dynatrace.AutotagV2("sampleAutotagV2", {rulesMaintainedExternally: true});
 * //Be careful when maintaining `dynatrace_autotag_rules` in separate modules.
 * //Do not execute `pulumi up` in parallel when several modules contain 
 * //`dynatrace_autotag_rules` referring to the same `dynatrace_autotag_v2`.
 * const sampleAutotagRules = new dynatrace.AutotagRules("sampleAutotagRules", {
 *     autoTagId: sampleAutotagV2.id,
 *     rules: {
 *         rules: [{
 *             type: "SELECTOR",
 *             enabled: true,
 *             entitySelector: "type(SERVICE),tag(sample)",
 *             valueFormat: "disabled",
 *             valueNormalization: "Leave text as-is",
 *         }],
 *     },
 * });
 * ```
 */
export class AutotagRules extends pulumi.CustomResource {
    /**
     * Get an existing AutotagRules resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AutotagRulesState, opts?: pulumi.CustomResourceOptions): AutotagRules {
        return new AutotagRules(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/autotagRules:AutotagRules';

    /**
     * Returns true if the given object is an instance of AutotagRules.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AutotagRules {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AutotagRules.__pulumiType;
    }

    /**
     * Automatically applied tag ID
     */
    declare public readonly autoTagId: pulumi.Output<string>;
    /**
     * For internal use: current state of rules in JSON format
     */
    declare public readonly currentState: pulumi.Output<string>;
    /**
     * Rules
     */
    declare public readonly rules: pulumi.Output<outputs.AutotagRulesRules | undefined>;

    /**
     * Create a AutotagRules resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AutotagRulesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AutotagRulesArgs | AutotagRulesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AutotagRulesState | undefined;
            resourceInputs["autoTagId"] = state?.autoTagId;
            resourceInputs["currentState"] = state?.currentState;
            resourceInputs["rules"] = state?.rules;
        } else {
            const args = argsOrState as AutotagRulesArgs | undefined;
            if (args?.autoTagId === undefined && !opts.urn) {
                throw new Error("Missing required property 'autoTagId'");
            }
            resourceInputs["autoTagId"] = args?.autoTagId;
            resourceInputs["currentState"] = args?.currentState;
            resourceInputs["rules"] = args?.rules;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AutotagRules.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AutotagRules resources.
 */
export interface AutotagRulesState {
    /**
     * Automatically applied tag ID
     */
    autoTagId?: pulumi.Input<string>;
    /**
     * For internal use: current state of rules in JSON format
     */
    currentState?: pulumi.Input<string>;
    /**
     * Rules
     */
    rules?: pulumi.Input<inputs.AutotagRulesRules>;
}

/**
 * The set of arguments for constructing a AutotagRules resource.
 */
export interface AutotagRulesArgs {
    /**
     * Automatically applied tag ID
     */
    autoTagId: pulumi.Input<string>;
    /**
     * For internal use: current state of rules in JSON format
     */
    currentState?: pulumi.Input<string>;
    /**
     * Rules
     */
    rules?: pulumi.Input<inputs.AutotagRulesRules>;
}
