// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ProcessGroupSimpleDetection extends pulumi.CustomResource {
    /**
     * Get an existing ProcessGroupSimpleDetection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProcessGroupSimpleDetectionState, opts?: pulumi.CustomResourceOptions): ProcessGroupSimpleDetection {
        return new ProcessGroupSimpleDetection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/processGroupSimpleDetection:ProcessGroupSimpleDetection';

    /**
     * Returns true if the given object is an instance of ProcessGroupSimpleDetection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProcessGroupSimpleDetection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProcessGroupSimpleDetection.__pulumiType;
    }

    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * If Dynatrace detects this property at startup of a process, it will use its value to identify process groups more granular.
     */
    declare public readonly groupIdentifier: pulumi.Output<string>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
     */
    declare public readonly insertAfter: pulumi.Output<string>;
    /**
     * Use a variable to identify instances within a process group.
     */
    declare public readonly instanceIdentifier: pulumi.Output<string>;
    /**
     * Note: Not all types can be detected at startup.
     */
    declare public readonly processType: pulumi.Output<string | undefined>;
    /**
     * Possible Values: `Prop`, `Env`
     */
    declare public readonly ruleType: pulumi.Output<string>;

    /**
     * Create a ProcessGroupSimpleDetection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProcessGroupSimpleDetectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProcessGroupSimpleDetectionArgs | ProcessGroupSimpleDetectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProcessGroupSimpleDetectionState | undefined;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["groupIdentifier"] = state?.groupIdentifier;
            resourceInputs["insertAfter"] = state?.insertAfter;
            resourceInputs["instanceIdentifier"] = state?.instanceIdentifier;
            resourceInputs["processType"] = state?.processType;
            resourceInputs["ruleType"] = state?.ruleType;
        } else {
            const args = argsOrState as ProcessGroupSimpleDetectionArgs | undefined;
            if (args?.enabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if (args?.groupIdentifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'groupIdentifier'");
            }
            if (args?.instanceIdentifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'instanceIdentifier'");
            }
            if (args?.ruleType === undefined && !opts.urn) {
                throw new Error("Missing required property 'ruleType'");
            }
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["groupIdentifier"] = args?.groupIdentifier;
            resourceInputs["insertAfter"] = args?.insertAfter;
            resourceInputs["instanceIdentifier"] = args?.instanceIdentifier;
            resourceInputs["processType"] = args?.processType;
            resourceInputs["ruleType"] = args?.ruleType;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProcessGroupSimpleDetection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProcessGroupSimpleDetection resources.
 */
export interface ProcessGroupSimpleDetectionState {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * If Dynatrace detects this property at startup of a process, it will use its value to identify process groups more granular.
     */
    groupIdentifier?: pulumi.Input<string>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
     */
    insertAfter?: pulumi.Input<string>;
    /**
     * Use a variable to identify instances within a process group.
     */
    instanceIdentifier?: pulumi.Input<string>;
    /**
     * Note: Not all types can be detected at startup.
     */
    processType?: pulumi.Input<string>;
    /**
     * Possible Values: `Prop`, `Env`
     */
    ruleType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProcessGroupSimpleDetection resource.
 */
export interface ProcessGroupSimpleDetectionArgs {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * If Dynatrace detects this property at startup of a process, it will use its value to identify process groups more granular.
     */
    groupIdentifier: pulumi.Input<string>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
     */
    insertAfter?: pulumi.Input<string>;
    /**
     * Use a variable to identify instances within a process group.
     */
    instanceIdentifier: pulumi.Input<string>;
    /**
     * Note: Not all types can be detected at startup.
     */
    processType?: pulumi.Input<string>;
    /**
     * Possible Values: `Prop`, `Env`
     */
    ruleType: pulumi.Input<string>;
}
