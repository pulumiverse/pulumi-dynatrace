// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * > To utilize this data source, please define the environment variables `DT_CLIENT_ID`, `DT_CLIENT_SECRET`, `DT_ACCOUNT_ID` with an OAuth client including the following permissions: **View SLOs** (`slo:slos:read`) and **View SLO objective templates** (`slo:objective-templates:read`).
 *
 * The SLO objective template data source allows the ID to be retrieved by its name.
 *
 * - `name` (String) Name of the SLO objective template
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dynatrace from "@pulumi/dynatrace";
 * import * as dynatrace from "@pulumiverse/dynatrace";
 *
 * const hostCPU = dynatrace.getPlatformSloTemplate({
 *     name: "Host CPU usage utilization",
 * });
 * const _name_ = new dynatrace.PlatformSlo("#name#", {
 *     description: "Measures the CPU usage of selected hosts over time.",
 *     criteria: {
 *         criteriaDetails: [{
 *             target: 95,
 *             timeframeFrom: "now-7d",
 *             timeframeTo: "now",
 *         }],
 *     },
 *     sliReference: {
 *         templateId: hostCPU.then(hostCPU => hostCPU.id),
 *         variables: {
 *             sliReferenceVariables: [{
 *                 name: "hosts",
 *                 value: "\"HOST-1234567890000000\"",
 *             }],
 *         },
 *     },
 * });
 * ```
 */
export function getPlatformSloTemplate(args: GetPlatformSloTemplateArgs, opts?: pulumi.InvokeOptions): Promise<GetPlatformSloTemplateResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("dynatrace:index/getPlatformSloTemplate:getPlatformSloTemplate", {
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getPlatformSloTemplate.
 */
export interface GetPlatformSloTemplateArgs {
    /**
     * Name of the SLO objective template
     */
    name: string;
}

/**
 * A collection of values returned by getPlatformSloTemplate.
 */
export interface GetPlatformSloTemplateResult {
    /**
     * ID of the SLO objective template
     */
    readonly id: string;
    /**
     * Name of the SLO objective template
     */
    readonly name: string;
}
/**
 * > To utilize this data source, please define the environment variables `DT_CLIENT_ID`, `DT_CLIENT_SECRET`, `DT_ACCOUNT_ID` with an OAuth client including the following permissions: **View SLOs** (`slo:slos:read`) and **View SLO objective templates** (`slo:objective-templates:read`).
 *
 * The SLO objective template data source allows the ID to be retrieved by its name.
 *
 * - `name` (String) Name of the SLO objective template
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dynatrace from "@pulumi/dynatrace";
 * import * as dynatrace from "@pulumiverse/dynatrace";
 *
 * const hostCPU = dynatrace.getPlatformSloTemplate({
 *     name: "Host CPU usage utilization",
 * });
 * const _name_ = new dynatrace.PlatformSlo("#name#", {
 *     description: "Measures the CPU usage of selected hosts over time.",
 *     criteria: {
 *         criteriaDetails: [{
 *             target: 95,
 *             timeframeFrom: "now-7d",
 *             timeframeTo: "now",
 *         }],
 *     },
 *     sliReference: {
 *         templateId: hostCPU.then(hostCPU => hostCPU.id),
 *         variables: {
 *             sliReferenceVariables: [{
 *                 name: "hosts",
 *                 value: "\"HOST-1234567890000000\"",
 *             }],
 *         },
 *     },
 * });
 * ```
 */
export function getPlatformSloTemplateOutput(args: GetPlatformSloTemplateOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetPlatformSloTemplateResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("dynatrace:index/getPlatformSloTemplate:getPlatformSloTemplate", {
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getPlatformSloTemplate.
 */
export interface GetPlatformSloTemplateOutputArgs {
    /**
     * Name of the SLO objective template
     */
    name: pulumi.Input<string>;
}
