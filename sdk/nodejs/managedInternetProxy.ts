// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * > This resource requires one of the cluster API token scopes **Control Management** (`ControlManagement`), **Service Provider API** (`ServiceProviderAPI`), or **Unattended Install** (`UnattendedInstall`)
 *
 * ## Dynatrace Documentation
 *
 * - Can I use a proxy for internet access? - https://www.dynatrace.com/support/help/managed-cluster/configuration/can-i-use-a-proxy-for-internet-access
 *
 * - Cluster API v1 - https://www.dynatrace.com/support/help/managed-cluster/cluster-api/cluster-api-v1
 *
 * ## Resource Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dynatrace from "@pulumiverse/dynatrace";
 *
 * const test = new dynatrace.ManagedInternetProxy("test", {
 *     nonProxyHosts: ["string"],
 *     password: "string",
 *     port: 65535,
 *     scheme: "http",
 *     server: "zAOE-GV81/65oVgaIlPYTCADGSPFJ9ZqXYNGbxn97dbq:flAI2E8e8bfOvlmaGu",
 *     user: "string",
 * });
 * ```
 */
export class ManagedInternetProxy extends pulumi.CustomResource {
    /**
     * Get an existing ManagedInternetProxy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagedInternetProxyState, opts?: pulumi.CustomResourceOptions): ManagedInternetProxy {
        return new ManagedInternetProxy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/managedInternetProxy:ManagedInternetProxy';

    /**
     * Returns true if the given object is an instance of ManagedInternetProxy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagedInternetProxy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagedInternetProxy.__pulumiType;
    }

    /**
     * Definition of hosts for which proxy won't be used. You can define multiple hosts. Each host can start or end with wildcard '*' for instance to match whole domain.
     */
    public readonly nonProxyHosts!: pulumi.Output<string[] | undefined>;
    /**
     * Password of proxy server, null means do not change previous value
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Port of proxy server
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * Protocol which proxy server uses
     */
    public readonly scheme!: pulumi.Output<string>;
    /**
     * Address (either IP or Hostname) of proxy server
     */
    public readonly server!: pulumi.Output<string>;
    /**
     * User of proxy server, null means do not change previous value
     */
    public readonly user!: pulumi.Output<string | undefined>;

    /**
     * Create a ManagedInternetProxy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagedInternetProxyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagedInternetProxyArgs | ManagedInternetProxyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagedInternetProxyState | undefined;
            resourceInputs["nonProxyHosts"] = state ? state.nonProxyHosts : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["scheme"] = state ? state.scheme : undefined;
            resourceInputs["server"] = state ? state.server : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
        } else {
            const args = argsOrState as ManagedInternetProxyArgs | undefined;
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.scheme === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scheme'");
            }
            if ((!args || args.server === undefined) && !opts.urn) {
                throw new Error("Missing required property 'server'");
            }
            resourceInputs["nonProxyHosts"] = args ? args.nonProxyHosts : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["scheme"] = args ? args.scheme : undefined;
            resourceInputs["server"] = args ? args.server : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ManagedInternetProxy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ManagedInternetProxy resources.
 */
export interface ManagedInternetProxyState {
    /**
     * Definition of hosts for which proxy won't be used. You can define multiple hosts. Each host can start or end with wildcard '*' for instance to match whole domain.
     */
    nonProxyHosts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Password of proxy server, null means do not change previous value
     */
    password?: pulumi.Input<string>;
    /**
     * Port of proxy server
     */
    port?: pulumi.Input<number>;
    /**
     * Protocol which proxy server uses
     */
    scheme?: pulumi.Input<string>;
    /**
     * Address (either IP or Hostname) of proxy server
     */
    server?: pulumi.Input<string>;
    /**
     * User of proxy server, null means do not change previous value
     */
    user?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ManagedInternetProxy resource.
 */
export interface ManagedInternetProxyArgs {
    /**
     * Definition of hosts for which proxy won't be used. You can define multiple hosts. Each host can start or end with wildcard '*' for instance to match whole domain.
     */
    nonProxyHosts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Password of proxy server, null means do not change previous value
     */
    password?: pulumi.Input<string>;
    /**
     * Port of proxy server
     */
    port: pulumi.Input<number>;
    /**
     * Protocol which proxy server uses
     */
    scheme: pulumi.Input<string>;
    /**
     * Address (either IP or Hostname) of proxy server
     */
    server: pulumi.Input<string>;
    /**
     * User of proxy server, null means do not change previous value
     */
    user?: pulumi.Input<string>;
}
