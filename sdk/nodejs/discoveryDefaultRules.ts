// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DiscoveryDefaultRules extends pulumi.CustomResource {
    /**
     * Get an existing DiscoveryDefaultRules resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DiscoveryDefaultRulesState, opts?: pulumi.CustomResourceOptions): DiscoveryDefaultRules {
        return new DiscoveryDefaultRules(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/discoveryDefaultRules:DiscoveryDefaultRules';

    /**
     * Returns true if the given object is an instance of DiscoveryDefaultRules.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DiscoveryDefaultRules {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DiscoveryDefaultRules.__pulumiType;
    }

    /**
     * Rule:
     */
    declare public readonly rule: pulumi.Output<outputs.DiscoveryDefaultRulesRule>;
    /**
     * Settings:
     */
    declare public readonly settings: pulumi.Output<outputs.DiscoveryDefaultRulesSettings>;

    /**
     * Create a DiscoveryDefaultRules resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DiscoveryDefaultRulesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DiscoveryDefaultRulesArgs | DiscoveryDefaultRulesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DiscoveryDefaultRulesState | undefined;
            resourceInputs["rule"] = state?.rule;
            resourceInputs["settings"] = state?.settings;
        } else {
            const args = argsOrState as DiscoveryDefaultRulesArgs | undefined;
            if (args?.rule === undefined && !opts.urn) {
                throw new Error("Missing required property 'rule'");
            }
            if (args?.settings === undefined && !opts.urn) {
                throw new Error("Missing required property 'settings'");
            }
            resourceInputs["rule"] = args?.rule;
            resourceInputs["settings"] = args?.settings;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DiscoveryDefaultRules.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DiscoveryDefaultRules resources.
 */
export interface DiscoveryDefaultRulesState {
    /**
     * Rule:
     */
    rule?: pulumi.Input<inputs.DiscoveryDefaultRulesRule>;
    /**
     * Settings:
     */
    settings?: pulumi.Input<inputs.DiscoveryDefaultRulesSettings>;
}

/**
 * The set of arguments for constructing a DiscoveryDefaultRules resource.
 */
export interface DiscoveryDefaultRulesArgs {
    /**
     * Rule:
     */
    rule: pulumi.Input<inputs.DiscoveryDefaultRulesRule>;
    /**
     * Settings:
     */
    settings: pulumi.Input<inputs.DiscoveryDefaultRulesSettings>;
}
