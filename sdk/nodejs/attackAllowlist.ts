// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AttackAllowlist extends pulumi.CustomResource {
    /**
     * Get an existing AttackAllowlist resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AttackAllowlistState, opts?: pulumi.CustomResourceOptions): AttackAllowlist {
        return new AttackAllowlist(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/attackAllowlist:AttackAllowlist';

    /**
     * Returns true if the given object is an instance of AttackAllowlist.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AttackAllowlist {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AttackAllowlist.__pulumiType;
    }

    /**
     * Step 1: Define attack control for chosen criteria
     */
    public readonly attackHandling!: pulumi.Output<outputs.AttackAllowlistAttackHandling>;
    /**
     * Step 1: Define criteria. Please specify at least one of source IP or attack pattern.
     *
     * @deprecated The `criteria` attribute has been deprecated, please use the `rules` and `resourceAttributeConditions` attributes instead.
     */
    public readonly criteria!: pulumi.Output<outputs.AttackAllowlistCriteria | undefined>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
     */
    public readonly insertAfter!: pulumi.Output<string>;
    /**
     * Step 4: Leave comment (optional)
     */
    public readonly metadata!: pulumi.Output<outputs.AttackAllowlistMetadata>;
    /**
     * When you add multiple conditions, the rule applies if all conditions apply.
     */
    public readonly resourceAttributeConditions!: pulumi.Output<outputs.AttackAllowlistResourceAttributeConditions | undefined>;
    /**
     * Rule name
     */
    public readonly ruleName!: pulumi.Output<string | undefined>;
    /**
     * Provide conditions that must be met by the detection finding you want to allowlist.
     */
    public readonly rules!: pulumi.Output<outputs.AttackAllowlistRules>;

    /**
     * Create a AttackAllowlist resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AttackAllowlistArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AttackAllowlistArgs | AttackAllowlistState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AttackAllowlistState | undefined;
            resourceInputs["attackHandling"] = state ? state.attackHandling : undefined;
            resourceInputs["criteria"] = state ? state.criteria : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["insertAfter"] = state ? state.insertAfter : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["resourceAttributeConditions"] = state ? state.resourceAttributeConditions : undefined;
            resourceInputs["ruleName"] = state ? state.ruleName : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
        } else {
            const args = argsOrState as AttackAllowlistArgs | undefined;
            if ((!args || args.attackHandling === undefined) && !opts.urn) {
                throw new Error("Missing required property 'attackHandling'");
            }
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.metadata === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metadata'");
            }
            if ((!args || args.rules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            resourceInputs["attackHandling"] = args ? args.attackHandling : undefined;
            resourceInputs["criteria"] = args ? args.criteria : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["insertAfter"] = args ? args.insertAfter : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["resourceAttributeConditions"] = args ? args.resourceAttributeConditions : undefined;
            resourceInputs["ruleName"] = args ? args.ruleName : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AttackAllowlist.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AttackAllowlist resources.
 */
export interface AttackAllowlistState {
    /**
     * Step 1: Define attack control for chosen criteria
     */
    attackHandling?: pulumi.Input<inputs.AttackAllowlistAttackHandling>;
    /**
     * Step 1: Define criteria. Please specify at least one of source IP or attack pattern.
     *
     * @deprecated The `criteria` attribute has been deprecated, please use the `rules` and `resourceAttributeConditions` attributes instead.
     */
    criteria?: pulumi.Input<inputs.AttackAllowlistCriteria>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
     */
    insertAfter?: pulumi.Input<string>;
    /**
     * Step 4: Leave comment (optional)
     */
    metadata?: pulumi.Input<inputs.AttackAllowlistMetadata>;
    /**
     * When you add multiple conditions, the rule applies if all conditions apply.
     */
    resourceAttributeConditions?: pulumi.Input<inputs.AttackAllowlistResourceAttributeConditions>;
    /**
     * Rule name
     */
    ruleName?: pulumi.Input<string>;
    /**
     * Provide conditions that must be met by the detection finding you want to allowlist.
     */
    rules?: pulumi.Input<inputs.AttackAllowlistRules>;
}

/**
 * The set of arguments for constructing a AttackAllowlist resource.
 */
export interface AttackAllowlistArgs {
    /**
     * Step 1: Define attack control for chosen criteria
     */
    attackHandling: pulumi.Input<inputs.AttackAllowlistAttackHandling>;
    /**
     * Step 1: Define criteria. Please specify at least one of source IP or attack pattern.
     *
     * @deprecated The `criteria` attribute has been deprecated, please use the `rules` and `resourceAttributeConditions` attributes instead.
     */
    criteria?: pulumi.Input<inputs.AttackAllowlistCriteria>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
     */
    insertAfter?: pulumi.Input<string>;
    /**
     * Step 4: Leave comment (optional)
     */
    metadata: pulumi.Input<inputs.AttackAllowlistMetadata>;
    /**
     * When you add multiple conditions, the rule applies if all conditions apply.
     */
    resourceAttributeConditions?: pulumi.Input<inputs.AttackAllowlistResourceAttributeConditions>;
    /**
     * Rule name
     */
    ruleName?: pulumi.Input<string>;
    /**
     * Provide conditions that must be met by the detection finding you want to allowlist.
     */
    rules: pulumi.Input<inputs.AttackAllowlistRules>;
}
