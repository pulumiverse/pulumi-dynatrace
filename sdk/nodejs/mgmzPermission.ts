// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class MgmzPermission extends pulumi.CustomResource {
    /**
     * Get an existing MgmzPermission resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MgmzPermissionState, opts?: pulumi.CustomResourceOptions): MgmzPermission {
        return new MgmzPermission(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/mgmzPermission:MgmzPermission';

    /**
     * Returns true if the given object is an instance of MgmzPermission.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MgmzPermission {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MgmzPermission.__pulumiType;
    }

    /**
     * The UUID of the environment
     */
    public readonly environment!: pulumi.Output<string>;
    /**
     * The ID of the group the permissions are valid for. You may refer to the id of a resource `dynatrace.UserGroup` here
     */
    public readonly group!: pulumi.Output<string>;
    /**
     * The ID of the management zone the permissions are valid for. When referring to resource `dynatrace.ManagementZoneV2` or data source `dynatrace.ManagementZone` you need to refer to the attribute `legacyId`.
     */
    public readonly managementZone!: pulumi.Output<string>;
    /**
     * The permissions to assign for that management zone. Allowed values are `DEMO_USER`, `LOG_VIEWER`, `MANAGE_SECURITY_PROBLEMS`, `MANAGE_SETTINGS`, `REPLAY_SESSION_DATA`, `REPLAY_SESSION_DATA_WITHOUT_MASKING`, `VIEWER`, `VIEW_SENSITIVE_REQUEST_DATA`.
     * Note: In order to produce non-empty plans specifying at least the permission `VIEWER` is recommended. Your Dynatrace Cluster will enforce that permission, regardless of whether it has been specified or not.
     */
    public readonly permissions!: pulumi.Output<string[]>;

    /**
     * Create a MgmzPermission resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MgmzPermissionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MgmzPermissionArgs | MgmzPermissionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MgmzPermissionState | undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["managementZone"] = state ? state.managementZone : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
        } else {
            const args = argsOrState as MgmzPermissionArgs | undefined;
            if ((!args || args.environment === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            if ((!args || args.group === undefined) && !opts.urn) {
                throw new Error("Missing required property 'group'");
            }
            if ((!args || args.managementZone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managementZone'");
            }
            if ((!args || args.permissions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permissions'");
            }
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["managementZone"] = args ? args.managementZone : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MgmzPermission.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MgmzPermission resources.
 */
export interface MgmzPermissionState {
    /**
     * The UUID of the environment
     */
    environment?: pulumi.Input<string>;
    /**
     * The ID of the group the permissions are valid for. You may refer to the id of a resource `dynatrace.UserGroup` here
     */
    group?: pulumi.Input<string>;
    /**
     * The ID of the management zone the permissions are valid for. When referring to resource `dynatrace.ManagementZoneV2` or data source `dynatrace.ManagementZone` you need to refer to the attribute `legacyId`.
     */
    managementZone?: pulumi.Input<string>;
    /**
     * The permissions to assign for that management zone. Allowed values are `DEMO_USER`, `LOG_VIEWER`, `MANAGE_SECURITY_PROBLEMS`, `MANAGE_SETTINGS`, `REPLAY_SESSION_DATA`, `REPLAY_SESSION_DATA_WITHOUT_MASKING`, `VIEWER`, `VIEW_SENSITIVE_REQUEST_DATA`.
     * Note: In order to produce non-empty plans specifying at least the permission `VIEWER` is recommended. Your Dynatrace Cluster will enforce that permission, regardless of whether it has been specified or not.
     */
    permissions?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a MgmzPermission resource.
 */
export interface MgmzPermissionArgs {
    /**
     * The UUID of the environment
     */
    environment: pulumi.Input<string>;
    /**
     * The ID of the group the permissions are valid for. You may refer to the id of a resource `dynatrace.UserGroup` here
     */
    group: pulumi.Input<string>;
    /**
     * The ID of the management zone the permissions are valid for. When referring to resource `dynatrace.ManagementZoneV2` or data source `dynatrace.ManagementZone` you need to refer to the attribute `legacyId`.
     */
    managementZone: pulumi.Input<string>;
    /**
     * The permissions to assign for that management zone. Allowed values are `DEMO_USER`, `LOG_VIEWER`, `MANAGE_SECURITY_PROBLEMS`, `MANAGE_SETTINGS`, `REPLAY_SESSION_DATA`, `REPLAY_SESSION_DATA_WITHOUT_MASKING`, `VIEWER`, `VIEW_SENSITIVE_REQUEST_DATA`.
     * Note: In order to produce non-empty plans specifying at least the permission `VIEWER` is recommended. Your Dynatrace Cluster will enforce that permission, regardless of whether it has been specified or not.
     */
    permissions: pulumi.Input<pulumi.Input<string>[]>;
}
