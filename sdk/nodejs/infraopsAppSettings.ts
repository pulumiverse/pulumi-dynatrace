// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class InfraopsAppSettings extends pulumi.CustomResource {
    /**
     * Get an existing InfraopsAppSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InfraopsAppSettingsState, opts?: pulumi.CustomResourceOptions): InfraopsAppSettings {
        return new InfraopsAppSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/infraopsAppSettings:InfraopsAppSettings';

    /**
     * Returns true if the given object is an instance of InfraopsAppSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InfraopsAppSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InfraopsAppSettings.__pulumiType;
    }

    /**
     * (Required v305+) The threshold at which a network device interface is deemed to be saturated.
     */
    public readonly interfaceSaturationThreshold!: pulumi.Output<number | undefined>;
    /**
     * When set to true, the app will display monitoring candidates in the Hosts table
     */
    public readonly showMonitoringCandidates!: pulumi.Output<boolean>;
    /**
     * When set to true, the app will display app only hosts in the Hosts table
     */
    public readonly showStandaloneHosts!: pulumi.Output<boolean>;

    /**
     * Create a InfraopsAppSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InfraopsAppSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InfraopsAppSettingsArgs | InfraopsAppSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InfraopsAppSettingsState | undefined;
            resourceInputs["interfaceSaturationThreshold"] = state ? state.interfaceSaturationThreshold : undefined;
            resourceInputs["showMonitoringCandidates"] = state ? state.showMonitoringCandidates : undefined;
            resourceInputs["showStandaloneHosts"] = state ? state.showStandaloneHosts : undefined;
        } else {
            const args = argsOrState as InfraopsAppSettingsArgs | undefined;
            if ((!args || args.showMonitoringCandidates === undefined) && !opts.urn) {
                throw new Error("Missing required property 'showMonitoringCandidates'");
            }
            if ((!args || args.showStandaloneHosts === undefined) && !opts.urn) {
                throw new Error("Missing required property 'showStandaloneHosts'");
            }
            resourceInputs["interfaceSaturationThreshold"] = args ? args.interfaceSaturationThreshold : undefined;
            resourceInputs["showMonitoringCandidates"] = args ? args.showMonitoringCandidates : undefined;
            resourceInputs["showStandaloneHosts"] = args ? args.showStandaloneHosts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InfraopsAppSettings.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InfraopsAppSettings resources.
 */
export interface InfraopsAppSettingsState {
    /**
     * (Required v305+) The threshold at which a network device interface is deemed to be saturated.
     */
    interfaceSaturationThreshold?: pulumi.Input<number>;
    /**
     * When set to true, the app will display monitoring candidates in the Hosts table
     */
    showMonitoringCandidates?: pulumi.Input<boolean>;
    /**
     * When set to true, the app will display app only hosts in the Hosts table
     */
    showStandaloneHosts?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a InfraopsAppSettings resource.
 */
export interface InfraopsAppSettingsArgs {
    /**
     * (Required v305+) The threshold at which a network device interface is deemed to be saturated.
     */
    interfaceSaturationThreshold?: pulumi.Input<number>;
    /**
     * When set to true, the app will display monitoring candidates in the Hosts table
     */
    showMonitoringCandidates: pulumi.Input<boolean>;
    /**
     * When set to true, the app will display app only hosts in the Hosts table
     */
    showStandaloneHosts: pulumi.Input<boolean>;
}
