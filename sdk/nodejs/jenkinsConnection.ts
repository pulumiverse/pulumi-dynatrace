// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class JenkinsConnection extends pulumi.CustomResource {
    /**
     * Get an existing JenkinsConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: JenkinsConnectionState, opts?: pulumi.CustomResourceOptions): JenkinsConnection {
        return new JenkinsConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/jenkinsConnection:JenkinsConnection';

    /**
     * Returns true if the given object is an instance of JenkinsConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is JenkinsConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === JenkinsConnection.__pulumiType;
    }

    /**
     * The name of the Jenkins connection
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The password of the user or API token obtained from the Jenkins UI (Dashboard > User > Configure > API Token)
     */
    declare public readonly password: pulumi.Output<string>;
    /**
     * Base URL of your Jenkins instance (e.g. https://[YOUR*JENKINS*DOMAIN]/)
     */
    declare public readonly url: pulumi.Output<string>;
    /**
     * The name of your Jenkins user (e.g. jenkins)
     */
    declare public readonly username: pulumi.Output<string>;

    /**
     * Create a JenkinsConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: JenkinsConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: JenkinsConnectionArgs | JenkinsConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as JenkinsConnectionState | undefined;
            resourceInputs["name"] = state?.name;
            resourceInputs["password"] = state?.password;
            resourceInputs["url"] = state?.url;
            resourceInputs["username"] = state?.username;
        } else {
            const args = argsOrState as JenkinsConnectionArgs | undefined;
            if (args?.password === undefined && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if (args?.url === undefined && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            if (args?.username === undefined && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["name"] = args?.name;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["url"] = args?.url;
            resourceInputs["username"] = args?.username;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(JenkinsConnection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering JenkinsConnection resources.
 */
export interface JenkinsConnectionState {
    /**
     * The name of the Jenkins connection
     */
    name?: pulumi.Input<string>;
    /**
     * The password of the user or API token obtained from the Jenkins UI (Dashboard > User > Configure > API Token)
     */
    password?: pulumi.Input<string>;
    /**
     * Base URL of your Jenkins instance (e.g. https://[YOUR*JENKINS*DOMAIN]/)
     */
    url?: pulumi.Input<string>;
    /**
     * The name of your Jenkins user (e.g. jenkins)
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a JenkinsConnection resource.
 */
export interface JenkinsConnectionArgs {
    /**
     * The name of the Jenkins connection
     */
    name?: pulumi.Input<string>;
    /**
     * The password of the user or API token obtained from the Jenkins UI (Dashboard > User > Configure > API Token)
     */
    password: pulumi.Input<string>;
    /**
     * Base URL of your Jenkins instance (e.g. https://[YOUR*JENKINS*DOMAIN]/)
     */
    url: pulumi.Input<string>;
    /**
     * The name of your Jenkins user (e.g. jenkins)
     */
    username: pulumi.Input<string>;
}
