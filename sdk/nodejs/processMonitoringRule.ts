// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ProcessMonitoringRule extends pulumi.CustomResource {
    /**
     * Get an existing ProcessMonitoringRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProcessMonitoringRuleState, opts?: pulumi.CustomResourceOptions): ProcessMonitoringRule {
        return new ProcessMonitoringRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/processMonitoringRule:ProcessMonitoringRule';

    /**
     * Returns true if the given object is an instance of ProcessMonitoringRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProcessMonitoringRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProcessMonitoringRule.__pulumiType;
    }

    /**
     * Condition
     */
    declare public readonly condition: pulumi.Output<outputs.ProcessMonitoringRuleCondition>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * The scope of this settings. If the settings should cover the whole environment, just don't specify any scope
     */
    declare public readonly hostGroupId: pulumi.Output<string | undefined>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
     */
    declare public readonly insertAfter: pulumi.Output<string>;
    /**
     * Possible Values: `MONITORING_ON`, `MONITORING_OFF`
     */
    declare public readonly mode: pulumi.Output<string>;

    /**
     * Create a ProcessMonitoringRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProcessMonitoringRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProcessMonitoringRuleArgs | ProcessMonitoringRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProcessMonitoringRuleState | undefined;
            resourceInputs["condition"] = state?.condition;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["hostGroupId"] = state?.hostGroupId;
            resourceInputs["insertAfter"] = state?.insertAfter;
            resourceInputs["mode"] = state?.mode;
        } else {
            const args = argsOrState as ProcessMonitoringRuleArgs | undefined;
            if (args?.condition === undefined && !opts.urn) {
                throw new Error("Missing required property 'condition'");
            }
            if (args?.enabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if (args?.mode === undefined && !opts.urn) {
                throw new Error("Missing required property 'mode'");
            }
            resourceInputs["condition"] = args?.condition;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["hostGroupId"] = args?.hostGroupId;
            resourceInputs["insertAfter"] = args?.insertAfter;
            resourceInputs["mode"] = args?.mode;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProcessMonitoringRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProcessMonitoringRule resources.
 */
export interface ProcessMonitoringRuleState {
    /**
     * Condition
     */
    condition?: pulumi.Input<inputs.ProcessMonitoringRuleCondition>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The scope of this settings. If the settings should cover the whole environment, just don't specify any scope
     */
    hostGroupId?: pulumi.Input<string>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
     */
    insertAfter?: pulumi.Input<string>;
    /**
     * Possible Values: `MONITORING_ON`, `MONITORING_OFF`
     */
    mode?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProcessMonitoringRule resource.
 */
export interface ProcessMonitoringRuleArgs {
    /**
     * Condition
     */
    condition: pulumi.Input<inputs.ProcessMonitoringRuleCondition>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * The scope of this settings. If the settings should cover the whole environment, just don't specify any scope
     */
    hostGroupId?: pulumi.Input<string>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
     */
    insertAfter?: pulumi.Input<string>;
    /**
     * Possible Values: `MONITORING_ON`, `MONITORING_OFF`
     */
    mode: pulumi.Input<string>;
}
