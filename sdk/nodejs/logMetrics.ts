// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LogMetrics extends pulumi.CustomResource {
    /**
     * Get an existing LogMetrics resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogMetricsState, opts?: pulumi.CustomResourceOptions): LogMetrics {
        return new LogMetrics(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/logMetrics:LogMetrics';

    /**
     * Returns true if the given object is an instance of LogMetrics.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogMetrics {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogMetrics.__pulumiType;
    }

    /**
     * To enable splitting on your metric, add desired dimensions.
     */
    declare public readonly dimensions: pulumi.Output<string[] | undefined>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * Metric key
     */
    declare public readonly key: pulumi.Output<string>;
    /**
     * Possible Values: `OCCURRENCE`, `ATTRIBUTE`
     */
    declare public readonly measure: pulumi.Output<string>;
    /**
     * Attribute
     */
    declare public readonly measureAttribute: pulumi.Output<string | undefined>;
    /**
     * Matcher
     */
    declare public readonly query: pulumi.Output<string>;

    /**
     * Create a LogMetrics resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogMetricsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogMetricsArgs | LogMetricsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogMetricsState | undefined;
            resourceInputs["dimensions"] = state?.dimensions;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["key"] = state?.key;
            resourceInputs["measure"] = state?.measure;
            resourceInputs["measureAttribute"] = state?.measureAttribute;
            resourceInputs["query"] = state?.query;
        } else {
            const args = argsOrState as LogMetricsArgs | undefined;
            if (args?.enabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if (args?.key === undefined && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            if (args?.measure === undefined && !opts.urn) {
                throw new Error("Missing required property 'measure'");
            }
            if (args?.query === undefined && !opts.urn) {
                throw new Error("Missing required property 'query'");
            }
            resourceInputs["dimensions"] = args?.dimensions;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["key"] = args?.key;
            resourceInputs["measure"] = args?.measure;
            resourceInputs["measureAttribute"] = args?.measureAttribute;
            resourceInputs["query"] = args?.query;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogMetrics.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LogMetrics resources.
 */
export interface LogMetricsState {
    /**
     * To enable splitting on your metric, add desired dimensions.
     */
    dimensions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Metric key
     */
    key?: pulumi.Input<string>;
    /**
     * Possible Values: `OCCURRENCE`, `ATTRIBUTE`
     */
    measure?: pulumi.Input<string>;
    /**
     * Attribute
     */
    measureAttribute?: pulumi.Input<string>;
    /**
     * Matcher
     */
    query?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LogMetrics resource.
 */
export interface LogMetricsArgs {
    /**
     * To enable splitting on your metric, add desired dimensions.
     */
    dimensions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Metric key
     */
    key: pulumi.Input<string>;
    /**
     * Possible Values: `OCCURRENCE`, `ATTRIBUTE`
     */
    measure: pulumi.Input<string>;
    /**
     * Attribute
     */
    measureAttribute?: pulumi.Input<string>;
    /**
     * Matcher
     */
    query: pulumi.Input<string>;
}
