// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * > **Dynatrace SaaS only**
 *
 * > To utilize this resource, please define the environment variables `DT_CLIENT_ID`, `DT_CLIENT_SECRET`, `DT_ACCOUNT_ID` with an OAuth client including the following permission: **View documents** (`document:documents:read`).
 *
 * - `type` (String) The type of documents to query for. Leave empty if you want to query for all kinds of documents.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dynatrace from "@pulumi/dynatrace";
 *
 * const all_dashboard_and_notebooks = dynatrace.getDocuments({});
 * const all_dashboards = dynatrace.getDocuments({
 *     type: "dashboard",
 * });
 * const all_notebooks = dynatrace.getDocuments({
 *     type: "notebook",
 * });
 * ```
 */
export function getDocuments(args?: GetDocumentsArgs, opts?: pulumi.InvokeOptions): Promise<GetDocumentsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("dynatrace:index/getDocuments:getDocuments", {
        "type": args.type,
    }, opts);
}

/**
 * A collection of arguments for invoking getDocuments.
 */
export interface GetDocumentsArgs {
    /**
     * The type of documents to query for. Leave empty if you want to query for all kinds of documents. Possible values are `dashboard` or `notebook`
     */
    type?: string;
}

/**
 * A collection of values returned by getDocuments.
 */
export interface GetDocumentsResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The type of documents to query for. Leave empty if you want to query for all kinds of documents. Possible values are `dashboard` or `notebook`
     */
    readonly type?: string;
    readonly values: outputs.GetDocumentsValue[];
}
/**
 * > **Dynatrace SaaS only**
 *
 * > To utilize this resource, please define the environment variables `DT_CLIENT_ID`, `DT_CLIENT_SECRET`, `DT_ACCOUNT_ID` with an OAuth client including the following permission: **View documents** (`document:documents:read`).
 *
 * - `type` (String) The type of documents to query for. Leave empty if you want to query for all kinds of documents.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dynatrace from "@pulumi/dynatrace";
 *
 * const all_dashboard_and_notebooks = dynatrace.getDocuments({});
 * const all_dashboards = dynatrace.getDocuments({
 *     type: "dashboard",
 * });
 * const all_notebooks = dynatrace.getDocuments({
 *     type: "notebook",
 * });
 * ```
 */
export function getDocumentsOutput(args?: GetDocumentsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetDocumentsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("dynatrace:index/getDocuments:getDocuments", {
        "type": args.type,
    }, opts);
}

/**
 * A collection of arguments for invoking getDocuments.
 */
export interface GetDocumentsOutputArgs {
    /**
     * The type of documents to query for. Leave empty if you want to query for all kinds of documents. Possible values are `dashboard` or `notebook`
     */
    type?: pulumi.Input<string>;
}
