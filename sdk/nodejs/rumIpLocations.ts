// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RumIpLocations extends pulumi.CustomResource {
    /**
     * Get an existing RumIpLocations resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RumIpLocationsState, opts?: pulumi.CustomResourceOptions): RumIpLocations {
        return new RumIpLocations(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/rumIpLocations:RumIpLocations';

    /**
     * Returns true if the given object is an instance of RumIpLocations.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RumIpLocations {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RumIpLocations.__pulumiType;
    }

    /**
     * The city name of the location.
     */
    public readonly city!: pulumi.Output<string | undefined>;
    /**
     * The country code of the location.
     */
    public readonly countryCode!: pulumi.Output<string>;
    /**
     * Single IP or IP range start address
     */
    public readonly ip!: pulumi.Output<string>;
    /**
     * IP range end
     */
    public readonly ipTo!: pulumi.Output<string | undefined>;
    /**
     * Latitude
     */
    public readonly latitude!: pulumi.Output<number | undefined>;
    /**
     * Longitude
     */
    public readonly longitude!: pulumi.Output<number | undefined>;
    /**
     * The region code of the location. For the [USA](https://dt-url.net/iso3166us) or [Canada](https://dt-url.net/iso3166ca)
     * use ISO 3166-2 state codes without `US-` or `CA-` prefix. For the rest of the world use [FIPS 10-4
     * codes](https://dt-url.net/fipscodes) without country prefix.
     */
    public readonly regionCode!: pulumi.Output<string | undefined>;

    /**
     * Create a RumIpLocations resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RumIpLocationsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RumIpLocationsArgs | RumIpLocationsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RumIpLocationsState | undefined;
            resourceInputs["city"] = state ? state.city : undefined;
            resourceInputs["countryCode"] = state ? state.countryCode : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["ipTo"] = state ? state.ipTo : undefined;
            resourceInputs["latitude"] = state ? state.latitude : undefined;
            resourceInputs["longitude"] = state ? state.longitude : undefined;
            resourceInputs["regionCode"] = state ? state.regionCode : undefined;
        } else {
            const args = argsOrState as RumIpLocationsArgs | undefined;
            if ((!args || args.countryCode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'countryCode'");
            }
            if ((!args || args.ip === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ip'");
            }
            resourceInputs["city"] = args ? args.city : undefined;
            resourceInputs["countryCode"] = args ? args.countryCode : undefined;
            resourceInputs["ip"] = args ? args.ip : undefined;
            resourceInputs["ipTo"] = args ? args.ipTo : undefined;
            resourceInputs["latitude"] = args ? args.latitude : undefined;
            resourceInputs["longitude"] = args ? args.longitude : undefined;
            resourceInputs["regionCode"] = args ? args.regionCode : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RumIpLocations.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RumIpLocations resources.
 */
export interface RumIpLocationsState {
    /**
     * The city name of the location.
     */
    city?: pulumi.Input<string>;
    /**
     * The country code of the location.
     */
    countryCode?: pulumi.Input<string>;
    /**
     * Single IP or IP range start address
     */
    ip?: pulumi.Input<string>;
    /**
     * IP range end
     */
    ipTo?: pulumi.Input<string>;
    /**
     * Latitude
     */
    latitude?: pulumi.Input<number>;
    /**
     * Longitude
     */
    longitude?: pulumi.Input<number>;
    /**
     * The region code of the location. For the [USA](https://dt-url.net/iso3166us) or [Canada](https://dt-url.net/iso3166ca)
     * use ISO 3166-2 state codes without `US-` or `CA-` prefix. For the rest of the world use [FIPS 10-4
     * codes](https://dt-url.net/fipscodes) without country prefix.
     */
    regionCode?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RumIpLocations resource.
 */
export interface RumIpLocationsArgs {
    /**
     * The city name of the location.
     */
    city?: pulumi.Input<string>;
    /**
     * The country code of the location.
     */
    countryCode: pulumi.Input<string>;
    /**
     * Single IP or IP range start address
     */
    ip: pulumi.Input<string>;
    /**
     * IP range end
     */
    ipTo?: pulumi.Input<string>;
    /**
     * Latitude
     */
    latitude?: pulumi.Input<number>;
    /**
     * Longitude
     */
    longitude?: pulumi.Input<number>;
    /**
     * The region code of the location. For the [USA](https://dt-url.net/iso3166us) or [Canada](https://dt-url.net/iso3166ca)
     * use ISO 3166-2 state codes without `US-` or `CA-` prefix. For the rest of the world use [FIPS 10-4
     * codes](https://dt-url.net/fipscodes) without country prefix.
     */
    regionCode?: pulumi.Input<string>;
}
