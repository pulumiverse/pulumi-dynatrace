// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * > This resource requires the API token scopes **Read security problems** (`securityProblems.read`) and **Write security problems** (`securityProblems.write`)
 *
 * > This resource is excluded by default in the export utility, please explicitly specify the resource to retrieve existing configuration.
 *
 * ## Dynatrace Documentation
 *
 * - Runtime Vulnerability Analytics - https://www.dynatrace.com/support/help/platform-modules/application-security/vulnerability-analytics
 *
 * - Settings API - https://www.dynatrace.com/support/help/dynatrace-api/environment-api/settings (schemaId: `builtin:appsec.third-party-vulnerability-rule-settings`)
 *
 * ## Resource Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dynatrace from "@pulumiverse/dynatrace";
 *
 * const _name_ = new dynatrace.VulnerabilityThirdPartyAttr("#name#", {
 *     enabled: false,
 *     metadata: {
 *         comment: "Leave a comment here",
 *     },
 *     resourceAttributeConditions: {
 *         resourceAttributeConditions: [
 *             {
 *                 matcher: "EQUALS",
 *                 resourceAttributeKey: "process.executable.path",
 *                 resourceAttributeValue: "/",
 *             },
 *             {
 *                 matcher: "CONTAINS",
 *                 resourceAttributeKey: "process.executable.name",
 *                 resourceAttributeValue: "terraform",
 *             },
 *         ],
 *     },
 *     ruleName: "#name#",
 *     vulnerabilityDetectionControl: {
 *         monitoringMode: "MONITORING_ON",
 *     },
 * });
 * ```
 */
export class VulnerabilityThirdPartyAttr extends pulumi.CustomResource {
    /**
     * Get an existing VulnerabilityThirdPartyAttr resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VulnerabilityThirdPartyAttrState, opts?: pulumi.CustomResourceOptions): VulnerabilityThirdPartyAttr {
        return new VulnerabilityThirdPartyAttr(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/vulnerabilityThirdPartyAttr:VulnerabilityThirdPartyAttr';

    /**
     * Returns true if the given object is an instance of VulnerabilityThirdPartyAttr.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VulnerabilityThirdPartyAttr {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VulnerabilityThirdPartyAttr.__pulumiType;
    }

    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
     */
    declare public readonly insertAfter: pulumi.Output<string>;
    /**
     * Step 3: Leave comment (optional)
     */
    declare public readonly metadata: pulumi.Output<outputs.VulnerabilityThirdPartyAttrMetadata>;
    /**
     * When you add multiple conditions, the rule applies if all conditions apply.
     */
    declare public readonly resourceAttributeConditions: pulumi.Output<outputs.VulnerabilityThirdPartyAttrResourceAttributeConditions | undefined>;
    /**
     * Rule name
     */
    declare public readonly ruleName: pulumi.Output<string | undefined>;
    /**
     * Step 1: Select third-party vulnerability detection behavior
     */
    declare public readonly vulnerabilityDetectionControl: pulumi.Output<outputs.VulnerabilityThirdPartyAttrVulnerabilityDetectionControl>;

    /**
     * Create a VulnerabilityThirdPartyAttr resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VulnerabilityThirdPartyAttrArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VulnerabilityThirdPartyAttrArgs | VulnerabilityThirdPartyAttrState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VulnerabilityThirdPartyAttrState | undefined;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["insertAfter"] = state?.insertAfter;
            resourceInputs["metadata"] = state?.metadata;
            resourceInputs["resourceAttributeConditions"] = state?.resourceAttributeConditions;
            resourceInputs["ruleName"] = state?.ruleName;
            resourceInputs["vulnerabilityDetectionControl"] = state?.vulnerabilityDetectionControl;
        } else {
            const args = argsOrState as VulnerabilityThirdPartyAttrArgs | undefined;
            if (args?.enabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if (args?.metadata === undefined && !opts.urn) {
                throw new Error("Missing required property 'metadata'");
            }
            if (args?.vulnerabilityDetectionControl === undefined && !opts.urn) {
                throw new Error("Missing required property 'vulnerabilityDetectionControl'");
            }
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["insertAfter"] = args?.insertAfter;
            resourceInputs["metadata"] = args?.metadata;
            resourceInputs["resourceAttributeConditions"] = args?.resourceAttributeConditions;
            resourceInputs["ruleName"] = args?.ruleName;
            resourceInputs["vulnerabilityDetectionControl"] = args?.vulnerabilityDetectionControl;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VulnerabilityThirdPartyAttr.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VulnerabilityThirdPartyAttr resources.
 */
export interface VulnerabilityThirdPartyAttrState {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
     */
    insertAfter?: pulumi.Input<string>;
    /**
     * Step 3: Leave comment (optional)
     */
    metadata?: pulumi.Input<inputs.VulnerabilityThirdPartyAttrMetadata>;
    /**
     * When you add multiple conditions, the rule applies if all conditions apply.
     */
    resourceAttributeConditions?: pulumi.Input<inputs.VulnerabilityThirdPartyAttrResourceAttributeConditions>;
    /**
     * Rule name
     */
    ruleName?: pulumi.Input<string>;
    /**
     * Step 1: Select third-party vulnerability detection behavior
     */
    vulnerabilityDetectionControl?: pulumi.Input<inputs.VulnerabilityThirdPartyAttrVulnerabilityDetectionControl>;
}

/**
 * The set of arguments for constructing a VulnerabilityThirdPartyAttr resource.
 */
export interface VulnerabilityThirdPartyAttrArgs {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
     */
    insertAfter?: pulumi.Input<string>;
    /**
     * Step 3: Leave comment (optional)
     */
    metadata: pulumi.Input<inputs.VulnerabilityThirdPartyAttrMetadata>;
    /**
     * When you add multiple conditions, the rule applies if all conditions apply.
     */
    resourceAttributeConditions?: pulumi.Input<inputs.VulnerabilityThirdPartyAttrResourceAttributeConditions>;
    /**
     * Rule name
     */
    ruleName?: pulumi.Input<string>;
    /**
     * Step 1: Select third-party vulnerability detection behavior
     */
    vulnerabilityDetectionControl: pulumi.Input<inputs.VulnerabilityThirdPartyAttrVulnerabilityDetectionControl>;
}
