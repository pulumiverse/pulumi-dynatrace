// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AlertingFilters {
    /**
     * A conditions for the metric usage
     */
    filters?: outputs.AlertingFiltersFilter[];
}

export interface AlertingFiltersFilter {
    /**
     * Configuration of a custom event filter. Filters custom events by title or description. If both specified, the AND logic applies
     */
    custom?: outputs.AlertingFiltersFilterCustom;
    /**
     * Configuration of a custom event filter. Filters custom events by title or description. If both specified, the AND logic applies
     */
    predefined?: outputs.AlertingFiltersFilterPredefined;
}

export interface AlertingFiltersFilterCustom {
    /**
     * Configuration of a matching filter
     */
    description?: outputs.AlertingFiltersFilterCustomDescription;
    /**
     * Configuration of a matching filter
     */
    metadata?: outputs.AlertingFiltersFilterCustomMetadata;
    /**
     * Configuration of a matching filter
     */
    title?: outputs.AlertingFiltersFilterCustomTitle;
}

export interface AlertingFiltersFilterCustomDescription {
    /**
     * The condition is case sensitive (`false`) or case insensitive (`true`).   If not set, then `false` is used, making the condition case sensitive
     */
    caseSensitive?: boolean;
    /**
     * The filter is enabled (`true`) or disabled (`false`)
     */
    enabled?: boolean;
    /**
     * Reverses the comparison **operator**. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison.   You can reverse it by setting **negate** to `true`. Possible values are `BEGINS_WITH`, `CONTAINS`, `REGEX_MATCHES`, `ENDS_WITH` and `STRING_EQUALS`
     */
    operator: string;
    /**
     * The value to compare to
     */
    value: string;
}

export interface AlertingFiltersFilterCustomMetadata {
    /**
     * Define filters for event properties. A maximum of 20 properties is allowed.
     */
    items: outputs.AlertingFiltersFilterCustomMetadataItems;
}

export interface AlertingFiltersFilterCustomMetadataItems {
    filters: outputs.AlertingFiltersFilterCustomMetadataItemsFilter[];
}

export interface AlertingFiltersFilterCustomMetadataItemsFilter {
    /**
     * GET /api/v2/eventProperties for list of available keys
     */
    key: string;
    /**
     * no documentation available
     */
    negate?: boolean;
    /**
     * Value
     */
    value: string;
}

export interface AlertingFiltersFilterCustomTitle {
    /**
     * The condition is case sensitive (`false`) or case insensitive (`true`).   If not set, then `false` is used, making the condition case sensitive
     */
    caseSensitive?: boolean;
    /**
     * The filter is enabled (`true`) or disabled (`false`)
     */
    enabled?: boolean;
    /**
     * Reverses the comparison **operator**. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison.   You can reverse it by setting **negate** to `true`. Possible values are `BEGINS_WITH`, `CONTAINS`, `REGEX_MATCHES`, `ENDS_WITH` and `STRING_EQUALS`
     */
    operator: string;
    /**
     * The value to compare to
     */
    value: string;
}

export interface AlertingFiltersFilterPredefined {
    /**
     * The alert triggers when the problem of specified severity arises while the specified event **is** happening (`false`) or while the specified event is **not** happening (`true`).   For example, if you chose the Slowdown (`PERFORMANCE`) severity and Unexpected high traffic (`APPLICATION_UNEXPECTED_HIGH_LOAD`) event with **negate** set to `true`, the alerting profile will trigger only when the slowdown problem is raised while there is no unexpected high traffic event.  Consider the following use case as an example. The Slowdown (`PERFORMANCE`) severity rule is set. Depending on the configuration of the event filter (Unexpected high traffic (`APPLICATION_UNEXPECTED_HIGH_LOAD`) event is used as an example), the options of the alerting profile is one of the following:* **negate** is set to `false`: The alert triggers when the slowdown problem is raised while unexpected high traffic event is happening.  * **negate** is set to `true`: The alert triggers when the slowdown problem is raised while there is no unexpected high traffic event.  * no event rule is set: The alert triggers when the slowdown problem is raised, regardless of any events
     */
    negate?: boolean;
    /**
     * The type of the predefined event. Possible values are `APPLICATION_ERROR_RATE_INCREASED`, `APPLICATION_SLOWDOWN`, `APPLICATION_UNEXPECTED_HIGH_LOAD`, `APPLICATION_UNEXPECTED_LOW_LOAD`, `AWS_LAMBDA_HIGH_ERROR_RATE`, `CUSTOM_APPLICATION_ERROR_RATE_INCREASED`, `CUSTOM_APPLICATION_SLOWDOWN`, `CUSTOM_APPLICATION_UNEXPECTED_HIGH_LOAD`, `CUSTOM_APPLICATION_UNEXPECTED_LOW_LOAD`, `CUSTOM_APP_CRASH_RATE_INCREASED`, `DATABASE_CONNECTION_FAILURE`, `DATA_CENTER_SERVICE_PERFORMANCE_DEGRADATION`, `DATA_CENTER_SERVICE_UNAVAILABLE`, `EBS_VOLUME_HIGH_LATENCY`, `EC2_HIGH_CPU`, `ELB_HIGH_BACKEND_ERROR_RATE`, `ENTERPRICE_APPLICATION_PERFORMANCE_DEGRADATION`, `ENTERPRISE_APPLICATION_UNAVAILABLE`, `ESXI_GUEST_ACTIVE_SWAP_WAIT`, `ESXI_GUEST_CPU_LIMIT_REACHED`, `ESXI_HOST_CPU_SATURATION`, `ESXI_HOST_DATASTORE_LOW_DISK_SPACE`, `ESXI_HOST_DISK_QUEUE_SLOW`, `ESXI_HOST_DISK_SLOW`, `ESXI_HOST_MEMORY_SATURATION`, `ESXI_HOST_NETWORK_PROBLEMS`, `ESXI_HOST_OVERLOADED_STORAGE`, `ESXI_VM_IMPACT_HOST_CPU_SATURATION`, `ESXI_VM_IMPACT_HOST_MEMORY_SATURATION`, `EXTERNAL_SYNTHETIC_TEST_OUTAGE`, `EXTERNAL_SYNTHETIC_TEST_SLOWDOWN`, `HOST_OF_SERVICE_UNAVAILABLE`, `HTTP_CHECK_GLOBAL_OUTAGE`, `HTTP_CHECK_LOCAL_OUTAGE`, `HTTP_CHECK_TEST_LOCATION_SLOWDOWN`, `MOBILE_APPLICATION_ERROR_RATE_INCREASED`, `MOBILE_APPLICATION_SLOWDOWN`, `MOBILE_APPLICATION_UNEXPECTED_HIGH_LOAD`, `MOBILE_APPLICATION_UNEXPECTED_LOW_LOAD`, `MOBILE_APP_CRASH_RATE_INCREASED`, `MONITORING_UNAVAILABLE`, `OSI_DISK_LOW_INODES`, `OSI_GRACEFULLY_SHUTDOWN`, `OSI_HIGH_CPU`, `OSI_HIGH_MEMORY`, `OSI_LOW_DISK_SPACE`, `OSI_NIC_DROPPED_PACKETS_HIGH`, `OSI_NIC_ERRORS_HIGH`, `OSI_NIC_UTILIZATION_HIGH`, `OSI_SLOW_DISK`, `OSI_UNEXPECTEDLY_UNAVAILABLE`, `PGI_OF_SERVICE_UNAVAILABLE`, `PGI_UNAVAILABLE`, `PG_LOW_INSTANCE_COUNT`, `PROCESS_CRASHED`, `PROCESS_HIGH_GC_ACTIVITY`, `PROCESS_MEMORY_RESOURCE_EXHAUSTED`, `PROCESS_NA_HIGH_CONN_FAIL_RATE`, `PROCESS_NA_HIGH_LOSS_RATE`, `PROCESS_THREADS_RESOURCE_EXHAUSTED`, `RDS_HIGH_CPU`, `RDS_HIGH_LATENCY`, `RDS_LOW_MEMORY`, `RDS_LOW_STORAGE_SPACE`, `RDS_OF_SERVICE_UNAVAILABLE`, `RDS_RESTART_SEQUENCE`, `SERVICE_ERROR_RATE_INCREASED`, `SERVICE_SLOWDOWN`, `SERVICE_UNEXPECTED_HIGH_LOAD`, `SERVICE_UNEXPECTED_LOW_LOAD`, `SYNTHETIC_GLOBAL_OUTAGE`, `SYNTHETIC_LOCAL_OUTAGE`, `SYNTHETIC_NODE_OUTAGE`, `SYNTHETIC_PRIVATE_LOCATION_OUTAGE` and `SYNTHETIC_TEST_LOCATION_SLOWDOWN`
     */
    type: string;
}

export interface AlertingProfileEventTypeFilter {
    /**
     * Configuration of a custom event filter. Filters custom events by title or description. If both specified, the AND logic applies
     */
    customEventFilters?: outputs.AlertingProfileEventTypeFilterCustomEventFilter[];
    /**
     * Configuration of a custom event filter. Filters custom events by title or description. If both specified, the AND logic applies
     */
    predefinedEventFilters?: outputs.AlertingProfileEventTypeFilterPredefinedEventFilter[];
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface AlertingProfileEventTypeFilterCustomEventFilter {
    /**
     * Configuration of a matching filter
     */
    customDescriptionFilters?: outputs.AlertingProfileEventTypeFilterCustomEventFilterCustomDescriptionFilter[];
    /**
     * Configuration of a matching filter
     */
    customTitleFilters?: outputs.AlertingProfileEventTypeFilterCustomEventFilterCustomTitleFilter[];
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface AlertingProfileEventTypeFilterCustomEventFilterCustomDescriptionFilter {
    /**
     * The condition is case sensitive (`false`) or case insensitive (`true`).   If not set, then `false` is used, making the condition case sensitive
     */
    caseInsensitive?: boolean;
    /**
     * The filter is enabled (`true`) or disabled (`false`)
     */
    enabled?: boolean;
    /**
     * Reverses the comparison **operator**. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison.   You can reverse it by setting **negate** to `true`. Possible values are `BEGINS_WITH`, `CONTAINS`, `CONTAINS_REGEX`, `ENDS_WITH` and `EQUALS`
     */
    operator: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value: string;
}

export interface AlertingProfileEventTypeFilterCustomEventFilterCustomTitleFilter {
    /**
     * The condition is case sensitive (`false`) or case insensitive (`true`).   If not set, then `false` is used, making the condition case sensitive
     */
    caseInsensitive?: boolean;
    /**
     * The filter is enabled (`true`) or disabled (`false`)
     */
    enabled?: boolean;
    /**
     * Reverses the comparison **operator**. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison.   You can reverse it by setting **negate** to `true`. Possible values are `BEGINS_WITH`, `CONTAINS`, `CONTAINS_REGEX`, `ENDS_WITH` and `EQUALS`
     */
    operator: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value: string;
}

export interface AlertingProfileEventTypeFilterPredefinedEventFilter {
    /**
     * The type of the predefined event. Possible values are `APPLICATION_ERROR_RATE_INCREASED`, `APPLICATION_SLOWDOWN`, `APPLICATION_UNEXPECTED_HIGH_LOAD`, `APPLICATION_UNEXPECTED_LOW_LOAD`, `AWS_LAMBDA_HIGH_ERROR_RATE`, `CUSTOM_APPLICATION_ERROR_RATE_INCREASED`, `CUSTOM_APPLICATION_SLOWDOWN`, `CUSTOM_APPLICATION_UNEXPECTED_HIGH_LOAD`, `CUSTOM_APPLICATION_UNEXPECTED_LOW_LOAD`, `CUSTOM_APP_CRASH_RATE_INCREASED`, `DATABASE_CONNECTION_FAILURE`, `DATA_CENTER_SERVICE_PERFORMANCE_DEGRADATION`, `DATA_CENTER_SERVICE_UNAVAILABLE`, `EBS_VOLUME_HIGH_LATENCY`, `EC2_HIGH_CPU`, `ELB_HIGH_BACKEND_ERROR_RATE`, `ENTERPRICE_APPLICATION_PERFORMANCE_DEGRADATION`, `ENTERPRISE_APPLICATION_UNAVAILABLE`, `ESXI_GUEST_ACTIVE_SWAP_WAIT`, `ESXI_GUEST_CPU_LIMIT_REACHED`, `ESXI_HOST_CPU_SATURATION`, `ESXI_HOST_DATASTORE_LOW_DISK_SPACE`, `ESXI_HOST_DISK_QUEUE_SLOW`, `ESXI_HOST_DISK_SLOW`, `ESXI_HOST_MEMORY_SATURATION`, `ESXI_HOST_NETWORK_PROBLEMS`, `ESXI_HOST_OVERLOADED_STORAGE`, `ESXI_VM_IMPACT_HOST_CPU_SATURATION`, `ESXI_VM_IMPACT_HOST_MEMORY_SATURATION`, `EXTERNAL_SYNTHETIC_TEST_OUTAGE`, `EXTERNAL_SYNTHETIC_TEST_SLOWDOWN`, `HOST_OF_SERVICE_UNAVAILABLE`, `HTTP_CHECK_GLOBAL_OUTAGE`, `HTTP_CHECK_LOCAL_OUTAGE`, `HTTP_CHECK_TEST_LOCATION_SLOWDOWN`, `MOBILE_APPLICATION_ERROR_RATE_INCREASED`, `MOBILE_APPLICATION_SLOWDOWN`, `MOBILE_APPLICATION_UNEXPECTED_HIGH_LOAD`, `MOBILE_APPLICATION_UNEXPECTED_LOW_LOAD`, `MOBILE_APP_CRASH_RATE_INCREASED`, `MONITORING_UNAVAILABLE`, `OSI_DISK_LOW_INODES`, `OSI_GRACEFULLY_SHUTDOWN`, `OSI_HIGH_CPU`, `OSI_HIGH_MEMORY`, `OSI_LOW_DISK_SPACE`, `OSI_NIC_DROPPED_PACKETS_HIGH`, `OSI_NIC_ERRORS_HIGH`, `OSI_NIC_UTILIZATION_HIGH`, `OSI_SLOW_DISK`, `OSI_UNEXPECTEDLY_UNAVAILABLE`, `PGI_OF_SERVICE_UNAVAILABLE`, `PGI_UNAVAILABLE`, `PG_LOW_INSTANCE_COUNT`, `PROCESS_CRASHED`, `PROCESS_HIGH_GC_ACTIVITY`, `PROCESS_MEMORY_RESOURCE_EXHAUSTED`, `PROCESS_NA_HIGH_CONN_FAIL_RATE`, `PROCESS_NA_HIGH_LOSS_RATE`, `PROCESS_THREADS_RESOURCE_EXHAUSTED`, `RDS_HIGH_CPU`, `RDS_HIGH_LATENCY`, `RDS_LOW_MEMORY`, `RDS_LOW_STORAGE_SPACE`, `RDS_OF_SERVICE_UNAVAILABLE`, `RDS_RESTART_SEQUENCE`, `SERVICE_ERROR_RATE_INCREASED`, `SERVICE_SLOWDOWN`, `SERVICE_UNEXPECTED_HIGH_LOAD`, `SERVICE_UNEXPECTED_LOW_LOAD`, `SYNTHETIC_GLOBAL_OUTAGE`, `SYNTHETIC_LOCAL_OUTAGE`, `SYNTHETIC_NODE_OUTAGE`, `SYNTHETIC_PRIVATE_LOCATION_OUTAGE` and `SYNTHETIC_TEST_LOCATION_SLOWDOWN`
     */
    eventType: string;
    /**
     * The alert triggers when the problem of specified severity arises while the specified event **is** happening (`false`) or while the specified event is **not** happening (`true`).   For example, if you chose the Slowdown (`PERFORMANCE`) severity and Unexpected high traffic (`APPLICATION_UNEXPECTED_HIGH_LOAD`) event with **negate** set to `true`, the alerting profile will trigger only when the slowdown problem is raised while there is no unexpected high traffic event.  Consider the following use case as an example. The Slowdown (`PERFORMANCE`) severity rule is set. Depending on the configuration of the event filter (Unexpected high traffic (`APPLICATION_UNEXPECTED_HIGH_LOAD`) event is used as an example), the behavior of the alerting profile is one of the following:* **negate** is set to `false`: The alert triggers when the slowdown problem is raised while unexpected high traffic event is happening.  * **negate** is set to `true`: The alert triggers when the slowdown problem is raised while there is no unexpected high traffic event.  * no event rule is set: The alert triggers when the slowdown problem is raised, regardless of any events
     */
    negate?: boolean;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface AlertingProfileMetadata {
    /**
     * Dynatrace server version
     */
    clusterVersion?: string;
    /**
     * A Sorted list of the version numbers of the configuration
     */
    configurationVersions?: number[];
    /**
     * A Sorted list of the version numbers of the configuration
     */
    currentConfigurationVersions?: string[];
}

export interface AlertingProfileRule {
    /**
     * Send a notification if a problem remains open longer than *X* minutes
     */
    delayInMinutes: number;
    /**
     * The severity level to trigger the alert. Possible values are `AVAILABILITY`,	`CUSTOM_ALERT`,	`ERROR`,`MONITORING_UNAVAILABLE`,`PERFORMANCE` and `RESOURCE_CONTENTION`.
     */
    severityLevel: string;
    /**
     * Configuration of the tag filtering of the alerting profile
     */
    tagFilters: outputs.AlertingProfileRuleTagFilter[];
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface AlertingProfileRuleTagFilter {
    /**
     * The filtering mode:  * `INCLUDE_ANY`: The rule applies to monitored entities that have at least one of the specified tags. You can specify up to 100 tags.  * `INCLUDE_ALL`: The rule applies to monitored entities that have **all** of the specified tags. You can specify up to 10 tags.  * `NONE`: The rule applies to all monitored entities
     */
    includeMode: string;
    /**
     * A list of required tags
     */
    tagFilters?: outputs.AlertingProfileRuleTagFilterTagFilter[];
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface AlertingProfileRuleTagFilterTagFilter {
    /**
     * The origin of the tag, such as AWS or Cloud Foundry. Custom tags use the `CONTEXTLESS` value
     */
    context: string;
    /**
     * The key of the tag. Custom tags have the tag value here
     */
    key: string;
    /**
     * The value of the tag. Not applicable to custom tags
     */
    value?: string;
}

export interface AlertingRules {
    /**
     * A conditions for the metric usage
     */
    rules?: outputs.AlertingRulesRule[];
}

export interface AlertingRulesRule {
    /**
     * Send a notification if a problem remains open longer than *X* minutes
     */
    delayInMinutes: number;
    /**
     * The filtering mode:  * `INCLUDE_ANY`: The rule applies to monitored entities that have at least one of the specified tags. You can specify up to 100 tags.  * `INCLUDE_ALL`: The rule applies to monitored entities that have **all** of the specified tags. You can specify up to 10 tags.  * `NONE`: The rule applies to all monitored entities
     */
    includeMode: string;
    /**
     * The severity level to trigger the alert. Possible values are `AVAILABILITY`,	`CUSTOM_ALERT`,	`ERRORS`,`MONITORING_UNAVAILABLE`,`PERFORMANCE` and `RESOURCE_CONTENTION`.
     */
    severityLevel: string;
    /**
     * Entities which contain any/all of the configured tags will match this alerting profile. It is recommended to use manual tags.
     */
    tags?: string[];
}

export interface ApiDetectionConditions {
    conditions: outputs.ApiDetectionConditionsCondition[];
}

export interface ApiDetectionConditionsCondition {
    /**
     * Possible Values: `FILE_NAME`, `FQCN`, `PACKAGE`
     */
    base: string;
    /**
     * Possible Values: `BEGINS_WITH`, `CONTAINS`
     */
    matcher: string;
    /**
     * no documentation available
     */
    pattern: string;
}

export interface AppMonitoringAppMonitoring {
    appMonitorings: outputs.AppMonitoringAppMonitoringAppMonitoring[];
}

export interface AppMonitoringAppMonitoringAppMonitoring {
    /**
     * App ID
     */
    appId: string;
    /**
     * Possible Values: `debug`, `error`, `info`, `off`, `useDefault`, `warn`
     */
    customLogLevel: string;
    /**
     * Possible Values: `off`, `on`, `useDefault`
     */
    customTraceLevel?: string;
}

export interface ApplicationAnomaliesFailureRate {
    /**
     * Parameters of failure rate increase auto-detection. Example: If the expected error rate is 1.5%, and you set an absolute increase of 1%, and a relative increase of 50%, the thresholds will be:  Absolute: 1.5% + **1%** = 2.5%  Relative: 1.5% + 1.5% * **50%** = 2.25%
     */
    auto?: outputs.ApplicationAnomaliesFailureRateAuto;
    /**
     * Fixed thresholds for failure rate increase detection
     */
    thresholds?: outputs.ApplicationAnomaliesFailureRateThresholds;
}

export interface ApplicationAnomaliesFailureRateAuto {
    /**
     * Absolute increase of failing service calls to trigger an alert, %
     */
    absolute: number;
    /**
     * Relative increase of failing service calls to trigger an alert, %
     */
    relative: number;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface ApplicationAnomaliesFailureRateThresholds {
    /**
     * Sensitivity of the threshold.  With `low` sensitivity, high statistical confidence is used. Brief violations (for example, due to a surge in load) won't trigger alerts.  With `high` sensitivity, no statistical confidence is used. Each violation triggers alert
     */
    sensitivity: string;
    /**
     * Failure rate during any 5-minute period to trigger an alert, %
     */
    threshold: number;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface ApplicationAnomaliesResponseTime {
    /**
     * Parameters of the response time degradation auto-detection. Violation of **any** criterion triggers an alert
     */
    auto?: outputs.ApplicationAnomaliesResponseTimeAuto;
    /**
     * Fixed thresholds for response time degradation detection
     */
    thresholds?: outputs.ApplicationAnomaliesResponseTimeThresholds;
}

export interface ApplicationAnomaliesResponseTimeAuto {
    /**
     * Minimal service load to detect response time degradation. Response time degradation of services with smaller load won't trigger alerts. Possible values are `FIFTEEN_REQUESTS_PER_MINUTE`, `FIVE_REQUESTS_PER_MINUTE`, `ONE_REQUEST_PER_MINUTE` and `TEN_REQUESTS_PER_MINUTE`
     */
    load: string;
    /**
     * Alert if the response time degrades by more than *X* milliseconds
     */
    milliseconds: number;
    /**
     * Alert if the response time degrades by more than *X* %
     */
    percent: number;
    /**
     * Alert if the response time of the slowest 10% degrades by more than *X* milliseconds
     */
    slowestMilliseconds: number;
    /**
     * Alert if the response time of the slowest 10% degrades by more than *X* milliseconds
     */
    slowestPercent: number;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface ApplicationAnomaliesResponseTimeThresholds {
    /**
     * Minimal service load to detect response time degradation. Response time degradation of services with smaller load won't trigger alerts. Possible values are `FIFTEEN_REQUESTS_PER_MINUTE`, `FIVE_REQUESTS_PER_MINUTE`, `ONE_REQUEST_PER_MINUTE` and `TEN_REQUESTS_PER_MINUTE`
     */
    load: string;
    /**
     * Response time during any 5-minute period to trigger an alert, in milliseconds
     */
    milliseconds: number;
    /**
     * Sensitivity of the threshold.  With `low` sensitivity, high statistical confidence is used. Brief violations (for example, due to a surge in load) won't trigger alerts.  With `high` sensitivity, no statistical confidence is used. Each violation triggers an alert
     */
    sensitivity: string;
    /**
     * Response time of the 10% slowest during any 5-minute period to trigger an alert, in milliseconds
     */
    slowestMilliseconds: number;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface ApplicationAnomaliesTraffic {
    /**
     * The configuration of traffic drops detection
     */
    drops?: outputs.ApplicationAnomaliesTrafficDrops;
    /**
     * The configuration of traffic spikes detection
     */
    spikes?: outputs.ApplicationAnomaliesTrafficSpikes;
}

export interface ApplicationAnomaliesTrafficDrops {
    /**
     * The detection is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Alert if the observed traffic is less than *X* % of the expected value
     */
    percent?: number;
}

export interface ApplicationAnomaliesTrafficSpikes {
    /**
     * The detection is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Alert if the observed traffic is less than *X* % of the expected value
     */
    percent?: number;
}

export interface ApplicationDataPrivacySessionReplayDataPrivacy {
    /**
     * (Field has overlap with `dynatrace.SessionReplayWebPrivacy`) Content masking settings for Session Replay.
     */
    contentMaskingSettings: outputs.ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettings;
    /**
     * (Field has overlap with `dynatrace.SessionReplayWebPrivacy`) If `true`, session recording is disabled until JavaScriptAPI `dtrum.enableSessionReplay()` is called
     */
    optIn?: boolean;
    /**
     * (Field has overlap with `dynatrace.SessionReplayWebPrivacy`) A list of URLs to be excluded from recording
     */
    urlExclusionRules?: string[];
}

export interface ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettings {
    /**
     * (Field has overlap with `dynatrace.SessionReplayWebPrivacy`) Configuration of the Session Replay masking during Playback
     */
    playback: outputs.ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlayback;
    /**
     * (Field has overlap with `dynatrace.SessionReplayWebPrivacy`) Configuration of the Session Replay masking during Recording
     */
    recording: outputs.ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecording;
}

export interface ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlayback {
    /**
     * The type of the masking:
     */
    preset: string;
    /**
     * A list of masking rules
     */
    rules?: outputs.ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlaybackRules;
}

export interface ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlaybackRules {
    /**
     * The masking rule defining how data is hidden
     */
    rules: outputs.ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlaybackRulesRule[];
}

export interface ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlaybackRulesRule {
    /**
     * The selector for the element or the attribute to be masked.
     */
    selector: string;
    /**
     * The type of the masking rule
     */
    type: string;
    /**
     * Interactions with the element are (`true`) or are not (`false) masked
     */
    userInteractionHidden?: boolean;
}

export interface ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecording {
    /**
     * The type of the masking:
     */
    preset: string;
    /**
     * A list of masking rules
     */
    rules?: outputs.ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecordingRules;
}

export interface ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecordingRules {
    /**
     * The masking rule defining how data is hidden
     */
    rules: outputs.ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecordingRulesRule[];
}

export interface ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecordingRulesRule {
    /**
     * The selector for the element or the attribute to be masked.
     */
    selector: string;
    /**
     * The type of the masking rule
     */
    type: string;
    /**
     * Interactions with the element are (`true`) or are not (`false) masked
     */
    userInteractionHidden?: boolean;
}

export interface ApplicationDetectionRuleFilterConfig {
    /**
     * Where to look for the pattern value, possible values are `DOMAIN` or `URL`
     */
    applicationMatchTarget: string;
    /**
     * The operator used for matching the application detection rule, possible values are `BEGINS_WITH`, `CONTAINS`, `ENDS_WITH`, `EQUALS`, `MATCHES`
     */
    applicationMatchType: string;
    /**
     * The value to look for with the application detection rule
     */
    pattern: string;
}

export interface ApplicationErrorRulesCustomErrors {
    /**
     * Configuration of the custom error in the web application
     */
    rules: outputs.ApplicationErrorRulesCustomErrorsRule[];
}

export interface ApplicationErrorRulesCustomErrorsRule {
    /**
     * Capture (`true`) or ignore (`false`) the error
     */
    capture?: boolean;
    /**
     * Include (`true`) or exclude (`false`) the error in Davis AI [problem detection and analysis](https://dt-url.net/a963kd2)
     */
    customAlerting?: boolean;
    /**
     * Include (`true`) or exclude (`false`) the error in Apdex calculation
     */
    impactApdex?: boolean;
    /**
     * The matching operation for the **keyPattern**. Possible values are `BEGINS_WITH`, `CONTAINS`, `ENDS_WITH` and `EQUALS`
     */
    keyMatcher?: string;
    /**
     * The key of the error to look for
     */
    keyPattern?: string;
    /**
     * The matching operation for the **valuePattern**. Possible values are `BEGINS_WITH`, `CONTAINS`, `ENDS_WITH` and `EQUALS`.
     */
    valueMatcher?: string;
    /**
     * The value of the error to look for
     */
    valuePattern?: string;
}

export interface ApplicationErrorRulesHttpErrors {
    /**
     * Configuration of the HTTP error in the web application
     */
    rules: outputs.ApplicationErrorRulesHttpErrorsRule[];
}

export interface ApplicationErrorRulesHttpErrorsRule {
    /**
     * Capture (`true`) or ignore (`false`) the error
     */
    capture?: boolean;
    /**
     * If `true`, match by errors that have CSP Rule violations
     */
    considerBlockedRequests?: boolean;
    /**
     * Include (`true`) or exclude (`false`) the error in Davis AI [problem detection and analysis](https://dt-url.net/a963kd2)
     */
    considerForAi?: boolean;
    /**
     * If `true`, match by errors that have unknown HTTP status code
     */
    considerUnknownErrorCode?: boolean;
    /**
     * The HTTP status code or status code range to match by.
     */
    errorCodes?: string;
    /**
     * The matching rule for the URL. Popssible values are `BEGINS_WITH`, `CONTAINS`, `ENDS_WITH` and `EQUALS`.
     */
    filter?: string;
    /**
     * If `true`, filter errors by URL
     */
    filterByUrl?: boolean;
    /**
     * Include (`true`) or exclude (`false`) the error in Apdex calculation
     */
    impactApdex?: boolean;
    /**
     * The URL to look for
     */
    url?: string;
}

export interface AppsecNotificationAttackCandidateBasedEmailPayload {
    /**
     * The template of the email notifications.  
     * In case a value of a security problem is not set, the placeholder will be replaced by an empty string.. **Note:** Security notifications contain sensitive information. Excessive usage of placeholders in the body might leak information to untrusted parties.  
     *   
     * Available placeholders:  
     * **{AttackDisplayId}**: The unique identifier assigned by Dynatrace, for example: "A-1234".  
     * **{Title}**: Location of the attack, for example: "com.dynatrace.Class.method():120"  
     * **{Type}**: The type of attack, for example: "SQL Injection".  
     * **{AttackUrl}**: URL of the attack in Dynatrace.  
     * **{ProcessGroupId}**: Details about the process group attacked.  
     * **{EntryPoint}**: The entry point of the attack into the process, for example: "/login". Can be empty.  
     * **{Status}**: The status of the attack, for example: "Exploited"  
     * **{Timestamp}**: When the attack happened.  
     * **{VulnerabilityName}**: Name of the associated code-level vulnerability, for example: "InMemoryDatabaseCaller.getAccountInfo():51". Can be empty.
     */
    body: string;
    /**
     * The subject of the email notifications.. Available placeholders:  
     * **{AttackDisplayId}**: The unique identifier assigned by Dynatrace, for example, "A-1234".  
     * **{Title}**: Location of the attack, for example: "com.dynatrace.Class.method():120"  
     * **{Type}**: The type of attack, for example: "SQL Injection".  
     * **{AttackUrl}**: URL of the attack in Dynatrace.  
     * **{ProcessGroupId}**: Details about the process group attacked.  
     * **{EntryPoint}**: The entry point of the attack into the process, for example: "/login". Can be empty.  
     * **{Status}**: The status of the attack, for example: "Exploited"  
     * **{Timestamp}**: When the attack happened.  
     * **{VulnerabilityName}**: Name of the associated code-level vulnerability, for example: "InMemoryDatabaseCaller.getAccountInfo():51". Can be empty.
     */
    subject: string;
}

export interface AppsecNotificationAttackCandidateBasedJiraPayload {
    /**
     * The description of the Jira issue to be created by this notification.  
     * In case a value of an attack is not set, the placeholder will be replaced by an empty string.. **Note:** Security notifications contain sensitive information. Excessive usage of placeholders in the description might leak information to untrusted parties.  
     *   
     * Available placeholders:  
     * **{AttackDisplayId}**: The unique identifier assigned by Dynatrace, for example: "A-1234".  
     * **{Title}**: Location of the attack, for example: "com.dynatrace.Class.method():120"  
     * **{Type}**: The type of attack, for example: "SQL Injection".  
     * **{AttackUrl}**: URL of the attack in Dynatrace.  
     * **{ProcessGroupId}**: Details about the process group attacked.  
     * **{EntryPoint}**: The entry point of the attack into the process, for example: "/login". Can be empty.  
     * **{Status}**: The status of the attack, for example: "Exploited"  
     * **{Timestamp}**: When the attack happened.  
     * **{VulnerabilityName}**: Name of the associated code-level vulnerability, for example: "InMemoryDatabaseCaller.getAccountInfo():51". Can be empty.
     */
    description: string;
    /**
     * The summary of the Jira issue to be created by this notification.. **Note:** The Jira summary field must contain less than 255 characters. Any content exceeding this limit after evaluating the placeholders will be discarded.  
     *   
     * Available placeholders:  
     * **{AttackDisplayId}**: The unique identifier assigned by Dynatrace, for example, "A-1234".  
     * **{Title}**: Location of the attack, for example: "com.dynatrace.Class.method():120"  
     * **{Type}**: The type of attack, for example: "SQL Injection".  
     * **{AttackUrl}**: URL of the attack in Dynatrace.  
     * **{ProcessGroupId}**: Details about the process group attacked.  
     * **{EntryPoint}**: The entry point of the attack into the process, for example: "/login". Can be empty.  
     * **{Status}**: The status of the attack, for example: "Exploited"  
     * **{Timestamp}**: When the attack happened.  
     * **{VulnerabilityName}**: Name of the associated code-level vulnerability, for example: "InMemoryDatabaseCaller.getAccountInfo():51". Can be empty.
     */
    summary: string;
}

export interface AppsecNotificationAttackCandidateBasedWebhookPayload {
    /**
     * This is the content your notification message will include when users view it.  
     * In case a value of an attack is not set, the placeholder will be replaced by an empty string.. **Note:** Security notifications contain sensitive information. Excessive usage of placeholders in the custom payload might leak information to untrusted parties.  
     *   
     * Available placeholders:  
     * **{AttackDisplayId}**: The unique identifier assigned by Dynatrace, for example: "A-1234".  
     * **{Title}**: Location of the attack, for example: "com.dynatrace.Class.method():120"  
     * **{Type}**: The type of attack, for example: "SQL Injection".  
     * **{AttackUrl}**: URL of the attack in Dynatrace.  
     * **{ProcessGroupId}**: Details about the process group attacked.  
     * **{EntryPoint}**: The entry point of the attack into the process, for example: "/login". Can be empty.  
     * **{Status}**: The status of the attack, for example: "Exploited"  
     * **{Timestamp}**: When the attack happened.  
     * **{VulnerabilityName}**: Name of the associated code-level vulnerability, for example: "InMemoryDatabaseCaller.getAccountInfo():51". Can be empty.
     */
    payload: string;
}

export interface AppsecNotificationEmailConfiguration {
    /**
     * BCC
     */
    bccRecipients?: string[];
    /**
     * CC
     */
    ccRecipients?: string[];
    /**
     * To
     */
    recipients: string[];
}

export interface AppsecNotificationJiraConfiguration {
    /**
     * The API token for the Jira profile. Using password authentication [was deprecated by Jira](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-basic-auth-and-cookie-based-auth/)
     */
    apiToken: string;
    /**
     * The type of the Jira issue to be created by this notification.
     *
     * To find all available issue types or create your own, in Jira, go to Project settings > Issue types.
     */
    issueType: string;
    /**
     * The project key of the Jira issue to be created by this notification.
     */
    projectKey: string;
    /**
     * The URL of the Jira API endpoint.
     */
    url: string;
    /**
     * The username of the Jira profile.
     */
    username: string;
}

export interface AppsecNotificationSecurityProblemBasedEmailPayload {
    /**
     * The template of the email notifications.  
     * In case a value of a security problem is not set, the placeholder will be replaced by an empty string.. **Note:** Security notifications contain sensitive information. Excessive usage of placeholders in the description might leak information to untrusted parties.  
     *   
     * Available placeholders:  
     * **{SecurityProblemId}**: The unique identifier assigned by Dynatrace, for example, "S-1234".  
     * **{Title}**: A short summary of the type of vulnerability that was found, for example, "Remote Code Execution".  
     * **{Description}**: A more detailed description of the vulnerability.  
     * **{CvssScore}**: CVSS score of the identified vulnerability, for example, "10.0". Can be empty. 
     * **{DavisSecurityScore}**: [Davis Security Score](https://www.dynatrace.com/support/help/how-to-use-dynatrace/application-security/davis-security-score/) is an enhanced risk-calculation score based on the CVSS, for example, "10.0".  
     * **{Severity}**: The security problem severity, for example, "Critical" or "Medium".  
     * **{SecurityProblemUrl}**: URL of the security problem in Dynatrace.  
     * **{AffectedEntities}**: Details about the entities affected by the security problem in a json array.  
     * **{ManagementZones}**: Comma-separated list of all management zones affected by the vulnerability at the time of detection.  
     * **{Tags}**: Comma-separated list of tags that are defined for a vulnerability's affected entities. For example: "PROD, owner:John". Assign the tag's key in square brackets: **{Tags[key]}** to get all associated values. For example: "{Tags[owner]}" will be resolved as "John". Tags without an assigned value will be resolved as empty string.  
     * **{Exposed}**: Describes whether one or more affected process is exposed to the public Internet. Can be "true" or "false".  
     * **{DataAssetsReachable}**: Describes whether one or more affected process can reach data assets. Can be "true" or "false".  
     * **{ExploitAvailable}**: Describes whether there's an exploit available for the vulnerability. Can be "true" or "false".
     */
    body: string;
    /**
     * The subject of the email notifications.. Available placeholders:  
     * **{SecurityProblemId}**: The unique identifier assigned by Dynatrace, for example, "S-1234".  
     * **{Title}**: A short summary of the type of vulnerability that was found, for example, "Remote Code Execution".  
     * **{CvssScore}**: CVSS score of the identified vulnerability, for example, "10.0". Can be empty. 
     * **{DavisSecurityScore}**: [Davis Security Score](https://www.dynatrace.com/support/help/how-to-use-dynatrace/application-security/davis-security-score/) is an enhanced risk-calculation score based on the CVSS, for example, "10.0".  
     * **{Severity}**: The security problem severity, for example, "Critical" or "Medium".  
     * **{SecurityProblemUrl}**: URL of the security problem in Dynatrace.  
     * **{Exposed}**: Describes whether one or more affected process is exposed to the public Internet. Can be "true" or "false".  
     * **{DataAssetsReachable}**: Describes whether one or more affected process can reach data assets. Can be "true" or "false".  
     * **{ExploitAvailable}**: Describes whether there's an exploit available for the vulnerability. Can be "true" or "false".
     */
    subject: string;
}

export interface AppsecNotificationSecurityProblemBasedJiraPayload {
    /**
     * The description of the Jira issue to be created by this notification.  
     * In case a value of a security problem is not set, the placeholder will be replaced by an empty string.. **Note:** Security notifications contain sensitive information. Excessive usage of placeholders in the description might leak information to untrusted parties.  
     *   
     * Available placeholders:  
     * **{SecurityProblemId}**: The unique identifier assigned by Dynatrace, for example, "S-1234".  
     * **{Title}**: A short summary of the type of vulnerability that was found, for example, "Remote Code Execution".  
     * **{Description}**: A more detailed description of the vulnerability.  
     * **{CvssScore}**: CVSS score of the identified vulnerability, for example, "10.0". Can be empty. 
     * **{DavisSecurityScore}**: [Davis Security Score](https://www.dynatrace.com/support/help/how-to-use-dynatrace/application-security/davis-security-score/) is an enhanced risk-calculation score based on the CVSS, for example, "10.0".  
     * **{Severity}**: The security problem severity, for example, "Critical" or "Medium".  
     * **{SecurityProblemUrl}**: URL of the security problem in Dynatrace.  
     * **{AffectedEntities}**: Details about the entities affected by the security problem in a json array.  
     * **{ManagementZones}**: Comma-separated list of all management zones affected by the vulnerability at the time of detection.  
     * **{Tags}**: Comma-separated list of tags that are defined for a vulnerability's affected entities. For example: "PROD, owner:John". Assign the tag's key in square brackets: **{Tags[key]}** to get all associated values. For example: "{Tags[owner]}" will be resolved as "John". Tags without an assigned value will be resolved as empty string.  
     * **{Exposed}**: Describes whether one or more affected process is exposed to the public Internet. Can be "true" or "false".  
     * **{DataAssetsReachable}**: Describes whether one or more affected process can reach data assets. Can be "true" or "false".  
     * **{ExploitAvailable}**: Describes whether there's an exploit available for the vulnerability. Can be "true" or "false".
     */
    description: string;
    /**
     * The summary of the Jira issue to be created by this notification.. **Note:** The Jira summary field must contain less than 255 characters. Any content exceeding this limit after evaluating the placeholders will be discarded.  
     *   
     * Available placeholders:  
     * **{SecurityProblemId}**: The unique identifier assigned by Dynatrace, for example, "S-1234".  
     * **{Title}**: A short summary of the type of vulnerability that was found, for example, "Remote Code Execution".  
     * **{CvssScore}**: CVSS score of the identified vulnerability, for example, "10.0". Can be empty. 
     * **{DavisSecurityScore}**: [Davis Security Score](https://www.dynatrace.com/support/help/how-to-use-dynatrace/application-security/davis-security-score/) is an enhanced risk-calculation score based on the CVSS, for example, "10.0".  
     * **{Severity}**: The security problem severity, for example, "Critical" or "Medium".  
     * **{SecurityProblemUrl}**: URL of the security problem in Dynatrace.  
     * **{Exposed}**: Describes whether one or more affected process is exposed to the public Internet. Can be "true" or "false".  
     * **{DataAssetsReachable}**: Describes whether one or more affected process can reach data assets. Can be "true" or "false".  
     * **{ExploitAvailable}**: Describes whether there's an exploit available for the vulnerability. Can be "true" or "false".
     */
    summary: string;
}

export interface AppsecNotificationSecurityProblemBasedWebhookPayload {
    /**
     * This is the content your notification message will include when users view it.  
     * In case a value of a security problem is not set, the placeholder will be replaced by an empty string.. **Note:** Security notifications contain sensitive information. Excessive usage of placeholders in the custom payload might leak information to untrusted parties.  
     *   
     * Available placeholders:  
     * **{SecurityProblemId}**: The unique identifier assigned by Dynatrace, for example, "S-1234".  
     * **{Title}**: A short summary of the type of vulnerability that was found, for example, "Remote Code Execution".  
     * **{Description}**: A more detailed description of the vulnerability.  
     * **{CvssScore}**: CVSS score of the identified vulnerability, for example, "10.0". Can be empty. 
     * **{DavisSecurityScore}**: [Davis Security Score](https://www.dynatrace.com/support/help/how-to-use-dynatrace/application-security/davis-security-score/) is an enhanced risk-calculation score based on the CVSS, for example, "10.0".  
     * **{Severity}**: The security problem severity, for example, "Critical" or "Medium".  
     * **{SecurityProblemUrl}**: URL of the security problem in Dynatrace.  
     * **{AffectedEntities}**: Details about the entities affected by the security problem in a json array.  
     * **{ManagementZones}**: Comma-separated list of all management zones affected by the vulnerability at the time of detection.  
     * **{Tags}**: Comma-separated list of tags that are defined for a vulnerability's affected entities. For example: "PROD, owner:John". Assign the tag's key in square brackets: **{Tags[key]}** to get all associated values. For example: "{Tags[owner]}" will be resolved as "John". Tags without an assigned value will be resolved as empty string.  
     * **{Exposed}**: Describes whether one or more affected process is exposed to the public Internet. Can be "true" or "false".  
     * **{DataAssetsReachable}**: Describes whether one or more affected process can reach data assets. Can be "true" or "false".  
     * **{ExploitAvailable}**: Describes whether there's an exploit available for the vulnerability. Can be "true" or "false".
     */
    payload: string;
}

export interface AppsecNotificationWebhookConfiguration {
    /**
     * Accept any SSL certificate (including self-signed and invalid certificates)
     */
    acceptAnyCertificate: boolean;
    /**
     * Use additional HTTP headers to attach any additional information, for example, configuration, authorization, or metadata.  
     *   
     * Note that JSON-based webhook endpoints require the addition of the **Content-Type: application/json** header to enable escaping of special characters and to avoid malformed JSON content.
     */
    headers?: outputs.AppsecNotificationWebhookConfigurationHeaders;
    /**
     * Webhook endpoint URL
     */
    url: string;
}

export interface AppsecNotificationWebhookConfigurationHeaders {
    headers: outputs.AppsecNotificationWebhookConfigurationHeadersHeader[];
}

export interface AppsecNotificationWebhookConfigurationHeadersHeader {
    /**
     * no documentation available
     */
    name: string;
    /**
     * Secret HTTP header value
     */
    secret: boolean;
    /**
     * The secret value of the HTTP header. May contain an empty value.
     */
    secretValue?: string;
    /**
     * The value of the HTTP header. May contain an empty value.
     */
    value?: string;
}

export interface AttackAllowlistAttackHandling {
    /**
     * Possible Values: `MONITOR`, `OFF`
     */
    blockingStrategy: string;
}

export interface AttackAllowlistCriteria {
    /**
     * Only consider attacks matching the specified pattern.
     */
    attackPattern?: string;
    /**
     * Source IP
     */
    sourceIp?: string;
}

export interface AttackAllowlistMetadata {
    /**
     * no documentation available
     */
    comment: string;
}

export interface AttackAllowlistResourceAttributeConditions {
    resourceAttributeConditions: outputs.AttackAllowlistResourceAttributeConditionsResourceAttributeCondition[];
}

export interface AttackAllowlistResourceAttributeConditionsResourceAttributeCondition {
    /**
     * Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_END_WITH`, `DOES_NOT_EXIST`, `DOES_NOT_START_WITH`, `ENDS_WITH`, `EQUALS`, `EXISTS`, `NOT_EQUALS`, `STARTS_WITH`
     */
    matcher: string;
    /**
     * Resource attribute key
     */
    resourceAttributeKey: string;
    /**
     * Resource attribute value
     */
    resourceAttributeValue?: string;
}

export interface AttackAllowlistRules {
    rules: outputs.AttackAllowlistRulesRule[];
}

export interface AttackAllowlistRulesRule {
    /**
     * Possible Values: `ACTOR_IP`, `DETECTION_TYPE`, `ENTRY_POINT_PAYLOAD`, `ENTRY_POINT_PAYLOAD_DOMAIN`, `ENTRY_POINT_PAYLOAD_PORT`, `ENTRY_POINT_URL_PATH`
     */
    criteriaKey: string;
    /**
     * Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_END_WITH`, `DOES_NOT_STARTS_WITH`, `ENDS_WITH`, `EQUALS`, `IP_CIDR`, `NOT_EQUALS`, `NOT_IN_IP_CIDR`, `STARTS_WITH`
     */
    criteriaMatcher: string;
    /**
     * Possible Values: `CMD_INJECTION`, `JNDI_INJECTION`, `SQL_INJECTION`, `SSRF`
     */
    criteriaValueDetectionType?: string;
    /**
     * Value
     */
    criteriaValueFreeText?: string;
}

export interface AttackRulesAttackHandling {
    /**
     * Possible Values: `BLOCK`, `MONITOR`, `OFF`
     */
    blockingStrategy: string;
}

export interface AttackRulesCriteria {
    /**
     * Possible Values: `ANY`, `CMD_INJECTION`, `JNDI_INJECTION`, `SQL_INJECTION`, `SSRF`
     */
    attackType: string;
    /**
     * Process group
     *
     * @deprecated This field has been deprecated
     */
    processGroup?: string;
}

export interface AttackRulesMetadata {
    /**
     * no documentation available
     */
    comment: string;
}

export interface AttackRulesResourceAttributeConditions {
    resourceAttributeConditions: outputs.AttackRulesResourceAttributeConditionsResourceAttributeCondition[];
}

export interface AttackRulesResourceAttributeConditionsResourceAttributeCondition {
    /**
     * Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_END_WITH`, `DOES_NOT_EXIST`, `DOES_NOT_START_WITH`, `ENDS_WITH`, `EQUALS`, `EXISTS`, `NOT_EQUALS`, `STARTS_WITH`
     */
    matcher: string;
    /**
     * Resource attribute key
     */
    resourceAttributeKey: string;
    /**
     * Resource attribute value
     */
    resourceAttributeValue?: string;
}

export interface AttackSettingsDefaultAttackHandling {
    /**
     * (v1.290) Possible Values: `BLOCK`, `MONITOR`, `OFF`
     */
    blockingStrategyDotNet?: string;
    /**
     * Possible Values: `BLOCK`, `MONITOR`, `OFF`
     */
    blockingStrategyGo?: string;
    /**
     * Possible Values: `BLOCK`, `MONITOR`, `OFF`
     */
    blockingStrategyJava: string;
}

export interface AutomationBusinessCalendarHolidays {
    /**
     * A (unordered) list of holidays valid in this calendar
     */
    holidays: outputs.AutomationBusinessCalendarHolidaysHoliday[];
}

export interface AutomationBusinessCalendarHolidaysHoliday {
    /**
     * The date of this holiday: Example `2017-07-04` for July 4th 2017
     */
    date: string;
    /**
     * An official name for this holiday
     */
    title: string;
}

export interface AutomationSchedulingRuleFixedOffset {
    /**
     * Every day of the scheduling rule referred to with `rule` will be offset by this amount of days
     */
    offset: number;
    /**
     * Refers to a scheduling rule for which to produce valid days with an offset
     */
    rule: string;
}

export interface AutomationSchedulingRuleGrouping {
    /**
     * The IDs of scheduling rules determining the days the schedule should apply to
     */
    combines: string[];
    /**
     * The IDs of scheduling rules determining the days the schedule is allowed apply to. If specified, only days that are covered by `combine` and `intersect` are valid days for the schedule
     */
    intersects?: string[];
    /**
     * The IDs of scheduling rules determing the days the schedule must not apply. If specified it reduces down the set of days covered by `combine` and `intersect`
     */
    subtracts?: string[];
}

export interface AutomationSchedulingRuleRecurrence {
    /**
     * The recurrence start. Example: `2017-07-04` represents July 4th 2017
     */
    datestart: string;
    /**
     * Restricts the recurrence to specific days within a month. `1`, `2`, `3`, ... refers to the first, second, third day in the month. You can also specify negative values to refer to values relative to the last day. `-1` refers to the last day, `-2` refers to the second to the last day, ...
     */
    daysInMonths?: number[];
    /**
     * Restricts the recurrence to specific days within a year. `1`, `2`, `3`, ... refers to the first, second, third day of the year. You can also specify negative values to refer to values relative to the last day. `-1` refers to the last day, `-2` refers to the second to the last day, ...
     */
    daysInYears?: number[];
    /**
     * Restricts the recurrence to specific days relative to Easter Sunday. `0` will yield the Easter Sunday itself
     */
    easters?: number[];
    /**
     * Possible values are `YEARLY`, `MONTHLY`, `WEEKLY`, `DAILY`, `HOURLY`, `MINUTELY` and `SECONDLY`. Example: `frequency` = `DAILY` and `interval` = `2` schedules for every other day
     */
    frequency: string;
    /**
     * The interval between each iteration. Default: 1. Example: `frequency` = `DAILY` and `interval` = `2` schedules for every other day
     */
    interval?: number;
    /**
     * Restricts the recurrence to specific months. `1` for `January`, `2` for `February`, ..., `12` for `December`
     */
    months?: number[];
    /**
     * Restricts the recurrence to specific week days. Possible values are `MO`, `TU`, `WE`, `TH`, `FR`, `SA` and `SU`
     */
    weekdays?: string[];
    /**
     * Restricts the recurrence to specific weeks within a year. `1`, `2`, `3`, ... refers to the first, second, third week of the year. You can also specify negative values to refer to values relative to the last week. `-1` refers to the last week, `-2` refers to the second to the last week, ...
     */
    weeks?: number[];
    /**
     * Possible values are `WORKING` (Work days), `HOLIDAYS` (Holidays) and `OFF` (Weekends + Holidays)
     */
    workdays: string;
}

export interface AutomationSchedulingRuleRelativeOffset {
    direction: string;
    sourceRule: string;
    targetRule: string;
}

export interface AutomationWorkflowAwsConnectionsWebIdentity {
    /**
     * An optional list of policies that can be used to restrict the AWS role
     */
    policyArns?: string[];
    /**
     * The ARN of the AWS role that should be assumed
     */
    roleArn: string;
}

export interface AutomationWorkflowTasks {
    /**
     * TODO: No documentation available
     */
    tasks?: outputs.AutomationWorkflowTasksTask[];
}

export interface AutomationWorkflowTasksTask {
    /**
     * Specifies the action type for the task. Examples include `dynatrace.automations:http-function`, `dynatrace.automations:run-javascript`, and `dynatrace.automations:execute-dql-query`. Additional action types are also supported.
     */
    action: string;
    /**
     * Specifies whether a task should be skipped as a no operation or not
     */
    active?: boolean;
    /**
     * Required if `withItems` is specified. By default loops execute sequentially with concurrency set to 1. You can increase how often it runs in parallel
     */
    concurrency?: string;
    /**
     * Conditions that have to be met in order to execute that task
     */
    conditions?: outputs.AutomationWorkflowTasksTaskConditions;
    /**
     * A description for this task
     */
    description?: string;
    /**
     * Parameters and values for this task as JSON code. Contents depend on the kind of task - determined by the attribute `action`
     */
    input?: string;
    /**
     * The name of the task
     */
    name: string;
    /**
     * Layouting information about the task tile when visualized. If not specified Dynatrace will position the task tiles automatically
     */
    position?: outputs.AutomationWorkflowTasksTaskPosition;
    /**
     * Configure whether to automatically rerun the task on failure. If not specified no retries will be attempted
     */
    retry?: outputs.AutomationWorkflowTasksTaskRetry;
    /**
     * Specifies a default task timeout in seconds. 15 * 60 (15min) is used when not set. Minimum 1. Maximum 604800
     */
    timeout?: string;
    /**
     * Specifies a default task wait before in seconds. 0 is used when not set
     */
    waitBefore?: string;
    /**
     * Iterates over items in a list, allowing actions to be executed repeatedly. Example: Specifying `item in [1, 2, 3]` here will execute the task three times for the numbers 1, 2 and 3 - with the current number available for scripting using the expression `{{ _.item }}`
     */
    withItems?: string;
}

export interface AutomationWorkflowTasksTaskConditions {
    /**
     * A custom condition that needs to be met for the current task to get executed
     */
    custom?: string;
    /**
     * Possible values are `SKIP` and `STOP`
     */
    else?: string;
    /**
     * key/value pairs where the `key` is the name of another task and the value the status it needs to be for the current task to get executed. Possible values are `SUCCESS`, `ERROR`, `ANY`, `OK` (Success or Skipped) and `NOK` (Error or Cancelled)
     */
    states?: {[key: string]: string};
}

export interface AutomationWorkflowTasksTaskPosition {
    /**
     * x-coordinate for layouting
     */
    x: number;
    /**
     * y-coordinate for layouting
     */
    y: number;
}

export interface AutomationWorkflowTasksTaskRetry {
    /**
     * Specifies a maximum number of times that a task can be repeated in case it fails on execution. You can specify either a number between 1 and 99 here or use an expression (`{{}}`). Default: 1
     */
    count?: string;
    /**
     * Specifies a delay in seconds between subsequent task retries. You can specify either a number between 1 and 3600 here or an expression (`{{...}}`). Default: 1
     */
    delay?: string;
    /**
     * Specifies whether retrying the failed iterations or the whole loop. Default: true
     */
    failedLoopIterationsOnly?: boolean;
}

export interface AutomationWorkflowTrigger {
    /**
     * If specified the workflow is getting triggered based on events
     */
    event?: outputs.AutomationWorkflowTriggerEvent;
    /**
     * If specified the workflow is getting triggered based on a schedule
     */
    schedule?: outputs.AutomationWorkflowTriggerSchedule;
}

export interface AutomationWorkflowTriggerEvent {
    /**
     * If specified the workflow is getting triggered based on a schedule
     */
    active?: boolean;
    /**
     * If specified the workflow is getting triggered based on events
     */
    config?: outputs.AutomationWorkflowTriggerEventConfig;
}

export interface AutomationWorkflowTriggerEventConfig {
    /**
     * Contains trigger configuration based on Davis Events. Either `davisEvent`, `davisProblem`, `davisEvent` or `config` need to set
     */
    davisEvent?: outputs.AutomationWorkflowTriggerEventConfigDavisEvent;
    /**
     * Contains trigger configuration based on Davis Problems. Either `davisEvent`, `davisProblem`, `davisEvent` or `config` need to set
     */
    davisProblem?: outputs.AutomationWorkflowTriggerEventConfigDavisProblem;
    /**
     * Contains trigger configuration based on Davis Problems. Either `davisEvent`, `davisProblem`, `davisEvent` or `config` need to set
     */
    event?: outputs.AutomationWorkflowTriggerEventConfigEvent;
    /**
     * The type of the trigger configuration to expect within attribute `value`. Only required if `config` is set. Must not be set if `davisEvent`, `davisProblem` or `event` are present
     */
    type?: string;
    /**
     * Contains JSON encoded trigger configuration if the trigger type is neither `davisEvent`, `davisProblem` or `event`. It requires the attribute `type` to be set in combination
     */
    value?: string;
}

export interface AutomationWorkflowTriggerEventConfigDavisEvent {
    /**
     * key/value pairs for entity tags to match for. For tags that don't require a value, just specify an empty string as value. Omit this attribute if all entities should match
     */
    entityTags?: {[key: string]: string};
    /**
     * Specifies whether all or just any of the configured entity tags need to match. Possible values: `all` and `any`. Omit this attribute if all entities should match
     */
    entityTagsMatch?: string;
    /**
     * The Davis Events to match on
     */
    names?: outputs.AutomationWorkflowTriggerEventConfigDavisEventNames;
    /**
     * If set to `true` closing a problem also is considered an event that triggers the execution
     */
    onProblemClose?: boolean;
    /**
     * The types of davis events to trigger an execution. Possible values are `CUSTOM_ANNOTATION`, `APPLICATION_UNEXPECTED_HIGH_LOAD`, `APPLICATION_UNEXPECTED_LOW_LOAD`, `APPLICATION_OVERLOAD_PREVENTION`, `APPLICATION_SLOWDOWN`, `AVAILABILITY_EVENT`, `LOG_AVAILABILITY`, `EC2_HIGH_CPU`, `RDS_BACKUP_COMPLETED`, `RDS_BACKUP_STARTED`, `SYNTHETIC_GLOBAL_OUTAGE`, `SYNTHETIC_LOCAL_OUTAGE`, `SYNTHETIC_TEST_LOCATION_SLOWDOWN`, `CUSTOM_CONFIGURATION`, `PROCESS_NA_HIGH_CONN_FAIL_RATE`, `OSI_HIGH_CPU`, `CUSTOM_ALERT`, `CUSTOM_APP_CRASH_RATE_INCREASED`, `CUSTOM_APPLICATION_ERROR_RATE_INCREASED`, `CUSTOM_APPLICATION_UNEXPECTED_HIGH_LOAD`, `CUSTOM_APPLICATION_UNEXPECTED_LOW_LOAD`, `CUSTOM_APPLICATION_OVERLOAD_PREVENTION`, `CUSTOM_APPLICATION_SLOWDOWN`, `PGI_CUSTOM_AVAILABILITY`, `PGI_CUSTOM_ERROR`, `CUSTOM_INFO`, `PGI_CUSTOM_PERFORMANCE`, `CUSTOM_DEPLOYMENT`, `DEPLOYMENT_CHANGED_CHANGE`, `DEPLOYMENT_CHANGED_NEW`, `DEPLOYMENT_CHANGED_REMOVED`, `EBS_VOLUME_HIGH_LATENCY`, `ERROR_EVENT`, `LOG_ERROR`, `ESXI_HOST_CONNECTION_FAILED`, `ESXI_HOST_CONNECTION_LOST`, `ESXI_GUEST_CPU_LIMIT_REACHED`, `ESXI_GUEST_ACTIVE_SWAP_WAIT`, `ESXI_HOST_CPU_SATURATION`, `ESXI_HOST_MEMORY_SATURATION`, `ESXI_HOST_MAINTENANCE`, `ESXI_HOST_NETWORK_PROBLEMS`, `ESXI_HOST_NO_CONNECTION`, `ESXI_HOST_SHUTDOWN`, `ESXI_HOST_DISK_SLOW`, `ESXI_HOST_UP`, `ESXI_HOST_TIMEOUT`, `ESXI_VM_IMPACT_HOST_CPU_SATURATION`, `ESXI_VM_IMPACT_HOST_MEMORY_SATURATION`, `DATABASE_CONNECTION_FAILURE`, `RDS_AZ_FAILOVER_COMPLETED`, `RDS_AZ_FAILOVER_STARTED`, `SERVICE_ERROR_RATE_INCREASED`, `RDS_HIGH_LATENCY`, `OSI_NIC_UTILIZATION_HIGH`, `OSI_NIC_ERRORS_HIGH`, `PGI_HAPROXY_QUEUED_REQUESTS_HIGH`, `PGI_RMQ_HIGH_FILE_DESC_USAGE`, `PGI_RMQ_HIGH_MEM_USAGE`, `PGI_RMQ_HIGH_PROCESS_USAGE`, `PGI_RMQ_HIGH_SOCKETS_USAGE`, `OSI_NIC_DROPPED_PACKETS_HIGH`, `PGI_MYSQL_SLOW_QUERIES_RATE_HIGH`, `PGI_KEYSTONE_SLOW`, `PGI_HAPROXY_SESSION_USAGE_HIGH`, `HOST_LOG_AVAILABILITY`, `HOST_LOG_ERROR`, `OSI_GRACEFULLY_SHUTDOWN`, `HOST_LOG_MATCHED`, `OSI_UNEXPECTEDLY_UNAVAILABLE`, `HOST_LOG_PERFORMANCE`, `HOST_OF_SERVICE_UNAVAILABLE`, `HTTP_CHECK_GLOBAL_OUTAGE`, `HTTP_CHECK_LOCAL_OUTAGE`, `HTTP_CHECK_TEST_LOCATION_SLOWDOWN`, `ESXI_HOST_DISK_QUEUE_SLOW`, `LOG_MATCHED`, `APPLICATION_ERROR_RATE_INCREASED`, `APPLICATION_JS_FRAMEWORK_DETECTED`, `AWS_LAMBDA_HIGH_ERROR_RATE`, `ELB_HIGH_BACKEND_ERROR_RATE`, `ELB_HIGH_FRONTEND_ERROR_RATE`, `ELB_HIGH_UNHEALTHY_HOST_RATE`, `PROCESS_HIGH_GC_ACTIVITY`, `ESXI_HOST_DATASTORE_LOW_DISK_SPACE`, `OSI_DOCKER_DEVICEMAPPER_LOW_DATA_SPACE`, `OSI_LOW_DISK_SPACE`, `OSI_DOCKER_DEVICEMAPPER_LOW_METADATA_SPACE`, `OSI_DISK_LOW_INODES`, `PGI_RMQ_LOW_DISK_SPACE`, `RDS_LOW_STORAGE_SPACE`, `MARKED_FOR_TERMINATION`, `PROCESS_MEMORY_RESOURCE_EXHAUSTED`, `OSI_HIGH_MEMORY`, `MOBILE_APP_CRASH_RATE_INCREASED`, `MOBILE_APPLICATION_ERROR_RATE_INCREASED`, `MOBILE_APPLICATION_OVERLOAD_PREVENTION`, `MOBILE_APPLICATION_SLOWDOWN`, `MOBILE_APPLICATION_UNEXPECTED_HIGH_LOAD`, `MOBILE_APPLICATION_UNEXPECTED_LOW_LOAD`, `MONITORING_UNAVAILABLE`, `PROCESS_NA_HIGH_LOSS_RATE`, `PGI_KEYSTONE_UNHEALTHY`, `ESXI_HOST_OVERLOADED_STORAGE`, `PERFORMANCE_EVENT`, `LOG_PERFORMANCE`, `PGI_LOG_AVAILABILITY`, `PGI_CRASHED_INFO`, `PROCESS_CRASHED`, `PGI_LOG_ERROR`, `PG_LOW_INSTANCE_COUNT`, `PGI_LOG_MATCHED`, `PGI_MEMDUMP`, `PGI_LOG_PERFORMANCE`, `PROCESS_RESTART`, `PGI_UNAVAILABLE`, `RDS_HIGH_CPU`, `RDS_LOW_MEMORY`, `RDS_OF_SERVICE_UNAVAILABLE`, `RESOURCE_CONTENTION_EVENT`, `SERVICE_SLOWDOWN`, `RDS_RESTART`, `RDS_RESTART_SEQUENCE`, `PGI_OF_SERVICE_UNAVAILABLE`, `OSI_SLOW_DISK`, `SYNTHETIC_NODE_OUTAGE`, `SYNTHETIC_PRIVATE_LOCATION_OUTAGE`, `EXTERNAL_SYNTHETIC_TEST_OUTAGE`, `EXTERNAL_SYNTHETIC_TEST_SLOWDOWN`, `PROCESS_THREADS_RESOURCE_EXHAUSTED`, `SERVICE_UNEXPECTED_HIGH_LOAD`, `SERVICE_UNEXPECTED_LOW_LOAD`, `ESXI_VM_DISCONNECTED`, `OPENSTACK_VM_LAUNCH_FAILED`, `ESXI_HOST_VM_MOTION_LEFT`, `ESXI_HOST_VM_MOTION_ARRIVED`, `ESXI_VM_MOTION`, `OPENSTACK_VM_MOTION`, `ESXI_VM_POWER_OFF`, `ESXI_VM_SHUTDOWN`, `OPENSTACK_HOST_VM_SHUTDOWN`, `ESXI_VM_START`, `ESXI_HOST_VM_STARTED`, `OPENSTACK_HOST_VM_STARTED`
     */
    types?: string[];
}

export interface AutomationWorkflowTriggerEventConfigDavisEventNames {
    /**
     * A combination of name and match
     */
    names?: outputs.AutomationWorkflowTriggerEventConfigDavisEventNamesName[];
}

export interface AutomationWorkflowTriggerEventConfigDavisEventNamesName {
    /**
     * Possible values: `equals` and `contains`. The Davis event name must equal or contain the string provided in attribute `name`
     */
    match: string;
    /**
     * The event name
     */
    name: string;
}

export interface AutomationWorkflowTriggerEventConfigDavisProblem {
    categories: outputs.AutomationWorkflowTriggerEventConfigDavisProblemCategory[];
    customFilter?: string;
    /**
     * key/value pairs for entity tags to match for. For tags that don't require a value, just specify an empty string as value. Omit this attribute if all entities should match
     */
    entityTags?: {[key: string]: string};
    /**
     * Specifies whether all or just any of the configured entity tags need to match. Possible values: `all` and `any`. Omit this attribute if all entities should match
     */
    entityTagsMatch?: string;
    /**
     * If set to `true` closing a problem also is considered an event that triggers the execution
     */
    onProblemClose?: boolean;
}

export interface AutomationWorkflowTriggerEventConfigDavisProblemCategory {
    availability?: boolean;
    custom?: boolean;
    error?: boolean;
    info?: boolean;
    monitoringUnavailable?: boolean;
    resource?: boolean;
    slowdown?: boolean;
}

export interface AutomationWorkflowTriggerEventConfigEvent {
    /**
     * Possible values: `events` or `bizevents`. Default: `events`
     */
    eventType?: string;
    /**
     * A query based on DQL for events that trigger executions
     */
    query: string;
}

export interface AutomationWorkflowTriggerSchedule {
    /**
     * The trigger is enabled (`true`) or not (`false`). Default is `false`
     */
    active?: boolean;
    /**
     * Advanced restrictions for the schedule to trigger executions
     */
    filterParameters?: outputs.AutomationWorkflowTriggerScheduleFilterParameters;
    /**
     * Refers to a configured rule that determines at which days the schedule should be active. If not specified it implies that the schedule is valid every day
     */
    rule?: string;
    /**
     * A time zone the scheduled times to align with. If not specified it will be chosen automatically based on the location of the Dynatrace Server
     */
    timeZone: string;
    /**
     * Detailed configuration about the timing constraints that trigger the execution
     */
    trigger: outputs.AutomationWorkflowTriggerScheduleTrigger;
}

export interface AutomationWorkflowTriggerScheduleFilterParameters {
    /**
     * If specified, the schedule will end triggering executions af the given amount of executions. Minimum: 1, Maximum: 10
     */
    count?: number;
    /**
     * If specified, the schedule won't trigger executions before the given date
     */
    earliestStart?: string;
    /**
     * If specified, the schedule won't trigger executions before the given time
     */
    earliestStartTime?: string;
    /**
     * If specified, the schedule won't trigger exeuctions on the given dates
     */
    excludeDates?: string[];
    /**
     * If specified, the schedule will trigger executions on the given dates, even if the main configuration prohibits it
     */
    includeDates?: string[];
    /**
     * If specified, the schedule won't trigger executions after the given date
     */
    until?: string;
}

export interface AutomationWorkflowTriggerScheduleTrigger {
    /**
     * Triggers the schedule every n minutes within a given time frame - specifying the end time on any valid day in 24h format (e.g. 14:22:44). Conflicts with `cron` and `time`. Required with `intervalMinutes` and `betweenStart`
     */
    betweenEnd?: string;
    /**
     * Triggers the schedule every n minutes within a given time frame - specifying the start time on any valid day in 24h format (e.g. 13:22:44). Conflicts with `cron` and `time`. Required with `intervalMinutes` and `betweenEnd`
     */
    betweenStart?: string;
    /**
     * Configures using cron syntax. Conflicts with `time`, `intervalMinutes`, `betweenStart` and `betweenEnd`
     */
    cron?: string;
    /**
     * Triggers the schedule every n minutes within a given time frame. Minimum: 1, Maximum: 720. Required with `betweenStart` and `betweenEnd`. Conflicts with `cron` and `time`
     */
    intervalMinutes?: number;
    /**
     * Specifies a fixed time the schedule will trigger at in 24h format (e.g. `14:23:59`). Conflicts with `cron`, `intervalMinutes`, `betweenStart` and `betweenEnd`
     */
    time?: string;
}

export interface AutotagEntitySelectorBasedRule {
    /**
     * The rule is enabled (`true`) or disabled (`false`)
     */
    enabled?: boolean;
    /**
     * Changes applied to the value after applying the value format. Possible values are `LEAVE_TEXT_AS_IS`, `TO_LOWER_CASE` and `TO_UPPER_CASE`. Default is `LEAVE_TEXT_AS_IS`
     */
    normalization?: string;
    /**
     * The entity selector string, by which the entities are selected
     */
    selector?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value of the entity-selector-based auto-tag. If specified, the tag is used in the `name:valueFormat` format. 
     *
     * For example, you can extend the `Infrastructure` tag to `Infrastructure:Windows` and `Infrastructure:Linux`
     */
    valueFormat?: string;
}

export interface AutotagRule {
    /**
     * A list of matching rules for the management zone. The management zone applies only if **all** conditions are fulfilled
     */
    conditions?: outputs.AutotagRuleCondition[];
    /**
     * The rule is enabled (`true`) or disabled (`false`)
     */
    enabled?: boolean;
    /**
     * Changes applied to the value after applying the value format. Possible values are `LEAVE_TEXT_AS_IS`, `TO_LOWER_CASE` and `TO_UPPER_CASE`. Default is `LEAVE_TEXT_AS_IS`
     */
    normalization?: string;
    /**
     * How to apply the management zone to underlying entities:
     *    - `SERVICE_TO_HOST_LIKE`: Apply to underlying hosts of matching services
     *    - `SERVICE_TO_PROCESS_GROUP_LIKE`: Apply to underlying process groups of matching services
     *    - `PROCESS_GROUP_TO_HOST`: Apply to underlying hosts of matching process groups
     *    - `PROCESS_GROUP_TO_SERVICE`: Apply to all services provided by matching process groups
     *    - `HOST_TO_PROCESS_GROUP_INSTANCE`: Apply to processes running on matching hosts
     *    - `CUSTOM_DEVICE_GROUP_TO_CUSTOM_DEVICE`: Apply to custom devices in matching custom device groups
     *    - `AZURE_TO_PG`: Apply to process groups connected to matching Azure entities
     *    - `AZURE_TO_SERVICE`: Apply to services provided by matching Azure entities
     */
    propagationTypes?: string[];
    /**
     * The type of Dynatrace entities the management zone can be applied to
     */
    type: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value of the auto-tag. If specified, the tag is used in the `name:valueFormat` format.  For example, you can extend the `Infrastructure` tag to `Infrastructure:Windows` and `Infrastructure:Linux`.  You can use the following placeholders here:  * `{AwsAutoScalingGroup:Name}`  * `{AwsAvailabilityZone:Name}`  * `{AwsElasticLoadBalancer:Name}`  * `{AwsRelationalDatabaseService:DBName}`  * `{AwsRelationalDatabaseService:Endpoint}`  * `{AwsRelationalDatabaseService:Engine}`  * `{AwsRelationalDatabaseService:InstanceClass}`  * `{AwsRelationalDatabaseService:Name}`  * `{AwsRelationalDatabaseService:Port}`  * `{AzureRegion:Name}`  * `{AzureScaleSet:Name}`  * `{AzureVm:Name}`  * `{CloudFoundryOrganization:Name}`  * `{CustomDevice:DetectedName}`  * `{CustomDevice:DnsName}`  * `{CustomDevice:IpAddress}`  * `{CustomDevice:Port}`  * `{DockerContainerGroupInstance:ContainerName}`  * `{DockerContainerGroupInstance:FullImageName}`  * `{DockerContainerGroupInstance:ImageVersion}`  * `{DockerContainerGroupInstance:StrippedImageName}`  * `{ESXIHost:HardwareModel}`  * `{ESXIHost:HardwareVendor}`  * `{ESXIHost:Name}`  * `{ESXIHost:ProductName}`  * `{ESXIHost:ProductVersion}`  * `{Ec2Instance:AmiId}`  * `{Ec2Instance:BeanstalkEnvironmentName}`  * `{Ec2Instance:InstanceId}`  * `{Ec2Instance:InstanceType}`  * `{Ec2Instance:LocalHostName}`  * `{Ec2Instance:Name}`  * `{Ec2Instance:PublicHostName}`  * `{Ec2Instance:SecurityGroup}`  * `{GoogleComputeInstance:Id}`  * `{GoogleComputeInstance:IpAddresses}`  * `{GoogleComputeInstance:MachineType}`  * `{GoogleComputeInstance:Name}`  * `{GoogleComputeInstance:ProjectId}`  * `{GoogleComputeInstance:Project}`  * `{Host:AWSNameTag}`  * `{Host:AixLogicalCpuCount}`  * `{Host:AzureHostName}`  * `{Host:AzureSiteName}`  * `{Host:BoshDeploymentId}`  * `{Host:BoshInstanceId}`  * `{Host:BoshInstanceName}`  * `{Host:BoshName}`  * `{Host:BoshStemcellVersion}`  * `{Host:CpuCores}`  * `{Host:DetectedName}`  * `{Host:Environment:AppName}`  * `{Host:Environment:BoshReleaseVersion}`  * `{Host:Environment:Environment}`  * `{Host:Environment:Link}`  * `{Host:Environment:Organization}`  * `{Host:Environment:Owner}`  * `{Host:Environment:Support}`  * `{Host:IpAddress}`  * `{Host:LogicalCpuCores}`  * `{Host:OneAgentCustomHostName}`  * `{Host:OperatingSystemVersion}`  * `{Host:PaasMemoryLimit}`  * `{HostGroup:Name}`  * `{KubernetesCluster:Name}`  * `{KubernetesNode:DetectedName}`  * `{OpenstackAvailabilityZone:Name}`  * `{OpenstackZone:Name}`  * `{OpenstackComputeNode:Name}`  * `{OpenstackProject:Name}`  * `{OpenstackVm:UnstanceType}`  * `{OpenstackVm:Name}`  * `{OpenstackVm:SecurityGroup}`  * `{ProcessGroup:AmazonECRImageAccountId}`  * `{ProcessGroup:AmazonECRImageRegion}`  * `{ProcessGroup:AmazonECSCluster}`  * `{ProcessGroup:AmazonECSContainerName}`  * `{ProcessGroup:AmazonECSFamily}`  * `{ProcessGroup:AmazonECSRevision}`  * `{ProcessGroup:AmazonLambdaFunctionName}`  * `{ProcessGroup:AmazonRegion}`  * `{ProcessGroup:ApacheConfigPath}`  * `{ProcessGroup:ApacheSparkMasterIpAddress}`  * `{ProcessGroup:AspDotNetCoreApplicationPath}`  * `{ProcessGroup:AspDotNetCoreApplicationPath}`  * `{ProcessGroup:AzureHostName}`  * `{ProcessGroup:AzureSiteName}`  * `{ProcessGroup:CassandraClusterName}`  * `{ProcessGroup:CatalinaBase}`  * `{ProcessGroup:CatalinaHome}`  * `{ProcessGroup:CloudFoundryAppId}`  * `{ProcessGroup:CloudFoundryAppName}`  * `{ProcessGroup:CloudFoundryInstanceIndex}`  * `{ProcessGroup:CloudFoundrySpaceId}`  * `{ProcessGroup:CloudFoundrySpaceName}`  * `{ProcessGroup:ColdFusionJvmConfigFile}`  * `{ProcessGroup:ColdFusionServiceName}`  * `{ProcessGroup:CommandLineArgs}`  * `{ProcessGroup:DetectedName}`  * `{ProcessGroup:DotNetCommandPath}`  * `{ProcessGroup:DotNetCommand}`  * `{ProcessGroup:DotNetClusterId}`  * `{ProcessGroup:DotNetNodeId}`  * `{ProcessGroup:ElasticsearchClusterName}`  * `{ProcessGroup:ElasticsearchNodeName}`  * `{ProcessGroup:EquinoxConfigPath}`  * `{ProcessGroup:ExeName}`  * `{ProcessGroup:ExePath}`  * `{ProcessGroup:GlassFishDomainName}`  * `{ProcessGroup:GlassFishInstanceName}`  * `{ProcessGroup:GoogleAppEngineInstance}`  * `{ProcessGroup:GoogleAppEngineService}`  * `{ProcessGroup:GoogleCloudProject}`  * `{ProcessGroup:HybrisBinDirectory}`  * `{ProcessGroup:HybrisConfigDirectory}`  * `{ProcessGroup:HybrisConfigDirectory}`  * `{ProcessGroup:HybrisDataDirectory}`  * `{ProcessGroup:IBMCicsRegion}`  * `{ProcessGroup:IBMCtgName}`  * `{ProcessGroup:IBMImsConnectRegion}`  * `{ProcessGroup:IBMImsControlRegion}`  * `{ProcessGroup:IBMImsMessageProcessingRegion}`  * `{ProcessGroup:IBMImsSoapGwName}`  * `{ProcessGroup:IBMIntegrationNodeName}`  * `{ProcessGroup:IBMIntegrationServerName}`  * `{ProcessGroup:IISAppPool}`  * `{ProcessGroup:IISRoleName}`  * `{ProcessGroup:JbossHome}`  * `{ProcessGroup:JbossMode}`  * `{ProcessGroup:JbossServerName}`  * `{ProcessGroup:JavaJarFile}`  * `{ProcessGroup:JavaJarPath}`  * `{ProcessGroup:JavaMainCLass}`  * `{ProcessGroup:KubernetesBasePodName}`  * `{ProcessGroup:KubernetesContainerName}`  * `{ProcessGroup:KubernetesFullPodName}`  * `{ProcessGroup:KubernetesNamespace}`  * `{ProcessGroup:KubernetesPodUid}`  * `{ProcessGroup:MssqlInstanceName}`  * `{ProcessGroup:NodeJsAppBaseDirectory}`  * `{ProcessGroup:NodeJsAppName}`  * `{ProcessGroup:NodeJsScriptName}`  * `{ProcessGroup:OracleSid}`  * `{ProcessGroup:PHPScriptPath}`  * `{ProcessGroup:PHPWorkingDirectory}`  * `{ProcessGroup:Ports}`  * `{ProcessGroup:RubyAppRootPath}`  * `{ProcessGroup:RubyScriptPath}`  * `{ProcessGroup:SoftwareAGInstallRoot}`  * `{ProcessGroup:SoftwareAGProductPropertyName}`  * `{ProcessGroup:SpringBootAppName}`  * `{ProcessGroup:SpringBootProfileName}`  * `{ProcessGroup:SpringBootStartupClass}`  * `{ProcessGroup:TIBCOBusinessWorksAppNodeName}`  * `{ProcessGroup:TIBCOBusinessWorksAppSpaceName}`  * `{ProcessGroup:TIBCOBusinessWorksCeAppName}`  * `{ProcessGroup:TIBCOBusinessWorksCeVersion}`  * `{ProcessGroup:TIBCOBusinessWorksDomainName}`  * `{ProcessGroup:TIBCOBusinessWorksEnginePropertyFilePath}`  * `{ProcessGroup:TIBCOBusinessWorksEnginePropertyFile}`  * `{ProcessGroup:TIBCOBusinessWorksHome}`  * `{ProcessGroup:VarnishInstanceName}`  * `{ProcessGroup:WebLogicClusterName}`  * `{ProcessGroup:WebLogicDomainName}`  * `{ProcessGroup:WebLogicHome}`  * `{ProcessGroup:WebLogicName}`  * `{ProcessGroup:WebSphereCellName}`  * `{ProcessGroup:WebSphereClusterName}`  * `{ProcessGroup:WebSphereNodeName}`  * `{ProcessGroup:WebSphereServerName}`  * `{ProcessGroup:ActorSystem}`  * `{Service:STGServerName}`  * `{Service:DatabaseHostName}`  * `{Service:DatabaseName}`  * `{Service:DatabaseVendor}`  * `{Service:DetectedName}`  * `{Service:EndpointPath}`  * `{Service:EndpointPathGatewayUrl}`  * `{Service:IIBApplicationName}`  * `{Service:MessageListenerClassName}`  * `{Service:Port}`  * `{Service:PublicDomainName}`  * `{Service:RemoteEndpoint}`  * `{Service:RemoteName}`  * `{Service:WebApplicationId}`  * `{Service:WebContextRoot}`  * `{Service:WebServerName}`  * `{Service:WebServiceNamespace}`  * `{Service:WebServiceName}`  * `{VmwareDatacenter:Name}`  * `{VmwareVm:Name}`
     */
    valueFormat?: string;
}

export interface AutotagRuleCondition {
    /**
     * Comparison for `APPLICATION_TYPE` attributes
     *
     * @deprecated You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility.
     */
    applicationTypeComparisons?: outputs.AutotagRuleConditionApplicationTypeComparison[];
    /**
     * Comparison for `APPLICATION_TYPE` attributes
     */
    applicationTypes?: outputs.AutotagRuleConditionApplicationType[];
    /**
     * Comparison for `AZURE_COMPUTE_MODE` attributes
     */
    azureComputeModeComparisons?: outputs.AutotagRuleConditionAzureComputeModeComparison[];
    /**
     * Comparison for `AZURE_COMPUTE_MODE` attributes
     *
     * @deprecated You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility.
     */
    azureComputeModes?: outputs.AutotagRuleConditionAzureComputeMode[];
    /**
     * Comparison for `AZURE_SKU` attributes
     *
     * @deprecated You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility.
     */
    azureSkuComparisions?: outputs.AutotagRuleConditionAzureSkuComparision[];
    /**
     * Comparison for `AZURE_SKU` attributes
     */
    azureSkus?: outputs.AutotagRuleConditionAzureSkus[];
    /**
     * A comparison that's yet unknown to the provider. Operator and Value need to be encoded using the 'unknowns' property.
     *
     * @deprecated You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility.
     */
    baseComparisonBasics?: outputs.AutotagRuleConditionBaseComparisonBasic[];
    /**
     * Fallback for not yet known type
     *
     * @deprecated 'base_condition_key' is deprecated. You should use 'key'
     */
    baseConditionKeys?: outputs.AutotagRuleConditionBaseConditionKey[];
    /**
     * Comparison for `BITNESS` attributes
     *
     * @deprecated You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility.
     */
    bitnessComparisions?: outputs.AutotagRuleConditionBitnessComparision[];
    /**
     * Comparison for `BITNESS` attributes
     */
    bitnesses?: outputs.AutotagRuleConditionBitness[];
    /**
     * Comparison for `CLOUD_TYPE` attributes
     *
     * @deprecated You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility.
     */
    cloudTypeComparisons?: outputs.AutotagRuleConditionCloudTypeComparison[];
    /**
     * Comparison for `CLOUD_TYPE` attributes
     */
    cloudTypes?: outputs.AutotagRuleConditionCloudType[];
    /**
     * A comparison that's yet unknown to the provider. Operator and Value need to be encoded using the 'unknowns' property.
     */
    comparisons?: outputs.AutotagRuleConditionComparison[];
    /**
     * Comparison for `CUSTOM_APPLICATION_TYPE` attributes
     *
     * @deprecated You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility.
     */
    customApplicationTypeComparisons?: outputs.AutotagRuleConditionCustomApplicationTypeComparison[];
    /**
     * Comparison for `CUSTOM_APPLICATION_TYPE` attributes
     */
    customApplicationTypes?: outputs.AutotagRuleConditionCustomApplicationType[];
    /**
     * Key for Custom Host Metadata
     *
     * @deprecated 'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata'
     */
    customHostMetadataConditionKeys?: outputs.AutotagRuleConditionCustomHostMetadataConditionKey[];
    /**
     * Key for Custom Host Metadata
     */
    customHostMetadatas?: outputs.AutotagRuleConditionCustomHostMetadata[];
    /**
     * Key for Custom Process Metadata
     *
     * @deprecated 'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata'
     */
    customProcessMetadataConditionKeys?: outputs.AutotagRuleConditionCustomProcessMetadataConditionKey[];
    /**
     * Key for Custom Process Metadata
     */
    customProcessMetadatas?: outputs.AutotagRuleConditionCustomProcessMetadata[];
    /**
     * Comparison for `DATABASE_TOPOLOGY` attributes
     */
    databaseTopologies?: outputs.AutotagRuleConditionDatabaseTopology[];
    /**
     * Comparison for `DATABASE_TOPOLOGY` attributes
     *
     * @deprecated You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility.
     */
    databaseTopologyComparisons?: outputs.AutotagRuleConditionDatabaseTopologyComparison[];
    /**
     * Comparison for `DCRUM_DECODER_TYPE` attributes
     *
     * @deprecated You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility.
     */
    dcrumDecoderComparisons?: outputs.AutotagRuleConditionDcrumDecoderComparison[];
    /**
     * Comparison for `DCRUM_DECODER_TYPE` attributes
     */
    dcrumDecoders?: outputs.AutotagRuleConditionDcrumDecoder[];
    /**
     * Comparison for `ENTITY_ID` attributes
     */
    entities?: outputs.AutotagRuleConditionEntity[];
    /**
     * Comparison for `ENTITY_ID` attributes
     *
     * @deprecated You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility.
     */
    entityIdComparisons?: outputs.AutotagRuleConditionEntityIdComparison[];
    /**
     * Comparison for `SIMPLE_HOST_TECH` attributes
     */
    hostTeches?: outputs.AutotagRuleConditionHostTech[];
    /**
     * `hypervisorTypeComparision` is deprecated. Use `hypervisor` instead
     *
     * @deprecated `hypervisorTypeComparision` is deprecated. Use `hypervisor` instead
     */
    hypervisorTypeComparisions?: outputs.AutotagRuleConditionHypervisorTypeComparision[];
    /**
     * Comparison for `HYPERVISOR_TYPE` attributes
     */
    hypervisors?: outputs.AutotagRuleConditionHypervisor[];
    /**
     * Comparison for `INDEXED_NAME` attributes
     *
     * @deprecated You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedNameComparisons?: outputs.AutotagRuleConditionIndexedNameComparison[];
    /**
     * Comparison for `INDEXED_NAME` attributes
     */
    indexedNames?: outputs.AutotagRuleConditionIndexedName[];
    /**
     * Comparison for `INDEXED_STRING` attributes
     *
     * @deprecated You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedStringComparisons?: outputs.AutotagRuleConditionIndexedStringComparison[];
    /**
     * Comparison for `INDEXED_STRING` attributes
     */
    indexedStrings?: outputs.AutotagRuleConditionIndexedString[];
    /**
     * Comparison for `INDEXED_TAG` attributes
     *
     * @deprecated You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedTagComparisons?: outputs.AutotagRuleConditionIndexedTagComparison[];
    /**
     * Comparison for `INDEXED_TAG` attributes
     */
    indexedTags?: outputs.AutotagRuleConditionIndexedTag[];
    /**
     * Comparison for `INTEGER` attributes
     *
     * @deprecated You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility.
     */
    integerComparisons?: outputs.AutotagRuleConditionIntegerComparison[];
    /**
     * Comparison for `INTEGER` attributes
     */
    integers?: outputs.AutotagRuleConditionInteger[];
    /**
     * Comparison for `IP_ADDRESS` attributes
     *
     * @deprecated You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility.
     */
    ipaddressComparisons?: outputs.AutotagRuleConditionIpaddressComparison[];
    /**
     * Comparison for `IP_ADDRESS` attributes
     */
    ipaddresses?: outputs.AutotagRuleConditionIpaddress[];
    /**
     * Fallback for not yet known type
     */
    keys?: outputs.AutotagRuleConditionKey[];
    /**
     * Comparison for `MOBILE_PLATFORM` attributes
     *
     * @deprecated You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility.
     */
    mobilePlatformComparisons?: outputs.AutotagRuleConditionMobilePlatformComparison[];
    /**
     * Comparison for `MOBILE_PLATFORM` attributes
     */
    mobilePlatforms?: outputs.AutotagRuleConditionMobilePlatform[];
    /**
     * Comparison for `OS_ARCHITECTURE` attributes
     */
    osArches?: outputs.AutotagRuleConditionOsArch[];
    /**
     * Comparison for `OS_TYPE` attributes
     */
    osTypes?: outputs.AutotagRuleConditionOsType[];
    /**
     * Comparison for `OS_ARCHITECTURE` attributes
     *
     * @deprecated You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility.
     */
    osarchitectureComparisons?: outputs.AutotagRuleConditionOsarchitectureComparison[];
    /**
     * Comparison for `OS_TYPE` attributes
     *
     * @deprecated You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility.
     */
    ostypeComparisons?: outputs.AutotagRuleConditionOstypeComparison[];
    /**
     * Comparison for `PAAS_TYPE` attributes
     *
     * @deprecated You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility.
     */
    paasTypeComparisons?: outputs.AutotagRuleConditionPaasTypeComparison[];
    /**
     * Comparison for `PAAS_TYPE` attributes
     */
    paasTypes?: outputs.AutotagRuleConditionPaasType[];
    /**
     * The key for dynamic attributes of the `PROCESS_PREDEFINED_METADATA_KEY` type
     *
     * @deprecated 'process_metadata_condition_key' is deprecated. You should use 'process_metadata'
     */
    processMetadataConditionKeys?: outputs.AutotagRuleConditionProcessMetadataConditionKey[];
    /**
     * The key for dynamic attributes of the `PROCESS_PREDEFINED_METADATA_KEY` type
     */
    processMetadatas?: outputs.AutotagRuleConditionProcessMetadata[];
    /**
     * Comparison for `SERVICE_TOPOLOGY` attributes
     */
    serviceTopologies?: outputs.AutotagRuleConditionServiceTopology[];
    /**
     * Comparison for `SERVICE_TOPOLOGY` attributes
     *
     * @deprecated You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility.
     */
    serviceTopologyComparisons?: outputs.AutotagRuleConditionServiceTopologyComparison[];
    /**
     * Comparison for `SERVICE_TYPE` attributes
     *
     * @deprecated You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility.
     */
    serviceTypeComparisons?: outputs.AutotagRuleConditionServiceTypeComparison[];
    /**
     * Comparison for `SERVICE_TYPE` attributes
     */
    serviceTypes?: outputs.AutotagRuleConditionServiceType[];
    /**
     * Comparison for `SIMPLE_HOST_TECH` attributes
     *
     * @deprecated You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility.
     */
    simpleHostTechComparisons?: outputs.AutotagRuleConditionSimpleHostTechComparison[];
    /**
     * Comparison for `SIMPLE_TECH` attributes
     *
     * @deprecated You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility.
     */
    simpleTechComparisons?: outputs.AutotagRuleConditionSimpleTechComparison[];
    /**
     * Comparison for `STRING` attributes
     *
     * @deprecated You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility.
     */
    stringComparisons?: outputs.AutotagRuleConditionStringComparison[];
    /**
     * The key for dynamic attributes of the `STRING` type
     *
     * @deprecated 'string_condition_key' is deprecated. You should use 'string_key'
     */
    stringConditionKeys?: outputs.AutotagRuleConditionStringConditionKey[];
    /**
     * The key for dynamic attributes of the `STRING` type
     */
    stringKeys?: outputs.AutotagRuleConditionStringKey[];
    /**
     * Comparison for `STRING` attributes
     */
    strings?: outputs.AutotagRuleConditionString[];
    /**
     * Comparison for `SYNTHETIC_ENGINE_TYPE` attributes
     *
     * @deprecated You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility.
     */
    syntheticEngineTypeComparisons?: outputs.AutotagRuleConditionSyntheticEngineTypeComparison[];
    /**
     * Comparison for `SYNTHETIC_ENGINE_TYPE` attributes
     */
    syntheticEngines?: outputs.AutotagRuleConditionSyntheticEngine[];
    /**
     * Comparison for `TAG` attributes
     *
     * @deprecated You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility.
     */
    tagComparisons?: outputs.AutotagRuleConditionTagComparison[];
    /**
     * Comparison for `TAG` attributes
     */
    tags?: outputs.AutotagRuleConditionTag[];
    /**
     * Comparison for `SIMPLE_TECH` attributes
     */
    teches?: outputs.AutotagRuleConditionTech[];
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
}

export interface AutotagRuleConditionApplicationType {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface AutotagRuleConditionApplicationTypeComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be APPLICATION_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface AutotagRuleConditionAzureComputeMode {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are DEDICATED or SHARED.
     */
    value?: string;
}

export interface AutotagRuleConditionAzureComputeModeComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are DEDICATED or SHARED.
     */
    value?: string;
}

export interface AutotagRuleConditionAzureSkuComparision {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be AZURE_SKU
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are BASIC, DYNAMIC, FREE, PREMIUM, SHARED and STANDARD.
     */
    value?: string;
}

export interface AutotagRuleConditionAzureSkus {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are BASIC, DYNAMIC, FREE, PREMIUM, SHARED and STANDARD.
     */
    value?: string;
}

export interface AutotagRuleConditionBaseComparisonBasic {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * The type of comparison
     */
    type: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface AutotagRuleConditionBaseConditionKey {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * Defines the actual set of fields depending on the value
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface AutotagRuleConditionBitness {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are 32 and 64.
     */
    value?: string;
}

export interface AutotagRuleConditionBitnessComparision {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be BITNESS
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are 32 and 64.
     */
    value?: string;
}

export interface AutotagRuleConditionCloudType {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AZURE, EC2, GOOGLE_CLOUD_PLATFORM, OPENSTACK, ORACLE and UNRECOGNIZED.
     */
    value?: string;
}

export interface AutotagRuleConditionCloudTypeComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be CLOUD_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AZURE, EC2, GOOGLE_CLOUD_PLATFORM, OPENSTACK, ORACLE and UNRECOGNIZED.
     */
    value?: string;
}

export interface AutotagRuleConditionComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * The type of comparison
     */
    type: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface AutotagRuleConditionCustomApplicationType {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AMAZON_ECHO, DESKTOP, EMBEDDED, IOT, MICROSOFT_HOLOLENS and UFO.
     */
    value?: string;
}

export interface AutotagRuleConditionCustomApplicationTypeComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be CUSTOM_APPLICATION_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AMAZON_ECHO, DESKTOP, EMBEDDED, IOT, MICROSOFT_HOLOLENS and UFO.
     */
    value?: string;
}

export interface AutotagRuleConditionCustomHostMetadata {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
     */
    dynamicKey: outputs.AutotagRuleConditionCustomHostMetadataDynamicKey;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface AutotagRuleConditionCustomHostMetadataConditionKey {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
     */
    dynamicKey: outputs.AutotagRuleConditionCustomHostMetadataConditionKeyDynamicKey;
    /**
     * if specified, needs to be HOST_CUSTOM_METADATA_KEY
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface AutotagRuleConditionCustomHostMetadataConditionKeyDynamicKey {
    /**
     * The actual key of the custom metadata
     */
    key: string;
    /**
     * The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
     */
    source: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface AutotagRuleConditionCustomHostMetadataDynamicKey {
    /**
     * The actual key of the custom metadata
     */
    key: string;
    /**
     * The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
     */
    source: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface AutotagRuleConditionCustomProcessMetadata {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
     */
    dynamicKey: outputs.AutotagRuleConditionCustomProcessMetadataDynamicKey;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface AutotagRuleConditionCustomProcessMetadataConditionKey {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
     */
    dynamicKey: outputs.AutotagRuleConditionCustomProcessMetadataConditionKeyDynamicKey;
    /**
     * if specified, needs to be PROCESS_CUSTOM_METADATA_KEY
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface AutotagRuleConditionCustomProcessMetadataConditionKeyDynamicKey {
    /**
     * The actual key of the custom metadata
     */
    key: string;
    /**
     * The source of the custom metadata. Possible values are CLOUD_FOUNDRY, ENVIRONMENT, GOOGLE_CLOUD, KUBERNETES and PLUGIN
     */
    source: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface AutotagRuleConditionCustomProcessMetadataDynamicKey {
    /**
     * The actual key of the custom metadata
     */
    key: string;
    /**
     * The source of the custom metadata. Possible values are CLOUD_FOUNDRY, ENVIRONMENT, GOOGLE_CLOUD, KUBERNETES and PLUGIN
     */
    source: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface AutotagRuleConditionDatabaseTopology {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are CLUSTER, EMBEDDED, FAILOVER, IPC, LOAD_BALANCING, SINGLE_SERVER and UNSPECIFIED.
     */
    value?: string;
}

export interface AutotagRuleConditionDatabaseTopologyComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be DATABASE_TOPOLOGY
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are CLUSTER, EMBEDDED, FAILOVER, IPC, LOAD_BALANCING, SINGLE_SERVER and UNSPECIFIED.
     */
    value?: string;
}

export interface AutotagRuleConditionDcrumDecoder {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are ALL_OTHER, CITRIX_APPFLOW, CITRIX_ICA, CITRIX_ICA_OVER_SSL, DB2_DRDA, HTTP, HTTPS, HTTP_EXPRESS, INFORMIX, MYSQL, ORACLE, SAP_GUI, SAP_GUI_OVER_HTTP, SAP_GUI_OVER_HTTPS, SAP_HANA_DB, SAP_RFC, SSL and TDS.
     */
    value?: string;
}

export interface AutotagRuleConditionDcrumDecoderComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be DCRUM_DECODER_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are ALL_OTHER, CITRIX_APPFLOW, CITRIX_ICA, CITRIX_ICA_OVER_SSL, DB2_DRDA, HTTP, HTTPS, HTTP_EXPRESS, INFORMIX, MYSQL, ORACLE, SAP_GUI, SAP_GUI_OVER_HTTP, SAP_GUI_OVER_HTTPS, SAP_HANA_DB, SAP_RFC, SSL and TDS.
     */
    value?: string;
}

export interface AutotagRuleConditionEntity {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Currently only EQUALS is supported. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface AutotagRuleConditionEntityIdComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Currently only EQUALS is supported. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be ENTITY_ID
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface AutotagRuleConditionHostTech {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: outputs.AutotagRuleConditionHostTechValue;
}

export interface AutotagRuleConditionHostTechValue {
    /**
     * Predefined technology, if technology is not predefined, then the verbatim type must be set. Possible values are APPARMOR, BOSH, BOSHBPM, CLOUDFOUNDRY, CONTAINERD, CRIO, DIEGO_CELL, DOCKER, GARDEN, GRSECURITY, KUBERNETES, OPENSHIFT, OPENSTACK_COMPUTE, OPENSTACK_CONTROLLER and SELINUX
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * Non-predefined technology, use for custom technologies
     */
    verbatimType?: string;
}

export interface AutotagRuleConditionHypervisor {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AHV, HYPER_V, KVM, LPAR, QEMU, VIRTUAL_BOX, VMWARE, WPAR and XEN.
     */
    value?: string;
}

export interface AutotagRuleConditionHypervisorTypeComparision {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be HYPERVISOR_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AHV, HYPER_V, KVM, LPAR, QEMU, VIRTUAL_BOX, VMWARE, WPAR and XEN.
     */
    value?: string;
}

export interface AutotagRuleConditionIndexedName {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS, CONTAINS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface AutotagRuleConditionIndexedNameComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS, CONTAINS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be INDEXED_NAME
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface AutotagRuleConditionIndexedString {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface AutotagRuleConditionIndexedStringComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be INDEXED_STRING
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface AutotagRuleConditionIndexedTag {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * Tag of a Dynatrace entity
     */
    value?: outputs.AutotagRuleConditionIndexedTagValue;
}

export interface AutotagRuleConditionIndexedTagComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be INDEXED_TAG
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * Tag of a Dynatrace entity
     */
    value?: outputs.AutotagRuleConditionIndexedTagComparisonValue;
}

export interface AutotagRuleConditionIndexedTagComparisonValue {
    /**
     * The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
     */
    context: string;
    /**
     * The key of the tag. Custom tags have the tag value here
     */
    key: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value of the tag. Not applicable to custom tags
     */
    value?: string;
}

export interface AutotagRuleConditionIndexedTagValue {
    /**
     * The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
     */
    context: string;
    /**
     * The key of the tag. Custom tags have the tag value here
     */
    key: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value of the tag. Not applicable to custom tags
     */
    value?: string;
}

export interface AutotagRuleConditionInteger {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS, EXISTS, GREATER_THAN, GREATER_THAN_OR_EQUAL, LOWER_THAN and LOWER_THAN_OR_EQUAL. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: number;
}

export interface AutotagRuleConditionIntegerComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS, EXISTS, GREATER_THAN, GREATER_THAN_OR_EQUAL, LOWER_THAN and LOWER_THAN_OR_EQUAL. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be INTEGER
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: number;
}

export interface AutotagRuleConditionIpaddress {
    /**
     * The comparison is case-sensitive (`true`) or insensitive (`false`)
     */
    caseSensitive?: boolean;
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS, IS_IP_IN_RANGE and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface AutotagRuleConditionIpaddressComparison {
    /**
     * The comparison is case-sensitive (`true`) or insensitive (`false`)
     */
    caseSensitive?: boolean;
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS, IS_IP_IN_RANGE and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be IP_ADDRESS
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface AutotagRuleConditionKey {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * Defines the actual set of fields depending on the value
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface AutotagRuleConditionMobilePlatform {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are ANDROID, IOS, LINUX, MAC_OS, OTHER, TVOS and WINDOWS.
     */
    value?: string;
}

export interface AutotagRuleConditionMobilePlatformComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be MOBILE_PLATFORM
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are ANDROID, IOS, LINUX, MAC_OS, OTHER, TVOS and WINDOWS.
     */
    value?: string;
}

export interface AutotagRuleConditionOsArch {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are ARM, IA64, PARISC, PPC, PPCLE, S390, SPARC, X86 and ZOS.
     */
    value?: string;
}

export interface AutotagRuleConditionOsType {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AIX, DARWIN, HPUX, LINUX, SOLARIS, WINDOWS and ZOS.
     */
    value?: string;
}

export interface AutotagRuleConditionOsarchitectureComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be OS_ARCHITECTURE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are ARM, IA64, PARISC, PPC, PPCLE, S390, SPARC, X86 and ZOS.
     */
    value?: string;
}

export interface AutotagRuleConditionOstypeComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be OS_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AIX, DARWIN, HPUX, LINUX, SOLARIS, WINDOWS and ZOS.
     */
    value?: string;
}

export interface AutotagRuleConditionPaasType {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AWS_ECS_EC2, AWS_ECS_FARGATE, AWS_LAMBDA, AZURE_FUNCTIONS, AZURE_WEBSITES, CLOUD_FOUNDRY, GOOGLE_APP_ENGINE, HEROKU, KUBERNETES and OPENSHIFT.
     */
    value?: string;
}

export interface AutotagRuleConditionPaasTypeComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be PAAS_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AWS_ECS_EC2, AWS_ECS_FARGATE, AWS_LAMBDA, AZURE_FUNCTIONS, AZURE_WEBSITES, CLOUD_FOUNDRY, GOOGLE_APP_ENGINE, HEROKU, KUBERNETES and OPENSHIFT.
     */
    value?: string;
}

export interface AutotagRuleConditionProcessMetadata {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are AMAZON_ECR_IMAGE_ACCOUNT_ID,AMAZON_ECR_IMAGE_REGION, AMAZON_LAMBDA_FUNCTION_NAME, AMAZON_REGION, APACHE_CONFIG_PATH, APACHE_SPARK_MASTER_IP_ADDRESS, ASP_DOT_NET_CORE_APPLICATION_PATH, AWS_ECS_CLUSTER, AWS_ECS_CONTAINERNAME, AWS_ECS_FAMILY, AWS_ECS_REVISION, CASSANDRA_CLUSTER_NAME, CATALINA_BASE, CATALINA_HOME, CLOUD_FOUNDRY_APP_ID, CLOUD_FOUNDRY_APP_NAME, CLOUD_FOUNDRY_INSTANCE_INDEX, CLOUD_FOUNDRY_SPACE_ID, CLOUD_FOUNDRY_SPACE_NAME, COLDFUSION_JVM_CONFIG_FILE, COLDFUSION_SERVICE_NAME, COMMAND_LINE_ARGS, DOTNET_COMMAND, DOTNET_COMMAND_PATH, DYNATRACE_CLUSTER_ID, DYNATRACE_NODE_ID, ELASTICSEARCH_CLUSTER_NAME, ELASTICSEARCH_NODE_NAME, EQUINOX_CONFIG_PATH, EXE_NAME, EXE_PATH, GLASS_FISH_DOMAIN_NAME, GLASS_FISH_INSTANCE_NAME, GOOGLE_APP_ENGINE_INSTANCE, GOOGLE_APP_ENGINE_SERVICE, GOOGLE_CLOUD_PROJECT, HYBRIS_BIN_DIRECTORY, HYBRIS_CONFIG_DIRECTORY, HYBRIS_DATA_DIRECTORY, IBM_CICS_REGION, IBM_CTG_NAME, IBM_IMS_CONNECT_REGION, IBM_IMS_CONTROL_REGION, IBM_IMS_MESSAGE_PROCESSING_REGION, IBM_IMS_SOAP_GW_NAME, IBM_INTEGRATION_NODE_NAME, IBM_INTEGRATION_SERVER_NAME, IIS_APP_POOL, IIS_ROLE_NAME, JAVA_JAR_FILE, JAVA_JAR_PATH, JAVA_MAIN_CLASS, JAVA_MAIN_MODULE, JBOSS_HOME, JBOSS_MODE, JBOSS_SERVER_NAME, KUBERNETES_BASE_POD_NAME, KUBERNETES_CONTAINER_NAME, KUBERNETES_FULL_POD_NAME, KUBERNETES_NAMESPACE, KUBERNETES_POD_UID, MSSQL_INSTANCE_NAME, NODE_JS_APP_BASE_DIRECTORY, NODE_JS_APP_NAME, NODE_JS_SCRIPT_NAME, ORACLE_SID, PG_ID_CALC_INPUT_KEY_LINKAGE, PHP_SCRIPT_PATH, PHP_WORKING_DIRECTORY, RUBY_APP_ROOT_PATH, RUBY_SCRIPT_PATH, RULE_RESULT, SOFTWAREAG_INSTALL_ROOT, SOFTWAREAG_PRODUCTPROPNAME, SPRINGBOOT_APP_NAME, SPRINGBOOT_PROFILE_NAME, SPRINGBOOT_STARTUP_CLASS, TIBCO_BUSINESSWORKS_CE_APP_NAME, TIBCO_BUSINESSWORKS_CE_VERSION, TIBCO_BUSINESS_WORKS_APP_NODE_NAME, TIBCO_BUSINESS_WORKS_APP_SPACE_NAME, TIBCO_BUSINESS_WORKS_DOMAIN_NAME, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH, TIBCO_BUSINESS_WORKS_HOME, VARNISH_INSTANCE_NAME, WEB_LOGIC_CLUSTER_NAME, WEB_LOGIC_DOMAIN_NAME, WEB_LOGIC_HOME, WEB_LOGIC_NAME, WEB_SPHERE_CELL_NAME, WEB_SPHERE_CLUSTER_NAME, WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME
     */
    dynamicKey: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface AutotagRuleConditionProcessMetadataConditionKey {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are AMAZON_ECR_IMAGE_ACCOUNT_ID,AMAZON_ECR_IMAGE_REGION, AMAZON_LAMBDA_FUNCTION_NAME, AMAZON_REGION, APACHE_CONFIG_PATH, APACHE_SPARK_MASTER_IP_ADDRESS, ASP_DOT_NET_CORE_APPLICATION_PATH, AWS_ECS_CLUSTER, AWS_ECS_CONTAINERNAME, AWS_ECS_FAMILY, AWS_ECS_REVISION, CASSANDRA_CLUSTER_NAME, CATALINA_BASE, CATALINA_HOME, CLOUD_FOUNDRY_APP_ID, CLOUD_FOUNDRY_APP_NAME, CLOUD_FOUNDRY_INSTANCE_INDEX, CLOUD_FOUNDRY_SPACE_ID, CLOUD_FOUNDRY_SPACE_NAME, COLDFUSION_JVM_CONFIG_FILE, COLDFUSION_SERVICE_NAME, COMMAND_LINE_ARGS, DOTNET_COMMAND, DOTNET_COMMAND_PATH, DYNATRACE_CLUSTER_ID, DYNATRACE_NODE_ID, ELASTICSEARCH_CLUSTER_NAME, ELASTICSEARCH_NODE_NAME, EQUINOX_CONFIG_PATH, EXE_NAME, EXE_PATH, GLASS_FISH_DOMAIN_NAME, GLASS_FISH_INSTANCE_NAME, GOOGLE_APP_ENGINE_INSTANCE, GOOGLE_APP_ENGINE_SERVICE, GOOGLE_CLOUD_PROJECT, HYBRIS_BIN_DIRECTORY, HYBRIS_CONFIG_DIRECTORY, HYBRIS_DATA_DIRECTORY, IBM_CICS_REGION, IBM_CTG_NAME, IBM_IMS_CONNECT_REGION, IBM_IMS_CONTROL_REGION, IBM_IMS_MESSAGE_PROCESSING_REGION, IBM_IMS_SOAP_GW_NAME, IBM_INTEGRATION_NODE_NAME, IBM_INTEGRATION_SERVER_NAME, IIS_APP_POOL, IIS_ROLE_NAME, JAVA_JAR_FILE, JAVA_JAR_PATH, JAVA_MAIN_CLASS, JAVA_MAIN_MODULE, JBOSS_HOME, JBOSS_MODE, JBOSS_SERVER_NAME, KUBERNETES_BASE_POD_NAME, KUBERNETES_CONTAINER_NAME, KUBERNETES_FULL_POD_NAME, KUBERNETES_NAMESPACE, KUBERNETES_POD_UID, MSSQL_INSTANCE_NAME, NODE_JS_APP_BASE_DIRECTORY, NODE_JS_APP_NAME, NODE_JS_SCRIPT_NAME, ORACLE_SID, PG_ID_CALC_INPUT_KEY_LINKAGE, PHP_SCRIPT_PATH, PHP_WORKING_DIRECTORY, RUBY_APP_ROOT_PATH, RUBY_SCRIPT_PATH, RULE_RESULT, SOFTWAREAG_INSTALL_ROOT, SOFTWAREAG_PRODUCTPROPNAME, SPRINGBOOT_APP_NAME, SPRINGBOOT_PROFILE_NAME, SPRINGBOOT_STARTUP_CLASS, TIBCO_BUSINESSWORKS_CE_APP_NAME, TIBCO_BUSINESSWORKS_CE_VERSION, TIBCO_BUSINESS_WORKS_APP_NODE_NAME, TIBCO_BUSINESS_WORKS_APP_SPACE_NAME, TIBCO_BUSINESS_WORKS_DOMAIN_NAME, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH, TIBCO_BUSINESS_WORKS_HOME, VARNISH_INSTANCE_NAME, WEB_LOGIC_CLUSTER_NAME, WEB_LOGIC_DOMAIN_NAME, WEB_LOGIC_HOME, WEB_LOGIC_NAME, WEB_SPHERE_CELL_NAME, WEB_SPHERE_CLUSTER_NAME, WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME
     */
    dynamicKey: string;
    /**
     * if specified, needs to be PROCESS_PREDEFINED_METADATA_KEY
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface AutotagRuleConditionServiceTopology {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are EXTERNAL_SERVICE, FULLY_MONITORED and OPAQUE_SERVICE.
     */
    value?: string;
}

export interface AutotagRuleConditionServiceTopologyComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be SERVICE_TOPOLOGY
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are EXTERNAL_SERVICE, FULLY_MONITORED and OPAQUE_SERVICE.
     */
    value?: string;
}

export interface AutotagRuleConditionServiceType {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are BACKGROUND_ACTIVITY, CICS_SERVICE, CUSTOM_SERVICE, DATABASE_SERVICE, ENTERPRISE_SERVICE_BUS_SERVICE, EXTERNAL, IBM_INTEGRATION_BUS_SERVICE, IMS_SERVICE, MESSAGING_SERVICE, QUEUE_LISTENER_SERVICE, RMI_SERVICE, RPC_SERVICE, WEB_REQUEST_SERVICE and WEB_SERVICE.
     */
    value?: string;
}

export interface AutotagRuleConditionServiceTypeComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be SERVICE_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are BACKGROUND_ACTIVITY, CICS_SERVICE, CUSTOM_SERVICE, DATABASE_SERVICE, ENTERPRISE_SERVICE_BUS_SERVICE, EXTERNAL, IBM_INTEGRATION_BUS_SERVICE, IMS_SERVICE, MESSAGING_SERVICE, QUEUE_LISTENER_SERVICE, RMI_SERVICE, RPC_SERVICE, WEB_REQUEST_SERVICE and WEB_SERVICE.
     */
    value?: string;
}

export interface AutotagRuleConditionSimpleHostTechComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be SIMPLE_HOST_TECH
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: outputs.AutotagRuleConditionSimpleHostTechComparisonValue;
}

export interface AutotagRuleConditionSimpleHostTechComparisonValue {
    /**
     * Predefined technology, if technology is not predefined, then the verbatim type must be set. Possible values are APPARMOR, BOSH, BOSHBPM, CLOUDFOUNDRY, CONTAINERD, CRIO, DIEGO_CELL, DOCKER, GARDEN, GRSECURITY, KUBERNETES, OPENSHIFT, OPENSTACK_COMPUTE, OPENSTACK_CONTROLLER and SELINUX
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * Non-predefined technology, use for custom technologies
     */
    verbatimType?: string;
}

export interface AutotagRuleConditionSimpleTechComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be SIMPLE_TECH
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: outputs.AutotagRuleConditionSimpleTechComparisonValue;
}

export interface AutotagRuleConditionSimpleTechComparisonValue {
    /**
     * Predefined technology, if technology is not predefined, then the verbatim type must be set.
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * Non-predefined technology, use for custom technologies
     */
    verbatimType?: string;
}

export interface AutotagRuleConditionString {
    /**
     * The comparison is case-sensitive (`true`) or insensitive (`false`)
     */
    caseSensitive?: boolean;
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface AutotagRuleConditionStringComparison {
    /**
     * The comparison is case-sensitive (`true`) or insensitive (`false`)
     */
    caseSensitive?: boolean;
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be STRING
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface AutotagRuleConditionStringConditionKey {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are
     *    - `AMAZON_ECR_IMAGE_ACCOUNT_ID`
     *    - `AMAZON_ECR_IMAGE_REGION`
     *    - `AMAZON_LAMBDA_FUNCTION_NAME`
     *    - `AMAZON_REGION`
     *    - `APACHE_CONFIG_PATH`
     *    - `APACHE_SPARK_MASTER_IP_ADDRESS`
     *    - `ASP_DOT_NET_CORE_APPLICATION_PATH`
     *    - `AWS_ECS_CLUSTER`
     *    - `AWS_ECS_CONTAINERNAME`
     *    - `AWS_ECS_FAMILY`
     *    - `AWS_ECS_REVISION`
     *    - `CASSANDRA_CLUSTER_NAME`
     *    - `CATALINA_BASE`
     *    - `CATALINA_HOME`
     *    - `CLOUD_FOUNDRY_APP_ID`
     *    - `CLOUD_FOUNDRY_APP_NAME`
     *    - `CLOUD_FOUNDRY_INSTANCE_INDEX`
     *    - `CLOUD_FOUNDRY_SPACE_ID`
     *    - `CLOUD_FOUNDRY_SPACE_NAME`
     *    - `COLDFUSION_JVM_CONFIG_FILE`
     *    - `COLDFUSION_SERVICE_NAME`
     *    - `COMMAND_LINE_ARGS`
     *    - `DOTNET_COMMAND`
     *    - `DOTNET_COMMAND_PATH`
     *    - `DYNATRACE_CLUSTER_ID`
     *    - `DYNATRACE_NODE_ID`
     *    - `ELASTICSEARCH_CLUSTER_NAME`
     *    - `ELASTICSEARCH_NODE_NAME`
     *    - `EQUINOX_CONFIG_PATH`
     *    - `EXE_NAME`
     *    - `EXE_PATH`
     *    - `GLASS_FISH_DOMAIN_NAME`
     *    - `GLASS_FISH_INSTANCE_NAME`
     *    - `GOOGLE_APP_ENGINE_INSTANCE`
     *    - `GOOGLE_APP_ENGINE_SERVICE`
     *    - `GOOGLE_CLOUD_PROJECT`
     *    - `HYBRIS_BIN_DIRECTORY`
     *    - `HYBRIS_CONFIG_DIRECTORY`
     *    - `HYBRIS_DATA_DIRECTORY`
     *    - `IBM_CICS_REGION`
     *    - `IBM_CTG_NAME`
     *    - `IBM_IMS_CONNECT_REGION`
     *    - `IBM_IMS_CONTROL_REGION`
     *    - `IBM_IMS_MESSAGE_PROCESSING_REGION`
     *    - `IBM_IMS_SOAP_GW_NAME`
     *    - `IBM_INTEGRATION_NODE_NAME`
     *    - `IBM_INTEGRATION_SERVER_NAME`
     *    - `IIS_APP_POOL`
     *    - `IIS_ROLE_NAME`
     *    - `JAVA_JAR_FILE`
     *    - `JAVA_JAR_PATH`
     *    - `JAVA_MAIN_CLASS`
     *    - `JAVA_MAIN_MODULE`
     *    - `JBOSS_HOME`
     *    - `JBOSS_MODE`
     *    - `JBOSS_SERVER_NAME`
     *    - `KUBERNETES_BASE_POD_NAME`
     *    - `KUBERNETES_CONTAINER_NAME`
     *    - `KUBERNETES_FULL_POD_NAME`
     *    - `KUBERNETES_NAMESPACE`
     *    - `KUBERNETES_POD_UID`
     *    - `MSSQL_INSTANCE_NAME`
     *    - `NODE_JS_APP_BASE_DIRECTORY`
     *    - `NODE_JS_APP_NAME`
     *    - `NODE_JS_SCRIPT_NAME`
     *    - `ORACLE_SID`
     *    - `PG_ID_CALC_INPUT_KEY_LINKAGE`
     *    - `PHP_SCRIPT_PATH`
     *    - `PHP_WORKING_DIRECTORY`
     *    - `RUBY_APP_ROOT_PATH`
     *    - `RUBY_SCRIPT_PATH`
     *    - `RULE_RESULT`
     *    - `SOFTWAREAG_INSTALL_ROOT`
     *    - `SOFTWAREAG_PRODUCTPROPNAME`
     *    - `SPRINGBOOT_APP_NAME`
     *    - `SPRINGBOOT_PROFILE_NAME`
     *    - `SPRINGBOOT_STARTUP_CLASS`
     *    - `TIBCO_BUSINESSWORKS_CE_APP_NAME`
     *    - `TIBCO_BUSINESSWORKS_CE_VERSION`
     *    - `TIBCO_BUSINESS_WORKS_APP_NODE_NAME`
     *    - `TIBCO_BUSINESS_WORKS_APP_SPACE_NAME`
     *    - `TIBCO_BUSINESS_WORKS_DOMAIN_NAME`
     *    - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE`
     *    - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH`
     *    - `TIBCO_BUSINESS_WORKS_HOME`
     *    - `VARNISH_INSTANCE_NAME`
     *    - `WEB_LOGIC_CLUSTER_NAME`
     *    - `WEB_LOGIC_DOMAIN_NAME`
     *    - `WEB_LOGIC_HOME`
     *    - `WEB_LOGIC_NAME`
     *    - `WEB_SPHERE_CELL_NAME`
     *    - `WEB_SPHERE_CLUSTER_NAME`
     *    - `WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME`
     */
    dynamicKey: string;
    /**
     * if specified, needs to be `STRING`
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface AutotagRuleConditionStringKey {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are
     *    - `AMAZON_ECR_IMAGE_ACCOUNT_ID`
     *    - `AMAZON_ECR_IMAGE_REGION`
     *    - `AMAZON_LAMBDA_FUNCTION_NAME`
     *    - `AMAZON_REGION`
     *    - `APACHE_CONFIG_PATH`
     *    - `APACHE_SPARK_MASTER_IP_ADDRESS`
     *    - `ASP_DOT_NET_CORE_APPLICATION_PATH`
     *    - `AWS_ECS_CLUSTER`
     *    - `AWS_ECS_CONTAINERNAME`
     *    - `AWS_ECS_FAMILY`
     *    - `AWS_ECS_REVISION`
     *    - `CASSANDRA_CLUSTER_NAME`
     *    - `CATALINA_BASE`
     *    - `CATALINA_HOME`
     *    - `CLOUD_FOUNDRY_APP_ID`
     *    - `CLOUD_FOUNDRY_APP_NAME`
     *    - `CLOUD_FOUNDRY_INSTANCE_INDEX`
     *    - `CLOUD_FOUNDRY_SPACE_ID`
     *    - `CLOUD_FOUNDRY_SPACE_NAME`
     *    - `COLDFUSION_JVM_CONFIG_FILE`
     *    - `COLDFUSION_SERVICE_NAME`
     *    - `COMMAND_LINE_ARGS`
     *    - `DOTNET_COMMAND`
     *    - `DOTNET_COMMAND_PATH`
     *    - `DYNATRACE_CLUSTER_ID`
     *    - `DYNATRACE_NODE_ID`
     *    - `ELASTICSEARCH_CLUSTER_NAME`
     *    - `ELASTICSEARCH_NODE_NAME`
     *    - `EQUINOX_CONFIG_PATH`
     *    - `EXE_NAME`
     *    - `EXE_PATH`
     *    - `GLASS_FISH_DOMAIN_NAME`
     *    - `GLASS_FISH_INSTANCE_NAME`
     *    - `GOOGLE_APP_ENGINE_INSTANCE`
     *    - `GOOGLE_APP_ENGINE_SERVICE`
     *    - `GOOGLE_CLOUD_PROJECT`
     *    - `HYBRIS_BIN_DIRECTORY`
     *    - `HYBRIS_CONFIG_DIRECTORY`
     *    - `HYBRIS_DATA_DIRECTORY`
     *    - `IBM_CICS_REGION`
     *    - `IBM_CTG_NAME`
     *    - `IBM_IMS_CONNECT_REGION`
     *    - `IBM_IMS_CONTROL_REGION`
     *    - `IBM_IMS_MESSAGE_PROCESSING_REGION`
     *    - `IBM_IMS_SOAP_GW_NAME`
     *    - `IBM_INTEGRATION_NODE_NAME`
     *    - `IBM_INTEGRATION_SERVER_NAME`
     *    - `IIS_APP_POOL`
     *    - `IIS_ROLE_NAME`
     *    - `JAVA_JAR_FILE`
     *    - `JAVA_JAR_PATH`
     *    - `JAVA_MAIN_CLASS`
     *    - `JAVA_MAIN_MODULE`
     *    - `JBOSS_HOME`
     *    - `JBOSS_MODE`
     *    - `JBOSS_SERVER_NAME`
     *    - `KUBERNETES_BASE_POD_NAME`
     *    - `KUBERNETES_CONTAINER_NAME`
     *    - `KUBERNETES_FULL_POD_NAME`
     *    - `KUBERNETES_NAMESPACE`
     *    - `KUBERNETES_POD_UID`
     *    - `MSSQL_INSTANCE_NAME`
     *    - `NODE_JS_APP_BASE_DIRECTORY`
     *    - `NODE_JS_APP_NAME`
     *    - `NODE_JS_SCRIPT_NAME`
     *    - `ORACLE_SID`
     *    - `PG_ID_CALC_INPUT_KEY_LINKAGE`
     *    - `PHP_SCRIPT_PATH`
     *    - `PHP_WORKING_DIRECTORY`
     *    - `RUBY_APP_ROOT_PATH`
     *    - `RUBY_SCRIPT_PATH`
     *    - `RULE_RESULT`
     *    - `SOFTWAREAG_INSTALL_ROOT`
     *    - `SOFTWAREAG_PRODUCTPROPNAME`
     *    - `SPRINGBOOT_APP_NAME`
     *    - `SPRINGBOOT_PROFILE_NAME`
     *    - `SPRINGBOOT_STARTUP_CLASS`
     *    - `TIBCO_BUSINESSWORKS_CE_APP_NAME`
     *    - `TIBCO_BUSINESSWORKS_CE_VERSION`
     *    - `TIBCO_BUSINESS_WORKS_APP_NODE_NAME`
     *    - `TIBCO_BUSINESS_WORKS_APP_SPACE_NAME`
     *    - `TIBCO_BUSINESS_WORKS_DOMAIN_NAME`
     *    - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE`
     *    - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH`
     *    - `TIBCO_BUSINESS_WORKS_HOME`
     *    - `VARNISH_INSTANCE_NAME`
     *    - `WEB_LOGIC_CLUSTER_NAME`
     *    - `WEB_LOGIC_DOMAIN_NAME`
     *    - `WEB_LOGIC_HOME`
     *    - `WEB_LOGIC_NAME`
     *    - `WEB_SPHERE_CELL_NAME`
     *    - `WEB_SPHERE_CLUSTER_NAME`
     *    - `WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME`
     */
    dynamicKey: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface AutotagRuleConditionSyntheticEngine {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are  EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are CLASSIC and CUSTOM
     */
    value?: string;
}

export interface AutotagRuleConditionSyntheticEngineTypeComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are  EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be SYNTHETIC_ENGINE_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are CLASSIC and CUSTOM
     */
    value?: string;
}

export interface AutotagRuleConditionTag {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and TAG_KEY_EQUALS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * Tag of a Dynatrace entity
     */
    value?: outputs.AutotagRuleConditionTagValue;
}

export interface AutotagRuleConditionTagComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and TAG_KEY_EQUALS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be TAG
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * Tag of a Dynatrace entity
     */
    value?: outputs.AutotagRuleConditionTagComparisonValue;
}

export interface AutotagRuleConditionTagComparisonValue {
    /**
     * The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
     */
    context: string;
    /**
     * The key of the tag. Custom tags have the tag value here
     */
    key: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value of the tag. Not applicable to custom tags
     */
    value?: string;
}

export interface AutotagRuleConditionTagValue {
    /**
     * The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
     */
    context: string;
    /**
     * The key of the tag. Custom tags have the tag value here
     */
    key: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value of the tag. Not applicable to custom tags
     */
    value?: string;
}

export interface AutotagRuleConditionTech {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: outputs.AutotagRuleConditionTechValue;
}

export interface AutotagRuleConditionTechValue {
    /**
     * Predefined technology, if technology is not predefined, then the verbatim type must be set.
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * Non-predefined technology, use for custom technologies
     */
    verbatimType?: string;
}

export interface AutotagRulesRules {
    rules: outputs.AutotagRulesRulesRule[];
}

export interface AutotagRulesRulesRule {
    /**
     * no documentation available
     */
    attributeRule?: outputs.AutotagRulesRulesRuleAttributeRule;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * The documentation of the entity selector can be found [here](https://dt-url.net/apientityselector).
     */
    entitySelector?: string;
    /**
     * Possible Values: `ME`, `SELECTOR`
     */
    type: string;
    /**
     * Optional tag value
     */
    valueFormat?: string;
    /**
     * Possible Values: `Leave text as-is`, `To lower case`, `To upper case`
     */
    valueNormalization: string;
}

export interface AutotagRulesRulesRuleAttributeRule {
    /**
     * Apply to process groups connected to matching Azure entities
     */
    azureToPgpropagation?: boolean;
    /**
     * Apply to services provided by matching Azure entities
     */
    azureToServicePropagation?: boolean;
    /**
     * no documentation available
     */
    conditions: outputs.AutotagRulesRulesRuleAttributeRuleConditions;
    /**
     * Possible Values: `APPLICATION`, `AWS_APPLICATION_LOAD_BALANCER`, `AWS_CLASSIC_LOAD_BALANCER`, `AWS_NETWORK_LOAD_BALANCER`, `AWS_RELATIONAL_DATABASE_SERVICE`, `AZURE`, `CUSTOM_APPLICATION`, `CUSTOM_DEVICE`, `DCRUM_APPLICATION`, `ESXI_HOST`, `EXTERNAL_SYNTHETIC_TEST`, `HOST`, `HTTP_CHECK`, `MOBILE_APPLICATION`, `PROCESS_GROUP`, `SERVICE`, `SYNTHETIC_TEST`
     */
    entityType: string;
    /**
     * Apply to processes running on matching hosts
     */
    hostToPgpropagation?: boolean;
    /**
     * Apply to underlying hosts of matching process groups
     */
    pgToHostPropagation?: boolean;
    /**
     * Apply to all services provided by the process groups
     */
    pgToServicePropagation?: boolean;
    /**
     * Apply to underlying hosts of matching services
     */
    serviceToHostPropagation?: boolean;
    /**
     * Apply to underlying process groups of matching services
     */
    serviceToPgpropagation?: boolean;
}

export interface AutotagRulesRulesRuleAttributeRuleConditions {
    conditions: outputs.AutotagRulesRulesRuleAttributeRuleConditionsCondition[];
}

export interface AutotagRulesRulesRuleAttributeRuleConditionsCondition {
    /**
     * Case sensitive
     */
    caseSensitive?: boolean;
    /**
     * Dynamic key
     */
    dynamicKey?: string;
    /**
     * Key source
     */
    dynamicKeySource?: string;
    /**
     * Value
     */
    entityId?: string;
    /**
     * Value
     */
    enumValue?: string;
    /**
     * Value
     */
    integerValue?: number;
    /**
     * Possible Values: `APPMON_SERVER_NAME`, `APPMON_SYSTEM_PROFILE_NAME`, `AWS_ACCOUNT_ID`, `AWS_ACCOUNT_NAME`, `AWS_APPLICATION_LOAD_BALANCER_NAME`, `AWS_APPLICATION_LOAD_BALANCER_TAGS`, `AWS_AUTO_SCALING_GROUP_NAME`, `AWS_AUTO_SCALING_GROUP_TAGS`, `AWS_AVAILABILITY_ZONE_NAME`, `AWS_CLASSIC_LOAD_BALANCER_FRONTEND_PORTS`, `AWS_CLASSIC_LOAD_BALANCER_NAME`, `AWS_CLASSIC_LOAD_BALANCER_TAGS`, `AWS_NETWORK_LOAD_BALANCER_NAME`, `AWS_NETWORK_LOAD_BALANCER_TAGS`, `AWS_RELATIONAL_DATABASE_SERVICE_DB_NAME`, `AWS_RELATIONAL_DATABASE_SERVICE_ENDPOINT`, `AWS_RELATIONAL_DATABASE_SERVICE_ENGINE`, `AWS_RELATIONAL_DATABASE_SERVICE_INSTANCE_CLASS`, `AWS_RELATIONAL_DATABASE_SERVICE_NAME`, `AWS_RELATIONAL_DATABASE_SERVICE_PORT`, `AWS_RELATIONAL_DATABASE_SERVICE_TAGS`, `AZURE_ENTITY_NAME`, `AZURE_ENTITY_TAGS`, `AZURE_MGMT_GROUP_NAME`, `AZURE_MGMT_GROUP_UUID`, `AZURE_REGION_NAME`, `AZURE_SCALE_SET_NAME`, `AZURE_SUBSCRIPTION_NAME`, `AZURE_SUBSCRIPTION_UUID`, `AZURE_TENANT_NAME`, `AZURE_TENANT_UUID`, `AZURE_VM_NAME`, `BROWSER_MONITOR_NAME`, `BROWSER_MONITOR_TAGS`, `CLOUD_APPLICATION_LABELS`, `CLOUD_APPLICATION_NAME`, `CLOUD_APPLICATION_NAMESPACE_LABELS`, `CLOUD_APPLICATION_NAMESPACE_NAME`, `CLOUD_FOUNDRY_FOUNDATION_NAME`, `CLOUD_FOUNDRY_ORG_NAME`, `CUSTOM_APPLICATION_NAME`, `CUSTOM_APPLICATION_PLATFORM`, `CUSTOM_APPLICATION_TAGS`, `CUSTOM_APPLICATION_TYPE`, `CUSTOM_DEVICE_DNS_ADDRESS`, `CUSTOM_DEVICE_GROUP_NAME`, `CUSTOM_DEVICE_GROUP_TAGS`, `CUSTOM_DEVICE_IP_ADDRESS`, `CUSTOM_DEVICE_METADATA`, `CUSTOM_DEVICE_NAME`, `CUSTOM_DEVICE_PORT`, `CUSTOM_DEVICE_TAGS`, `CUSTOM_DEVICE_TECHNOLOGY`, `DATA_CENTER_SERVICE_DECODER_TYPE`, `DATA_CENTER_SERVICE_IP_ADDRESS`, `DATA_CENTER_SERVICE_METADATA`, `DATA_CENTER_SERVICE_NAME`, `DATA_CENTER_SERVICE_PORT`, `DATA_CENTER_SERVICE_TAGS`, `DOCKER_CONTAINER_NAME`, `DOCKER_FULL_IMAGE_NAME`, `DOCKER_IMAGE_VERSION`, `EC2_INSTANCE_AMI_ID`, `EC2_INSTANCE_AWS_INSTANCE_TYPE`, `EC2_INSTANCE_AWS_SECURITY_GROUP`, `EC2_INSTANCE_BEANSTALK_ENV_NAME`, `EC2_INSTANCE_ID`, `EC2_INSTANCE_NAME`, `EC2_INSTANCE_PRIVATE_HOST_NAME`, `EC2_INSTANCE_PUBLIC_HOST_NAME`, `EC2_INSTANCE_TAGS`, `ENTERPRISE_APPLICATION_DECODER_TYPE`, `ENTERPRISE_APPLICATION_IP_ADDRESS`, `ENTERPRISE_APPLICATION_METADATA`, `ENTERPRISE_APPLICATION_NAME`, `ENTERPRISE_APPLICATION_PORT`, `ENTERPRISE_APPLICATION_TAGS`, `ESXI_HOST_CLUSTER_NAME`, `ESXI_HOST_HARDWARE_MODEL`, `ESXI_HOST_HARDWARE_VENDOR`, `ESXI_HOST_NAME`, `ESXI_HOST_PRODUCT_NAME`, `ESXI_HOST_PRODUCT_VERSION`, `ESXI_HOST_TAGS`, `EXTERNAL_MONITOR_ENGINE_DESCRIPTION`, `EXTERNAL_MONITOR_ENGINE_NAME`, `EXTERNAL_MONITOR_ENGINE_TYPE`, `EXTERNAL_MONITOR_NAME`, `EXTERNAL_MONITOR_TAGS`, `GEOLOCATION_SITE_NAME`, `GOOGLE_CLOUD_PLATFORM_ZONE_NAME`, `GOOGLE_COMPUTE_INSTANCE_ID`, `GOOGLE_COMPUTE_INSTANCE_MACHINE_TYPE`, `GOOGLE_COMPUTE_INSTANCE_NAME`, `GOOGLE_COMPUTE_INSTANCE_PROJECT`, `GOOGLE_COMPUTE_INSTANCE_PROJECT_ID`, `GOOGLE_COMPUTE_INSTANCE_PUBLIC_IP_ADDRESSES`, `HOST_AIX_LOGICAL_CPU_COUNT`, `HOST_AIX_SIMULTANEOUS_THREADS`, `HOST_AIX_VIRTUAL_CPU_COUNT`, `HOST_ARCHITECTURE`, `HOST_AWS_NAME_TAG`, `HOST_AZURE_COMPUTE_MODE`, `HOST_AZURE_SKU`, `HOST_AZURE_WEB_APPLICATION_HOST_NAMES`, `HOST_AZURE_WEB_APPLICATION_SITE_NAMES`, `HOST_BITNESS`, `HOST_BOSH_AVAILABILITY_ZONE`, `HOST_BOSH_DEPLOYMENT_ID`, `HOST_BOSH_INSTANCE_ID`, `HOST_BOSH_INSTANCE_NAME`, `HOST_BOSH_NAME`, `HOST_BOSH_STEMCELL_VERSION`, `HOST_CLOUD_TYPE`, `HOST_CPU_CORES`, `HOST_CUSTOM_METADATA`, `HOST_DETECTED_NAME`, `HOST_GROUP_ID`, `HOST_GROUP_NAME`, `HOST_HYPERVISOR_TYPE`, `HOST_IP_ADDRESS`, `HOST_KUBERNETES_LABELS`, `HOST_LOGICAL_CPU_CORES`, `HOST_NAME`, `HOST_ONEAGENT_CUSTOM_HOST_NAME`, `HOST_OS_TYPE`, `HOST_OS_VERSION`, `HOST_PAAS_MEMORY_LIMIT`, `HOST_PAAS_TYPE`, `HOST_TAGS`, `HOST_TECHNOLOGY`, `HTTP_MONITOR_NAME`, `HTTP_MONITOR_TAGS`, `KUBERNETES_CLUSTER_NAME`, `KUBERNETES_NODE_NAME`, `KUBERNETES_SERVICE_NAME`, `MOBILE_APPLICATION_NAME`, `MOBILE_APPLICATION_PLATFORM`, `MOBILE_APPLICATION_TAGS`, `NAME_OF_COMPUTE_NODE`, `OPENSTACK_ACCOUNT_NAME`, `OPENSTACK_ACCOUNT_PROJECT_NAME`, `OPENSTACK_AVAILABILITY_ZONE_NAME`, `OPENSTACK_PROJECT_NAME`, `OPENSTACK_REGION_NAME`, `OPENSTACK_VM_INSTANCE_TYPE`, `OPENSTACK_VM_NAME`, `OPENSTACK_VM_SECURITY_GROUP`, `PROCESS_GROUP_AZURE_HOST_NAME`, `PROCESS_GROUP_AZURE_SITE_NAME`, `PROCESS_GROUP_CUSTOM_METADATA`, `PROCESS_GROUP_DETECTED_NAME`, `PROCESS_GROUP_ID`, `PROCESS_GROUP_LISTEN_PORT`, `PROCESS_GROUP_NAME`, `PROCESS_GROUP_PREDEFINED_METADATA`, `PROCESS_GROUP_TAGS`, `PROCESS_GROUP_TECHNOLOGY`, `PROCESS_GROUP_TECHNOLOGY_EDITION`, `PROCESS_GROUP_TECHNOLOGY_VERSION`, `QUEUE_NAME`, `QUEUE_TECHNOLOGY`, `QUEUE_VENDOR`, `SERVICE_AKKA_ACTOR_SYSTEM`, `SERVICE_CTG_SERVICE_NAME`, `SERVICE_DATABASE_HOST_NAME`, `SERVICE_DATABASE_NAME`, `SERVICE_DATABASE_TOPOLOGY`, `SERVICE_DATABASE_VENDOR`, `SERVICE_DETECTED_NAME`, `SERVICE_ESB_APPLICATION_NAME`, `SERVICE_IBM_CTG_GATEWAY_URL`, `SERVICE_MESSAGING_LISTENER_CLASS_NAME`, `SERVICE_NAME`, `SERVICE_PORT`, `SERVICE_PUBLIC_DOMAIN_NAME`, `SERVICE_REMOTE_ENDPOINT`, `SERVICE_REMOTE_SERVICE_NAME`, `SERVICE_TAGS`, `SERVICE_TECHNOLOGY`, `SERVICE_TECHNOLOGY_EDITION`, `SERVICE_TECHNOLOGY_VERSION`, `SERVICE_TOPOLOGY`, `SERVICE_TYPE`, `SERVICE_WEB_APPLICATION_ID`, `SERVICE_WEB_CONTEXT_ROOT`, `SERVICE_WEB_SERVER_ENDPOINT`, `SERVICE_WEB_SERVER_NAME`, `SERVICE_WEB_SERVICE_NAME`, `SERVICE_WEB_SERVICE_NAMESPACE`, `VMWARE_DATACENTER_NAME`, `VMWARE_VM_NAME`, `WEB_APPLICATION_NAME`, `WEB_APPLICATION_NAME_PATTERN`, `WEB_APPLICATION_TAGS`, `WEB_APPLICATION_TYPE`
     */
    key: string;
    /**
     * Possible Values: `BEGINS_WITH`, `CONTAINS`, `ENDS_WITH`, `EQUALS`, `EXISTS`, `GREATER_THAN`, `GREATER_THAN_OR_EQUAL`, `IS_IP_IN_RANGE`, `LOWER_THAN`, `LOWER_THAN_OR_EQUAL`, `NOT_BEGINS_WITH`, `NOT_CONTAINS`, `NOT_ENDS_WITH`, `NOT_EQUALS`, `NOT_EXISTS`, `NOT_GREATER_THAN`, `NOT_GREATER_THAN_OR_EQUAL`, `NOT_IS_IP_IN_RANGE`, `NOT_LOWER_THAN`, `NOT_LOWER_THAN_OR_EQUAL`, `NOT_REGEX_MATCHES`, `NOT_TAG_KEY_EQUALS`, `REGEX_MATCHES`, `TAG_KEY_EQUALS`
     */
    operator: string;
    /**
     * Value
     */
    stringValue?: string;
    /**
     * Format: `[CONTEXT]tagKey:tagValue`
     */
    tag?: string;
}

export interface AutotagV2Rules {
    rules: outputs.AutotagV2RulesRule[];
}

export interface AutotagV2RulesRule {
    /**
     * no documentation available
     */
    attributeRule?: outputs.AutotagV2RulesRuleAttributeRule;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * The documentation of the entity selector can be found [here](https://dt-url.net/apientityselector).
     */
    entitySelector?: string;
    /**
     * Possible Values: `ME`, `SELECTOR`
     */
    type: string;
    /**
     * Optional tag value
     */
    valueFormat?: string;
    /**
     * Possible Values: `Leave text as-is`, `To lower case`, `To upper case`
     */
    valueNormalization: string;
}

export interface AutotagV2RulesRuleAttributeRule {
    /**
     * Apply to process groups connected to matching Azure entities
     */
    azureToPgpropagation?: boolean;
    /**
     * Apply to services provided by matching Azure entities
     */
    azureToServicePropagation?: boolean;
    /**
     * no documentation available
     */
    conditions: outputs.AutotagV2RulesRuleAttributeRuleConditions;
    /**
     * Possible Values: `APPLICATION`, `AWS_APPLICATION_LOAD_BALANCER`, `AWS_CLASSIC_LOAD_BALANCER`, `AWS_NETWORK_LOAD_BALANCER`, `AWS_RELATIONAL_DATABASE_SERVICE`, `AZURE`, `CUSTOM_APPLICATION`, `CUSTOM_DEVICE`, `DCRUM_APPLICATION`, `ESXI_HOST`, `EXTERNAL_SYNTHETIC_TEST`, `HOST`, `HTTP_CHECK`, `MOBILE_APPLICATION`, `PROCESS_GROUP`, `SERVICE`, `SYNTHETIC_TEST`
     */
    entityType: string;
    /**
     * Apply to processes running on matching hosts
     */
    hostToPgpropagation?: boolean;
    /**
     * Apply to underlying hosts of matching process groups
     */
    pgToHostPropagation?: boolean;
    /**
     * Apply to all services provided by the process groups
     */
    pgToServicePropagation?: boolean;
    /**
     * Apply to underlying hosts of matching services
     */
    serviceToHostPropagation?: boolean;
    /**
     * Apply to underlying process groups of matching services
     */
    serviceToPgpropagation?: boolean;
}

export interface AutotagV2RulesRuleAttributeRuleConditions {
    conditions: outputs.AutotagV2RulesRuleAttributeRuleConditionsCondition[];
}

export interface AutotagV2RulesRuleAttributeRuleConditionsCondition {
    /**
     * Case sensitive
     */
    caseSensitive?: boolean;
    /**
     * Dynamic key
     */
    dynamicKey?: string;
    /**
     * Key source
     */
    dynamicKeySource?: string;
    /**
     * Value
     */
    entityId?: string;
    /**
     * Value
     */
    enumValue?: string;
    /**
     * Value
     */
    integerValue?: number;
    /**
     * Possible Values: `APPMON_SERVER_NAME`, `APPMON_SYSTEM_PROFILE_NAME`, `AWS_ACCOUNT_ID`, `AWS_ACCOUNT_NAME`, `AWS_APPLICATION_LOAD_BALANCER_NAME`, `AWS_APPLICATION_LOAD_BALANCER_TAGS`, `AWS_AUTO_SCALING_GROUP_NAME`, `AWS_AUTO_SCALING_GROUP_TAGS`, `AWS_AVAILABILITY_ZONE_NAME`, `AWS_CLASSIC_LOAD_BALANCER_FRONTEND_PORTS`, `AWS_CLASSIC_LOAD_BALANCER_NAME`, `AWS_CLASSIC_LOAD_BALANCER_TAGS`, `AWS_NETWORK_LOAD_BALANCER_NAME`, `AWS_NETWORK_LOAD_BALANCER_TAGS`, `AWS_RELATIONAL_DATABASE_SERVICE_DB_NAME`, `AWS_RELATIONAL_DATABASE_SERVICE_ENDPOINT`, `AWS_RELATIONAL_DATABASE_SERVICE_ENGINE`, `AWS_RELATIONAL_DATABASE_SERVICE_INSTANCE_CLASS`, `AWS_RELATIONAL_DATABASE_SERVICE_NAME`, `AWS_RELATIONAL_DATABASE_SERVICE_PORT`, `AWS_RELATIONAL_DATABASE_SERVICE_TAGS`, `AZURE_ENTITY_NAME`, `AZURE_ENTITY_TAGS`, `AZURE_MGMT_GROUP_NAME`, `AZURE_MGMT_GROUP_UUID`, `AZURE_REGION_NAME`, `AZURE_SCALE_SET_NAME`, `AZURE_SUBSCRIPTION_NAME`, `AZURE_SUBSCRIPTION_UUID`, `AZURE_TENANT_NAME`, `AZURE_TENANT_UUID`, `AZURE_VM_NAME`, `BROWSER_MONITOR_NAME`, `BROWSER_MONITOR_TAGS`, `CLOUD_APPLICATION_LABELS`, `CLOUD_APPLICATION_NAME`, `CLOUD_APPLICATION_NAMESPACE_LABELS`, `CLOUD_APPLICATION_NAMESPACE_NAME`, `CLOUD_FOUNDRY_FOUNDATION_NAME`, `CLOUD_FOUNDRY_ORG_NAME`, `CUSTOM_APPLICATION_NAME`, `CUSTOM_APPLICATION_PLATFORM`, `CUSTOM_APPLICATION_TAGS`, `CUSTOM_APPLICATION_TYPE`, `CUSTOM_DEVICE_DNS_ADDRESS`, `CUSTOM_DEVICE_GROUP_NAME`, `CUSTOM_DEVICE_GROUP_TAGS`, `CUSTOM_DEVICE_IP_ADDRESS`, `CUSTOM_DEVICE_METADATA`, `CUSTOM_DEVICE_NAME`, `CUSTOM_DEVICE_PORT`, `CUSTOM_DEVICE_TAGS`, `CUSTOM_DEVICE_TECHNOLOGY`, `DATA_CENTER_SERVICE_DECODER_TYPE`, `DATA_CENTER_SERVICE_IP_ADDRESS`, `DATA_CENTER_SERVICE_METADATA`, `DATA_CENTER_SERVICE_NAME`, `DATA_CENTER_SERVICE_PORT`, `DATA_CENTER_SERVICE_TAGS`, `DOCKER_CONTAINER_NAME`, `DOCKER_FULL_IMAGE_NAME`, `DOCKER_IMAGE_VERSION`, `EC2_INSTANCE_AMI_ID`, `EC2_INSTANCE_AWS_INSTANCE_TYPE`, `EC2_INSTANCE_AWS_SECURITY_GROUP`, `EC2_INSTANCE_BEANSTALK_ENV_NAME`, `EC2_INSTANCE_ID`, `EC2_INSTANCE_NAME`, `EC2_INSTANCE_PRIVATE_HOST_NAME`, `EC2_INSTANCE_PUBLIC_HOST_NAME`, `EC2_INSTANCE_TAGS`, `ENTERPRISE_APPLICATION_DECODER_TYPE`, `ENTERPRISE_APPLICATION_IP_ADDRESS`, `ENTERPRISE_APPLICATION_METADATA`, `ENTERPRISE_APPLICATION_NAME`, `ENTERPRISE_APPLICATION_PORT`, `ENTERPRISE_APPLICATION_TAGS`, `ESXI_HOST_CLUSTER_NAME`, `ESXI_HOST_HARDWARE_MODEL`, `ESXI_HOST_HARDWARE_VENDOR`, `ESXI_HOST_NAME`, `ESXI_HOST_PRODUCT_NAME`, `ESXI_HOST_PRODUCT_VERSION`, `ESXI_HOST_TAGS`, `EXTERNAL_MONITOR_ENGINE_DESCRIPTION`, `EXTERNAL_MONITOR_ENGINE_NAME`, `EXTERNAL_MONITOR_ENGINE_TYPE`, `EXTERNAL_MONITOR_NAME`, `EXTERNAL_MONITOR_TAGS`, `GEOLOCATION_SITE_NAME`, `GOOGLE_CLOUD_PLATFORM_ZONE_NAME`, `GOOGLE_COMPUTE_INSTANCE_ID`, `GOOGLE_COMPUTE_INSTANCE_MACHINE_TYPE`, `GOOGLE_COMPUTE_INSTANCE_NAME`, `GOOGLE_COMPUTE_INSTANCE_PROJECT`, `GOOGLE_COMPUTE_INSTANCE_PROJECT_ID`, `GOOGLE_COMPUTE_INSTANCE_PUBLIC_IP_ADDRESSES`, `HOST_AIX_LOGICAL_CPU_COUNT`, `HOST_AIX_SIMULTANEOUS_THREADS`, `HOST_AIX_VIRTUAL_CPU_COUNT`, `HOST_ARCHITECTURE`, `HOST_AWS_NAME_TAG`, `HOST_AZURE_COMPUTE_MODE`, `HOST_AZURE_SKU`, `HOST_AZURE_WEB_APPLICATION_HOST_NAMES`, `HOST_AZURE_WEB_APPLICATION_SITE_NAMES`, `HOST_BITNESS`, `HOST_BOSH_AVAILABILITY_ZONE`, `HOST_BOSH_DEPLOYMENT_ID`, `HOST_BOSH_INSTANCE_ID`, `HOST_BOSH_INSTANCE_NAME`, `HOST_BOSH_NAME`, `HOST_BOSH_STEMCELL_VERSION`, `HOST_CLOUD_TYPE`, `HOST_CPU_CORES`, `HOST_CUSTOM_METADATA`, `HOST_DETECTED_NAME`, `HOST_GROUP_ID`, `HOST_GROUP_NAME`, `HOST_HYPERVISOR_TYPE`, `HOST_IP_ADDRESS`, `HOST_KUBERNETES_LABELS`, `HOST_LOGICAL_CPU_CORES`, `HOST_NAME`, `HOST_ONEAGENT_CUSTOM_HOST_NAME`, `HOST_OS_TYPE`, `HOST_OS_VERSION`, `HOST_PAAS_MEMORY_LIMIT`, `HOST_PAAS_TYPE`, `HOST_TAGS`, `HOST_TECHNOLOGY`, `HTTP_MONITOR_NAME`, `HTTP_MONITOR_TAGS`, `KUBERNETES_CLUSTER_NAME`, `KUBERNETES_NODE_NAME`, `KUBERNETES_SERVICE_NAME`, `MOBILE_APPLICATION_NAME`, `MOBILE_APPLICATION_PLATFORM`, `MOBILE_APPLICATION_TAGS`, `NAME_OF_COMPUTE_NODE`, `OPENSTACK_ACCOUNT_NAME`, `OPENSTACK_ACCOUNT_PROJECT_NAME`, `OPENSTACK_AVAILABILITY_ZONE_NAME`, `OPENSTACK_PROJECT_NAME`, `OPENSTACK_REGION_NAME`, `OPENSTACK_VM_INSTANCE_TYPE`, `OPENSTACK_VM_NAME`, `OPENSTACK_VM_SECURITY_GROUP`, `PROCESS_GROUP_AZURE_HOST_NAME`, `PROCESS_GROUP_AZURE_SITE_NAME`, `PROCESS_GROUP_CUSTOM_METADATA`, `PROCESS_GROUP_DETECTED_NAME`, `PROCESS_GROUP_ID`, `PROCESS_GROUP_LISTEN_PORT`, `PROCESS_GROUP_NAME`, `PROCESS_GROUP_PREDEFINED_METADATA`, `PROCESS_GROUP_TAGS`, `PROCESS_GROUP_TECHNOLOGY`, `PROCESS_GROUP_TECHNOLOGY_EDITION`, `PROCESS_GROUP_TECHNOLOGY_VERSION`, `QUEUE_NAME`, `QUEUE_TECHNOLOGY`, `QUEUE_VENDOR`, `SERVICE_AKKA_ACTOR_SYSTEM`, `SERVICE_CTG_SERVICE_NAME`, `SERVICE_DATABASE_HOST_NAME`, `SERVICE_DATABASE_NAME`, `SERVICE_DATABASE_TOPOLOGY`, `SERVICE_DATABASE_VENDOR`, `SERVICE_DETECTED_NAME`, `SERVICE_ESB_APPLICATION_NAME`, `SERVICE_IBM_CTG_GATEWAY_URL`, `SERVICE_MESSAGING_LISTENER_CLASS_NAME`, `SERVICE_NAME`, `SERVICE_PORT`, `SERVICE_PUBLIC_DOMAIN_NAME`, `SERVICE_REMOTE_ENDPOINT`, `SERVICE_REMOTE_SERVICE_NAME`, `SERVICE_TAGS`, `SERVICE_TECHNOLOGY`, `SERVICE_TECHNOLOGY_EDITION`, `SERVICE_TECHNOLOGY_VERSION`, `SERVICE_TOPOLOGY`, `SERVICE_TYPE`, `SERVICE_WEB_APPLICATION_ID`, `SERVICE_WEB_CONTEXT_ROOT`, `SERVICE_WEB_SERVER_ENDPOINT`, `SERVICE_WEB_SERVER_NAME`, `SERVICE_WEB_SERVICE_NAME`, `SERVICE_WEB_SERVICE_NAMESPACE`, `VMWARE_DATACENTER_NAME`, `VMWARE_VM_NAME`, `WEB_APPLICATION_NAME`, `WEB_APPLICATION_NAME_PATTERN`, `WEB_APPLICATION_TAGS`, `WEB_APPLICATION_TYPE`
     */
    key: string;
    /**
     * Possible Values: `BEGINS_WITH`, `CONTAINS`, `ENDS_WITH`, `EQUALS`, `EXISTS`, `GREATER_THAN`, `GREATER_THAN_OR_EQUAL`, `IS_IP_IN_RANGE`, `LOWER_THAN`, `LOWER_THAN_OR_EQUAL`, `NOT_BEGINS_WITH`, `NOT_CONTAINS`, `NOT_ENDS_WITH`, `NOT_EQUALS`, `NOT_EXISTS`, `NOT_GREATER_THAN`, `NOT_GREATER_THAN_OR_EQUAL`, `NOT_IS_IP_IN_RANGE`, `NOT_LOWER_THAN`, `NOT_LOWER_THAN_OR_EQUAL`, `NOT_REGEX_MATCHES`, `NOT_TAG_KEY_EQUALS`, `REGEX_MATCHES`, `TAG_KEY_EQUALS`
     */
    operator: string;
    /**
     * Value
     */
    stringValue?: string;
    /**
     * Format: `[CONTEXT]tagKey:tagValue`
     */
    tag?: string;
}

export interface AwsAnomaliesEc2CandidateHighCpuDetection {
    /**
     * Alert if the condition is met in 3 out of 5 samples
     */
    customThresholds?: outputs.AwsAnomaliesEc2CandidateHighCpuDetectionCustomThresholds;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface AwsAnomaliesEc2CandidateHighCpuDetectionCustomThresholds {
    /**
     * CPU usage is higher than
     */
    cpuUsage: number;
}

export interface AwsAnomaliesElbHighConnectionErrorsDetection {
    /**
     * Alert if the condition is met in 3 out of 5 samples
     */
    customThresholds?: outputs.AwsAnomaliesElbHighConnectionErrorsDetectionCustomThresholds;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface AwsAnomaliesElbHighConnectionErrorsDetectionCustomThresholds {
    /**
     * Number of backend connection errors is higher than
     */
    connectionErrorsPerMinute: number;
}

export interface AwsAnomaliesLambdaHighErrorRateDetection {
    /**
     * Alert if the condition is met in 3 out of 5 samples
     */
    customThresholds?: outputs.AwsAnomaliesLambdaHighErrorRateDetectionCustomThresholds;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface AwsAnomaliesLambdaHighErrorRateDetectionCustomThresholds {
    /**
     * Failed invocations rate is higher than
     */
    failedInvocationsRate: number;
}

export interface AwsAnomaliesRdsHighCpuDetection {
    /**
     * Alert if the condition is met in 3 out of 5 samples
     */
    customThresholds?: outputs.AwsAnomaliesRdsHighCpuDetectionCustomThresholds;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface AwsAnomaliesRdsHighCpuDetectionCustomThresholds {
    /**
     * CPU usage is higher than
     */
    cpuUsage: number;
}

export interface AwsAnomaliesRdsHighMemoryDetection {
    /**
     * Alert if **both** conditions is met in 3 out of 5 samples
     */
    customThresholds?: outputs.AwsAnomaliesRdsHighMemoryDetectionCustomThresholds;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface AwsAnomaliesRdsHighMemoryDetectionCustomThresholds {
    /**
     * Freeable memory is lower than
     */
    freeMemory: number;
    /**
     * Swap usage is higher than
     */
    swapUsage: number;
}

export interface AwsAnomaliesRdsHighWriteReadLatencyDetection {
    /**
     * Alert if the condition is met in 3 out of 5 samples
     */
    customThresholds?: outputs.AwsAnomaliesRdsHighWriteReadLatencyDetectionCustomThresholds;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface AwsAnomaliesRdsHighWriteReadLatencyDetectionCustomThresholds {
    /**
     * Read/write latency is higher than
     */
    readWriteLatency: number;
}

export interface AwsAnomaliesRdsLowStorageDetection {
    /**
     * Alert if the condition is met in 3 out of 5 samples
     */
    customThresholds?: outputs.AwsAnomaliesRdsLowStorageDetectionCustomThresholds;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface AwsAnomaliesRdsLowStorageDetectionCustomThresholds {
    /**
     * Free storage space divided by allocated storage is lower than
     */
    freeStoragePercentage: number;
}

export interface AwsAnomaliesRdsRestartsSequenceDetection {
    /**
     * Alert if the condition is met in 2 out of 20 samples
     */
    customThresholds?: outputs.AwsAnomaliesRdsRestartsSequenceDetectionCustomThresholds;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface AwsAnomaliesRdsRestartsSequenceDetectionCustomThresholds {
    /**
     * Number of restarts per minute is equal or higher than
     */
    restartsPerMinute: number;
}

export interface AwsCredentialsAuthenticationData {
    /**
     * the access key
     */
    accessKey?: string;
    /**
     * the ID of the Amazon account
     */
    accountId?: string;
    /**
     * (Read only) the external ID token for setting an IAM role. You can obtain it with the `GET /aws/iamExternalId` request
     */
    externalId: string;
    /**
     * the IAM role to be used by Dynatrace to get monitoring data
     */
    iamRole?: string;
    /**
     * the secret access key
     */
    secretKey?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
}

export interface AwsCredentialsSupportingServicesToMonitor {
    /**
     * a list of metrics to be monitored for this service
     */
    monitoredMetrics?: outputs.AwsCredentialsSupportingServicesToMonitorMonitoredMetric[];
    /**
     * the name of the supporting service
     */
    name?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
}

export interface AwsCredentialsSupportingServicesToMonitorMonitoredMetric {
    /**
     * a list of metric's dimensions names
     */
    dimensions?: string[];
    /**
     * the name of the metric of the supporting service
     */
    name?: string;
    /**
     * the statistic (aggregation) to be used for the metric. AVG*MIN*MAX value is 3 statistics at once: AVERAGE, MINIMUM and MAXIMUM
     */
    statistic?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
}

export interface AwsCredentialsTagsToMonitor {
    /**
     * the key of the AWS tag.
     */
    name?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * the value of the AWS tag
     */
    value?: string;
}

export interface AwsServiceMetric {
    /**
     * a list of metric's dimensions names
     */
    dimensions?: string[];
    /**
     * the name of the metric of the supporting service
     */
    name: string;
    /**
     * Possible values are `AVERAGE`, `AVG_MIN_MAX`, `MAXIMUM`, `MINIMUM`, `SAMPLE_COUNT` and `SUM`
     */
    statistic?: string;
}

export interface AzureCredentialsMonitorOnlyExcludingTagPair {
    /**
     * The name of the tag.
     */
    name?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value of the tag.   If set to `null`, then resources with any value of the tag are monitored.
     */
    value?: string;
}

export interface AzureCredentialsMonitorOnlyTagPair {
    /**
     * The name of the tag.
     */
    name?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value of the tag.   If set to `null`, then resources with any value of the tag are monitored.
     */
    value?: string;
}

export interface AzureCredentialsSupportingService {
    /**
     * A list of Azure tags to be monitored.  You can specify up to 10 tags. A resource tagged with *any* of the specified tags is monitored.  Only applicable when the **monitorOnlyTaggedEntities** parameter is set to `true`
     */
    monitoredMetrics?: outputs.AzureCredentialsSupportingServiceMonitoredMetric[];
    /**
     * The name of the supporting service.
     */
    name?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
}

export interface AzureCredentialsSupportingServiceMonitoredMetric {
    /**
     * a list of metric's dimensions names
     */
    dimensions?: string[];
    /**
     * the name of the metric of the supporting service
     */
    name?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
}

export interface AzureServiceMetric {
    /**
     * a list of metric's dimensions names
     */
    dimensions?: string[];
    /**
     * the name of the metric of the supporting service
     */
    name: string;
}

export interface BrowserMonitorAnomalyDetection {
    /**
     * Thresholds for loading times
     */
    loadingTimeThresholds?: outputs.BrowserMonitorAnomalyDetectionLoadingTimeThreshold[];
    /**
     * Outage handling configuration
     */
    outageHandlings?: outputs.BrowserMonitorAnomalyDetectionOutageHandling[];
}

export interface BrowserMonitorAnomalyDetectionLoadingTimeThreshold {
    /**
     * Performance threshold is enabled (`true`) or disabled (`false`)
     */
    enabled?: boolean;
    /**
     * The list of performance threshold rules
     */
    thresholds?: outputs.BrowserMonitorAnomalyDetectionLoadingTimeThresholdThreshold[];
}

export interface BrowserMonitorAnomalyDetectionLoadingTimeThresholdThreshold {
    /**
     * The list of performance threshold rules
     */
    thresholds: outputs.BrowserMonitorAnomalyDetectionLoadingTimeThresholdThresholdThreshold[];
}

export interface BrowserMonitorAnomalyDetectionLoadingTimeThresholdThresholdThreshold {
    /**
     * Specify the event to which an ACTION threshold applies
     */
    eventIndex?: number;
    /**
     * Specify the request to which an ACTION threshold applies
     */
    requestIndex?: number;
    /**
     * The type of the threshold: `TOTAL` (total loading time) or `ACTION` (action loading time)
     */
    type?: string;
    /**
     * Notify if monitor takes longer than *X* milliseconds to load
     */
    valueMs: number;
}

export interface BrowserMonitorAnomalyDetectionOutageHandling {
    /**
     * (Field has overlap with `dynatrace.BrowserMonitorOutage` and `dynatrace.HttpMonitorOutage`) When enabled (`true`), generate a problem and send an alert when the monitor is unavailable at all configured locations
     */
    globalOutage?: boolean;
    /**
     * (Field has overlap with `dynatrace.BrowserMonitorOutage` and `dynatrace.HttpMonitorOutage`) Global outage handling configuration.
     */
    globalOutagePolicies?: outputs.BrowserMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicy[];
    /**
     * (Field has overlap with `dynatrace.BrowserMonitorOutage` and `dynatrace.HttpMonitorOutage`) When enabled (`true`), generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location
     */
    localOutage?: boolean;
    /**
     * (Field has overlap with `dynatrace.BrowserMonitorOutage` and `dynatrace.HttpMonitorOutage`) Local outage handling configuration. 
     *
     *  Alert if **affectedLocations** of locations are unable to access the web application **consecutiveRuns** times consecutively
     */
    localOutagePolicies?: outputs.BrowserMonitorAnomalyDetectionOutageHandlingLocalOutagePolicy[];
    /**
     * (Field has overlap with `dynatrace.BrowserMonitorOutage` and `dynatrace.HttpMonitorOutage`) Schedule retry if browser monitor execution results in a fail. For HTTP monitors this property is ignored
     */
    retryOnError?: boolean;
}

export interface BrowserMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicy {
    /**
     * The number of consecutive fails to trigger an alert
     */
    consecutiveRuns: number;
}

export interface BrowserMonitorAnomalyDetectionOutageHandlingLocalOutagePolicy {
    /**
     * The number of affected locations to trigger an alert
     */
    affectedLocations: number;
    /**
     * The number of consecutive fails to trigger an alert
     */
    consecutiveRuns: number;
}

export interface BrowserMonitorKeyPerformanceMetrics {
    /**
     * Defines the key performance metric for load actions. Supported values are `VISUALLY_COMPLETE`, `SPEED_INDEX`, `USER_ACTION_DURATION`, `TIME_TO_FIRST_BYTE`, `HTML_DOWNLOADED`, `DOM_INTERACTIVE`, `LOAD_EVENT_START` and `LOAD_EVENT_END`.
     */
    loadActionKpm: string;
    /**
     * Defines the key performance metric for XHR actions. Supported values are `VISUALLY_COMPLETE`, `USER_ACTION_DURATION`, `TIME_TO_FIRST_BYTE` and `RESPONSE_END`.
     */
    xhrActionKpm: string;
}

export interface BrowserMonitorPerformanceThresholds {
    thresholds: outputs.BrowserMonitorPerformanceThresholdsThreshold[];
}

export interface BrowserMonitorPerformanceThresholdsThreshold {
    /**
     * Synthetic event
     */
    event: string;
    /**
     * Threshold (in seconds)
     */
    threshold: number;
}

export interface BrowserMonitorScript {
    /**
     * The setup of the monitor
     */
    configuration?: outputs.BrowserMonitorScriptConfiguration;
    /**
     * Steps of the clickpath—the first step must always be of the `navigate` type
     */
    events?: outputs.BrowserMonitorScriptEvents;
    /**
     * The type of monitor. Possible values are `clickpath` for clickpath monitors and `availability` for single-URL browser monitors. These monitors are only allowed to have one event of the `navigate` type
     */
    type: string;
}

export interface BrowserMonitorScriptConfiguration {
    /**
     * The emulated device of the monitor—holds either the parameters of the custom device or the name and orientation of the preconfigured device.
     */
    bandwidth?: outputs.BrowserMonitorScriptConfigurationBandwidth;
    /**
     * Block these URLs
     */
    blocks?: string[];
    /**
     * Bypass Content Security Policy of monitored pages
     */
    bypassCsp?: boolean;
    /**
     * These cookies are added before execution of the first step
     */
    cookies?: outputs.BrowserMonitorScriptConfigurationCookies;
    /**
     * The emulated device of the monitor—holds either the parameters of the custom device or the name and orientation of the preconfigured device.
     *
     * If not set, then the Desktop preconfigured device is used
     */
    device?: outputs.BrowserMonitorScriptConfigurationDevice;
    /**
     * No documentation available
     */
    disableWebSecurity?: boolean;
    /**
     * The list of HTTP headers to be sent with requests of the monitor
     */
    headers?: outputs.BrowserMonitorScriptConfigurationHeaders;
    /**
     * Ignore specific status codes
     */
    ignoredErrorCodes?: outputs.BrowserMonitorScriptConfigurationIgnoredErrorCodes;
    /**
     * Custom JavaScript Agent settings
     */
    javascriptSetttings?: outputs.BrowserMonitorScriptConfigurationJavascriptSetttings;
    /**
     * Capture performance metrics for pages loaded in frames
     */
    monitorFrames?: boolean;
    /**
     * The user agent of the request
     */
    userAgent?: string;
}

export interface BrowserMonitorScriptConfigurationBandwidth {
    /**
     * The download speed of the network, in bytes per second
     */
    download?: number;
    /**
     * The latency of the network, in milliseconds
     */
    latency?: number;
    /**
     * The type of the preconfigured network—when editing in the browser, press `Crtl+Spacebar` to see the list of available networks
     */
    networkType?: string;
    /**
     * The upload speed of the network, in bytes per second
     */
    upload?: number;
}

export interface BrowserMonitorScriptConfigurationCookies {
    /**
     * A request cookie
     */
    cookies: outputs.BrowserMonitorScriptConfigurationCookiesCookie[];
}

export interface BrowserMonitorScriptConfigurationCookiesCookie {
    /**
     * The domain of the cookie.
     */
    domain: string;
    /**
     * The name of the cookie. The following cookie names are now allowed: `dtCookie`, `dtLatC`, `dtPC`, `rxVisitor`, `rxlatency`, `rxpc`, `rxsession` and `rxvt`
     */
    name: string;
    /**
     * The path of the cookie.
     */
    path?: string;
    /**
     * The value of the cookie. The following symbols are not allowed: `;`, `,`, `\` and `"`.
     */
    value: string;
}

export interface BrowserMonitorScriptConfigurationDevice {
    /**
     * The height of the screen in pixels.
     * The maximum allowed width is `1080`.
     */
    height?: number;
    /**
     * The flag of the mobile device.
     * Set to `true` for mobile devices or `false` for a desktop or laptop.
     */
    mobile?: boolean;
    /**
     * The name of the preconfigured device—when editing in the browser, press `Crtl+Spacebar` to see the list of available devices
     */
    name?: string;
    /**
     * The orientation of the device. Possible values are `portrait` or `landscape`. Desktop and laptop devices are not allowed to use the `portrait` orientation
     */
    orientation?: string;
    /**
     * The pixel ratio of the device.
     */
    scaleFactor?: number;
    /**
     * The flag of the touchscreen.
     * Set to `true` if the device uses touchscreen. In that case, use can set interaction event as `tap`.
     */
    touchEnabled?: boolean;
    /**
     * The width of the screen in pixels.
     * The maximum allowed width is `1920`.
     */
    width?: number;
}

export interface BrowserMonitorScriptConfigurationHeaders {
    /**
     * contains an HTTP header of the request
     */
    headers: outputs.BrowserMonitorScriptConfigurationHeadersHeader[];
    /**
     * Restrict applying headers to a set of URLs
     */
    restrictions?: string[];
}

export interface BrowserMonitorScriptConfigurationHeadersHeader {
    /**
     * The key of the header
     */
    name: string;
    /**
     * The value of the header
     */
    value: string;
}

export interface BrowserMonitorScriptConfigurationIgnoredErrorCodes {
    /**
     * Only apply to document request matching this regex
     */
    matchingDocumentRequests?: string;
    /**
     * You can use exact number, range or status class mask. Multiple values can be separated by comma, i.e. 404, 405-410, 5xx
     */
    statusCodes: string;
}

export interface BrowserMonitorScriptConfigurationJavascriptSetttings {
    /**
     * Additional Javascript Agent Properties
     */
    customProperties?: string;
    /**
     * Capture fetch() requests
     */
    fetchRequests?: boolean;
    /**
     * JavaScript error report
     */
    javascriptErrors?: boolean;
    /**
     * Timed action support
     */
    timedActions?: boolean;
    /**
     * Custom JavaScript Agent settings
     */
    timeoutSettings?: outputs.BrowserMonitorScriptConfigurationJavascriptSetttingsTimeoutSettings;
    /**
     * Parameters for Visually complete and Speed index calculation
     */
    visuallyCompleteOptions?: outputs.BrowserMonitorScriptConfigurationJavascriptSetttingsVisuallyCompleteOptions;
    /**
     * Capture XMLHttpRequests (XHR)
     */
    xmlHttpRequests?: boolean;
}

export interface BrowserMonitorScriptConfigurationJavascriptSetttingsTimeoutSettings {
    /**
     * Track up to n cascading setTimeout calls
     */
    actionLimit: number;
    /**
     * Limit cascading timeouts cumulatively to n ms
     */
    totalTimeout: number;
}

export interface BrowserMonitorScriptConfigurationJavascriptSetttingsVisuallyCompleteOptions {
    /**
     * Query CSS selectors to specify mutation nodes (elements that change) to ignore in Visually complete and Speed index calculation
     */
    excludedElements?: string[];
    /**
     * Parameters for Visually complete and Speed index calculation
     */
    excludedUrls?: string[];
    /**
     * Use this setting to define the minimum visible area per element (in pixels) for an element to be counted towards Visually complete and Speed index
     */
    imageSizeThreshold: number;
    /**
     * The time the Visually complete module waits for inactivity and no further mutations on the page after the load action
     */
    inactivityTimeout: number;
    /**
     * The time the Visually complete module waits after an XHR or custom action closes to start the calculation
     */
    mutationTimeout: number;
}

export interface BrowserMonitorScriptEvents {
    /**
     * An event
     */
    events?: outputs.BrowserMonitorScriptEventsEvent[];
}

export interface BrowserMonitorScriptEventsEvent {
    /**
     * Properties specified for a click event
     */
    click?: outputs.BrowserMonitorScriptEventsEventClick;
    /**
     * Properties specified for a cookie event
     */
    cookie?: outputs.BrowserMonitorScriptEventsEventCookie;
    /**
     * A short description of the event to appear in the UI
     */
    description: string;
    /**
     * Properties specified for a javascript event
     */
    javascript?: outputs.BrowserMonitorScriptEventsEventJavascript;
    /**
     * Properties specified for a key strokes event
     */
    keystrokes?: outputs.BrowserMonitorScriptEventsEventKeystrokes;
    /**
     * Properties specified for a navigation event
     */
    navigate?: outputs.BrowserMonitorScriptEventsEventNavigate;
    /**
     * Properties specified for a key strokes event.
     */
    select?: outputs.BrowserMonitorScriptEventsEventSelect;
    /**
     * Properties specified for a tap event
     */
    tap?: outputs.BrowserMonitorScriptEventsEventTap;
}

export interface BrowserMonitorScriptEventsEventClick {
    /**
     * the mouse button to be used for the click
     */
    button: number;
    /**
     * The tab on which the page should open
     */
    target?: outputs.BrowserMonitorScriptEventsEventClickTarget;
    /**
     * The validation rules for the event—helps you verify that your browser monitor loads the expected page content or page element
     */
    validate?: outputs.BrowserMonitorScriptEventsEventClickValidate;
    /**
     * The wait condition for the event—defines how long Dynatrace should wait before the next action is executed
     */
    wait?: outputs.BrowserMonitorScriptEventsEventClickWait;
}

export interface BrowserMonitorScriptEventsEventClickTarget {
    /**
     * The list of locators identifying the desired element
     */
    locators?: outputs.BrowserMonitorScriptEventsEventClickTargetLocator[];
    /**
     * The tab of the target
     */
    window?: string;
}

export interface BrowserMonitorScriptEventsEventClickTargetLocator {
    /**
     * A locator dentifyies the desired element
     */
    locators: outputs.BrowserMonitorScriptEventsEventClickTargetLocatorLocator[];
}

export interface BrowserMonitorScriptEventsEventClickTargetLocatorLocator {
    /**
     * Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
     */
    type: string;
    /**
     * The name of the element to be found
     */
    value: string;
}

export interface BrowserMonitorScriptEventsEventClickValidate {
    /**
     * The element to wait for. Required for the `validation` type, not applicable otherwise.
     */
    validations: outputs.BrowserMonitorScriptEventsEventClickValidateValidation[];
}

export interface BrowserMonitorScriptEventsEventClickValidateValidation {
    /**
     * The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
     */
    failIfFound?: boolean;
    /**
     * The content to look for on the page.
     * Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `contentMatch`, optional for `elementMatch`.
     */
    match?: string;
    /**
     * Defines whether `match` is plain text (`false`) or a regular expression (`true`)
     */
    regex?: boolean;
    /**
     * The elemnt to look for on the page
     */
    target?: outputs.BrowserMonitorScriptEventsEventClickValidateValidationTarget;
    /**
     * The goal of the validation. `contentMatch` (check page for the specific content. Not allowed for validation inside of wait condition), `elementMatch` (check page for the specific element).
     */
    type: string;
}

export interface BrowserMonitorScriptEventsEventClickValidateValidationTarget {
    /**
     * The list of locators identifying the desired element
     */
    locators?: outputs.BrowserMonitorScriptEventsEventClickValidateValidationTargetLocator[];
    /**
     * The tab of the target
     */
    window?: string;
}

export interface BrowserMonitorScriptEventsEventClickValidateValidationTargetLocator {
    /**
     * A locator dentifyies the desired element
     */
    locators: outputs.BrowserMonitorScriptEventsEventClickValidateValidationTargetLocatorLocator[];
}

export interface BrowserMonitorScriptEventsEventClickValidateValidationTargetLocatorLocator {
    /**
     * Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
     */
    type: string;
    /**
     * The name of the element to be found
     */
    value: string;
}

export interface BrowserMonitorScriptEventsEventClickWait {
    /**
     * The time to wait, in millisencods. The maximum allowed value is `60000`. Required for the type `time`, not applicable otherwise.
     */
    milliseconds?: number;
    /**
     * he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
     * The maximum allowed value is 60000. Required for the type `validation`, not applicable otherwise..
     */
    timeout?: number;
    /**
     * The elements to wait for. Required for the `validation` type, not applicable otherwise.
     */
    validation?: outputs.BrowserMonitorScriptEventsEventClickWaitValidation;
    /**
     * The time to wait before the next event is triggered. Possible values are `pageComplete` (wait for the page to load completely), `network` (wait for background network activity to complete), `nextAction` (wait for the next action), `time` (wait for a specified periodof time) and `validation` (wait for a specific element to appear)
     */
    waitFor: string;
}

export interface BrowserMonitorScriptEventsEventClickWaitValidation {
    /**
     * The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
     */
    failIfFound?: boolean;
    /**
     * The content to look for on the page.
     * Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `contentMatch`, optional for `elementMatch`.
     */
    match?: string;
    /**
     * Defines whether `match` is plain text (`false`) or a regular expression (`true`)
     */
    regex?: boolean;
    /**
     * The elemnt to look for on the page
     */
    target?: outputs.BrowserMonitorScriptEventsEventClickWaitValidationTarget;
    /**
     * The goal of the validation. `contentMatch` (check page for the specific content. Not allowed for validation inside of wait condition), `elementMatch` (check page for the specific element).
     */
    type: string;
}

export interface BrowserMonitorScriptEventsEventClickWaitValidationTarget {
    /**
     * The list of locators identifying the desired element
     */
    locators?: outputs.BrowserMonitorScriptEventsEventClickWaitValidationTargetLocator[];
    /**
     * The tab of the target
     */
    window?: string;
}

export interface BrowserMonitorScriptEventsEventClickWaitValidationTargetLocator {
    /**
     * A locator dentifyies the desired element
     */
    locators: outputs.BrowserMonitorScriptEventsEventClickWaitValidationTargetLocatorLocator[];
}

export interface BrowserMonitorScriptEventsEventClickWaitValidationTargetLocatorLocator {
    /**
     * Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
     */
    type: string;
    /**
     * The name of the element to be found
     */
    value: string;
}

export interface BrowserMonitorScriptEventsEventCookie {
    /**
     * Every cookie must be unique within the list. However, you can use the same cookie again in other event
     */
    cookies: outputs.BrowserMonitorScriptEventsEventCookieCookies;
}

export interface BrowserMonitorScriptEventsEventCookieCookies {
    /**
     * A request cookie
     */
    cookies: outputs.BrowserMonitorScriptEventsEventCookieCookiesCookie[];
}

export interface BrowserMonitorScriptEventsEventCookieCookiesCookie {
    /**
     * The domain of the cookie.
     */
    domain: string;
    /**
     * The name of the cookie. The following cookie names are now allowed: `dtCookie`, `dtLatC`, `dtPC`, `rxVisitor`, `rxlatency`, `rxpc`, `rxsession` and `rxvt`
     */
    name: string;
    /**
     * The path of the cookie.
     */
    path?: string;
    /**
     * The value of the cookie. The following symbols are not allowed: `;`, `,`, `\` and `"`.
     */
    value: string;
}

export interface BrowserMonitorScriptEventsEventJavascript {
    /**
     * The JavaScript code to be executed in this event
     */
    code: string;
    /**
     * The tab on which the page should open
     */
    target?: outputs.BrowserMonitorScriptEventsEventJavascriptTarget;
    /**
     * The wait condition for the event—defines how long Dynatrace should wait before the next action is executed
     */
    wait?: outputs.BrowserMonitorScriptEventsEventJavascriptWait;
}

export interface BrowserMonitorScriptEventsEventJavascriptTarget {
    /**
     * The list of locators identifying the desired element
     */
    locators?: outputs.BrowserMonitorScriptEventsEventJavascriptTargetLocator[];
    /**
     * The tab of the target
     */
    window?: string;
}

export interface BrowserMonitorScriptEventsEventJavascriptTargetLocator {
    /**
     * A locator dentifyies the desired element
     */
    locators: outputs.BrowserMonitorScriptEventsEventJavascriptTargetLocatorLocator[];
}

export interface BrowserMonitorScriptEventsEventJavascriptTargetLocatorLocator {
    /**
     * Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
     */
    type: string;
    /**
     * The name of the element to be found
     */
    value: string;
}

export interface BrowserMonitorScriptEventsEventJavascriptWait {
    /**
     * The time to wait, in millisencods. The maximum allowed value is `60000`. Required for the type `time`, not applicable otherwise.
     */
    milliseconds?: number;
    /**
     * he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
     * The maximum allowed value is 60000. Required for the type `validation`, not applicable otherwise..
     */
    timeout?: number;
    /**
     * The elements to wait for. Required for the `validation` type, not applicable otherwise.
     */
    validation?: outputs.BrowserMonitorScriptEventsEventJavascriptWaitValidation;
    /**
     * The time to wait before the next event is triggered. Possible values are `pageComplete` (wait for the page to load completely), `network` (wait for background network activity to complete), `nextAction` (wait for the next action), `time` (wait for a specified periodof time) and `validation` (wait for a specific element to appear)
     */
    waitFor: string;
}

export interface BrowserMonitorScriptEventsEventJavascriptWaitValidation {
    /**
     * The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
     */
    failIfFound?: boolean;
    /**
     * The content to look for on the page.
     * Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `contentMatch`, optional for `elementMatch`.
     */
    match?: string;
    /**
     * Defines whether `match` is plain text (`false`) or a regular expression (`true`)
     */
    regex?: boolean;
    /**
     * The elemnt to look for on the page
     */
    target?: outputs.BrowserMonitorScriptEventsEventJavascriptWaitValidationTarget;
    /**
     * The goal of the validation. `contentMatch` (check page for the specific content. Not allowed for validation inside of wait condition), `elementMatch` (check page for the specific element).
     */
    type: string;
}

export interface BrowserMonitorScriptEventsEventJavascriptWaitValidationTarget {
    /**
     * The list of locators identifying the desired element
     */
    locators?: outputs.BrowserMonitorScriptEventsEventJavascriptWaitValidationTargetLocator[];
    /**
     * The tab of the target
     */
    window?: string;
}

export interface BrowserMonitorScriptEventsEventJavascriptWaitValidationTargetLocator {
    /**
     * A locator dentifyies the desired element
     */
    locators: outputs.BrowserMonitorScriptEventsEventJavascriptWaitValidationTargetLocatorLocator[];
}

export interface BrowserMonitorScriptEventsEventJavascriptWaitValidationTargetLocatorLocator {
    /**
     * Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
     */
    type: string;
    /**
     * The name of the element to be found
     */
    value: string;
}

export interface BrowserMonitorScriptEventsEventKeystrokes {
    /**
     * Credentials for this event
     */
    credential?: outputs.BrowserMonitorScriptEventsEventKeystrokesCredential;
    /**
     * Indicates whether the `textValue` is encrypted (`true`) or not (`false`). Must not be specified if `credentials` from the vault are being used
     */
    masked?: boolean;
    /**
     * Defines whether to blur the text field when it loses focus.
     * Set to `true` to trigger the blur the `textValue`
     */
    simulateBlurEvent?: boolean;
    /**
     * Simulates pressing the 'Return' key after simulating other keystrokes. For example, to submit a form or trigger a login.
     */
    simulateReturnKey?: boolean;
    /**
     * The tab on which the page should open
     */
    target?: outputs.BrowserMonitorScriptEventsEventKeystrokesTarget;
    /**
     * The text to enter. Must not be specified if `credentials` from the vault are being used
     */
    text?: string;
    /**
     * The validation rules for the event—helps you verify that your browser monitor loads the expected page content or page element
     */
    validate?: outputs.BrowserMonitorScriptEventsEventKeystrokesValidate;
    /**
     * The wait condition for the event—defines how long Dynatrace should wait before the next action is executed
     */
    wait?: outputs.BrowserMonitorScriptEventsEventKeystrokesWait;
}

export interface BrowserMonitorScriptEventsEventKeystrokesCredential {
    /**
     * Either `username` or `password`
     */
    field: string;
    /**
     * The ID of the credential within the Credentials Vault
     */
    vaultId: string;
}

export interface BrowserMonitorScriptEventsEventKeystrokesTarget {
    /**
     * The list of locators identifying the desired element
     */
    locators?: outputs.BrowserMonitorScriptEventsEventKeystrokesTargetLocator[];
    /**
     * The tab of the target
     */
    window?: string;
}

export interface BrowserMonitorScriptEventsEventKeystrokesTargetLocator {
    /**
     * A locator dentifyies the desired element
     */
    locators: outputs.BrowserMonitorScriptEventsEventKeystrokesTargetLocatorLocator[];
}

export interface BrowserMonitorScriptEventsEventKeystrokesTargetLocatorLocator {
    /**
     * Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
     */
    type: string;
    /**
     * The name of the element to be found
     */
    value: string;
}

export interface BrowserMonitorScriptEventsEventKeystrokesValidate {
    /**
     * The element to wait for. Required for the `validation` type, not applicable otherwise.
     */
    validations: outputs.BrowserMonitorScriptEventsEventKeystrokesValidateValidation[];
}

export interface BrowserMonitorScriptEventsEventKeystrokesValidateValidation {
    /**
     * The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
     */
    failIfFound?: boolean;
    /**
     * The content to look for on the page.
     * Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `contentMatch`, optional for `elementMatch`.
     */
    match?: string;
    /**
     * Defines whether `match` is plain text (`false`) or a regular expression (`true`)
     */
    regex?: boolean;
    /**
     * The elemnt to look for on the page
     */
    target?: outputs.BrowserMonitorScriptEventsEventKeystrokesValidateValidationTarget;
    /**
     * The goal of the validation. `contentMatch` (check page for the specific content. Not allowed for validation inside of wait condition), `elementMatch` (check page for the specific element).
     */
    type: string;
}

export interface BrowserMonitorScriptEventsEventKeystrokesValidateValidationTarget {
    /**
     * The list of locators identifying the desired element
     */
    locators?: outputs.BrowserMonitorScriptEventsEventKeystrokesValidateValidationTargetLocator[];
    /**
     * The tab of the target
     */
    window?: string;
}

export interface BrowserMonitorScriptEventsEventKeystrokesValidateValidationTargetLocator {
    /**
     * A locator dentifyies the desired element
     */
    locators: outputs.BrowserMonitorScriptEventsEventKeystrokesValidateValidationTargetLocatorLocator[];
}

export interface BrowserMonitorScriptEventsEventKeystrokesValidateValidationTargetLocatorLocator {
    /**
     * Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
     */
    type: string;
    /**
     * The name of the element to be found
     */
    value: string;
}

export interface BrowserMonitorScriptEventsEventKeystrokesWait {
    /**
     * The time to wait, in millisencods. The maximum allowed value is `60000`. Required for the type `time`, not applicable otherwise.
     */
    milliseconds?: number;
    /**
     * he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
     * The maximum allowed value is 60000. Required for the type `validation`, not applicable otherwise..
     */
    timeout?: number;
    /**
     * The elements to wait for. Required for the `validation` type, not applicable otherwise.
     */
    validation?: outputs.BrowserMonitorScriptEventsEventKeystrokesWaitValidation;
    /**
     * The time to wait before the next event is triggered. Possible values are `pageComplete` (wait for the page to load completely), `network` (wait for background network activity to complete), `nextAction` (wait for the next action), `time` (wait for a specified periodof time) and `validation` (wait for a specific element to appear)
     */
    waitFor: string;
}

export interface BrowserMonitorScriptEventsEventKeystrokesWaitValidation {
    /**
     * The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
     */
    failIfFound?: boolean;
    /**
     * The content to look for on the page.
     * Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `contentMatch`, optional for `elementMatch`.
     */
    match?: string;
    /**
     * Defines whether `match` is plain text (`false`) or a regular expression (`true`)
     */
    regex?: boolean;
    /**
     * The elemnt to look for on the page
     */
    target?: outputs.BrowserMonitorScriptEventsEventKeystrokesWaitValidationTarget;
    /**
     * The goal of the validation. `contentMatch` (check page for the specific content. Not allowed for validation inside of wait condition), `elementMatch` (check page for the specific element).
     */
    type: string;
}

export interface BrowserMonitorScriptEventsEventKeystrokesWaitValidationTarget {
    /**
     * The list of locators identifying the desired element
     */
    locators?: outputs.BrowserMonitorScriptEventsEventKeystrokesWaitValidationTargetLocator[];
    /**
     * The tab of the target
     */
    window?: string;
}

export interface BrowserMonitorScriptEventsEventKeystrokesWaitValidationTargetLocator {
    /**
     * A locator dentifyies the desired element
     */
    locators: outputs.BrowserMonitorScriptEventsEventKeystrokesWaitValidationTargetLocatorLocator[];
}

export interface BrowserMonitorScriptEventsEventKeystrokesWaitValidationTargetLocatorLocator {
    /**
     * Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
     */
    type: string;
    /**
     * The name of the element to be found
     */
    value: string;
}

export interface BrowserMonitorScriptEventsEventNavigate {
    /**
     * The login credentials to bypass the browser login mask
     */
    authentication?: outputs.BrowserMonitorScriptEventsEventNavigateAuthentication;
    /**
     * The tab on which the page should open
     */
    target?: outputs.BrowserMonitorScriptEventsEventNavigateTarget;
    /**
     * The URL to navigate to
     */
    url: string;
    /**
     * The validation rules for the event—helps you verify that your browser monitor loads the expected page content or page element
     */
    validate?: outputs.BrowserMonitorScriptEventsEventNavigateValidate;
    /**
     * The wait condition for the event—defines how long Dynatrace should wait before the next action is executed
     */
    wait?: outputs.BrowserMonitorScriptEventsEventNavigateWait;
}

export interface BrowserMonitorScriptEventsEventNavigateAuthentication {
    /**
     * List of allowed servers, optional with Kerberos authentication
     */
    authServerAllowlist?: string;
    /**
     * A reference to the entry within the credential vault
     */
    creds: string;
    /**
     * User's domain name, required with Kerberos authentication
     */
    domain?: string;
    /**
     * The type of authentication
     */
    type: string;
}

export interface BrowserMonitorScriptEventsEventNavigateTarget {
    /**
     * The list of locators identifying the desired element
     */
    locators?: outputs.BrowserMonitorScriptEventsEventNavigateTargetLocator[];
    /**
     * The tab of the target
     */
    window?: string;
}

export interface BrowserMonitorScriptEventsEventNavigateTargetLocator {
    /**
     * A locator dentifyies the desired element
     */
    locators: outputs.BrowserMonitorScriptEventsEventNavigateTargetLocatorLocator[];
}

export interface BrowserMonitorScriptEventsEventNavigateTargetLocatorLocator {
    /**
     * Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
     */
    type: string;
    /**
     * The name of the element to be found
     */
    value: string;
}

export interface BrowserMonitorScriptEventsEventNavigateValidate {
    /**
     * The element to wait for. Required for the `validation` type, not applicable otherwise.
     */
    validations: outputs.BrowserMonitorScriptEventsEventNavigateValidateValidation[];
}

export interface BrowserMonitorScriptEventsEventNavigateValidateValidation {
    /**
     * The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
     */
    failIfFound?: boolean;
    /**
     * The content to look for on the page.
     * Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `contentMatch`, optional for `elementMatch`.
     */
    match?: string;
    /**
     * Defines whether `match` is plain text (`false`) or a regular expression (`true`)
     */
    regex?: boolean;
    /**
     * The elemnt to look for on the page
     */
    target?: outputs.BrowserMonitorScriptEventsEventNavigateValidateValidationTarget;
    /**
     * The goal of the validation. `contentMatch` (check page for the specific content. Not allowed for validation inside of wait condition), `elementMatch` (check page for the specific element).
     */
    type: string;
}

export interface BrowserMonitorScriptEventsEventNavigateValidateValidationTarget {
    /**
     * The list of locators identifying the desired element
     */
    locators?: outputs.BrowserMonitorScriptEventsEventNavigateValidateValidationTargetLocator[];
    /**
     * The tab of the target
     */
    window?: string;
}

export interface BrowserMonitorScriptEventsEventNavigateValidateValidationTargetLocator {
    /**
     * A locator dentifyies the desired element
     */
    locators: outputs.BrowserMonitorScriptEventsEventNavigateValidateValidationTargetLocatorLocator[];
}

export interface BrowserMonitorScriptEventsEventNavigateValidateValidationTargetLocatorLocator {
    /**
     * Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
     */
    type: string;
    /**
     * The name of the element to be found
     */
    value: string;
}

export interface BrowserMonitorScriptEventsEventNavigateWait {
    /**
     * The time to wait, in millisencods. The maximum allowed value is `60000`. Required for the type `time`, not applicable otherwise.
     */
    milliseconds?: number;
    /**
     * he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
     * The maximum allowed value is 60000. Required for the type `validation`, not applicable otherwise..
     */
    timeout?: number;
    /**
     * The elements to wait for. Required for the `validation` type, not applicable otherwise.
     */
    validation?: outputs.BrowserMonitorScriptEventsEventNavigateWaitValidation;
    /**
     * The time to wait before the next event is triggered. Possible values are `pageComplete` (wait for the page to load completely), `network` (wait for background network activity to complete), `nextAction` (wait for the next action), `time` (wait for a specified periodof time) and `validation` (wait for a specific element to appear)
     */
    waitFor: string;
}

export interface BrowserMonitorScriptEventsEventNavigateWaitValidation {
    /**
     * The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
     */
    failIfFound?: boolean;
    /**
     * The content to look for on the page.
     * Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `contentMatch`, optional for `elementMatch`.
     */
    match?: string;
    /**
     * Defines whether `match` is plain text (`false`) or a regular expression (`true`)
     */
    regex?: boolean;
    /**
     * The elemnt to look for on the page
     */
    target?: outputs.BrowserMonitorScriptEventsEventNavigateWaitValidationTarget;
    /**
     * The goal of the validation. `contentMatch` (check page for the specific content. Not allowed for validation inside of wait condition), `elementMatch` (check page for the specific element).
     */
    type: string;
}

export interface BrowserMonitorScriptEventsEventNavigateWaitValidationTarget {
    /**
     * The list of locators identifying the desired element
     */
    locators?: outputs.BrowserMonitorScriptEventsEventNavigateWaitValidationTargetLocator[];
    /**
     * The tab of the target
     */
    window?: string;
}

export interface BrowserMonitorScriptEventsEventNavigateWaitValidationTargetLocator {
    /**
     * A locator dentifyies the desired element
     */
    locators: outputs.BrowserMonitorScriptEventsEventNavigateWaitValidationTargetLocatorLocator[];
}

export interface BrowserMonitorScriptEventsEventNavigateWaitValidationTargetLocatorLocator {
    /**
     * Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
     */
    type: string;
    /**
     * The name of the element to be found
     */
    value: string;
}

export interface BrowserMonitorScriptEventsEventSelect {
    /**
     * The options to be selected
     */
    selections: outputs.BrowserMonitorScriptEventsEventSelectSelections;
    /**
     * The tab on which the page should open
     */
    target?: outputs.BrowserMonitorScriptEventsEventSelectTarget;
    /**
     * The validation rules for the event—helps you verify that your browser monitor loads the expected page content or page element
     */
    validate?: outputs.BrowserMonitorScriptEventsEventSelectValidate;
    /**
     * The wait condition for the event—defines how long Dynatrace should wait before the next action is executed
     */
    wait?: outputs.BrowserMonitorScriptEventsEventSelectWait;
}

export interface BrowserMonitorScriptEventsEventSelectSelections {
    /**
     * The option to be selected
     */
    options: outputs.BrowserMonitorScriptEventsEventSelectSelectionsOption[];
}

export interface BrowserMonitorScriptEventsEventSelectSelectionsOption {
    /**
     * The index of the option to be selected
     */
    index: number;
    /**
     * The value of the option to be selected
     */
    value: string;
}

export interface BrowserMonitorScriptEventsEventSelectTarget {
    /**
     * The list of locators identifying the desired element
     */
    locators?: outputs.BrowserMonitorScriptEventsEventSelectTargetLocator[];
    /**
     * The tab of the target
     */
    window?: string;
}

export interface BrowserMonitorScriptEventsEventSelectTargetLocator {
    /**
     * A locator dentifyies the desired element
     */
    locators: outputs.BrowserMonitorScriptEventsEventSelectTargetLocatorLocator[];
}

export interface BrowserMonitorScriptEventsEventSelectTargetLocatorLocator {
    /**
     * Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
     */
    type: string;
    /**
     * The name of the element to be found
     */
    value: string;
}

export interface BrowserMonitorScriptEventsEventSelectValidate {
    /**
     * The element to wait for. Required for the `validation` type, not applicable otherwise.
     */
    validations: outputs.BrowserMonitorScriptEventsEventSelectValidateValidation[];
}

export interface BrowserMonitorScriptEventsEventSelectValidateValidation {
    /**
     * The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
     */
    failIfFound?: boolean;
    /**
     * The content to look for on the page.
     * Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `contentMatch`, optional for `elementMatch`.
     */
    match?: string;
    /**
     * Defines whether `match` is plain text (`false`) or a regular expression (`true`)
     */
    regex?: boolean;
    /**
     * The elemnt to look for on the page
     */
    target?: outputs.BrowserMonitorScriptEventsEventSelectValidateValidationTarget;
    /**
     * The goal of the validation. `contentMatch` (check page for the specific content. Not allowed for validation inside of wait condition), `elementMatch` (check page for the specific element).
     */
    type: string;
}

export interface BrowserMonitorScriptEventsEventSelectValidateValidationTarget {
    /**
     * The list of locators identifying the desired element
     */
    locators?: outputs.BrowserMonitorScriptEventsEventSelectValidateValidationTargetLocator[];
    /**
     * The tab of the target
     */
    window?: string;
}

export interface BrowserMonitorScriptEventsEventSelectValidateValidationTargetLocator {
    /**
     * A locator dentifyies the desired element
     */
    locators: outputs.BrowserMonitorScriptEventsEventSelectValidateValidationTargetLocatorLocator[];
}

export interface BrowserMonitorScriptEventsEventSelectValidateValidationTargetLocatorLocator {
    /**
     * Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
     */
    type: string;
    /**
     * The name of the element to be found
     */
    value: string;
}

export interface BrowserMonitorScriptEventsEventSelectWait {
    /**
     * The time to wait, in millisencods. The maximum allowed value is `60000`. Required for the type `time`, not applicable otherwise.
     */
    milliseconds?: number;
    /**
     * he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
     * The maximum allowed value is 60000. Required for the type `validation`, not applicable otherwise..
     */
    timeout?: number;
    /**
     * The elements to wait for. Required for the `validation` type, not applicable otherwise.
     */
    validation?: outputs.BrowserMonitorScriptEventsEventSelectWaitValidation;
    /**
     * The time to wait before the next event is triggered. Possible values are `pageComplete` (wait for the page to load completely), `network` (wait for background network activity to complete), `nextAction` (wait for the next action), `time` (wait for a specified periodof time) and `validation` (wait for a specific element to appear)
     */
    waitFor: string;
}

export interface BrowserMonitorScriptEventsEventSelectWaitValidation {
    /**
     * The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
     */
    failIfFound?: boolean;
    /**
     * The content to look for on the page.
     * Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `contentMatch`, optional for `elementMatch`.
     */
    match?: string;
    /**
     * Defines whether `match` is plain text (`false`) or a regular expression (`true`)
     */
    regex?: boolean;
    /**
     * The elemnt to look for on the page
     */
    target?: outputs.BrowserMonitorScriptEventsEventSelectWaitValidationTarget;
    /**
     * The goal of the validation. `contentMatch` (check page for the specific content. Not allowed for validation inside of wait condition), `elementMatch` (check page for the specific element).
     */
    type: string;
}

export interface BrowserMonitorScriptEventsEventSelectWaitValidationTarget {
    /**
     * The list of locators identifying the desired element
     */
    locators?: outputs.BrowserMonitorScriptEventsEventSelectWaitValidationTargetLocator[];
    /**
     * The tab of the target
     */
    window?: string;
}

export interface BrowserMonitorScriptEventsEventSelectWaitValidationTargetLocator {
    /**
     * A locator dentifyies the desired element
     */
    locators: outputs.BrowserMonitorScriptEventsEventSelectWaitValidationTargetLocatorLocator[];
}

export interface BrowserMonitorScriptEventsEventSelectWaitValidationTargetLocatorLocator {
    /**
     * Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
     */
    type: string;
    /**
     * The name of the element to be found
     */
    value: string;
}

export interface BrowserMonitorScriptEventsEventTap {
    /**
     * the mouse button to be used for the click
     */
    button: number;
    /**
     * The tab on which the page should open
     */
    target?: outputs.BrowserMonitorScriptEventsEventTapTarget;
    /**
     * The validation rules for the event—helps you verify that your browser monitor loads the expected page content or page element
     */
    validate?: outputs.BrowserMonitorScriptEventsEventTapValidate;
    /**
     * The wait condition for the event—defines how long Dynatrace should wait before the next action is executed
     */
    wait?: outputs.BrowserMonitorScriptEventsEventTapWait;
}

export interface BrowserMonitorScriptEventsEventTapTarget {
    /**
     * The list of locators identifying the desired element
     */
    locators?: outputs.BrowserMonitorScriptEventsEventTapTargetLocator[];
    /**
     * The tab of the target
     */
    window?: string;
}

export interface BrowserMonitorScriptEventsEventTapTargetLocator {
    /**
     * A locator dentifyies the desired element
     */
    locators: outputs.BrowserMonitorScriptEventsEventTapTargetLocatorLocator[];
}

export interface BrowserMonitorScriptEventsEventTapTargetLocatorLocator {
    /**
     * Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
     */
    type: string;
    /**
     * The name of the element to be found
     */
    value: string;
}

export interface BrowserMonitorScriptEventsEventTapValidate {
    /**
     * The element to wait for. Required for the `validation` type, not applicable otherwise.
     */
    validations: outputs.BrowserMonitorScriptEventsEventTapValidateValidation[];
}

export interface BrowserMonitorScriptEventsEventTapValidateValidation {
    /**
     * The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
     */
    failIfFound?: boolean;
    /**
     * The content to look for on the page.
     * Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `contentMatch`, optional for `elementMatch`.
     */
    match?: string;
    /**
     * Defines whether `match` is plain text (`false`) or a regular expression (`true`)
     */
    regex?: boolean;
    /**
     * The elemnt to look for on the page
     */
    target?: outputs.BrowserMonitorScriptEventsEventTapValidateValidationTarget;
    /**
     * The goal of the validation. `contentMatch` (check page for the specific content. Not allowed for validation inside of wait condition), `elementMatch` (check page for the specific element).
     */
    type: string;
}

export interface BrowserMonitorScriptEventsEventTapValidateValidationTarget {
    /**
     * The list of locators identifying the desired element
     */
    locators?: outputs.BrowserMonitorScriptEventsEventTapValidateValidationTargetLocator[];
    /**
     * The tab of the target
     */
    window?: string;
}

export interface BrowserMonitorScriptEventsEventTapValidateValidationTargetLocator {
    /**
     * A locator dentifyies the desired element
     */
    locators: outputs.BrowserMonitorScriptEventsEventTapValidateValidationTargetLocatorLocator[];
}

export interface BrowserMonitorScriptEventsEventTapValidateValidationTargetLocatorLocator {
    /**
     * Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
     */
    type: string;
    /**
     * The name of the element to be found
     */
    value: string;
}

export interface BrowserMonitorScriptEventsEventTapWait {
    /**
     * The time to wait, in millisencods. The maximum allowed value is `60000`. Required for the type `time`, not applicable otherwise.
     */
    milliseconds?: number;
    /**
     * he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
     * The maximum allowed value is 60000. Required for the type `validation`, not applicable otherwise..
     */
    timeout?: number;
    /**
     * The elements to wait for. Required for the `validation` type, not applicable otherwise.
     */
    validation?: outputs.BrowserMonitorScriptEventsEventTapWaitValidation;
    /**
     * The time to wait before the next event is triggered. Possible values are `pageComplete` (wait for the page to load completely), `network` (wait for background network activity to complete), `nextAction` (wait for the next action), `time` (wait for a specified periodof time) and `validation` (wait for a specific element to appear)
     */
    waitFor: string;
}

export interface BrowserMonitorScriptEventsEventTapWaitValidation {
    /**
     * The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
     */
    failIfFound?: boolean;
    /**
     * The content to look for on the page.
     * Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `contentMatch`, optional for `elementMatch`.
     */
    match?: string;
    /**
     * Defines whether `match` is plain text (`false`) or a regular expression (`true`)
     */
    regex?: boolean;
    /**
     * The elemnt to look for on the page
     */
    target?: outputs.BrowserMonitorScriptEventsEventTapWaitValidationTarget;
    /**
     * The goal of the validation. `contentMatch` (check page for the specific content. Not allowed for validation inside of wait condition), `elementMatch` (check page for the specific element).
     */
    type: string;
}

export interface BrowserMonitorScriptEventsEventTapWaitValidationTarget {
    /**
     * The list of locators identifying the desired element
     */
    locators?: outputs.BrowserMonitorScriptEventsEventTapWaitValidationTargetLocator[];
    /**
     * The tab of the target
     */
    window?: string;
}

export interface BrowserMonitorScriptEventsEventTapWaitValidationTargetLocator {
    /**
     * A locator dentifyies the desired element
     */
    locators: outputs.BrowserMonitorScriptEventsEventTapWaitValidationTargetLocatorLocator[];
}

export interface BrowserMonitorScriptEventsEventTapWaitValidationTargetLocatorLocator {
    /**
     * Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
     */
    type: string;
    /**
     * The name of the element to be found
     */
    value: string;
}

export interface BrowserMonitorTag {
    /**
     * Tag with source of a Dynatrace entity.
     */
    tags?: outputs.BrowserMonitorTagTag[];
}

export interface BrowserMonitorTagTag {
    /**
     * The origin of the tag. Supported values are `AWS`, `AWS_GENERIC`, `AZURE`, `CLOUD_FOUNDRY`, `CONTEXTLESS`, `ENVIRONMENT`, `GOOGLE_CLOUD` and `KUBERNETES`.
     */
    context: string;
    /**
     * The key of the tag.
     *
     * Custom tags have the tag value here.
     */
    key: string;
    /**
     * The source of the tag. Supported values are `USER`, `RULE_BASED` and `AUTO`.
     */
    source?: string;
    /**
     * The value of the tag.
     *
     * Not applicable to custom tags.
     */
    value?: string;
}

export interface BusinessEventsOneagentEvent {
    /**
     * Event category
     */
    category: outputs.BusinessEventsOneagentEventCategory;
    /**
     * Additional attributes for the business event.
     */
    data?: outputs.BusinessEventsOneagentEventData;
    /**
     * Event provider
     */
    provider: outputs.BusinessEventsOneagentEventProvider;
    /**
     * Event type
     */
    type: outputs.BusinessEventsOneagentEventType;
}

export interface BusinessEventsOneagentEventCategory {
    /**
     * [See our documentation](https://dt-url.net/ei034bx)
     */
    path?: string;
    /**
     * Fixed value
     */
    source?: string;
    /**
     * Possible Values: `Constant_string`, `Request_body`, `Request_headers`, `Request_method`, `Request_parameters`, `Request_path`, `Request_url`, `Response_body`, `Response_headers`, `Response_statusCode`
     */
    sourceType: string;
}

export interface BusinessEventsOneagentEventData {
    eventDataFieldComplexes: outputs.BusinessEventsOneagentEventDataEventDataFieldComplex[];
}

export interface BusinessEventsOneagentEventDataEventDataFieldComplex {
    /**
     * Field name to be added to data.
     */
    name: string;
    /**
     * no documentation available
     */
    source: outputs.BusinessEventsOneagentEventDataEventDataFieldComplexSource;
}

export interface BusinessEventsOneagentEventDataEventDataFieldComplexSource {
    /**
     * [See our documentation](https://dt-url.net/ei034bx)
     */
    path?: string;
    /**
     * Fixed value
     */
    source?: string;
    /**
     * Possible Values: `Constant_string`, `Request_body`, `Request_headers`, `Request_method`, `Request_parameters`, `Request_path`, `Request_url`, `Response_body`, `Response_headers`, `Response_statusCode`
     */
    sourceType: string;
}

export interface BusinessEventsOneagentEventProvider {
    /**
     * [See our documentation](https://dt-url.net/ei034bx)
     */
    path?: string;
    /**
     * Fixed value
     */
    source?: string;
    /**
     * Possible Values: `Constant_string`, `Request_body`, `Request_headers`, `Request_method`, `Request_parameters`, `Request_path`, `Request_url`, `Response_body`, `Response_headers`, `Response_statusCode`
     */
    sourceType: string;
}

export interface BusinessEventsOneagentEventType {
    /**
     * [See our documentation](https://dt-url.net/ei034bx)
     */
    path?: string;
    /**
     * Fixed value
     */
    source?: string;
    /**
     * Possible Values: `Constant_string`, `Request_body`, `Request_headers`, `Request_method`, `Request_parameters`, `Request_path`, `Request_url`, `Response_body`, `Response_headers`, `Response_statusCode`
     */
    sourceType: string;
}

export interface BusinessEventsOneagentOutgoingEvent {
    /**
     * Event category
     */
    category: outputs.BusinessEventsOneagentOutgoingEventCategory;
    /**
     * Additional attributes for the business event.
     */
    data?: outputs.BusinessEventsOneagentOutgoingEventData;
    /**
     * Event provider
     */
    provider: outputs.BusinessEventsOneagentOutgoingEventProvider;
    /**
     * Event type
     */
    type: outputs.BusinessEventsOneagentOutgoingEventType;
}

export interface BusinessEventsOneagentOutgoingEventCategory {
    /**
     * [See our documentation](https://dt-url.net/ei034bx)
     */
    path?: string;
    /**
     * Fixed value
     */
    source?: string;
    /**
     * Possible Values: `Constant_string`, `Request_body`, `Request_headers`, `Request_method`, `Request_parameters`, `Request_path`, `Request_url`, `Response_body`, `Response_headers`, `Response_statusCode`
     */
    sourceType: string;
}

export interface BusinessEventsOneagentOutgoingEventData {
    eventDataFieldComplexes: outputs.BusinessEventsOneagentOutgoingEventDataEventDataFieldComplex[];
}

export interface BusinessEventsOneagentOutgoingEventDataEventDataFieldComplex {
    /**
     * Field name to be added to data.
     */
    name: string;
    /**
     * no documentation available
     */
    source: outputs.BusinessEventsOneagentOutgoingEventDataEventDataFieldComplexSource;
}

export interface BusinessEventsOneagentOutgoingEventDataEventDataFieldComplexSource {
    /**
     * [See our documentation](https://dt-url.net/ei034bx)
     */
    path?: string;
    /**
     * Fixed value
     */
    source?: string;
    /**
     * Possible Values: `Constant_string`, `Request_body`, `Request_headers`, `Request_method`, `Request_parameters`, `Request_path`, `Request_url`, `Response_body`, `Response_headers`, `Response_statusCode`
     */
    sourceType: string;
}

export interface BusinessEventsOneagentOutgoingEventProvider {
    /**
     * [See our documentation](https://dt-url.net/ei034bx)
     */
    path?: string;
    /**
     * Fixed value
     */
    source?: string;
    /**
     * Possible Values: `Constant_string`, `Request_body`, `Request_headers`, `Request_method`, `Request_parameters`, `Request_path`, `Request_url`, `Response_body`, `Response_headers`, `Response_statusCode`
     */
    sourceType: string;
}

export interface BusinessEventsOneagentOutgoingEventType {
    /**
     * [See our documentation](https://dt-url.net/ei034bx)
     */
    path?: string;
    /**
     * Fixed value
     */
    source?: string;
    /**
     * Possible Values: `Constant_string`, `Request_body`, `Request_headers`, `Request_method`, `Request_parameters`, `Request_path`, `Request_url`, `Response_body`, `Response_headers`, `Response_statusCode`
     */
    sourceType: string;
}

export interface BusinessEventsOneagentOutgoingTriggers {
    triggers: outputs.BusinessEventsOneagentOutgoingTriggersTrigger[];
}

export interface BusinessEventsOneagentOutgoingTriggersTrigger {
    /**
     * Case sensitive
     */
    caseSensitive?: boolean;
    /**
     * no documentation available
     */
    source: outputs.BusinessEventsOneagentOutgoingTriggersTriggerSource;
    /**
     * Possible Values: `CONTAINS`, `ENDS_WITH`, `EQUALS`, `EXISTS`, `N_CONTAINS`, `N_ENDS_WITH`, `N_EQUALS`, `N_EXISTS`, `N_STARTS_WITH`, `STARTS_WITH`
     */
    type: string;
    /**
     * no documentation available
     */
    value?: string;
}

export interface BusinessEventsOneagentOutgoingTriggersTriggerSource {
    /**
     * Possible Values: `Request_body`, `Request_headers`, `Request_method`, `Request_parameters`, `Request_path`, `Request_url`, `Response_body`, `Response_headers`, `Response_statusCode`
     */
    dataSource: string;
    /**
     * [See our documentation](https://dt-url.net/ei034bx)
     */
    path?: string;
}

export interface BusinessEventsOneagentTriggers {
    triggers: outputs.BusinessEventsOneagentTriggersTrigger[];
}

export interface BusinessEventsOneagentTriggersTrigger {
    /**
     * Case sensitive
     */
    caseSensitive?: boolean;
    /**
     * no documentation available
     */
    source: outputs.BusinessEventsOneagentTriggersTriggerSource;
    /**
     * Possible Values: `CONTAINS`, `ENDS_WITH`, `EQUALS`, `EXISTS`, `N_CONTAINS`, `N_ENDS_WITH`, `N_EQUALS`, `N_EXISTS`, `N_STARTS_WITH`, `STARTS_WITH`
     */
    type: string;
    /**
     * no documentation available
     */
    value?: string;
}

export interface BusinessEventsOneagentTriggersTriggerSource {
    /**
     * Possible Values: `Request_body`, `Request_headers`, `Request_method`, `Request_parameters`, `Request_path`, `Request_url`, `Response_body`, `Response_headers`, `Response_statusCode`
     */
    dataSource: string;
    /**
     * [See our documentation](https://dt-url.net/ei034bx)
     */
    path?: string;
}

export interface BusinessEventsProcessingRuleTesting {
    /**
     * Sample event to use for the test run. Only JSON format is supported.
     */
    sampleEvent: string;
}

export interface BusinessEventsProcessingTransformationFields {
    transformationFields: outputs.BusinessEventsProcessingTransformationFieldsTransformationField[];
}

export interface BusinessEventsProcessingTransformationFieldsTransformationField {
    /**
     * Is Array
     */
    array: boolean;
    /**
     * no documentation available
     */
    name: string;
    /**
     * no documentation available
     */
    optional: boolean;
    /**
     * Read-only
     */
    readonly: boolean;
    /**
     * Possible Values: `BOOLEAN`, `DOUBLE`, `DURATION`, `INT`, `IPADDR`, `LONG`, `STRING`, `TIMESTAMP`
     */
    type: string;
}

export interface BusinessEventsSecurityContextSecurityContextRule {
    /**
     * Matcher
     */
    query: string;
    /**
     * Rule name
     */
    ruleName: string;
    /**
     * Literal value to be set
     */
    value?: string;
    /**
     * Possible Values: `FIELD`, `LITERAL`
     */
    valueSource: string;
    /**
     * Name of field used to copy value
     */
    valueSourceField?: string;
}

export interface CalculatedMobileMetricDimension {
    /**
     * A dimensions for the metric usage
     */
    dimensions?: outputs.CalculatedMobileMetricDimensionDimension[];
}

export interface CalculatedMobileMetricDimensionDimension {
    /**
     * The dimension of the metric. Possible values are `ApdexType`, `Browser`, `ErrorContext`, `ErrorOrigin`, `ErrorType`, `GeoLocation`, `StringProperty`, `UserActionType`
     */
    dimension: string;
    /**
     * The number of top values to be calculated
     */
    topX: number;
}

export interface CalculatedMobileMetricUserActionFilter {
    /**
     * Only actions with a duration more than or equal to this value (in milliseconds) are included in the metric calculation.
     */
    actionDurationFromMilliseconds?: number;
    /**
     * Only actions with a duration less than or equal to this value (in milliseconds) are included in the metric calculation.
     */
    actionDurationToMilliseconds?: number;
    /**
     * Only actions with the specified Apdex score are included in the metric calculation. Possible values: [ Frustrated, Satisfied, Tolerating, Unknown ]
     */
    apdex?: string;
    /**
     * Only actions coming from this app version are included in the metric calculation.
     */
    appVersion?: string;
    /**
     * Only actions coming from this carrier type are included in the metric calculation.
     */
    carrier?: string;
    /**
     * Only actions of users from this city are included in the metric calculation. Specify geolocation ID here.
     */
    city?: string;
    /**
     * Only actions coming from this connection type are included in the metric calculation. Possible values: [ LAN, MOBILE, OFFLINE, UNKNOWN, WIFI ]
     */
    connectionType?: string;
    /**
     * Only actions of users from this continent are included in the metric calculation. Specify geolocation ID here.
     */
    continent?: string;
    /**
     * Only actions of users from this country are included in the metric calculation. Specify geolocation ID here.
     */
    country?: string;
    /**
     * Only actions coming from this app version are included in the metric calculation.
     */
    device?: string;
    /**
     * The request error status of the actions to be included in the metric calculation: `true` or `false`
     */
    hasHttpError?: boolean;
    /**
     * The error status of the actions to be included in the metric calculation: `true` or `false`
     */
    hasReportedError?: boolean;
    /**
     * Only actions coming from this internet service provider are included in the metric calculation.
     */
    isp?: string;
    /**
     * Only actions coming from devices of this manufacturer are included in the metric calculation.
     */
    manufacturer?: string;
    /**
     * Filter by network technology
     */
    networkTechnology?: string;
    /**
     * Only actions coming from devices with this display orientation are included in the metric calculation. Possible values: [ LANDSCAPE, PORTRAIT, UNKNOWN ]
     */
    orientation?: string;
    /**
     * Only actions coming from this OS family are included in the metric calculation.
     */
    osFamily?: string;
    /**
     * Only actions coming from this OS version are included in the metric calculation.
     */
    osVersion?: string;
    /**
     * Only actions of users from this region are included in the metric calculation. Specify geolocation ID here.
     */
    region?: string;
    /**
     * Only actions coming from devices with this display resolution are included in the metric calculation. Possible values: [ CGA, DCI2K, DCI4K, DVGA, FHD, FWVGA, FWXGA, GHDPlus, HD, HQVGA, HQVGA2, HSXGA, HUXGA, HVGA, HXGA, NTSC, PAL, QHD, QQVGA, QSXGA, QUXGA, QVGA, QWXGA, QXGA, SVGA, SXGA, SXGAMinus, SXGAPlus, UGA, UHD16K, UHD4K, UHD8K, UHDPlus, UNKNOWN, UWQHD, UXGA, VGA, WHSXGA, WHUXGA, WHXGA, WQSXGA, WQUXGA, WQVGA, WQVGA2, WQVGA3, WQXGA, WQXGA2, WSVGA, WSVGA2, WSXGA, WSXGAPlus, WUXGA, WVGA, WVGA2, WXGA, WXGA2, WXGA3, WXGAPlus, XGA, XGAPLUS, _1280x854, nHD, qHD ]
     */
    resolution?: string;
    /**
     * Only actions with this name are included in the metric calculation.
     */
    userActionName?: string;
}

export interface CalculatedServiceMetricCondition {
    /**
     * A conditions for the metric usage
     */
    conditions?: outputs.CalculatedServiceMetricConditionCondition[];
}

export interface CalculatedServiceMetricConditionCondition {
    /**
     * The attribute to be matched.  Note that for a service property attribute you must use the comparison of the `FAST_STRING` type. Possible values are `ACTOR_SYSTEM`, `AKKA_ACTOR_CLASS_NAME`, `AKKA_ACTOR_MESSAGE_TYPE`, `AKKA_ACTOR_PATH`, `APPLICATION_BUILD_VERSION`, `APPLICATION_RELEASE_VERSION`, `AZURE_FUNCTIONS_FUNCTION_NAME`, `AZURE_FUNCTIONS_SITE_NAME`, `CICS_PROGRAM_NAME`, `CICS_SYSTEM_ID`, `CICS_TASK_ID`, `CICS_TRANSACTION_ID`, `CICS_USER_ID`, `CPU_TIME`, `CTG_GATEWAY_URL`, `CTG_PROGRAM`, `CTG_SERVER_NAME`, `CTG_TRANSACTION_ID`, `CUSTOMSERVICE_CLASS`, `CUSTOMSERVICE_METHOD`, `DATABASE_CHILD_CALL_COUNT`, `DATABASE_CHILD_CALL_TIME`, `DATABASE_HOST`, `DATABASE_NAME`, `DATABASE_TYPE`, `DATABASE_URL`, `DISK_IO_TIME`, `ERROR_COUNT`, `ESB_APPLICATION_NAME`, `ESB_INPUT_TYPE`, `ESB_LIBRARY_NAME`, `ESB_MESSAGE_FLOW_NAME`, `EXCEPTION_CLASS`, `EXCEPTION_MESSAGE`, `FAILED_STATE`, `FAILURE_REASON`, `FLAW_STATE`, `HTTP_REQUEST_METHOD`, `HTTP_STATUS`, `HTTP_STATUS_CLASS`, `IMS_PROGRAM_NAME`, `IMS_TRANSACTION_ID`, `IMS_USER_ID`, `IO_TIME`, `IS_KEY_REQUEST`, `LAMBDA_COLDSTART`, `LOCK_TIME`, `MESSAGING_DESTINATION_TYPE`, `MESSAGING_IS_TEMPORARY_QUEUE`, `MESSAGING_QUEUE_NAME`, `MESSAGING_QUEUE_VENDOR`, `NETWORK_IO_TIME`, `NON_DATABASE_CHILD_CALL_COUNT`, `NON_DATABASE_CHILD_CALL_TIME`, `PROCESS_GROUP_NAME`, `PROCESS_GROUP_TAG`, `REMOTE_ENDPOINT`, `REMOTE_METHOD`, `REMOTE_SERVICE_NAME`, `REQUEST_NAME`, `REQUEST_TYPE`, `RESPONSE_TIME`, `RESPONSE_TIME_CLIENT`, `RMI_CLASS`, `RMI_METHOD`, `SERVICE_DISPLAY_NAME`, `SERVICE_NAME`, `SERVICE_PORT`, `SERVICE_PUBLIC_DOMAIN_NAME`, `SERVICE_REQUEST_ATTRIBUTE`, `SERVICE_TAG`, `SERVICE_TYPE`, `SERVICE_WEB_APPLICATION_ID`, `SERVICE_WEB_CONTEXT_ROOT`, `SERVICE_WEB_SERVER_NAME`, `SERVICE_WEB_SERVICE_NAME`, `SERVICE_WEB_SERVICE_NAMESPACE`, `SUSPENSION_TIME`, `TOTAL_PROCESSING_TIME`, `WAIT_TIME`, `WEBREQUEST_QUERY`, `WEBREQUEST_RELATIVE_URL`, `WEBREQUEST_URL`, `WEBREQUEST_URL_HOST`, `WEBREQUEST_URL_PATH`, `WEBREQUEST_URL_PORT`, `WEBSERVICE_ENDPOINT`, `WEBSERVICE_METHOD` and `ZOS_CALL_TYPE`
     */
    attribute: string;
    /**
     * Type-specific comparison for attributes
     */
    comparison: outputs.CalculatedServiceMetricConditionConditionComparison;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface CalculatedServiceMetricConditionConditionComparison {
    /**
     * Boolean Comparison for `BOOLEAN` attributes
     */
    boolean?: outputs.CalculatedServiceMetricConditionConditionComparisonBoolean;
    /**
     * Type-specific comparison information for attributes of type 'ESB_INPUT_NODE_TYPE'
     */
    esbInputNodeType?: outputs.CalculatedServiceMetricConditionConditionComparisonEsbInputNodeType;
    /**
     * Comparison for `FAILED_STATE` attributes
     */
    failedState?: outputs.CalculatedServiceMetricConditionConditionComparisonFailedState;
    /**
     * Comparison for `FAILURE_REASON` attributes
     */
    failureReason?: outputs.CalculatedServiceMetricConditionConditionComparisonFailureReason;
    /**
     * Comparison for `FAST_STRING` attributes. Use it for all service property attributes
     */
    fastString?: outputs.CalculatedServiceMetricConditionConditionComparisonFastString;
    /**
     * Comparison for `FLAW_STATE` attributes
     */
    flawState?: outputs.CalculatedServiceMetricConditionConditionComparisonFlawState;
    /**
     * Comparison for `NUMBER` attributes
     */
    generic?: outputs.CalculatedServiceMetricConditionConditionComparisonGeneric;
    /**
     * Comparison for `HTTP_METHOD` attributes
     */
    httpMethod?: outputs.CalculatedServiceMetricConditionConditionComparisonHttpMethod;
    /**
     * Comparison for `HTTP_STATUS_CLASS` attributes
     */
    httpStatusClass?: outputs.CalculatedServiceMetricConditionConditionComparisonHttpStatusClass;
    /**
     * Comparison for `IIB_INPUT_NODE_TYPE` attributes
     */
    iibInputNodeType?: outputs.CalculatedServiceMetricConditionConditionComparisonIibInputNodeType;
    /**
     * Reverse the comparison **operator**. For example, it turns **equals** into **does not equal**
     */
    negate?: boolean;
    /**
     * Comparison for `NUMBER` attributes
     */
    number?: outputs.CalculatedServiceMetricConditionConditionComparisonNumber;
    /**
     * Comparison for `NUMBER_REQUEST_ATTRIBUTE` attributes
     */
    numberRequestAttribute?: outputs.CalculatedServiceMetricConditionConditionComparisonNumberRequestAttribute;
    /**
     * Comparison for `SERVICE_TYPE` attributes
     */
    serviceType?: outputs.CalculatedServiceMetricConditionConditionComparisonServiceType;
    /**
     * Comparison for `STRING` attributes
     */
    string?: outputs.CalculatedServiceMetricConditionConditionComparisonString;
    /**
     * Comparison for `STRING_REQUEST_ATTRIBUTE` attributes
     */
    stringRequestAttribute?: outputs.CalculatedServiceMetricConditionConditionComparisonStringRequestAttribute;
    /**
     * Comparison for `TAG` attributes
     */
    tag?: outputs.CalculatedServiceMetricConditionConditionComparisonTag;
    /**
     * Comparison for `ZOS_CALL_TYPE` attributes
     */
    zosCallType?: outputs.CalculatedServiceMetricConditionConditionComparisonZosCallType;
}

export interface CalculatedServiceMetricConditionConditionComparisonBoolean {
    /**
     * Operator of the comparison. You can reverse it by setting `negate` to `true`. Possible values are `EQUALS`, `EQUALS_ANY_OF` and `EXISTS`
     */
    operator?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value: boolean;
    /**
     * The values to compare to
     */
    values?: boolean[];
}

export interface CalculatedServiceMetricConditionConditionComparisonEsbInputNodeType {
    /**
     * Operator of the comparison. You can reverse it by setting `negate` to `true`. Possible values are `EQUALS`, `EQUALS_ANY_OF` and `EXISTS`
     */
    operator?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are `CALLABLE_FLOW_ASYNC_RESPONSE_NODE`, `CALLABLE_FLOW_INPUT_NODE`, `DATABASE_INPUT_NODE`, `DOTNET_INPUT_NODE`, `EMAIL_INPUT_NODE`, `EVENT_INPUT`, `EVENT_INPUT_NODE`, `FILE_INPUT_NODE`, `FTE_INPUT_NODE`, `HTTP_ASYNC_RESPONSE`, `JD_EDWARDS_INPUT_NODE`, `JMS_CLIENT_INPUT_NODE`, `LABEL_NODE`, `MQ_INPUT_NODE`, `PEOPLE_SOFT_INPUT_NODE`, `REST_ASYNC_RESPONSE`, `REST_REQUEST`, `SAP_INPUT_NODE`, `SCA_ASYNC_RESPONSE_NODE`, `SCA_INPUT_NODE`, `SIEBEL_INPUT_NODE`, `SOAP_INPUT_NODE`, `TCPIP_CLIENT_INPUT_NODE`, `TCPIP_CLIENT_REQUEST_NODE`, `TCPIP_SERVER_INPUT_NODE`, `TCPIP_SERVER_REQUEST_NODE`, `TIMEOUT_NOTIFICATION_NODE` and `WS_INPUT_NODE`
     */
    value?: string;
    /**
     * The values to compare to. Possible values are `CALLABLE_FLOW_ASYNC_RESPONSE_NODE`, `CALLABLE_FLOW_INPUT_NODE`, `DATABASE_INPUT_NODE`, `DOTNET_INPUT_NODE`, `EMAIL_INPUT_NODE`, `EVENT_INPUT`, `EVENT_INPUT_NODE`, `FILE_INPUT_NODE`, `FTE_INPUT_NODE`, `HTTP_ASYNC_RESPONSE`, `JD_EDWARDS_INPUT_NODE`, `JMS_CLIENT_INPUT_NODE`, `LABEL_NODE`, `MQ_INPUT_NODE`, `PEOPLE_SOFT_INPUT_NODE`, `REST_ASYNC_RESPONSE`, `REST_REQUEST`, `SAP_INPUT_NODE`, `SCA_ASYNC_RESPONSE_NODE`, `SCA_INPUT_NODE`, `SIEBEL_INPUT_NODE`, `SOAP_INPUT_NODE`, `TCPIP_CLIENT_INPUT_NODE`, `TCPIP_CLIENT_REQUEST_NODE`, `TCPIP_SERVER_INPUT_NODE`, `TCPIP_SERVER_REQUEST_NODE`, `TIMEOUT_NOTIFICATION_NODE` and `WS_INPUT_NODE`
     */
    values?: string[];
}

export interface CalculatedServiceMetricConditionConditionComparisonFailedState {
    /**
     * Operator of the comparison. You can reverse it by setting `negate` to `true`. Possible values are `EQUALS`, `EQUALS_ANY_OF` and `EXISTS`
     */
    operator?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are `FAILED` and `FAILED`
     */
    value?: string;
    /**
     * The values to compare to. Possible values are `FAILED` and `FAILED`
     */
    values?: string[];
}

export interface CalculatedServiceMetricConditionConditionComparisonFailureReason {
    /**
     * Operator of the comparison. You can reverse it by setting `negate` to `true`. Possible values are `EQUALS`, `EQUALS_ANY_OF` and `EXISTS`
     */
    operator?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are `EXCEPTION_AT_ENTRY_NODE`, `EXCEPTION_ON_ANY_NODE`, `HTTP_CODE` and `REQUEST_ATTRIBUTE`
     */
    value?: string;
    /**
     * The values to compare to. Possible values are `EXCEPTION_AT_ENTRY_NODE`, `EXCEPTION_ON_ANY_NODE`, `HTTP_CODE` and `REQUEST_ATTRIBUTE`
     */
    values?: string[];
}

export interface CalculatedServiceMetricConditionConditionComparisonFastString {
    /**
     * The comparison is case-sensitive (`true`) or not case-sensitive (`false`)
     */
    caseSensitive?: boolean;
    /**
     * Operator of the comparison. You can reverse it by setting `negate` to `true`. Possible values are `EQUALS`, `EQUALS_ANY_OF` and `CONTAINS`
     */
    operator?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
    /**
     * The values to compare to
     */
    values?: string[];
}

export interface CalculatedServiceMetricConditionConditionComparisonFlawState {
    /**
     * Operator of the comparison. You can reverse it by setting `negate` to `true`. Possible values are `EQUALS`, `EQUALS_ANY_OF` and `EXISTS`
     */
    operator?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are `FLAWED` and `NOT_FLAWED`
     */
    value?: string;
    /**
     * The values to compare to. Possible values are `FLAWED` and `NOT_FLAWED`
     */
    values?: string[];
}

export interface CalculatedServiceMetricConditionConditionComparisonGeneric {
    /**
     * Defines the actual set of fields depending on the value
     */
    type: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface CalculatedServiceMetricConditionConditionComparisonHttpMethod {
    /**
     * Operator of the comparison. You can reverse it by setting `negate` to `true`. Possible values are `EQUALS`, `EQUALS_ANY_OF` and `EXISTS`
     */
    operator?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are `CONNECT`, `DELETE`, `GET`, `HEAD`, `OPTIONS`, `PATCH`, `POST`, `PUT` and `TRACE`
     */
    value?: string;
    /**
     * The values to compare to. Possible values are `CONNECT`, `DELETE`, `GET`, `HEAD`, `OPTIONS`, `PATCH`, `POST`, `PUT` and `TRACE`
     */
    values?: string[];
}

export interface CalculatedServiceMetricConditionConditionComparisonHttpStatusClass {
    /**
     * Operator of the comparison. You can reverse it by setting `negate` to `true`. Possible values are `EQUALS`, `EQUALS_ANY_OF` and `EXISTS`
     */
    operator?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are `C_1XX`, `C_2XX`, `C_3XX`, `C_4XX`, `C_5XX` and `NO_RESPONSE`
     */
    value?: string;
    /**
     * The values to compare to. Possible values are `C_1XX`, `C_2XX`, `C_3XX`, `C_4XX`, `C_5XX` and `NO_RESPONSE`
     */
    values?: string[];
}

export interface CalculatedServiceMetricConditionConditionComparisonIibInputNodeType {
    /**
     * Operator of the comparison. You can reverse it by setting `negate` to `true`. Possible values are `EQUALS`, `EQUALS_ANY_OF` and `EXISTS`
     */
    operator?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are `CALLABLE_FLOW_ASYNC_RESPONSE_NODE`, `CALLABLE_FLOW_INPUT_NODE`, `DATABASE_INPUT_NODE`, `DOTNET_INPUT_NODE`, `EMAIL_INPUT_NODE`, `EVENT_INPUT`, `EVENT_INPUT_NODE`, `FILE_INPUT_NODE`, `FTE_INPUT_NODE`, `HTTP_ASYNC_RESPONSE`, `JD_EDWARDS_INPUT_NODE`, `JMS_CLIENT_INPUT_NODE`, `LABEL_NODE`, `MQ_INPUT_NODE`, `PEOPLE_SOFT_INPUT_NODE`, `REST_ASYNC_RESPONSE`, `REST_REQUEST`, `SAP_INPUT_NODE`, `SCA_ASYNC_RESPONSE_NODE`, `SCA_INPUT_NODE`, `SIEBEL_INPUT_NODE`, `SOAP_INPUT_NODE`, `TCPIP_CLIENT_INPUT_NODE`, `TCPIP_CLIENT_REQUEST_NODE`, `TCPIP_SERVER_INPUT_NODE`, `TCPIP_SERVER_REQUEST_NODE`, `TIMEOUT_NOTIFICATION_NODE` and `WS_INPUT_NODE`
     */
    value?: string;
    /**
     * The values to compare to. Possible values are `CALLABLE_FLOW_ASYNC_RESPONSE_NODE`, `CALLABLE_FLOW_INPUT_NODE`, `DATABASE_INPUT_NODE`, `DOTNET_INPUT_NODE`, `EMAIL_INPUT_NODE`, `EVENT_INPUT`, `EVENT_INPUT_NODE`, `FILE_INPUT_NODE`, `FTE_INPUT_NODE`, `HTTP_ASYNC_RESPONSE`, `JD_EDWARDS_INPUT_NODE`, `JMS_CLIENT_INPUT_NODE`, `LABEL_NODE`, `MQ_INPUT_NODE`, `PEOPLE_SOFT_INPUT_NODE`, `REST_ASYNC_RESPONSE`, `REST_REQUEST`, `SAP_INPUT_NODE`, `SCA_ASYNC_RESPONSE_NODE`, `SCA_INPUT_NODE`, `SIEBEL_INPUT_NODE`, `SOAP_INPUT_NODE`, `TCPIP_CLIENT_INPUT_NODE`, `TCPIP_CLIENT_REQUEST_NODE`, `TCPIP_SERVER_INPUT_NODE`, `TCPIP_SERVER_REQUEST_NODE`, `TIMEOUT_NOTIFICATION_NODE` and `WS_INPUT_NODE`
     */
    values?: string[];
}

export interface CalculatedServiceMetricConditionConditionComparisonNumber {
    /**
     * Operator of the comparison. You can reverse it by setting `negate` to `true`. Possible values are `EQUALS`, `EQUALS_ANY_OF`, `EXISTS`, `GREATER_THAN`, `GREATER_THAN_OR_EQUAL`, `LOWER_THAN` and `LOWER_THAN_OR_EQUAL`
     */
    operator?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: number;
    /**
     * The values to compare to
     */
    values?: number[];
}

export interface CalculatedServiceMetricConditionConditionComparisonNumberRequestAttribute {
    /**
     * If `true`, the request attribute is matched on child service calls. Default is `false`
     */
    matchOnChildCalls?: boolean;
    /**
     * Operator of the comparison. You can reverse it by setting `negate` to `true`. Possible values are `EQUALS`, `EQUALS_ANY_OF`, `EXISTS`, `GREATER_THAN`, `GREATER_THAN_OR_EQUAL`, `LOWER_THAN` and `LOWER_THAN_OR_EQUAL`
     */
    operator?: string;
    /**
     * No documentation available for this attribute
     */
    requestAttribute: string;
    /**
     * Defines valid sources of request attributes for conditions or placeholders
     */
    source?: outputs.CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSource;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: number;
    /**
     * The values to compare to
     */
    values?: number[];
}

export interface CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSource {
    /**
     * Use only request attributes from services that belong to this management zone.. Use either this or `serviceTag`
     */
    managementZone?: string;
    /**
     * Use only request attributes from services that have this tag. Use either this or `managementZone`
     */
    serviceTag?: outputs.CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSourceServiceTag;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSourceServiceTag {
    /**
     * The origin of the tag, such as AWS or Cloud Foundry. For custom tags use the `CONTEXTLESS` value. The context is set for tags that are automatically imported by OneAgent (for example, from the AWS console or environment variables). It’s useful for determining the origin of tags when not manually defined, and it also helps to prevent clashes with other existing tags. If the tag is not automatically imported, `CONTEXTLESS` set. Possible values are `AWS`, `AWS_GENERIC`, `AZURE`, `CLOUD_FOUNDRY`, `CONTEXTLESS`, `ENVIRONMENT`, `GOOGLE_COMPUTE_ENGINE` and `KUBERNETES`
     */
    context?: string;
    /**
     * The key of the tag. For custom tags, put the tag value here. The key allows categorization of multiple tags. It is possible that there are multiple values for a single key which will all be represented as standalone tags. Therefore, the key does not have the semantic of a map key but is more like a key of a key-value tuple. In some cases, for example custom tags, the key represents the actual tag value and the value field is not set – those are called valueless tags
     */
    key: string;
    /**
     * has no documentation
     */
    tagKey?: outputs.CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSourceServiceTagTagKey;
    /**
     * The value of the tag. Not applicable to custom tags. If a tag does have a separate key and value (in the textual representation they are split by the colon ‘:’), this field is set with the actual value. Key-value pairs can occur for automatically imported tags and tags set by rules if extractors are used
     */
    value?: string;
}

export interface CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSourceServiceTagTagKey {
    /**
     * has no documentation
     */
    context?: string;
    /**
     * has no documentation
     */
    key?: string;
}

export interface CalculatedServiceMetricConditionConditionComparisonServiceType {
    /**
     * Operator of the comparison. You can reverse it by setting `negate` to `true`. Possible values are `EQUALS`, `EQUALS_ANY_OF` and `EXISTS`
     */
    operator?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are `BACKGROUND_ACTIVITY`, `CICS_SERVICE`, `CUSTOM_SERVICE`, `DATABASE_SERVICE`, `ENTERPRISE_SERVICE_BUS_SERVICE`, `EXTERNAL`, `IBM_INTEGRATION_BUS_SERVICE`, `IMS_SERVICE`, `MESSAGING_SERVICE`, `RMI_SERVICE`, `RPC_SERVICE`, `WEB_REQUEST_SERVICE` and `WEB_SERVICE`
     */
    value?: string;
    /**
     * The values to compare to. Possible values are `BACKGROUND_ACTIVITY`, `CICS_SERVICE`, `CUSTOM_SERVICE`, `DATABASE_SERVICE`, `ENTERPRISE_SERVICE_BUS_SERVICE`, `EXTERNAL`, `IBM_INTEGRATION_BUS_SERVICE`, `IMS_SERVICE`, `MESSAGING_SERVICE`, `RMI_SERVICE`, `RPC_SERVICE`, `WEB_REQUEST_SERVICE` and `WEB_SERVICE`
     */
    values?: string[];
}

export interface CalculatedServiceMetricConditionConditionComparisonString {
    /**
     * The comparison is case-sensitive (`true`) or not case-sensitive (`false`)
     */
    caseSensitive?: boolean;
    /**
     * Operator of the comparison. You can reverse it by setting `negate` to `true`. Possible values are `BEGINS_WITH`, `BEGINS_WITH_ANY_OF`, `CONTAINS`, `ENDS_WITH`, `ENDS_WITH_ANY_OF`, `EQUALS`, `EQUALS_ANY_OF`, `EXISTS` and `REGEX_MATCHES`
     */
    operator?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
    /**
     * The values to compare to
     */
    values?: string[];
}

export interface CalculatedServiceMetricConditionConditionComparisonStringRequestAttribute {
    /**
     * The comparison is case-sensitive (`true`) or not case-sensitive (`false`)
     */
    caseSensitive?: boolean;
    /**
     * If `true`, the request attribute is matched on child service calls. Default is `false`
     */
    matchOnChildCalls?: boolean;
    /**
     * Operator of the comparison. You can reverse it by setting `negate` to `true`. Possible values are `BEGINS_WITH`, `BEGINS_WITH_ANY_OF`, `CONTAINS`, `ENDS_WITH`, `ENDS_WITH_ANY_OF`, `EQUALS`, `EQUALS_ANY_OF`, `EXISTS` and `REGEX_MATCHES`
     */
    operator?: string;
    /**
     * No documentation available for this attribute
     */
    requestAttribute: string;
    /**
     * Defines valid sources of request attributes for conditions or placeholders
     */
    source?: outputs.CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSource;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
    /**
     * The values to compare to
     */
    values?: string[];
}

export interface CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSource {
    /**
     * Use only request attributes from services that belong to this management zone.. Use either this or `serviceTag`
     */
    managementZone?: string;
    /**
     * Use only request attributes from services that have this tag. Use either this or `managementZone`
     */
    serviceTag?: outputs.CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSourceServiceTag;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSourceServiceTag {
    /**
     * The origin of the tag, such as AWS or Cloud Foundry. For custom tags use the `CONTEXTLESS` value. The context is set for tags that are automatically imported by OneAgent (for example, from the AWS console or environment variables). It’s useful for determining the origin of tags when not manually defined, and it also helps to prevent clashes with other existing tags. If the tag is not automatically imported, `CONTEXTLESS` set. Possible values are `AWS`, `AWS_GENERIC`, `AZURE`, `CLOUD_FOUNDRY`, `CONTEXTLESS`, `ENVIRONMENT`, `GOOGLE_COMPUTE_ENGINE` and `KUBERNETES`
     */
    context?: string;
    /**
     * The key of the tag. For custom tags, put the tag value here. The key allows categorization of multiple tags. It is possible that there are multiple values for a single key which will all be represented as standalone tags. Therefore, the key does not have the semantic of a map key but is more like a key of a key-value tuple. In some cases, for example custom tags, the key represents the actual tag value and the value field is not set – those are called valueless tags
     */
    key: string;
    /**
     * has no documentation
     */
    tagKey?: outputs.CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSourceServiceTagTagKey;
    /**
     * The value of the tag. Not applicable to custom tags. If a tag does have a separate key and value (in the textual representation they are split by the colon ‘:’), this field is set with the actual value. Key-value pairs can occur for automatically imported tags and tags set by rules if extractors are used
     */
    value?: string;
}

export interface CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSourceServiceTagTagKey {
    /**
     * has no documentation
     */
    context?: string;
    /**
     * has no documentation
     */
    key?: string;
}

export interface CalculatedServiceMetricConditionConditionComparisonTag {
    /**
     * Operator of the comparison. You can reverse it by setting `negate` to `true`. Possible values are `EQUALS`, `EQUALS_ANY_OF`, `TAG_KEY_EQUALS` and `TAG_KEY_EQUALS_ANY_OF`
     */
    operator?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The values to compare to
     */
    value?: outputs.CalculatedServiceMetricConditionConditionComparisonTagValue;
    /**
     * The values to compare to
     */
    values?: outputs.CalculatedServiceMetricConditionConditionComparisonTagValues;
}

export interface CalculatedServiceMetricConditionConditionComparisonTagValue {
    /**
     * The origin of the tag, such as AWS or Cloud Foundry. Custom tags use the `CONTEXTLESS` value. Possible values are `AWS`, `AWS_GENERIC`, `AZURE`, `CLOUD_FOUNDRY`, `CONTEXTLESS`, `ENVIRONMENT`, `GOOGLE_CLOUD` and `KUBERNETES`
     */
    context: string;
    /**
     * The key of the tag. Custom tags have the tag value here
     */
    key: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value of the tag. Not applicable to custom tags
     */
    value?: string;
}

export interface CalculatedServiceMetricConditionConditionComparisonTagValues {
    /**
     * The values to compare to
     */
    values?: outputs.CalculatedServiceMetricConditionConditionComparisonTagValuesValue[];
}

export interface CalculatedServiceMetricConditionConditionComparisonTagValuesValue {
    /**
     * The origin of the tag, such as AWS or Cloud Foundry. Custom tags use the `CONTEXTLESS` value. Possible values are `AWS`, `AWS_GENERIC`, `AZURE`, `CLOUD_FOUNDRY`, `CONTEXTLESS`, `ENVIRONMENT`, `GOOGLE_CLOUD` and `KUBERNETES`
     */
    context: string;
    /**
     * The key of the tag. Custom tags have the tag value here
     */
    key: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value of the tag. Not applicable to custom tags
     */
    value?: string;
}

export interface CalculatedServiceMetricConditionConditionComparisonZosCallType {
    /**
     * Operator of the comparison. You can reverse it by setting `negate` to `true`. Possible values are `EQUALS`, `EQUALS_ANY_OF` and `EXISTS`
     */
    operator?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are `CTG`, `DPL`, `EXPLICIT_ADK`, `IMS_CONNECT`, `IMS_CONNECT_API`, `IMS_ITRA`, `IMS_MSC`, `IMS_PGM_SWITCH`, `IMS_SHARED_QUEUES`, `IMS_TRANS_EXEC`, `MQ`, `SOAP`, `START`, `TX` and `UNKNOWN`
     */
    value?: string;
    /**
     * The values to compare to. Possible values are `CTG`, `DPL`, `EXPLICIT_ADK`, `IMS_CONNECT`, `IMS_CONNECT_API`, `IMS_ITRA`, `IMS_MSC`, `IMS_PGM_SWITCH`, `IMS_SHARED_QUEUES`, `IMS_TRANS_EXEC`, `MQ`, `SOAP`, `START`, `TX` and `UNKNOWN`
     */
    values?: string[];
}

export interface CalculatedServiceMetricDimensionDefinition {
    /**
     * The dimension value pattern. You can define custom placeholders in the `placeholders` field and use them here
     */
    dimension: string;
    /**
     * The name of the dimension
     */
    name: string;
    /**
     * The list of custom placeholders to be used in a dimension value pattern
     */
    placeholders?: outputs.CalculatedServiceMetricDimensionDefinitionPlaceholders;
    /**
     * The number of top values to be calculated
     */
    topX: number;
    /**
     * The aggregation of the dimension. Possible values are `AVERAGE`, `COUNT`, `MAX`, `MIN`, `OF_INTEREST_RATIO`, `OTHER_RATIO`, `SINGLE_VALUE` and `SUM`
     */
    topXAggregation: string;
    /**
     * How to calculate the **topX** values. Possible values are `ASCENDING` and `DESCENDING`
     */
    topXDirection: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface CalculatedServiceMetricDimensionDefinitionPlaceholders {
    /**
     * A custom placeholder to be used in a dimension value pattern
     */
    placeholders?: outputs.CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholder[];
}

export interface CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholder {
    /**
     * Which value of the request attribute must be used when it occurs across multiple child requests. Only applicable for the `SERVICE_REQUEST_ATTRIBUTE` attribute, when **useFromChildCalls** is `true`. For the `COUNT` aggregation, the **kind** field is not applicable. Possible values are `COUNT`, `FIRST` and `LAST`.
     */
    aggregation?: string;
    /**
     * The attribute to extract from. You can only use attributes of the **string** type. Possible values are `ACTOR_SYSTEM`, `AKKA_ACTOR_CLASS_NAME`, `AKKA_ACTOR_MESSAGE_TYPE`, `AKKA_ACTOR_PATH`, `APPLICATION_BUILD_VERSION`, `APPLICATION_RELEASE_VERSION`, `AZURE_FUNCTIONS_FUNCTION_NAME`, `AZURE_FUNCTIONS_SITE_NAME`, `CICS_PROGRAM_NAME`, `CICS_SYSTEM_ID`, `CICS_TASK_ID`, `CICS_TRANSACTION_ID`, `CICS_USER_ID`, `CPU_TIME`, `CTG_GATEWAY_URL`, `CTG_PROGRAM`, `CTG_SERVER_NAME`, `CTG_TRANSACTION_ID`, `CUSTOMSERVICE_CLASS`, `CUSTOMSERVICE_METHOD`, `DATABASE_CHILD_CALL_COUNT`, `DATABASE_CHILD_CALL_TIME`, `DATABASE_HOST`, `DATABASE_NAME`, `DATABASE_TYPE`, `DATABASE_URL`, `DISK_IO_TIME`, `ERROR_COUNT`, `ESB_APPLICATION_NAME`, `ESB_INPUT_TYPE`, `ESB_LIBRARY_NAME`, `ESB_MESSAGE_FLOW_NAME`, `EXCEPTION_CLASS`, `EXCEPTION_MESSAGE`, `FAILED_STATE`, `FAILURE_REASON`, `FLAW_STATE`, `HTTP_REQUEST_METHOD`, `HTTP_STATUS`, `HTTP_STATUS_CLASS`, `IMS_PROGRAM_NAME`, `IMS_TRANSACTION_ID`, `IMS_USER_ID`, `IO_TIME`, `IS_KEY_REQUEST`, `LAMBDA_COLDSTART`, `LOCK_TIME`, `MESSAGING_DESTINATION_TYPE`, `MESSAGING_IS_TEMPORARY_QUEUE`, `MESSAGING_QUEUE_NAME`, `MESSAGING_QUEUE_VENDOR`, `NETWORK_IO_TIME`, `NON_DATABASE_CHILD_CALL_COUNT`, `NON_DATABASE_CHILD_CALL_TIME`, `PROCESS_GROUP_NAME`, `PROCESS_GROUP_TAG`, `REMOTE_ENDPOINT`, `REMOTE_METHOD`, `REMOTE_SERVICE_NAME`, `REQUEST_NAME`, `REQUEST_TYPE`, `RESPONSE_TIME`, `RESPONSE_TIME_CLIENT`, `RMI_CLASS`, `RMI_METHOD`, `SERVICE_DISPLAY_NAME`, `SERVICE_NAME`, `SERVICE_PORT`, `SERVICE_PUBLIC_DOMAIN_NAME`, `SERVICE_REQUEST_ATTRIBUTE`, `SERVICE_TAG`, `SERVICE_TYPE`, `SERVICE_WEB_APPLICATION_ID`, `SERVICE_WEB_CONTEXT_ROOT`, `SERVICE_WEB_SERVER_NAME`, `SERVICE_WEB_SERVICE_NAME`, `SERVICE_WEB_SERVICE_NAMESPACE`, `SUSPENSION_TIME`, `TOTAL_PROCESSING_TIME`, `WAIT_TIME`, `WEBREQUEST_QUERY`, `WEBREQUEST_RELATIVE_URL`, `WEBREQUEST_URL`, `WEBREQUEST_URL_HOST`, `WEBREQUEST_URL_PATH`, `WEBREQUEST_URL_PORT`, `WEBSERVICE_ENDPOINT`, `WEBSERVICE_METHOD` and `ZOS_CALL_TYPE`
     */
    attribute: string;
    /**
     * Depending on the `kind` value:
     *
     *
     * * `REGEX_EXTRACTION`: The regular expression.
     *
     *
     * * `BETWEEN_DELIMITER`: The opening delimiter string to look for.
     *
     *
     * * All other values: The delimiter string to look for
     */
    delimiterOrRegex?: string;
    /**
     * The closing delimiter string to look for. Required if the `kind` value is `BETWEEN_DELIMITER`. Not applicable otherwise
     */
    endDelimiter?: string;
    /**
     * The type of extraction. Defines either usage of regular expression (`regex`) or the position of request attribute value to be extracted. When the `attribute` is `SERVICE_REQUEST_ATTRIBUTE` attribute and `aggregation` is `COUNT`, needs to be set to `ORIGINAL_TEXT`. Possible values are 	`AFTER_DELIMITER`, `BEFORE_DELIMITER`, `BETWEEN_DELIMITER`, `ORIGINAL_TEXT` and `REGEX_EXTRACTION`
     */
    kind: string;
    /**
     * The name of the placeholder. Use it in the naming pattern as `{name}`
     */
    name: string;
    /**
     * The format of the extracted string. Possible values are `ORIGINAL`, `TO_LOWER_CASE` and `TO_UPPER_CASE`
     */
    normalization?: string;
    /**
     * The One Agent attribute to extract from. Required if the kind value is `ONE_AGENT_ATTRIBUTE`. Not applicable otherwise.
     */
    oneagentAttributeKey?: string;
    /**
     * The request attribute to extract from. Required if the `kind` value is `SERVICE_REQUEST_ATTRIBUTE`. Not applicable otherwise
     */
    requestAttribute?: string;
    /**
     * Defines valid sources of request attributes for conditions or placeholders
     */
    source?: outputs.CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSource;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * If `true` request attribute will be taken from a child service call. Only applicable for the `SERVICE_REQUEST_ATTRIBUTE` attribute. Defaults to `false`
     */
    useFromChildCalls?: boolean;
}

export interface CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSource {
    /**
     * Use only request attributes from services that belong to this management zone.. Use either this or `serviceTag`
     */
    managementZone?: string;
    /**
     * Use only request attributes from services that have this tag. Use either this or `managementZone`
     */
    serviceTag?: outputs.CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSourceServiceTag;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSourceServiceTag {
    /**
     * The origin of the tag, such as AWS or Cloud Foundry. For custom tags use the `CONTEXTLESS` value. The context is set for tags that are automatically imported by OneAgent (for example, from the AWS console or environment variables). It’s useful for determining the origin of tags when not manually defined, and it also helps to prevent clashes with other existing tags. If the tag is not automatically imported, `CONTEXTLESS` set. Possible values are `AWS`, `AWS_GENERIC`, `AZURE`, `CLOUD_FOUNDRY`, `CONTEXTLESS`, `ENVIRONMENT`, `GOOGLE_COMPUTE_ENGINE` and `KUBERNETES`
     */
    context?: string;
    /**
     * The key of the tag. For custom tags, put the tag value here. The key allows categorization of multiple tags. It is possible that there are multiple values for a single key which will all be represented as standalone tags. Therefore, the key does not have the semantic of a map key but is more like a key of a key-value tuple. In some cases, for example custom tags, the key represents the actual tag value and the value field is not set – those are called valueless tags
     */
    key: string;
    /**
     * has no documentation
     */
    tagKey?: outputs.CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKey;
    /**
     * The value of the tag. Not applicable to custom tags. If a tag does have a separate key and value (in the textual representation they are split by the colon ‘:’), this field is set with the actual value. Key-value pairs can occur for automatically imported tags and tags set by rules if extractors are used
     */
    value?: string;
}

export interface CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKey {
    /**
     * has no documentation
     */
    context?: string;
    /**
     * has no documentation
     */
    key?: string;
}

export interface CalculatedServiceMetricMetricDefinition {
    /**
     * The metric to be captured. Possible values are `CPU_TIME`, `DATABASE_CHILD_CALL_COUNT`, `DATABASE_CHILD_CALL_TIME`, `DISK_IO_TIME`, `EXCEPTION_COUNT`, `FAILED_REQUEST_COUNT`, `FAILED_REQUEST_COUNT_CLIENT`, `FAILURE_RATE`, `FAILURE_RATE_CLIENT`, `HTTP_4XX_ERROR_COUNT`, `HTTP_4XX_ERROR_COUNT_CLIENT`, `HTTP_5XX_ERROR_COUNT`, `HTTP_5XX_ERROR_COUNT_CLIENT`, `IO_TIME`, `LOCK_TIME`, `NETWORK_IO_TIME`, `NON_DATABASE_CHILD_CALL_COUNT`, `NON_DATABASE_CHILD_CALL_TIME`, `PROCESSING_TIME`, `REQUEST_ATTRIBUTE`, `REQUEST_COUNT`, `RESPONSE_TIME`, `RESPONSE_TIME_CLIENT`, `SUCCESSFUL_REQUEST_COUNT`, `SUCCESSFUL_REQUEST_COUNT_CLIENT` and `WAIT_TIME`
     */
    metric: string;
    /**
     * The request attribute to be captured. Only applicable when the **metric** parameter is set to `REQUEST_ATTRIBUTE`
     */
    requestAttribute?: string;
}

export interface CalculatedSyntheticMetricDimension {
    /**
     * A dimensions for the metric usage
     */
    dimensions?: outputs.CalculatedSyntheticMetricDimensionDimension[];
}

export interface CalculatedSyntheticMetricDimensionDimension {
    /**
     * The dimension of the metric. Possible values are `Event`, `Location`, `ResourceOrigin`
     */
    dimension: string;
    /**
     * The number of top values to be calculated
     */
    topX?: number;
}

export interface CalculatedSyntheticMetricFilter {
    /**
     * Only user actions of the specified type are included in the metric calculation
     */
    actionType?: string;
    /**
     * Only executions finished with the specified error code are included in the metric calculation.
     */
    errorCode?: number;
    /**
     * Only the specified browser clickpath event is included in the metric calculation. Specify the Dynatrace entity ID of the event here.
     */
    event?: string;
    /**
     * The execution status of the monitors to be included in the metric calculation: `true` or `false`
     */
    hasError?: boolean;
    /**
     * Only executions from the specified location are included in the metric calculation. Specify the Dynatrace entity ID of the location here.
     */
    location?: string;
}

export interface CalculatedWebMetricDimension {
    /**
     * A dimensions for the metric usage
     */
    dimensions?: outputs.CalculatedWebMetricDimensionDimension[];
}

export interface CalculatedWebMetricDimensionDimension {
    /**
     * The dimension of the metric. Possible values are `ApdexType`, `Browser`, `ErrorContext`, `ErrorOrigin`, `ErrorType`, `GeoLocation`, `StringProperty`, `UserActionType`
     */
    dimension: string;
    /**
     * The key of the user action property. Only applicable for the StringProperty dimension.
     */
    propertyKey?: string;
    /**
     * The number of top values to be calculated
     */
    topX: number;
}

export interface CalculatedWebMetricMetricDefinition {
    /**
     * The metric to be captured. Possible values are `Apdex`, `ApplicationCache`, `Callback`, `CumulativeLayoutShift`, `DNSLookup`, `DOMComplete`, `DOMContentLoaded`, `DOMInteractive`, `DoubleProperty`, `ErrorCount`, `FirstContentfulPaint`, `FirstInputDelay`, `FirstInputStart`, `FirstPaint`, `HTMLDownloaded`, `LargestContentfulPaint`, `LoadEventEnd`, `LoadEventStart`, `LongProperty`, `LongTasksTime`, `NavigationStart`, `OnDOMContentLoaded`, `OnLoad`, `Processing`, `RedirectTime`, `Request`, `RequestStart`, `Response`, `SecureConnect`, `SpeedIndex`, `TCPConnect`, `TimeToFirstByte`, `UserActionDuration`, `VisuallyComplete`
     */
    metric: string;
    /**
     * The key of the user action property. Only applicable for DoubleProperty and LongProperty metrics.
     */
    propertyKey?: string;
}

export interface CalculatedWebMetricUserActionFilter {
    /**
     * Only actions with a duration more than or equal to this value (in milliseconds) are included in the metric calculation.
     */
    actionDurationFromMilliseconds?: number;
    /**
     * Only actions with a duration less than or equal to this value (in milliseconds) are included in the metric calculation.
     */
    actionDurationToMilliseconds?: number;
    /**
     * Only actions with the specified Apdex score are included in the metric calculation. Possible values: [ Frustrated, Satisfied, Tolerating, Unknown ]
     */
    apdex?: string;
    /**
     * Only user actions coming from the specified browser family are included in the metric calculation.
     */
    browserFamily?: string;
    /**
     * Only user actions coming from the specified browser type are included in the metric calculation.
     */
    browserType?: string;
    /**
     * Only user actions coming from the specified browser version are included in the metric calculation.
     */
    browserVersion?: string;
    /**
     * Only actions of users from this city are included in the metric calculation. Specify geolocation ID here.
     */
    city?: string;
    /**
     * Only actions of users from this continent are included in the metric calculation. Specify geolocation ID here.
     */
    continent?: string;
    /**
     * Only actions of users from this country are included in the metric calculation. Specify geolocation ID here.
     */
    country?: string;
    /**
     * The status of custom actions in the metric calculation: `true` or `false`
     */
    customAction?: boolean;
    /**
     * The custom error name of the actions to be included in the metric calculation.
     */
    customErrorName?: string;
    /**
     * The custom error type of the actions to be included in the metric calculation.
     */
    customErrorType?: string;
    /**
     * Only user actions coming from the specified domain are included in the metric calculation.
     */
    domain?: string;
    /**
     * The error status of the actions to be included in the metric calculation: `true` or `false`
     */
    hasAnyError?: boolean;
    /**
     * The custom error status of the actions to be included in the metric calculation: `true` or `false`
     */
    hasCustomErrors?: boolean;
    /**
     * The request error status of the actions to be included in the metric calculation: `true` or `false`
     */
    hasHttpErrors?: boolean;
    /**
     * The JavaScript error status of the actions to be included in the metric calculation: `true` or `false`
     */
    hasJavascriptErrors?: boolean;
    /**
     * The HTTP error status code of the actions to be included in the metric calculation.
     */
    httpErrorCode?: number;
    /**
     * Can be used in combination with httpErrorCode to define a range of error codes that will be included in the metric calculation.
     */
    httpErrorCodeTo?: number;
    /**
     * The request path that has been determined to be the origin of an HTTP error of the actions to be included in the metric calculation.
     */
    httpPath?: string;
    /**
     * Only actions coming from this IP address are included in the metric calculation.
     */
    ip?: string;
    /**
     * The IPv6 status of the actions to be included in the metric calculation: `true` or `false`
     */
    ipV6Traffic?: boolean;
    /**
     * The status of load actions in the metric calculation: `true` or `false`
     */
    loadAction?: boolean;
    /**
     * Only actions coming from this OS family are included in the metric calculation.
     */
    osFamily?: string;
    /**
     * Only actions coming from this OS version are included in the metric calculation.
     */
    osVersion?: string;
    /**
     * The status of actions coming from real users in the metric calculation: `true` or `false`
     */
    realUser?: boolean;
    /**
     * Only actions of users from this region are included in the metric calculation. Specify geolocation ID here.
     */
    region?: string;
    /**
     * The status of actions coming from robots in the metric calculation: `true` or `false`
     */
    robot?: boolean;
    /**
     * The status of actions coming from synthetic monitors in the metric calculation: `true` or `false`
     */
    synthetic?: boolean;
    /**
     * Only actions on the specified group of views are included in the metric calculation.
     */
    targetViewGroup?: string;
    /**
     * Specifies the match type of the view group filter, e.g. using Contains or Equals. Defaults to Equals.
     */
    targetViewGroupNameMatchType?: string;
    /**
     * Only actions on the specified view are included in the metric calculation.
     */
    targetViewName?: string;
    /**
     * Specifies the match type of the view name filter, e.g. using Contains or Equals. Defaults to Equals.
     */
    targetViewNameMatchType?: string;
    /**
     * Only actions with this name are included in the metric calculation.
     */
    userActionName?: string;
    /**
     * The definition of a calculated web metric.
     */
    userActionProperties?: outputs.CalculatedWebMetricUserActionFilterUserActionProperty[];
    /**
     * The status of xhr actions in the metric calculation: `true` or `false`
     */
    xhrAction?: boolean;
    /**
     * The status of route actions in the metric calculation: `true` or `false`
     */
    xhrRouteChangeAction?: boolean;
}

export interface CalculatedWebMetricUserActionFilterUserActionProperty {
    /**
     * User Action Property
     */
    properties?: outputs.CalculatedWebMetricUserActionFilterUserActionPropertyProperty[];
}

export interface CalculatedWebMetricUserActionFilterUserActionPropertyProperty {
    /**
     * Only actions that have a value greater than or equal to this are included in the metric calculation.
     */
    from?: number;
    /**
     * The key of the action property we're checking.
     */
    key?: string;
    /**
     * Specifies the match type of a string filter, e.g. using Contains or Equals.
     */
    matchType?: string;
    /**
     * Only actions that have a value less than or equal to this are included in the metric calculation.
     */
    to?: number;
    /**
     * Only actions that have this value in the specified property are included in the metric calculation.
     */
    value?: string;
}

export interface CloudappWorkloaddetectionCloudFoundry {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface CloudappWorkloaddetectionDocker {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface CloudappWorkloaddetectionKubernetes {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Define rules to merge similar Kubernetes workloads into process groups. 
     *
     *  You can use workload properties like namespace name, base pod name or container name as well as the [environment variables DT_RELEASE_STAGE and DT_RELEASE_PRODUCT](https://dt-url.net/sb02v2a) for grouping processes of similar workloads. The first applicable rule will be applied. If no rule matches, “Namespace name” + “Base pod name” + “Container name” is used as fallback.
     */
    filters?: outputs.CloudappWorkloaddetectionKubernetesFilters;
}

export interface CloudappWorkloaddetectionKubernetesFilters {
    filters: outputs.CloudappWorkloaddetectionKubernetesFiltersFilter[];
}

export interface CloudappWorkloaddetectionKubernetesFiltersFilter {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * ID calculation based on
     */
    inclusionToggles: outputs.CloudappWorkloaddetectionKubernetesFiltersFilterInclusionToggles;
    /**
     * When namespace
     */
    matchFilter: outputs.CloudappWorkloaddetectionKubernetesFiltersFilterMatchFilter;
}

export interface CloudappWorkloaddetectionKubernetesFiltersFilterInclusionToggles {
    /**
     * E.g. "cloud-credential-operator-" for "cloud-credential-operator-5ff6dbff57-gszgq"
     */
    incBasepod: boolean;
    /**
     * Container name
     */
    incContainer: boolean;
    /**
     * Namespace name
     */
    incNamespace: boolean;
    /**
     * If Product is enabled and has no value, it defaults to Base pod name
     */
    incProduct: boolean;
    /**
     * Stage
     */
    incStage: boolean;
}

export interface CloudappWorkloaddetectionKubernetesFiltersFilterMatchFilter {
    /**
     * Possible Values: `CONTAINS`, `ENDS`, `EQUALS`, `EXISTS`, `NOT_CONTAINS`, `NOT_ENDS`, `NOT_EQUALS`, `NOT_STARTS`, `STARTS`
     */
    matchOperator: string;
    /**
     * Namespace name
     */
    namespace?: string;
}

export interface CloudappWorkloaddetectionServerless {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface CredentialsAllowedEntities {
    /**
     * The set of entities allowed to use the credential.
     */
    entities: outputs.CredentialsAllowedEntitiesEntity[];
}

export interface CredentialsAllowedEntitiesEntity {
    /**
     * ID of the entity
     */
    id?: string;
    /**
     * Type of entity. Possible values: `USER`, `APPLICATION`, `UNKNOWN`
     */
    type?: string;
}

export interface CredentialsCredentialUsageSummary {
    /**
     * The number of uses
     */
    count: number;
    /**
     * Type of usage, `HTTP_MONITOR` or `BROWSER_MONITOR`
     */
    type: string;
}

export interface CredentialsExternal {
    certificate?: string;
    /**
     * Required for Azure Client Secret. No further documentation available
     */
    clientSecret?: string;
    /**
     * Required for Azure Client Secret. No further documentation available
     */
    clientid?: string;
    /**
     * No documentation available
     */
    credentialsUsedForExternalSynchronizations?: string[];
    /**
     * No documentation available
     */
    passwordSecretName?: string;
    pathToCredentials?: string;
    roleid?: string;
    secretid?: string;
    /**
     * Required for Azure Client Secret. No further documentation available
     */
    tenantid?: string;
    /**
     * No documentation available
     */
    tokenSecretName?: string;
    /**
     * No documentation available
     */
    usernameSecretName?: string;
    vaultNamespace?: string;
    /**
     * No documentation available
     */
    vaultUrl?: string;
}

export interface CustomAnomaliesDimension {
    /**
     * A generic definition for a filter
     */
    dimensions?: outputs.CustomAnomaliesDimensionDimension[];
    /**
     * A filter for the metrics entity dimensions
     */
    entities?: outputs.CustomAnomaliesDimensionEntity[];
    /**
     * A filter for the metrics string dimensions
     */
    strings?: outputs.CustomAnomaliesDimensionString[];
}

export interface CustomAnomaliesDimensionDimension {
    /**
     * No documentation available
     */
    index?: number;
    /**
     * The dimensions key on the metric
     */
    key?: string;
    /**
     * No documentation available
     */
    name?: string;
    /**
     * Defines the actual set of fields depending on the value
     */
    type: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface CustomAnomaliesDimensionEntity {
    /**
     * A filter for a string value based on the given operator
     */
    filter: outputs.CustomAnomaliesDimensionEntityFilter;
    /**
     * The dimensions key on the metric
     */
    key?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface CustomAnomaliesDimensionEntityFilter {
    /**
     * The operator to match on
     */
    operator: string;
    /**
     * The value to match on
     */
    value: string;
}

export interface CustomAnomaliesDimensionString {
    /**
     * A filter for a string value based on the given operator
     */
    filter: outputs.CustomAnomaliesDimensionStringFilter;
    /**
     * No documentation available
     */
    index?: number;
    /**
     * The dimensions key on the metric
     */
    key?: string;
    /**
     * No documentation available
     */
    name?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface CustomAnomaliesDimensionStringFilter {
    /**
     * The operator to match on
     */
    operator: string;
    /**
     * The value to match on
     */
    value: string;
}

export interface CustomAnomaliesScope {
    /**
     * A scope filter for the related custom device group name
     */
    customDeviceGroupNames?: outputs.CustomAnomaliesScopeCustomDeviceGroupName[];
    /**
     * A scope filter for a monitored entity identifier
     */
    entities?: outputs.CustomAnomaliesScopeEntity[];
    /**
     * A scope filter for the related host group name
     */
    hostGroupNames?: outputs.CustomAnomaliesScopeHostGroupName[];
    /**
     * A scope filter for the related host name
     */
    hostNames?: outputs.CustomAnomaliesScopeHostName[];
    /**
     * A scope filter for a management zone identifier
     */
    managementZones?: outputs.CustomAnomaliesScopeManagementZone[];
    /**
     * A scope filter for a monitored entity name
     */
    names?: outputs.CustomAnomaliesScopeName[];
    /**
     * A scope filter for a process group identifier
     */
    processGroupIds?: outputs.CustomAnomaliesScopeProcessGroupId[];
    /**
     * A scope filter for the related process group name
     */
    processGroupNames?: outputs.CustomAnomaliesScopeProcessGroupName[];
    /**
     * A generic scope filter
     */
    scopes?: outputs.CustomAnomaliesScopeScope[];
    /**
     * A scope filter for tags on entities
     */
    tags?: outputs.CustomAnomaliesScopeTag[];
}

export interface CustomAnomaliesScopeCustomDeviceGroupName {
    /**
     * A filter for a string value based on the given operator
     */
    filter: outputs.CustomAnomaliesScopeCustomDeviceGroupNameFilter;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface CustomAnomaliesScopeCustomDeviceGroupNameFilter {
    /**
     * The operator to match on
     */
    operator: string;
    /**
     * The value to match on
     */
    value: string;
}

export interface CustomAnomaliesScopeEntity {
    /**
     * The monitored entities id to match on
     */
    id: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface CustomAnomaliesScopeHostGroupName {
    /**
     * A filter for a string value based on the given operator
     */
    filter: outputs.CustomAnomaliesScopeHostGroupNameFilter;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface CustomAnomaliesScopeHostGroupNameFilter {
    /**
     * The operator to match on
     */
    operator: string;
    /**
     * The value to match on
     */
    value: string;
}

export interface CustomAnomaliesScopeHostName {
    /**
     * A filter for a string value based on the given operator
     */
    filter: outputs.CustomAnomaliesScopeHostNameFilter;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface CustomAnomaliesScopeHostNameFilter {
    /**
     * The operator to match on
     */
    operator: string;
    /**
     * The value to match on
     */
    value: string;
}

export interface CustomAnomaliesScopeManagementZone {
    /**
     * The management zone id to match on
     */
    id?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface CustomAnomaliesScopeName {
    /**
     * A filter for a string value based on the given operator
     */
    filter: outputs.CustomAnomaliesScopeNameFilter;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface CustomAnomaliesScopeNameFilter {
    /**
     * The operator to match on
     */
    operator: string;
    /**
     * The value to match on
     */
    value: string;
}

export interface CustomAnomaliesScopeProcessGroupId {
    /**
     * The process groups id to match on
     */
    id: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface CustomAnomaliesScopeProcessGroupName {
    /**
     * A filter for a string value based on the given operator
     */
    filter: outputs.CustomAnomaliesScopeProcessGroupNameFilter;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface CustomAnomaliesScopeProcessGroupNameFilter {
    /**
     * The operator to match on
     */
    operator: string;
    /**
     * The value to match on
     */
    value: string;
}

export interface CustomAnomaliesScopeScope {
    /**
     * Defines the actual set of fields depending on the value
     */
    type: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface CustomAnomaliesScopeTag {
    /**
     * A filter for a string value based on the given operator
     */
    filter: outputs.CustomAnomaliesScopeTagFilter;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface CustomAnomaliesScopeTagFilter {
    /**
     * The origin of the tag, such as AWS or Cloud Foundry. Custom tags use the `CONTEXTLESS` value
     */
    context: string;
    /**
     * The key of the tag. Custom tags have the tag value here
     */
    key: string;
    /**
     * The value of the tag. Not applicable to custom tags
     */
    value?: string;
}

export interface CustomAnomaliesStrategy {
    /**
     * An auto-adaptive baseline strategy to detect anomalies within metrics that show a regular change over time, as the baseline is also updated automatically. An example is to detect an anomaly in the number of received network packets or within the number of user actions over time
     */
    auto?: outputs.CustomAnomaliesStrategyAuto;
    /**
     * A generic monitoring strategy
     */
    generics?: outputs.CustomAnomaliesStrategyGeneric[];
    /**
     * A static threshold monitoring strategy to alert on hard limits within a given metric. An example is the violation of a critical memory limit
     */
    static?: outputs.CustomAnomaliesStrategyStatic;
}

export interface CustomAnomaliesStrategyAuto {
    /**
     * The condition for the **threshold** value check: `ABOVE` or `BELOW`
     */
    alertCondition: string;
    /**
     * If true, also one-minute samples without data are counted as violating samples
     */
    alertingOnMissingData?: boolean;
    /**
     * The number of one-minute samples within the evaluation window that must go back to normal to close the event
     */
    dealertingSamples: number;
    /**
     * The number of one-minute samples that form the sliding evaluation window
     */
    samples: number;
    /**
     * Defines the factor of how many signal fluctuations are valid. Values above the baseline plus the signal fluctuation times the number of tolerated signal fluctuations are alerted
     */
    signalFluctuations: number;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The number of one-minute samples within the evaluation window that must violate the threshold to trigger an event
     */
    violatingSamples: number;
}

export interface CustomAnomaliesStrategyGeneric {
    /**
     * Defines the actual set of fields depending on the value
     */
    type: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface CustomAnomaliesStrategyStatic {
    /**
     * The condition for the **threshold** value check: `ABOVE` or `BELOW`
     */
    alertCondition: string;
    /**
     * If true, also one-minute samples without data are counted as violating samples
     */
    alertingOnMissingData?: boolean;
    /**
     * The number of one-minute samples within the evaluation window that must go back to normal to close the event
     */
    dealertingSamples: number;
    /**
     * The number of one-minute samples that form the sliding evaluation window
     */
    samples: number;
    /**
     * The value of the static threshold based on the specified unit
     */
    threshold: number;
    /**
     * The unit of the threshold, matching the metric definition
     */
    unit: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The number of one-minute samples within the evaluation window that must violate the threshold to trigger an event
     */
    violatingSamples: number;
}

export interface CustomAppAnomaliesErrorRateIncrease {
    /**
     * Possible Values: `Auto`, `Fixed`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Alert if the percentage of user actions affected by reported errors exceeds **both** the absolute threshold and the relative threshold
     */
    errorRateIncreaseAuto?: outputs.CustomAppAnomaliesErrorRateIncreaseErrorRateIncreaseAuto;
    /**
     * Alert if the custom reported error rate threshold is exceeded during any 5-minute period
     */
    errorRateIncreaseFixed?: outputs.CustomAppAnomaliesErrorRateIncreaseErrorRateIncreaseFixed;
}

export interface CustomAppAnomaliesErrorRateIncreaseErrorRateIncreaseAuto {
    /**
     * Absolute threshold
     */
    thresholdAbsolute: number;
    /**
     * Relative threshold
     */
    thresholdRelative: number;
}

export interface CustomAppAnomaliesErrorRateIncreaseErrorRateIncreaseFixed {
    /**
     * Possible Values: `Low`, `Medium`, `High`
     */
    sensitivity: string;
    /**
     * Absolute threshold
     */
    thresholdAbsolute: number;
}

export interface CustomAppAnomaliesSlowUserActions {
    /**
     * Possible Values: `Auto`, `Fixed`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * no documentation available
     */
    slowUserActionsAuto?: outputs.CustomAppAnomaliesSlowUserActionsSlowUserActionsAuto;
    /**
     * no documentation available
     */
    slowUserActionsFixed?: outputs.CustomAppAnomaliesSlowUserActionsSlowUserActionsFixed;
}

export interface CustomAppAnomaliesSlowUserActionsSlowUserActionsAuto {
    /**
     * To avoid over-alerting do not alert for low traffic applications with less than
     */
    durationAvoidOveralerting: outputs.CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationAvoidOveralerting;
    /**
     * Alert if the action duration of all user actions degrades beyond **both** the absolute and relative threshold:
     */
    durationThresholdAll: outputs.CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdAll;
    /**
     * Alert if the action duration of the slowest 10% of user actions degrades beyond **both** the absolute and relative threshold:
     */
    durationThresholdSlowest: outputs.CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdSlowest;
}

export interface CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationAvoidOveralerting {
    /**
     * no documentation available
     */
    minActionRate: number;
}

export interface CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdAll {
    /**
     * Absolute threshold
     */
    durationThreshold: number;
    /**
     * Relative threshold
     */
    slowdownPercentage: number;
}

export interface CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdSlowest {
    /**
     * Absolute threshold
     */
    durationThreshold: number;
    /**
     * Relative threshold
     */
    slowdownPercentage: number;
}

export interface CustomAppAnomaliesSlowUserActionsSlowUserActionsFixed {
    /**
     * To avoid over-alerting do not alert for low traffic applications with less than
     */
    durationAvoidOveralerting: outputs.CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationAvoidOveralerting;
    /**
     * Alert if the action duration of all user actions degrades beyond the absolute threshold:
     */
    durationThresholdAllFixed: outputs.CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdAllFixed;
    /**
     * Alert if the action duration of the slowest 10% of user actions degrades beyond the absolute threshold:
     */
    durationThresholdSlowest: outputs.CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdSlowest;
    /**
     * Possible Values: `Medium`, `High`, `Low`
     */
    sensitivity: string;
}

export interface CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationAvoidOveralerting {
    /**
     * no documentation available
     */
    minActionRate: number;
}

export interface CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdAllFixed {
    /**
     * Absolute threshold
     */
    durationThreshold: number;
}

export interface CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdSlowest {
    /**
     * Absolute threshold
     */
    durationThreshold: number;
}

export interface CustomAppAnomaliesUnexpectedHighLoad {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Dynatrace learns your typical application traffic over an observation period of one week. Depending on this expected value Dynatrace detects abnormal traffic spikes within your application.
     */
    thresholdPercentage?: number;
}

export interface CustomAppAnomaliesUnexpectedLowLoad {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Dynatrace learns your typical application traffic over an observation period of one week. Depending on this expected value Dynatrace detects abnormal traffic drops within your application.
     */
    thresholdPercentage?: number;
}

export interface CustomAppCrashRateCrashRateIncrease {
    /**
     * Alert crash rate increases when auto-detected baseline is exceeded by a certain number of users
     */
    crashRateIncreaseAuto?: outputs.CustomAppCrashRateCrashRateIncreaseCrashRateIncreaseAuto;
    /**
     * Alert crash rate increases when the defined threshold is exceeded by a certain number of users
     */
    crashRateIncreaseFixed?: outputs.CustomAppCrashRateCrashRateIncreaseCrashRateIncreaseFixed;
    /**
     * Possible Values: `Auto`, `Fixed`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface CustomAppCrashRateCrashRateIncreaseCrashRateIncreaseAuto {
    /**
     * Dynatrace learns the typical crash rate for all app versions and will create an alert if the baseline is violated by more than a specified threshold. Analysis happens based on a sliding window of 10 minutes.
     */
    baselineViolationPercentage: number;
    /**
     * Amount of users
     */
    concurrentUsers: number;
    /**
     * Possible Values: `Low`, `Medium`, `High`
     */
    sensitivity: string;
}

export interface CustomAppCrashRateCrashRateIncreaseCrashRateIncreaseFixed {
    /**
     * Absolute threshold
     */
    absoluteCrashRate: number;
    /**
     * Amount of users
     */
    concurrentUsers: number;
}

export interface CustomAppEnablementRum {
    /**
     * (Field has overlap with `dynatrace.MobileApplication`) Percentage of user sessions captured and analyzed. By default, Dynatrace captures all user actions and user sessions for analysis. This approach ensures complete insight into your application’s performance and customer experience. You can optionally reduce the granularity of user-action and user-session analysis by capturing a lower percentage of user sessions. While this approach can reduce monitoring costs, it also results in lower visibility into how your customers are using your applications. For example, a setting of 10% results in Dynatrace analyzing only every tenth user session.
     */
    costAndTrafficControl: number;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface CustomServiceRule {
    /**
     * Additional annotations filter of the rule. Only classes where all listed annotations are available in the class itself or any of its superclasses are instrumented. Not applicable to PHP
     */
    annotations?: string[];
    /**
     * The fully qualified class or interface to instrument (or a substring if matching to a string). Required for Java and .NET custom services. Not applicable to PHP
     */
    class?: outputs.CustomServiceRuleClass;
    /**
     * Rule enabled/disabled
     */
    enabled: boolean;
    /**
     * The PHP file containing the class or methods to instrument. Required for PHP custom service. Not applicable to Java and .NET
     */
    file?: outputs.CustomServiceRuleFile;
    /**
     * methods to instrument
     */
    methods: outputs.CustomServiceRuleMethod[];
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface CustomServiceRuleClass {
    /**
     * Matcher applying to the class name (ENDS*WITH, EQUALS or STARTS*WITH). STARTS_WITH can only be used if there is at least one annotation defined. Default value is EQUALS
     */
    match?: string;
    /**
     * The full name of the class / the name to match the class name with
     */
    name: string;
}

export interface CustomServiceRuleFile {
    /**
     * Matcher applying to the file name (ENDS*WITH, EQUALS or STARTS*WITH). Default value is ENDS_WITH (if applicable)
     */
    match?: string;
    /**
     * The full name of the file / the name to match the file name with
     */
    name: string;
}

export interface CustomServiceRuleMethod {
    /**
     * Fully qualified types of argument the method expects
     */
    arguments?: string[];
    /**
     * The ID of the method rule
     */
    id: string;
    /**
     * The modifiers of the method rule. Possible values are `ABSTRACT`, `EXTERN`, `FINAL`, `NATIVE` and `STATIC`
     */
    modifiers?: string[];
    /**
     * The method to instrument
     */
    name: string;
    /**
     * Fully qualified type the method returns
     */
    returns?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The visibility of the method rule. Possible values are `INTERNAL`, `PACKAGE_PROTECTED`, `PRIVATE`, `PROTECTED` and `PUBLIC`
     */
    visibility?: string;
}

export interface CustomTagsTags {
    /**
     * A Tag Filter
     */
    filters?: outputs.CustomTagsTagsFilter[];
}

export interface CustomTagsTagsFilter {
    /**
     * The origin of the tag, such as AWS or Cloud Foundry. Custom tags use the `CONTEXTLESS` value
     */
    context: string;
    /**
     * The key of the tag. Custom tags have the tag value here
     */
    key: string;
    /**
     * The value of the tag. Not applicable to custom tags
     */
    value?: string;
}

export interface DashboardDashboardMetadata {
    /**
     * The tile uses consistent colors when rendering its content
     */
    consistentColors?: boolean;
    /**
     * Dashboard filter configuration of a dashboard
     */
    dynamicFilters?: outputs.DashboardDashboardMetadataDynamicFilters;
    /**
     * Global filter Settings for the Dashboard
     */
    filter?: outputs.DashboardDashboardMetadataFilter;
    /**
     * the name of the dashboard
     */
    name: string;
    /**
     * the owner of the dashboard
     */
    owner: string;
    /**
     * the dashboard is a preset (`true`) or not (`false`). Default is `false`.
     */
    preset?: boolean;
    /**
     * the dashboard is shared (`true`) or private (`false`)
     *
     * @deprecated Please use the resource `dynatrace.DashboardSharing` to configure share settings
     */
    shared?: boolean;
    /**
     * represents sharing configuration of a dashboard
     *
     * @deprecated Please use the resource `dynatrace.DashboardSharing` to configure share settings
     */
    sharingDetails?: outputs.DashboardDashboardMetadataSharingDetails;
    /**
     * a set of tags assigned to the dashboard
     */
    tags?: string[];
    /**
     * No documentation available
     */
    tilesNameSize?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * a set of all possible global dashboard filters that can be applied to dashboard
     */
    validFilterKeys?: string[];
}

export interface DashboardDashboardMetadataDynamicFilters {
    /**
     * A set of all possible global dashboard filters that can be applied to a dashboard
     */
    filters: string[];
    /**
     * A set of generic tag filters that can be applied to a dashboard
     */
    genericTagFilters?: outputs.DashboardDashboardMetadataDynamicFiltersGenericTagFilters;
    /**
     * A set of entities applied for tag filter suggestions. You can fetch the list of possible values with the [GET all entity types](https://dt-url.net/dw03s7h)request. 
     *
     * Only applicable if the **filters** set includes `TAG_KEY:<tagname>`
     */
    tagSuggestionTypes?: string[];
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface DashboardDashboardMetadataDynamicFiltersGenericTagFilters {
    filters: outputs.DashboardDashboardMetadataDynamicFiltersGenericTagFiltersFilter[];
}

export interface DashboardDashboardMetadataDynamicFiltersGenericTagFiltersFilter {
    /**
     * Entity types affected by tag
     */
    entityTypes: string[];
    /**
     * The display name used to identify this generic filter
     */
    name?: string;
    /**
     * The entity type for which the suggestions should be provided.
     */
    suggestionsFromEntityType?: string;
    /**
     * The tag key for this filter
     */
    tagKey?: string;
}

export interface DashboardDashboardMetadataFilter {
    /**
     * the management zone this dashboard applies to
     */
    managementZones?: outputs.DashboardDashboardMetadataFilterManagementZone[];
    /**
     * the default timeframe of the dashboard
     */
    timeframe?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface DashboardDashboardMetadataFilterManagementZone {
    /**
     * a short description of the Dynatrace entity
     */
    description?: string;
    /**
     * the ID of the Dynatrace entity
     */
    id: string;
    /**
     * the name of the Dynatrace entity
     */
    name?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface DashboardDashboardMetadataSharingDetails {
    /**
     * If `true`, the dashboard is shared via link and authenticated users with the link can view
     */
    linkShared?: boolean;
    /**
     * If `true`, the dashboard is published to anyone on this environment
     */
    published?: boolean;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface DashboardMetadata {
    /**
     * Dynatrace server version
     */
    clusterVersion?: string;
    /**
     * A Sorted list of the version numbers of the configuration
     */
    configurationVersions?: number[];
    /**
     * A Sorted list of the version numbers of the configuration
     */
    currentConfigurationVersions?: string[];
}

export interface DashboardSharingPermissions {
    /**
     * Access permissions of the dashboard
     */
    permissions?: outputs.DashboardSharingPermissionsPermission[];
}

export interface DashboardSharingPermissionsPermission {
    /**
     * The ID of the user or group to whom the permission is granted.
     */
    id?: string;
    /**
     * The level of the permission:
     */
    level: string;
    /**
     * The type of the permission:
     */
    type: string;
}

export interface DashboardSharingPublic {
    /**
     * A list of management zones that can display data on the publicly shared dashboard.
     */
    managementZones: string[];
    /**
     * A list of URLs for anonymous access to the dashboard indexed by management zone name
     */
    urls: {[key: string]: string};
}

export interface DashboardTile {
    /**
     * The list of Dynatrace entities, assigned to the tile
     */
    assignedEntities?: string[];
    /**
     * Auto Refresh is disabled (`true`)
     */
    autoRefreshDisabled?: boolean;
    /**
     * the position and size of a tile
     */
    bounds?: outputs.DashboardTileBounds;
    chartVisible?: boolean;
    /**
     * The tile is configured and ready to use (`true`) or just placed on the dashboard (`false`)
     */
    configured?: boolean;
    /**
     * The name of the tile, set by user
     */
    customName?: string;
    /**
     * Include (`false') or exclude (`true`) maintenance windows from availability calculations
     */
    excludeMaintenanceWindows?: boolean;
    /**
     * is filter applied to a tile. It overrides dashboard's filter
     */
    filter?: outputs.DashboardTileFilter;
    /**
     * the position and size of a tile
     */
    filterConfig?: outputs.DashboardTileFilterConfig;
    /**
     * The limit of the results, if not set will use the default value of the system
     */
    limit?: number;
    /**
     * The markdown-formatted content of the tile
     */
    markdown?: string;
    /**
     * The metric assigned to the tile
     */
    metric?: string;
    /**
     * the name of the tile
     */
    name: string;
    /**
     * The size of the tile name. Possible values are `small`, `medium` and `large`.
     */
    nameSize?: string;
    /**
     * A [user session query](https://www.dynatrace.com/support/help/shortlink/usql-info) executed by the tile
     */
    query?: string;
    /**
     * the type of the tile. Must be either `APPLICATION_WORLDMAP`, `RESOURCES`, `THIRD_PARTY_MOST_ACTIVE`, `UEM_CONVERSIONS_PER_GOAL`, `PROCESS_GROUPS_ONE` or `HOST` .
     */
    tileType: string;
    /**
     * The comparison timeframe of the query. If specified, you additionally get the results of the same query with the specified time shift
     */
    timeFrameShift?: string;
    /**
     * The attribute `type` exists for backwards compatibilty. Usage is discouraged. You should use `visualization` instead.
     */
    type?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The visualization of the tile. Possible values are: `COLUMN_CHART`, `FUNNEL`, `LINE_CHART`, `PIE_CHART`, `SINGLE_VALUE`, `TABLE`
     */
    visualization?: string;
    /**
     * Configuration of a User session query visualization tile
     */
    visualizationConfig?: outputs.DashboardTileVisualizationConfig;
}

export interface DashboardTileBounds {
    /**
     * the height of the tile, in pixels
     */
    height: number;
    /**
     * the horizontal distance from the top left corner of the dashboard to the top left corner of the tile, in pixels
     */
    left: number;
    /**
     * the vertical distance from the top left corner of the dashboard to the top left corner of the tile, in pixels
     */
    top: number;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * the width of the tile, in pixels
     */
    width: number;
}

export interface DashboardTileFilter {
    /**
     * the management zone this tile applies to
     */
    managementZones?: outputs.DashboardTileFilterManagementZone[];
    /**
     * the default timeframe of the tile
     */
    timeframe?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface DashboardTileFilterConfig {
    /**
     * Configuration of a custom chart
     */
    chartConfig?: outputs.DashboardTileFilterConfigChartConfig;
    /**
     * The name of the tile, set by user
     */
    customName: string;
    /**
     * The default name of the tile
     */
    defaultName: string;
    /**
     * Configuration of a custom chart
     */
    filters?: outputs.DashboardTileFilterConfigFilters;
    /**
     * The type of the filter. Possible values are `ALB`, `APPLICATION`, `APPLICATION_METHOD`, `APPMON`, `ASG`, `AWS_CREDENTIALS`, `AWS_CUSTOM_SERVICE`, `AWS_LAMBDA_FUNCTION`, `CLOUD_APPLICATION`, `CLOUD_APPLICATION_INSTANCE`, `CLOUD_APPLICATION_NAMESPACE`, `CONTAINER_GROUP_INSTANCE`, `CUSTOM_APPLICATION`, `CUSTOM_DEVICES`, `CUSTOM_SERVICES`, `DATABASE`, `DATABASE_KEY_REQUEST`, `DCRUM_APPLICATION`, `DCRUM_ENTITY`, `DYNAMO_DB`, `EBS`, `EC2`, `ELB`, `ENVIRONMENT`, `ESXI`, `EXTERNAL_SYNTHETIC_TEST`, `GLOBAL_BACKGROUND_ACTIVITY`, `HOST`, `IOT`, `KUBERNETES_CLUSTER`, `KUBERNETES_NODE`, `MDA_SERVICE`, `MIXED`, `MOBILE_APPLICATION`, `MONITORED_ENTITY`, `NLB`, `PG_BACKGROUND_ACTIVITY`, `PROBLEM`, `PROCESS_GROUP_INSTANCE`, `RDS`, `REMOTE_PLUGIN`, `SERVICE`, `SERVICE_KEY_REQUEST`, `SYNTHETIC_BROWSER_MONITOR`, `SYNTHETIC_HTTPCHECK`, `SYNTHETIC_HTTPCHECK_STEP`, `SYNTHETIC_LOCATION`, `SYNTHETIC_TEST`, `SYNTHETIC_TEST_STEP`, `UI_ENTITY`, `VIRTUAL_MACHINE`, `WEB_CHECK`.
     */
    type: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface DashboardTileFilterConfigChartConfig {
    /**
     * The optional custom y-axis limits
     */
    axisLimits?: {[key: string]: number};
    /**
     * Either one of `Bit`, `BitPerHour`, `BitPerMinute`, `BitPerSecond`, `Byte`, `BytePerHour`, `BytePerMinute`, `BytePerSecond`, `Cores`, `Count`, `Day`, `DecibelMilliWatt`, `GibiByte`, `Giga`, `GigaByte`, `Hour`, `KibiByte`, `KibiBytePerHour`, `KibiBytePerMinute`, `KibiBytePerSecond`, `Kilo`, `KiloByte`, `KiloBytePerHour`, `KiloBytePerMinute`, `KiloBytePerSecond`, `MebiByte`, `MebiBytePerHour`, `MebiBytePerMinute`, `MebiBytePerSecond`, `Mega`, `MegaByte`, `MegaBytePerHour`, `MegaBytePerMinute`, `MegaBytePerSecond`, `MicroSecond`, `MilliCores`, `MilliSecond`, `MilliSecondPerMinute`, `Minute`, `Month`, `NanoSecond`, `NanoSecondPerMinute`, `NotApplicable`, `PerHour`, `PerMinute`, `PerSecond`, `Percent`, `Pixel`, `Promille`, `Ratio`, `Second`, `State`, `Unspecified`, `Week`, `Year`
     */
    leftAxisCustomUnit?: string;
    /**
     * Defines if a legend should be shown
     */
    legend?: boolean;
    /**
     * Additional information about charted metric
     */
    resultMetadatas?: outputs.DashboardTileFilterConfigChartConfigResultMetadata[];
    /**
     * Either one of `Bit`, `BitPerHour`, `BitPerMinute`, `BitPerSecond`, `Byte`, `BytePerHour`, `BytePerMinute`, `BytePerSecond`, `Cores`, `Count`, `Day`, `DecibelMilliWatt`, `GibiByte`, `Giga`, `GigaByte`, `Hour`, `KibiByte`, `KibiBytePerHour`, `KibiBytePerMinute`, `KibiBytePerSecond`, `Kilo`, `KiloByte`, `KiloBytePerHour`, `KiloBytePerMinute`, `KiloBytePerSecond`, `MebiByte`, `MebiBytePerHour`, `MebiBytePerMinute`, `MebiBytePerSecond`, `Mega`, `MegaByte`, `MegaBytePerHour`, `MegaBytePerMinute`, `MegaBytePerSecond`, `MicroSecond`, `MilliCores`, `MilliSecond`, `MilliSecondPerMinute`, `Minute`, `Month`, `NanoSecond`, `NanoSecondPerMinute`, `NotApplicable`, `PerHour`, `PerMinute`, `PerSecond`, `Percent`, `Pixel`, `Promille`, `Ratio`, `Second`, `State`, `Unspecified`, `Week`, `Year`
     */
    rightAxisCustomUnit?: string;
    /**
     * A list of charted metrics
     */
    series?: outputs.DashboardTileFilterConfigChartConfigSeries[];
    /**
     * The type of the chart
     */
    type: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface DashboardTileFilterConfigChartConfigResultMetadata {
    /**
     * Additional metadata for charted metric
     */
    configs?: outputs.DashboardTileFilterConfigChartConfigResultMetadataConfig[];
}

export interface DashboardTileFilterConfigChartConfigResultMetadataConfig {
    /**
     * The color of the metric in the chart, hex format
     */
    customColor?: string;
    /**
     * A generated key by the Dynatrace Server
     */
    key?: string;
    /**
     * The timestamp of the last metadata modification, in UTC milliseconds
     */
    lastModified?: number;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface DashboardTileFilterConfigChartConfigSeries {
    /**
     * The charted aggregation of the metric
     */
    aggregation: string;
    aggregationRate?: string;
    /**
     * Configuration of the charted metric splitting
     */
    dimensions?: outputs.DashboardTileFilterConfigChartConfigSeriesDimension[];
    /**
     * The visualization of the timeseries chart
     */
    entityType: string;
    /**
     * The name of the charted metric
     */
    metric: string;
    /**
     * The charted percentile. Only applicable if the **aggregation** is set to `PERCENTILE`
     */
    percentile?: number;
    /**
     * Sort ascending (`true`) or descending (`false`)
     */
    sortAscending?: boolean;
    /**
     * Sort the column (`true`) or (`false`)
     */
    sortColumn?: boolean;
    /**
     * The visualization of the timeseries chart. Possible values are `AREA`, `BAR` and `LINE`.
     */
    type: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface DashboardTileFilterConfigChartConfigSeriesDimension {
    entityDimension?: boolean;
    /**
     * The ID of the dimension by which the metric is split
     */
    id: string;
    /**
     * The name of the dimension by which the metric is split
     */
    name?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The splitting value
     */
    values?: string[];
}

export interface DashboardTileFilterConfigFilters {
    /**
     * the tiles this Dashboard consist of
     */
    filters?: outputs.DashboardTileFilterConfigFiltersFilter[];
}

export interface DashboardTileFilterConfigFiltersFilter {
    /**
     * The entity type (e.g. HOST, SERVICE, ...)
     */
    entityType: string;
    /**
     * the tiles this Dashboard consist of
     */
    matches?: outputs.DashboardTileFilterConfigFiltersFilterMatch[];
}

export interface DashboardTileFilterConfigFiltersFilterMatch {
    /**
     * The entity type (e.g. HOST, SERVICE, ...)
     */
    key: string;
    /**
     * the tiles this Dashboard consist of
     */
    values?: string[];
}

export interface DashboardTileFilterManagementZone {
    /**
     * a short description of the Dynatrace entity
     */
    description?: string;
    /**
     * the ID of the Dynatrace entity
     */
    id: string;
    /**
     * the name of the Dynatrace entity
     */
    name?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface DashboardTileVisualizationConfig {
    /**
     * The axis bucketing when enabled groups similar series in the same virtual axis
     */
    hasAxisBucketing?: boolean;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface DashboardsAllowlistAllowlist {
    urlpatterns: outputs.DashboardsAllowlistAllowlistUrlpattern[];
}

export interface DashboardsAllowlistAllowlistUrlpattern {
    /**
     * Possible Values: `Equals`, `StartsWith`
     */
    rule: string;
    /**
     * Pattern
     */
    template: string;
}

export interface DashboardsGeneralDefaultDashboardList {
    defaultDashboards: outputs.DashboardsGeneralDefaultDashboardListDefaultDashboard[];
}

export interface DashboardsGeneralDefaultDashboardListDefaultDashboard {
    /**
     * Preset dashboard to show as default landing page
     */
    dashboard: string;
    /**
     * Show selected dashboard by default for this user group
     */
    userGroup: string;
}

export interface DashboardsPresetsDashboardPresetsList {
    dashboardPresets: outputs.DashboardsPresetsDashboardPresetsListDashboardPreset[];
}

export interface DashboardsPresetsDashboardPresetsListDashboardPreset {
    /**
     * Dashboard preset to limit visibility for
     */
    dashboardPreset: string;
    /**
     * User group to show selected dashboard preset to
     */
    userGroup: string;
}

export interface DataPrivacyDataCollection {
    /**
     * With [Data-collection and opt-in mode](https://dt-url.net/7l3p0p3h) enabled, Real User Monitoring data isn't captured until dtrum.enable() is called for specific user sessions.
     */
    optInModeEnabled: boolean;
}

export interface DataPrivacyDoNotTrack {
    /**
     * Comply with "Do Not Track" browser settings
     */
    complyWithDoNotTrack: boolean;
    /**
     * Possible Values: `Anonymous`, `Disable_rum`
     */
    doNotTrack?: string;
}

export interface DataPrivacyMasking {
    /**
     * Possible Values: `All`, `Public`
     *
     * @deprecated This property is not supported anymore by the Dynatrace REST API (since schema version 4)
     */
    ipAddressMasking?: string;
    /**
     * Dynatrace captures the IP addresses of your end-users to determine the regions from which they access your application. To learn more, visit [Mask IPs and GPS coordinates](https://dt-url.net/mask-end-users-ip-addresses).. Dynatrace also captures GPS data from mobile apps that provide their users with the option of sharing geolocation data. On the server side, Dynatrace captures IP addresses to enable detailed troubleshooting for Dynatrace service calls.
     *
     * Once enabled, IP address masking sets the last octet of monitored IPv4 addresses and the last 80 bits of IPv6 addresses to zeroes. GPS coordinates are rounded up to 1 decimal place (~10 km). This masking occurs in memory. Full IP addresses are never written to disk. Location lookups are made using anonymized IP addresses and GPS coordinates.
     *
     * @deprecated This property is not supported anymore by the Dynatrace REST API (since schema version 4)
     */
    ipAddressMaskingEnabled?: boolean;
    /**
     * Dynatrace captures the URIs and request headers sent from desktop and mobile browsers. Dynatrace also captures full URIs on the server-side to enable detailed performance analysis of your applications. For complete details, visit [Mask personal data in URIs](https://dt-url.net/mask-personal-data-in-URIs).. URIs and request headers contain personal data. When this setting is enabled, Dynatrace automatically detects UUIDs, credit card numbers, email addresses, IP addresses, and other IDs and replaces those values with placeholders. The personal data is then masked in PurePath analysis, error analysis, user action naming for RUM, and elsewhere in Dynatrace.
     */
    personalDataUriMaskingEnabled: boolean;
    /**
     * When Dynatrace detects a user action that triggers a page load or an AJAX/XHR action. To learn more about masking user actions, visit [Mask user actions](https://dt-url.net/mask-user-action).. When Dynatrace detects a user action that triggers a page load or an AJAX/XHR action, it constructs a name for the user action based on:
     *
     * - User event type (click on..., loading of page..., or keypress on...)
     * - Title, caption, label, value, ID, className, or other available property of the related HTML element (for example, an image, button, checkbox, or text input field).
     *
     * In most instances, the default approach to user-action naming works well, resulting in user-action names such as:
     *
     * - click on "Search" on page /search.html
     * - keypress on "Feedback" on page /contact.html
     * - touch on "Homescreen" of page /list.jsf
     *
     * In rare circumstances, confidential data (for example, email addresses, usernames, or account numbers) can be unintentionally included in user action names because the confidential data itself is included in an HTML element label, attribute, or other value (for example, click on "my Account Number: 1231231"...). If such confidential data appears in your application's user action names, enable the Mask user action names setting. This setting replaces specific HTML element names and values with generic HTML element names. With user-action name masking enabled, the user action names listed above appear as:
     *
     * - click on INPUT on page /search.html
     * - keypress on TEXTAREA on page /contact.html
     * - touch on DIV of page /list.jsf
     */
    userActionMaskingEnabled: boolean;
}

export interface DataPrivacyUserTracking {
    /**
     * When enabled, Dynatrace places a [persistent cookie](https://dt-url.net/313o0p4n) on all end-user devices to identify returning users.
     */
    persistentCookieEnabled: boolean;
}

export interface DatabaseAnomaliesDbConnectFailures {
    /**
     * Number of failed database connections during any **eval_period** minutes period to trigger an alert
     */
    connectionFailsCount?: number;
    /**
     * The *X* minutes time period during which the **connection*fails*count** is evaluated
     */
    evalPeriod?: number;
}

export interface DatabaseAnomaliesFailureRate {
    /**
     * Parameters of failure rate increase auto-detection. Example: If the expected error rate is 1.5%, and you set an absolute increase of 1%, and a relative increase of 50%, the thresholds will be:  Absolute: 1.5% + **1%** = 2.5%  Relative: 1.5% + 1.5% * **50%** = 2.25%
     */
    auto?: outputs.DatabaseAnomaliesFailureRateAuto;
    /**
     * Fixed thresholds for failure rate increase detection
     */
    thresholds?: outputs.DatabaseAnomaliesFailureRateThresholds;
}

export interface DatabaseAnomaliesFailureRateAuto {
    /**
     * Absolute increase of failing service calls to trigger an alert, %
     */
    absolute: number;
    /**
     * Relative increase of failing service calls to trigger an alert, %
     */
    relative: number;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface DatabaseAnomaliesFailureRateThresholds {
    /**
     * Sensitivity of the threshold.  With `low` sensitivity, high statistical confidence is used. Brief violations (for example, due to a surge in load) won't trigger alerts.  With `high` sensitivity, no statistical confidence is used. Each violation triggers alert
     */
    sensitivity: string;
    /**
     * Failure rate during any 5-minute period to trigger an alert, %
     */
    threshold: number;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface DatabaseAnomaliesLoad {
    /**
     * The configuration of traffic drops detection
     */
    drops?: outputs.DatabaseAnomaliesLoadDrops;
    /**
     * The configuration of traffic spikes detection
     */
    spikes?: outputs.DatabaseAnomaliesLoadSpikes;
}

export interface DatabaseAnomaliesLoadDrops {
    /**
     * Alert if the service stays in abnormal state for at least *X* minutes
     */
    minutes?: number;
    /**
     * Alert if the observed load is more than *X* % of the expected value
     */
    percent?: number;
}

export interface DatabaseAnomaliesLoadSpikes {
    /**
     * Alert if the service stays in abnormal state for at least *X* minutes
     */
    minutes?: number;
    /**
     * Alert if the observed load is more than *X* % of the expected value
     */
    percent?: number;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface DatabaseAnomaliesResponseTime {
    /**
     * Parameters of the response time degradation auto-detection. Violation of **any** criterion triggers an alert
     */
    auto?: outputs.DatabaseAnomaliesResponseTimeAuto;
    /**
     * Fixed thresholds for response time degradation detection
     */
    thresholds?: outputs.DatabaseAnomaliesResponseTimeThresholds;
}

export interface DatabaseAnomaliesResponseTimeAuto {
    /**
     * Minimal service load to detect response time degradation. Response time degradation of services with smaller load won't trigger alerts. Possible values are `FIFTEEN_REQUESTS_PER_MINUTE`, `FIVE_REQUESTS_PER_MINUTE`, `ONE_REQUEST_PER_MINUTE` and `TEN_REQUESTS_PER_MINUTE`
     */
    load: string;
    /**
     * Alert if the response time degrades by more than *X* milliseconds
     */
    milliseconds: number;
    /**
     * Alert if the response time degrades by more than *X* %
     */
    percent: number;
    /**
     * Alert if the response time of the slowest 10% degrades by more than *X* milliseconds
     */
    slowestMilliseconds: number;
    /**
     * Alert if the response time of the slowest 10% degrades by more than *X* milliseconds
     */
    slowestPercent: number;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface DatabaseAnomaliesResponseTimeThresholds {
    /**
     * Minimal service load to detect response time degradation. Response time degradation of services with smaller load won't trigger alerts. Possible values are `FIFTEEN_REQUESTS_PER_MINUTE`, `FIVE_REQUESTS_PER_MINUTE`, `ONE_REQUEST_PER_MINUTE` and `TEN_REQUESTS_PER_MINUTE`
     */
    load: string;
    /**
     * Response time during any 5-minute period to trigger an alert, in milliseconds
     */
    milliseconds: number;
    /**
     * Sensitivity of the threshold.  With `low` sensitivity, high statistical confidence is used. Brief violations (for example, due to a surge in load) won't trigger alerts.  With `high` sensitivity, no statistical confidence is used. Each violation triggers an alert
     */
    sensitivity: string;
    /**
     * Response time of the 10% slowest during any 5-minute period to trigger an alert, in milliseconds
     */
    slowestMilliseconds: number;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface DatabaseAnomaliesV2DatabaseConnections {
    /**
     * Detect failed database connects
     */
    enabled: boolean;
    /**
     * Threshold
     */
    maxFailedConnects?: number;
    /**
     * Time span
     */
    timePeriod?: number;
}

export interface DatabaseAnomaliesV2FailureRate {
    /**
     * Alert if the percentage of failing service calls increases by **both** the absolute and relative thresholds:
     */
    autoDetection?: outputs.DatabaseAnomaliesV2FailureRateAutoDetection;
    /**
     * Detection mode for increases in failure rate
     */
    detectionMode?: string;
    /**
     * Detect increases in failure rate
     */
    enabled: boolean;
    /**
     * Alert if a given failure rate is exceeded during any 5-minute-period
     */
    fixedDetection?: outputs.DatabaseAnomaliesV2FailureRateFixedDetection;
}

export interface DatabaseAnomaliesV2FailureRateAutoDetection {
    /**
     * Absolute threshold
     */
    absoluteIncrease: number;
    /**
     * Avoid over-alerting
     */
    overAlertingProtection: outputs.DatabaseAnomaliesV2FailureRateAutoDetectionOverAlertingProtection;
    /**
     * Relative threshold
     */
    relativeIncrease: number;
}

export interface DatabaseAnomaliesV2FailureRateAutoDetectionOverAlertingProtection {
    /**
     * Only alert if the abnormal state remains for at least
     */
    minutesAbnormalState: number;
    /**
     * Only alert if there are at least
     */
    requestsPerMinute: number;
}

export interface DatabaseAnomaliesV2FailureRateFixedDetection {
    /**
     * Avoid over-alerting
     */
    overAlertingProtection: outputs.DatabaseAnomaliesV2FailureRateFixedDetectionOverAlertingProtection;
    /**
     * no documentation available
     */
    sensitivity: string;
    /**
     * no documentation available
     */
    threshold: number;
}

export interface DatabaseAnomaliesV2FailureRateFixedDetectionOverAlertingProtection {
    /**
     * Only alert if the abnormal state remains for at least
     */
    minutesAbnormalState: number;
    /**
     * Only alert if there are at least
     */
    requestsPerMinute: number;
}

export interface DatabaseAnomaliesV2LoadDrops {
    /**
     * Detect service load drops
     */
    enabled: boolean;
    /**
     * Threshold
     */
    loadDropPercent?: number;
    /**
     * Time span
     */
    minutesAbnormalState?: number;
}

export interface DatabaseAnomaliesV2LoadSpikes {
    /**
     * Detect service load spikes
     */
    enabled: boolean;
    /**
     * Threshold
     */
    loadSpikePercent?: number;
    /**
     * Time span
     */
    minutesAbnormalState?: number;
}

export interface DatabaseAnomaliesV2ResponseTime {
    /**
     * no documentation available
     */
    autoDetection?: outputs.DatabaseAnomaliesV2ResponseTimeAutoDetection;
    /**
     * Detection mode for response time degradations
     */
    detectionMode?: string;
    /**
     * Detect response time degradations
     */
    enabled: boolean;
    /**
     * no documentation available
     */
    fixedDetection?: outputs.DatabaseAnomaliesV2ResponseTimeFixedDetection;
}

export interface DatabaseAnomaliesV2ResponseTimeAutoDetection {
    /**
     * Avoid over-alerting
     */
    overAlertingProtection: outputs.DatabaseAnomaliesV2ResponseTimeAutoDetectionOverAlertingProtection;
    /**
     * Alert if the median response time of all requests degrades beyond **both** the absolute and relative thresholds:
     */
    responseTimeAll: outputs.DatabaseAnomaliesV2ResponseTimeAutoDetectionResponseTimeAll;
    /**
     * Alert if the response time of the slowest 10% of requests degrades beyond **both** the absolute and relative thresholds:
     */
    responseTimeSlowest: outputs.DatabaseAnomaliesV2ResponseTimeAutoDetectionResponseTimeSlowest;
}

export interface DatabaseAnomaliesV2ResponseTimeAutoDetectionOverAlertingProtection {
    /**
     * Only alert if the abnormal state remains for at least
     */
    minutesAbnormalState: number;
    /**
     * Only alert if there are at least
     */
    requestsPerMinute: number;
}

export interface DatabaseAnomaliesV2ResponseTimeAutoDetectionResponseTimeAll {
    /**
     * Absolute threshold
     */
    degradationMilliseconds: number;
    /**
     * Relative threshold
     */
    degradationPercent: number;
}

export interface DatabaseAnomaliesV2ResponseTimeAutoDetectionResponseTimeSlowest {
    /**
     * Absolute threshold
     */
    slowestDegradationMilliseconds: number;
    /**
     * Relative threshold
     */
    slowestDegradationPercent: number;
}

export interface DatabaseAnomaliesV2ResponseTimeFixedDetection {
    /**
     * Avoid over-alerting
     */
    overAlertingProtection: outputs.DatabaseAnomaliesV2ResponseTimeFixedDetectionOverAlertingProtection;
    /**
     * Alert if the median response time of all requests degrades beyond this threshold within an observation period of 5 minutes:
     */
    responseTimeAll: outputs.DatabaseAnomaliesV2ResponseTimeFixedDetectionResponseTimeAll;
    /**
     * Alert if the response time of the slowest 10% of requests degrades beyond this threshold within an observation period of 5 minutes:
     */
    responseTimeSlowest: outputs.DatabaseAnomaliesV2ResponseTimeFixedDetectionResponseTimeSlowest;
    /**
     * no documentation available
     */
    sensitivity: string;
}

export interface DatabaseAnomaliesV2ResponseTimeFixedDetectionOverAlertingProtection {
    /**
     * Only alert if the abnormal state remains for at least
     */
    minutesAbnormalState: number;
    /**
     * Only alert if there are at least
     */
    requestsPerMinute: number;
}

export interface DatabaseAnomaliesV2ResponseTimeFixedDetectionResponseTimeAll {
    /**
     * Threshold
     */
    degradationMilliseconds: number;
}

export interface DatabaseAnomaliesV2ResponseTimeFixedDetectionResponseTimeSlowest {
    /**
     * Threshold
     */
    slowestDegradationMilliseconds: number;
}

export interface DavisAnomalyDetectorsAnalyzer {
    /**
     * Input fields for the specified analyzer
     */
    input?: outputs.DavisAnomalyDetectorsAnalyzerInput;
    /**
     * Fully qualified name of the analyzer
     */
    name: string;
}

export interface DavisAnomalyDetectorsAnalyzerInput {
    analyzerInputFields: outputs.DavisAnomalyDetectorsAnalyzerInputAnalyzerInputField[];
}

export interface DavisAnomalyDetectorsAnalyzerInputAnalyzerInputField {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface DavisAnomalyDetectorsEventTemplate {
    /**
     * Set of additional key-value properties to be attached to the triggered event.
     */
    properties?: outputs.DavisAnomalyDetectorsEventTemplateProperties;
}

export interface DavisAnomalyDetectorsEventTemplateProperties {
    properties: outputs.DavisAnomalyDetectorsEventTemplatePropertiesProperty[];
}

export interface DavisAnomalyDetectorsEventTemplatePropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface DavisAnomalyDetectorsExecutionSettings {
    /**
     * UUID of a service user. Queries will be executed on behalf of the service user.
     */
    actor?: string;
    /**
     * Minute offset of sliding evaluation window for metrics with latency
     */
    queryOffset?: number;
}

export interface DavisCopilotBlocklistEntries {
    blocklistEntries: outputs.DavisCopilotBlocklistEntriesBlocklistEntry[];
}

export interface DavisCopilotBlocklistEntriesBlocklistEntry {
    /**
     * no documentation available
     */
    name: string;
    /**
     * Possible Values: `BUCKET`, `TABLE`
     */
    type: string;
}

export interface DduPoolEvents {
    /**
     * Is the limit configuration enabled
     */
    enabled: boolean;
    /**
     * Type of the limit applied: MONTHLY or ANNUAL
     */
    type?: string;
    /**
     * Value of the DDU limit applied for provided timerange
     */
    value?: number;
}

export interface DduPoolLogMonitoring {
    /**
     * Is the limit configuration enabled
     */
    enabled: boolean;
    /**
     * Type of the limit applied: MONTHLY or ANNUAL
     */
    type?: string;
    /**
     * Value of the DDU limit applied for provided timerange
     */
    value?: number;
}

export interface DduPoolMetrics {
    /**
     * Is the limit configuration enabled
     */
    enabled: boolean;
    /**
     * Type of the limit applied: MONTHLY or ANNUAL
     */
    type?: string;
    /**
     * Value of the DDU limit applied for provided timerange
     */
    value?: number;
}

export interface DduPoolServerless {
    /**
     * Is the limit configuration enabled
     */
    enabled: boolean;
    /**
     * Type of the limit applied: MONTHLY or ANNUAL
     */
    type?: string;
    /**
     * Value of the DDU limit applied for provided timerange
     */
    value?: number;
}

export interface DduPoolTraces {
    /**
     * Is the limit configuration enabled
     */
    enabled: boolean;
    /**
     * Type of the limit applied: MONTHLY or ANNUAL
     */
    type?: string;
    /**
     * Value of the DDU limit applied for provided timerange
     */
    value?: number;
}

export interface DeclarativeGroupingDetection {
    processDefinitions: outputs.DeclarativeGroupingDetectionProcessDefinition[];
}

export interface DeclarativeGroupingDetectionProcessDefinition {
    /**
     * Process group identifier
     */
    id: string;
    /**
     * This identifier is used by Dynatrace to recognize this process group.
     */
    processGroupName: string;
    /**
     * Possible Values: `never`, `always`, `highResourceUsage`
     */
    report: string;
    /**
     * Define process detection rules by selecting a process property and a condition. Each process group can have multiple detection rules associated with it.
     */
    rules: outputs.DeclarativeGroupingDetectionProcessDefinitionRules;
}

export interface DeclarativeGroupingDetectionProcessDefinitionRules {
    rules: outputs.DeclarativeGroupingDetectionProcessDefinitionRulesRule[];
}

export interface DeclarativeGroupingDetectionProcessDefinitionRulesRule {
    /**
     * - $contains(svc) – Matches if svc appears anywhere in the process property value.
     * - $eq(svc.exe) – Matches if svc.exe matches the process property value exactly.
     * - $prefix(svc) – Matches if app matches the prefix of the process property value.
     * - $suffix(svc.py) – Matches if svc.py matches the suffix of the process property value.
     *
     * For example, $suffix(svc.py) would detect processes named loyaltysvc.py and paymentssvc.py.
     *
     * For more details, see [Declarative process grouping](https://dt-url.net/j142w57).
     */
    condition: string;
    /**
     * Possible Values: `Executable`, `ExecutablePath`, `CommandLine`
     */
    property: string;
}

export interface DefaultLaunchpadGroupLaunchpads {
    groupLaunchpads: outputs.DefaultLaunchpadGroupLaunchpadsGroupLaunchpad[];
}

export interface DefaultLaunchpadGroupLaunchpadsGroupLaunchpad {
    /**
     * State
     */
    isEnabled: boolean;
    /**
     * Launchpad
     */
    launchpadId: string;
    /**
     * User Group
     */
    userGroupId: string;
}

export interface DirectSharesRecipients {
    /**
     * Recipient of the direct share
     */
    recipients?: outputs.DirectSharesRecipientsRecipient[];
}

export interface DirectSharesRecipientsRecipient {
    /**
     * Identifier of the recipient
     */
    id: string;
    /**
     * Type of the recipient. Possible values are `group' and`user'
     */
    type?: string;
}

export interface DiscoveryDefaultRulesRule {
    /**
     * no documentation available
     */
    actions?: outputs.DiscoveryDefaultRulesRuleActions;
    /**
     * no documentation available
     */
    category: string;
    /**
     * no documentation available
     */
    description: string;
    /**
     * Environment scope
     */
    environmentScope: boolean;
    /**
     * no documentation available
     */
    id: string;
    /**
     * no documentation available
     */
    priority: string;
    /**
     * Rule query
     */
    query: string;
    /**
     * no documentation available
     */
    title: string;
    /**
     * Zero rated
     */
    zeroRated?: boolean;
}

export interface DiscoveryDefaultRulesRuleActions {
    actions: outputs.DiscoveryDefaultRulesRuleActionsAction[];
}

export interface DiscoveryDefaultRulesRuleActionsAction {
    /**
     * Instant action
     */
    instantAction?: boolean;
    /**
     * no documentation available
     */
    name: string;
    /**
     * no documentation available
     */
    parameters?: outputs.DiscoveryDefaultRulesRuleActionsActionParameters;
}

export interface DiscoveryDefaultRulesRuleActionsActionParameters {
    parameters: outputs.DiscoveryDefaultRulesRuleActionsActionParametersParameter[];
}

export interface DiscoveryDefaultRulesRuleActionsActionParametersParameter {
    /**
     * no documentation available
     */
    name: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface DiscoveryDefaultRulesSettings {
    /**
     * no documentation available
     */
    muted: boolean;
}

export interface DiskAnomaliesDiskName {
    /**
     * Possible values are: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`, `EQUALS` and `STARTS_WITH`
     */
    operator: string;
    /**
     * Value to compare to
     */
    value: string;
}

export interface DiskAnomaliesTags {
    /**
     * A Tag Filter
     */
    filters?: outputs.DiskAnomaliesTagsFilter[];
}

export interface DiskAnomaliesTagsFilter {
    /**
     * The origin of the tag, such as AWS or Cloud Foundry. Custom tags use the `CONTEXTLESS` value
     */
    context: string;
    /**
     * The key of the tag. Custom tags have the tag value here
     */
    key: string;
    /**
     * The value of the tag. Not applicable to custom tags
     */
    value?: string;
}

export interface DiskAnomaliesV2Disk {
    /**
     * no documentation available
     */
    diskLowInodesDetection: outputs.DiskAnomaliesV2DiskDiskLowInodesDetection;
    /**
     * no documentation available
     */
    diskLowSpaceDetection: outputs.DiskAnomaliesV2DiskDiskLowSpaceDetection;
    /**
     * no documentation available
     */
    diskSlowWritesAndReadsDetection: outputs.DiskAnomaliesV2DiskDiskSlowWritesAndReadsDetection;
}

export interface DiskAnomaliesV2DiskDiskLowInodesDetection {
    /**
     * no documentation available
     */
    customThresholds?: outputs.DiskAnomaliesV2DiskDiskLowInodesDetectionCustomThresholds;
    /**
     * Detection mode for low inodes number available
     */
    detectionMode?: string;
    /**
     * Detect low inodes number available
     */
    enabled: boolean;
}

export interface DiskAnomaliesV2DiskDiskLowInodesDetectionCustomThresholds {
    /**
     * Alert if the percentage of available inodes is lower than this threshold in 3 out of 5 samples
     */
    freeInodesPercentage: number;
}

export interface DiskAnomaliesV2DiskDiskLowSpaceDetection {
    /**
     * no documentation available
     */
    customThresholds?: outputs.DiskAnomaliesV2DiskDiskLowSpaceDetectionCustomThresholds;
    /**
     * Detection mode for low disk space
     */
    detectionMode?: string;
    /**
     * Detect low disk space
     */
    enabled: boolean;
}

export interface DiskAnomaliesV2DiskDiskLowSpaceDetectionCustomThresholds {
    /**
     * Alert if free disk space is lower than this percentage in 3 out of 5 samples
     */
    freeSpacePercentage: number;
}

export interface DiskAnomaliesV2DiskDiskSlowWritesAndReadsDetection {
    /**
     * no documentation available
     */
    customThresholds?: outputs.DiskAnomaliesV2DiskDiskSlowWritesAndReadsDetectionCustomThresholds;
    /**
     * Detection mode for slow running disks
     */
    detectionMode?: string;
    /**
     * Detect slow-running disks
     */
    enabled: boolean;
}

export interface DiskAnomaliesV2DiskDiskSlowWritesAndReadsDetectionCustomThresholds {
    /**
     * Alert if disk read time or write time is higher than this threshold in 3 out of 5 samples
     */
    writeAndReadTime: number;
}

export interface DiskAnomalyRulesDiskNameFilter {
    /**
     * Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`, `EQUALS`, `STARTS_WITH`
     */
    operator: string;
    /**
     * Matching text
     */
    value?: string;
}

export interface DiskAnomalyRulesSampleLimit {
    /**
     * .. within the last
     */
    samples: number;
    /**
     * Minimum number of violating samples
     */
    violatingSamples: number;
}

export interface DiskEdgeAnomalyDetectorsAlerts {
    alerts: outputs.DiskEdgeAnomalyDetectorsAlertsAlert[];
}

export interface DiskEdgeAnomalyDetectorsAlertsAlert {
    /**
     * no documentation available
     */
    sampleCountThresholds?: outputs.DiskEdgeAnomalyDetectorsAlertsAlertSampleCountThresholds;
    /**
     * no documentation available
     */
    sampleCountThresholdsImmediately?: outputs.DiskEdgeAnomalyDetectorsAlertsAlertSampleCountThresholdsImmediately;
    /**
     * no documentation available
     */
    thresholdMebibytes?: number;
    /**
     * no documentation available
     */
    thresholdMilliseconds?: number;
    /**
     * no documentation available
     */
    thresholdNumber?: number;
    /**
     * no documentation available
     */
    thresholdPercent?: number;
    /**
     * Possible Values: `AVAILABLE_DISK_SPACE_MEBIBYTES_BELOW`, `AVAILABLE_DISK_SPACE_PERCENT_BELOW`, `AVAILABLE_INODES_NUMBER_BELOW`, `AVAILABLE_INODES_PERCENT_BELOW`, `READ_ONLY_FILE_SYSTEM`, `READ_TIME_EXCEEDING`, `WRITE_TIME_EXCEEDING`
     */
    trigger: string;
}

export interface DiskEdgeAnomalyDetectorsAlertsAlertSampleCountThresholds {
    /**
     * The number of **10-second samples** that form the sliding evaluation window for dealerting.
     */
    dealertingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must be lower than the threshold to close an event
     */
    dealertingSamples: number;
    /**
     * The number of **10-second samples** that form the sliding evaluation window to detect violating samples.
     */
    violatingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must exceed the threshold to trigger an event
     */
    violatingSamples: number;
}

export interface DiskEdgeAnomalyDetectorsAlertsAlertSampleCountThresholdsImmediately {
    /**
     * The number of **10-second samples** that form the sliding evaluation window for dealerting.
     */
    dealertingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must be lower than the threshold to close an event
     */
    dealertingSamples: number;
    /**
     * The number of **10-second samples** that form the sliding evaluation window to detect violating samples.
     */
    violatingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must exceed the threshold to trigger an event
     */
    violatingSamples: number;
}

export interface DiskEdgeAnomalyDetectorsEventProperties {
    eventProperties: outputs.DiskEdgeAnomalyDetectorsEventPropertiesEventProperty[];
}

export interface DiskEdgeAnomalyDetectorsEventPropertiesEventProperty {
    /**
     * Type 'dt.' for key hints.
     */
    metadataKey: string;
    /**
     * no documentation available
     */
    metadataValue: string;
}

export interface DiskEdgeAnomalyDetectorsHostMetadataConditions {
    hostMetadataConditions: outputs.DiskEdgeAnomalyDetectorsHostMetadataConditionsHostMetadataCondition[];
}

export interface DiskEdgeAnomalyDetectorsHostMetadataConditionsHostMetadataCondition {
    /**
     * no documentation available
     */
    hostMetadataCondition: outputs.DiskEdgeAnomalyDetectorsHostMetadataConditionsHostMetadataConditionHostMetadataCondition;
}

export interface DiskEdgeAnomalyDetectorsHostMetadataConditionsHostMetadataConditionHostMetadataCondition {
    /**
     * When enabled, the condition requires a metadata key to exist and match the constraints; when disabled, the key is optional but must still match the constrains if it is present.
     */
    keyMustExist?: boolean;
    /**
     * This string has to match a required format.
     */
    metadataCondition: string;
    /**
     * Key
     */
    metadataKey: string;
}

export interface DiskOptionsExclusions {
    exclusions: outputs.DiskOptionsExclusionsExclusion[];
}

export interface DiskOptionsExclusionsExclusion {
    /**
     * **File system type field:** the type of the file system to be excluded from monitoring. Examples:
     *
     * * ext4
     * * ext3
     * * btrfs
     * * ext*
     *
     * ⚠️ Starting from **OneAgent 1.299+** file system types are not case sensitive! 
     *
     * The wildcard in the last example means to exclude matching file systems such as types ext4 and ext3
     */
    filesystem?: string;
    /**
     * **Disk or mount point path field:** the path to where the disk to be excluded from monitoring is mounted. Examples:
     *
     * * /mnt/my_disk
     * * /staff/emp1
     * * C:\
     * * /staff/*
     * * /disk*
     *
     *  ⚠️ Mount point paths are case sensitive! 
     *
     * The wildcard in **&#47;staff/*** means to exclude every child folder of /staff.
     *
     * The wildcard in **&#47;disk*** means to exclude every mount point starting with /disk, for example /disk1, /disk99,  /diskabc
     */
    mountpoint?: string;
    /**
     * Possible Values: `OS_TYPE_AIX`, `OS_TYPE_DARWIN`, `OS_TYPE_HPUX`, `OS_TYPE_LINUX`, `OS_TYPE_SOLARIS`, `OS_TYPE_UNKNOWN`, `OS_TYPE_WINDOWS`, `OS_TYPE_ZOS`
     */
    os: string;
}

export interface DiskSpecificAnomaliesV2DiskLowInodesDetection {
    /**
     * no documentation available
     */
    customThresholds?: outputs.DiskSpecificAnomaliesV2DiskLowInodesDetectionCustomThresholds;
    /**
     * Detection mode for low inodes number available
     */
    detectionMode?: string;
    /**
     * Detect low inodes number available
     */
    enabled: boolean;
}

export interface DiskSpecificAnomaliesV2DiskLowInodesDetectionCustomThresholds {
    /**
     * Alert if the percentage of available inodes is lower than this threshold in 3 out of 5 samples
     */
    freeInodesPercentage: number;
}

export interface DiskSpecificAnomaliesV2DiskLowSpaceDetection {
    /**
     * no documentation available
     */
    customThresholds?: outputs.DiskSpecificAnomaliesV2DiskLowSpaceDetectionCustomThresholds;
    /**
     * Detection mode for low disk space
     */
    detectionMode?: string;
    /**
     * Detect low disk space
     */
    enabled: boolean;
}

export interface DiskSpecificAnomaliesV2DiskLowSpaceDetectionCustomThresholds {
    /**
     * Alert if free disk space is lower than this percentage in 3 out of 5 samples
     */
    freeSpacePercentage: number;
}

export interface DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetection {
    /**
     * no documentation available
     */
    customThresholds?: outputs.DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetectionCustomThresholds;
    /**
     * Detection mode for slow running disks
     */
    detectionMode?: string;
    /**
     * Detect slow-running disks
     */
    enabled: boolean;
}

export interface DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetectionCustomThresholds {
    /**
     * Alert if disk read time or write time is higher than this threshold in 3 out of 5 samples
     */
    writeAndReadTime: number;
}

export interface EndpointDetectionRulesRule {
    /**
     * Limits the scope of the endpoint detection rule using [DQL matcher](https://dt-url.net/l603wby) conditions on span and resource attributes.. A rule is applied only if the condition matches, otherwise the ruleset evaluation continues.
     */
    condition?: string;
    /**
     * no documentation available
     */
    description?: string;
    /**
     * Specify attribute placeholders in curly braces, e.g. {http.route} or {rpc.method}.. Attribute value placeholders should be specified in curly braces, e.g. {http.route}, {rpc.method}. All attributes used in the placeholder are required for the rule to apply. If any of them is missing, the rule will not be applied and ruleset evaluation continues.
     *
     * If the resolved endpoint name on a given span is empty, the request will be ignored.
     */
    endpointNameTemplate?: string;
    /**
     * Possible Values: `DETECT_REQUEST_ON_ENDPOINT`, `SUPPRESS_REQUEST`
     */
    ifConditionMatches: string;
    /**
     * Rule name
     */
    ruleName: string;
}

export interface EnvironmentQuotas {
    /**
     * Davis Data Units consumption and quota information on environment level. Not set (and not editable) if Davis data units is not enabled
     */
    ddus?: outputs.EnvironmentQuotasDdus;
    /**
     * DEM units consumption and quota information on environment level
     */
    demUnits?: outputs.EnvironmentQuotasDemUnits;
    /**
     * Host units consumption and quota information on environment level
     */
    hostUnits?: number;
    /**
     * Log Monitoring consumption and quota information on environment level. Not set (and not editable) if Log monitoring is not enabled. Not set (and not editable) if Log monitoring is migrated to Davis data on license level
     */
    logs?: outputs.EnvironmentQuotasLogs;
    /**
     * Synthetic monitors consumption and quota information on environment level. Not set (and not editable) if neither Synthetic nor DEM units is enabled
     */
    synthetic?: outputs.EnvironmentQuotasSynthetic;
    /**
     * User sessions consumption and quota information on environment level
     */
    userSessions?: outputs.EnvironmentQuotasUserSessions;
}

export interface EnvironmentQuotasDdus {
    /**
     * Annual environment quota. Not set if unlimited
     */
    annual?: number;
    /**
     * Monthly environment quota. Not set if unlimited
     */
    monthly?: number;
}

export interface EnvironmentQuotasDemUnits {
    /**
     * Annual environment quota. Not set if unlimited
     */
    annual?: number;
    /**
     * Monthly environment quota. Not set if unlimited
     */
    monthly?: number;
}

export interface EnvironmentQuotasLogs {
    /**
     * Annual environment quota. Not set if unlimited
     */
    annual?: number;
    /**
     * Monthly environment quota. Not set if unlimited
     */
    monthly?: number;
}

export interface EnvironmentQuotasSynthetic {
    /**
     * Annual environment quota. Not set if unlimited
     */
    annual?: number;
    /**
     * Monthly environment quota. Not set if unlimited
     */
    monthly?: number;
}

export interface EnvironmentQuotasUserSessions {
    /**
     * Annual total User sessions environment quota. Not set if unlimited
     */
    annual?: number;
    /**
     * Monthly total User sessions environment quota. Not set if unlimited
     */
    monthly?: number;
}

export interface EnvironmentStorage {
    limits?: outputs.EnvironmentStorageLimits;
    retention?: outputs.EnvironmentStorageRetention;
    /**
     * Maximum number of newly monitored entry point PurePaths captured per process/minute on environment level. Can be set to any value from 100 to 100000
     */
    transactions: number;
    /**
     * Maximum number of user actions generated per minute on environment level. Can be set to any value from 1 to 2147483646 or left unlimited by omitting this property
     */
    userActions?: number;
}

export interface EnvironmentStorageLimits {
    /**
     * Log monitoring storage usage and limit information on environment level in bytes. Not editable when Log monitoring is not allowed by license or not configured on cluster level. 0 for unlimited.
     */
    logs?: number;
    /**
     * Session replay storage usage and limit information on environment level in bytes. 0 for unlimited.
     */
    sessionReplay?: number;
    /**
     * Session replay storage usage and limit information on environment level in bytes. 0 for unlimited.
     */
    symbolFiles?: number;
    /**
     * Transaction storage usage and limit information on environment level in bytes. 0 for unlimited.
     */
    transactions?: number;
}

export interface EnvironmentStorageRetention {
    /**
     * Log monitoring retention settings on environment level in days. Not editable when Log monitoring is not allowed by license or not configured on cluster level. Can be set to any value from 5 to 90 days
     */
    logs?: number;
    /**
     * Real user monitoring retention settings on environment level in days. Can be set to any value from 1 to 35 days
     */
    rum: number;
    /**
     * Service code level retention settings on environment level in days. Service code level retention time can't be greater than service request level retention time and both can't exceed one year
     */
    serviceCodeLevel: number;
    /**
     * Service request level retention settings on environment level in days. Service code level retention time can't be greater than service request level retention time and both can't exceed one year
     */
    serviceRequestLevel: number;
    /**
     * Session replay retention settings on environment level in days. Can be set to any value from 1 to 35 days
     */
    sessionReplay: number;
    /**
     * Synthetic monitoring retention settings on environment level in days. Can be set to any value from 1 to 35 days
     */
    synthetic: number;
}

export interface FailureDetectionParametersBrokenLinks {
    /**
     * If your application relies on other hosts at other domains, add the associated domain names here. Once configured, Dynatrace will consider 404s thrown by hosts at these domains to be service failures related to your application.
     */
    brokenLinkDomains?: string[];
    /**
     * Consider 404 HTTP response codes as failures
     */
    http404NotFoundFailures: boolean;
}

export interface FailureDetectionParametersExceptionRules {
    /**
     * Some custom error situations are only detectable via a return value or other means. To support such cases, [define a request attribute](https://dt-url.net/ys5k0p4y) that captures the required data. Then define a custom error rule that determines if the request has failed based on the value of the request attribute.
     */
    customErrorRules?: outputs.FailureDetectionParametersExceptionRulesCustomErrorRules;
    /**
     * There may be situations where your application code handles exceptions gracefully in a manner that these failures aren't detected by Dynatrace. Use this setting to define specific gracefully-handled exceptions that should be treated as service failures.
     */
    customHandledExceptions?: outputs.FailureDetectionParametersExceptionRulesCustomHandledExceptions;
    /**
     * Ignore all exceptions
     */
    ignoreAllExceptions: boolean;
    /**
     * Ignore span failure detection
     */
    ignoreSpanFailureDetection: boolean;
    /**
     * Some exceptions that are thrown by legacy or 3rd-party code indicate a specific response, not an error. Use this setting to instruct Dynatrace to treat such exceptions as non-failed requests.. If an exception matching any of the defined patterns occurs in a request, it will not be considered as a failure. Other exceptions occurring at the same request might still mark the request as failed.
     */
    ignoredExceptions?: outputs.FailureDetectionParametersExceptionRulesIgnoredExceptions;
    /**
     * Define exceptions which indicate that a service call should not be considered as failed. E.g. an exception indicating that the client aborted the operation.. If an exception matching any of the defined patterns occurs on the entry node of the service, it will be considered successful. Compared to ignored exceptions, the request will be considered successful even if other exceptions occur in the same request.
     */
    successForcingExceptions?: outputs.FailureDetectionParametersExceptionRulesSuccessForcingExceptions;
}

export interface FailureDetectionParametersExceptionRulesCustomErrorRules {
    customErrorRules: outputs.FailureDetectionParametersExceptionRulesCustomErrorRulesCustomErrorRule[];
}

export interface FailureDetectionParametersExceptionRulesCustomErrorRulesCustomErrorRule {
    /**
     * Request attribute condition
     */
    condition: outputs.FailureDetectionParametersExceptionRulesCustomErrorRulesCustomErrorRuleCondition;
    /**
     * Request attribute
     */
    requestAttribute: string;
}

export interface FailureDetectionParametersExceptionRulesCustomErrorRulesCustomErrorRuleCondition {
    /**
     * Case sensitive
     */
    caseSensitive?: boolean;
    /**
     * Apply this comparison
     */
    compareOperationType: string;
    /**
     * Value
     */
    doubleValue?: number;
    /**
     * Value
     */
    intValue?: number;
    /**
     * Value
     */
    textValue?: string;
}

export interface FailureDetectionParametersExceptionRulesCustomHandledExceptions {
    customHandledExceptions: outputs.FailureDetectionParametersExceptionRulesCustomHandledExceptionsCustomHandledException[];
}

export interface FailureDetectionParametersExceptionRulesCustomHandledExceptionsCustomHandledException {
    /**
     * The pattern will match if it is contained within the actual class name.
     */
    classPattern?: string;
    /**
     * Optionally, define an exception message pattern. The pattern will match if the actual exception message contains the pattern.
     */
    messagePattern?: string;
}

export interface FailureDetectionParametersExceptionRulesIgnoredExceptions {
    customHandledExceptions: outputs.FailureDetectionParametersExceptionRulesIgnoredExceptionsCustomHandledException[];
}

export interface FailureDetectionParametersExceptionRulesIgnoredExceptionsCustomHandledException {
    /**
     * The pattern will match if it is contained within the actual class name.
     */
    classPattern?: string;
    /**
     * Optionally, define an exception message pattern. The pattern will match if the actual exception message contains the pattern.
     */
    messagePattern?: string;
}

export interface FailureDetectionParametersExceptionRulesSuccessForcingExceptions {
    customHandledExceptions: outputs.FailureDetectionParametersExceptionRulesSuccessForcingExceptionsCustomHandledException[];
}

export interface FailureDetectionParametersExceptionRulesSuccessForcingExceptionsCustomHandledException {
    /**
     * The pattern will match if it is contained within the actual class name.
     */
    classPattern?: string;
    /**
     * Optionally, define an exception message pattern. The pattern will match if the actual exception message contains the pattern.
     */
    messagePattern?: string;
}

export interface FailureDetectionParametersHttpResponseCodes {
    /**
     * HTTP response codes which indicate client side errors
     */
    clientSideErrors: string;
    /**
     * Treat missing HTTP response code as client side error
     */
    failOnMissingResponseCodeClientSide: boolean;
    /**
     * Treat missing HTTP response code as server side errors
     */
    failOnMissingResponseCodeServerSide: boolean;
    /**
     * HTTP response codes which indicate an error on the server side
     */
    serverSideErrors: string;
}

export interface FailureDetectionRuleSetsRuleset {
    /**
     * Limits the scope of the failure detection ruleset using [DQL matcher](https://dt-url.net/l603wby) conditions on span and resource attributes.. A ruleset is applied only if the condition matches, otherwise the evaluation continues.
     *
     * If empty, the condition will always match.
     */
    condition?: string;
    /**
     * no documentation available
     */
    description?: string;
    /**
     * Define failure reasons based on span and request attributes.. Failure detection result: `reason="customRule"`, `verdict="failure"`, `customRuleName`
     */
    failOnCustomRules?: outputs.FailureDetectionRuleSetsRulesetFailOnCustomRules;
    /**
     * Evaluated expression: `iAny(`span.events`[][`span_event.name`] == "exception" and`span.events`[][`exception.escaped`] != false)`
     */
    failOnExceptions: outputs.FailureDetectionRuleSetsRulesetFailOnExceptions;
    /**
     * Evaluated attribute: `rpc.grpc.status_code`
     *
     * Failure detection result: `reason="grpcCode"`, `verdict="failure"`
     */
    failOnGrpcStatusCodes: outputs.FailureDetectionRuleSetsRulesetFailOnGrpcStatusCodes;
    /**
     * Evaluated attribute: `http.response.status_code`
     *
     * Failure detection result: `reason="httpCode"`, `verdict="failure"`
     */
    failOnHttpResponseStatusCodes: outputs.FailureDetectionRuleSetsRulesetFailOnHttpResponseStatusCodes;
    /**
     * Evaluated attribute: `span.status_code`
     *
     * Failure detection result: `reason="spanStatus"`, `verdict="failure"`
     */
    failOnSpanStatusError: outputs.FailureDetectionRuleSetsRulesetFailOnSpanStatusError;
    /**
     * no documentation available
     */
    overrides: outputs.FailureDetectionRuleSetsRulesetOverrides;
    /**
     * Ruleset name
     */
    rulesetName: string;
}

export interface FailureDetectionRuleSetsRulesetFailOnCustomRules {
    failOnCustomRules: outputs.FailureDetectionRuleSetsRulesetFailOnCustomRulesFailOnCustomRule[];
}

export interface FailureDetectionRuleSetsRulesetFailOnCustomRulesFailOnCustomRule {
    /**
     * Custom rule based on span attributes using [DQL matcher](https://dt-url.net/l603wby).
     */
    dqlCondition: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Rule name
     */
    ruleName: string;
}

export interface FailureDetectionRuleSetsRulesetFailOnExceptions {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * no documentation available
     */
    ignoredExceptions?: outputs.FailureDetectionRuleSetsRulesetFailOnExceptionsIgnoredExceptions;
}

export interface FailureDetectionRuleSetsRulesetFailOnExceptionsIgnoredExceptions {
    ignoredExceptions: outputs.FailureDetectionRuleSetsRulesetFailOnExceptionsIgnoredExceptionsIgnoredException[];
}

export interface FailureDetectionRuleSetsRulesetFailOnExceptionsIgnoredExceptionsIgnoredException {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Evaluated attribute: `span.events[][exception.message]`
     */
    message?: string;
    /**
     * Evaluated attribute: `span.events[][exception.type]`
     */
    type?: string;
}

export interface FailureDetectionRuleSetsRulesetFailOnGrpcStatusCodes {
    /**
     * Status codes which indicate a failure on the server side
     */
    statusCodes: string;
}

export interface FailureDetectionRuleSetsRulesetFailOnHttpResponseStatusCodes {
    /**
     * Status codes which indicate a failure on the server side
     */
    statusCodes: string;
}

export interface FailureDetectionRuleSetsRulesetFailOnSpanStatusError {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface FailureDetectionRuleSetsRulesetOverrides {
    /**
     * Define escaped exceptions that should force success.. Evaluated expression: `iAny(`span.events`[][`span_event.name`] == "exception" and `span.events`[][`exception.escaped`] != false)`
     *
     * Failure detection result: `reason="exception"`, `verdict="success"`, `exceptionIds`
     */
    forceSuccessOnExceptions?: outputs.FailureDetectionRuleSetsRulesetOverridesForceSuccessOnExceptions;
    /**
     * Evaluated attribute: `rpc.grpc.status_code`
     *
     * Failure detection result: `reason="grpcCode"`, `verdict="success"`
     */
    forceSuccessOnGrpcResponseStatusCodes?: outputs.FailureDetectionRuleSetsRulesetOverridesForceSuccessOnGrpcResponseStatusCodes;
    /**
     * Evaluated attribute: `http.response.status_code`
     *
     * Failure detection result: `reason="httpCode"`, `verdict="success"`
     */
    forceSuccessOnHttpResponseStatusCodes?: outputs.FailureDetectionRuleSetsRulesetOverridesForceSuccessOnHttpResponseStatusCodes;
    /**
     * Evaluated attribute: `span.status_code`
     */
    forceSuccessOnSpanStatusOk: outputs.FailureDetectionRuleSetsRulesetOverridesForceSuccessOnSpanStatusOk;
    /**
     * Override failures based on span and request attribute conditions.. Failure detection result: `reason="customRule"`, `verdict="success"`, `customRuleName`
     */
    forceSuccessWithCustomRules?: outputs.FailureDetectionRuleSetsRulesetOverridesForceSuccessWithCustomRules;
}

export interface FailureDetectionRuleSetsRulesetOverridesForceSuccessOnExceptions {
    ignoredExceptions: outputs.FailureDetectionRuleSetsRulesetOverridesForceSuccessOnExceptionsIgnoredException[];
}

export interface FailureDetectionRuleSetsRulesetOverridesForceSuccessOnExceptionsIgnoredException {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Evaluated attribute: `span.events[][exception.message]`
     */
    message?: string;
    /**
     * Evaluated attribute: `span.events[][exception.type]`
     */
    type?: string;
}

export interface FailureDetectionRuleSetsRulesetOverridesForceSuccessOnGrpcResponseStatusCodes {
    /**
     * Status codes which force success on the server side
     */
    statusCodes?: string;
}

export interface FailureDetectionRuleSetsRulesetOverridesForceSuccessOnHttpResponseStatusCodes {
    /**
     * Status codes which force success on the server side
     */
    statusCodes?: string;
}

export interface FailureDetectionRuleSetsRulesetOverridesForceSuccessOnSpanStatusOk {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface FailureDetectionRuleSetsRulesetOverridesForceSuccessWithCustomRules {
    failOnCustomRules: outputs.FailureDetectionRuleSetsRulesetOverridesForceSuccessWithCustomRulesFailOnCustomRule[];
}

export interface FailureDetectionRuleSetsRulesetOverridesForceSuccessWithCustomRulesFailOnCustomRule {
    /**
     * Custom rule based on span attributes using [DQL matcher](https://dt-url.net/l603wby).
     */
    dqlCondition: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Rule name
     */
    ruleName: string;
}

export interface FailureDetectionRulesConditions {
    conditions: outputs.FailureDetectionRulesConditionsCondition[];
}

export interface FailureDetectionRulesConditionsCondition {
    /**
     * Possible Values: `PG_NAME`, `PG_TAG`, `SERVICE_MANAGEMENT_ZONE`, `SERVICE_NAME`, `SERVICE_TAG`, `SERVICE_TYPE`
     */
    attribute: string;
    /**
     * Condition to check the attribute against
     */
    predicate: outputs.FailureDetectionRulesConditionsConditionPredicate;
}

export interface FailureDetectionRulesConditionsConditionPredicate {
    /**
     * Case sensitive
     */
    caseSensitive?: boolean;
    /**
     * Management zones
     */
    managementZones?: string[];
    /**
     * Predicate type
     */
    predicateType: string;
    /**
     * Service types
     */
    serviceTypes?: string[];
    /**
     * Tag keys
     */
    tagKeys?: string[];
    /**
     * Tags (exact match)
     */
    tags?: string[];
    /**
     * Names
     */
    textValues?: string[];
}

export interface GenericRelationshipsSources {
    sources: outputs.GenericRelationshipsSourcesSource[];
}

export interface GenericRelationshipsSourcesSource {
    /**
     * Specify a filter that needs to match in order for the extraction to happen.. Two different filters are supported: `$eq(value)` will ensure that the source matches exactly 'value', while `$prefix(value)` will ensure that the source begins with exactly 'value'.
     * If your value contains the characters '(', ')' or '~', you need to escape them by adding a '~' in front of them.
     */
    condition?: string;
    /**
     * Specify all properties which should be compared. If all mapping rules match a relationship between entities will be created.
     */
    mappingRules?: outputs.GenericRelationshipsSourcesSourceMappingRules;
    /**
     * Possible Values: `BusinessEvents`, `Entities`, `Events`, `Logs`, `Metrics`, `Spans`, `Topology`
     */
    sourceType: string;
}

export interface GenericRelationshipsSourcesSourceMappingRules {
    mappingRules: outputs.GenericRelationshipsSourcesSourceMappingRulesMappingRule[];
}

export interface GenericRelationshipsSourcesSourceMappingRulesMappingRule {
    /**
     * The case-sensitive name of a property of the destination type.
     */
    destinationProperty: string;
    /**
     * Possible Values: `Leavetextas_is`, `Tolowercase`, `Touppercase`
     */
    destinationTransformation: string;
    /**
     * The case-sensitive name of a property of the source type.
     */
    sourceProperty: string;
    /**
     * Possible Values: `Leavetextas_is`, `Tolowercase`, `Touppercase`
     */
    sourceTransformation: string;
}

export interface GenericTypesRules {
    rules: outputs.GenericTypesRulesRule[];
}

export interface GenericTypesRulesRule {
    /**
     * All attribute extraction rules will be applied and found attributes will be added to the extracted type.
     */
    attributes?: outputs.GenericTypesRulesRuleAttributes;
    /**
     * Define a pattern which is used to set the icon attribute of the entity. The extracted values must reference barista icon ids. You may define placeholders referencing data source dimensions.
     */
    iconPattern?: string;
    /**
     * ID patterns are comprised of static text and placeholders referring to dimensions in the ingest data. An ID pattern **must** contain at least one placeholder to ensure that different entities will be created.. Take care that the pattern results in the same ID for the same entity. For example, using timestamp or counter-like dimensions as part of the ID would lead to the creation of new entities for each ingest data and is strongly discouraged!
     */
    idPattern: string;
    /**
     * Define a pattern which is used to set the name attribute of the entity. You may define placeholders referencing data source dimensions.
     */
    instanceNamePattern?: string;
    /**
     * In addition to the dimensions already referred to in the ID pattern, you may specify additional dimensions which must be present in order to evaluate this rule.
     */
    requiredDimensions?: outputs.GenericTypesRulesRuleRequiredDimensions;
    /**
     * If you want to extract multiple entities of the same type from a single ingest line you need to define multiple rules with different roles.
     */
    role?: string;
    /**
     * Specify all sources which should be evaluated for this rule. A rule is evaluated if any of the specified source filters match.
     */
    sources: outputs.GenericTypesRulesRuleSources;
}

export interface GenericTypesRulesRuleAttributes {
    attributes: outputs.GenericTypesRulesRuleAttributesAttribute[];
}

export interface GenericTypesRulesRuleAttributesAttribute {
    /**
     * The human readable attribute name for this extraction rule. Leave blank to use the key as the display name.
     */
    displayName?: string;
    /**
     * The attribute key is the unique name of the attribute.
     */
    key: string;
    /**
     * Pattern for specifying the value for the extracted attribute. Can be a static value, placeholders or a combination of both.
     */
    pattern: string;
}

export interface GenericTypesRulesRuleRequiredDimensions {
    requiredDimensions: outputs.GenericTypesRulesRuleRequiredDimensionsRequiredDimension[];
}

export interface GenericTypesRulesRuleRequiredDimensionsRequiredDimension {
    /**
     * A dimension key which needs to exist in the ingest data to match this filter.
     */
    key: string;
    /**
     * A dimension value pattern which needs to exist in the ingest data to match this filter.
     */
    valuePattern?: string;
}

export interface GenericTypesRulesRuleSources {
    sources: outputs.GenericTypesRulesRuleSourcesSource[];
}

export interface GenericTypesRulesRuleSourcesSource {
    /**
     * Specify a filter that needs to match in order for the extraction to happen.. Three different filters are supported: `$eq(value)` will ensure that the source matches exactly 'value', `$prefix(value)` will ensure that the source begins with exactly 'value', '$exists()' will ensure that any source with matching dimension filter exists.
     * If your value contains the characters '(', ')' or '~', you need to escape them by adding a '~' in front of them.
     */
    condition?: string;
    /**
     * Possible Values: `BusinessEvents`, `Entities`, `Events`, `Logs`, `Metrics`, `Spans`, `Topology`
     */
    sourceType: string;
}

export interface GetAlertingProfilesValue {
    /**
     * The ID of the Alerting Profile when referred to as a Settings 2.0 resource (e.g. from within `dynatrace.SlackNotification`)
     */
    id: string;
    /**
     * The ID of the Alerting Profile when referred to as a Configuration API resource (e.g. from within `dynatrace.Notification`)
     */
    legacyId: string;
    /**
     * The ID of the management zone to which the alerting profile applies (Settings 2.0)
     */
    managementZoneId: string;
    /**
     * The ID of the management zone to which the alerting profile applies (Configuration API)
     */
    managementZoneLegacyId: string;
    /**
     * The name of the Alerting Profile
     */
    name: string;
}

export interface GetApiTokensApiToken {
    /**
     * Token creation date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z')
     */
    creationDate: string;
    /**
     * The token is enabled (true) or disabled (false), default disabled (false).
     */
    enabled?: boolean;
    /**
     * The expiration date of the token.
     */
    expirationDate?: string;
    /**
     * Token last used date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z')
     */
    lastUsedDate: string;
    /**
     * Token last used IP address.
     */
    lastUsedIpAddress: string;
    /**
     * Token last modified date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z').
     */
    modifiedDate: string;
    /**
     * The name of the token.
     */
    name: string;
    /**
     * The owner of the token
     */
    owner: string;
    /**
     * The token is a personal access token (true) or an API token (false).
     */
    personalAccessToken?: boolean;
    /**
     * A list of the scopes to be assigned to the token.
     */
    scopes: string[];
    /**
     * The secret of the token.
     */
    token: string;
}

export interface GetApplicationDetectionRulesValue {
    /**
     * Application ID
     */
    applicationId: string;
    /**
     * Application Detection Rule ID
     */
    id: string;
    /**
     * Matcher
     */
    matcher: string;
    /**
     * Pattern
     */
    pattern: string;
}

export interface GetDocumentsValue {
    /**
     * The unique identifier of the document.
     */
    id: string;
    /**
     * The name of the document.
     */
    name: string;
    /**
     * The owner of the document. This could be a user or a group that has ownership rights over the document.
     */
    owner: string;
    /**
     * The type of the document. This could be a specific format or category the document belongs to.
     */
    type: string;
}

export interface GetEntitiesEntity {
    /**
     * The name of the entity, displayed in the UI.
     */
    displayName?: string;
    /**
     * The ID of the entity.
     */
    entityId?: string;
    /**
     * The timestamp at which the entity was last seen, in UTC milliseconds.
     */
    lastSeenTms?: number;
    /**
     * Properties defining the entity.
     */
    properties: {[key: string]: string};
    /**
     * A set of tags assigned to the entity.
     */
    tags?: outputs.GetEntitiesEntityTag[];
    /**
     * The type of the entity.
     */
    type?: string;
}

export interface GetEntitiesEntityTag {
    /**
     * A tag assigned to the entity
     */
    tags?: outputs.GetEntitiesEntityTagTag[];
}

export interface GetEntitiesEntityTagTag {
    /**
     * The origin of the tag, such as AWS or Cloud Foundry. Custom tags use the `CONTEXTLESS` value
     */
    context: string;
    /**
     * The key of the tag. Custom tags have the tag value here
     */
    key: string;
    /**
     * The string representation of the tag
     */
    stringRepresentation?: string;
    /**
     * The value of the tag. Not applicable to custom tags
     */
    value?: string;
}

export interface GetGenericSettingsValue {
    localStorage: string;
    schema: string;
    scope: string;
    value: string;
}

export interface GetGeoCitiesCity {
    latitude: number;
    longitude: number;
    name: string;
}

export interface GetGeoCountriesCountry {
    code: string;
    name: string;
}

export interface GetGeoRegionsRegion {
    code: string;
    name: string;
}

export interface GetHubItemsItem {
    /**
     * The activation link for a technology
     */
    activationLink: string;
    /**
     * The unique ID used by the artifacts contained in releases
     */
    artifactId: string;
    /**
     * URL for the author's logo
     */
    authorLogo: string;
    /**
     * Name of the author of the item
     */
    authorName: string;
    /**
     * Checks if the item is compatible with the cluster version
     */
    clusterCompatible: boolean;
    /**
     * Whether or not the item is planned to be released soon
     */
    comingSoon: boolean;
    /**
     * Description of the item
     */
    description: string;
    /**
     * An absolute link to the documentation page of this item
     */
    documentationLink: string;
    /**
     * Whether or not the details call will contain description blocks
     */
    hasDescriptionBlocks: boolean;
    /**
     * Unique Id of the item
     */
    itemId: string;
    /**
     * The logo of the item. Can be a URL or Base64 encoded. Intended for HTML tags
     */
    logo: string;
    /**
     * An absolute link to the marketing page of this item
     */
    marketingLink: string;
    /**
     * Name of the item
     */
    name: string;
    /**
     * The reason why the item is not compatible with the cluster version
     */
    notCompatibleReason: string;
    /**
     * Grouping of items with keywords
     */
    tags: string[];
    /**
     * Represents the type of item. It can be `TECHNOLOGY`, `EXTENSION1` or `EXTENSION2`
     */
    type: string;
}

export interface GetIamPoliciesPolicy {
    /**
     * The account UUID the policy is defined for
     */
    account?: string;
    /**
     * The environment ID the policy is defined for
     */
    environment?: string;
    /**
     * `true` if this is a global policy`
     */
    global?: boolean;
    id: string;
    /**
     * The name of the policy
     */
    name: string;
    /**
     * The UUID of the policy
     */
    uuid: string;
}

export interface GetManagementZonesValue {
    /**
     * The description of the Management Zone
     */
    description: string;
    /**
     * The ID of the Management Zone when referred to as a Settings 2.0 resource (e.g. from within `dynatrace.SlackNotification`)
     */
    id: string;
    /**
     * The ID of the Management Zone when referred to as a Configuration API resource (e.g. from within `dynatrace.Notification`)
     */
    legacyId: string;
    /**
     * The name of the Management Zone
     */
    name: string;
}

export interface GetPlatformSloTemplatesTemplate {
    /**
     * ID of the SLO objective template
     */
    id: string;
    /**
     * Name of the SLO objective template
     */
    name: string;
}

export interface GetRemoteEnvironmentsRemoteEnvironment {
    /**
     * Name
     */
    name: string;
    /**
     * Possible Values: `CLUSTER`, `EXTERNAL`, `INTERNAL`
     */
    networkScope: string;
    /**
     * Provide a valid token created on the remote environment.
     */
    token: string;
    /**
     * Specify the full URI to the remote environment. Your local environment will have to be able to connect this URI on a network level.
     */
    uri: string;
}

export interface GetSyntheticLocationsLocations {
    /**
     * The cloud provider where the location is hosted.
     */
    cloudPlatform: string;
    /**
     * The unique ID of the location
     */
    entityId?: string;
    /**
     * The Dynatrace GeoLocation ID of the location
     */
    geoLocationId: string;
    /**
     * The list of IP addresses assigned to the location. 
     *
     *  Only applicable to `PUBLIC` locations
     */
    ips: string[];
    /**
     * The name of the location
     */
    name?: string;
    /**
     * The release stage of the location
     */
    stage: string;
    /**
     * The status of the location: 
     *
     * * `ENABLED`: The location is displayed as active in the UI. You can assign monitors to the location. 
     * * `DISABLED`: The location is displayed as inactive in the UI. You can't assign monitors to the location. Monitors already assigned to the location will stay there and will be executed from the location. 
     * * `HIDDEN`: The location is not displayed in the UI. You can't assign monitors to the location. You can only set location as `HIDDEN` when no monitor is assigned to it
     */
    status: string;
    /**
     * The type of the location. Supported values are `PUBLIC`, `PRIVATE` and `CLUSTER`
     */
    type?: string;
}

export interface GetSyntheticNodesNode {
    /**
     * The version of the Active Gate
     */
    activeGateVersion: string;
    /**
     * Specifies whether the Active Gate  has the Auto update option enabled
     */
    autoUpdate: boolean;
    /**
     * Specifies whether Browser Monitors are enabled or not
     */
    browserMonitors: boolean;
    /**
     * The health check status of the synthetic node
     */
    healthCheckStatus: string;
    /**
     * The hostname of a node
     */
    hostname: string;
    /**
     * The ID of a node for usage within `dynatrace.SyntheticLocation`
     */
    id: string;
    /**
     * The known IP addresses of the node
     */
    ips: string[];
    /**
     * Specifies whether the Active Gate has the One Agent routing enabled
     */
    oneAgentRouting: boolean;
    /**
     * The Active Gate's host operating system
     */
    operatingSystem: string;
    /**
     * The version of the synthetic player
     */
    playerVersion: string;
    /**
     * The status of the synthetic node
     */
    status: string;
    /**
     * The version of a node
     */
    version: string;
}

export interface GrailMetricsAllowlistAllowRules {
    allowRules: outputs.GrailMetricsAllowlistAllowRulesAllowRule[];
}

export interface GrailMetricsAllowlistAllowRulesAllowRule {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `CONTAINS`, `EQUALS`, `STARTSWITH`
     */
    pattern: string;
}

export interface HostAnomaliesConnections {
    /**
     * The detection is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Alert (`true`) on graceful host shutdowns
     */
    enabledOnGracefulShutdowns: boolean;
}

export interface HostAnomaliesCpu {
    /**
     * The detection is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Custom thresholds for high CPU saturation. If not set then the automatic mode is used
     */
    thresholds?: outputs.HostAnomaliesCpuThresholds;
}

export interface HostAnomaliesCpuThresholds {
    /**
     * Alert if CPU usage is higher than *X*% in 3 out of 5 samples
     */
    saturation: number;
}

export interface HostAnomaliesDisks {
    /**
     * Configuration of low disk inodes number detection
     */
    inodes?: outputs.HostAnomaliesDisksInodes;
    /**
     * Configuration of low disk space detection
     */
    space?: outputs.HostAnomaliesDisksSpace;
    /**
     * Configuration of slow running disks detection
     */
    speed?: outputs.HostAnomaliesDisksSpeed;
}

export interface HostAnomaliesDisksInodes {
    /**
     * The detection is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Custom thresholds for low disk inodes number. If not set, automatic mode is used
     */
    thresholds?: outputs.HostAnomaliesDisksInodesThresholds;
}

export interface HostAnomaliesDisksInodesThresholds {
    /**
     * Alert if percentage of available inodes is lower than *X*% in 3 out of 5 samples
     */
    percentage: number;
}

export interface HostAnomaliesDisksSpace {
    /**
     * The detection is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Custom thresholds for low disk space. If not set, automatic mode is used
     */
    thresholds?: outputs.HostAnomaliesDisksSpaceThresholds;
}

export interface HostAnomaliesDisksSpaceThresholds {
    /**
     * Alert if free disk space is lower than *X*% in 3 out of 5 samples
     */
    percentage: number;
}

export interface HostAnomaliesDisksSpeed {
    /**
     * The detection is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Custom thresholds for slow running disks. If not set, the automatic mode is used
     */
    thresholds?: outputs.HostAnomaliesDisksSpeedThresholds;
}

export interface HostAnomaliesDisksSpeedThresholds {
    /**
     * Alert if disk read/write time is higher than *X* milliseconds in 3 out of 5 samples
     */
    writeAndReadTime: number;
}

export interface HostAnomaliesGc {
    /**
     * The detection is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Custom thresholds for high GC activity. If not set, automatic mode is used.   Meeting **any** of these conditions triggers an alert
     */
    thresholds?: outputs.HostAnomaliesGcThresholds;
}

export interface HostAnomaliesGcThresholds {
    /**
     * GC suspension is higher than *X*% in 3 out of 5 samples
     */
    suspensionPercentage: number;
    /**
     * GC time is higher than *X*% in 3 out of 5 samples
     */
    timePercentage: number;
}

export interface HostAnomaliesJava {
    /**
     * Configuration of Java out of memory problems detection
     */
    outOfMemory?: outputs.HostAnomaliesJavaOutOfMemory;
    /**
     * Configuration of Java out of threads problems detection
     */
    outOfThreads?: outputs.HostAnomaliesJavaOutOfThreads;
}

export interface HostAnomaliesJavaOutOfMemory {
    /**
     * The detection is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Custom thresholds for Java out of memory. If not set, automatic mode is used
     */
    thresholds?: outputs.HostAnomaliesJavaOutOfMemoryThresholds;
}

export interface HostAnomaliesJavaOutOfMemoryThresholds {
    /**
     * Alert if the number of Java out of memory exceptions is *X* per minute or higher
     */
    exceptionCount: number;
}

export interface HostAnomaliesJavaOutOfThreads {
    /**
     * The detection is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Custom thresholds for Java out of threads detection. If not set, automatic mode is used
     */
    thresholds?: outputs.HostAnomaliesJavaOutOfThreadsThresholds;
}

export interface HostAnomaliesJavaOutOfThreadsThresholds {
    /**
     * Alert if the number of Java out of threads exceptions is *X* per minute or higher
     */
    exceptionCount: number;
}

export interface HostAnomaliesMemory {
    /**
     * The detection is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Custom thresholds for high memory usage. If not set then the automatic mode is used. **Both** conditions must be met to trigger an alert
     */
    thresholds?: outputs.HostAnomaliesMemoryThresholds;
}

export interface HostAnomaliesMemoryThresholds {
    /**
     * Custom thresholds for Linux
     */
    linux: outputs.HostAnomaliesMemoryThresholdsLinux;
    /**
     * Custom thresholds for Windows
     */
    windows: outputs.HostAnomaliesMemoryThresholdsWindows;
}

export interface HostAnomaliesMemoryThresholdsLinux {
    /**
     * Memory page fault rate is higher than *X* faults per second
     */
    pageFaults: number;
    /**
     * Memory usage is higher than *X*%
     */
    usage: number;
}

export interface HostAnomaliesMemoryThresholdsWindows {
    /**
     * Memory page fault rate is higher than *X* faults per second
     */
    pageFaults: number;
    /**
     * Memory usage is higher than *X*%
     */
    usage: number;
}

export interface HostAnomaliesNetwork {
    /**
     * Configuration of TCP connectivity problems detection
     */
    connectivity?: outputs.HostAnomaliesNetworkConnectivity;
    /**
     * Configuration of high number of dropped packets detection
     */
    droppedPackets?: outputs.HostAnomaliesNetworkDroppedPackets;
    /**
     * Configuration of high number of network errors detection
     */
    errors?: outputs.HostAnomaliesNetworkErrors;
    /**
     * Configuration of high retransmission rate detection
     */
    retransmission?: outputs.HostAnomaliesNetworkRetransmission;
    /**
     * Configuration of high network utilization detection
     */
    utilization?: outputs.HostAnomaliesNetworkUtilization;
}

export interface HostAnomaliesNetworkConnectivity {
    /**
     * The detection is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Custom thresholds for TCP connection problems. If not set, automatic mode is used.   **All** of these conditions must be met to trigger an alert
     */
    thresholds?: outputs.HostAnomaliesNetworkConnectivityThresholds;
}

export interface HostAnomaliesNetworkConnectivityThresholds {
    /**
     * Number of failed connections is higher than *X* connections per minute in 3 out of 5 samples
     */
    failedConnections: number;
    /**
     * Percentage of new connection failures is higher than *X*% in 3 out of 5 samples
     */
    newConnectionFailures: number;
}

export interface HostAnomaliesNetworkDroppedPackets {
    /**
     * The detection is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Custom thresholds for dropped packets. If not set, automatic mode is used.   **All** of these conditions must be met to trigger an alert
     */
    thresholds?: outputs.HostAnomaliesNetworkDroppedPacketsThresholds;
}

export interface HostAnomaliesNetworkDroppedPacketsThresholds {
    /**
     * Receive/transmit dropped packet percentage is higher than *X*% in 3 out of 5 samples
     */
    droppedPackets: number;
    /**
     * Total receive/transmit packets rate is higher than *X* packets per second in 3 out of 5 samples
     */
    totalPacketsRate: number;
}

export interface HostAnomaliesNetworkErrors {
    /**
     * The detection is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Custom thresholds for network errors. If not set, automatic mode is used.   **All** of these conditions must be met to trigger an alert
     */
    thresholds?: outputs.HostAnomaliesNetworkErrorsThresholds;
}

export interface HostAnomaliesNetworkErrorsThresholds {
    /**
     * Receive/transmit error packet percentage is higher than *X*% in 3 out of 5 samples
     */
    errorsPercentage: number;
    /**
     * Total receive/transmit packets rate is higher than *X* packets per second in 3 out of 5 samples
     */
    totalPacketsRate: number;
}

export interface HostAnomaliesNetworkRetransmission {
    /**
     * The detection is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Custom thresholds for high retransmission rate. If not set, automatic mode is used.   **All** of these conditions must be met to trigger an alert
     */
    thresholds?: outputs.HostAnomaliesNetworkRetransmissionThresholds;
}

export interface HostAnomaliesNetworkRetransmissionThresholds {
    /**
     * Retransmission rate is higher than *X*% in 3 out of 5 samples
     */
    retransmissionRate: number;
    /**
     * Number of retransmitted packets is higher than *X* packets per minute in 3 out of 5 samples
     */
    retransmittedPackets: number;
}

export interface HostAnomaliesNetworkUtilization {
    /**
     * The detection is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Custom thresholds for high network utilization. If not set, automatic mode is used
     */
    thresholds?: outputs.HostAnomaliesNetworkUtilizationThresholds;
}

export interface HostAnomaliesNetworkUtilizationThresholds {
    /**
     * Alert if sent/received traffic utilization is higher than *X*% in 3 out of 5 samples
     */
    utilization: number;
}

export interface HostAnomaliesV2Host {
    /**
     * no documentation available
     */
    connectionLostDetection: outputs.HostAnomaliesV2HostConnectionLostDetection;
    /**
     * no documentation available
     */
    highCpuSaturationDetection: outputs.HostAnomaliesV2HostHighCpuSaturationDetection;
    /**
     * no documentation available
     */
    highGcActivityDetection: outputs.HostAnomaliesV2HostHighGcActivityDetection;
    /**
     * no documentation available
     */
    highMemoryDetection: outputs.HostAnomaliesV2HostHighMemoryDetection;
    /**
     * no documentation available
     */
    highSystemLoadDetection: outputs.HostAnomaliesV2HostHighSystemLoadDetection;
    /**
     * no documentation available
     */
    outOfMemoryDetection: outputs.HostAnomaliesV2HostOutOfMemoryDetection;
    /**
     * no documentation available
     */
    outOfThreadsDetection: outputs.HostAnomaliesV2HostOutOfThreadsDetection;
}

export interface HostAnomaliesV2HostConnectionLostDetection {
    /**
     * Detect host or monitoring connection lost problems
     */
    enabled: boolean;
    /**
     * Graceful host shutdowns. Possible values: `DONT_ALERT_ON_GRACEFUL_SHUTDOWN`, `ALERT_ON_GRACEFUL_SHUTDOWN`
     */
    onGracefulShutdowns?: string;
}

export interface HostAnomaliesV2HostHighCpuSaturationDetection {
    /**
     * no documentation available
     */
    customThresholds?: outputs.HostAnomaliesV2HostHighCpuSaturationDetectionCustomThresholds;
    /**
     * Detection mode for CPU saturation
     */
    detectionMode?: string;
    /**
     * Detect CPU saturation on host
     */
    enabled: boolean;
}

export interface HostAnomaliesV2HostHighCpuSaturationDetectionCustomThresholds {
    /**
     * Alert if the CPU usage is higher than this threshold for the defined amount of samples
     */
    cpuSaturation: number;
    /**
     * no documentation available
     */
    eventThresholds: outputs.HostAnomaliesV2HostHighCpuSaturationDetectionCustomThresholdsEventThresholds;
}

export interface HostAnomaliesV2HostHighCpuSaturationDetectionCustomThresholdsEventThresholds {
    /**
     * The number of **10-second samples** that form the sliding evaluation window for dealerting.
     */
    dealertingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must be lower the threshold to close an event
     */
    dealertingSamples: number;
    /**
     * The number of **10-second samples** that form the sliding evaluation window to detect violating samples.
     */
    violatingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must exceed the threshold to trigger an event
     */
    violatingSamples: number;
}

export interface HostAnomaliesV2HostHighGcActivityDetection {
    /**
     * Alert if the GC time **or** the GC suspension is exceeded
     */
    customThresholds?: outputs.HostAnomaliesV2HostHighGcActivityDetectionCustomThresholds;
    /**
     * Detection mode for high GC activity
     */
    detectionMode?: string;
    /**
     * You may also configure high GC activity alerting for .NET processes on [extensions events page](https://www.terraform.io/#settings/anomalydetection/extensionevents).
     */
    enabled: boolean;
}

export interface HostAnomaliesV2HostHighGcActivityDetectionCustomThresholds {
    /**
     * no documentation available
     */
    eventThresholds: outputs.HostAnomaliesV2HostHighGcActivityDetectionCustomThresholdsEventThresholds;
    /**
     * Alert if the GC suspension is higher than this threshold
     */
    gcSuspensionPercentage: number;
    /**
     * Alert if GC time is higher than this threshold
     */
    gcTimePercentage: number;
}

export interface HostAnomaliesV2HostHighGcActivityDetectionCustomThresholdsEventThresholds {
    /**
     * The number of **10-second samples** that form the sliding evaluation window for dealerting.
     */
    dealertingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must be lower the threshold to close an event
     */
    dealertingSamples: number;
    /**
     * The number of **10-second samples** that form the sliding evaluation window to detect violating samples.
     */
    violatingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must exceed the threshold to trigger an event
     */
    violatingSamples: number;
}

export interface HostAnomaliesV2HostHighMemoryDetection {
    /**
     * Alert if **both** the memory usage and the memory page fault rate thresholds are exceeded on Windows or on Unix systems
     */
    customThresholds?: outputs.HostAnomaliesV2HostHighMemoryDetectionCustomThresholds;
    /**
     * Detection mode for high memory usage
     */
    detectionMode?: string;
    /**
     * Detect high memory usage on host
     */
    enabled: boolean;
}

export interface HostAnomaliesV2HostHighMemoryDetectionCustomThresholds {
    /**
     * no documentation available
     */
    eventThresholds: outputs.HostAnomaliesV2HostHighMemoryDetectionCustomThresholdsEventThresholds;
    /**
     * Alert if the memory page fault rate on Unix systems is higher than this threshold for the defined amount of samples
     */
    pageFaultsPerSecondNonWindows: number;
    /**
     * Alert if the memory page fault rate on Windows is higher than this threshold for the defined amount of samples
     */
    pageFaultsPerSecondWindows: number;
    /**
     * Alert if the memory usage on Unix systems is higher than this threshold
     */
    usedMemoryPercentageNonWindows: number;
    /**
     * Alert if the memory usage on Windows is higher than this threshold
     */
    usedMemoryPercentageWindows: number;
}

export interface HostAnomaliesV2HostHighMemoryDetectionCustomThresholdsEventThresholds {
    /**
     * The number of **10-second samples** that form the sliding evaluation window for dealerting.
     */
    dealertingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must be lower the threshold to close an event
     */
    dealertingSamples: number;
    /**
     * The number of **10-second samples** that form the sliding evaluation window to detect violating samples.
     */
    violatingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must exceed the threshold to trigger an event
     */
    violatingSamples: number;
}

export interface HostAnomaliesV2HostHighSystemLoadDetection {
    /**
     * no documentation available
     */
    customThresholds?: outputs.HostAnomaliesV2HostHighSystemLoadDetectionCustomThresholds;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface HostAnomaliesV2HostHighSystemLoadDetectionCustomThresholds {
    /**
     * no documentation available
     */
    eventThresholds: outputs.HostAnomaliesV2HostHighSystemLoadDetectionCustomThresholdsEventThresholds;
    /**
     * Alert if the System Load / Logical cpu core is higher than this threshold for the defined amount of samples
     */
    systemLoad: number;
}

export interface HostAnomaliesV2HostHighSystemLoadDetectionCustomThresholdsEventThresholds {
    /**
     * The number of **10-second samples** that form the sliding evaluation window for dealerting.
     */
    dealertingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must be lower the threshold to close an event
     */
    dealertingSamples: number;
    /**
     * The number of **10-second samples** that form the sliding evaluation window to detect violating samples.
     */
    violatingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must exceed the threshold to trigger an event
     */
    violatingSamples: number;
}

export interface HostAnomaliesV2HostOutOfMemoryDetection {
    /**
     * no documentation available
     */
    customThresholds?: outputs.HostAnomaliesV2HostOutOfMemoryDetectionCustomThresholds;
    /**
     * Detection mode for Java out of memory problem
     */
    detectionMode?: string;
    /**
     * Detect Java out of memory problem
     */
    enabled: boolean;
}

export interface HostAnomaliesV2HostOutOfMemoryDetectionCustomThresholds {
    /**
     * no documentation available
     */
    eventThresholds: outputs.HostAnomaliesV2HostOutOfMemoryDetectionCustomThresholdsEventThresholds;
    /**
     * Alert if the number of Java out-of-memory exceptions is at least this value
     */
    outOfMemoryExceptionsNumber: number;
}

export interface HostAnomaliesV2HostOutOfMemoryDetectionCustomThresholdsEventThresholds {
    /**
     * The number of **10-second samples** that form the sliding evaluation window for dealerting.
     */
    dealertingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must be lower the threshold to close an event
     */
    dealertingSamples: number;
    /**
     * The number of **10-second samples** that form the sliding evaluation window to detect violating samples.
     */
    violatingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must exceed the threshold to trigger an event
     */
    violatingSamples: number;
}

export interface HostAnomaliesV2HostOutOfThreadsDetection {
    /**
     * no documentation available
     */
    customThresholds?: outputs.HostAnomaliesV2HostOutOfThreadsDetectionCustomThresholds;
    /**
     * Detection mode for Java out of threads problem
     */
    detectionMode?: string;
    /**
     * Detect Java out of threads problem
     */
    enabled: boolean;
}

export interface HostAnomaliesV2HostOutOfThreadsDetectionCustomThresholds {
    /**
     * no documentation available
     */
    eventThresholds: outputs.HostAnomaliesV2HostOutOfThreadsDetectionCustomThresholdsEventThresholds;
    /**
     * Alert if the number of Java out-of-threads exceptions is at least this value
     */
    outOfThreadsExceptionsNumber: number;
}

export interface HostAnomaliesV2HostOutOfThreadsDetectionCustomThresholdsEventThresholds {
    /**
     * The number of **10-second samples** that form the sliding evaluation window for dealerting.
     */
    dealertingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must be lower the threshold to close an event
     */
    dealertingSamples: number;
    /**
     * The number of **10-second samples** that form the sliding evaluation window to detect violating samples.
     */
    violatingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must exceed the threshold to trigger an event
     */
    violatingSamples: number;
}

export interface HostAnomaliesV2Network {
    /**
     * no documentation available
     */
    highNetworkDetection: outputs.HostAnomaliesV2NetworkHighNetworkDetection;
    /**
     * no documentation available
     */
    networkDroppedPacketsDetection: outputs.HostAnomaliesV2NetworkNetworkDroppedPacketsDetection;
    /**
     * no documentation available
     */
    networkErrorsDetection: outputs.HostAnomaliesV2NetworkNetworkErrorsDetection;
    /**
     * no documentation available
     */
    networkHighRetransmissionDetection: outputs.HostAnomaliesV2NetworkNetworkHighRetransmissionDetection;
    /**
     * no documentation available
     */
    networkTcpProblemsDetection: outputs.HostAnomaliesV2NetworkNetworkTcpProblemsDetection;
}

export interface HostAnomaliesV2NetworkHighNetworkDetection {
    /**
     * no documentation available
     */
    customThresholds?: outputs.HostAnomaliesV2NetworkHighNetworkDetectionCustomThresholds;
    /**
     * Detection mode for high network utilization
     */
    detectionMode?: string;
    /**
     * Detect high network utilization
     */
    enabled: boolean;
}

export interface HostAnomaliesV2NetworkHighNetworkDetectionCustomThresholds {
    /**
     * Alert if sent/received traffic utilization is higher than this threshold for the defined amount of samples
     */
    errorsPercentage: number;
    /**
     * no documentation available
     */
    eventThresholds: outputs.HostAnomaliesV2NetworkHighNetworkDetectionCustomThresholdsEventThresholds;
}

export interface HostAnomaliesV2NetworkHighNetworkDetectionCustomThresholdsEventThresholds {
    /**
     * The number of **10-second samples** that form the sliding evaluation window for dealerting.
     */
    dealertingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must be lower the threshold to close an event
     */
    dealertingSamples: number;
    /**
     * The number of **10-second samples** that form the sliding evaluation window to detect violating samples.
     */
    violatingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must exceed the threshold to trigger an event
     */
    violatingSamples: number;
}

export interface HostAnomaliesV2NetworkNetworkDroppedPacketsDetection {
    /**
     * Alert if the dropped packet percentage is higher than the specified threshold **and** the total packets rate is higher than the defined threshold for the defined amount of samples
     */
    customThresholds?: outputs.HostAnomaliesV2NetworkNetworkDroppedPacketsDetectionCustomThresholds;
    /**
     * Detection mode for high number of dropped packets
     */
    detectionMode?: string;
    /**
     * Detect high number of dropped packets
     */
    enabled: boolean;
}

export interface HostAnomaliesV2NetworkNetworkDroppedPacketsDetectionCustomThresholds {
    /**
     * Receive/transmit dropped packet percentage threshold
     */
    droppedPacketsPercentage: number;
    /**
     * no documentation available
     */
    eventThresholds: outputs.HostAnomaliesV2NetworkNetworkDroppedPacketsDetectionCustomThresholdsEventThresholds;
    /**
     * Total packets rate threshold
     */
    totalPacketsRate: number;
}

export interface HostAnomaliesV2NetworkNetworkDroppedPacketsDetectionCustomThresholdsEventThresholds {
    /**
     * The number of **10-second samples** that form the sliding evaluation window for dealerting.
     */
    dealertingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must be lower the threshold to close an event
     */
    dealertingSamples: number;
    /**
     * The number of **10-second samples** that form the sliding evaluation window to detect violating samples.
     */
    violatingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must exceed the threshold to trigger an event
     */
    violatingSamples: number;
}

export interface HostAnomaliesV2NetworkNetworkErrorsDetection {
    /**
     * Alert if the receive/transmit error packet percentage is higher than the specified threshold **and** the total packets rate is higher than the defined threshold for the defined amount of samples
     */
    customThresholds?: outputs.HostAnomaliesV2NetworkNetworkErrorsDetectionCustomThresholds;
    /**
     * Detection mode for high number of network errors
     */
    detectionMode?: string;
    /**
     * Detect high number of network errors
     */
    enabled: boolean;
}

export interface HostAnomaliesV2NetworkNetworkErrorsDetectionCustomThresholds {
    /**
     * Receive/transmit error packet percentage threshold
     */
    errorsPercentage: number;
    /**
     * no documentation available
     */
    eventThresholds: outputs.HostAnomaliesV2NetworkNetworkErrorsDetectionCustomThresholdsEventThresholds;
    /**
     * Total packets rate threshold
     */
    totalPacketsRate: number;
}

export interface HostAnomaliesV2NetworkNetworkErrorsDetectionCustomThresholdsEventThresholds {
    /**
     * The number of **10-second samples** that form the sliding evaluation window for dealerting.
     */
    dealertingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must be lower the threshold to close an event
     */
    dealertingSamples: number;
    /**
     * The number of **10-second samples** that form the sliding evaluation window to detect violating samples.
     */
    violatingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must exceed the threshold to trigger an event
     */
    violatingSamples: number;
}

export interface HostAnomaliesV2NetworkNetworkHighRetransmissionDetection {
    /**
     * Alert if the retransmission rate is higher than the specified threshold **and** the number of retransmitted packets is higher than the defined threshold for the defined amount of samples
     */
    customThresholds?: outputs.HostAnomaliesV2NetworkNetworkHighRetransmissionDetectionCustomThresholds;
    /**
     * Detection mode for high retransmission rate
     */
    detectionMode?: string;
    /**
     * Detect high retransmission rate
     */
    enabled: boolean;
}

export interface HostAnomaliesV2NetworkNetworkHighRetransmissionDetectionCustomThresholds {
    /**
     * no documentation available
     */
    eventThresholds: outputs.HostAnomaliesV2NetworkNetworkHighRetransmissionDetectionCustomThresholdsEventThresholds;
    /**
     * Retransmission rate threshold
     */
    retransmissionRatePercentage: number;
    /**
     * Number of retransmitted packets threshold
     */
    retransmittedPacketsNumberPerMinute: number;
}

export interface HostAnomaliesV2NetworkNetworkHighRetransmissionDetectionCustomThresholdsEventThresholds {
    /**
     * The number of **10-second samples** that form the sliding evaluation window for dealerting.
     */
    dealertingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must be lower the threshold to close an event
     */
    dealertingSamples: number;
    /**
     * The number of **10-second samples** that form the sliding evaluation window to detect violating samples.
     */
    violatingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must exceed the threshold to trigger an event
     */
    violatingSamples: number;
}

export interface HostAnomaliesV2NetworkNetworkTcpProblemsDetection {
    /**
     * Alert if the percentage of new connection failures is higher than the specified threshold **and** the number of failed connections is higher than the defined threshold for the defined amount of samples
     */
    customThresholds?: outputs.HostAnomaliesV2NetworkNetworkTcpProblemsDetectionCustomThresholds;
    /**
     * Detection mode for TCP connectivity problems
     */
    detectionMode?: string;
    /**
     * Detect TCP connectivity problems for process
     */
    enabled: boolean;
}

export interface HostAnomaliesV2NetworkNetworkTcpProblemsDetectionCustomThresholds {
    /**
     * no documentation available
     */
    eventThresholds: outputs.HostAnomaliesV2NetworkNetworkTcpProblemsDetectionCustomThresholdsEventThresholds;
    /**
     * Number of failed connections threshold
     */
    failedConnectionsNumberPerMinute: number;
    /**
     * New connection failure threshold
     */
    newConnectionFailuresPercentage: number;
}

export interface HostAnomaliesV2NetworkNetworkTcpProblemsDetectionCustomThresholdsEventThresholds {
    /**
     * The number of **10-second samples** that form the sliding evaluation window for dealerting.
     */
    dealertingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must be lower the threshold to close an event
     */
    dealertingSamples: number;
    /**
     * The number of **10-second samples** that form the sliding evaluation window to detect violating samples.
     */
    violatingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must exceed the threshold to trigger an event
     */
    violatingSamples: number;
}

export interface HostNamingCondition {
    /**
     * A conditions for the metric usage
     */
    conditions?: outputs.HostNamingConditionCondition[];
}

export interface HostNamingConditionCondition {
    /**
     * Comparison for `APPLICATION_TYPE` attributes
     *
     * @deprecated You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility.
     */
    applicationTypeComparisons?: outputs.HostNamingConditionConditionApplicationTypeComparison[];
    /**
     * Comparison for `APPLICATION_TYPE` attributes
     */
    applicationTypes?: outputs.HostNamingConditionConditionApplicationType[];
    /**
     * Comparison for `AZURE_COMPUTE_MODE` attributes
     */
    azureComputeModeComparisons?: outputs.HostNamingConditionConditionAzureComputeModeComparison[];
    /**
     * Comparison for `AZURE_COMPUTE_MODE` attributes
     *
     * @deprecated You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility.
     */
    azureComputeModes?: outputs.HostNamingConditionConditionAzureComputeMode[];
    /**
     * Comparison for `AZURE_SKU` attributes
     *
     * @deprecated You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility.
     */
    azureSkuComparisions?: outputs.HostNamingConditionConditionAzureSkuComparision[];
    /**
     * Comparison for `AZURE_SKU` attributes
     */
    azureSkus?: outputs.HostNamingConditionConditionAzureSkus[];
    /**
     * A comparison that's yet unknown to the provider. Operator and Value need to be encoded using the 'unknowns' property.
     *
     * @deprecated You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility.
     */
    baseComparisonBasics?: outputs.HostNamingConditionConditionBaseComparisonBasic[];
    /**
     * Fallback for not yet known type
     *
     * @deprecated 'base_condition_key' is deprecated. You should use 'key'
     */
    baseConditionKeys?: outputs.HostNamingConditionConditionBaseConditionKey[];
    /**
     * Comparison for `BITNESS` attributes
     *
     * @deprecated You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility.
     */
    bitnessComparisions?: outputs.HostNamingConditionConditionBitnessComparision[];
    /**
     * Comparison for `BITNESS` attributes
     */
    bitnesses?: outputs.HostNamingConditionConditionBitness[];
    /**
     * Comparison for `CLOUD_TYPE` attributes
     *
     * @deprecated You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility.
     */
    cloudTypeComparisons?: outputs.HostNamingConditionConditionCloudTypeComparison[];
    /**
     * Comparison for `CLOUD_TYPE` attributes
     */
    cloudTypes?: outputs.HostNamingConditionConditionCloudType[];
    /**
     * A comparison that's yet unknown to the provider. Operator and Value need to be encoded using the 'unknowns' property.
     */
    comparisons?: outputs.HostNamingConditionConditionComparison[];
    /**
     * Comparison for `CUSTOM_APPLICATION_TYPE` attributes
     *
     * @deprecated You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility.
     */
    customApplicationTypeComparisons?: outputs.HostNamingConditionConditionCustomApplicationTypeComparison[];
    /**
     * Comparison for `CUSTOM_APPLICATION_TYPE` attributes
     */
    customApplicationTypes?: outputs.HostNamingConditionConditionCustomApplicationType[];
    /**
     * Key for Custom Host Metadata
     *
     * @deprecated 'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata'
     */
    customHostMetadataConditionKeys?: outputs.HostNamingConditionConditionCustomHostMetadataConditionKey[];
    /**
     * Key for Custom Host Metadata
     */
    customHostMetadatas?: outputs.HostNamingConditionConditionCustomHostMetadata[];
    /**
     * Key for Custom Process Metadata
     *
     * @deprecated 'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata'
     */
    customProcessMetadataConditionKeys?: outputs.HostNamingConditionConditionCustomProcessMetadataConditionKey[];
    /**
     * Key for Custom Process Metadata
     */
    customProcessMetadatas?: outputs.HostNamingConditionConditionCustomProcessMetadata[];
    /**
     * Comparison for `DATABASE_TOPOLOGY` attributes
     */
    databaseTopologies?: outputs.HostNamingConditionConditionDatabaseTopology[];
    /**
     * Comparison for `DATABASE_TOPOLOGY` attributes
     *
     * @deprecated You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility.
     */
    databaseTopologyComparisons?: outputs.HostNamingConditionConditionDatabaseTopologyComparison[];
    /**
     * Comparison for `DCRUM_DECODER_TYPE` attributes
     *
     * @deprecated You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility.
     */
    dcrumDecoderComparisons?: outputs.HostNamingConditionConditionDcrumDecoderComparison[];
    /**
     * Comparison for `DCRUM_DECODER_TYPE` attributes
     */
    dcrumDecoders?: outputs.HostNamingConditionConditionDcrumDecoder[];
    /**
     * Comparison for `ENTITY_ID` attributes
     */
    entities?: outputs.HostNamingConditionConditionEntity[];
    /**
     * Comparison for `ENTITY_ID` attributes
     *
     * @deprecated You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility.
     */
    entityIdComparisons?: outputs.HostNamingConditionConditionEntityIdComparison[];
    /**
     * Comparison for `SIMPLE_HOST_TECH` attributes
     */
    hostTeches?: outputs.HostNamingConditionConditionHostTech[];
    /**
     * `hypervisorTypeComparision` is deprecated. Use `hypervisor` instead
     *
     * @deprecated `hypervisorTypeComparision` is deprecated. Use `hypervisor` instead
     */
    hypervisorTypeComparisions?: outputs.HostNamingConditionConditionHypervisorTypeComparision[];
    /**
     * Comparison for `HYPERVISOR_TYPE` attributes
     */
    hypervisors?: outputs.HostNamingConditionConditionHypervisor[];
    /**
     * Comparison for `INDEXED_NAME` attributes
     *
     * @deprecated You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedNameComparisons?: outputs.HostNamingConditionConditionIndexedNameComparison[];
    /**
     * Comparison for `INDEXED_NAME` attributes
     */
    indexedNames?: outputs.HostNamingConditionConditionIndexedName[];
    /**
     * Comparison for `INDEXED_STRING` attributes
     *
     * @deprecated You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedStringComparisons?: outputs.HostNamingConditionConditionIndexedStringComparison[];
    /**
     * Comparison for `INDEXED_STRING` attributes
     */
    indexedStrings?: outputs.HostNamingConditionConditionIndexedString[];
    /**
     * Comparison for `INDEXED_TAG` attributes
     *
     * @deprecated You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedTagComparisons?: outputs.HostNamingConditionConditionIndexedTagComparison[];
    /**
     * Comparison for `INDEXED_TAG` attributes
     */
    indexedTags?: outputs.HostNamingConditionConditionIndexedTag[];
    /**
     * Comparison for `INTEGER` attributes
     *
     * @deprecated You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility.
     */
    integerComparisons?: outputs.HostNamingConditionConditionIntegerComparison[];
    /**
     * Comparison for `INTEGER` attributes
     */
    integers?: outputs.HostNamingConditionConditionInteger[];
    /**
     * Comparison for `IP_ADDRESS` attributes
     *
     * @deprecated You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility.
     */
    ipaddressComparisons?: outputs.HostNamingConditionConditionIpaddressComparison[];
    /**
     * Comparison for `IP_ADDRESS` attributes
     */
    ipaddresses?: outputs.HostNamingConditionConditionIpaddress[];
    /**
     * Fallback for not yet known type
     */
    keys?: outputs.HostNamingConditionConditionKey[];
    /**
     * Comparison for `MOBILE_PLATFORM` attributes
     *
     * @deprecated You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility.
     */
    mobilePlatformComparisons?: outputs.HostNamingConditionConditionMobilePlatformComparison[];
    /**
     * Comparison for `MOBILE_PLATFORM` attributes
     */
    mobilePlatforms?: outputs.HostNamingConditionConditionMobilePlatform[];
    /**
     * Comparison for `OS_ARCHITECTURE` attributes
     */
    osArches?: outputs.HostNamingConditionConditionOsArch[];
    /**
     * Comparison for `OS_TYPE` attributes
     */
    osTypes?: outputs.HostNamingConditionConditionOsType[];
    /**
     * Comparison for `OS_ARCHITECTURE` attributes
     *
     * @deprecated You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility.
     */
    osarchitectureComparisons?: outputs.HostNamingConditionConditionOsarchitectureComparison[];
    /**
     * Comparison for `OS_TYPE` attributes
     *
     * @deprecated You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility.
     */
    ostypeComparisons?: outputs.HostNamingConditionConditionOstypeComparison[];
    /**
     * Comparison for `PAAS_TYPE` attributes
     *
     * @deprecated You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility.
     */
    paasTypeComparisons?: outputs.HostNamingConditionConditionPaasTypeComparison[];
    /**
     * Comparison for `PAAS_TYPE` attributes
     */
    paasTypes?: outputs.HostNamingConditionConditionPaasType[];
    /**
     * The key for dynamic attributes of the `PROCESS_PREDEFINED_METADATA_KEY` type
     *
     * @deprecated 'process_metadata_condition_key' is deprecated. You should use 'process_metadata'
     */
    processMetadataConditionKeys?: outputs.HostNamingConditionConditionProcessMetadataConditionKey[];
    /**
     * The key for dynamic attributes of the `PROCESS_PREDEFINED_METADATA_KEY` type
     */
    processMetadatas?: outputs.HostNamingConditionConditionProcessMetadata[];
    /**
     * Comparison for `SERVICE_TOPOLOGY` attributes
     */
    serviceTopologies?: outputs.HostNamingConditionConditionServiceTopology[];
    /**
     * Comparison for `SERVICE_TOPOLOGY` attributes
     *
     * @deprecated You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility.
     */
    serviceTopologyComparisons?: outputs.HostNamingConditionConditionServiceTopologyComparison[];
    /**
     * Comparison for `SERVICE_TYPE` attributes
     *
     * @deprecated You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility.
     */
    serviceTypeComparisons?: outputs.HostNamingConditionConditionServiceTypeComparison[];
    /**
     * Comparison for `SERVICE_TYPE` attributes
     */
    serviceTypes?: outputs.HostNamingConditionConditionServiceType[];
    /**
     * Comparison for `SIMPLE_HOST_TECH` attributes
     *
     * @deprecated You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility.
     */
    simpleHostTechComparisons?: outputs.HostNamingConditionConditionSimpleHostTechComparison[];
    /**
     * Comparison for `SIMPLE_TECH` attributes
     *
     * @deprecated You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility.
     */
    simpleTechComparisons?: outputs.HostNamingConditionConditionSimpleTechComparison[];
    /**
     * Comparison for `STRING` attributes
     *
     * @deprecated You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility.
     */
    stringComparisons?: outputs.HostNamingConditionConditionStringComparison[];
    /**
     * The key for dynamic attributes of the `STRING` type
     *
     * @deprecated 'string_condition_key' is deprecated. You should use 'string_key'
     */
    stringConditionKeys?: outputs.HostNamingConditionConditionStringConditionKey[];
    /**
     * The key for dynamic attributes of the `STRING` type
     */
    stringKeys?: outputs.HostNamingConditionConditionStringKey[];
    /**
     * Comparison for `STRING` attributes
     */
    strings?: outputs.HostNamingConditionConditionString[];
    /**
     * Comparison for `SYNTHETIC_ENGINE_TYPE` attributes
     *
     * @deprecated You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility.
     */
    syntheticEngineTypeComparisons?: outputs.HostNamingConditionConditionSyntheticEngineTypeComparison[];
    /**
     * Comparison for `SYNTHETIC_ENGINE_TYPE` attributes
     */
    syntheticEngines?: outputs.HostNamingConditionConditionSyntheticEngine[];
    /**
     * Comparison for `TAG` attributes
     *
     * @deprecated You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility.
     */
    tagComparisons?: outputs.HostNamingConditionConditionTagComparison[];
    /**
     * Comparison for `TAG` attributes
     */
    tags?: outputs.HostNamingConditionConditionTag[];
    /**
     * Comparison for `SIMPLE_TECH` attributes
     */
    teches?: outputs.HostNamingConditionConditionTech[];
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
}

export interface HostNamingConditionConditionApplicationType {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface HostNamingConditionConditionApplicationTypeComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be APPLICATION_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface HostNamingConditionConditionAzureComputeMode {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are DEDICATED or SHARED.
     */
    value?: string;
}

export interface HostNamingConditionConditionAzureComputeModeComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are DEDICATED or SHARED.
     */
    value?: string;
}

export interface HostNamingConditionConditionAzureSkuComparision {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be AZURE_SKU
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are BASIC, DYNAMIC, FREE, PREMIUM, SHARED and STANDARD.
     */
    value?: string;
}

export interface HostNamingConditionConditionAzureSkus {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are BASIC, DYNAMIC, FREE, PREMIUM, SHARED and STANDARD.
     */
    value?: string;
}

export interface HostNamingConditionConditionBaseComparisonBasic {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * The type of comparison
     */
    type: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface HostNamingConditionConditionBaseConditionKey {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * Defines the actual set of fields depending on the value
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface HostNamingConditionConditionBitness {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are 32 and 64.
     */
    value?: string;
}

export interface HostNamingConditionConditionBitnessComparision {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be BITNESS
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are 32 and 64.
     */
    value?: string;
}

export interface HostNamingConditionConditionCloudType {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AZURE, EC2, GOOGLE_CLOUD_PLATFORM, OPENSTACK, ORACLE and UNRECOGNIZED.
     */
    value?: string;
}

export interface HostNamingConditionConditionCloudTypeComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be CLOUD_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AZURE, EC2, GOOGLE_CLOUD_PLATFORM, OPENSTACK, ORACLE and UNRECOGNIZED.
     */
    value?: string;
}

export interface HostNamingConditionConditionComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * The type of comparison
     */
    type: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface HostNamingConditionConditionCustomApplicationType {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AMAZON_ECHO, DESKTOP, EMBEDDED, IOT, MICROSOFT_HOLOLENS and UFO.
     */
    value?: string;
}

export interface HostNamingConditionConditionCustomApplicationTypeComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be CUSTOM_APPLICATION_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AMAZON_ECHO, DESKTOP, EMBEDDED, IOT, MICROSOFT_HOLOLENS and UFO.
     */
    value?: string;
}

export interface HostNamingConditionConditionCustomHostMetadata {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
     */
    dynamicKey: outputs.HostNamingConditionConditionCustomHostMetadataDynamicKey;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface HostNamingConditionConditionCustomHostMetadataConditionKey {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
     */
    dynamicKey: outputs.HostNamingConditionConditionCustomHostMetadataConditionKeyDynamicKey;
    /**
     * if specified, needs to be HOST_CUSTOM_METADATA_KEY
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface HostNamingConditionConditionCustomHostMetadataConditionKeyDynamicKey {
    /**
     * The actual key of the custom metadata
     */
    key: string;
    /**
     * The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
     */
    source: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface HostNamingConditionConditionCustomHostMetadataDynamicKey {
    /**
     * The actual key of the custom metadata
     */
    key: string;
    /**
     * The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
     */
    source: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface HostNamingConditionConditionCustomProcessMetadata {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
     */
    dynamicKey: outputs.HostNamingConditionConditionCustomProcessMetadataDynamicKey;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface HostNamingConditionConditionCustomProcessMetadataConditionKey {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
     */
    dynamicKey: outputs.HostNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKey;
    /**
     * if specified, needs to be PROCESS_CUSTOM_METADATA_KEY
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface HostNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKey {
    /**
     * The actual key of the custom metadata
     */
    key: string;
    /**
     * The source of the custom metadata. Possible values are CLOUD_FOUNDRY, ENVIRONMENT, GOOGLE_CLOUD, KUBERNETES and PLUGIN
     */
    source: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface HostNamingConditionConditionCustomProcessMetadataDynamicKey {
    /**
     * The actual key of the custom metadata
     */
    key: string;
    /**
     * The source of the custom metadata. Possible values are CLOUD_FOUNDRY, ENVIRONMENT, GOOGLE_CLOUD, KUBERNETES and PLUGIN
     */
    source: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface HostNamingConditionConditionDatabaseTopology {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are CLUSTER, EMBEDDED, FAILOVER, IPC, LOAD_BALANCING, SINGLE_SERVER and UNSPECIFIED.
     */
    value?: string;
}

export interface HostNamingConditionConditionDatabaseTopologyComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be DATABASE_TOPOLOGY
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are CLUSTER, EMBEDDED, FAILOVER, IPC, LOAD_BALANCING, SINGLE_SERVER and UNSPECIFIED.
     */
    value?: string;
}

export interface HostNamingConditionConditionDcrumDecoder {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are ALL_OTHER, CITRIX_APPFLOW, CITRIX_ICA, CITRIX_ICA_OVER_SSL, DB2_DRDA, HTTP, HTTPS, HTTP_EXPRESS, INFORMIX, MYSQL, ORACLE, SAP_GUI, SAP_GUI_OVER_HTTP, SAP_GUI_OVER_HTTPS, SAP_HANA_DB, SAP_RFC, SSL and TDS.
     */
    value?: string;
}

export interface HostNamingConditionConditionDcrumDecoderComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be DCRUM_DECODER_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are ALL_OTHER, CITRIX_APPFLOW, CITRIX_ICA, CITRIX_ICA_OVER_SSL, DB2_DRDA, HTTP, HTTPS, HTTP_EXPRESS, INFORMIX, MYSQL, ORACLE, SAP_GUI, SAP_GUI_OVER_HTTP, SAP_GUI_OVER_HTTPS, SAP_HANA_DB, SAP_RFC, SSL and TDS.
     */
    value?: string;
}

export interface HostNamingConditionConditionEntity {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Currently only EQUALS is supported. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface HostNamingConditionConditionEntityIdComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Currently only EQUALS is supported. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be ENTITY_ID
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface HostNamingConditionConditionHostTech {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: outputs.HostNamingConditionConditionHostTechValue;
}

export interface HostNamingConditionConditionHostTechValue {
    /**
     * Predefined technology, if technology is not predefined, then the verbatim type must be set. Possible values are APPARMOR, BOSH, BOSHBPM, CLOUDFOUNDRY, CONTAINERD, CRIO, DIEGO_CELL, DOCKER, GARDEN, GRSECURITY, KUBERNETES, OPENSHIFT, OPENSTACK_COMPUTE, OPENSTACK_CONTROLLER and SELINUX
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * Non-predefined technology, use for custom technologies
     */
    verbatimType?: string;
}

export interface HostNamingConditionConditionHypervisor {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AHV, HYPER_V, KVM, LPAR, QEMU, VIRTUAL_BOX, VMWARE, WPAR and XEN.
     */
    value?: string;
}

export interface HostNamingConditionConditionHypervisorTypeComparision {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be HYPERVISOR_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AHV, HYPER_V, KVM, LPAR, QEMU, VIRTUAL_BOX, VMWARE, WPAR and XEN.
     */
    value?: string;
}

export interface HostNamingConditionConditionIndexedName {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS, CONTAINS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface HostNamingConditionConditionIndexedNameComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS, CONTAINS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be INDEXED_NAME
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface HostNamingConditionConditionIndexedString {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface HostNamingConditionConditionIndexedStringComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be INDEXED_STRING
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface HostNamingConditionConditionIndexedTag {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * Tag of a Dynatrace entity
     */
    value?: outputs.HostNamingConditionConditionIndexedTagValue;
}

export interface HostNamingConditionConditionIndexedTagComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be INDEXED_TAG
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * Tag of a Dynatrace entity
     */
    value?: outputs.HostNamingConditionConditionIndexedTagComparisonValue;
}

export interface HostNamingConditionConditionIndexedTagComparisonValue {
    /**
     * The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
     */
    context: string;
    /**
     * The key of the tag. Custom tags have the tag value here
     */
    key: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value of the tag. Not applicable to custom tags
     */
    value?: string;
}

export interface HostNamingConditionConditionIndexedTagValue {
    /**
     * The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
     */
    context: string;
    /**
     * The key of the tag. Custom tags have the tag value here
     */
    key: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value of the tag. Not applicable to custom tags
     */
    value?: string;
}

export interface HostNamingConditionConditionInteger {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS, EXISTS, GREATER_THAN, GREATER_THAN_OR_EQUAL, LOWER_THAN and LOWER_THAN_OR_EQUAL. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: number;
}

export interface HostNamingConditionConditionIntegerComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS, EXISTS, GREATER_THAN, GREATER_THAN_OR_EQUAL, LOWER_THAN and LOWER_THAN_OR_EQUAL. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be INTEGER
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: number;
}

export interface HostNamingConditionConditionIpaddress {
    /**
     * The comparison is case-sensitive (`true`) or insensitive (`false`)
     */
    caseSensitive?: boolean;
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS, IS_IP_IN_RANGE and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface HostNamingConditionConditionIpaddressComparison {
    /**
     * The comparison is case-sensitive (`true`) or insensitive (`false`)
     */
    caseSensitive?: boolean;
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS, IS_IP_IN_RANGE and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be IP_ADDRESS
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface HostNamingConditionConditionKey {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * Defines the actual set of fields depending on the value
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface HostNamingConditionConditionMobilePlatform {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are ANDROID, IOS, LINUX, MAC_OS, OTHER, TVOS and WINDOWS.
     */
    value?: string;
}

export interface HostNamingConditionConditionMobilePlatformComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be MOBILE_PLATFORM
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are ANDROID, IOS, LINUX, MAC_OS, OTHER, TVOS and WINDOWS.
     */
    value?: string;
}

export interface HostNamingConditionConditionOsArch {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are ARM, IA64, PARISC, PPC, PPCLE, S390, SPARC, X86 and ZOS.
     */
    value?: string;
}

export interface HostNamingConditionConditionOsType {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AIX, DARWIN, HPUX, LINUX, SOLARIS, WINDOWS and ZOS.
     */
    value?: string;
}

export interface HostNamingConditionConditionOsarchitectureComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be OS_ARCHITECTURE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are ARM, IA64, PARISC, PPC, PPCLE, S390, SPARC, X86 and ZOS.
     */
    value?: string;
}

export interface HostNamingConditionConditionOstypeComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be OS_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AIX, DARWIN, HPUX, LINUX, SOLARIS, WINDOWS and ZOS.
     */
    value?: string;
}

export interface HostNamingConditionConditionPaasType {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AWS_ECS_EC2, AWS_ECS_FARGATE, AWS_LAMBDA, AZURE_FUNCTIONS, AZURE_WEBSITES, CLOUD_FOUNDRY, GOOGLE_APP_ENGINE, HEROKU, KUBERNETES and OPENSHIFT.
     */
    value?: string;
}

export interface HostNamingConditionConditionPaasTypeComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be PAAS_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AWS_ECS_EC2, AWS_ECS_FARGATE, AWS_LAMBDA, AZURE_FUNCTIONS, AZURE_WEBSITES, CLOUD_FOUNDRY, GOOGLE_APP_ENGINE, HEROKU, KUBERNETES and OPENSHIFT.
     */
    value?: string;
}

export interface HostNamingConditionConditionProcessMetadata {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are AMAZON_ECR_IMAGE_ACCOUNT_ID,AMAZON_ECR_IMAGE_REGION, AMAZON_LAMBDA_FUNCTION_NAME, AMAZON_REGION, APACHE_CONFIG_PATH, APACHE_SPARK_MASTER_IP_ADDRESS, ASP_DOT_NET_CORE_APPLICATION_PATH, AWS_ECS_CLUSTER, AWS_ECS_CONTAINERNAME, AWS_ECS_FAMILY, AWS_ECS_REVISION, CASSANDRA_CLUSTER_NAME, CATALINA_BASE, CATALINA_HOME, CLOUD_FOUNDRY_APP_ID, CLOUD_FOUNDRY_APP_NAME, CLOUD_FOUNDRY_INSTANCE_INDEX, CLOUD_FOUNDRY_SPACE_ID, CLOUD_FOUNDRY_SPACE_NAME, COLDFUSION_JVM_CONFIG_FILE, COLDFUSION_SERVICE_NAME, COMMAND_LINE_ARGS, DOTNET_COMMAND, DOTNET_COMMAND_PATH, DYNATRACE_CLUSTER_ID, DYNATRACE_NODE_ID, ELASTICSEARCH_CLUSTER_NAME, ELASTICSEARCH_NODE_NAME, EQUINOX_CONFIG_PATH, EXE_NAME, EXE_PATH, GLASS_FISH_DOMAIN_NAME, GLASS_FISH_INSTANCE_NAME, GOOGLE_APP_ENGINE_INSTANCE, GOOGLE_APP_ENGINE_SERVICE, GOOGLE_CLOUD_PROJECT, HYBRIS_BIN_DIRECTORY, HYBRIS_CONFIG_DIRECTORY, HYBRIS_DATA_DIRECTORY, IBM_CICS_REGION, IBM_CTG_NAME, IBM_IMS_CONNECT_REGION, IBM_IMS_CONTROL_REGION, IBM_IMS_MESSAGE_PROCESSING_REGION, IBM_IMS_SOAP_GW_NAME, IBM_INTEGRATION_NODE_NAME, IBM_INTEGRATION_SERVER_NAME, IIS_APP_POOL, IIS_ROLE_NAME, JAVA_JAR_FILE, JAVA_JAR_PATH, JAVA_MAIN_CLASS, JAVA_MAIN_MODULE, JBOSS_HOME, JBOSS_MODE, JBOSS_SERVER_NAME, KUBERNETES_BASE_POD_NAME, KUBERNETES_CONTAINER_NAME, KUBERNETES_FULL_POD_NAME, KUBERNETES_NAMESPACE, KUBERNETES_POD_UID, MSSQL_INSTANCE_NAME, NODE_JS_APP_BASE_DIRECTORY, NODE_JS_APP_NAME, NODE_JS_SCRIPT_NAME, ORACLE_SID, PG_ID_CALC_INPUT_KEY_LINKAGE, PHP_SCRIPT_PATH, PHP_WORKING_DIRECTORY, RUBY_APP_ROOT_PATH, RUBY_SCRIPT_PATH, RULE_RESULT, SOFTWAREAG_INSTALL_ROOT, SOFTWAREAG_PRODUCTPROPNAME, SPRINGBOOT_APP_NAME, SPRINGBOOT_PROFILE_NAME, SPRINGBOOT_STARTUP_CLASS, TIBCO_BUSINESSWORKS_CE_APP_NAME, TIBCO_BUSINESSWORKS_CE_VERSION, TIBCO_BUSINESS_WORKS_APP_NODE_NAME, TIBCO_BUSINESS_WORKS_APP_SPACE_NAME, TIBCO_BUSINESS_WORKS_DOMAIN_NAME, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH, TIBCO_BUSINESS_WORKS_HOME, VARNISH_INSTANCE_NAME, WEB_LOGIC_CLUSTER_NAME, WEB_LOGIC_DOMAIN_NAME, WEB_LOGIC_HOME, WEB_LOGIC_NAME, WEB_SPHERE_CELL_NAME, WEB_SPHERE_CLUSTER_NAME, WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME
     */
    dynamicKey: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface HostNamingConditionConditionProcessMetadataConditionKey {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are AMAZON_ECR_IMAGE_ACCOUNT_ID,AMAZON_ECR_IMAGE_REGION, AMAZON_LAMBDA_FUNCTION_NAME, AMAZON_REGION, APACHE_CONFIG_PATH, APACHE_SPARK_MASTER_IP_ADDRESS, ASP_DOT_NET_CORE_APPLICATION_PATH, AWS_ECS_CLUSTER, AWS_ECS_CONTAINERNAME, AWS_ECS_FAMILY, AWS_ECS_REVISION, CASSANDRA_CLUSTER_NAME, CATALINA_BASE, CATALINA_HOME, CLOUD_FOUNDRY_APP_ID, CLOUD_FOUNDRY_APP_NAME, CLOUD_FOUNDRY_INSTANCE_INDEX, CLOUD_FOUNDRY_SPACE_ID, CLOUD_FOUNDRY_SPACE_NAME, COLDFUSION_JVM_CONFIG_FILE, COLDFUSION_SERVICE_NAME, COMMAND_LINE_ARGS, DOTNET_COMMAND, DOTNET_COMMAND_PATH, DYNATRACE_CLUSTER_ID, DYNATRACE_NODE_ID, ELASTICSEARCH_CLUSTER_NAME, ELASTICSEARCH_NODE_NAME, EQUINOX_CONFIG_PATH, EXE_NAME, EXE_PATH, GLASS_FISH_DOMAIN_NAME, GLASS_FISH_INSTANCE_NAME, GOOGLE_APP_ENGINE_INSTANCE, GOOGLE_APP_ENGINE_SERVICE, GOOGLE_CLOUD_PROJECT, HYBRIS_BIN_DIRECTORY, HYBRIS_CONFIG_DIRECTORY, HYBRIS_DATA_DIRECTORY, IBM_CICS_REGION, IBM_CTG_NAME, IBM_IMS_CONNECT_REGION, IBM_IMS_CONTROL_REGION, IBM_IMS_MESSAGE_PROCESSING_REGION, IBM_IMS_SOAP_GW_NAME, IBM_INTEGRATION_NODE_NAME, IBM_INTEGRATION_SERVER_NAME, IIS_APP_POOL, IIS_ROLE_NAME, JAVA_JAR_FILE, JAVA_JAR_PATH, JAVA_MAIN_CLASS, JAVA_MAIN_MODULE, JBOSS_HOME, JBOSS_MODE, JBOSS_SERVER_NAME, KUBERNETES_BASE_POD_NAME, KUBERNETES_CONTAINER_NAME, KUBERNETES_FULL_POD_NAME, KUBERNETES_NAMESPACE, KUBERNETES_POD_UID, MSSQL_INSTANCE_NAME, NODE_JS_APP_BASE_DIRECTORY, NODE_JS_APP_NAME, NODE_JS_SCRIPT_NAME, ORACLE_SID, PG_ID_CALC_INPUT_KEY_LINKAGE, PHP_SCRIPT_PATH, PHP_WORKING_DIRECTORY, RUBY_APP_ROOT_PATH, RUBY_SCRIPT_PATH, RULE_RESULT, SOFTWAREAG_INSTALL_ROOT, SOFTWAREAG_PRODUCTPROPNAME, SPRINGBOOT_APP_NAME, SPRINGBOOT_PROFILE_NAME, SPRINGBOOT_STARTUP_CLASS, TIBCO_BUSINESSWORKS_CE_APP_NAME, TIBCO_BUSINESSWORKS_CE_VERSION, TIBCO_BUSINESS_WORKS_APP_NODE_NAME, TIBCO_BUSINESS_WORKS_APP_SPACE_NAME, TIBCO_BUSINESS_WORKS_DOMAIN_NAME, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH, TIBCO_BUSINESS_WORKS_HOME, VARNISH_INSTANCE_NAME, WEB_LOGIC_CLUSTER_NAME, WEB_LOGIC_DOMAIN_NAME, WEB_LOGIC_HOME, WEB_LOGIC_NAME, WEB_SPHERE_CELL_NAME, WEB_SPHERE_CLUSTER_NAME, WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME
     */
    dynamicKey: string;
    /**
     * if specified, needs to be PROCESS_PREDEFINED_METADATA_KEY
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface HostNamingConditionConditionServiceTopology {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are EXTERNAL_SERVICE, FULLY_MONITORED and OPAQUE_SERVICE.
     */
    value?: string;
}

export interface HostNamingConditionConditionServiceTopologyComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be SERVICE_TOPOLOGY
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are EXTERNAL_SERVICE, FULLY_MONITORED and OPAQUE_SERVICE.
     */
    value?: string;
}

export interface HostNamingConditionConditionServiceType {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are BACKGROUND_ACTIVITY, CICS_SERVICE, CUSTOM_SERVICE, DATABASE_SERVICE, ENTERPRISE_SERVICE_BUS_SERVICE, EXTERNAL, IBM_INTEGRATION_BUS_SERVICE, IMS_SERVICE, MESSAGING_SERVICE, QUEUE_LISTENER_SERVICE, RMI_SERVICE, RPC_SERVICE, WEB_REQUEST_SERVICE and WEB_SERVICE.
     */
    value?: string;
}

export interface HostNamingConditionConditionServiceTypeComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be SERVICE_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are BACKGROUND_ACTIVITY, CICS_SERVICE, CUSTOM_SERVICE, DATABASE_SERVICE, ENTERPRISE_SERVICE_BUS_SERVICE, EXTERNAL, IBM_INTEGRATION_BUS_SERVICE, IMS_SERVICE, MESSAGING_SERVICE, QUEUE_LISTENER_SERVICE, RMI_SERVICE, RPC_SERVICE, WEB_REQUEST_SERVICE and WEB_SERVICE.
     */
    value?: string;
}

export interface HostNamingConditionConditionSimpleHostTechComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be SIMPLE_HOST_TECH
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: outputs.HostNamingConditionConditionSimpleHostTechComparisonValue;
}

export interface HostNamingConditionConditionSimpleHostTechComparisonValue {
    /**
     * Predefined technology, if technology is not predefined, then the verbatim type must be set. Possible values are APPARMOR, BOSH, BOSHBPM, CLOUDFOUNDRY, CONTAINERD, CRIO, DIEGO_CELL, DOCKER, GARDEN, GRSECURITY, KUBERNETES, OPENSHIFT, OPENSTACK_COMPUTE, OPENSTACK_CONTROLLER and SELINUX
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * Non-predefined technology, use for custom technologies
     */
    verbatimType?: string;
}

export interface HostNamingConditionConditionSimpleTechComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be SIMPLE_TECH
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: outputs.HostNamingConditionConditionSimpleTechComparisonValue;
}

export interface HostNamingConditionConditionSimpleTechComparisonValue {
    /**
     * Predefined technology, if technology is not predefined, then the verbatim type must be set.
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * Non-predefined technology, use for custom technologies
     */
    verbatimType?: string;
}

export interface HostNamingConditionConditionString {
    /**
     * The comparison is case-sensitive (`true`) or insensitive (`false`)
     */
    caseSensitive?: boolean;
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface HostNamingConditionConditionStringComparison {
    /**
     * The comparison is case-sensitive (`true`) or insensitive (`false`)
     */
    caseSensitive?: boolean;
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be STRING
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface HostNamingConditionConditionStringConditionKey {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are
     *    - `AMAZON_ECR_IMAGE_ACCOUNT_ID`
     *    - `AMAZON_ECR_IMAGE_REGION`
     *    - `AMAZON_LAMBDA_FUNCTION_NAME`
     *    - `AMAZON_REGION`
     *    - `APACHE_CONFIG_PATH`
     *    - `APACHE_SPARK_MASTER_IP_ADDRESS`
     *    - `ASP_DOT_NET_CORE_APPLICATION_PATH`
     *    - `AWS_ECS_CLUSTER`
     *    - `AWS_ECS_CONTAINERNAME`
     *    - `AWS_ECS_FAMILY`
     *    - `AWS_ECS_REVISION`
     *    - `CASSANDRA_CLUSTER_NAME`
     *    - `CATALINA_BASE`
     *    - `CATALINA_HOME`
     *    - `CLOUD_FOUNDRY_APP_ID`
     *    - `CLOUD_FOUNDRY_APP_NAME`
     *    - `CLOUD_FOUNDRY_INSTANCE_INDEX`
     *    - `CLOUD_FOUNDRY_SPACE_ID`
     *    - `CLOUD_FOUNDRY_SPACE_NAME`
     *    - `COLDFUSION_JVM_CONFIG_FILE`
     *    - `COLDFUSION_SERVICE_NAME`
     *    - `COMMAND_LINE_ARGS`
     *    - `DOTNET_COMMAND`
     *    - `DOTNET_COMMAND_PATH`
     *    - `DYNATRACE_CLUSTER_ID`
     *    - `DYNATRACE_NODE_ID`
     *    - `ELASTICSEARCH_CLUSTER_NAME`
     *    - `ELASTICSEARCH_NODE_NAME`
     *    - `EQUINOX_CONFIG_PATH`
     *    - `EXE_NAME`
     *    - `EXE_PATH`
     *    - `GLASS_FISH_DOMAIN_NAME`
     *    - `GLASS_FISH_INSTANCE_NAME`
     *    - `GOOGLE_APP_ENGINE_INSTANCE`
     *    - `GOOGLE_APP_ENGINE_SERVICE`
     *    - `GOOGLE_CLOUD_PROJECT`
     *    - `HYBRIS_BIN_DIRECTORY`
     *    - `HYBRIS_CONFIG_DIRECTORY`
     *    - `HYBRIS_DATA_DIRECTORY`
     *    - `IBM_CICS_REGION`
     *    - `IBM_CTG_NAME`
     *    - `IBM_IMS_CONNECT_REGION`
     *    - `IBM_IMS_CONTROL_REGION`
     *    - `IBM_IMS_MESSAGE_PROCESSING_REGION`
     *    - `IBM_IMS_SOAP_GW_NAME`
     *    - `IBM_INTEGRATION_NODE_NAME`
     *    - `IBM_INTEGRATION_SERVER_NAME`
     *    - `IIS_APP_POOL`
     *    - `IIS_ROLE_NAME`
     *    - `JAVA_JAR_FILE`
     *    - `JAVA_JAR_PATH`
     *    - `JAVA_MAIN_CLASS`
     *    - `JAVA_MAIN_MODULE`
     *    - `JBOSS_HOME`
     *    - `JBOSS_MODE`
     *    - `JBOSS_SERVER_NAME`
     *    - `KUBERNETES_BASE_POD_NAME`
     *    - `KUBERNETES_CONTAINER_NAME`
     *    - `KUBERNETES_FULL_POD_NAME`
     *    - `KUBERNETES_NAMESPACE`
     *    - `KUBERNETES_POD_UID`
     *    - `MSSQL_INSTANCE_NAME`
     *    - `NODE_JS_APP_BASE_DIRECTORY`
     *    - `NODE_JS_APP_NAME`
     *    - `NODE_JS_SCRIPT_NAME`
     *    - `ORACLE_SID`
     *    - `PG_ID_CALC_INPUT_KEY_LINKAGE`
     *    - `PHP_SCRIPT_PATH`
     *    - `PHP_WORKING_DIRECTORY`
     *    - `RUBY_APP_ROOT_PATH`
     *    - `RUBY_SCRIPT_PATH`
     *    - `RULE_RESULT`
     *    - `SOFTWAREAG_INSTALL_ROOT`
     *    - `SOFTWAREAG_PRODUCTPROPNAME`
     *    - `SPRINGBOOT_APP_NAME`
     *    - `SPRINGBOOT_PROFILE_NAME`
     *    - `SPRINGBOOT_STARTUP_CLASS`
     *    - `TIBCO_BUSINESSWORKS_CE_APP_NAME`
     *    - `TIBCO_BUSINESSWORKS_CE_VERSION`
     *    - `TIBCO_BUSINESS_WORKS_APP_NODE_NAME`
     *    - `TIBCO_BUSINESS_WORKS_APP_SPACE_NAME`
     *    - `TIBCO_BUSINESS_WORKS_DOMAIN_NAME`
     *    - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE`
     *    - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH`
     *    - `TIBCO_BUSINESS_WORKS_HOME`
     *    - `VARNISH_INSTANCE_NAME`
     *    - `WEB_LOGIC_CLUSTER_NAME`
     *    - `WEB_LOGIC_DOMAIN_NAME`
     *    - `WEB_LOGIC_HOME`
     *    - `WEB_LOGIC_NAME`
     *    - `WEB_SPHERE_CELL_NAME`
     *    - `WEB_SPHERE_CLUSTER_NAME`
     *    - `WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME`
     */
    dynamicKey: string;
    /**
     * if specified, needs to be `STRING`
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface HostNamingConditionConditionStringKey {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are
     *    - `AMAZON_ECR_IMAGE_ACCOUNT_ID`
     *    - `AMAZON_ECR_IMAGE_REGION`
     *    - `AMAZON_LAMBDA_FUNCTION_NAME`
     *    - `AMAZON_REGION`
     *    - `APACHE_CONFIG_PATH`
     *    - `APACHE_SPARK_MASTER_IP_ADDRESS`
     *    - `ASP_DOT_NET_CORE_APPLICATION_PATH`
     *    - `AWS_ECS_CLUSTER`
     *    - `AWS_ECS_CONTAINERNAME`
     *    - `AWS_ECS_FAMILY`
     *    - `AWS_ECS_REVISION`
     *    - `CASSANDRA_CLUSTER_NAME`
     *    - `CATALINA_BASE`
     *    - `CATALINA_HOME`
     *    - `CLOUD_FOUNDRY_APP_ID`
     *    - `CLOUD_FOUNDRY_APP_NAME`
     *    - `CLOUD_FOUNDRY_INSTANCE_INDEX`
     *    - `CLOUD_FOUNDRY_SPACE_ID`
     *    - `CLOUD_FOUNDRY_SPACE_NAME`
     *    - `COLDFUSION_JVM_CONFIG_FILE`
     *    - `COLDFUSION_SERVICE_NAME`
     *    - `COMMAND_LINE_ARGS`
     *    - `DOTNET_COMMAND`
     *    - `DOTNET_COMMAND_PATH`
     *    - `DYNATRACE_CLUSTER_ID`
     *    - `DYNATRACE_NODE_ID`
     *    - `ELASTICSEARCH_CLUSTER_NAME`
     *    - `ELASTICSEARCH_NODE_NAME`
     *    - `EQUINOX_CONFIG_PATH`
     *    - `EXE_NAME`
     *    - `EXE_PATH`
     *    - `GLASS_FISH_DOMAIN_NAME`
     *    - `GLASS_FISH_INSTANCE_NAME`
     *    - `GOOGLE_APP_ENGINE_INSTANCE`
     *    - `GOOGLE_APP_ENGINE_SERVICE`
     *    - `GOOGLE_CLOUD_PROJECT`
     *    - `HYBRIS_BIN_DIRECTORY`
     *    - `HYBRIS_CONFIG_DIRECTORY`
     *    - `HYBRIS_DATA_DIRECTORY`
     *    - `IBM_CICS_REGION`
     *    - `IBM_CTG_NAME`
     *    - `IBM_IMS_CONNECT_REGION`
     *    - `IBM_IMS_CONTROL_REGION`
     *    - `IBM_IMS_MESSAGE_PROCESSING_REGION`
     *    - `IBM_IMS_SOAP_GW_NAME`
     *    - `IBM_INTEGRATION_NODE_NAME`
     *    - `IBM_INTEGRATION_SERVER_NAME`
     *    - `IIS_APP_POOL`
     *    - `IIS_ROLE_NAME`
     *    - `JAVA_JAR_FILE`
     *    - `JAVA_JAR_PATH`
     *    - `JAVA_MAIN_CLASS`
     *    - `JAVA_MAIN_MODULE`
     *    - `JBOSS_HOME`
     *    - `JBOSS_MODE`
     *    - `JBOSS_SERVER_NAME`
     *    - `KUBERNETES_BASE_POD_NAME`
     *    - `KUBERNETES_CONTAINER_NAME`
     *    - `KUBERNETES_FULL_POD_NAME`
     *    - `KUBERNETES_NAMESPACE`
     *    - `KUBERNETES_POD_UID`
     *    - `MSSQL_INSTANCE_NAME`
     *    - `NODE_JS_APP_BASE_DIRECTORY`
     *    - `NODE_JS_APP_NAME`
     *    - `NODE_JS_SCRIPT_NAME`
     *    - `ORACLE_SID`
     *    - `PG_ID_CALC_INPUT_KEY_LINKAGE`
     *    - `PHP_SCRIPT_PATH`
     *    - `PHP_WORKING_DIRECTORY`
     *    - `RUBY_APP_ROOT_PATH`
     *    - `RUBY_SCRIPT_PATH`
     *    - `RULE_RESULT`
     *    - `SOFTWAREAG_INSTALL_ROOT`
     *    - `SOFTWAREAG_PRODUCTPROPNAME`
     *    - `SPRINGBOOT_APP_NAME`
     *    - `SPRINGBOOT_PROFILE_NAME`
     *    - `SPRINGBOOT_STARTUP_CLASS`
     *    - `TIBCO_BUSINESSWORKS_CE_APP_NAME`
     *    - `TIBCO_BUSINESSWORKS_CE_VERSION`
     *    - `TIBCO_BUSINESS_WORKS_APP_NODE_NAME`
     *    - `TIBCO_BUSINESS_WORKS_APP_SPACE_NAME`
     *    - `TIBCO_BUSINESS_WORKS_DOMAIN_NAME`
     *    - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE`
     *    - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH`
     *    - `TIBCO_BUSINESS_WORKS_HOME`
     *    - `VARNISH_INSTANCE_NAME`
     *    - `WEB_LOGIC_CLUSTER_NAME`
     *    - `WEB_LOGIC_DOMAIN_NAME`
     *    - `WEB_LOGIC_HOME`
     *    - `WEB_LOGIC_NAME`
     *    - `WEB_SPHERE_CELL_NAME`
     *    - `WEB_SPHERE_CLUSTER_NAME`
     *    - `WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME`
     */
    dynamicKey: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface HostNamingConditionConditionSyntheticEngine {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are  EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are CLASSIC and CUSTOM
     */
    value?: string;
}

export interface HostNamingConditionConditionSyntheticEngineTypeComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are  EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be SYNTHETIC_ENGINE_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are CLASSIC and CUSTOM
     */
    value?: string;
}

export interface HostNamingConditionConditionTag {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and TAG_KEY_EQUALS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * Tag of a Dynatrace entity
     */
    value?: outputs.HostNamingConditionConditionTagValue;
}

export interface HostNamingConditionConditionTagComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and TAG_KEY_EQUALS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be TAG
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * Tag of a Dynatrace entity
     */
    value?: outputs.HostNamingConditionConditionTagComparisonValue;
}

export interface HostNamingConditionConditionTagComparisonValue {
    /**
     * The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
     */
    context: string;
    /**
     * The key of the tag. Custom tags have the tag value here
     */
    key: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value of the tag. Not applicable to custom tags
     */
    value?: string;
}

export interface HostNamingConditionConditionTagValue {
    /**
     * The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
     */
    context: string;
    /**
     * The key of the tag. Custom tags have the tag value here
     */
    key: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value of the tag. Not applicable to custom tags
     */
    value?: string;
}

export interface HostNamingConditionConditionTech {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: outputs.HostNamingConditionConditionTechValue;
}

export interface HostNamingConditionConditionTechValue {
    /**
     * Predefined technology, if technology is not predefined, then the verbatim type must be set.
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * Non-predefined technology, use for custom technologies
     */
    verbatimType?: string;
}

export interface HttpMonitorAnomalyDetection {
    /**
     * Thresholds for loading times
     */
    loadingTimeThresholds?: outputs.HttpMonitorAnomalyDetectionLoadingTimeThreshold[];
    /**
     * Outage handling configuration
     */
    outageHandlings?: outputs.HttpMonitorAnomalyDetectionOutageHandling[];
}

export interface HttpMonitorAnomalyDetectionLoadingTimeThreshold {
    /**
     * Performance threshold is enabled (`true`) or disabled (`false`)
     */
    enabled?: boolean;
    /**
     * The list of performance threshold rules
     */
    thresholds?: outputs.HttpMonitorAnomalyDetectionLoadingTimeThresholdThreshold[];
}

export interface HttpMonitorAnomalyDetectionLoadingTimeThresholdThreshold {
    /**
     * The list of performance threshold rules
     */
    thresholds: outputs.HttpMonitorAnomalyDetectionLoadingTimeThresholdThresholdThreshold[];
}

export interface HttpMonitorAnomalyDetectionLoadingTimeThresholdThresholdThreshold {
    /**
     * Specify the event to which an ACTION threshold applies
     */
    eventIndex?: number;
    /**
     * Specify the request to which an ACTION threshold applies
     */
    requestIndex?: number;
    /**
     * The type of the threshold: `TOTAL` (total loading time) or `ACTION` (action loading time)
     */
    type?: string;
    /**
     * Notify if monitor takes longer than *X* milliseconds to load
     */
    valueMs: number;
}

export interface HttpMonitorAnomalyDetectionOutageHandling {
    /**
     * (Field has overlap with `dynatrace.BrowserMonitorOutage` and `dynatrace.HttpMonitorOutage`) When enabled (`true`), generate a problem and send an alert when the monitor is unavailable at all configured locations
     */
    globalOutage?: boolean;
    /**
     * (Field has overlap with `dynatrace.BrowserMonitorOutage` and `dynatrace.HttpMonitorOutage`) Global outage handling configuration.
     */
    globalOutagePolicies?: outputs.HttpMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicy[];
    /**
     * (Field has overlap with `dynatrace.BrowserMonitorOutage` and `dynatrace.HttpMonitorOutage`) When enabled (`true`), generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location
     */
    localOutage?: boolean;
    /**
     * (Field has overlap with `dynatrace.BrowserMonitorOutage` and `dynatrace.HttpMonitorOutage`) Local outage handling configuration. 
     *
     *  Alert if **affectedLocations** of locations are unable to access the web application **consecutiveRuns** times consecutively
     */
    localOutagePolicies?: outputs.HttpMonitorAnomalyDetectionOutageHandlingLocalOutagePolicy[];
    /**
     * (Field has overlap with `dynatrace.BrowserMonitorOutage` and `dynatrace.HttpMonitorOutage`) Schedule retry if browser monitor execution results in a fail. For HTTP monitors this property is ignored
     */
    retryOnError?: boolean;
}

export interface HttpMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicy {
    /**
     * The number of consecutive fails to trigger an alert
     */
    consecutiveRuns: number;
}

export interface HttpMonitorAnomalyDetectionOutageHandlingLocalOutagePolicy {
    /**
     * The number of affected locations to trigger an alert
     */
    affectedLocations: number;
    /**
     * The number of consecutive fails to trigger an alert
     */
    consecutiveRuns: number;
}

export interface HttpMonitorCookiesCookies {
    cookies: outputs.HttpMonitorCookiesCookiesCookie[];
}

export interface HttpMonitorCookiesCookiesCookie {
    /**
     * Enclose placeholder values in brackets, for example {email}
     */
    domain: string;
    /**
     * Enclose placeholder values in brackets, for example {email}
     */
    name: string;
    /**
     * Enclose placeholder values in brackets, for example {email}
     */
    path?: string;
    /**
     * Enclose placeholder values in brackets, for example {email}
     */
    value: string;
}

export interface HttpMonitorPerformanceThresholds {
    thresholds: outputs.HttpMonitorPerformanceThresholdsThreshold[];
}

export interface HttpMonitorPerformanceThresholdsThreshold {
    /**
     * Request
     */
    event: string;
    /**
     * Threshold (in seconds)
     */
    threshold: number;
}

export interface HttpMonitorScript {
    /**
     * A HTTP request to be performed by the monitor.
     */
    requests: outputs.HttpMonitorScriptRequest[];
}

export interface HttpMonitorScriptRequest {
    /**
     * Authentication options for this request
     */
    authentication?: outputs.HttpMonitorScriptRequestAuthentication;
    /**
     * The body of the HTTP request.
     */
    body?: string;
    /**
     * The setup of the monitor
     */
    configuration?: outputs.HttpMonitorScriptRequestConfiguration;
    /**
     * A short description of the event to appear in the web UI.
     */
    description?: string;
    /**
     * The HTTP method of the request.
     */
    method: string;
    /**
     * Javascript code to execute after sending the request.
     */
    postProcessing?: string;
    /**
     * Javascript code to execute before sending the request.
     */
    preProcessing?: string;
    /**
     * Adapt request timeout option - the maximum time this request is allowed to consume. Keep in mind the maximum timeout of the complete monitor is 60 seconds
     */
    requestTimeout?: number;
    /**
     * The URL to check.
     */
    url: string;
    /**
     * Validation helps you verify that your HTTP monitor loads the expected content
     */
    validation?: outputs.HttpMonitorScriptRequestValidation;
}

export interface HttpMonitorScriptRequestAuthentication {
    /**
     * The ID of the credentials within the Dynatrace Credentials Vault.
     */
    credentials: string;
    /**
     * The KDC IP. Valid and required only if the type of authentication is `KERBEROS`.
     */
    kdcIp?: string;
    /**
     * The Realm Name. Valid and required only if the type of authentication is `KERBEROS`.
     */
    realmName?: string;
    /**
     * The type of authentication. Possible values are `BASIC_AUTHENTICATION`, `NTLM` and `KERBEROS`.
     */
    type: string;
}

export interface HttpMonitorScriptRequestConfiguration {
    /**
     * If set to `false`, then the monitor fails with invalid SSL certificates.
     */
    acceptAnyCertificate?: boolean;
    /**
     * The client certificate, if applicable - eg. CREDENTIALS_VAULT-XXXXXXXXXXXXXXXX
     */
    clientCertificate?: string;
    /**
     * If set to `false`, redirects are reported as successful requests with response code 3xx.
     *
     * If not set, the `false` option is used.
     */
    followRedirects?: boolean;
    /**
     * The setup of the monitor
     */
    headers?: outputs.HttpMonitorScriptRequestConfigurationHeaders;
    /**
     * Option not to store and display request and response bodies and header values in execution details, `true` or `false`. If not set, `false`.
     */
    sensitiveData?: boolean;
    /**
     * The User agent of the request
     */
    userAgent?: string;
}

export interface HttpMonitorScriptRequestConfigurationHeaders {
    /**
     * contains an HTTP header of the request
     */
    headers: outputs.HttpMonitorScriptRequestConfigurationHeadersHeader[];
}

export interface HttpMonitorScriptRequestConfigurationHeadersHeader {
    /**
     * The key of the header
     */
    name: string;
    /**
     * The value of the header
     */
    value: string;
}

export interface HttpMonitorScriptRequestValidation {
    /**
     * A list of validation rules
     */
    rules: outputs.HttpMonitorScriptRequestValidationRule[];
}

export interface HttpMonitorScriptRequestValidationRule {
    /**
     * The validation condition. `true` means validation succeeds if the specified content/element is found. `false` means validation fails if the specified content/element is found. Always specify `false` for `certificateExpiryDateConstraint` to fail the monitor if SSL certificate expiry is within the specified number of days
     */
    passIfFound?: boolean;
    /**
     * The type of the rule. Possible values are `patternConstraint`, `regexConstraint`, `httpStatusesList` and `certificateExpiryDateConstraint`
     */
    type: string;
    /**
     * The content to look for
     */
    value: string;
}

export interface HttpMonitorScriptScript {
    /**
     * A HTTP request to be performed by the monitor.
     */
    requests: outputs.HttpMonitorScriptScriptRequest[];
}

export interface HttpMonitorScriptScriptRequest {
    /**
     * Authentication options for this request
     */
    authentication?: outputs.HttpMonitorScriptScriptRequestAuthentication;
    /**
     * The body of the HTTP request.
     */
    body?: string;
    /**
     * The setup of the monitor
     */
    configuration?: outputs.HttpMonitorScriptScriptRequestConfiguration;
    /**
     * A short description of the event to appear in the web UI.
     */
    description?: string;
    /**
     * The HTTP method of the request.
     */
    method: string;
    /**
     * Javascript code to execute after sending the request.
     */
    postProcessing?: string;
    /**
     * Javascript code to execute before sending the request.
     */
    preProcessing?: string;
    /**
     * Adapt request timeout option - the maximum time this request is allowed to consume. Keep in mind the maximum timeout of the complete monitor is 60 seconds
     */
    requestTimeout?: number;
    /**
     * The URL to check.
     */
    url: string;
    /**
     * Validation helps you verify that your HTTP monitor loads the expected content
     */
    validation?: outputs.HttpMonitorScriptScriptRequestValidation;
}

export interface HttpMonitorScriptScriptRequestAuthentication {
    /**
     * The ID of the credentials within the Dynatrace Credentials Vault.
     */
    credentials: string;
    /**
     * The KDC IP. Valid and required only if the type of authentication is `KERBEROS`.
     */
    kdcIp?: string;
    /**
     * The Realm Name. Valid and required only if the type of authentication is `KERBEROS`.
     */
    realmName?: string;
    /**
     * The type of authentication. Possible values are `BASIC_AUTHENTICATION`, `NTLM` and `KERBEROS`.
     */
    type: string;
}

export interface HttpMonitorScriptScriptRequestConfiguration {
    /**
     * If set to `false`, then the monitor fails with invalid SSL certificates.
     */
    acceptAnyCertificate?: boolean;
    /**
     * The client certificate, if applicable - eg. CREDENTIALS_VAULT-XXXXXXXXXXXXXXXX
     */
    clientCertificate?: string;
    /**
     * If set to `false`, redirects are reported as successful requests with response code 3xx.
     *
     * If not set, the `false` option is used.
     */
    followRedirects?: boolean;
    /**
     * The setup of the monitor
     */
    headers?: outputs.HttpMonitorScriptScriptRequestConfigurationHeaders;
    /**
     * Option not to store and display request and response bodies and header values in execution details, `true` or `false`. If not set, `false`.
     */
    sensitiveData?: boolean;
    /**
     * The User agent of the request
     */
    userAgent?: string;
}

export interface HttpMonitorScriptScriptRequestConfigurationHeaders {
    /**
     * contains an HTTP header of the request
     */
    headers: outputs.HttpMonitorScriptScriptRequestConfigurationHeadersHeader[];
}

export interface HttpMonitorScriptScriptRequestConfigurationHeadersHeader {
    /**
     * The key of the header
     */
    name: string;
    /**
     * The value of the header
     */
    value: string;
}

export interface HttpMonitorScriptScriptRequestValidation {
    /**
     * A list of validation rules
     */
    rules: outputs.HttpMonitorScriptScriptRequestValidationRule[];
}

export interface HttpMonitorScriptScriptRequestValidationRule {
    /**
     * The validation condition. `true` means validation succeeds if the specified content/element is found. `false` means validation fails if the specified content/element is found. Always specify `false` for `certificateExpiryDateConstraint` to fail the monitor if SSL certificate expiry is within the specified number of days
     */
    passIfFound?: boolean;
    /**
     * The type of the rule. Possible values are `patternConstraint`, `regexConstraint`, `httpStatusesList` and `certificateExpiryDateConstraint`
     */
    type: string;
    /**
     * The content to look for
     */
    value: string;
}

export interface HttpMonitorTag {
    /**
     * Tag with source of a Dynatrace entity.
     */
    tags?: outputs.HttpMonitorTagTag[];
}

export interface HttpMonitorTagTag {
    /**
     * The origin of the tag. Supported values are `AWS`, `AWS_GENERIC`, `AZURE`, `CLOUD_FOUNDRY`, `CONTEXTLESS`, `ENVIRONMENT`, `GOOGLE_CLOUD` and `KUBERNETES`.
     */
    context: string;
    /**
     * The key of the tag.
     *
     * Custom tags have the tag value here.
     */
    key: string;
    /**
     * The source of the tag. Supported values are `USER`, `RULE_BASED` and `AUTO`.
     */
    source?: string;
    /**
     * The value of the tag.
     *
     * Not applicable to custom tags.
     */
    value?: string;
}

export interface HubSubscriptionsTokenSubscriptions {
    tokenSubscriptions: outputs.HubSubscriptionsTokenSubscriptionsTokenSubscription[];
}

export interface HubSubscriptionsTokenSubscriptionsTokenSubscription {
    /**
     * no documentation available
     */
    description?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Name of subscription
     */
    name: string;
    /**
     * Subscription token
     */
    token: string;
}

export interface IamGroupPermissions {
    /**
     * A Permission
     */
    permissions: outputs.IamGroupPermissionsPermission[];
}

export interface IamGroupPermissionsPermission {
    /**
     * Possible values: `account-company-info`, `account-user-management`, `account-viewer`, `account-saml-flexible-federation`, `tenant-viewer`, `tenant-manage-settings`, `tenant-agent-install`, `tenant-logviewer`, `tenant-view-sensitive-request-data`, `tenant-configure-request-capture-data`, `tenant-replay-sessions-with-masking`, `tenant-replay-sessions-without-masking`, `tenant-manage-security-problems`, `tenant-view-security-problems`, `tenant-manage-support-tickets`
     */
    name: string;
    /**
     * If `type` is `account` this attribute should hold the UUID of the account. If `type` is 'tenant`this attribute should hold the ID of the environment (`https://\n\n.live.dynatrace.com`). If`type`is`management-zone`this attribute should hold a value like`\n\n:\n\n. You need to use the attribute `legacyId` when referring to a resource `dynatrace.ManagementZoneV2` or a data source `dynatrace.ManagementZone`.
     */
    scope: string;
    /**
     * The type of this permission. Possible values are `account`, `tenant`, `management-zone`
     */
    type: string;
}

export interface IamPolicyBindingsV2Policy {
    boundaries?: string[];
    /**
     * Either the attribute `id` or the attribute `uuid` of a `dynatrace.IamPolicy`. Initially just the `id` attribute was supported (which is a concatenation of several configuration settings) - and is still supported for backwards compatibility
     */
    id: string;
    metadata?: {[key: string]: string};
    parameters?: {[key: string]: string};
}

export interface ImsBridgesQueueManager {
    /**
     * Queue manager definition for IMS bridge
     */
    queueManagers?: outputs.ImsBridgesQueueManagerQueueManager[];
}

export interface ImsBridgesQueueManagerQueueManager {
    /**
     * The name of the queue manager
     */
    name: string;
    /**
     * Queue(s) that belong to the queue manager
     */
    queueManagerQueues?: string[];
}

export interface K8sClusterAnomaliesCpuRequestsSaturation {
    /**
     * Alert if
     */
    configuration?: outputs.K8sClusterAnomaliesCpuRequestsSaturationConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sClusterAnomaliesCpuRequestsSaturationConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * of cluster CPU capacity for at least
     */
    samplePeriodInMinutes: number;
    /**
     * amount of requested CPU is above
     */
    threshold: number;
}

export interface K8sClusterAnomaliesMemoryRequestsSaturation {
    /**
     * Alert if
     */
    configuration?: outputs.K8sClusterAnomaliesMemoryRequestsSaturationConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sClusterAnomaliesMemoryRequestsSaturationConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * of cluster memory capacity for at least
     */
    samplePeriodInMinutes: number;
    /**
     * amount of requested memory is above
     */
    threshold: number;
}

export interface K8sClusterAnomaliesMonitoringIssues {
    /**
     * Alert if
     */
    configuration?: outputs.K8sClusterAnomaliesMonitoringIssuesConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sClusterAnomaliesMonitoringIssuesConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * monitoring is not available for at least
     */
    samplePeriodInMinutes: number;
}

export interface K8sClusterAnomaliesPodsSaturation {
    /**
     * Alert if
     */
    configuration?: outputs.K8sClusterAnomaliesPodsSaturationConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sClusterAnomaliesPodsSaturationConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * of schedulable pod capacity for at least
     */
    samplePeriodInMinutes: number;
    /**
     * number of running pods is higher than
     */
    threshold: number;
}

export interface K8sClusterAnomaliesReadinessIssues {
    /**
     * Alert if
     */
    configuration?: outputs.K8sClusterAnomaliesReadinessIssuesConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sClusterAnomaliesReadinessIssuesConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * cluster is not ready for at least
     */
    samplePeriodInMinutes: number;
}

export interface K8sCredentialsEventsFieldSelector {
    /**
     * Whether subscription to this events field selector is enabled (value set to `true`). If disabled (value set to `false`), Dynatrace will stop fetching events from the Kubernetes API for this events field selector
     */
    active: boolean;
    /**
     * The field selector string (url decoding is applied) when storing it.
     */
    fieldSelector: string;
    /**
     * A label of the events field selector.
     */
    label: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
}

export interface K8sMonitoringEventPatterns {
    eventPatterns: outputs.K8sMonitoringEventPatternsEventPattern[];
}

export interface K8sMonitoringEventPatternsEventPattern {
    /**
     * Activate
     */
    active: boolean;
    /**
     * Field selector name
     */
    label: string;
    /**
     * The set of allowed characters for this field has been extended with ActiveGate version 1.259. For more details, see the [documentation](https://dt-url.net/7h23wuk#set-up-event-field-selectors).
     */
    pattern: string;
}

export interface K8sNamespaceAnomaliesCpuLimitsQuotaSaturation {
    /**
     * Alert if
     */
    configuration?: outputs.K8sNamespaceAnomaliesCpuLimitsQuotaSaturationConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sNamespaceAnomaliesCpuLimitsQuotaSaturationConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * of quota for at least
     */
    samplePeriodInMinutes: number;
    /**
     * amount of utilized namespace CPU is above
     */
    threshold: number;
}

export interface K8sNamespaceAnomaliesCpuRequestsQuotaSaturation {
    /**
     * Alert if
     */
    configuration?: outputs.K8sNamespaceAnomaliesCpuRequestsQuotaSaturationConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sNamespaceAnomaliesCpuRequestsQuotaSaturationConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * of quota for at least
     */
    samplePeriodInMinutes: number;
    /**
     * amount of requested namespace CPU is above
     */
    threshold: number;
}

export interface K8sNamespaceAnomaliesMemoryLimitsQuotaSaturation {
    /**
     * Alert if
     */
    configuration?: outputs.K8sNamespaceAnomaliesMemoryLimitsQuotaSaturationConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sNamespaceAnomaliesMemoryLimitsQuotaSaturationConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * of quota for at least
     */
    samplePeriodInMinutes: number;
    /**
     * amount of utilized namespace memory is above
     */
    threshold: number;
}

export interface K8sNamespaceAnomaliesMemoryRequestsQuotaSaturation {
    /**
     * Alert if
     */
    configuration?: outputs.K8sNamespaceAnomaliesMemoryRequestsQuotaSaturationConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sNamespaceAnomaliesMemoryRequestsQuotaSaturationConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * of quota for at least
     */
    samplePeriodInMinutes: number;
    /**
     * amount of requested namespace memory is above
     */
    threshold: number;
}

export interface K8sNamespaceAnomaliesPodsQuotaSaturation {
    /**
     * Alert if
     */
    configuration?: outputs.K8sNamespaceAnomaliesPodsQuotaSaturationConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sNamespaceAnomaliesPodsQuotaSaturationConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * of quota for at least
     */
    samplePeriodInMinutes: number;
    /**
     * number of utilized namespace pods is above
     */
    threshold: number;
}

export interface K8sNodeAnomaliesCpuRequestsSaturation {
    /**
     * Alert if
     */
    configuration?: outputs.K8sNodeAnomaliesCpuRequestsSaturationConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sNodeAnomaliesCpuRequestsSaturationConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * of node CPU capacity for at least
     */
    samplePeriodInMinutes: number;
    /**
     * amount of requested CPU is higher than
     */
    threshold: number;
}

export interface K8sNodeAnomaliesMemoryRequestsSaturation {
    /**
     * Alert if
     */
    configuration?: outputs.K8sNodeAnomaliesMemoryRequestsSaturationConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sNodeAnomaliesMemoryRequestsSaturationConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * of node memory capacity for at least
     */
    samplePeriodInMinutes: number;
    /**
     * amount of requested memory is higher than
     */
    threshold: number;
}

export interface K8sNodeAnomaliesNodeProblematicCondition {
    /**
     * Alert if
     */
    configuration?: outputs.K8sNodeAnomaliesNodeProblematicConditionConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sNodeAnomaliesNodeProblematicConditionConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * node has problematic conditions for at least
     */
    samplePeriodInMinutes: number;
}

export interface K8sNodeAnomaliesPodsSaturation {
    /**
     * Alert if
     */
    configuration?: outputs.K8sNodeAnomaliesPodsSaturationConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sNodeAnomaliesPodsSaturationConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * of node capacity for at least
     */
    samplePeriodInMinutes: number;
    /**
     * number of pods running on node is higher than
     */
    threshold: number;
}

export interface K8sNodeAnomaliesReadinessIssues {
    /**
     * Alert if
     */
    configuration?: outputs.K8sNodeAnomaliesReadinessIssuesConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sNodeAnomaliesReadinessIssuesConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * node is not ready for at least
     */
    samplePeriodInMinutes: number;
}

export interface K8sPvcAnomaliesLowDiskSpaceCritical {
    /**
     * Alert if
     */
    configuration?: outputs.K8sPvcAnomaliesLowDiskSpaceCriticalConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sPvcAnomaliesLowDiskSpaceCriticalConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * for at least
     */
    samplePeriodInMinutes: number;
    /**
     * the available disk space is below
     */
    threshold: number;
}

export interface K8sPvcAnomaliesLowDiskSpaceCriticalPercentage {
    /**
     * Alert if
     */
    configuration?: outputs.K8sPvcAnomaliesLowDiskSpaceCriticalPercentageConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sPvcAnomaliesLowDiskSpaceCriticalPercentageConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * for at least
     */
    samplePeriodInMinutes: number;
    /**
     * the available disk space is below
     */
    threshold: number;
}

export interface K8sWorkloadAnomaliesContainerRestarts {
    /**
     * Alert if
     */
    configuration?: outputs.K8sWorkloadAnomaliesContainerRestartsConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sWorkloadAnomaliesContainerRestartsConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * per minute, for any
     */
    samplePeriodInMinutes: number;
    /**
     * there is at least
     */
    threshold: number;
}

export interface K8sWorkloadAnomaliesDeploymentStuck {
    /**
     * Alert if
     */
    configuration?: outputs.K8sWorkloadAnomaliesDeploymentStuckConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sWorkloadAnomaliesDeploymentStuckConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * workload stops progressing for at least
     */
    samplePeriodInMinutes: number;
}

export interface K8sWorkloadAnomaliesHighCpuThrottling {
    /**
     * Alert if
     */
    configuration?: outputs.K8sWorkloadAnomaliesHighCpuThrottlingConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sWorkloadAnomaliesHighCpuThrottlingConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * of CPU usage for at least
     */
    samplePeriodInMinutes: number;
    /**
     * amount of CPU throttling is above
     */
    threshold: number;
}

export interface K8sWorkloadAnomaliesHighCpuUsage {
    /**
     * Alert if
     */
    configuration?: outputs.K8sWorkloadAnomaliesHighCpuUsageConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sWorkloadAnomaliesHighCpuUsageConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * of defined CPU limits for at least
     */
    samplePeriodInMinutes: number;
    /**
     * amount of utilized workload CPU is above
     */
    threshold: number;
}

export interface K8sWorkloadAnomaliesHighMemoryUsage {
    /**
     * Alert if
     */
    configuration?: outputs.K8sWorkloadAnomaliesHighMemoryUsageConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sWorkloadAnomaliesHighMemoryUsageConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * of defined memory limits for at least
     */
    samplePeriodInMinutes: number;
    /**
     * amount of utilized workload memory is above
     */
    threshold: number;
}

export interface K8sWorkloadAnomaliesJobFailureEvents {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sWorkloadAnomaliesNotAllPodsReady {
    /**
     * Alert if
     */
    configuration?: outputs.K8sWorkloadAnomaliesNotAllPodsReadyConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sWorkloadAnomaliesNotAllPodsReadyConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * some workload pods are not ready for at least
     */
    samplePeriodInMinutes: number;
}

export interface K8sWorkloadAnomaliesOomKills {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sWorkloadAnomaliesPendingPods {
    /**
     * Alert if
     */
    configuration?: outputs.K8sWorkloadAnomaliesPendingPodsConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sWorkloadAnomaliesPendingPodsConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * stuck in pending state for at least
     */
    samplePeriodInMinutes: number;
    /**
     * there is at least
     */
    threshold: number;
}

export interface K8sWorkloadAnomaliesPodBackoffEvents {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sWorkloadAnomaliesPodEvictionEvents {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sWorkloadAnomaliesPodPreemptionEvents {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sWorkloadAnomaliesPodStuckInTerminating {
    /**
     * Alert if
     */
    configuration?: outputs.K8sWorkloadAnomaliesPodStuckInTerminatingConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sWorkloadAnomaliesPodStuckInTerminatingConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * pod termination stops progressing for at least
     */
    samplePeriodInMinutes: number;
}

export interface K8sWorkloadAnomaliesWorkloadWithoutReadyPods {
    /**
     * Alert if
     */
    configuration?: outputs.K8sWorkloadAnomaliesWorkloadWithoutReadyPodsConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sWorkloadAnomaliesWorkloadWithoutReadyPodsConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * workload has no ready pods for at least
     */
    samplePeriodInMinutes: number;
}

export interface KubernetesAppKubernetesAppOptions {
    /**
     * New Kubernetes experience
     */
    enableKubernetesApp: boolean;
}

export interface KubernetesEnrichmentRules {
    rules: outputs.KubernetesEnrichmentRulesRule[];
}

export interface KubernetesEnrichmentRulesRule {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     *
     * @deprecated Attribute no longer exists in the schema.
     */
    enabled?: boolean;
    /**
     * Uses the key of the annotation or label as field name
     */
    primaryGrailTag?: boolean;
    /**
     * The source must follow the syntax of Kubernetes annotation/label keys as defined in the [Kubernetes documentation](https://dt-url.net/2c02sbn).
     */
    source: string;
    /**
     * Required when `primaryGrailTag` is omitted or `false`. Possible Values: `dt.cost.costcenter``, `dt.cost.product``, `dt.security_context
     */
    target?: string;
    /**
     * Possible Values: `ANNOTATION`, `LABEL`
     */
    type: string;
}

export interface KubernetesEventPatterns {
    eventPatterns: outputs.KubernetesEventPatternsEventPattern[];
}

export interface KubernetesEventPatternsEventPattern {
    /**
     * Activate
     */
    active: boolean;
    /**
     * Field selector name
     */
    label: string;
    /**
     * The set of allowed characters for this field has been extended with ActiveGate version 1.259. For more details, see the [documentation](https://dt-url.net/7h23wuk#set-up-event-field-selectors).
     */
    pattern: string;
}

export interface LimitOutboundConnectionsAllowedOutboundConnections {
    /**
     * If enabled, the Dynatrace JavaScript runtime will only be able to connect to the specified hosts.
     */
    enforced: boolean;
    /**
     * The Dynatrace JavaScript runtime will only be to connect to these hosts.
     */
    hostLists?: string[];
}

export interface LogCustomSourceContext {
    contexts: outputs.LogCustomSourceContextContext[];
}

export interface LogCustomSourceContextContext {
    /**
     * Possible Values: `Dt_entity_process_group`
     */
    attribute: string;
    /**
     * no documentation available
     */
    values: string[];
}

export interface LogCustomSourceCustomLogSource {
    /**
     * Accept binary content
     */
    acceptBinary?: boolean;
    /**
     * no documentation available
     */
    encoding?: string;
    /**
     * Possible Values: `LOG_PATH_PATTERN`, `WINDOWS_EVENT_LOG`
     */
    type: string;
    /**
     * (Required attribute for cluster v1.291 and under) It might be either an absolute path to log(s) with optional wildcards or Windows Event Log name.
     */
    values?: string[];
    /**
     * (Required attribute for cluster v1.292+) It might be either an absolute path to log(s) with optional wildcards or Windows Event Log name.
     */
    valuesAndEnrichment?: outputs.LogCustomSourceCustomLogSourceValuesAndEnrichment;
}

export interface LogCustomSourceCustomLogSourceValuesAndEnrichment {
    customLogSourceWithEnrichments: outputs.LogCustomSourceCustomLogSourceValuesAndEnrichmentCustomLogSourceWithEnrichment[];
}

export interface LogCustomSourceCustomLogSourceValuesAndEnrichmentCustomLogSourceWithEnrichment {
    /**
     * Optional field that allows to define attributes that will enrich logs. ${N} can be used in attribute value to expand the value matched by wildcards where N denotes the number of the wildcard the expand
     */
    enrichment?: outputs.LogCustomSourceCustomLogSourceValuesAndEnrichmentCustomLogSourceWithEnrichmentEnrichment;
    /**
     * Values
     */
    path: string;
}

export interface LogCustomSourceCustomLogSourceValuesAndEnrichmentCustomLogSourceWithEnrichmentEnrichment {
    enrichments: outputs.LogCustomSourceCustomLogSourceValuesAndEnrichmentCustomLogSourceWithEnrichmentEnrichmentEnrichment[];
}

export interface LogCustomSourceCustomLogSourceValuesAndEnrichmentCustomLogSourceWithEnrichmentEnrichmentEnrichment {
    /**
     * no documentation available
     */
    key?: string;
    /**
     * Possible Values: `Attribute`
     */
    type: string;
    /**
     * no documentation available
     */
    value?: string;
}

export interface LogEventsEventTemplate {
    /**
     * Davis® AI will try to merge this event into existing problems, otherwise a new problem will always be created.
     */
    davisMerge?: boolean;
    /**
     * The description of the event to trigger.
     */
    description: string;
    /**
     * Possible Values: `AVAILABILITY`, `CUSTOM_ALERT`, `CUSTOM_ANNOTATION`, `CUSTOM_CONFIGURATION`, `CUSTOM_DEPLOYMENT`, `ERROR`, `INFO`, `MARKED_FOR_TERMINATION`, `RESOURCE`, `SLOWDOWN`
     */
    eventType: string;
    /**
     * Set of additional key-value properties to be attached to the triggered event.
     */
    metadata?: outputs.LogEventsEventTemplateMetadata;
    /**
     * The title of the event to trigger.
     */
    title: string;
}

export interface LogEventsEventTemplateMetadata {
    items: outputs.LogEventsEventTemplateMetadataItem[];
}

export interface LogEventsEventTemplateMetadataItem {
    /**
     * Type 'dt.' for key hints.
     */
    metadataKey: string;
    /**
     * no documentation available
     */
    metadataValue: string;
}

export interface LogProcessingProcessorDefinition {
    /**
     * Processor definition
     */
    rule: string;
}

export interface LogProcessingRuleTesting {
    /**
     * Sample log in JSON format.
     */
    sampleLog: string;
}

export interface LogSecurityContextSecurityContextRule {
    /**
     * Matcher
     */
    query: string;
    /**
     * Rule name
     */
    ruleName: string;
    /**
     * Literal value to be set
     */
    value?: string;
    /**
     * Possible Values: `FIELD`, `LITERAL`
     */
    valueSource: string;
    /**
     * Name of field used to copy value
     */
    valueSourceField?: string;
}

export interface LogSensitiveDataMaskingMasking {
    /**
     * Maximum one capture group is allowed. If none was given, the whole expression will be treated as a capture group.
     */
    expression: string;
    /**
     * The string to replace the masked expression with. Irrelevant if `type` is `SHA1`.
     */
    replacement?: string;
    /**
     * Possible Values: `SHA1`, `STRING`
     */
    type: string;
}

export interface LogSensitiveDataMaskingMatchers {
    matchers: outputs.LogSensitiveDataMaskingMatchersMatcher[];
}

export interface LogSensitiveDataMaskingMatchersMatcher {
    /**
     * Possible Values: `Container_name`, `Dt_entity_container_group`, `Dt_entity_process_group`, `Host_tag`, `K8s_container_name`, `K8s_deployment_name`, `K8s_namespace_name`, `K8s_pod_annotation`, `K8s_pod_label`, `K8s_workload_kind`, `K8s_workload_name`, `Log_source`, `Log_source_origin`, `Process_technology`
     */
    attribute: string;
    /**
     * Possible Values: `MATCHES`
     */
    operator: string;
    /**
     * no documentation available
     */
    values: string[];
}

export interface LogStorageMatchers {
    matchers: outputs.LogStorageMatchersMatcher[];
}

export interface LogStorageMatchersMatcher {
    /**
     * Possible Values: `Container_name`, `Dt_entity_container_group`, `Dt_entity_process_group`, `Host_tag`, `Journald_unit`, `K8s_container_name`, `K8s_deployment_name`, `K8s_namespace_name`, `K8s_pod_annotation`, `K8s_pod_label`, `K8s_workload_kind`, `K8s_workload_name`, `Log_content`, `Log_source`, `Log_source_origin`, `Loglevel`, `Process_technology`, `Winlog_eventid`, `Winlog_keywords`, `Winlog_opcode`, `Winlog_provider`, `Winlog_task`, `Winlog_username`
     */
    attribute: string;
    /**
     * Possible Values: `MATCHES`
     */
    operator: string;
    /**
     * no documentation available
     */
    values: string[];
}

export interface LogTimestampEntryBoundary {
    /**
     * no documentation available
     */
    pattern?: string;
}

export interface LogTimestampMatchers {
    matchers: outputs.LogTimestampMatchersMatcher[];
}

export interface LogTimestampMatchersMatcher {
    /**
     * Possible Values: `Container_name`, `Dt_entity_container_group`, `Dt_entity_process_group`, `Host_tag`, `K8s_container_name`, `K8s_deployment_name`, `K8s_namespace_name`, `K8s_pod_annotation`, `K8s_pod_label`, `K8s_workload_kind`, `K8s_workload_name`, `Log_source`, `Log_source_origin`, `Process_technology`
     */
    attribute: string;
    /**
     * Possible Values: `MATCHES`
     */
    operator: string;
    /**
     * no documentation available
     */
    values: string[];
}

export interface MaintenanceFilters {
    filters: outputs.MaintenanceFiltersFilter[];
}

export interface MaintenanceFiltersFilter {
    /**
     * A specific entity that should match this maintenance window.. **Note**: If an entity type filter value is set, it must be equal to the type of the selected entity. Otherwise this maintenance window will not match.
     */
    entityId?: string;
    /**
     * Entities which contain all of the configured tags will match this maintenance window.
     */
    entityTags?: string[];
    /**
     * Type of entities this maintenance window should match.. If no entity type is selected all entities regardless of the type will match.
     */
    entityType?: string;
    /**
     * Entities which are part of all the configured management zones will match this maintenance window.
     */
    managementZones?: string[];
}

export interface MaintenanceGeneralProperties {
    /**
     * A short description of the maintenance purpose.
     */
    description?: string;
    /**
     * Disables the execution of the synthetic monitors that are within [the scope of this maintenance window](https://dt-url.net/0e0341m).
     */
    disableSynthetic: boolean;
    /**
     * The name of the maintenance window, displayed in the UI
     */
    name: string;
    /**
     * The type of suppression of alerting and problem detection during the maintenance. Possible Values: `DETECT_PROBLEMS_AND_ALERT`, `DETECT_PROBLEMS_DONT_ALERT`, `DONT_DETECT_PROBLEMS`
     */
    suppression: string;
    /**
     * The type of the maintenance, possible values: `PLANNED` or `UNPLANNED`
     */
    type: string;
}

export interface MaintenanceSchedule {
    /**
     * The configuration for maintenance windows occuring daily
     */
    dailyRecurrence?: outputs.MaintenanceScheduleDailyRecurrence;
    /**
     * The configuration for maintenance windows occuring monthly
     */
    monthlyRecurrence?: outputs.MaintenanceScheduleMonthlyRecurrence;
    /**
     * The configuration for maintenance windows occuring once
     */
    onceRecurrence?: outputs.MaintenanceScheduleOnceRecurrence;
    /**
     * The type maintenance window, possible values: `DAILY`, `MONTHLY`, `ONCE`, `WEEKLY`
     */
    type: string;
    /**
     * The configuration for maintenance windows occuring weekly
     */
    weeklyRecurrence?: outputs.MaintenanceScheduleWeeklyRecurrence;
}

export interface MaintenanceScheduleDailyRecurrence {
    /**
     * The recurrence date range of the maintenance window
     */
    recurrenceRange: outputs.MaintenanceScheduleDailyRecurrenceRecurrenceRange;
    /**
     * The time window of the maintenance window
     */
    timeWindow: outputs.MaintenanceScheduleDailyRecurrenceTimeWindow;
}

export interface MaintenanceScheduleDailyRecurrenceRecurrenceRange {
    /**
     * The end date of the recurrence range in YYYY-MM-DD format
     */
    endDate: string;
    /**
     * The start date of the recurrence range in YYYY-MM-DD format
     */
    startDate: string;
}

export interface MaintenanceScheduleDailyRecurrenceTimeWindow {
    /**
     * The end time of the maintenance window validity period in hh:mm:ss format
     */
    endTime: string;
    /**
     * The start time of the maintenance window validity period in hh:mm:ss format
     */
    startTime: string;
    /**
     * The time zone of the start and end time. Default time zone is UTC. You can use either UTC offset `UTC+01:00` format or the IANA Time Zone Database format (for example, `Europe/Vienna`)
     */
    timeZone: string;
}

export interface MaintenanceScheduleMonthlyRecurrence {
    /**
     * The day of the month for monthly maintenance. If the selected day does not fall within the month, the maintenance window will be active on the last day of the month.
     */
    dayOfMonth: number;
    /**
     * The recurrence date range of the maintenance window
     */
    recurrenceRange: outputs.MaintenanceScheduleMonthlyRecurrenceRecurrenceRange;
    /**
     * The time window of the maintenance window
     */
    timeWindow: outputs.MaintenanceScheduleMonthlyRecurrenceTimeWindow;
}

export interface MaintenanceScheduleMonthlyRecurrenceRecurrenceRange {
    /**
     * The end date of the recurrence range in YYYY-MM-DD format
     */
    endDate: string;
    /**
     * The start date of the recurrence range in YYYY-MM-DD format
     */
    startDate: string;
}

export interface MaintenanceScheduleMonthlyRecurrenceTimeWindow {
    /**
     * The end time of the maintenance window validity period in hh:mm:ss format
     */
    endTime: string;
    /**
     * The start time of the maintenance window validity period in hh:mm:ss format
     */
    startTime: string;
    /**
     * The time zone of the start and end time. Default time zone is UTC. You can use either UTC offset `UTC+01:00` format or the IANA Time Zone Database format (for example, `Europe/Vienna`)
     */
    timeZone: string;
}

export interface MaintenanceScheduleOnceRecurrence {
    /**
     * The end time of the maintenance window validity period in YYYY-MM-DDThh:mm:ss format (for example, `2022-01-01T08:00:00`)
     */
    endTime: string;
    /**
     * The start time of the maintenance window validity period in YYYY-MM-DDThh:mm:ss format (for example, `2022-01-01T08:00:00`)
     */
    startTime: string;
    /**
     * The time zone of the start and end time. Default time zone is UTC. You can use either UTC offset `UTC+01:00` format or the IANA Time Zone Database format (for example, `Europe/Vienna`)
     */
    timeZone: string;
}

export interface MaintenanceScheduleWeeklyRecurrence {
    /**
     * The day of the week for weekly maintenance, possible values: `FRIDAY`, `MONDAY`, `SATURDAY`, `SUNDAY`, `THURSDAY`, `TUESDAY`, `WEDNESDAY`
     */
    dayOfWeek: string;
    /**
     * The recurrence date range of the maintenance window
     */
    recurrenceRange: outputs.MaintenanceScheduleWeeklyRecurrenceRecurrenceRange;
    /**
     * The time window of the maintenance window
     */
    timeWindow: outputs.MaintenanceScheduleWeeklyRecurrenceTimeWindow;
}

export interface MaintenanceScheduleWeeklyRecurrenceRecurrenceRange {
    /**
     * The end date of the recurrence range in YYYY-MM-DD format
     */
    endDate: string;
    /**
     * The start date of the recurrence range in YYYY-MM-DD format
     */
    startDate: string;
}

export interface MaintenanceScheduleWeeklyRecurrenceTimeWindow {
    /**
     * The end time of the maintenance window validity period in hh:mm:ss format
     */
    endTime: string;
    /**
     * The start time of the maintenance window validity period in hh:mm:ss format
     */
    startTime: string;
    /**
     * The time zone of the start and end time. Default time zone is UTC. You can use either UTC offset `UTC+01:00` format or the IANA Time Zone Database format (for example, `Europe/Vienna`)
     */
    timeZone: string;
}

export interface MaintenanceWindowSchedule {
    /**
     * The end date and time of the maintenance window validity period in yyyy-mm-dd HH:mm format
     */
    end: string;
    /**
     * The recurrence of the maintenance window
     */
    recurrence?: outputs.MaintenanceWindowScheduleRecurrence;
    /**
     * The type of the schedule recurrence. Possible values are `DAILY`, `MONTHLY`, `ONCE` and `WEEKLY`
     */
    recurrenceType: string;
    /**
     * The start date and time of the maintenance window validity period in yyyy-mm-dd HH:mm format
     */
    start: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The time zone of the start and end time. Default time zone is UTC. You can use either UTC offset `UTC+01:00` format or the IANA Time Zone Database format (for example, `Europe/Vienna`)
     */
    zoneId: string;
}

export interface MaintenanceWindowScheduleRecurrence {
    /**
     * The day of the month for monthly maintenance.  The value of `31` is treated as the last day of the month for months that don't have a 31st day. The value of `30` is also treated as the last day of the month for February
     */
    dayOfMonth?: number;
    /**
     * The day of the week for weekly maintenance.  The format is the full name of the day in upper case, for example `THURSDAY`
     */
    dayOfWeek?: string;
    /**
     * The duration of the maintenance window in minutes
     */
    durationMinutes: number;
    /**
     * The start time of the maintenance window in HH:mm format
     */
    startTime: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface MaintenanceWindowScope {
    /**
     * A list of Dynatrace entities (for example, hosts or services) to be included in the scope.  Allowed values are Dynatrace entity IDs
     */
    entities?: string[];
    /**
     * A list of matching rules for dynamic scope formation.  If several rules are set, the OR logic applies
     */
    matches?: outputs.MaintenanceWindowScopeMatch[];
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface MaintenanceWindowScopeMatch {
    /**
     * The ID of a management zone to which the matched entities must belong
     */
    mzId?: string;
    /**
     * The logic that applies when several tags are specified: AND/OR.  If not set, the OR logic is used
     */
    tagCombination?: string;
    /**
     * The tag you want to use for matching.  You can use custom tags from the UI, AWS tags, Cloud Foundry tags, OpenShift/Kubernetes, and tags based on environment variables
     */
    tags?: outputs.MaintenanceWindowScopeMatchTag[];
    /**
     * The type of the Dynatrace entities (for example, hosts or services) you want to pick up by matching
     */
    type?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface MaintenanceWindowScopeMatchTag {
    /**
     * The origin of the tag, such as AWS or Cloud Foundry. Custom tags use the `CONTEXTLESS` value
     */
    context: string;
    /**
     * The key of the tag. Custom tags have the tag value here
     */
    key: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value of the tag. Not applicable to custom tags
     */
    value?: string;
}

export interface ManagementZoneDimensionalRule {
    /**
     * The target of the rule. Possible values are
     *    - `ANY`
     *    - `LOG`
     *    - `METRIC`
     */
    appliesTo: string;
    /**
     * A list of conditions for the management zone. The management zone applies only if **all** conditions are fulfilled
     */
    conditions?: outputs.ManagementZoneDimensionalRuleCondition[];
    /**
     * The rule is enabled (`true`) or disabled (`false`)
     */
    enabled?: boolean;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface ManagementZoneDimensionalRuleCondition {
    /**
     * The reference value for comparison. For conditions of the `DIMENSION` type, specify the key here
     */
    key: string;
    /**
     * How to compare. Possible values are 
     *    - `BEGINS_WITH`
     *    - `EQUALS`
     */
    match: string;
    /**
     * The type of the condition. Possible values are 
     *    - `DIMENSION`
     *    - `LOG_FILE_NAME`
     *    - `METRIC_KEY`
     */
    type: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value of the dimension. Only applicable when type is set to `DIMENSION`
     */
    value?: string;
}

export interface ManagementZoneEntitySelectorBasedRule {
    /**
     * The rule is enabled (`true`) or disabled (`false`)
     */
    enabled?: boolean;
    /**
     * The entity selector string, by which the entities are selected
     */
    selector?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface ManagementZoneRule {
    /**
     * A list of matching rules for the management zone. The management zone applies only if **all** conditions are fulfilled
     */
    conditions?: outputs.ManagementZoneRuleCondition[];
    /**
     * The rule is enabled (`true`) or disabled (`false`)
     */
    enabled?: boolean;
    /**
     * How to apply the management zone to underlying entities:
     *    - `SERVICE_TO_HOST_LIKE`: Apply to underlying hosts of matching services
     *    - `SERVICE_TO_PROCESS_GROUP_LIKE`: Apply to underlying process groups of matching services
     *    - `PROCESS_GROUP_TO_HOST`: Apply to underlying hosts of matching process groups
     *    - `PROCESS_GROUP_TO_SERVICE`: Apply to all services provided by matching process groups
     *    - `HOST_TO_PROCESS_GROUP_INSTANCE`: Apply to processes running on matching hosts
     *    - `CUSTOM_DEVICE_GROUP_TO_CUSTOM_DEVICE`: Apply to custom devices in matching custom device groups
     *    - `AZURE_TO_PG`: Apply to process groups connected to matching Azure entities
     *    - `AZURE_TO_SERVICE`: Apply to services provided by matching Azure entities
     */
    propagationTypes?: string[];
    /**
     * The type of Dynatrace entities the management zone can be applied to
     */
    type: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface ManagementZoneRuleCondition {
    /**
     * Comparison for `APPLICATION_TYPE` attributes
     *
     * @deprecated You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility.
     */
    applicationTypeComparisons?: outputs.ManagementZoneRuleConditionApplicationTypeComparison[];
    /**
     * Comparison for `APPLICATION_TYPE` attributes
     */
    applicationTypes?: outputs.ManagementZoneRuleConditionApplicationType[];
    /**
     * Comparison for `AZURE_COMPUTE_MODE` attributes
     */
    azureComputeModeComparisons?: outputs.ManagementZoneRuleConditionAzureComputeModeComparison[];
    /**
     * Comparison for `AZURE_COMPUTE_MODE` attributes
     *
     * @deprecated You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility.
     */
    azureComputeModes?: outputs.ManagementZoneRuleConditionAzureComputeMode[];
    /**
     * Comparison for `AZURE_SKU` attributes
     *
     * @deprecated You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility.
     */
    azureSkuComparisions?: outputs.ManagementZoneRuleConditionAzureSkuComparision[];
    /**
     * Comparison for `AZURE_SKU` attributes
     */
    azureSkus?: outputs.ManagementZoneRuleConditionAzureSkus[];
    /**
     * A comparison that's yet unknown to the provider. Operator and Value need to be encoded using the 'unknowns' property.
     *
     * @deprecated You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility.
     */
    baseComparisonBasics?: outputs.ManagementZoneRuleConditionBaseComparisonBasic[];
    /**
     * Fallback for not yet known type
     *
     * @deprecated 'base_condition_key' is deprecated. You should use 'key'
     */
    baseConditionKeys?: outputs.ManagementZoneRuleConditionBaseConditionKey[];
    /**
     * Comparison for `BITNESS` attributes
     *
     * @deprecated You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility.
     */
    bitnessComparisions?: outputs.ManagementZoneRuleConditionBitnessComparision[];
    /**
     * Comparison for `BITNESS` attributes
     */
    bitnesses?: outputs.ManagementZoneRuleConditionBitness[];
    /**
     * Comparison for `CLOUD_TYPE` attributes
     *
     * @deprecated You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility.
     */
    cloudTypeComparisons?: outputs.ManagementZoneRuleConditionCloudTypeComparison[];
    /**
     * Comparison for `CLOUD_TYPE` attributes
     */
    cloudTypes?: outputs.ManagementZoneRuleConditionCloudType[];
    /**
     * A comparison that's yet unknown to the provider. Operator and Value need to be encoded using the 'unknowns' property.
     */
    comparisons?: outputs.ManagementZoneRuleConditionComparison[];
    /**
     * Comparison for `CUSTOM_APPLICATION_TYPE` attributes
     *
     * @deprecated You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility.
     */
    customApplicationTypeComparisons?: outputs.ManagementZoneRuleConditionCustomApplicationTypeComparison[];
    /**
     * Comparison for `CUSTOM_APPLICATION_TYPE` attributes
     */
    customApplicationTypes?: outputs.ManagementZoneRuleConditionCustomApplicationType[];
    /**
     * Key for Custom Host Metadata
     *
     * @deprecated 'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata'
     */
    customHostMetadataConditionKeys?: outputs.ManagementZoneRuleConditionCustomHostMetadataConditionKey[];
    /**
     * Key for Custom Host Metadata
     */
    customHostMetadatas?: outputs.ManagementZoneRuleConditionCustomHostMetadata[];
    /**
     * Key for Custom Process Metadata
     *
     * @deprecated 'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata'
     */
    customProcessMetadataConditionKeys?: outputs.ManagementZoneRuleConditionCustomProcessMetadataConditionKey[];
    /**
     * Key for Custom Process Metadata
     */
    customProcessMetadatas?: outputs.ManagementZoneRuleConditionCustomProcessMetadata[];
    /**
     * Comparison for `DATABASE_TOPOLOGY` attributes
     */
    databaseTopologies?: outputs.ManagementZoneRuleConditionDatabaseTopology[];
    /**
     * Comparison for `DATABASE_TOPOLOGY` attributes
     *
     * @deprecated You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility.
     */
    databaseTopologyComparisons?: outputs.ManagementZoneRuleConditionDatabaseTopologyComparison[];
    /**
     * Comparison for `DCRUM_DECODER_TYPE` attributes
     *
     * @deprecated You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility.
     */
    dcrumDecoderComparisons?: outputs.ManagementZoneRuleConditionDcrumDecoderComparison[];
    /**
     * Comparison for `DCRUM_DECODER_TYPE` attributes
     */
    dcrumDecoders?: outputs.ManagementZoneRuleConditionDcrumDecoder[];
    /**
     * Comparison for `ENTITY_ID` attributes
     */
    entities?: outputs.ManagementZoneRuleConditionEntity[];
    /**
     * Comparison for `ENTITY_ID` attributes
     *
     * @deprecated You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility.
     */
    entityIdComparisons?: outputs.ManagementZoneRuleConditionEntityIdComparison[];
    /**
     * Comparison for `SIMPLE_HOST_TECH` attributes
     */
    hostTeches?: outputs.ManagementZoneRuleConditionHostTech[];
    /**
     * `hypervisorTypeComparision` is deprecated. Use `hypervisor` instead
     *
     * @deprecated `hypervisorTypeComparision` is deprecated. Use `hypervisor` instead
     */
    hypervisorTypeComparisions?: outputs.ManagementZoneRuleConditionHypervisorTypeComparision[];
    /**
     * Comparison for `HYPERVISOR_TYPE` attributes
     */
    hypervisors?: outputs.ManagementZoneRuleConditionHypervisor[];
    /**
     * Comparison for `INDEXED_NAME` attributes
     *
     * @deprecated You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedNameComparisons?: outputs.ManagementZoneRuleConditionIndexedNameComparison[];
    /**
     * Comparison for `INDEXED_NAME` attributes
     */
    indexedNames?: outputs.ManagementZoneRuleConditionIndexedName[];
    /**
     * Comparison for `INDEXED_STRING` attributes
     *
     * @deprecated You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedStringComparisons?: outputs.ManagementZoneRuleConditionIndexedStringComparison[];
    /**
     * Comparison for `INDEXED_STRING` attributes
     */
    indexedStrings?: outputs.ManagementZoneRuleConditionIndexedString[];
    /**
     * Comparison for `INDEXED_TAG` attributes
     *
     * @deprecated You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedTagComparisons?: outputs.ManagementZoneRuleConditionIndexedTagComparison[];
    /**
     * Comparison for `INDEXED_TAG` attributes
     */
    indexedTags?: outputs.ManagementZoneRuleConditionIndexedTag[];
    /**
     * Comparison for `INTEGER` attributes
     *
     * @deprecated You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility.
     */
    integerComparisons?: outputs.ManagementZoneRuleConditionIntegerComparison[];
    /**
     * Comparison for `INTEGER` attributes
     */
    integers?: outputs.ManagementZoneRuleConditionInteger[];
    /**
     * Comparison for `IP_ADDRESS` attributes
     *
     * @deprecated You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility.
     */
    ipaddressComparisons?: outputs.ManagementZoneRuleConditionIpaddressComparison[];
    /**
     * Comparison for `IP_ADDRESS` attributes
     */
    ipaddresses?: outputs.ManagementZoneRuleConditionIpaddress[];
    /**
     * Fallback for not yet known type
     */
    keys?: outputs.ManagementZoneRuleConditionKey[];
    /**
     * Comparison for `MOBILE_PLATFORM` attributes
     *
     * @deprecated You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility.
     */
    mobilePlatformComparisons?: outputs.ManagementZoneRuleConditionMobilePlatformComparison[];
    /**
     * Comparison for `MOBILE_PLATFORM` attributes
     */
    mobilePlatforms?: outputs.ManagementZoneRuleConditionMobilePlatform[];
    /**
     * Comparison for `OS_ARCHITECTURE` attributes
     */
    osArches?: outputs.ManagementZoneRuleConditionOsArch[];
    /**
     * Comparison for `OS_TYPE` attributes
     */
    osTypes?: outputs.ManagementZoneRuleConditionOsType[];
    /**
     * Comparison for `OS_ARCHITECTURE` attributes
     *
     * @deprecated You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility.
     */
    osarchitectureComparisons?: outputs.ManagementZoneRuleConditionOsarchitectureComparison[];
    /**
     * Comparison for `OS_TYPE` attributes
     *
     * @deprecated You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility.
     */
    ostypeComparisons?: outputs.ManagementZoneRuleConditionOstypeComparison[];
    /**
     * Comparison for `PAAS_TYPE` attributes
     *
     * @deprecated You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility.
     */
    paasTypeComparisons?: outputs.ManagementZoneRuleConditionPaasTypeComparison[];
    /**
     * Comparison for `PAAS_TYPE` attributes
     */
    paasTypes?: outputs.ManagementZoneRuleConditionPaasType[];
    /**
     * The key for dynamic attributes of the `PROCESS_PREDEFINED_METADATA_KEY` type
     *
     * @deprecated 'process_metadata_condition_key' is deprecated. You should use 'process_metadata'
     */
    processMetadataConditionKeys?: outputs.ManagementZoneRuleConditionProcessMetadataConditionKey[];
    /**
     * The key for dynamic attributes of the `PROCESS_PREDEFINED_METADATA_KEY` type
     */
    processMetadatas?: outputs.ManagementZoneRuleConditionProcessMetadata[];
    /**
     * Comparison for `SERVICE_TOPOLOGY` attributes
     */
    serviceTopologies?: outputs.ManagementZoneRuleConditionServiceTopology[];
    /**
     * Comparison for `SERVICE_TOPOLOGY` attributes
     *
     * @deprecated You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility.
     */
    serviceTopologyComparisons?: outputs.ManagementZoneRuleConditionServiceTopologyComparison[];
    /**
     * Comparison for `SERVICE_TYPE` attributes
     *
     * @deprecated You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility.
     */
    serviceTypeComparisons?: outputs.ManagementZoneRuleConditionServiceTypeComparison[];
    /**
     * Comparison for `SERVICE_TYPE` attributes
     */
    serviceTypes?: outputs.ManagementZoneRuleConditionServiceType[];
    /**
     * Comparison for `SIMPLE_HOST_TECH` attributes
     *
     * @deprecated You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility.
     */
    simpleHostTechComparisons?: outputs.ManagementZoneRuleConditionSimpleHostTechComparison[];
    /**
     * Comparison for `SIMPLE_TECH` attributes
     *
     * @deprecated You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility.
     */
    simpleTechComparisons?: outputs.ManagementZoneRuleConditionSimpleTechComparison[];
    /**
     * Comparison for `STRING` attributes
     *
     * @deprecated You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility.
     */
    stringComparisons?: outputs.ManagementZoneRuleConditionStringComparison[];
    /**
     * The key for dynamic attributes of the `STRING` type
     *
     * @deprecated 'string_condition_key' is deprecated. You should use 'string_key'
     */
    stringConditionKeys?: outputs.ManagementZoneRuleConditionStringConditionKey[];
    /**
     * The key for dynamic attributes of the `STRING` type
     */
    stringKeys?: outputs.ManagementZoneRuleConditionStringKey[];
    /**
     * Comparison for `STRING` attributes
     */
    strings?: outputs.ManagementZoneRuleConditionString[];
    /**
     * Comparison for `SYNTHETIC_ENGINE_TYPE` attributes
     *
     * @deprecated You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility.
     */
    syntheticEngineTypeComparisons?: outputs.ManagementZoneRuleConditionSyntheticEngineTypeComparison[];
    /**
     * Comparison for `SYNTHETIC_ENGINE_TYPE` attributes
     */
    syntheticEngines?: outputs.ManagementZoneRuleConditionSyntheticEngine[];
    /**
     * Comparison for `TAG` attributes
     *
     * @deprecated You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility.
     */
    tagComparisons?: outputs.ManagementZoneRuleConditionTagComparison[];
    /**
     * Comparison for `TAG` attributes
     */
    tags?: outputs.ManagementZoneRuleConditionTag[];
    /**
     * Comparison for `SIMPLE_TECH` attributes
     */
    teches?: outputs.ManagementZoneRuleConditionTech[];
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
}

export interface ManagementZoneRuleConditionApplicationType {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface ManagementZoneRuleConditionApplicationTypeComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be APPLICATION_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface ManagementZoneRuleConditionAzureComputeMode {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are DEDICATED or SHARED.
     */
    value?: string;
}

export interface ManagementZoneRuleConditionAzureComputeModeComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are DEDICATED or SHARED.
     */
    value?: string;
}

export interface ManagementZoneRuleConditionAzureSkuComparision {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be AZURE_SKU
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are BASIC, DYNAMIC, FREE, PREMIUM, SHARED and STANDARD.
     */
    value?: string;
}

export interface ManagementZoneRuleConditionAzureSkus {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are BASIC, DYNAMIC, FREE, PREMIUM, SHARED and STANDARD.
     */
    value?: string;
}

export interface ManagementZoneRuleConditionBaseComparisonBasic {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * The type of comparison
     */
    type: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ManagementZoneRuleConditionBaseConditionKey {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * Defines the actual set of fields depending on the value
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ManagementZoneRuleConditionBitness {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are 32 and 64.
     */
    value?: string;
}

export interface ManagementZoneRuleConditionBitnessComparision {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be BITNESS
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are 32 and 64.
     */
    value?: string;
}

export interface ManagementZoneRuleConditionCloudType {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AZURE, EC2, GOOGLE_CLOUD_PLATFORM, OPENSTACK, ORACLE and UNRECOGNIZED.
     */
    value?: string;
}

export interface ManagementZoneRuleConditionCloudTypeComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be CLOUD_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AZURE, EC2, GOOGLE_CLOUD_PLATFORM, OPENSTACK, ORACLE and UNRECOGNIZED.
     */
    value?: string;
}

export interface ManagementZoneRuleConditionComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * The type of comparison
     */
    type: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ManagementZoneRuleConditionCustomApplicationType {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AMAZON_ECHO, DESKTOP, EMBEDDED, IOT, MICROSOFT_HOLOLENS and UFO.
     */
    value?: string;
}

export interface ManagementZoneRuleConditionCustomApplicationTypeComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be CUSTOM_APPLICATION_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AMAZON_ECHO, DESKTOP, EMBEDDED, IOT, MICROSOFT_HOLOLENS and UFO.
     */
    value?: string;
}

export interface ManagementZoneRuleConditionCustomHostMetadata {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
     */
    dynamicKey: outputs.ManagementZoneRuleConditionCustomHostMetadataDynamicKey;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ManagementZoneRuleConditionCustomHostMetadataConditionKey {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
     */
    dynamicKey: outputs.ManagementZoneRuleConditionCustomHostMetadataConditionKeyDynamicKey;
    /**
     * if specified, needs to be HOST_CUSTOM_METADATA_KEY
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ManagementZoneRuleConditionCustomHostMetadataConditionKeyDynamicKey {
    /**
     * The actual key of the custom metadata
     */
    key: string;
    /**
     * The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
     */
    source: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ManagementZoneRuleConditionCustomHostMetadataDynamicKey {
    /**
     * The actual key of the custom metadata
     */
    key: string;
    /**
     * The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
     */
    source: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ManagementZoneRuleConditionCustomProcessMetadata {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
     */
    dynamicKey: outputs.ManagementZoneRuleConditionCustomProcessMetadataDynamicKey;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ManagementZoneRuleConditionCustomProcessMetadataConditionKey {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
     */
    dynamicKey: outputs.ManagementZoneRuleConditionCustomProcessMetadataConditionKeyDynamicKey;
    /**
     * if specified, needs to be PROCESS_CUSTOM_METADATA_KEY
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ManagementZoneRuleConditionCustomProcessMetadataConditionKeyDynamicKey {
    /**
     * The actual key of the custom metadata
     */
    key: string;
    /**
     * The source of the custom metadata. Possible values are CLOUD_FOUNDRY, ENVIRONMENT, GOOGLE_CLOUD, KUBERNETES and PLUGIN
     */
    source: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ManagementZoneRuleConditionCustomProcessMetadataDynamicKey {
    /**
     * The actual key of the custom metadata
     */
    key: string;
    /**
     * The source of the custom metadata. Possible values are CLOUD_FOUNDRY, ENVIRONMENT, GOOGLE_CLOUD, KUBERNETES and PLUGIN
     */
    source: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ManagementZoneRuleConditionDatabaseTopology {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are CLUSTER, EMBEDDED, FAILOVER, IPC, LOAD_BALANCING, SINGLE_SERVER and UNSPECIFIED.
     */
    value?: string;
}

export interface ManagementZoneRuleConditionDatabaseTopologyComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be DATABASE_TOPOLOGY
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are CLUSTER, EMBEDDED, FAILOVER, IPC, LOAD_BALANCING, SINGLE_SERVER and UNSPECIFIED.
     */
    value?: string;
}

export interface ManagementZoneRuleConditionDcrumDecoder {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are ALL_OTHER, CITRIX_APPFLOW, CITRIX_ICA, CITRIX_ICA_OVER_SSL, DB2_DRDA, HTTP, HTTPS, HTTP_EXPRESS, INFORMIX, MYSQL, ORACLE, SAP_GUI, SAP_GUI_OVER_HTTP, SAP_GUI_OVER_HTTPS, SAP_HANA_DB, SAP_RFC, SSL and TDS.
     */
    value?: string;
}

export interface ManagementZoneRuleConditionDcrumDecoderComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be DCRUM_DECODER_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are ALL_OTHER, CITRIX_APPFLOW, CITRIX_ICA, CITRIX_ICA_OVER_SSL, DB2_DRDA, HTTP, HTTPS, HTTP_EXPRESS, INFORMIX, MYSQL, ORACLE, SAP_GUI, SAP_GUI_OVER_HTTP, SAP_GUI_OVER_HTTPS, SAP_HANA_DB, SAP_RFC, SSL and TDS.
     */
    value?: string;
}

export interface ManagementZoneRuleConditionEntity {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Currently only EQUALS is supported. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface ManagementZoneRuleConditionEntityIdComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Currently only EQUALS is supported. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be ENTITY_ID
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface ManagementZoneRuleConditionHostTech {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: outputs.ManagementZoneRuleConditionHostTechValue;
}

export interface ManagementZoneRuleConditionHostTechValue {
    /**
     * Predefined technology, if technology is not predefined, then the verbatim type must be set. Possible values are APPARMOR, BOSH, BOSHBPM, CLOUDFOUNDRY, CONTAINERD, CRIO, DIEGO_CELL, DOCKER, GARDEN, GRSECURITY, KUBERNETES, OPENSHIFT, OPENSTACK_COMPUTE, OPENSTACK_CONTROLLER and SELINUX
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * Non-predefined technology, use for custom technologies
     */
    verbatimType?: string;
}

export interface ManagementZoneRuleConditionHypervisor {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AHV, HYPER_V, KVM, LPAR, QEMU, VIRTUAL_BOX, VMWARE, WPAR and XEN.
     */
    value?: string;
}

export interface ManagementZoneRuleConditionHypervisorTypeComparision {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be HYPERVISOR_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AHV, HYPER_V, KVM, LPAR, QEMU, VIRTUAL_BOX, VMWARE, WPAR and XEN.
     */
    value?: string;
}

export interface ManagementZoneRuleConditionIndexedName {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS, CONTAINS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface ManagementZoneRuleConditionIndexedNameComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS, CONTAINS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be INDEXED_NAME
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface ManagementZoneRuleConditionIndexedString {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface ManagementZoneRuleConditionIndexedStringComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be INDEXED_STRING
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface ManagementZoneRuleConditionIndexedTag {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * Tag of a Dynatrace entity
     */
    value?: outputs.ManagementZoneRuleConditionIndexedTagValue;
}

export interface ManagementZoneRuleConditionIndexedTagComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be INDEXED_TAG
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * Tag of a Dynatrace entity
     */
    value?: outputs.ManagementZoneRuleConditionIndexedTagComparisonValue;
}

export interface ManagementZoneRuleConditionIndexedTagComparisonValue {
    /**
     * The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
     */
    context: string;
    /**
     * The key of the tag. Custom tags have the tag value here
     */
    key: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value of the tag. Not applicable to custom tags
     */
    value?: string;
}

export interface ManagementZoneRuleConditionIndexedTagValue {
    /**
     * The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
     */
    context: string;
    /**
     * The key of the tag. Custom tags have the tag value here
     */
    key: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value of the tag. Not applicable to custom tags
     */
    value?: string;
}

export interface ManagementZoneRuleConditionInteger {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS, EXISTS, GREATER_THAN, GREATER_THAN_OR_EQUAL, LOWER_THAN and LOWER_THAN_OR_EQUAL. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: number;
}

export interface ManagementZoneRuleConditionIntegerComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS, EXISTS, GREATER_THAN, GREATER_THAN_OR_EQUAL, LOWER_THAN and LOWER_THAN_OR_EQUAL. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be INTEGER
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: number;
}

export interface ManagementZoneRuleConditionIpaddress {
    /**
     * The comparison is case-sensitive (`true`) or insensitive (`false`)
     */
    caseSensitive?: boolean;
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS, IS_IP_IN_RANGE and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface ManagementZoneRuleConditionIpaddressComparison {
    /**
     * The comparison is case-sensitive (`true`) or insensitive (`false`)
     */
    caseSensitive?: boolean;
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS, IS_IP_IN_RANGE and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be IP_ADDRESS
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface ManagementZoneRuleConditionKey {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * Defines the actual set of fields depending on the value
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ManagementZoneRuleConditionMobilePlatform {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are ANDROID, IOS, LINUX, MAC_OS, OTHER, TVOS and WINDOWS.
     */
    value?: string;
}

export interface ManagementZoneRuleConditionMobilePlatformComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be MOBILE_PLATFORM
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are ANDROID, IOS, LINUX, MAC_OS, OTHER, TVOS and WINDOWS.
     */
    value?: string;
}

export interface ManagementZoneRuleConditionOsArch {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are ARM, IA64, PARISC, PPC, PPCLE, S390, SPARC, X86 and ZOS.
     */
    value?: string;
}

export interface ManagementZoneRuleConditionOsType {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AIX, DARWIN, HPUX, LINUX, SOLARIS, WINDOWS and ZOS.
     */
    value?: string;
}

export interface ManagementZoneRuleConditionOsarchitectureComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be OS_ARCHITECTURE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are ARM, IA64, PARISC, PPC, PPCLE, S390, SPARC, X86 and ZOS.
     */
    value?: string;
}

export interface ManagementZoneRuleConditionOstypeComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be OS_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AIX, DARWIN, HPUX, LINUX, SOLARIS, WINDOWS and ZOS.
     */
    value?: string;
}

export interface ManagementZoneRuleConditionPaasType {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AWS_ECS_EC2, AWS_ECS_FARGATE, AWS_LAMBDA, AZURE_FUNCTIONS, AZURE_WEBSITES, CLOUD_FOUNDRY, GOOGLE_APP_ENGINE, HEROKU, KUBERNETES and OPENSHIFT.
     */
    value?: string;
}

export interface ManagementZoneRuleConditionPaasTypeComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be PAAS_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AWS_ECS_EC2, AWS_ECS_FARGATE, AWS_LAMBDA, AZURE_FUNCTIONS, AZURE_WEBSITES, CLOUD_FOUNDRY, GOOGLE_APP_ENGINE, HEROKU, KUBERNETES and OPENSHIFT.
     */
    value?: string;
}

export interface ManagementZoneRuleConditionProcessMetadata {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are AMAZON_ECR_IMAGE_ACCOUNT_ID,AMAZON_ECR_IMAGE_REGION, AMAZON_LAMBDA_FUNCTION_NAME, AMAZON_REGION, APACHE_CONFIG_PATH, APACHE_SPARK_MASTER_IP_ADDRESS, ASP_DOT_NET_CORE_APPLICATION_PATH, AWS_ECS_CLUSTER, AWS_ECS_CONTAINERNAME, AWS_ECS_FAMILY, AWS_ECS_REVISION, CASSANDRA_CLUSTER_NAME, CATALINA_BASE, CATALINA_HOME, CLOUD_FOUNDRY_APP_ID, CLOUD_FOUNDRY_APP_NAME, CLOUD_FOUNDRY_INSTANCE_INDEX, CLOUD_FOUNDRY_SPACE_ID, CLOUD_FOUNDRY_SPACE_NAME, COLDFUSION_JVM_CONFIG_FILE, COLDFUSION_SERVICE_NAME, COMMAND_LINE_ARGS, DOTNET_COMMAND, DOTNET_COMMAND_PATH, DYNATRACE_CLUSTER_ID, DYNATRACE_NODE_ID, ELASTICSEARCH_CLUSTER_NAME, ELASTICSEARCH_NODE_NAME, EQUINOX_CONFIG_PATH, EXE_NAME, EXE_PATH, GLASS_FISH_DOMAIN_NAME, GLASS_FISH_INSTANCE_NAME, GOOGLE_APP_ENGINE_INSTANCE, GOOGLE_APP_ENGINE_SERVICE, GOOGLE_CLOUD_PROJECT, HYBRIS_BIN_DIRECTORY, HYBRIS_CONFIG_DIRECTORY, HYBRIS_DATA_DIRECTORY, IBM_CICS_REGION, IBM_CTG_NAME, IBM_IMS_CONNECT_REGION, IBM_IMS_CONTROL_REGION, IBM_IMS_MESSAGE_PROCESSING_REGION, IBM_IMS_SOAP_GW_NAME, IBM_INTEGRATION_NODE_NAME, IBM_INTEGRATION_SERVER_NAME, IIS_APP_POOL, IIS_ROLE_NAME, JAVA_JAR_FILE, JAVA_JAR_PATH, JAVA_MAIN_CLASS, JAVA_MAIN_MODULE, JBOSS_HOME, JBOSS_MODE, JBOSS_SERVER_NAME, KUBERNETES_BASE_POD_NAME, KUBERNETES_CONTAINER_NAME, KUBERNETES_FULL_POD_NAME, KUBERNETES_NAMESPACE, KUBERNETES_POD_UID, MSSQL_INSTANCE_NAME, NODE_JS_APP_BASE_DIRECTORY, NODE_JS_APP_NAME, NODE_JS_SCRIPT_NAME, ORACLE_SID, PG_ID_CALC_INPUT_KEY_LINKAGE, PHP_SCRIPT_PATH, PHP_WORKING_DIRECTORY, RUBY_APP_ROOT_PATH, RUBY_SCRIPT_PATH, RULE_RESULT, SOFTWAREAG_INSTALL_ROOT, SOFTWAREAG_PRODUCTPROPNAME, SPRINGBOOT_APP_NAME, SPRINGBOOT_PROFILE_NAME, SPRINGBOOT_STARTUP_CLASS, TIBCO_BUSINESSWORKS_CE_APP_NAME, TIBCO_BUSINESSWORKS_CE_VERSION, TIBCO_BUSINESS_WORKS_APP_NODE_NAME, TIBCO_BUSINESS_WORKS_APP_SPACE_NAME, TIBCO_BUSINESS_WORKS_DOMAIN_NAME, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH, TIBCO_BUSINESS_WORKS_HOME, VARNISH_INSTANCE_NAME, WEB_LOGIC_CLUSTER_NAME, WEB_LOGIC_DOMAIN_NAME, WEB_LOGIC_HOME, WEB_LOGIC_NAME, WEB_SPHERE_CELL_NAME, WEB_SPHERE_CLUSTER_NAME, WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME
     */
    dynamicKey: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ManagementZoneRuleConditionProcessMetadataConditionKey {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are AMAZON_ECR_IMAGE_ACCOUNT_ID,AMAZON_ECR_IMAGE_REGION, AMAZON_LAMBDA_FUNCTION_NAME, AMAZON_REGION, APACHE_CONFIG_PATH, APACHE_SPARK_MASTER_IP_ADDRESS, ASP_DOT_NET_CORE_APPLICATION_PATH, AWS_ECS_CLUSTER, AWS_ECS_CONTAINERNAME, AWS_ECS_FAMILY, AWS_ECS_REVISION, CASSANDRA_CLUSTER_NAME, CATALINA_BASE, CATALINA_HOME, CLOUD_FOUNDRY_APP_ID, CLOUD_FOUNDRY_APP_NAME, CLOUD_FOUNDRY_INSTANCE_INDEX, CLOUD_FOUNDRY_SPACE_ID, CLOUD_FOUNDRY_SPACE_NAME, COLDFUSION_JVM_CONFIG_FILE, COLDFUSION_SERVICE_NAME, COMMAND_LINE_ARGS, DOTNET_COMMAND, DOTNET_COMMAND_PATH, DYNATRACE_CLUSTER_ID, DYNATRACE_NODE_ID, ELASTICSEARCH_CLUSTER_NAME, ELASTICSEARCH_NODE_NAME, EQUINOX_CONFIG_PATH, EXE_NAME, EXE_PATH, GLASS_FISH_DOMAIN_NAME, GLASS_FISH_INSTANCE_NAME, GOOGLE_APP_ENGINE_INSTANCE, GOOGLE_APP_ENGINE_SERVICE, GOOGLE_CLOUD_PROJECT, HYBRIS_BIN_DIRECTORY, HYBRIS_CONFIG_DIRECTORY, HYBRIS_DATA_DIRECTORY, IBM_CICS_REGION, IBM_CTG_NAME, IBM_IMS_CONNECT_REGION, IBM_IMS_CONTROL_REGION, IBM_IMS_MESSAGE_PROCESSING_REGION, IBM_IMS_SOAP_GW_NAME, IBM_INTEGRATION_NODE_NAME, IBM_INTEGRATION_SERVER_NAME, IIS_APP_POOL, IIS_ROLE_NAME, JAVA_JAR_FILE, JAVA_JAR_PATH, JAVA_MAIN_CLASS, JAVA_MAIN_MODULE, JBOSS_HOME, JBOSS_MODE, JBOSS_SERVER_NAME, KUBERNETES_BASE_POD_NAME, KUBERNETES_CONTAINER_NAME, KUBERNETES_FULL_POD_NAME, KUBERNETES_NAMESPACE, KUBERNETES_POD_UID, MSSQL_INSTANCE_NAME, NODE_JS_APP_BASE_DIRECTORY, NODE_JS_APP_NAME, NODE_JS_SCRIPT_NAME, ORACLE_SID, PG_ID_CALC_INPUT_KEY_LINKAGE, PHP_SCRIPT_PATH, PHP_WORKING_DIRECTORY, RUBY_APP_ROOT_PATH, RUBY_SCRIPT_PATH, RULE_RESULT, SOFTWAREAG_INSTALL_ROOT, SOFTWAREAG_PRODUCTPROPNAME, SPRINGBOOT_APP_NAME, SPRINGBOOT_PROFILE_NAME, SPRINGBOOT_STARTUP_CLASS, TIBCO_BUSINESSWORKS_CE_APP_NAME, TIBCO_BUSINESSWORKS_CE_VERSION, TIBCO_BUSINESS_WORKS_APP_NODE_NAME, TIBCO_BUSINESS_WORKS_APP_SPACE_NAME, TIBCO_BUSINESS_WORKS_DOMAIN_NAME, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH, TIBCO_BUSINESS_WORKS_HOME, VARNISH_INSTANCE_NAME, WEB_LOGIC_CLUSTER_NAME, WEB_LOGIC_DOMAIN_NAME, WEB_LOGIC_HOME, WEB_LOGIC_NAME, WEB_SPHERE_CELL_NAME, WEB_SPHERE_CLUSTER_NAME, WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME
     */
    dynamicKey: string;
    /**
     * if specified, needs to be PROCESS_PREDEFINED_METADATA_KEY
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ManagementZoneRuleConditionServiceTopology {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are EXTERNAL_SERVICE, FULLY_MONITORED and OPAQUE_SERVICE.
     */
    value?: string;
}

export interface ManagementZoneRuleConditionServiceTopologyComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be SERVICE_TOPOLOGY
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are EXTERNAL_SERVICE, FULLY_MONITORED and OPAQUE_SERVICE.
     */
    value?: string;
}

export interface ManagementZoneRuleConditionServiceType {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are BACKGROUND_ACTIVITY, CICS_SERVICE, CUSTOM_SERVICE, DATABASE_SERVICE, ENTERPRISE_SERVICE_BUS_SERVICE, EXTERNAL, IBM_INTEGRATION_BUS_SERVICE, IMS_SERVICE, MESSAGING_SERVICE, QUEUE_LISTENER_SERVICE, RMI_SERVICE, RPC_SERVICE, WEB_REQUEST_SERVICE and WEB_SERVICE.
     */
    value?: string;
}

export interface ManagementZoneRuleConditionServiceTypeComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be SERVICE_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are BACKGROUND_ACTIVITY, CICS_SERVICE, CUSTOM_SERVICE, DATABASE_SERVICE, ENTERPRISE_SERVICE_BUS_SERVICE, EXTERNAL, IBM_INTEGRATION_BUS_SERVICE, IMS_SERVICE, MESSAGING_SERVICE, QUEUE_LISTENER_SERVICE, RMI_SERVICE, RPC_SERVICE, WEB_REQUEST_SERVICE and WEB_SERVICE.
     */
    value?: string;
}

export interface ManagementZoneRuleConditionSimpleHostTechComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be SIMPLE_HOST_TECH
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: outputs.ManagementZoneRuleConditionSimpleHostTechComparisonValue;
}

export interface ManagementZoneRuleConditionSimpleHostTechComparisonValue {
    /**
     * Predefined technology, if technology is not predefined, then the verbatim type must be set. Possible values are APPARMOR, BOSH, BOSHBPM, CLOUDFOUNDRY, CONTAINERD, CRIO, DIEGO_CELL, DOCKER, GARDEN, GRSECURITY, KUBERNETES, OPENSHIFT, OPENSTACK_COMPUTE, OPENSTACK_CONTROLLER and SELINUX
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * Non-predefined technology, use for custom technologies
     */
    verbatimType?: string;
}

export interface ManagementZoneRuleConditionSimpleTechComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be SIMPLE_TECH
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: outputs.ManagementZoneRuleConditionSimpleTechComparisonValue;
}

export interface ManagementZoneRuleConditionSimpleTechComparisonValue {
    /**
     * Predefined technology, if technology is not predefined, then the verbatim type must be set.
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * Non-predefined technology, use for custom technologies
     */
    verbatimType?: string;
}

export interface ManagementZoneRuleConditionString {
    /**
     * The comparison is case-sensitive (`true`) or insensitive (`false`)
     */
    caseSensitive?: boolean;
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface ManagementZoneRuleConditionStringComparison {
    /**
     * The comparison is case-sensitive (`true`) or insensitive (`false`)
     */
    caseSensitive?: boolean;
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be STRING
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface ManagementZoneRuleConditionStringConditionKey {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are
     *    - `AMAZON_ECR_IMAGE_ACCOUNT_ID`
     *    - `AMAZON_ECR_IMAGE_REGION`
     *    - `AMAZON_LAMBDA_FUNCTION_NAME`
     *    - `AMAZON_REGION`
     *    - `APACHE_CONFIG_PATH`
     *    - `APACHE_SPARK_MASTER_IP_ADDRESS`
     *    - `ASP_DOT_NET_CORE_APPLICATION_PATH`
     *    - `AWS_ECS_CLUSTER`
     *    - `AWS_ECS_CONTAINERNAME`
     *    - `AWS_ECS_FAMILY`
     *    - `AWS_ECS_REVISION`
     *    - `CASSANDRA_CLUSTER_NAME`
     *    - `CATALINA_BASE`
     *    - `CATALINA_HOME`
     *    - `CLOUD_FOUNDRY_APP_ID`
     *    - `CLOUD_FOUNDRY_APP_NAME`
     *    - `CLOUD_FOUNDRY_INSTANCE_INDEX`
     *    - `CLOUD_FOUNDRY_SPACE_ID`
     *    - `CLOUD_FOUNDRY_SPACE_NAME`
     *    - `COLDFUSION_JVM_CONFIG_FILE`
     *    - `COLDFUSION_SERVICE_NAME`
     *    - `COMMAND_LINE_ARGS`
     *    - `DOTNET_COMMAND`
     *    - `DOTNET_COMMAND_PATH`
     *    - `DYNATRACE_CLUSTER_ID`
     *    - `DYNATRACE_NODE_ID`
     *    - `ELASTICSEARCH_CLUSTER_NAME`
     *    - `ELASTICSEARCH_NODE_NAME`
     *    - `EQUINOX_CONFIG_PATH`
     *    - `EXE_NAME`
     *    - `EXE_PATH`
     *    - `GLASS_FISH_DOMAIN_NAME`
     *    - `GLASS_FISH_INSTANCE_NAME`
     *    - `GOOGLE_APP_ENGINE_INSTANCE`
     *    - `GOOGLE_APP_ENGINE_SERVICE`
     *    - `GOOGLE_CLOUD_PROJECT`
     *    - `HYBRIS_BIN_DIRECTORY`
     *    - `HYBRIS_CONFIG_DIRECTORY`
     *    - `HYBRIS_DATA_DIRECTORY`
     *    - `IBM_CICS_REGION`
     *    - `IBM_CTG_NAME`
     *    - `IBM_IMS_CONNECT_REGION`
     *    - `IBM_IMS_CONTROL_REGION`
     *    - `IBM_IMS_MESSAGE_PROCESSING_REGION`
     *    - `IBM_IMS_SOAP_GW_NAME`
     *    - `IBM_INTEGRATION_NODE_NAME`
     *    - `IBM_INTEGRATION_SERVER_NAME`
     *    - `IIS_APP_POOL`
     *    - `IIS_ROLE_NAME`
     *    - `JAVA_JAR_FILE`
     *    - `JAVA_JAR_PATH`
     *    - `JAVA_MAIN_CLASS`
     *    - `JAVA_MAIN_MODULE`
     *    - `JBOSS_HOME`
     *    - `JBOSS_MODE`
     *    - `JBOSS_SERVER_NAME`
     *    - `KUBERNETES_BASE_POD_NAME`
     *    - `KUBERNETES_CONTAINER_NAME`
     *    - `KUBERNETES_FULL_POD_NAME`
     *    - `KUBERNETES_NAMESPACE`
     *    - `KUBERNETES_POD_UID`
     *    - `MSSQL_INSTANCE_NAME`
     *    - `NODE_JS_APP_BASE_DIRECTORY`
     *    - `NODE_JS_APP_NAME`
     *    - `NODE_JS_SCRIPT_NAME`
     *    - `ORACLE_SID`
     *    - `PG_ID_CALC_INPUT_KEY_LINKAGE`
     *    - `PHP_SCRIPT_PATH`
     *    - `PHP_WORKING_DIRECTORY`
     *    - `RUBY_APP_ROOT_PATH`
     *    - `RUBY_SCRIPT_PATH`
     *    - `RULE_RESULT`
     *    - `SOFTWAREAG_INSTALL_ROOT`
     *    - `SOFTWAREAG_PRODUCTPROPNAME`
     *    - `SPRINGBOOT_APP_NAME`
     *    - `SPRINGBOOT_PROFILE_NAME`
     *    - `SPRINGBOOT_STARTUP_CLASS`
     *    - `TIBCO_BUSINESSWORKS_CE_APP_NAME`
     *    - `TIBCO_BUSINESSWORKS_CE_VERSION`
     *    - `TIBCO_BUSINESS_WORKS_APP_NODE_NAME`
     *    - `TIBCO_BUSINESS_WORKS_APP_SPACE_NAME`
     *    - `TIBCO_BUSINESS_WORKS_DOMAIN_NAME`
     *    - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE`
     *    - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH`
     *    - `TIBCO_BUSINESS_WORKS_HOME`
     *    - `VARNISH_INSTANCE_NAME`
     *    - `WEB_LOGIC_CLUSTER_NAME`
     *    - `WEB_LOGIC_DOMAIN_NAME`
     *    - `WEB_LOGIC_HOME`
     *    - `WEB_LOGIC_NAME`
     *    - `WEB_SPHERE_CELL_NAME`
     *    - `WEB_SPHERE_CLUSTER_NAME`
     *    - `WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME`
     */
    dynamicKey: string;
    /**
     * if specified, needs to be `STRING`
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ManagementZoneRuleConditionStringKey {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are
     *    - `AMAZON_ECR_IMAGE_ACCOUNT_ID`
     *    - `AMAZON_ECR_IMAGE_REGION`
     *    - `AMAZON_LAMBDA_FUNCTION_NAME`
     *    - `AMAZON_REGION`
     *    - `APACHE_CONFIG_PATH`
     *    - `APACHE_SPARK_MASTER_IP_ADDRESS`
     *    - `ASP_DOT_NET_CORE_APPLICATION_PATH`
     *    - `AWS_ECS_CLUSTER`
     *    - `AWS_ECS_CONTAINERNAME`
     *    - `AWS_ECS_FAMILY`
     *    - `AWS_ECS_REVISION`
     *    - `CASSANDRA_CLUSTER_NAME`
     *    - `CATALINA_BASE`
     *    - `CATALINA_HOME`
     *    - `CLOUD_FOUNDRY_APP_ID`
     *    - `CLOUD_FOUNDRY_APP_NAME`
     *    - `CLOUD_FOUNDRY_INSTANCE_INDEX`
     *    - `CLOUD_FOUNDRY_SPACE_ID`
     *    - `CLOUD_FOUNDRY_SPACE_NAME`
     *    - `COLDFUSION_JVM_CONFIG_FILE`
     *    - `COLDFUSION_SERVICE_NAME`
     *    - `COMMAND_LINE_ARGS`
     *    - `DOTNET_COMMAND`
     *    - `DOTNET_COMMAND_PATH`
     *    - `DYNATRACE_CLUSTER_ID`
     *    - `DYNATRACE_NODE_ID`
     *    - `ELASTICSEARCH_CLUSTER_NAME`
     *    - `ELASTICSEARCH_NODE_NAME`
     *    - `EQUINOX_CONFIG_PATH`
     *    - `EXE_NAME`
     *    - `EXE_PATH`
     *    - `GLASS_FISH_DOMAIN_NAME`
     *    - `GLASS_FISH_INSTANCE_NAME`
     *    - `GOOGLE_APP_ENGINE_INSTANCE`
     *    - `GOOGLE_APP_ENGINE_SERVICE`
     *    - `GOOGLE_CLOUD_PROJECT`
     *    - `HYBRIS_BIN_DIRECTORY`
     *    - `HYBRIS_CONFIG_DIRECTORY`
     *    - `HYBRIS_DATA_DIRECTORY`
     *    - `IBM_CICS_REGION`
     *    - `IBM_CTG_NAME`
     *    - `IBM_IMS_CONNECT_REGION`
     *    - `IBM_IMS_CONTROL_REGION`
     *    - `IBM_IMS_MESSAGE_PROCESSING_REGION`
     *    - `IBM_IMS_SOAP_GW_NAME`
     *    - `IBM_INTEGRATION_NODE_NAME`
     *    - `IBM_INTEGRATION_SERVER_NAME`
     *    - `IIS_APP_POOL`
     *    - `IIS_ROLE_NAME`
     *    - `JAVA_JAR_FILE`
     *    - `JAVA_JAR_PATH`
     *    - `JAVA_MAIN_CLASS`
     *    - `JAVA_MAIN_MODULE`
     *    - `JBOSS_HOME`
     *    - `JBOSS_MODE`
     *    - `JBOSS_SERVER_NAME`
     *    - `KUBERNETES_BASE_POD_NAME`
     *    - `KUBERNETES_CONTAINER_NAME`
     *    - `KUBERNETES_FULL_POD_NAME`
     *    - `KUBERNETES_NAMESPACE`
     *    - `KUBERNETES_POD_UID`
     *    - `MSSQL_INSTANCE_NAME`
     *    - `NODE_JS_APP_BASE_DIRECTORY`
     *    - `NODE_JS_APP_NAME`
     *    - `NODE_JS_SCRIPT_NAME`
     *    - `ORACLE_SID`
     *    - `PG_ID_CALC_INPUT_KEY_LINKAGE`
     *    - `PHP_SCRIPT_PATH`
     *    - `PHP_WORKING_DIRECTORY`
     *    - `RUBY_APP_ROOT_PATH`
     *    - `RUBY_SCRIPT_PATH`
     *    - `RULE_RESULT`
     *    - `SOFTWAREAG_INSTALL_ROOT`
     *    - `SOFTWAREAG_PRODUCTPROPNAME`
     *    - `SPRINGBOOT_APP_NAME`
     *    - `SPRINGBOOT_PROFILE_NAME`
     *    - `SPRINGBOOT_STARTUP_CLASS`
     *    - `TIBCO_BUSINESSWORKS_CE_APP_NAME`
     *    - `TIBCO_BUSINESSWORKS_CE_VERSION`
     *    - `TIBCO_BUSINESS_WORKS_APP_NODE_NAME`
     *    - `TIBCO_BUSINESS_WORKS_APP_SPACE_NAME`
     *    - `TIBCO_BUSINESS_WORKS_DOMAIN_NAME`
     *    - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE`
     *    - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH`
     *    - `TIBCO_BUSINESS_WORKS_HOME`
     *    - `VARNISH_INSTANCE_NAME`
     *    - `WEB_LOGIC_CLUSTER_NAME`
     *    - `WEB_LOGIC_DOMAIN_NAME`
     *    - `WEB_LOGIC_HOME`
     *    - `WEB_LOGIC_NAME`
     *    - `WEB_SPHERE_CELL_NAME`
     *    - `WEB_SPHERE_CLUSTER_NAME`
     *    - `WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME`
     */
    dynamicKey: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ManagementZoneRuleConditionSyntheticEngine {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are  EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are CLASSIC and CUSTOM
     */
    value?: string;
}

export interface ManagementZoneRuleConditionSyntheticEngineTypeComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are  EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be SYNTHETIC_ENGINE_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are CLASSIC and CUSTOM
     */
    value?: string;
}

export interface ManagementZoneRuleConditionTag {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and TAG_KEY_EQUALS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * Tag of a Dynatrace entity
     */
    value?: outputs.ManagementZoneRuleConditionTagValue;
}

export interface ManagementZoneRuleConditionTagComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and TAG_KEY_EQUALS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be TAG
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * Tag of a Dynatrace entity
     */
    value?: outputs.ManagementZoneRuleConditionTagComparisonValue;
}

export interface ManagementZoneRuleConditionTagComparisonValue {
    /**
     * The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
     */
    context: string;
    /**
     * The key of the tag. Custom tags have the tag value here
     */
    key: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value of the tag. Not applicable to custom tags
     */
    value?: string;
}

export interface ManagementZoneRuleConditionTagValue {
    /**
     * The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
     */
    context: string;
    /**
     * The key of the tag. Custom tags have the tag value here
     */
    key: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value of the tag. Not applicable to custom tags
     */
    value?: string;
}

export interface ManagementZoneRuleConditionTech {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: outputs.ManagementZoneRuleConditionTechValue;
}

export interface ManagementZoneRuleConditionTechValue {
    /**
     * Predefined technology, if technology is not predefined, then the verbatim type must be set.
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * Non-predefined technology, use for custom technologies
     */
    verbatimType?: string;
}

export interface ManagementZoneV2Rules {
    /**
     * A management zone rule
     */
    rules: outputs.ManagementZoneV2RulesRule[];
}

export interface ManagementZoneV2RulesRule {
    /**
     * no documentation available
     */
    attributeRule?: outputs.ManagementZoneV2RulesRuleAttributeRule;
    /**
     * no documentation available
     */
    dimensionRule?: outputs.ManagementZoneV2RulesRuleDimensionRule;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * The documentation of the entity selector can be found [here](https://dt-url.net/apientityselector).
     */
    entitySelector?: string;
    /**
     * Possible Values: `DIMENSION`, `ME`, `SELECTOR`
     */
    type: string;
}

export interface ManagementZoneV2RulesRuleAttributeRule {
    /**
     * no documentation available
     */
    attributeConditions: outputs.ManagementZoneV2RulesRuleAttributeRuleAttributeConditions;
    /**
     * Apply to process groups connected to matching Azure entities
     */
    azureToPgpropagation?: boolean;
    /**
     * Apply to services provided by matching Azure entities
     */
    azureToServicePropagation?: boolean;
    /**
     * Apply to custom devices in a custom device group
     */
    customDeviceGroupToCustomDevicePropagation?: boolean;
    /**
     * Possible Values: `APPMON_SERVER`, `APPMON_SYSTEM_PROFILE`, `AWS_ACCOUNT`, `AWS_APPLICATION_LOAD_BALANCER`, `AWS_AUTO_SCALING_GROUP`, `AWS_CLASSIC_LOAD_BALANCER`, `AWS_NETWORK_LOAD_BALANCER`, `AWS_RELATIONAL_DATABASE_SERVICE`, `AZURE`, `BROWSER_MONITOR`, `CLOUD_APPLICATION`, `CLOUD_APPLICATION_NAMESPACE`, `CLOUD_FOUNDRY_FOUNDATION`, `CUSTOM_APPLICATION`, `CUSTOM_DEVICE`, `CUSTOM_DEVICE_GROUP`, `DATA_CENTER_SERVICE`, `ENTERPRISE_APPLICATION`, `ESXI_HOST`, `EXTERNAL_MONITOR`, `HOST`, `HOST_GROUP`, `HTTP_MONITOR`, `KUBERNETES_CLUSTER`, `KUBERNETES_SERVICE`, `MOBILE_APPLICATION`, `OPENSTACK_ACCOUNT`, `PROCESS_GROUP`, `QUEUE`, `SERVICE`, `WEB_APPLICATION`
     */
    entityType: string;
    /**
     * Apply to processes running on matching hosts. `entityType` must be set to `HOST`
     */
    hostToPgpropagation?: boolean;
    /**
     * Apply to underlying hosts of matching process groups. `entityType` must be set to `PROCESS_GROUP`
     */
    pgToHostPropagation?: boolean;
    /**
     * Apply to all services provided by the process groups. `entityType` must be set to `PROCESS_GROUP`
     */
    pgToServicePropagation?: boolean;
    /**
     * Apply to underlying hosts of matching services. `entityType` must be set to `SERVICE`
     */
    serviceToHostPropagation?: boolean;
    /**
     * Apply to underlying process groups of matching services. `entityType` must be set to `SERVICE`
     */
    serviceToPgpropagation?: boolean;
}

export interface ManagementZoneV2RulesRuleAttributeRuleAttributeConditions {
    /**
     * Attribute conditions
     */
    conditions: outputs.ManagementZoneV2RulesRuleAttributeRuleAttributeConditionsCondition[];
}

export interface ManagementZoneV2RulesRuleAttributeRuleAttributeConditionsCondition {
    /**
     * Case sensitive
     */
    caseSensitive?: boolean;
    /**
     * Dynamic key
     */
    dynamicKey?: string;
    /**
     * Key source
     */
    dynamicKeySource?: string;
    /**
     * Value
     */
    entityId?: string;
    /**
     * Value
     */
    enumValue?: string;
    /**
     * Value
     */
    integerValue?: number;
    /**
     * Possible Values: `APPMON_SERVER_NAME`, `APPMON_SYSTEM_PROFILE_NAME`, `AWS_ACCOUNT_ID`, `AWS_ACCOUNT_NAME`, `AWS_APPLICATION_LOAD_BALANCER_NAME`, `AWS_APPLICATION_LOAD_BALANCER_TAGS`, `AWS_AUTO_SCALING_GROUP_NAME`, `AWS_AUTO_SCALING_GROUP_TAGS`, `AWS_AVAILABILITY_ZONE_NAME`, `AWS_CLASSIC_LOAD_BALANCER_FRONTEND_PORTS`, `AWS_CLASSIC_LOAD_BALANCER_NAME`, `AWS_CLASSIC_LOAD_BALANCER_TAGS`, `AWS_NETWORK_LOAD_BALANCER_NAME`, `AWS_NETWORK_LOAD_BALANCER_TAGS`, `AWS_RELATIONAL_DATABASE_SERVICE_DB_NAME`, `AWS_RELATIONAL_DATABASE_SERVICE_ENDPOINT`, `AWS_RELATIONAL_DATABASE_SERVICE_ENGINE`, `AWS_RELATIONAL_DATABASE_SERVICE_INSTANCE_CLASS`, `AWS_RELATIONAL_DATABASE_SERVICE_NAME`, `AWS_RELATIONAL_DATABASE_SERVICE_PORT`, `AWS_RELATIONAL_DATABASE_SERVICE_TAGS`, `AZURE_ENTITY_NAME`, `AZURE_ENTITY_TAGS`, `AZURE_MGMT_GROUP_NAME`, `AZURE_MGMT_GROUP_UUID`, `AZURE_REGION_NAME`, `AZURE_SCALE_SET_NAME`, `AZURE_SUBSCRIPTION_NAME`, `AZURE_SUBSCRIPTION_UUID`, `AZURE_TENANT_NAME`, `AZURE_TENANT_UUID`, `AZURE_VM_NAME`, `BROWSER_MONITOR_NAME`, `BROWSER_MONITOR_TAGS`, `CLOUD_APPLICATION_LABELS`, `CLOUD_APPLICATION_NAME`, `CLOUD_APPLICATION_NAMESPACE_LABELS`, `CLOUD_APPLICATION_NAMESPACE_NAME`, `CLOUD_FOUNDRY_FOUNDATION_NAME`, `CLOUD_FOUNDRY_ORG_NAME`, `CUSTOM_APPLICATION_NAME`, `CUSTOM_APPLICATION_PLATFORM`, `CUSTOM_APPLICATION_TAGS`, `CUSTOM_APPLICATION_TYPE`, `CUSTOM_DEVICE_DNS_ADDRESS`, `CUSTOM_DEVICE_GROUP_NAME`, `CUSTOM_DEVICE_GROUP_TAGS`, `CUSTOM_DEVICE_IP_ADDRESS`, `CUSTOM_DEVICE_METADATA`, `CUSTOM_DEVICE_NAME`, `CUSTOM_DEVICE_PORT`, `CUSTOM_DEVICE_TAGS`, `CUSTOM_DEVICE_TECHNOLOGY`, `DATA_CENTER_SERVICE_DECODER_TYPE`, `DATA_CENTER_SERVICE_IP_ADDRESS`, `DATA_CENTER_SERVICE_METADATA`, `DATA_CENTER_SERVICE_NAME`, `DATA_CENTER_SERVICE_PORT`, `DATA_CENTER_SERVICE_TAGS`, `DOCKER_CONTAINER_NAME`, `DOCKER_FULL_IMAGE_NAME`, `DOCKER_IMAGE_VERSION`, `EC2_INSTANCE_AMI_ID`, `EC2_INSTANCE_AWS_INSTANCE_TYPE`, `EC2_INSTANCE_AWS_SECURITY_GROUP`, `EC2_INSTANCE_BEANSTALK_ENV_NAME`, `EC2_INSTANCE_ID`, `EC2_INSTANCE_NAME`, `EC2_INSTANCE_PRIVATE_HOST_NAME`, `EC2_INSTANCE_PUBLIC_HOST_NAME`, `EC2_INSTANCE_TAGS`, `ENTERPRISE_APPLICATION_DECODER_TYPE`, `ENTERPRISE_APPLICATION_IP_ADDRESS`, `ENTERPRISE_APPLICATION_METADATA`, `ENTERPRISE_APPLICATION_NAME`, `ENTERPRISE_APPLICATION_PORT`, `ENTERPRISE_APPLICATION_TAGS`, `ESXI_HOST_CLUSTER_NAME`, `ESXI_HOST_HARDWARE_MODEL`, `ESXI_HOST_HARDWARE_VENDOR`, `ESXI_HOST_NAME`, `ESXI_HOST_PRODUCT_NAME`, `ESXI_HOST_PRODUCT_VERSION`, `ESXI_HOST_TAGS`, `EXTERNAL_MONITOR_ENGINE_DESCRIPTION`, `EXTERNAL_MONITOR_ENGINE_NAME`, `EXTERNAL_MONITOR_ENGINE_TYPE`, `EXTERNAL_MONITOR_NAME`, `EXTERNAL_MONITOR_TAGS`, `GEOLOCATION_SITE_NAME`, `GOOGLE_CLOUD_PLATFORM_ZONE_NAME`, `GOOGLE_COMPUTE_INSTANCE_ID`, `GOOGLE_COMPUTE_INSTANCE_MACHINE_TYPE`, `GOOGLE_COMPUTE_INSTANCE_NAME`, `GOOGLE_COMPUTE_INSTANCE_PROJECT`, `GOOGLE_COMPUTE_INSTANCE_PROJECT_ID`, `GOOGLE_COMPUTE_INSTANCE_PUBLIC_IP_ADDRESSES`, `HOST_AIX_LOGICAL_CPU_COUNT`, `HOST_AIX_SIMULTANEOUS_THREADS`, `HOST_AIX_VIRTUAL_CPU_COUNT`, `HOST_ARCHITECTURE`, `HOST_AWS_NAME_TAG`, `HOST_AZURE_COMPUTE_MODE`, `HOST_AZURE_SKU`, `HOST_AZURE_WEB_APPLICATION_HOST_NAMES`, `HOST_AZURE_WEB_APPLICATION_SITE_NAMES`, `HOST_BITNESS`, `HOST_BOSH_AVAILABILITY_ZONE`, `HOST_BOSH_DEPLOYMENT_ID`, `HOST_BOSH_INSTANCE_ID`, `HOST_BOSH_INSTANCE_NAME`, `HOST_BOSH_NAME`, `HOST_BOSH_STEMCELL_VERSION`, `HOST_CLOUD_TYPE`, `HOST_CPU_CORES`, `HOST_CUSTOM_METADATA`, `HOST_DETECTED_NAME`, `HOST_GROUP_ID`, `HOST_GROUP_NAME`, `HOST_HYPERVISOR_TYPE`, `HOST_IP_ADDRESS`, `HOST_KUBERNETES_LABELS`, `HOST_LOGICAL_CPU_CORES`, `HOST_NAME`, `HOST_ONEAGENT_CUSTOM_HOST_NAME`, `HOST_OS_TYPE`, `HOST_OS_VERSION`, `HOST_PAAS_MEMORY_LIMIT`, `HOST_PAAS_TYPE`, `HOST_TAGS`, `HOST_TECHNOLOGY`, `HTTP_MONITOR_NAME`, `HTTP_MONITOR_TAGS`, `KUBERNETES_CLUSTER_NAME`, `KUBERNETES_NODE_NAME`, `KUBERNETES_SERVICE_NAME`, `MOBILE_APPLICATION_NAME`, `MOBILE_APPLICATION_PLATFORM`, `MOBILE_APPLICATION_TAGS`, `NAME_OF_COMPUTE_NODE`, `OPENSTACK_ACCOUNT_NAME`, `OPENSTACK_ACCOUNT_PROJECT_NAME`, `OPENSTACK_AVAILABILITY_ZONE_NAME`, `OPENSTACK_PROJECT_NAME`, `OPENSTACK_REGION_NAME`, `OPENSTACK_VM_INSTANCE_TYPE`, `OPENSTACK_VM_NAME`, `OPENSTACK_VM_SECURITY_GROUP`, `PROCESS_GROUP_AZURE_HOST_NAME`, `PROCESS_GROUP_AZURE_SITE_NAME`, `PROCESS_GROUP_CUSTOM_METADATA`, `PROCESS_GROUP_DETECTED_NAME`, `PROCESS_GROUP_ID`, `PROCESS_GROUP_LISTEN_PORT`, `PROCESS_GROUP_NAME`, `PROCESS_GROUP_PREDEFINED_METADATA`, `PROCESS_GROUP_TAGS`, `PROCESS_GROUP_TECHNOLOGY`, `PROCESS_GROUP_TECHNOLOGY_EDITION`, `PROCESS_GROUP_TECHNOLOGY_VERSION`, `QUEUE_NAME`, `QUEUE_TECHNOLOGY`, `QUEUE_VENDOR`, `SERVICE_AKKA_ACTOR_SYSTEM`, `SERVICE_CTG_SERVICE_NAME`, `SERVICE_DATABASE_HOST_NAME`, `SERVICE_DATABASE_NAME`, `SERVICE_DATABASE_TOPOLOGY`, `SERVICE_DATABASE_VENDOR`, `SERVICE_DETECTED_NAME`, `SERVICE_ESB_APPLICATION_NAME`, `SERVICE_IBM_CTG_GATEWAY_URL`, `SERVICE_MESSAGING_LISTENER_CLASS_NAME`, `SERVICE_NAME`, `SERVICE_PORT`, `SERVICE_PUBLIC_DOMAIN_NAME`, `SERVICE_REMOTE_ENDPOINT`, `SERVICE_REMOTE_SERVICE_NAME`, `SERVICE_TAGS`, `SERVICE_TECHNOLOGY`, `SERVICE_TECHNOLOGY_EDITION`, `SERVICE_TECHNOLOGY_VERSION`, `SERVICE_TOPOLOGY`, `SERVICE_TYPE`, `SERVICE_WEB_APPLICATION_ID`, `SERVICE_WEB_CONTEXT_ROOT`, `SERVICE_WEB_SERVER_ENDPOINT`, `SERVICE_WEB_SERVER_NAME`, `SERVICE_WEB_SERVICE_NAME`, `SERVICE_WEB_SERVICE_NAMESPACE`, `VMWARE_DATACENTER_NAME`, `VMWARE_VM_NAME`, `WEB_APPLICATION_NAME`, `WEB_APPLICATION_NAME_PATTERN`, `WEB_APPLICATION_TAGS`, `WEB_APPLICATION_TYPE`
     */
    key: string;
    /**
     * Possible Values: `BEGINS_WITH`, `CONTAINS`, `ENDS_WITH`, `EQUALS`, `EXISTS`, `GREATER_THAN`, `GREATER_THAN_OR_EQUAL`, `IS_IP_IN_RANGE`, `LOWER_THAN`, `LOWER_THAN_OR_EQUAL`, `NOT_BEGINS_WITH`, `NOT_CONTAINS`, `NOT_ENDS_WITH`, `NOT_EQUALS`, `NOT_EXISTS`, `NOT_GREATER_THAN`, `NOT_GREATER_THAN_OR_EQUAL`, `NOT_IS_IP_IN_RANGE`, `NOT_LOWER_THAN`, `NOT_LOWER_THAN_OR_EQUAL`, `NOT_REGEX_MATCHES`, `NOT_TAG_KEY_EQUALS`, `REGEX_MATCHES`, `TAG_KEY_EQUALS`
     */
    operator: string;
    /**
     * Value
     */
    stringValue?: string;
    /**
     * Format: `[CONTEXT]tagKey:tagValue`
     */
    tag?: string;
}

export interface ManagementZoneV2RulesRuleDimensionRule {
    /**
     * Possible Values: `ANY`, `LOG`, `METRIC`
     */
    appliesTo: string;
    /**
     * Conditions
     */
    dimensionConditions?: outputs.ManagementZoneV2RulesRuleDimensionRuleDimensionConditions;
}

export interface ManagementZoneV2RulesRuleDimensionRuleDimensionConditions {
    /**
     * Dimension conditions
     */
    conditions: outputs.ManagementZoneV2RulesRuleDimensionRuleDimensionConditionsCondition[];
}

export interface ManagementZoneV2RulesRuleDimensionRuleDimensionConditionsCondition {
    /**
     * Possible Values: `DIMENSION`, `LOG_FILE_NAME`, `METRIC_KEY`
     */
    conditionType: string;
    /**
     * no documentation available
     */
    key?: string;
    /**
     * Possible Values: `BEGINS_WITH`, `EQUALS`
     */
    ruleMatcher: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface MetricEventsEventTemplate {
    /**
     * Davis® AI will try to merge this event into existing problems, otherwise a new problem will always be created.
     */
    davisMerge?: boolean;
    /**
     * The description of the event to trigger.
     */
    description: string;
    /**
     * Possible Values: `AVAILABILITY`, `CUSTOM_ALERT`, `CUSTOM_ANNOTATION`, `CUSTOM_CONFIGURATION`, `CUSTOM_DEPLOYMENT`, `ERROR`, `INFO`, `MARKED_FOR_TERMINATION`, `RESOURCE`, `SLOWDOWN`
     */
    eventType: string;
    /**
     * Set of additional key-value properties to be attached to the triggered event.
     */
    metadatas?: outputs.MetricEventsEventTemplateMetadata[];
    /**
     * The title of the event to trigger.
     */
    title: string;
}

export interface MetricEventsEventTemplateMetadata {
    /**
     * Type 'dt.' for key hints.
     */
    metadataKey: string;
    /**
     * no documentation available
     */
    metadataValue: string;
}

export interface MetricEventsModelProperties {
    /**
     * Possible Values: `ABOVE`, `BELOW`, `OUTSIDE`
     */
    alertCondition: string;
    /**
     * The ability to set an alert on missing data in a metric. When enabled, missing data samples will be treated as violating samples defined in the advanced model properties. When disabled, missing data is not treated as a violation but will still contribute to dealerting. We recommend disabling alerting on missing data for sparse timeseries to avoid false alerts. To learn more, visit [anomaly detection configuration](https://dt-url.net/lz02mwi).
     */
    alertOnNoData: boolean;
    /**
     * The number of one-minute samples within the evaluation window that must go back to normal to close the event.
     */
    dealertingSamples: number;
    /**
     * The number of one-minute samples that form the sliding evaluation window.
     */
    samples: number;
    /**
     * Controls how many times the signal fluctuation is added to the baseline to produce the actual threshold for alerting
     */
    signalFluctuation?: number;
    /**
     * Raise an event if this value is violated
     */
    threshold?: number;
    /**
     * Controls the width of the confidence band and larger values lead to a less sensitive model
     */
    tolerance?: number;
    /**
     * Possible Values: `AUTO_ADAPTIVE_THRESHOLD`, `SEASONAL_BASELINE`, `STATIC_THRESHOLD`
     */
    type: string;
    /**
     * The number of one-minute samples within the evaluation window that must violate to trigger an event.
     */
    violatingSamples: number;
}

export interface MetricEventsQueryDefinition {
    /**
     * Possible Values: `AVG`, `COUNT`, `MAX`, `MEDIAN`, `MIN`, `PERCENTILE90`, `SUM`, `VALUE`
     */
    aggregation?: string;
    /**
     * Dimension filter
     */
    dimensionFilter?: outputs.MetricEventsQueryDefinitionDimensionFilter;
    /**
     * Use rule-based filters to define the scope this event monitors.
     */
    entityFilter?: outputs.MetricEventsQueryDefinitionEntityFilter;
    /**
     * The `legacyId` of a Management Zone (as provided by the resource `dynatrace.ManagementZoneV2` or the data source `dynatrace.ManagementZone`)
     */
    managementZone?: string;
    /**
     * Metric key
     */
    metricKey?: string;
    /**
     * To learn more, visit [Metric Selector](https://dt-url.net/metselad)
     */
    metricSelector?: string;
    /**
     * Minute offset of sliding evaluation window for metrics with latency
     */
    queryOffset?: number;
    /**
     * Possible Values: `METRIC_KEY`, `METRIC_SELECTOR`
     */
    type: string;
}

export interface MetricEventsQueryDefinitionDimensionFilter {
    filters: outputs.MetricEventsQueryDefinitionDimensionFilterFilter[];
}

export interface MetricEventsQueryDefinitionDimensionFilterFilter {
    /**
     * Dimension key
     */
    dimensionKey: string;
    /**
     * Dimension value
     */
    dimensionValue: string;
    /**
     * Possible Values: `CONTAINS_CASE_SENSITIVE`, `DOES_NOT_CONTAIN_CASE_SENSITIVE`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`, `EQUALS`, `STARTS_WITH`
     */
    operator?: string;
}

export interface MetricEventsQueryDefinitionEntityFilter {
    /**
     * no documentation available
     */
    conditions?: outputs.MetricEventsQueryDefinitionEntityFilterConditions;
    /**
     * Dimension key of entity type to filter
     */
    dimensionKey?: string;
}

export interface MetricEventsQueryDefinitionEntityFilterConditions {
    conditions: outputs.MetricEventsQueryDefinitionEntityFilterConditionsCondition[];
}

export interface MetricEventsQueryDefinitionEntityFilterConditionsCondition {
    /**
     * Possible Values: `CONTAINS_CASE_INSENSITIVE`, `CONTAINS_CASE_SENSITIVE`, `DOES_NOT_CONTAIN_CASE_INSENSITIVE`, `DOES_NOT_CONTAIN_CASE_SENSITIVE`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`, `EQUALS`, `STARTS_WITH`
     */
    operator: string;
    /**
     * Possible Values: `CUSTOM_DEVICE_GROUP_NAME`, `ENTITY_ID`, `HOST_GROUP_NAME`, `HOST_NAME`, `MANAGEMENT_ZONE`, `NAME`, `PROCESS_GROUP_ID`, `PROCESS_GROUP_NAME`, `TAG`
     */
    type: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface MetricMetadataDimensions {
    dimensions: outputs.MetricMetadataDimensionsDimension[];
}

export interface MetricMetadataDimensionsDimension {
    /**
     * Display name
     */
    displayName?: string;
    /**
     * Dimension key
     */
    key: string;
}

export interface MetricMetadataMetricProperties {
    /**
     * Whether (true or false) the metric is relevant to a problem's impact.
     */
    impactRelevant?: boolean;
    /**
     * The latency of the metric, in minutes. 
     *
     *  The latency is the expected reporting delay (for example, caused by constraints of cloud vendors or other third-party data sources) between the observation of a metric data point and its availability in Dynatrace. 
     *
     * The allowed value range is from 1 to 60 minutes.
     */
    latency?: number;
    /**
     * The maximum allowed value of the metric.
     */
    maxValue?: number;
    /**
     * The minimum allowed value of the metric.
     */
    minValue?: number;
    /**
     * Whether (true or false) the metric is related to a root cause of a problem.
     *
     * A root-cause relevant metric represents a strong indicator for a faulty component.
     */
    rootCauseRelevant?: boolean;
    /**
     * Possible Values: `Error`, `Score`, `Unknown`
     */
    valueType: string;
}

export interface MobileAppAnomaliesErrorRateIncrease {
    /**
     * Possible Values: `Auto`, `Fixed`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Alert if the percentage of user actions affected by reported errors exceeds **both** the absolute threshold and the relative threshold
     */
    errorRateIncreaseAuto?: outputs.MobileAppAnomaliesErrorRateIncreaseErrorRateIncreaseAuto;
    /**
     * Alert if the custom reported error rate threshold is exceeded during any 5-minute period
     */
    errorRateIncreaseFixed?: outputs.MobileAppAnomaliesErrorRateIncreaseErrorRateIncreaseFixed;
}

export interface MobileAppAnomaliesErrorRateIncreaseErrorRateIncreaseAuto {
    /**
     * Absolute threshold
     */
    thresholdAbsolute: number;
    /**
     * Relative threshold
     */
    thresholdRelative: number;
}

export interface MobileAppAnomaliesErrorRateIncreaseErrorRateIncreaseFixed {
    /**
     * Possible Values: `Low`, `Medium`, `High`
     */
    sensitivity: string;
    /**
     * Absolute threshold
     */
    thresholdAbsolute: number;
}

export interface MobileAppAnomaliesSlowUserActions {
    /**
     * Possible Values: `Auto`, `Fixed`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * no documentation available
     */
    slowUserActionsAuto?: outputs.MobileAppAnomaliesSlowUserActionsSlowUserActionsAuto;
    /**
     * no documentation available
     */
    slowUserActionsFixed?: outputs.MobileAppAnomaliesSlowUserActionsSlowUserActionsFixed;
}

export interface MobileAppAnomaliesSlowUserActionsSlowUserActionsAuto {
    /**
     * To avoid over-alerting do not alert for low traffic applications with less than
     */
    durationAvoidOveralerting: outputs.MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationAvoidOveralerting;
    /**
     * Alert if the action duration of all user actions degrades beyond **both** the absolute and relative threshold:
     */
    durationThresholdAll: outputs.MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdAll;
    /**
     * Alert if the action duration of the slowest 10% of user actions degrades beyond **both** the absolute and relative threshold:
     */
    durationThresholdSlowest: outputs.MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdSlowest;
}

export interface MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationAvoidOveralerting {
    /**
     * no documentation available
     */
    minActionRate: number;
}

export interface MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdAll {
    /**
     * Absolute threshold
     */
    durationThreshold: number;
    /**
     * Relative threshold
     */
    slowdownPercentage: number;
}

export interface MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdSlowest {
    /**
     * Absolute threshold
     */
    durationThreshold: number;
    /**
     * Relative threshold
     */
    slowdownPercentage: number;
}

export interface MobileAppAnomaliesSlowUserActionsSlowUserActionsFixed {
    /**
     * To avoid over-alerting do not alert for low traffic applications with less than
     */
    durationAvoidOveralerting: outputs.MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationAvoidOveralerting;
    /**
     * Alert if the action duration of all user actions degrades beyond the absolute threshold:
     */
    durationThresholdAllFixed: outputs.MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdAllFixed;
    /**
     * Alert if the action duration of the slowest 10% of user actions degrades beyond the absolute threshold:
     */
    durationThresholdSlowest: outputs.MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdSlowest;
    /**
     * Possible Values: `Low`, `Medium`, `High`
     */
    sensitivity: string;
}

export interface MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationAvoidOveralerting {
    /**
     * no documentation available
     */
    minActionRate: number;
}

export interface MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdAllFixed {
    /**
     * Absolute threshold
     */
    durationThreshold: number;
}

export interface MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdSlowest {
    /**
     * Absolute threshold
     */
    durationThreshold: number;
}

export interface MobileAppAnomaliesUnexpectedHighLoad {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Dynatrace learns your typical application traffic over an observation period of one week. Depending on this expected value Dynatrace detects abnormal traffic spikes within your application.
     */
    thresholdPercentage?: number;
}

export interface MobileAppAnomaliesUnexpectedLowLoad {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Dynatrace learns your typical application traffic over an observation period of one week. Depending on this expected value Dynatrace detects abnormal traffic drops within your application.
     */
    thresholdPercentage?: number;
}

export interface MobileAppCrashRateCrashRateIncrease {
    /**
     * Alert crash rate increases when auto-detected baseline is exceeded by a certain number of users
     */
    crashRateIncreaseAuto?: outputs.MobileAppCrashRateCrashRateIncreaseCrashRateIncreaseAuto;
    /**
     * Alert crash rate increases when the defined threshold is exceeded by a certain number of users
     */
    crashRateIncreaseFixed?: outputs.MobileAppCrashRateCrashRateIncreaseCrashRateIncreaseFixed;
    /**
     * Possible Values: `Auto`, `Fixed`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface MobileAppCrashRateCrashRateIncreaseCrashRateIncreaseAuto {
    /**
     * Dynatrace learns the typical crash rate for all app versions and will create an alert if the baseline is violated by more than a specified threshold. Analysis happens based on a sliding window of 10 minutes.
     */
    baselineViolationPercentage: number;
    /**
     * Amount of users
     */
    concurrentUsers: number;
    /**
     * Possible Values: `Low`, `Medium`, `High`
     */
    sensitivity: string;
}

export interface MobileAppCrashRateCrashRateIncreaseCrashRateIncreaseFixed {
    /**
     * Absolute threshold
     */
    absoluteCrashRate: number;
    /**
     * Amount of users
     */
    concurrentUsers: number;
}

export interface MobileAppEnablementRum {
    /**
     * Percentage of user sessions captured and analyzed. By default, Dynatrace captures all user actions and user sessions for analysis. This approach ensures complete insight into your application’s performance and customer experience. You can optionally reduce the granularity of user-action and user-session analysis by capturing a lower percentage of user sessions. While this approach can reduce monitoring costs, it also results in lower visibility into how your customers are using your applications. For example, a setting of 10% results in Dynatrace analyzing only every tenth user session.
     */
    costAndTrafficControl: number;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Please be aware that only mobile agents with version **8.303 or higher** can ingest Grail events
     */
    enabledOnGrail?: boolean;
}

export interface MobileAppEnablementSessionReplay {
    /**
     * Before enabling, Dynatrace checks your system against the [prerequisites for Session Replay](https://dt-url.net/t23s0ppi).
     */
    onCrash: boolean;
}

export interface MobileAppKeyPerformanceThresholds {
    /**
     * If the action duration is above this value, the Apdex is considered to be **Frustrating**.
     */
    frustratingThresholdSeconds: number;
    /**
     * If the action duration is below this value, the Apdex is considered to be **Satisfactory**.
     */
    tolerableThresholdSeconds: number;
}

export interface MobileAppRequestErrorsErrorRules {
    errorRules: outputs.MobileAppRequestErrorsErrorRulesErrorRule[];
}

export interface MobileAppRequestErrorsErrorRulesErrorRule {
    /**
     * Exclude response codes
     */
    errorCodes: string;
}

export interface MobileApplicationApdex {
    /**
     * Apdex **frustrated** threshold, in milliseconds: a duration greater than or equal to this value is considered frustrated
     */
    frustrated: number;
    /**
     * Apdex error condition: if `true` the user session is considered frustrated when an error is reported
     */
    frustratedOnError?: boolean;
    /**
     * Apdex **tolerable** threshold, in milliseconds: a duration greater than or equal to this value is considered tolerable
     */
    tolerable: number;
}

export interface MobileApplicationProperties {
    /**
     * A User Action / Session Property based on a value reported by the API
     */
    apiValues?: outputs.MobileApplicationPropertiesApiValue[];
    /**
     * A User Action / Session Property based on a Server Side Request Attribute
     */
    requestAttributes?: outputs.MobileApplicationPropertiesRequestAttribute[];
}

export interface MobileApplicationPropertiesApiValue {
    /**
     * The aggregation type of the property. It defines how multiple values of the property are aggregated. Possible values are `SUM`, `MIN`, `MAX`, `FIRST` and `LAST`
     */
    aggregation?: string;
    /**
     * The cleanup rule of the property. Defines how to extract the data you need from a string value. Specify the [regular expression](https://dt-url.net/k9e0iaq) for the data you need there
     */
    cleanupRule?: string;
    /**
     * The display name of the property
     */
    displayName?: string;
    /**
     * The unique key of the mobile session or user action property
     */
    key: string;
    /**
     * The name of the reported value
     */
    name?: string;
    /**
     * If `true`, the property is stored as a session property
     */
    storeAsSessionProperty?: boolean;
    /**
     * If `true`, the property is stored as a user action property
     */
    storeAsUserActionProperty?: boolean;
    /**
     * The data type of the property. Possible values are `DOUBLE`, `LONG` and `STRING`
     */
    type: string;
}

export interface MobileApplicationPropertiesRequestAttribute {
    /**
     * The aggregation type of the property. It defines how multiple values of the property are aggregated. Possible values are `SUM`, `MIN`, `MAX`, `FIRST` and `LAST`
     */
    aggregation?: string;
    /**
     * The cleanup rule of the property. Defines how to extract the data you need from a string value. Specify the [regular expression](https://dt-url.net/k9e0iaq) for the data you need there
     */
    cleanupRule?: string;
    /**
     * The display name of the property
     */
    displayName?: string;
    /**
     * The ID of the request attribute
     */
    id: string;
    /**
     * The unique key of the mobile session or user action property
     */
    key: string;
    /**
     * If `true`, the property is stored as a session property
     */
    storeAsSessionProperty?: boolean;
    /**
     * If `true`, the property is stored as a user action property
     */
    storeAsUserActionProperty?: boolean;
    /**
     * The data type of the property. Possible values are `DOUBLE`, `LONG` and `STRING`. The value MUST match the data type of the Request Attribute.
     */
    type: string;
}

export interface NetworkMonitorOutageHandling {
    /**
     * Number of consecutive failures for all locations
     */
    globalConsecutiveOutageCountThreshold?: number;
    /**
     * Generate a problem and send an alert when the monitor is unavailable at all configured locations
     */
    globalOutages?: boolean;
    /**
     * Number of consecutive failures
     */
    localConsecutiveOutageCountThreshold?: number;
    /**
     * Number of failing locations
     */
    localLocationOutageCountThreshold?: number;
    /**
     * Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location
     */
    localOutages?: boolean;
}

export interface NetworkMonitorPerformanceThresholds {
    /**
     * Performance threshold is enabled (true) or disabled (false)
     */
    enabled?: boolean;
    /**
     * The list of performance threshold rules
     */
    thresholds?: outputs.NetworkMonitorPerformanceThresholdsThresholds;
}

export interface NetworkMonitorPerformanceThresholdsThresholds {
    /**
     * The list of performance threshold rules
     */
    thresholds?: outputs.NetworkMonitorPerformanceThresholdsThresholdsThreshold[];
}

export interface NetworkMonitorPerformanceThresholdsThresholdsThreshold {
    /**
     * Aggregation type, possible values: `AVG`, `MAX`, `MIN`
     */
    aggregation?: string;
    /**
     * Number of most recent non-violating request executions that closes the problem
     */
    dealertingSamples?: number;
    /**
     * Number of request executions in analyzed sliding window (sliding window size)
     */
    samples?: number;
    /**
     * Specify the step's index to which a threshold applies
     */
    stepIndex?: number;
    /**
     * Notify if monitor request takes longer than X milliseconds to execute
     */
    threshold?: number;
    /**
     * Number of violating request executions in analyzed sliding window
     */
    violatingSamples?: number;
}

export interface NetworkMonitorStep {
    /**
     * The step of a network availability monitor
     */
    steps: outputs.NetworkMonitorStepStep[];
}

export interface NetworkMonitorStepStep {
    /**
     * The list of constraints which apply to all requests in the step
     */
    constraints: outputs.NetworkMonitorStepStepConstraint[];
    /**
     * Step name
     */
    name: string;
    /**
     * Key/value pairs of properties which apply to all requests in the step
     */
    properties: {[key: string]: string};
    /**
     * Request configurations
     */
    requestConfigurations?: outputs.NetworkMonitorStepStepRequestConfiguration[];
    /**
     * Request type, possible values `ICMP`, `TCP`, `DNS`
     */
    requestType: string;
    /**
     * Target filter
     */
    targetFilter?: string;
    /**
     * Target list
     */
    targetLists: string[];
}

export interface NetworkMonitorStepStepConstraint {
    /**
     * The network availability monitor constraint
     */
    constraints: outputs.NetworkMonitorStepStepConstraintConstraint[];
}

export interface NetworkMonitorStepStepConstraintConstraint {
    /**
     * Key/value pairs of constraint properties
     */
    properties: {[key: string]: string};
    /**
     * Constraint type
     */
    type: string;
}

export interface NetworkMonitorStepStepRequestConfiguration {
    /**
     * The configuration of a network availability monitor request
     */
    requestConfigurations: outputs.NetworkMonitorStepStepRequestConfigurationRequestConfiguration[];
}

export interface NetworkMonitorStepStepRequestConfigurationRequestConfiguration {
    /**
     * Request constraints
     */
    constraints?: outputs.NetworkMonitorStepStepRequestConfigurationRequestConfigurationConstraint[];
}

export interface NetworkMonitorStepStepRequestConfigurationRequestConfigurationConstraint {
    /**
     * The network availability monitor constraint
     */
    constraints: outputs.NetworkMonitorStepStepRequestConfigurationRequestConfigurationConstraintConstraint[];
}

export interface NetworkMonitorStepStepRequestConfigurationRequestConfigurationConstraintConstraint {
    /**
     * Key/value pairs of constraint properties
     */
    properties: {[key: string]: string};
    /**
     * Constraint type
     */
    type: string;
}

export interface NetworkMonitorTag {
    /**
     * Tag with source of a Dynatrace entity.
     */
    tags?: outputs.NetworkMonitorTagTag[];
}

export interface NetworkMonitorTagTag {
    /**
     * The origin of the tag, such as AWS or Cloud Foundry.
     */
    context?: string;
    /**
     * The key of the tag
     */
    key: string;
    /**
     * The source of the tag, possible values: `AUTO`, `RULE_BASED` or `USER`
     */
    source?: string;
    /**
     * The value of the tag
     */
    value?: string;
}

export interface NetworkTrafficExcludeIp {
    ipAddressForms: outputs.NetworkTrafficExcludeIpIpAddressForm[];
}

export interface NetworkTrafficExcludeIpIpAddressForm {
    /**
     * IP address
     */
    ipAddress: string;
}

export interface NetworkTrafficExcludeNic {
    nicForms: outputs.NetworkTrafficExcludeNicNicForm[];
}

export interface NetworkTrafficExcludeNicNicForm {
    /**
     * Network interface
     */
    interface: string;
    /**
     * Possible Values: `OS_TYPE_AIX`, `OS_TYPE_DARWIN`, `OS_TYPE_HPUX`, `OS_TYPE_LINUX`, `OS_TYPE_SOLARIS`, `OS_TYPE_UNKNOWN`, `OS_TYPE_WINDOWS`, `OS_TYPE_ZOS`
     */
    os: string;
}

export interface NotificationAnsibleTower {
    /**
     * Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
     */
    acceptAnyCertificate: boolean;
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: boolean;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: string;
    /**
     * The custom message of the notification.   This message will be displayed in the extra variables **Message** field of your job template.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     */
    customMessage: string;
    /**
     * The ID of the target Ansible Tower job template
     */
    jobTemplateId: number;
    /**
     * The URL of the target Ansible Tower job template
     */
    jobTemplateUrl: string;
    /**
     * The name of the notification configuration
     */
    name: string;
    /**
     * The password for the Ansible Tower account
     */
    password?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The username of the Ansible Tower account
     */
    username: string;
}

export interface NotificationConfig {
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: boolean;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: string;
    /**
     * The name of the notification configuration
     */
    name: string;
    /**
     * Defines the actual set of fields depending on the value. See one of the following objects:  * `EMAIL` > EmailNotificationConfig  * `PAGER_DUTY` > PagerDutyNotificationConfig  * `WEBHOOK` > WebHookNotificationConfig  * `SLACK` > SlackNotificationConfig  * `HIPCHAT` > HipChatNotificationConfig  * `VICTOROPS` > VictorOpsNotificationConfig  * `SERVICE_NOW` > ServiceNowNotificationConfig  * `XMATTERS` > XMattersNotificationConfig  * `ANSIBLETOWER` > AnsibleTowerNotificationConfig  * `OPS_GENIE` > OpsGenieNotificationConfig  * `JIRA` > JiraNotificationConfig  * `TRELLO` > TrelloNotificationConfig
     */
    type: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface NotificationEmail {
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: boolean;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: string;
    /**
     * The list of the email BCC-recipients
     */
    bccReceivers?: string[];
    /**
     * The template of the email notification.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     */
    body: string;
    /**
     * The list of the email CC-recipients
     */
    ccReceivers?: string[];
    /**
     * The name of the notification configuration
     */
    name: string;
    /**
     * The list of the email recipients
     */
    receivers?: string[];
    /**
     * The subject of the email notifications
     */
    subject: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface NotificationJira {
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: boolean;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: string;
    /**
     * The description of the Jira issue to be created by this notification.   You can use same placeholders as in issue summary
     */
    description: string;
    /**
     * The type of the Jira issue to be created by this notification
     */
    issueType: string;
    /**
     * The name of the notification configuration
     */
    name: string;
    /**
     * The password for the Jira profile
     */
    password?: string;
    /**
     * The project key of the Jira issue to be created by this notification
     */
    projectKey: string;
    /**
     * The summary of the Jira issue to be created by this notification.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     */
    summary: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The URL of the Jira API endpoint
     */
    url: string;
    /**
     * The username of the Jira profile
     */
    username: string;
}

export interface NotificationOpsGenie {
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: boolean;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: string;
    /**
     * The API key to access OpsGenie
     */
    apiKey?: string;
    /**
     * The region domain of the OpsGenie
     */
    domain: string;
    /**
     * The content of the message.  You can use the following placeholders:  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem
     */
    message: string;
    /**
     * The name of the notification configuration
     */
    name: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface NotificationPagerDuty {
    /**
     * The name of the PagerDuty account
     */
    account: string;
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: boolean;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: string;
    /**
     * The name of the notification configuration
     */
    name: string;
    /**
     * The API key to access PagerDuty
     */
    serviceApiKey?: string;
    /**
     * The name of the service
     */
    serviceName: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface NotificationServiceNow {
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: boolean;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: string;
    /**
     * The ServiceNow instance identifier. It refers to the first part of your own ServiceNow URL.   This field is mutually exclusive with the **url** field. You can only use one of them
     */
    instanceName?: string;
    /**
     * The content of the ServiceNow description.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     */
    message: string;
    /**
     * The name of the notification configuration
     */
    name: string;
    /**
     * The username to the ServiceNow account
     */
    password?: string;
    /**
     * Send events into ServiceNow ITOM (`true`)
     */
    sendEvents: boolean;
    /**
     * Send incidents into ServiceNow ITSM (`true`)
     */
    sendIncidents: boolean;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The URL of the on-premise ServiceNow installation.   This field is mutually exclusive with the **instanceName** field. You can only use one of them
     */
    url?: string;
    /**
     * The username of the ServiceNow account.   Make sure that your user account has the `restService`, `webRequestAdmin`, and `x_dynat_ruxit.Integration` roles
     */
    username: string;
}

export interface NotificationSlack {
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: boolean;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: string;
    /**
     * The channel (for example, `#general`) or the user (for example, `@john.smith`) to send the message to
     */
    channel: string;
    /**
     * The name of the notification configuration
     */
    name: string;
    /**
     * The content of the message.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     */
    title: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The URL of the Slack WebHook.  This is confidential information, therefore GET requests return this field with the `null` value, and it is optional for PUT requests
     */
    url?: string;
}

export interface NotificationTrello {
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: boolean;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: string;
    /**
     * The application key for the Trello account
     */
    applicationKey: string;
    /**
     * The application token for the Trello account
     */
    authorizationToken?: string;
    /**
     * The Trello board to which the card should be assigned
     */
    boardId: string;
    /**
     * The description of the Trello card.   You can use same placeholders as in card text
     */
    description: string;
    /**
     * The Trello list to which the card should be assigned
     */
    listId: string;
    /**
     * The name of the notification configuration
     */
    name: string;
    /**
     * The Trello list to which the card of the resolved problem should be assigned
     */
    resolvedListId: string;
    /**
     * The text of the generated Trello card.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     */
    text: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface NotificationVictorOps {
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: boolean;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: string;
    /**
     * The API key for the target VictorOps account
     */
    apiKey?: string;
    /**
     * The content of the message.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`
     */
    message: string;
    /**
     * The name of the notification configuration
     */
    name: string;
    /**
     * The routing key, defining the group to be notified
     */
    routingKey: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface NotificationWebHook {
    /**
     * Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
     */
    acceptAnyCertificate: boolean;
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: boolean;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: string;
    /**
     * A list of the additional HTTP headers
     */
    headers?: outputs.NotificationWebHookHeader[];
    /**
     * The name of the notification configuration
     */
    name: string;
    /**
     * Call webhook if new events merge into existing problems
     */
    notifyEventMerges?: boolean;
    /**
     * The content of the notification message.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     */
    payload: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The URL of the WebHook endpoint
     */
    url: string;
}

export interface NotificationWebHookHeader {
    /**
     * The name of the HTTP header
     */
    name: string;
    /**
     * The value of the HTTP header. May contain an empty value.   Required when creating a new notification.  For the **Authorization** header, GET requests return the `null` value.  If you want update a notification configuration with an **Authorization** header which you want to remain intact, set the **Authorization** header with the `null` value
     */
    value?: string;
}

export interface NotificationXmatters {
    /**
     * Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
     */
    acceptAnyCertificate: boolean;
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: boolean;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: string;
    /**
     * A list of the additional HTTP headers
     */
    headers?: outputs.NotificationXmattersHeader[];
    /**
     * The name of the notification configuration
     */
    name: string;
    /**
     * The content of the notification message.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     */
    payload: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The URL of the xMatters WebHook
     */
    url: string;
}

export interface NotificationXmattersHeader {
    /**
     * The name of the HTTP header
     */
    name: string;
    /**
     * The value of the HTTP header. May contain an empty value.   Required when creating a new notification.  For the **Authorization** header, GET requests return the `null` value.  If you want update a notification configuration with an **Authorization** header which you want to remain intact, set the **Authorization** header with the `null` value
     */
    value?: string;
}

export interface OneagentUpdatesMaintenanceWindows {
    maintenanceWindows: outputs.OneagentUpdatesMaintenanceWindowsMaintenanceWindow[];
}

export interface OneagentUpdatesMaintenanceWindowsMaintenanceWindow {
    /**
     * Select a [maintenance window for OneAgent updates](https://www.terraform.io/ui/settings/builtin:deployment.management.update-windows)
     */
    maintenanceWindow: string;
}

export interface OpenpipelineBusinessEventsEndpoints {
    /**
     * Definition of a single ingest source
     */
    endpoints?: outputs.OpenpipelineBusinessEventsEndpointsEndpoint[];
}

export interface OpenpipelineBusinessEventsEndpointsEndpoint {
    /**
     * The default bucket assigned to records for the ingest source
     */
    defaultBucket?: string;
    /**
     * Display name of the ingest source
     */
    displayName: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * The pre-processing done in the ingest source
     */
    processors?: outputs.OpenpipelineBusinessEventsEndpointsEndpointProcessors;
    /**
     * Routing strategy, either dynamic or static
     */
    routing: outputs.OpenpipelineBusinessEventsEndpointsEndpointRouting;
    /**
     * The segment of the ingest source, which is applied to the base path. Must be unique within a configuration."
     */
    segment: string;
}

export interface OpenpipelineBusinessEventsEndpointsEndpointProcessors {
    /**
     * Groups all processors applicable for processing in the EndpointDefinition.
     * Applicable processors are DqlProcessor, FieldsAddProcessor, FieldsRemoveProcessor, FieldsRenameProcessor and DropProcessor.
     */
    processors?: outputs.OpenpipelineBusinessEventsEndpointsEndpointProcessorsProcessor[];
}

export interface OpenpipelineBusinessEventsEndpointsEndpointProcessorsProcessor {
    /**
     * Processor to apply a DQL script
     */
    dqlProcessor?: outputs.OpenpipelineBusinessEventsEndpointsEndpointProcessorsProcessorDqlProcessor;
    /**
     * Processor to drop the record either during the processing stage or at the endpoint
     */
    dropProcessor?: outputs.OpenpipelineBusinessEventsEndpointsEndpointProcessorsProcessorDropProcessor;
    /**
     * Processor to add fields
     */
    fieldsAddProcessor?: outputs.OpenpipelineBusinessEventsEndpointsEndpointProcessorsProcessorFieldsAddProcessor;
    /**
     * Processor to remove fields
     */
    fieldsRemoveProcessor?: outputs.OpenpipelineBusinessEventsEndpointsEndpointProcessorsProcessorFieldsRemoveProcessor;
    /**
     * Processor to rename fields
     */
    fieldsRenameProcessor?: outputs.OpenpipelineBusinessEventsEndpointsEndpointProcessorsProcessorFieldsRenameProcessor;
    /**
     * Processor to apply a technology processors.
     */
    technologyProcessor?: outputs.OpenpipelineBusinessEventsEndpointsEndpointProcessorsProcessorTechnologyProcessor;
}

export interface OpenpipelineBusinessEventsEndpointsEndpointProcessorsProcessorDqlProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * The DQL script to apply on the record
     */
    dqlScript: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineBusinessEventsEndpointsEndpointProcessorsProcessorDropProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineBusinessEventsEndpointsEndpointProcessorsProcessorFieldsAddProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: outputs.OpenpipelineBusinessEventsEndpointsEndpointProcessorsProcessorFieldsAddProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineBusinessEventsEndpointsEndpointProcessorsProcessorFieldsAddProcessorField {
    /**
     * Name of the field
     */
    name: string;
    /**
     * Value to assign to the field
     */
    value: string;
}

export interface OpenpipelineBusinessEventsEndpointsEndpointProcessorsProcessorFieldsRemoveProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: string[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineBusinessEventsEndpointsEndpointProcessorsProcessorFieldsRenameProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to rename on the record
     */
    fields: outputs.OpenpipelineBusinessEventsEndpointsEndpointProcessorsProcessorFieldsRenameProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineBusinessEventsEndpointsEndpointProcessorsProcessorFieldsRenameProcessorField {
    /**
     * The field to rename
     */
    fromName: string;
    /**
     * The new field name
     */
    toName: string;
}

export interface OpenpipelineBusinessEventsEndpointsEndpointProcessorsProcessorTechnologyProcessor {
    /**
     * Optional customer-defined matching condition, that is used in place of the main technology matcher.
     */
    customMatcher?: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * The reference identifier to a specific technology. This technology is applied on the record.
     */
    technologyId: string;
}

export interface OpenpipelineBusinessEventsEndpointsEndpointRouting {
    /**
     * Pipeline ID of the static routing
     */
    pipelineId?: string;
    /**
     * Type of routing, static or dynamic
     */
    type: string;
}

export interface OpenpipelineBusinessEventsPipelines {
    /**
     * Definition of a single pipeline
     */
    pipelines?: outputs.OpenpipelineBusinessEventsPipelinesPipeline[];
}

export interface OpenpipelineBusinessEventsPipelinesPipeline {
    /**
     * Cost Allocation stage configuration of the pipeline
     */
    costAllocation?: outputs.OpenpipelineBusinessEventsPipelinesPipelineCostAllocation;
    /**
     * Data extraction stage configuration of the pipeline
     */
    dataExtraction?: outputs.OpenpipelineBusinessEventsPipelinesPipelineDataExtraction;
    /**
     * Display name of the pipeline
     */
    displayName: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the pipeline
     */
    id: string;
    /**
     * Metric extraction stage configuration of the pipeline
     */
    metricExtraction?: outputs.OpenpipelineBusinessEventsPipelinesPipelineMetricExtraction;
    /**
     * Processing stage configuration of the pipeline
     */
    processing?: outputs.OpenpipelineBusinessEventsPipelinesPipelineProcessing;
    /**
     * Product Allocation stage configuration of the pipeline
     */
    productAllocation?: outputs.OpenpipelineBusinessEventsPipelinesPipelineProductAllocation;
    /**
     * Security context stage configuration of the pipeline
     */
    securityContext?: outputs.OpenpipelineBusinessEventsPipelinesPipelineSecurityContext;
    /**
     * Data extraction stage configuration of the pipeline
     */
    storage?: outputs.OpenpipelineBusinessEventsPipelinesPipelineStorage;
}

export interface OpenpipelineBusinessEventsPipelinesPipelineCostAllocation {
    /**
     * Cost allocation processor to use
     */
    processors?: outputs.OpenpipelineBusinessEventsPipelinesPipelineCostAllocationProcessor[];
}

export interface OpenpipelineBusinessEventsPipelinesPipelineCostAllocationProcessor {
    /**
     * Processor to write the occurrences as a cost allocation
     */
    costAllocationProcessor?: outputs.OpenpipelineBusinessEventsPipelinesPipelineCostAllocationProcessorCostAllocationProcessor;
}

export interface OpenpipelineBusinessEventsPipelinesPipelineCostAllocationProcessorCostAllocationProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Strategy to assign a value
     */
    value: outputs.OpenpipelineBusinessEventsPipelinesPipelineCostAllocationProcessorCostAllocationProcessorValue;
}

export interface OpenpipelineBusinessEventsPipelinesPipelineCostAllocationProcessorCostAllocationProcessorValue {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineBusinessEventsPipelinesPipelineDataExtraction {
    /**
     * Groups all processors applicable for the DataExtractionStage.
     * Applicable processors are DavisEventExtractionProcessor and BizeventExtractionProcessor.
     */
    processors?: outputs.OpenpipelineBusinessEventsPipelinesPipelineDataExtractionProcessor[];
}

export interface OpenpipelineBusinessEventsPipelinesPipelineDataExtractionProcessor {
    /**
     * Processor to extract a Azure log.
     */
    azureLogForwardingProcessor?: outputs.OpenpipelineBusinessEventsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessor;
    /**
     * Processor to extract a bizevent.
     * Fields event.type and event.provider can only be assigned to a constant or field value.
     * A multi-value constant is not supported for those fields.
     */
    bizeventExtractionProcessor?: outputs.OpenpipelineBusinessEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessor;
    /**
     * Processor to apply a DQL script
     */
    davisEventExtractionProcessor?: outputs.OpenpipelineBusinessEventsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessor;
    /**
     * Processor to extract a security event.
     */
    securityEventExtractionProcessor?: outputs.OpenpipelineBusinessEventsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessor;
}

export interface OpenpipelineBusinessEventsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Definition of the field extraction
     */
    fieldExtraction?: outputs.OpenpipelineBusinessEventsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessorFieldExtraction;
    forwarderConfigId: string;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineBusinessEventsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessorFieldExtraction {
    /**
     * Unique fields to include/exclude in the extracted record
     */
    fields?: string[];
    /**
     * Defines how the fields of the source record should be extracted
     */
    semantic: string;
}

export interface OpenpipelineBusinessEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Strategy to assign a value
     */
    eventProvider: outputs.OpenpipelineBusinessEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventProvider;
    /**
     * Strategy to assign a value
     */
    eventType: outputs.OpenpipelineBusinessEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventType;
    /**
     * Definition of the field extraction
     */
    fieldExtraction?: outputs.OpenpipelineBusinessEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorFieldExtraction;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineBusinessEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventProvider {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineBusinessEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventType {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineBusinessEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorFieldExtraction {
    /**
     * Unique fields to include/exclude in the extracted record
     */
    fields?: string[];
    /**
     * Defines how the fields of the source record should be extracted
     */
    semantic: string;
}

export interface OpenpipelineBusinessEventsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * List of properties for the extracted davis event
     */
    properties: outputs.OpenpipelineBusinessEventsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessorProperty[];
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineBusinessEventsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessorProperty {
    /**
     * The key to set on the davis event
     */
    key: string;
    /**
     * The value assigned to the key
     */
    value: string;
}

export interface OpenpipelineBusinessEventsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Definition of the field extraction
     */
    fieldExtraction?: outputs.OpenpipelineBusinessEventsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessorFieldExtraction;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineBusinessEventsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessorFieldExtraction {
    /**
     * Unique fields to include/exclude in the extracted record
     */
    fields?: string[];
    /**
     * Defines how the fields of the source record should be extracted
     */
    semantic: string;
}

export interface OpenpipelineBusinessEventsPipelinesPipelineMetricExtraction {
    /**
     * Data extraction processor to use
     */
    processors?: outputs.OpenpipelineBusinessEventsPipelinesPipelineMetricExtractionProcessor[];
}

export interface OpenpipelineBusinessEventsPipelinesPipelineMetricExtractionProcessor {
    /**
     * Processor to write the occurrences as a metric
     */
    counterMetricExtractionProcessor?: outputs.OpenpipelineBusinessEventsPipelinesPipelineMetricExtractionProcessorCounterMetricExtractionProcessor;
    /**
     * Processor to write the occurrences as a metric
     */
    samplingAwareCounterMetricExtractionProcessor?: outputs.OpenpipelineBusinessEventsPipelinesPipelineMetricExtractionProcessorSamplingAwareCounterMetricExtractionProcessor;
    /**
     * Processor to extract a value from a field as a metric.
     */
    samplingAwareValueMetricExtractionProcessor?: outputs.OpenpipelineBusinessEventsPipelinesPipelineMetricExtractionProcessorSamplingAwareValueMetricExtractionProcessor;
    /**
     * Processor to extract a value from a field as a metric
     */
    valueMetricExtractionProcessor?: outputs.OpenpipelineBusinessEventsPipelinesPipelineMetricExtractionProcessorValueMetricExtractionProcessor;
}

export interface OpenpipelineBusinessEventsPipelinesPipelineMetricExtractionProcessorCounterMetricExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of dimensions to add to the metric
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineBusinessEventsPipelinesPipelineMetricExtractionProcessorSamplingAwareCounterMetricExtractionProcessor {
    /**
     * Indicates whether aggregation is considered for metric extraction
     */
    aggregation?: string;
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of unique dimensions to add to the metric.
     * Dimensions are represented in the format '({dimensionName}=)?{sourceField}'.
     * '{dimensionName}' is optional if {sourceField} represents a valid metric dimension name.
     * '{sourceField}' has to represent a valid DQL field accessor and it can access a nested field (for example, 'field[field2][0]')
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Indicates whether sampling is considered for metric extraction. Possible values: 'DISABLED', 'ENABLED'
     */
    sampling?: string;
}

export interface OpenpipelineBusinessEventsPipelinesPipelineMetricExtractionProcessorSamplingAwareValueMetricExtractionProcessor {
    /**
     * Indicates whether aggregation is considered for metric extraction. Possible values: 'DISABLED', 'ENABLED'
     */
    aggregation?: string;
    /**
     * The default value to use if the given field value could not be extracted. String value must be a number
     */
    defaultValue?: string;
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of unique dimensions to add to the metric.
     * Dimensions are represented in the format '({dimensionName}=)?{sourceField}'.
     * '{dimensionName}' is optional if {sourceField} represents a valid metric dimension name.
     * '{sourceField}' has to represent a valid DQL field accessor and it can access a nested field (for example, 'field[field2][0]')
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * The field from which to extract the value for the metric, or 'null' for a duration measurement
     */
    field?: string;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Indicates whether the metric value should be the specified field or duration. Possible values: 'DURATION', 'FIELD'
     */
    measurement: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Indicates whether sampling is considered for metric extraction. Possible values: 'DISABLED', 'ENABLED'
     */
    sampling?: string;
}

export interface OpenpipelineBusinessEventsPipelinesPipelineMetricExtractionProcessorValueMetricExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of dimensions to add to the metric
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * The field to extract the value for the metric
     */
    field: string;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineBusinessEventsPipelinesPipelineProcessing {
    /**
     * Groups all processors applicable for the ProcessingStage.
     * Applicable processors are DqlProcessor, FieldsAddProcessor, FieldsRemoveProcessor, FieldsRenameProcessor, TechnologyProcessor and DropProcessor.
     */
    processors?: outputs.OpenpipelineBusinessEventsPipelinesPipelineProcessingProcessor[];
}

export interface OpenpipelineBusinessEventsPipelinesPipelineProcessingProcessor {
    /**
     * Processor to apply a DQL script
     */
    dqlProcessor?: outputs.OpenpipelineBusinessEventsPipelinesPipelineProcessingProcessorDqlProcessor;
    /**
     * Processor to drop the record either during the processing stage or at the endpoint
     */
    dropProcessor?: outputs.OpenpipelineBusinessEventsPipelinesPipelineProcessingProcessorDropProcessor;
    /**
     * Processor to add fields
     */
    fieldsAddProcessor?: outputs.OpenpipelineBusinessEventsPipelinesPipelineProcessingProcessorFieldsAddProcessor;
    /**
     * Processor to remove fields
     */
    fieldsRemoveProcessor?: outputs.OpenpipelineBusinessEventsPipelinesPipelineProcessingProcessorFieldsRemoveProcessor;
    /**
     * Processor to rename fields
     */
    fieldsRenameProcessor?: outputs.OpenpipelineBusinessEventsPipelinesPipelineProcessingProcessorFieldsRenameProcessor;
    /**
     * Processor to apply a technology processors
     */
    technologyProcessor?: outputs.OpenpipelineBusinessEventsPipelinesPipelineProcessingProcessorTechnologyProcessor;
}

export interface OpenpipelineBusinessEventsPipelinesPipelineProcessingProcessorDqlProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * The DQL script to apply on the record
     */
    dqlScript: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineBusinessEventsPipelinesPipelineProcessingProcessorDropProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineBusinessEventsPipelinesPipelineProcessingProcessorFieldsAddProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: outputs.OpenpipelineBusinessEventsPipelinesPipelineProcessingProcessorFieldsAddProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineBusinessEventsPipelinesPipelineProcessingProcessorFieldsAddProcessorField {
    /**
     * Name of the field
     */
    name: string;
    /**
     * Value to assign to the field
     */
    value: string;
}

export interface OpenpipelineBusinessEventsPipelinesPipelineProcessingProcessorFieldsRemoveProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: string[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineBusinessEventsPipelinesPipelineProcessingProcessorFieldsRenameProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to rename on the record
     */
    fields: outputs.OpenpipelineBusinessEventsPipelinesPipelineProcessingProcessorFieldsRenameProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineBusinessEventsPipelinesPipelineProcessingProcessorFieldsRenameProcessorField {
    /**
     * The field to rename
     */
    fromName: string;
    /**
     * The new field name
     */
    toName: string;
}

export interface OpenpipelineBusinessEventsPipelinesPipelineProcessingProcessorTechnologyProcessor {
    /**
     * Optional customer-defined matching condition, that is used in place of the main technology matcher.
     */
    customMatcher?: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * The reference identifier to a specific technology. This technology is applied on the record.
     */
    technologyId: string;
}

export interface OpenpipelineBusinessEventsPipelinesPipelineProductAllocation {
    /**
     * Product allocation processor to use
     */
    processors?: outputs.OpenpipelineBusinessEventsPipelinesPipelineProductAllocationProcessor[];
}

export interface OpenpipelineBusinessEventsPipelinesPipelineProductAllocationProcessor {
    /**
     * Processor to write the occurrences as a product allocation
     */
    productAllocationProcessor?: outputs.OpenpipelineBusinessEventsPipelinesPipelineProductAllocationProcessorProductAllocationProcessor;
}

export interface OpenpipelineBusinessEventsPipelinesPipelineProductAllocationProcessorProductAllocationProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Strategy to assign a value
     */
    value: outputs.OpenpipelineBusinessEventsPipelinesPipelineProductAllocationProcessorProductAllocationProcessorValue;
}

export interface OpenpipelineBusinessEventsPipelinesPipelineProductAllocationProcessorProductAllocationProcessorValue {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineBusinessEventsPipelinesPipelineSecurityContext {
    /**
     * Groups all processors applicable for the SecurityContextStage.
     * Applicable processor is SecurityContextProcessor.
     */
    processors?: outputs.OpenpipelineBusinessEventsPipelinesPipelineSecurityContextProcessor[];
}

export interface OpenpipelineBusinessEventsPipelinesPipelineSecurityContextProcessor {
    /**
     * Processor to set the security context field
     */
    securityContextProcessor?: outputs.OpenpipelineBusinessEventsPipelinesPipelineSecurityContextProcessorSecurityContextProcessor;
}

export interface OpenpipelineBusinessEventsPipelinesPipelineSecurityContextProcessorSecurityContextProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Strategy to assign a value
     */
    value: outputs.OpenpipelineBusinessEventsPipelinesPipelineSecurityContextProcessorSecurityContextProcessorValue;
}

export interface OpenpipelineBusinessEventsPipelinesPipelineSecurityContextProcessorSecurityContextProcessorValue {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineBusinessEventsPipelinesPipelineStorage {
    /**
     * Default bucket assigned to records which do not match any other storage processor
     */
    catchAllBucketName?: string;
    /**
     * Groups all processors applicable for the StorageStage.
     * Applicable processors are BucketAssignmentProcessor and NoStorageProcessor.
     */
    processors?: outputs.OpenpipelineBusinessEventsPipelinesPipelineStorageProcessor[];
}

export interface OpenpipelineBusinessEventsPipelinesPipelineStorageProcessor {
    /**
     * Processor to assign a bucket
     */
    bucketAssignmentProcessor?: outputs.OpenpipelineBusinessEventsPipelinesPipelineStorageProcessorBucketAssignmentProcessor;
    /**
     * Processor to skip storage assignment
     */
    noStorageProcessor?: outputs.OpenpipelineBusinessEventsPipelinesPipelineStorageProcessorNoStorageProcessor;
}

export interface OpenpipelineBusinessEventsPipelinesPipelineStorageProcessorBucketAssignmentProcessor {
    /**
     * Bucket that is assigned when the record is matched
     */
    bucketName: string;
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineBusinessEventsPipelinesPipelineStorageProcessorNoStorageProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineBusinessEventsRouting {
    /**
     * Dynamic routing entry
     */
    entries?: outputs.OpenpipelineBusinessEventsRoutingEntry[];
}

export interface OpenpipelineBusinessEventsRoutingEntry {
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Unique note describing the dynamic route
     */
    note: string;
    /**
     * Identifier of the pipeline the record is routed into
     */
    pipelineId: string;
}

export interface OpenpipelineDavisEventsEndpoints {
    /**
     * Definition of a single ingest source
     */
    endpoints?: outputs.OpenpipelineDavisEventsEndpointsEndpoint[];
}

export interface OpenpipelineDavisEventsEndpointsEndpoint {
    /**
     * The default bucket assigned to records for the ingest source
     */
    defaultBucket?: string;
    /**
     * Display name of the ingest source
     */
    displayName: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * The pre-processing done in the ingest source
     */
    processors?: outputs.OpenpipelineDavisEventsEndpointsEndpointProcessors;
    /**
     * Routing strategy, either dynamic or static
     */
    routing: outputs.OpenpipelineDavisEventsEndpointsEndpointRouting;
    /**
     * The segment of the ingest source, which is applied to the base path. Must be unique within a configuration."
     */
    segment: string;
}

export interface OpenpipelineDavisEventsEndpointsEndpointProcessors {
    /**
     * Groups all processors applicable for processing in the EndpointDefinition.
     * Applicable processors are DqlProcessor, FieldsAddProcessor, FieldsRemoveProcessor, FieldsRenameProcessor and DropProcessor.
     */
    processors?: outputs.OpenpipelineDavisEventsEndpointsEndpointProcessorsProcessor[];
}

export interface OpenpipelineDavisEventsEndpointsEndpointProcessorsProcessor {
    /**
     * Processor to apply a DQL script
     */
    dqlProcessor?: outputs.OpenpipelineDavisEventsEndpointsEndpointProcessorsProcessorDqlProcessor;
    /**
     * Processor to drop the record either during the processing stage or at the endpoint
     */
    dropProcessor?: outputs.OpenpipelineDavisEventsEndpointsEndpointProcessorsProcessorDropProcessor;
    /**
     * Processor to add fields
     */
    fieldsAddProcessor?: outputs.OpenpipelineDavisEventsEndpointsEndpointProcessorsProcessorFieldsAddProcessor;
    /**
     * Processor to remove fields
     */
    fieldsRemoveProcessor?: outputs.OpenpipelineDavisEventsEndpointsEndpointProcessorsProcessorFieldsRemoveProcessor;
    /**
     * Processor to rename fields
     */
    fieldsRenameProcessor?: outputs.OpenpipelineDavisEventsEndpointsEndpointProcessorsProcessorFieldsRenameProcessor;
    /**
     * Processor to apply a technology processors.
     */
    technologyProcessor?: outputs.OpenpipelineDavisEventsEndpointsEndpointProcessorsProcessorTechnologyProcessor;
}

export interface OpenpipelineDavisEventsEndpointsEndpointProcessorsProcessorDqlProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * The DQL script to apply on the record
     */
    dqlScript: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineDavisEventsEndpointsEndpointProcessorsProcessorDropProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineDavisEventsEndpointsEndpointProcessorsProcessorFieldsAddProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: outputs.OpenpipelineDavisEventsEndpointsEndpointProcessorsProcessorFieldsAddProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineDavisEventsEndpointsEndpointProcessorsProcessorFieldsAddProcessorField {
    /**
     * Name of the field
     */
    name: string;
    /**
     * Value to assign to the field
     */
    value: string;
}

export interface OpenpipelineDavisEventsEndpointsEndpointProcessorsProcessorFieldsRemoveProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: string[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineDavisEventsEndpointsEndpointProcessorsProcessorFieldsRenameProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to rename on the record
     */
    fields: outputs.OpenpipelineDavisEventsEndpointsEndpointProcessorsProcessorFieldsRenameProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineDavisEventsEndpointsEndpointProcessorsProcessorFieldsRenameProcessorField {
    /**
     * The field to rename
     */
    fromName: string;
    /**
     * The new field name
     */
    toName: string;
}

export interface OpenpipelineDavisEventsEndpointsEndpointProcessorsProcessorTechnologyProcessor {
    /**
     * Optional customer-defined matching condition, that is used in place of the main technology matcher.
     */
    customMatcher?: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * The reference identifier to a specific technology. This technology is applied on the record.
     */
    technologyId: string;
}

export interface OpenpipelineDavisEventsEndpointsEndpointRouting {
    /**
     * Pipeline ID of the static routing
     */
    pipelineId?: string;
    /**
     * Type of routing, static or dynamic
     */
    type: string;
}

export interface OpenpipelineDavisEventsPipelines {
    /**
     * Definition of a single pipeline
     */
    pipelines?: outputs.OpenpipelineDavisEventsPipelinesPipeline[];
}

export interface OpenpipelineDavisEventsPipelinesPipeline {
    /**
     * Cost Allocation stage configuration of the pipeline
     */
    costAllocation?: outputs.OpenpipelineDavisEventsPipelinesPipelineCostAllocation;
    /**
     * Data extraction stage configuration of the pipeline
     */
    dataExtraction?: outputs.OpenpipelineDavisEventsPipelinesPipelineDataExtraction;
    /**
     * Display name of the pipeline
     */
    displayName: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the pipeline
     */
    id: string;
    /**
     * Metric extraction stage configuration of the pipeline
     */
    metricExtraction?: outputs.OpenpipelineDavisEventsPipelinesPipelineMetricExtraction;
    /**
     * Processing stage configuration of the pipeline
     */
    processing?: outputs.OpenpipelineDavisEventsPipelinesPipelineProcessing;
    /**
     * Product Allocation stage configuration of the pipeline
     */
    productAllocation?: outputs.OpenpipelineDavisEventsPipelinesPipelineProductAllocation;
    /**
     * Security context stage configuration of the pipeline
     */
    securityContext?: outputs.OpenpipelineDavisEventsPipelinesPipelineSecurityContext;
    /**
     * Data extraction stage configuration of the pipeline
     */
    storage?: outputs.OpenpipelineDavisEventsPipelinesPipelineStorage;
}

export interface OpenpipelineDavisEventsPipelinesPipelineCostAllocation {
    /**
     * Cost allocation processor to use
     */
    processors?: outputs.OpenpipelineDavisEventsPipelinesPipelineCostAllocationProcessor[];
}

export interface OpenpipelineDavisEventsPipelinesPipelineCostAllocationProcessor {
    /**
     * Processor to write the occurrences as a cost allocation
     */
    costAllocationProcessor?: outputs.OpenpipelineDavisEventsPipelinesPipelineCostAllocationProcessorCostAllocationProcessor;
}

export interface OpenpipelineDavisEventsPipelinesPipelineCostAllocationProcessorCostAllocationProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Strategy to assign a value
     */
    value: outputs.OpenpipelineDavisEventsPipelinesPipelineCostAllocationProcessorCostAllocationProcessorValue;
}

export interface OpenpipelineDavisEventsPipelinesPipelineCostAllocationProcessorCostAllocationProcessorValue {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineDavisEventsPipelinesPipelineDataExtraction {
    /**
     * Groups all processors applicable for the DataExtractionStage.
     * Applicable processors are DavisEventExtractionProcessor and BizeventExtractionProcessor.
     */
    processors?: outputs.OpenpipelineDavisEventsPipelinesPipelineDataExtractionProcessor[];
}

export interface OpenpipelineDavisEventsPipelinesPipelineDataExtractionProcessor {
    /**
     * Processor to extract a Azure log.
     */
    azureLogForwardingProcessor?: outputs.OpenpipelineDavisEventsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessor;
    /**
     * Processor to extract a bizevent.
     * Fields event.type and event.provider can only be assigned to a constant or field value.
     * A multi-value constant is not supported for those fields.
     */
    bizeventExtractionProcessor?: outputs.OpenpipelineDavisEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessor;
    /**
     * Processor to apply a DQL script
     */
    davisEventExtractionProcessor?: outputs.OpenpipelineDavisEventsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessor;
    /**
     * Processor to extract a security event.
     */
    securityEventExtractionProcessor?: outputs.OpenpipelineDavisEventsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessor;
}

export interface OpenpipelineDavisEventsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Definition of the field extraction
     */
    fieldExtraction?: outputs.OpenpipelineDavisEventsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessorFieldExtraction;
    forwarderConfigId: string;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineDavisEventsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessorFieldExtraction {
    /**
     * Unique fields to include/exclude in the extracted record
     */
    fields?: string[];
    /**
     * Defines how the fields of the source record should be extracted
     */
    semantic: string;
}

export interface OpenpipelineDavisEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Strategy to assign a value
     */
    eventProvider: outputs.OpenpipelineDavisEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventProvider;
    /**
     * Strategy to assign a value
     */
    eventType: outputs.OpenpipelineDavisEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventType;
    /**
     * Definition of the field extraction
     */
    fieldExtraction?: outputs.OpenpipelineDavisEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorFieldExtraction;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineDavisEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventProvider {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineDavisEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventType {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineDavisEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorFieldExtraction {
    /**
     * Unique fields to include/exclude in the extracted record
     */
    fields?: string[];
    /**
     * Defines how the fields of the source record should be extracted
     */
    semantic: string;
}

export interface OpenpipelineDavisEventsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * List of properties for the extracted davis event
     */
    properties: outputs.OpenpipelineDavisEventsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessorProperty[];
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineDavisEventsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessorProperty {
    /**
     * The key to set on the davis event
     */
    key: string;
    /**
     * The value assigned to the key
     */
    value: string;
}

export interface OpenpipelineDavisEventsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Definition of the field extraction
     */
    fieldExtraction?: outputs.OpenpipelineDavisEventsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessorFieldExtraction;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineDavisEventsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessorFieldExtraction {
    /**
     * Unique fields to include/exclude in the extracted record
     */
    fields?: string[];
    /**
     * Defines how the fields of the source record should be extracted
     */
    semantic: string;
}

export interface OpenpipelineDavisEventsPipelinesPipelineMetricExtraction {
    /**
     * Data extraction processor to use
     */
    processors?: outputs.OpenpipelineDavisEventsPipelinesPipelineMetricExtractionProcessor[];
}

export interface OpenpipelineDavisEventsPipelinesPipelineMetricExtractionProcessor {
    /**
     * Processor to write the occurrences as a metric
     */
    counterMetricExtractionProcessor?: outputs.OpenpipelineDavisEventsPipelinesPipelineMetricExtractionProcessorCounterMetricExtractionProcessor;
    /**
     * Processor to write the occurrences as a metric
     */
    samplingAwareCounterMetricExtractionProcessor?: outputs.OpenpipelineDavisEventsPipelinesPipelineMetricExtractionProcessorSamplingAwareCounterMetricExtractionProcessor;
    /**
     * Processor to extract a value from a field as a metric.
     */
    samplingAwareValueMetricExtractionProcessor?: outputs.OpenpipelineDavisEventsPipelinesPipelineMetricExtractionProcessorSamplingAwareValueMetricExtractionProcessor;
    /**
     * Processor to extract a value from a field as a metric
     */
    valueMetricExtractionProcessor?: outputs.OpenpipelineDavisEventsPipelinesPipelineMetricExtractionProcessorValueMetricExtractionProcessor;
}

export interface OpenpipelineDavisEventsPipelinesPipelineMetricExtractionProcessorCounterMetricExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of dimensions to add to the metric
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineDavisEventsPipelinesPipelineMetricExtractionProcessorSamplingAwareCounterMetricExtractionProcessor {
    /**
     * Indicates whether aggregation is considered for metric extraction
     */
    aggregation?: string;
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of unique dimensions to add to the metric.
     * Dimensions are represented in the format '({dimensionName}=)?{sourceField}'.
     * '{dimensionName}' is optional if {sourceField} represents a valid metric dimension name.
     * '{sourceField}' has to represent a valid DQL field accessor and it can access a nested field (for example, 'field[field2][0]')
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Indicates whether sampling is considered for metric extraction. Possible values: 'DISABLED', 'ENABLED'
     */
    sampling?: string;
}

export interface OpenpipelineDavisEventsPipelinesPipelineMetricExtractionProcessorSamplingAwareValueMetricExtractionProcessor {
    /**
     * Indicates whether aggregation is considered for metric extraction. Possible values: 'DISABLED', 'ENABLED'
     */
    aggregation?: string;
    /**
     * The default value to use if the given field value could not be extracted. String value must be a number
     */
    defaultValue?: string;
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of unique dimensions to add to the metric.
     * Dimensions are represented in the format '({dimensionName}=)?{sourceField}'.
     * '{dimensionName}' is optional if {sourceField} represents a valid metric dimension name.
     * '{sourceField}' has to represent a valid DQL field accessor and it can access a nested field (for example, 'field[field2][0]')
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * The field from which to extract the value for the metric, or 'null' for a duration measurement
     */
    field?: string;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Indicates whether the metric value should be the specified field or duration. Possible values: 'DURATION', 'FIELD'
     */
    measurement: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Indicates whether sampling is considered for metric extraction. Possible values: 'DISABLED', 'ENABLED'
     */
    sampling?: string;
}

export interface OpenpipelineDavisEventsPipelinesPipelineMetricExtractionProcessorValueMetricExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of dimensions to add to the metric
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * The field to extract the value for the metric
     */
    field: string;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineDavisEventsPipelinesPipelineProcessing {
    /**
     * Groups all processors applicable for the ProcessingStage.
     * Applicable processors are DqlProcessor, FieldsAddProcessor, FieldsRemoveProcessor, FieldsRenameProcessor, TechnologyProcessor and DropProcessor.
     */
    processors?: outputs.OpenpipelineDavisEventsPipelinesPipelineProcessingProcessor[];
}

export interface OpenpipelineDavisEventsPipelinesPipelineProcessingProcessor {
    /**
     * Processor to apply a DQL script
     */
    dqlProcessor?: outputs.OpenpipelineDavisEventsPipelinesPipelineProcessingProcessorDqlProcessor;
    /**
     * Processor to drop the record either during the processing stage or at the endpoint
     */
    dropProcessor?: outputs.OpenpipelineDavisEventsPipelinesPipelineProcessingProcessorDropProcessor;
    /**
     * Processor to add fields
     */
    fieldsAddProcessor?: outputs.OpenpipelineDavisEventsPipelinesPipelineProcessingProcessorFieldsAddProcessor;
    /**
     * Processor to remove fields
     */
    fieldsRemoveProcessor?: outputs.OpenpipelineDavisEventsPipelinesPipelineProcessingProcessorFieldsRemoveProcessor;
    /**
     * Processor to rename fields
     */
    fieldsRenameProcessor?: outputs.OpenpipelineDavisEventsPipelinesPipelineProcessingProcessorFieldsRenameProcessor;
    /**
     * Processor to apply a technology processors
     */
    technologyProcessor?: outputs.OpenpipelineDavisEventsPipelinesPipelineProcessingProcessorTechnologyProcessor;
}

export interface OpenpipelineDavisEventsPipelinesPipelineProcessingProcessorDqlProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * The DQL script to apply on the record
     */
    dqlScript: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineDavisEventsPipelinesPipelineProcessingProcessorDropProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineDavisEventsPipelinesPipelineProcessingProcessorFieldsAddProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: outputs.OpenpipelineDavisEventsPipelinesPipelineProcessingProcessorFieldsAddProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineDavisEventsPipelinesPipelineProcessingProcessorFieldsAddProcessorField {
    /**
     * Name of the field
     */
    name: string;
    /**
     * Value to assign to the field
     */
    value: string;
}

export interface OpenpipelineDavisEventsPipelinesPipelineProcessingProcessorFieldsRemoveProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: string[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineDavisEventsPipelinesPipelineProcessingProcessorFieldsRenameProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to rename on the record
     */
    fields: outputs.OpenpipelineDavisEventsPipelinesPipelineProcessingProcessorFieldsRenameProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineDavisEventsPipelinesPipelineProcessingProcessorFieldsRenameProcessorField {
    /**
     * The field to rename
     */
    fromName: string;
    /**
     * The new field name
     */
    toName: string;
}

export interface OpenpipelineDavisEventsPipelinesPipelineProcessingProcessorTechnologyProcessor {
    /**
     * Optional customer-defined matching condition, that is used in place of the main technology matcher.
     */
    customMatcher?: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * The reference identifier to a specific technology. This technology is applied on the record.
     */
    technologyId: string;
}

export interface OpenpipelineDavisEventsPipelinesPipelineProductAllocation {
    /**
     * Product allocation processor to use
     */
    processors?: outputs.OpenpipelineDavisEventsPipelinesPipelineProductAllocationProcessor[];
}

export interface OpenpipelineDavisEventsPipelinesPipelineProductAllocationProcessor {
    /**
     * Processor to write the occurrences as a product allocation
     */
    productAllocationProcessor?: outputs.OpenpipelineDavisEventsPipelinesPipelineProductAllocationProcessorProductAllocationProcessor;
}

export interface OpenpipelineDavisEventsPipelinesPipelineProductAllocationProcessorProductAllocationProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Strategy to assign a value
     */
    value: outputs.OpenpipelineDavisEventsPipelinesPipelineProductAllocationProcessorProductAllocationProcessorValue;
}

export interface OpenpipelineDavisEventsPipelinesPipelineProductAllocationProcessorProductAllocationProcessorValue {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineDavisEventsPipelinesPipelineSecurityContext {
    /**
     * Groups all processors applicable for the SecurityContextStage.
     * Applicable processor is SecurityContextProcessor.
     */
    processors?: outputs.OpenpipelineDavisEventsPipelinesPipelineSecurityContextProcessor[];
}

export interface OpenpipelineDavisEventsPipelinesPipelineSecurityContextProcessor {
    /**
     * Processor to set the security context field
     */
    securityContextProcessor?: outputs.OpenpipelineDavisEventsPipelinesPipelineSecurityContextProcessorSecurityContextProcessor;
}

export interface OpenpipelineDavisEventsPipelinesPipelineSecurityContextProcessorSecurityContextProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Strategy to assign a value
     */
    value: outputs.OpenpipelineDavisEventsPipelinesPipelineSecurityContextProcessorSecurityContextProcessorValue;
}

export interface OpenpipelineDavisEventsPipelinesPipelineSecurityContextProcessorSecurityContextProcessorValue {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineDavisEventsPipelinesPipelineStorage {
    /**
     * Default bucket assigned to records which do not match any other storage processor
     */
    catchAllBucketName?: string;
    /**
     * Groups all processors applicable for the StorageStage.
     * Applicable processors are BucketAssignmentProcessor and NoStorageProcessor.
     */
    processors?: outputs.OpenpipelineDavisEventsPipelinesPipelineStorageProcessor[];
}

export interface OpenpipelineDavisEventsPipelinesPipelineStorageProcessor {
    /**
     * Processor to assign a bucket
     */
    bucketAssignmentProcessor?: outputs.OpenpipelineDavisEventsPipelinesPipelineStorageProcessorBucketAssignmentProcessor;
    /**
     * Processor to skip storage assignment
     */
    noStorageProcessor?: outputs.OpenpipelineDavisEventsPipelinesPipelineStorageProcessorNoStorageProcessor;
}

export interface OpenpipelineDavisEventsPipelinesPipelineStorageProcessorBucketAssignmentProcessor {
    /**
     * Bucket that is assigned when the record is matched
     */
    bucketName: string;
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineDavisEventsPipelinesPipelineStorageProcessorNoStorageProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineDavisEventsRouting {
    /**
     * Dynamic routing entry
     */
    entries?: outputs.OpenpipelineDavisEventsRoutingEntry[];
}

export interface OpenpipelineDavisEventsRoutingEntry {
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Unique note describing the dynamic route
     */
    note: string;
    /**
     * Identifier of the pipeline the record is routed into
     */
    pipelineId: string;
}

export interface OpenpipelineDavisProblemsEndpoints {
    /**
     * Definition of a single ingest source
     */
    endpoints?: outputs.OpenpipelineDavisProblemsEndpointsEndpoint[];
}

export interface OpenpipelineDavisProblemsEndpointsEndpoint {
    /**
     * The default bucket assigned to records for the ingest source
     */
    defaultBucket?: string;
    /**
     * Display name of the ingest source
     */
    displayName: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * The pre-processing done in the ingest source
     */
    processors?: outputs.OpenpipelineDavisProblemsEndpointsEndpointProcessors;
    /**
     * Routing strategy, either dynamic or static
     */
    routing: outputs.OpenpipelineDavisProblemsEndpointsEndpointRouting;
    /**
     * The segment of the ingest source, which is applied to the base path. Must be unique within a configuration."
     */
    segment: string;
}

export interface OpenpipelineDavisProblemsEndpointsEndpointProcessors {
    /**
     * Groups all processors applicable for processing in the EndpointDefinition.
     * Applicable processors are DqlProcessor, FieldsAddProcessor, FieldsRemoveProcessor, FieldsRenameProcessor and DropProcessor.
     */
    processors?: outputs.OpenpipelineDavisProblemsEndpointsEndpointProcessorsProcessor[];
}

export interface OpenpipelineDavisProblemsEndpointsEndpointProcessorsProcessor {
    /**
     * Processor to apply a DQL script
     */
    dqlProcessor?: outputs.OpenpipelineDavisProblemsEndpointsEndpointProcessorsProcessorDqlProcessor;
    /**
     * Processor to drop the record either during the processing stage or at the endpoint
     */
    dropProcessor?: outputs.OpenpipelineDavisProblemsEndpointsEndpointProcessorsProcessorDropProcessor;
    /**
     * Processor to add fields
     */
    fieldsAddProcessor?: outputs.OpenpipelineDavisProblemsEndpointsEndpointProcessorsProcessorFieldsAddProcessor;
    /**
     * Processor to remove fields
     */
    fieldsRemoveProcessor?: outputs.OpenpipelineDavisProblemsEndpointsEndpointProcessorsProcessorFieldsRemoveProcessor;
    /**
     * Processor to rename fields
     */
    fieldsRenameProcessor?: outputs.OpenpipelineDavisProblemsEndpointsEndpointProcessorsProcessorFieldsRenameProcessor;
    /**
     * Processor to apply a technology processors.
     */
    technologyProcessor?: outputs.OpenpipelineDavisProblemsEndpointsEndpointProcessorsProcessorTechnologyProcessor;
}

export interface OpenpipelineDavisProblemsEndpointsEndpointProcessorsProcessorDqlProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * The DQL script to apply on the record
     */
    dqlScript: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineDavisProblemsEndpointsEndpointProcessorsProcessorDropProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineDavisProblemsEndpointsEndpointProcessorsProcessorFieldsAddProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: outputs.OpenpipelineDavisProblemsEndpointsEndpointProcessorsProcessorFieldsAddProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineDavisProblemsEndpointsEndpointProcessorsProcessorFieldsAddProcessorField {
    /**
     * Name of the field
     */
    name: string;
    /**
     * Value to assign to the field
     */
    value: string;
}

export interface OpenpipelineDavisProblemsEndpointsEndpointProcessorsProcessorFieldsRemoveProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: string[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineDavisProblemsEndpointsEndpointProcessorsProcessorFieldsRenameProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to rename on the record
     */
    fields: outputs.OpenpipelineDavisProblemsEndpointsEndpointProcessorsProcessorFieldsRenameProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineDavisProblemsEndpointsEndpointProcessorsProcessorFieldsRenameProcessorField {
    /**
     * The field to rename
     */
    fromName: string;
    /**
     * The new field name
     */
    toName: string;
}

export interface OpenpipelineDavisProblemsEndpointsEndpointProcessorsProcessorTechnologyProcessor {
    /**
     * Optional customer-defined matching condition, that is used in place of the main technology matcher.
     */
    customMatcher?: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * The reference identifier to a specific technology. This technology is applied on the record.
     */
    technologyId: string;
}

export interface OpenpipelineDavisProblemsEndpointsEndpointRouting {
    /**
     * Pipeline ID of the static routing
     */
    pipelineId?: string;
    /**
     * Type of routing, static or dynamic
     */
    type: string;
}

export interface OpenpipelineDavisProblemsPipelines {
    /**
     * Definition of a single pipeline
     */
    pipelines?: outputs.OpenpipelineDavisProblemsPipelinesPipeline[];
}

export interface OpenpipelineDavisProblemsPipelinesPipeline {
    /**
     * Cost Allocation stage configuration of the pipeline
     */
    costAllocation?: outputs.OpenpipelineDavisProblemsPipelinesPipelineCostAllocation;
    /**
     * Data extraction stage configuration of the pipeline
     */
    dataExtraction?: outputs.OpenpipelineDavisProblemsPipelinesPipelineDataExtraction;
    /**
     * Display name of the pipeline
     */
    displayName: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the pipeline
     */
    id: string;
    /**
     * Metric extraction stage configuration of the pipeline
     */
    metricExtraction?: outputs.OpenpipelineDavisProblemsPipelinesPipelineMetricExtraction;
    /**
     * Processing stage configuration of the pipeline
     */
    processing?: outputs.OpenpipelineDavisProblemsPipelinesPipelineProcessing;
    /**
     * Product Allocation stage configuration of the pipeline
     */
    productAllocation?: outputs.OpenpipelineDavisProblemsPipelinesPipelineProductAllocation;
    /**
     * Security context stage configuration of the pipeline
     */
    securityContext?: outputs.OpenpipelineDavisProblemsPipelinesPipelineSecurityContext;
    /**
     * Data extraction stage configuration of the pipeline
     */
    storage?: outputs.OpenpipelineDavisProblemsPipelinesPipelineStorage;
}

export interface OpenpipelineDavisProblemsPipelinesPipelineCostAllocation {
    /**
     * Cost allocation processor to use
     */
    processors?: outputs.OpenpipelineDavisProblemsPipelinesPipelineCostAllocationProcessor[];
}

export interface OpenpipelineDavisProblemsPipelinesPipelineCostAllocationProcessor {
    /**
     * Processor to write the occurrences as a cost allocation
     */
    costAllocationProcessor?: outputs.OpenpipelineDavisProblemsPipelinesPipelineCostAllocationProcessorCostAllocationProcessor;
}

export interface OpenpipelineDavisProblemsPipelinesPipelineCostAllocationProcessorCostAllocationProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Strategy to assign a value
     */
    value: outputs.OpenpipelineDavisProblemsPipelinesPipelineCostAllocationProcessorCostAllocationProcessorValue;
}

export interface OpenpipelineDavisProblemsPipelinesPipelineCostAllocationProcessorCostAllocationProcessorValue {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineDavisProblemsPipelinesPipelineDataExtraction {
    /**
     * Groups all processors applicable for the DataExtractionStage.
     * Applicable processors are DavisEventExtractionProcessor and BizeventExtractionProcessor.
     */
    processors?: outputs.OpenpipelineDavisProblemsPipelinesPipelineDataExtractionProcessor[];
}

export interface OpenpipelineDavisProblemsPipelinesPipelineDataExtractionProcessor {
    /**
     * Processor to extract a Azure log.
     */
    azureLogForwardingProcessor?: outputs.OpenpipelineDavisProblemsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessor;
    /**
     * Processor to extract a bizevent.
     * Fields event.type and event.provider can only be assigned to a constant or field value.
     * A multi-value constant is not supported for those fields.
     */
    bizeventExtractionProcessor?: outputs.OpenpipelineDavisProblemsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessor;
    /**
     * Processor to apply a DQL script
     */
    davisEventExtractionProcessor?: outputs.OpenpipelineDavisProblemsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessor;
    /**
     * Processor to extract a security event.
     */
    securityEventExtractionProcessor?: outputs.OpenpipelineDavisProblemsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessor;
}

export interface OpenpipelineDavisProblemsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Definition of the field extraction
     */
    fieldExtraction?: outputs.OpenpipelineDavisProblemsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessorFieldExtraction;
    forwarderConfigId: string;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineDavisProblemsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessorFieldExtraction {
    /**
     * Unique fields to include/exclude in the extracted record
     */
    fields?: string[];
    /**
     * Defines how the fields of the source record should be extracted
     */
    semantic: string;
}

export interface OpenpipelineDavisProblemsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Strategy to assign a value
     */
    eventProvider: outputs.OpenpipelineDavisProblemsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventProvider;
    /**
     * Strategy to assign a value
     */
    eventType: outputs.OpenpipelineDavisProblemsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventType;
    /**
     * Definition of the field extraction
     */
    fieldExtraction?: outputs.OpenpipelineDavisProblemsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorFieldExtraction;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineDavisProblemsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventProvider {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineDavisProblemsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventType {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineDavisProblemsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorFieldExtraction {
    /**
     * Unique fields to include/exclude in the extracted record
     */
    fields?: string[];
    /**
     * Defines how the fields of the source record should be extracted
     */
    semantic: string;
}

export interface OpenpipelineDavisProblemsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * List of properties for the extracted davis event
     */
    properties: outputs.OpenpipelineDavisProblemsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessorProperty[];
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineDavisProblemsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessorProperty {
    /**
     * The key to set on the davis event
     */
    key: string;
    /**
     * The value assigned to the key
     */
    value: string;
}

export interface OpenpipelineDavisProblemsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Definition of the field extraction
     */
    fieldExtraction?: outputs.OpenpipelineDavisProblemsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessorFieldExtraction;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineDavisProblemsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessorFieldExtraction {
    /**
     * Unique fields to include/exclude in the extracted record
     */
    fields?: string[];
    /**
     * Defines how the fields of the source record should be extracted
     */
    semantic: string;
}

export interface OpenpipelineDavisProblemsPipelinesPipelineMetricExtraction {
    /**
     * Data extraction processor to use
     */
    processors?: outputs.OpenpipelineDavisProblemsPipelinesPipelineMetricExtractionProcessor[];
}

export interface OpenpipelineDavisProblemsPipelinesPipelineMetricExtractionProcessor {
    /**
     * Processor to write the occurrences as a metric
     */
    counterMetricExtractionProcessor?: outputs.OpenpipelineDavisProblemsPipelinesPipelineMetricExtractionProcessorCounterMetricExtractionProcessor;
    /**
     * Processor to write the occurrences as a metric
     */
    samplingAwareCounterMetricExtractionProcessor?: outputs.OpenpipelineDavisProblemsPipelinesPipelineMetricExtractionProcessorSamplingAwareCounterMetricExtractionProcessor;
    /**
     * Processor to extract a value from a field as a metric.
     */
    samplingAwareValueMetricExtractionProcessor?: outputs.OpenpipelineDavisProblemsPipelinesPipelineMetricExtractionProcessorSamplingAwareValueMetricExtractionProcessor;
    /**
     * Processor to extract a value from a field as a metric
     */
    valueMetricExtractionProcessor?: outputs.OpenpipelineDavisProblemsPipelinesPipelineMetricExtractionProcessorValueMetricExtractionProcessor;
}

export interface OpenpipelineDavisProblemsPipelinesPipelineMetricExtractionProcessorCounterMetricExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of dimensions to add to the metric
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineDavisProblemsPipelinesPipelineMetricExtractionProcessorSamplingAwareCounterMetricExtractionProcessor {
    /**
     * Indicates whether aggregation is considered for metric extraction
     */
    aggregation?: string;
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of unique dimensions to add to the metric.
     * Dimensions are represented in the format '({dimensionName}=)?{sourceField}'.
     * '{dimensionName}' is optional if {sourceField} represents a valid metric dimension name.
     * '{sourceField}' has to represent a valid DQL field accessor and it can access a nested field (for example, 'field[field2][0]')
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Indicates whether sampling is considered for metric extraction. Possible values: 'DISABLED', 'ENABLED'
     */
    sampling?: string;
}

export interface OpenpipelineDavisProblemsPipelinesPipelineMetricExtractionProcessorSamplingAwareValueMetricExtractionProcessor {
    /**
     * Indicates whether aggregation is considered for metric extraction. Possible values: 'DISABLED', 'ENABLED'
     */
    aggregation?: string;
    /**
     * The default value to use if the given field value could not be extracted. String value must be a number
     */
    defaultValue?: string;
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of unique dimensions to add to the metric.
     * Dimensions are represented in the format '({dimensionName}=)?{sourceField}'.
     * '{dimensionName}' is optional if {sourceField} represents a valid metric dimension name.
     * '{sourceField}' has to represent a valid DQL field accessor and it can access a nested field (for example, 'field[field2][0]')
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * The field from which to extract the value for the metric, or 'null' for a duration measurement
     */
    field?: string;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Indicates whether the metric value should be the specified field or duration. Possible values: 'DURATION', 'FIELD'
     */
    measurement: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Indicates whether sampling is considered for metric extraction. Possible values: 'DISABLED', 'ENABLED'
     */
    sampling?: string;
}

export interface OpenpipelineDavisProblemsPipelinesPipelineMetricExtractionProcessorValueMetricExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of dimensions to add to the metric
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * The field to extract the value for the metric
     */
    field: string;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineDavisProblemsPipelinesPipelineProcessing {
    /**
     * Groups all processors applicable for the ProcessingStage.
     * Applicable processors are DqlProcessor, FieldsAddProcessor, FieldsRemoveProcessor, FieldsRenameProcessor, TechnologyProcessor and DropProcessor.
     */
    processors?: outputs.OpenpipelineDavisProblemsPipelinesPipelineProcessingProcessor[];
}

export interface OpenpipelineDavisProblemsPipelinesPipelineProcessingProcessor {
    /**
     * Processor to apply a DQL script
     */
    dqlProcessor?: outputs.OpenpipelineDavisProblemsPipelinesPipelineProcessingProcessorDqlProcessor;
    /**
     * Processor to drop the record either during the processing stage or at the endpoint
     */
    dropProcessor?: outputs.OpenpipelineDavisProblemsPipelinesPipelineProcessingProcessorDropProcessor;
    /**
     * Processor to add fields
     */
    fieldsAddProcessor?: outputs.OpenpipelineDavisProblemsPipelinesPipelineProcessingProcessorFieldsAddProcessor;
    /**
     * Processor to remove fields
     */
    fieldsRemoveProcessor?: outputs.OpenpipelineDavisProblemsPipelinesPipelineProcessingProcessorFieldsRemoveProcessor;
    /**
     * Processor to rename fields
     */
    fieldsRenameProcessor?: outputs.OpenpipelineDavisProblemsPipelinesPipelineProcessingProcessorFieldsRenameProcessor;
    /**
     * Processor to apply a technology processors
     */
    technologyProcessor?: outputs.OpenpipelineDavisProblemsPipelinesPipelineProcessingProcessorTechnologyProcessor;
}

export interface OpenpipelineDavisProblemsPipelinesPipelineProcessingProcessorDqlProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * The DQL script to apply on the record
     */
    dqlScript: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineDavisProblemsPipelinesPipelineProcessingProcessorDropProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineDavisProblemsPipelinesPipelineProcessingProcessorFieldsAddProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: outputs.OpenpipelineDavisProblemsPipelinesPipelineProcessingProcessorFieldsAddProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineDavisProblemsPipelinesPipelineProcessingProcessorFieldsAddProcessorField {
    /**
     * Name of the field
     */
    name: string;
    /**
     * Value to assign to the field
     */
    value: string;
}

export interface OpenpipelineDavisProblemsPipelinesPipelineProcessingProcessorFieldsRemoveProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: string[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineDavisProblemsPipelinesPipelineProcessingProcessorFieldsRenameProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to rename on the record
     */
    fields: outputs.OpenpipelineDavisProblemsPipelinesPipelineProcessingProcessorFieldsRenameProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineDavisProblemsPipelinesPipelineProcessingProcessorFieldsRenameProcessorField {
    /**
     * The field to rename
     */
    fromName: string;
    /**
     * The new field name
     */
    toName: string;
}

export interface OpenpipelineDavisProblemsPipelinesPipelineProcessingProcessorTechnologyProcessor {
    /**
     * Optional customer-defined matching condition, that is used in place of the main technology matcher.
     */
    customMatcher?: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * The reference identifier to a specific technology. This technology is applied on the record.
     */
    technologyId: string;
}

export interface OpenpipelineDavisProblemsPipelinesPipelineProductAllocation {
    /**
     * Product allocation processor to use
     */
    processors?: outputs.OpenpipelineDavisProblemsPipelinesPipelineProductAllocationProcessor[];
}

export interface OpenpipelineDavisProblemsPipelinesPipelineProductAllocationProcessor {
    /**
     * Processor to write the occurrences as a product allocation
     */
    productAllocationProcessor?: outputs.OpenpipelineDavisProblemsPipelinesPipelineProductAllocationProcessorProductAllocationProcessor;
}

export interface OpenpipelineDavisProblemsPipelinesPipelineProductAllocationProcessorProductAllocationProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Strategy to assign a value
     */
    value: outputs.OpenpipelineDavisProblemsPipelinesPipelineProductAllocationProcessorProductAllocationProcessorValue;
}

export interface OpenpipelineDavisProblemsPipelinesPipelineProductAllocationProcessorProductAllocationProcessorValue {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineDavisProblemsPipelinesPipelineSecurityContext {
    /**
     * Groups all processors applicable for the SecurityContextStage.
     * Applicable processor is SecurityContextProcessor.
     */
    processors?: outputs.OpenpipelineDavisProblemsPipelinesPipelineSecurityContextProcessor[];
}

export interface OpenpipelineDavisProblemsPipelinesPipelineSecurityContextProcessor {
    /**
     * Processor to set the security context field
     */
    securityContextProcessor?: outputs.OpenpipelineDavisProblemsPipelinesPipelineSecurityContextProcessorSecurityContextProcessor;
}

export interface OpenpipelineDavisProblemsPipelinesPipelineSecurityContextProcessorSecurityContextProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Strategy to assign a value
     */
    value: outputs.OpenpipelineDavisProblemsPipelinesPipelineSecurityContextProcessorSecurityContextProcessorValue;
}

export interface OpenpipelineDavisProblemsPipelinesPipelineSecurityContextProcessorSecurityContextProcessorValue {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineDavisProblemsPipelinesPipelineStorage {
    /**
     * Default bucket assigned to records which do not match any other storage processor
     */
    catchAllBucketName?: string;
    /**
     * Groups all processors applicable for the StorageStage.
     * Applicable processors are BucketAssignmentProcessor and NoStorageProcessor.
     */
    processors?: outputs.OpenpipelineDavisProblemsPipelinesPipelineStorageProcessor[];
}

export interface OpenpipelineDavisProblemsPipelinesPipelineStorageProcessor {
    /**
     * Processor to assign a bucket
     */
    bucketAssignmentProcessor?: outputs.OpenpipelineDavisProblemsPipelinesPipelineStorageProcessorBucketAssignmentProcessor;
    /**
     * Processor to skip storage assignment
     */
    noStorageProcessor?: outputs.OpenpipelineDavisProblemsPipelinesPipelineStorageProcessorNoStorageProcessor;
}

export interface OpenpipelineDavisProblemsPipelinesPipelineStorageProcessorBucketAssignmentProcessor {
    /**
     * Bucket that is assigned when the record is matched
     */
    bucketName: string;
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineDavisProblemsPipelinesPipelineStorageProcessorNoStorageProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineDavisProblemsRouting {
    /**
     * Dynamic routing entry
     */
    entries?: outputs.OpenpipelineDavisProblemsRoutingEntry[];
}

export interface OpenpipelineDavisProblemsRoutingEntry {
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Unique note describing the dynamic route
     */
    note: string;
    /**
     * Identifier of the pipeline the record is routed into
     */
    pipelineId: string;
}

export interface OpenpipelineEventsEndpoints {
    /**
     * Definition of a single ingest source
     */
    endpoints?: outputs.OpenpipelineEventsEndpointsEndpoint[];
}

export interface OpenpipelineEventsEndpointsEndpoint {
    /**
     * The default bucket assigned to records for the ingest source
     */
    defaultBucket?: string;
    /**
     * Display name of the ingest source
     */
    displayName: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * The pre-processing done in the ingest source
     */
    processors?: outputs.OpenpipelineEventsEndpointsEndpointProcessors;
    /**
     * Routing strategy, either dynamic or static
     */
    routing: outputs.OpenpipelineEventsEndpointsEndpointRouting;
    /**
     * The segment of the ingest source, which is applied to the base path. Must be unique within a configuration."
     */
    segment: string;
}

export interface OpenpipelineEventsEndpointsEndpointProcessors {
    /**
     * Groups all processors applicable for processing in the EndpointDefinition.
     * Applicable processors are DqlProcessor, FieldsAddProcessor, FieldsRemoveProcessor, FieldsRenameProcessor and DropProcessor.
     */
    processors?: outputs.OpenpipelineEventsEndpointsEndpointProcessorsProcessor[];
}

export interface OpenpipelineEventsEndpointsEndpointProcessorsProcessor {
    /**
     * Processor to apply a DQL script
     */
    dqlProcessor?: outputs.OpenpipelineEventsEndpointsEndpointProcessorsProcessorDqlProcessor;
    /**
     * Processor to drop the record either during the processing stage or at the endpoint
     */
    dropProcessor?: outputs.OpenpipelineEventsEndpointsEndpointProcessorsProcessorDropProcessor;
    /**
     * Processor to add fields
     */
    fieldsAddProcessor?: outputs.OpenpipelineEventsEndpointsEndpointProcessorsProcessorFieldsAddProcessor;
    /**
     * Processor to remove fields
     */
    fieldsRemoveProcessor?: outputs.OpenpipelineEventsEndpointsEndpointProcessorsProcessorFieldsRemoveProcessor;
    /**
     * Processor to rename fields
     */
    fieldsRenameProcessor?: outputs.OpenpipelineEventsEndpointsEndpointProcessorsProcessorFieldsRenameProcessor;
    /**
     * Processor to apply a technology processors.
     */
    technologyProcessor?: outputs.OpenpipelineEventsEndpointsEndpointProcessorsProcessorTechnologyProcessor;
}

export interface OpenpipelineEventsEndpointsEndpointProcessorsProcessorDqlProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * The DQL script to apply on the record
     */
    dqlScript: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineEventsEndpointsEndpointProcessorsProcessorDropProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineEventsEndpointsEndpointProcessorsProcessorFieldsAddProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: outputs.OpenpipelineEventsEndpointsEndpointProcessorsProcessorFieldsAddProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineEventsEndpointsEndpointProcessorsProcessorFieldsAddProcessorField {
    /**
     * Name of the field
     */
    name: string;
    /**
     * Value to assign to the field
     */
    value: string;
}

export interface OpenpipelineEventsEndpointsEndpointProcessorsProcessorFieldsRemoveProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: string[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineEventsEndpointsEndpointProcessorsProcessorFieldsRenameProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to rename on the record
     */
    fields: outputs.OpenpipelineEventsEndpointsEndpointProcessorsProcessorFieldsRenameProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineEventsEndpointsEndpointProcessorsProcessorFieldsRenameProcessorField {
    /**
     * The field to rename
     */
    fromName: string;
    /**
     * The new field name
     */
    toName: string;
}

export interface OpenpipelineEventsEndpointsEndpointProcessorsProcessorTechnologyProcessor {
    /**
     * Optional customer-defined matching condition, that is used in place of the main technology matcher.
     */
    customMatcher?: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * The reference identifier to a specific technology. This technology is applied on the record.
     */
    technologyId: string;
}

export interface OpenpipelineEventsEndpointsEndpointRouting {
    /**
     * Pipeline ID of the static routing
     */
    pipelineId?: string;
    /**
     * Type of routing, static or dynamic
     */
    type: string;
}

export interface OpenpipelineEventsPipelines {
    /**
     * Definition of a single pipeline
     */
    pipelines?: outputs.OpenpipelineEventsPipelinesPipeline[];
}

export interface OpenpipelineEventsPipelinesPipeline {
    /**
     * Cost Allocation stage configuration of the pipeline
     */
    costAllocation?: outputs.OpenpipelineEventsPipelinesPipelineCostAllocation;
    /**
     * Data extraction stage configuration of the pipeline
     */
    dataExtraction?: outputs.OpenpipelineEventsPipelinesPipelineDataExtraction;
    /**
     * Display name of the pipeline
     */
    displayName: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the pipeline
     */
    id: string;
    /**
     * Metric extraction stage configuration of the pipeline
     */
    metricExtraction?: outputs.OpenpipelineEventsPipelinesPipelineMetricExtraction;
    /**
     * Processing stage configuration of the pipeline
     */
    processing?: outputs.OpenpipelineEventsPipelinesPipelineProcessing;
    /**
     * Product Allocation stage configuration of the pipeline
     */
    productAllocation?: outputs.OpenpipelineEventsPipelinesPipelineProductAllocation;
    /**
     * Security context stage configuration of the pipeline
     */
    securityContext?: outputs.OpenpipelineEventsPipelinesPipelineSecurityContext;
    /**
     * Data extraction stage configuration of the pipeline
     */
    storage?: outputs.OpenpipelineEventsPipelinesPipelineStorage;
}

export interface OpenpipelineEventsPipelinesPipelineCostAllocation {
    /**
     * Cost allocation processor to use
     */
    processors?: outputs.OpenpipelineEventsPipelinesPipelineCostAllocationProcessor[];
}

export interface OpenpipelineEventsPipelinesPipelineCostAllocationProcessor {
    /**
     * Processor to write the occurrences as a cost allocation
     */
    costAllocationProcessor?: outputs.OpenpipelineEventsPipelinesPipelineCostAllocationProcessorCostAllocationProcessor;
}

export interface OpenpipelineEventsPipelinesPipelineCostAllocationProcessorCostAllocationProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Strategy to assign a value
     */
    value: outputs.OpenpipelineEventsPipelinesPipelineCostAllocationProcessorCostAllocationProcessorValue;
}

export interface OpenpipelineEventsPipelinesPipelineCostAllocationProcessorCostAllocationProcessorValue {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineEventsPipelinesPipelineDataExtraction {
    /**
     * Groups all processors applicable for the DataExtractionStage.
     * Applicable processors are DavisEventExtractionProcessor and BizeventExtractionProcessor.
     */
    processors?: outputs.OpenpipelineEventsPipelinesPipelineDataExtractionProcessor[];
}

export interface OpenpipelineEventsPipelinesPipelineDataExtractionProcessor {
    /**
     * Processor to extract a Azure log.
     */
    azureLogForwardingProcessor?: outputs.OpenpipelineEventsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessor;
    /**
     * Processor to extract a bizevent.
     * Fields event.type and event.provider can only be assigned to a constant or field value.
     * A multi-value constant is not supported for those fields.
     */
    bizeventExtractionProcessor?: outputs.OpenpipelineEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessor;
    /**
     * Processor to apply a DQL script
     */
    davisEventExtractionProcessor?: outputs.OpenpipelineEventsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessor;
    /**
     * Processor to extract a security event.
     */
    securityEventExtractionProcessor?: outputs.OpenpipelineEventsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessor;
}

export interface OpenpipelineEventsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Definition of the field extraction
     */
    fieldExtraction?: outputs.OpenpipelineEventsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessorFieldExtraction;
    forwarderConfigId: string;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineEventsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessorFieldExtraction {
    /**
     * Unique fields to include/exclude in the extracted record
     */
    fields?: string[];
    /**
     * Defines how the fields of the source record should be extracted
     */
    semantic: string;
}

export interface OpenpipelineEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Strategy to assign a value
     */
    eventProvider: outputs.OpenpipelineEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventProvider;
    /**
     * Strategy to assign a value
     */
    eventType: outputs.OpenpipelineEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventType;
    /**
     * Definition of the field extraction
     */
    fieldExtraction?: outputs.OpenpipelineEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorFieldExtraction;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventProvider {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventType {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorFieldExtraction {
    /**
     * Unique fields to include/exclude in the extracted record
     */
    fields?: string[];
    /**
     * Defines how the fields of the source record should be extracted
     */
    semantic: string;
}

export interface OpenpipelineEventsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * List of properties for the extracted davis event
     */
    properties: outputs.OpenpipelineEventsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessorProperty[];
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineEventsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessorProperty {
    /**
     * The key to set on the davis event
     */
    key: string;
    /**
     * The value assigned to the key
     */
    value: string;
}

export interface OpenpipelineEventsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Definition of the field extraction
     */
    fieldExtraction?: outputs.OpenpipelineEventsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessorFieldExtraction;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineEventsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessorFieldExtraction {
    /**
     * Unique fields to include/exclude in the extracted record
     */
    fields?: string[];
    /**
     * Defines how the fields of the source record should be extracted
     */
    semantic: string;
}

export interface OpenpipelineEventsPipelinesPipelineMetricExtraction {
    /**
     * Data extraction processor to use
     */
    processors?: outputs.OpenpipelineEventsPipelinesPipelineMetricExtractionProcessor[];
}

export interface OpenpipelineEventsPipelinesPipelineMetricExtractionProcessor {
    /**
     * Processor to write the occurrences as a metric
     */
    counterMetricExtractionProcessor?: outputs.OpenpipelineEventsPipelinesPipelineMetricExtractionProcessorCounterMetricExtractionProcessor;
    /**
     * Processor to write the occurrences as a metric
     */
    samplingAwareCounterMetricExtractionProcessor?: outputs.OpenpipelineEventsPipelinesPipelineMetricExtractionProcessorSamplingAwareCounterMetricExtractionProcessor;
    /**
     * Processor to extract a value from a field as a metric.
     */
    samplingAwareValueMetricExtractionProcessor?: outputs.OpenpipelineEventsPipelinesPipelineMetricExtractionProcessorSamplingAwareValueMetricExtractionProcessor;
    /**
     * Processor to extract a value from a field as a metric
     */
    valueMetricExtractionProcessor?: outputs.OpenpipelineEventsPipelinesPipelineMetricExtractionProcessorValueMetricExtractionProcessor;
}

export interface OpenpipelineEventsPipelinesPipelineMetricExtractionProcessorCounterMetricExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of dimensions to add to the metric
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineEventsPipelinesPipelineMetricExtractionProcessorSamplingAwareCounterMetricExtractionProcessor {
    /**
     * Indicates whether aggregation is considered for metric extraction
     */
    aggregation?: string;
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of unique dimensions to add to the metric.
     * Dimensions are represented in the format '({dimensionName}=)?{sourceField}'.
     * '{dimensionName}' is optional if {sourceField} represents a valid metric dimension name.
     * '{sourceField}' has to represent a valid DQL field accessor and it can access a nested field (for example, 'field[field2][0]')
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Indicates whether sampling is considered for metric extraction. Possible values: 'DISABLED', 'ENABLED'
     */
    sampling?: string;
}

export interface OpenpipelineEventsPipelinesPipelineMetricExtractionProcessorSamplingAwareValueMetricExtractionProcessor {
    /**
     * Indicates whether aggregation is considered for metric extraction. Possible values: 'DISABLED', 'ENABLED'
     */
    aggregation?: string;
    /**
     * The default value to use if the given field value could not be extracted. String value must be a number
     */
    defaultValue?: string;
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of unique dimensions to add to the metric.
     * Dimensions are represented in the format '({dimensionName}=)?{sourceField}'.
     * '{dimensionName}' is optional if {sourceField} represents a valid metric dimension name.
     * '{sourceField}' has to represent a valid DQL field accessor and it can access a nested field (for example, 'field[field2][0]')
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * The field from which to extract the value for the metric, or 'null' for a duration measurement
     */
    field?: string;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Indicates whether the metric value should be the specified field or duration. Possible values: 'DURATION', 'FIELD'
     */
    measurement: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Indicates whether sampling is considered for metric extraction. Possible values: 'DISABLED', 'ENABLED'
     */
    sampling?: string;
}

export interface OpenpipelineEventsPipelinesPipelineMetricExtractionProcessorValueMetricExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of dimensions to add to the metric
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * The field to extract the value for the metric
     */
    field: string;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineEventsPipelinesPipelineProcessing {
    /**
     * Groups all processors applicable for the ProcessingStage.
     * Applicable processors are DqlProcessor, FieldsAddProcessor, FieldsRemoveProcessor, FieldsRenameProcessor, TechnologyProcessor and DropProcessor.
     */
    processors?: outputs.OpenpipelineEventsPipelinesPipelineProcessingProcessor[];
}

export interface OpenpipelineEventsPipelinesPipelineProcessingProcessor {
    /**
     * Processor to apply a DQL script
     */
    dqlProcessor?: outputs.OpenpipelineEventsPipelinesPipelineProcessingProcessorDqlProcessor;
    /**
     * Processor to drop the record either during the processing stage or at the endpoint
     */
    dropProcessor?: outputs.OpenpipelineEventsPipelinesPipelineProcessingProcessorDropProcessor;
    /**
     * Processor to add fields
     */
    fieldsAddProcessor?: outputs.OpenpipelineEventsPipelinesPipelineProcessingProcessorFieldsAddProcessor;
    /**
     * Processor to remove fields
     */
    fieldsRemoveProcessor?: outputs.OpenpipelineEventsPipelinesPipelineProcessingProcessorFieldsRemoveProcessor;
    /**
     * Processor to rename fields
     */
    fieldsRenameProcessor?: outputs.OpenpipelineEventsPipelinesPipelineProcessingProcessorFieldsRenameProcessor;
    /**
     * Processor to apply a technology processors
     */
    technologyProcessor?: outputs.OpenpipelineEventsPipelinesPipelineProcessingProcessorTechnologyProcessor;
}

export interface OpenpipelineEventsPipelinesPipelineProcessingProcessorDqlProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * The DQL script to apply on the record
     */
    dqlScript: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineEventsPipelinesPipelineProcessingProcessorDropProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineEventsPipelinesPipelineProcessingProcessorFieldsAddProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: outputs.OpenpipelineEventsPipelinesPipelineProcessingProcessorFieldsAddProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineEventsPipelinesPipelineProcessingProcessorFieldsAddProcessorField {
    /**
     * Name of the field
     */
    name: string;
    /**
     * Value to assign to the field
     */
    value: string;
}

export interface OpenpipelineEventsPipelinesPipelineProcessingProcessorFieldsRemoveProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: string[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineEventsPipelinesPipelineProcessingProcessorFieldsRenameProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to rename on the record
     */
    fields: outputs.OpenpipelineEventsPipelinesPipelineProcessingProcessorFieldsRenameProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineEventsPipelinesPipelineProcessingProcessorFieldsRenameProcessorField {
    /**
     * The field to rename
     */
    fromName: string;
    /**
     * The new field name
     */
    toName: string;
}

export interface OpenpipelineEventsPipelinesPipelineProcessingProcessorTechnologyProcessor {
    /**
     * Optional customer-defined matching condition, that is used in place of the main technology matcher.
     */
    customMatcher?: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * The reference identifier to a specific technology. This technology is applied on the record.
     */
    technologyId: string;
}

export interface OpenpipelineEventsPipelinesPipelineProductAllocation {
    /**
     * Product allocation processor to use
     */
    processors?: outputs.OpenpipelineEventsPipelinesPipelineProductAllocationProcessor[];
}

export interface OpenpipelineEventsPipelinesPipelineProductAllocationProcessor {
    /**
     * Processor to write the occurrences as a product allocation
     */
    productAllocationProcessor?: outputs.OpenpipelineEventsPipelinesPipelineProductAllocationProcessorProductAllocationProcessor;
}

export interface OpenpipelineEventsPipelinesPipelineProductAllocationProcessorProductAllocationProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Strategy to assign a value
     */
    value: outputs.OpenpipelineEventsPipelinesPipelineProductAllocationProcessorProductAllocationProcessorValue;
}

export interface OpenpipelineEventsPipelinesPipelineProductAllocationProcessorProductAllocationProcessorValue {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineEventsPipelinesPipelineSecurityContext {
    /**
     * Groups all processors applicable for the SecurityContextStage.
     * Applicable processor is SecurityContextProcessor.
     */
    processors?: outputs.OpenpipelineEventsPipelinesPipelineSecurityContextProcessor[];
}

export interface OpenpipelineEventsPipelinesPipelineSecurityContextProcessor {
    /**
     * Processor to set the security context field
     */
    securityContextProcessor?: outputs.OpenpipelineEventsPipelinesPipelineSecurityContextProcessorSecurityContextProcessor;
}

export interface OpenpipelineEventsPipelinesPipelineSecurityContextProcessorSecurityContextProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Strategy to assign a value
     */
    value: outputs.OpenpipelineEventsPipelinesPipelineSecurityContextProcessorSecurityContextProcessorValue;
}

export interface OpenpipelineEventsPipelinesPipelineSecurityContextProcessorSecurityContextProcessorValue {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineEventsPipelinesPipelineStorage {
    /**
     * Default bucket assigned to records which do not match any other storage processor
     */
    catchAllBucketName?: string;
    /**
     * Groups all processors applicable for the StorageStage.
     * Applicable processors are BucketAssignmentProcessor and NoStorageProcessor.
     */
    processors?: outputs.OpenpipelineEventsPipelinesPipelineStorageProcessor[];
}

export interface OpenpipelineEventsPipelinesPipelineStorageProcessor {
    /**
     * Processor to assign a bucket
     */
    bucketAssignmentProcessor?: outputs.OpenpipelineEventsPipelinesPipelineStorageProcessorBucketAssignmentProcessor;
    /**
     * Processor to skip storage assignment
     */
    noStorageProcessor?: outputs.OpenpipelineEventsPipelinesPipelineStorageProcessorNoStorageProcessor;
}

export interface OpenpipelineEventsPipelinesPipelineStorageProcessorBucketAssignmentProcessor {
    /**
     * Bucket that is assigned when the record is matched
     */
    bucketName: string;
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineEventsPipelinesPipelineStorageProcessorNoStorageProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineEventsRouting {
    /**
     * Dynamic routing entry
     */
    entries?: outputs.OpenpipelineEventsRoutingEntry[];
}

export interface OpenpipelineEventsRoutingEntry {
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Unique note describing the dynamic route
     */
    note: string;
    /**
     * Identifier of the pipeline the record is routed into
     */
    pipelineId: string;
}

export interface OpenpipelineLogsEndpoints {
    /**
     * Definition of a single ingest source
     */
    endpoints?: outputs.OpenpipelineLogsEndpointsEndpoint[];
}

export interface OpenpipelineLogsEndpointsEndpoint {
    /**
     * The default bucket assigned to records for the ingest source
     */
    defaultBucket?: string;
    /**
     * Display name of the ingest source
     */
    displayName: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * The pre-processing done in the ingest source
     */
    processors?: outputs.OpenpipelineLogsEndpointsEndpointProcessors;
    /**
     * Routing strategy, either dynamic or static
     */
    routing: outputs.OpenpipelineLogsEndpointsEndpointRouting;
    /**
     * The segment of the ingest source, which is applied to the base path. Must be unique within a configuration."
     */
    segment: string;
}

export interface OpenpipelineLogsEndpointsEndpointProcessors {
    /**
     * Groups all processors applicable for processing in the EndpointDefinition.
     * Applicable processors are DqlProcessor, FieldsAddProcessor, FieldsRemoveProcessor, FieldsRenameProcessor and DropProcessor.
     */
    processors?: outputs.OpenpipelineLogsEndpointsEndpointProcessorsProcessor[];
}

export interface OpenpipelineLogsEndpointsEndpointProcessorsProcessor {
    /**
     * Processor to apply a DQL script
     */
    dqlProcessor?: outputs.OpenpipelineLogsEndpointsEndpointProcessorsProcessorDqlProcessor;
    /**
     * Processor to drop the record either during the processing stage or at the endpoint
     */
    dropProcessor?: outputs.OpenpipelineLogsEndpointsEndpointProcessorsProcessorDropProcessor;
    /**
     * Processor to add fields
     */
    fieldsAddProcessor?: outputs.OpenpipelineLogsEndpointsEndpointProcessorsProcessorFieldsAddProcessor;
    /**
     * Processor to remove fields
     */
    fieldsRemoveProcessor?: outputs.OpenpipelineLogsEndpointsEndpointProcessorsProcessorFieldsRemoveProcessor;
    /**
     * Processor to rename fields
     */
    fieldsRenameProcessor?: outputs.OpenpipelineLogsEndpointsEndpointProcessorsProcessorFieldsRenameProcessor;
    /**
     * Processor to apply a technology processors.
     */
    technologyProcessor?: outputs.OpenpipelineLogsEndpointsEndpointProcessorsProcessorTechnologyProcessor;
}

export interface OpenpipelineLogsEndpointsEndpointProcessorsProcessorDqlProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * The DQL script to apply on the record
     */
    dqlScript: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineLogsEndpointsEndpointProcessorsProcessorDropProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineLogsEndpointsEndpointProcessorsProcessorFieldsAddProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: outputs.OpenpipelineLogsEndpointsEndpointProcessorsProcessorFieldsAddProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineLogsEndpointsEndpointProcessorsProcessorFieldsAddProcessorField {
    /**
     * Name of the field
     */
    name: string;
    /**
     * Value to assign to the field
     */
    value: string;
}

export interface OpenpipelineLogsEndpointsEndpointProcessorsProcessorFieldsRemoveProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: string[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineLogsEndpointsEndpointProcessorsProcessorFieldsRenameProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to rename on the record
     */
    fields: outputs.OpenpipelineLogsEndpointsEndpointProcessorsProcessorFieldsRenameProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineLogsEndpointsEndpointProcessorsProcessorFieldsRenameProcessorField {
    /**
     * The field to rename
     */
    fromName: string;
    /**
     * The new field name
     */
    toName: string;
}

export interface OpenpipelineLogsEndpointsEndpointProcessorsProcessorTechnologyProcessor {
    /**
     * Optional customer-defined matching condition, that is used in place of the main technology matcher.
     */
    customMatcher?: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * The reference identifier to a specific technology. This technology is applied on the record.
     */
    technologyId: string;
}

export interface OpenpipelineLogsEndpointsEndpointRouting {
    /**
     * Pipeline ID of the static routing
     */
    pipelineId?: string;
    /**
     * Type of routing, static or dynamic
     */
    type: string;
}

export interface OpenpipelineLogsPipelines {
    /**
     * Definition of a single pipeline
     */
    pipelines?: outputs.OpenpipelineLogsPipelinesPipeline[];
}

export interface OpenpipelineLogsPipelinesPipeline {
    /**
     * Cost Allocation stage configuration of the pipeline
     */
    costAllocation?: outputs.OpenpipelineLogsPipelinesPipelineCostAllocation;
    /**
     * Data extraction stage configuration of the pipeline
     */
    dataExtraction?: outputs.OpenpipelineLogsPipelinesPipelineDataExtraction;
    /**
     * Display name of the pipeline
     */
    displayName: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the pipeline
     */
    id: string;
    /**
     * Metric extraction stage configuration of the pipeline
     */
    metricExtraction?: outputs.OpenpipelineLogsPipelinesPipelineMetricExtraction;
    /**
     * Processing stage configuration of the pipeline
     */
    processing?: outputs.OpenpipelineLogsPipelinesPipelineProcessing;
    /**
     * Product Allocation stage configuration of the pipeline
     */
    productAllocation?: outputs.OpenpipelineLogsPipelinesPipelineProductAllocation;
    /**
     * Security context stage configuration of the pipeline
     */
    securityContext?: outputs.OpenpipelineLogsPipelinesPipelineSecurityContext;
    /**
     * Data extraction stage configuration of the pipeline
     */
    storage?: outputs.OpenpipelineLogsPipelinesPipelineStorage;
}

export interface OpenpipelineLogsPipelinesPipelineCostAllocation {
    /**
     * Cost allocation processor to use
     */
    processors?: outputs.OpenpipelineLogsPipelinesPipelineCostAllocationProcessor[];
}

export interface OpenpipelineLogsPipelinesPipelineCostAllocationProcessor {
    /**
     * Processor to write the occurrences as a cost allocation
     */
    costAllocationProcessor?: outputs.OpenpipelineLogsPipelinesPipelineCostAllocationProcessorCostAllocationProcessor;
}

export interface OpenpipelineLogsPipelinesPipelineCostAllocationProcessorCostAllocationProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Strategy to assign a value
     */
    value: outputs.OpenpipelineLogsPipelinesPipelineCostAllocationProcessorCostAllocationProcessorValue;
}

export interface OpenpipelineLogsPipelinesPipelineCostAllocationProcessorCostAllocationProcessorValue {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineLogsPipelinesPipelineDataExtraction {
    /**
     * Groups all processors applicable for the DataExtractionStage.
     * Applicable processors are DavisEventExtractionProcessor and BizeventExtractionProcessor.
     */
    processors?: outputs.OpenpipelineLogsPipelinesPipelineDataExtractionProcessor[];
}

export interface OpenpipelineLogsPipelinesPipelineDataExtractionProcessor {
    /**
     * Processor to extract a Azure log.
     */
    azureLogForwardingProcessor?: outputs.OpenpipelineLogsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessor;
    /**
     * Processor to extract a bizevent.
     * Fields event.type and event.provider can only be assigned to a constant or field value.
     * A multi-value constant is not supported for those fields.
     */
    bizeventExtractionProcessor?: outputs.OpenpipelineLogsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessor;
    /**
     * Processor to apply a DQL script
     */
    davisEventExtractionProcessor?: outputs.OpenpipelineLogsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessor;
    /**
     * Processor to extract a security event.
     */
    securityEventExtractionProcessor?: outputs.OpenpipelineLogsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessor;
}

export interface OpenpipelineLogsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Definition of the field extraction
     */
    fieldExtraction?: outputs.OpenpipelineLogsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessorFieldExtraction;
    forwarderConfigId: string;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineLogsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessorFieldExtraction {
    /**
     * Unique fields to include/exclude in the extracted record
     */
    fields?: string[];
    /**
     * Defines how the fields of the source record should be extracted
     */
    semantic: string;
}

export interface OpenpipelineLogsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Strategy to assign a value
     */
    eventProvider: outputs.OpenpipelineLogsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventProvider;
    /**
     * Strategy to assign a value
     */
    eventType: outputs.OpenpipelineLogsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventType;
    /**
     * Definition of the field extraction
     */
    fieldExtraction?: outputs.OpenpipelineLogsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorFieldExtraction;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineLogsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventProvider {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineLogsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventType {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineLogsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorFieldExtraction {
    /**
     * Unique fields to include/exclude in the extracted record
     */
    fields?: string[];
    /**
     * Defines how the fields of the source record should be extracted
     */
    semantic: string;
}

export interface OpenpipelineLogsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * List of properties for the extracted davis event
     */
    properties: outputs.OpenpipelineLogsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessorProperty[];
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineLogsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessorProperty {
    /**
     * The key to set on the davis event
     */
    key: string;
    /**
     * The value assigned to the key
     */
    value: string;
}

export interface OpenpipelineLogsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Definition of the field extraction
     */
    fieldExtraction?: outputs.OpenpipelineLogsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessorFieldExtraction;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineLogsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessorFieldExtraction {
    /**
     * Unique fields to include/exclude in the extracted record
     */
    fields?: string[];
    /**
     * Defines how the fields of the source record should be extracted
     */
    semantic: string;
}

export interface OpenpipelineLogsPipelinesPipelineMetricExtraction {
    /**
     * Data extraction processor to use
     */
    processors?: outputs.OpenpipelineLogsPipelinesPipelineMetricExtractionProcessor[];
}

export interface OpenpipelineLogsPipelinesPipelineMetricExtractionProcessor {
    /**
     * Processor to write the occurrences as a metric
     */
    counterMetricExtractionProcessor?: outputs.OpenpipelineLogsPipelinesPipelineMetricExtractionProcessorCounterMetricExtractionProcessor;
    /**
     * Processor to write the occurrences as a metric
     */
    samplingAwareCounterMetricExtractionProcessor?: outputs.OpenpipelineLogsPipelinesPipelineMetricExtractionProcessorSamplingAwareCounterMetricExtractionProcessor;
    /**
     * Processor to extract a value from a field as a metric.
     */
    samplingAwareValueMetricExtractionProcessor?: outputs.OpenpipelineLogsPipelinesPipelineMetricExtractionProcessorSamplingAwareValueMetricExtractionProcessor;
    /**
     * Processor to extract a value from a field as a metric
     */
    valueMetricExtractionProcessor?: outputs.OpenpipelineLogsPipelinesPipelineMetricExtractionProcessorValueMetricExtractionProcessor;
}

export interface OpenpipelineLogsPipelinesPipelineMetricExtractionProcessorCounterMetricExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of dimensions to add to the metric
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineLogsPipelinesPipelineMetricExtractionProcessorSamplingAwareCounterMetricExtractionProcessor {
    /**
     * Indicates whether aggregation is considered for metric extraction
     */
    aggregation?: string;
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of unique dimensions to add to the metric.
     * Dimensions are represented in the format '({dimensionName}=)?{sourceField}'.
     * '{dimensionName}' is optional if {sourceField} represents a valid metric dimension name.
     * '{sourceField}' has to represent a valid DQL field accessor and it can access a nested field (for example, 'field[field2][0]')
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Indicates whether sampling is considered for metric extraction. Possible values: 'DISABLED', 'ENABLED'
     */
    sampling?: string;
}

export interface OpenpipelineLogsPipelinesPipelineMetricExtractionProcessorSamplingAwareValueMetricExtractionProcessor {
    /**
     * Indicates whether aggregation is considered for metric extraction. Possible values: 'DISABLED', 'ENABLED'
     */
    aggregation?: string;
    /**
     * The default value to use if the given field value could not be extracted. String value must be a number
     */
    defaultValue?: string;
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of unique dimensions to add to the metric.
     * Dimensions are represented in the format '({dimensionName}=)?{sourceField}'.
     * '{dimensionName}' is optional if {sourceField} represents a valid metric dimension name.
     * '{sourceField}' has to represent a valid DQL field accessor and it can access a nested field (for example, 'field[field2][0]')
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * The field from which to extract the value for the metric, or 'null' for a duration measurement
     */
    field?: string;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Indicates whether the metric value should be the specified field or duration. Possible values: 'DURATION', 'FIELD'
     */
    measurement: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Indicates whether sampling is considered for metric extraction. Possible values: 'DISABLED', 'ENABLED'
     */
    sampling?: string;
}

export interface OpenpipelineLogsPipelinesPipelineMetricExtractionProcessorValueMetricExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of dimensions to add to the metric
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * The field to extract the value for the metric
     */
    field: string;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineLogsPipelinesPipelineProcessing {
    /**
     * Groups all processors applicable for the ProcessingStage.
     * Applicable processors are DqlProcessor, FieldsAddProcessor, FieldsRemoveProcessor, FieldsRenameProcessor, TechnologyProcessor and DropProcessor.
     */
    processors?: outputs.OpenpipelineLogsPipelinesPipelineProcessingProcessor[];
}

export interface OpenpipelineLogsPipelinesPipelineProcessingProcessor {
    /**
     * Processor to apply a DQL script
     */
    dqlProcessor?: outputs.OpenpipelineLogsPipelinesPipelineProcessingProcessorDqlProcessor;
    /**
     * Processor to drop the record either during the processing stage or at the endpoint
     */
    dropProcessor?: outputs.OpenpipelineLogsPipelinesPipelineProcessingProcessorDropProcessor;
    /**
     * Processor to add fields
     */
    fieldsAddProcessor?: outputs.OpenpipelineLogsPipelinesPipelineProcessingProcessorFieldsAddProcessor;
    /**
     * Processor to remove fields
     */
    fieldsRemoveProcessor?: outputs.OpenpipelineLogsPipelinesPipelineProcessingProcessorFieldsRemoveProcessor;
    /**
     * Processor to rename fields
     */
    fieldsRenameProcessor?: outputs.OpenpipelineLogsPipelinesPipelineProcessingProcessorFieldsRenameProcessor;
    /**
     * Processor to apply a technology processors
     */
    technologyProcessor?: outputs.OpenpipelineLogsPipelinesPipelineProcessingProcessorTechnologyProcessor;
}

export interface OpenpipelineLogsPipelinesPipelineProcessingProcessorDqlProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * The DQL script to apply on the record
     */
    dqlScript: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineLogsPipelinesPipelineProcessingProcessorDropProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineLogsPipelinesPipelineProcessingProcessorFieldsAddProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: outputs.OpenpipelineLogsPipelinesPipelineProcessingProcessorFieldsAddProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineLogsPipelinesPipelineProcessingProcessorFieldsAddProcessorField {
    /**
     * Name of the field
     */
    name: string;
    /**
     * Value to assign to the field
     */
    value: string;
}

export interface OpenpipelineLogsPipelinesPipelineProcessingProcessorFieldsRemoveProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: string[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineLogsPipelinesPipelineProcessingProcessorFieldsRenameProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to rename on the record
     */
    fields: outputs.OpenpipelineLogsPipelinesPipelineProcessingProcessorFieldsRenameProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineLogsPipelinesPipelineProcessingProcessorFieldsRenameProcessorField {
    /**
     * The field to rename
     */
    fromName: string;
    /**
     * The new field name
     */
    toName: string;
}

export interface OpenpipelineLogsPipelinesPipelineProcessingProcessorTechnologyProcessor {
    /**
     * Optional customer-defined matching condition, that is used in place of the main technology matcher.
     */
    customMatcher?: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * The reference identifier to a specific technology. This technology is applied on the record.
     */
    technologyId: string;
}

export interface OpenpipelineLogsPipelinesPipelineProductAllocation {
    /**
     * Product allocation processor to use
     */
    processors?: outputs.OpenpipelineLogsPipelinesPipelineProductAllocationProcessor[];
}

export interface OpenpipelineLogsPipelinesPipelineProductAllocationProcessor {
    /**
     * Processor to write the occurrences as a product allocation
     */
    productAllocationProcessor?: outputs.OpenpipelineLogsPipelinesPipelineProductAllocationProcessorProductAllocationProcessor;
}

export interface OpenpipelineLogsPipelinesPipelineProductAllocationProcessorProductAllocationProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Strategy to assign a value
     */
    value: outputs.OpenpipelineLogsPipelinesPipelineProductAllocationProcessorProductAllocationProcessorValue;
}

export interface OpenpipelineLogsPipelinesPipelineProductAllocationProcessorProductAllocationProcessorValue {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineLogsPipelinesPipelineSecurityContext {
    /**
     * Groups all processors applicable for the SecurityContextStage.
     * Applicable processor is SecurityContextProcessor.
     */
    processors?: outputs.OpenpipelineLogsPipelinesPipelineSecurityContextProcessor[];
}

export interface OpenpipelineLogsPipelinesPipelineSecurityContextProcessor {
    /**
     * Processor to set the security context field
     */
    securityContextProcessor?: outputs.OpenpipelineLogsPipelinesPipelineSecurityContextProcessorSecurityContextProcessor;
}

export interface OpenpipelineLogsPipelinesPipelineSecurityContextProcessorSecurityContextProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Strategy to assign a value
     */
    value: outputs.OpenpipelineLogsPipelinesPipelineSecurityContextProcessorSecurityContextProcessorValue;
}

export interface OpenpipelineLogsPipelinesPipelineSecurityContextProcessorSecurityContextProcessorValue {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineLogsPipelinesPipelineStorage {
    /**
     * Default bucket assigned to records which do not match any other storage processor
     */
    catchAllBucketName?: string;
    /**
     * Groups all processors applicable for the StorageStage.
     * Applicable processors are BucketAssignmentProcessor and NoStorageProcessor.
     */
    processors?: outputs.OpenpipelineLogsPipelinesPipelineStorageProcessor[];
}

export interface OpenpipelineLogsPipelinesPipelineStorageProcessor {
    /**
     * Processor to assign a bucket
     */
    bucketAssignmentProcessor?: outputs.OpenpipelineLogsPipelinesPipelineStorageProcessorBucketAssignmentProcessor;
    /**
     * Processor to skip storage assignment
     */
    noStorageProcessor?: outputs.OpenpipelineLogsPipelinesPipelineStorageProcessorNoStorageProcessor;
}

export interface OpenpipelineLogsPipelinesPipelineStorageProcessorBucketAssignmentProcessor {
    /**
     * Bucket that is assigned when the record is matched
     */
    bucketName: string;
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineLogsPipelinesPipelineStorageProcessorNoStorageProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineLogsRouting {
    /**
     * Dynamic routing entry
     */
    entries?: outputs.OpenpipelineLogsRoutingEntry[];
}

export interface OpenpipelineLogsRoutingEntry {
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Unique note describing the dynamic route
     */
    note: string;
    /**
     * Identifier of the pipeline the record is routed into
     */
    pipelineId: string;
}

export interface OpenpipelineMetricsEndpoints {
    /**
     * Definition of a single ingest source
     */
    endpoints?: outputs.OpenpipelineMetricsEndpointsEndpoint[];
}

export interface OpenpipelineMetricsEndpointsEndpoint {
    /**
     * The default bucket assigned to records for the ingest source
     */
    defaultBucket?: string;
    /**
     * Display name of the ingest source
     */
    displayName: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * The pre-processing done in the ingest source
     */
    processors?: outputs.OpenpipelineMetricsEndpointsEndpointProcessors;
    /**
     * Routing strategy, either dynamic or static
     */
    routing: outputs.OpenpipelineMetricsEndpointsEndpointRouting;
    /**
     * The segment of the ingest source, which is applied to the base path. Must be unique within a configuration."
     */
    segment: string;
}

export interface OpenpipelineMetricsEndpointsEndpointProcessors {
    /**
     * Groups all processors applicable for processing in the EndpointDefinition.
     * Applicable processors are DqlProcessor, FieldsAddProcessor, FieldsRemoveProcessor, FieldsRenameProcessor and DropProcessor.
     */
    processors?: outputs.OpenpipelineMetricsEndpointsEndpointProcessorsProcessor[];
}

export interface OpenpipelineMetricsEndpointsEndpointProcessorsProcessor {
    /**
     * Processor to apply a DQL script
     */
    dqlProcessor?: outputs.OpenpipelineMetricsEndpointsEndpointProcessorsProcessorDqlProcessor;
    /**
     * Processor to drop the record either during the processing stage or at the endpoint
     */
    dropProcessor?: outputs.OpenpipelineMetricsEndpointsEndpointProcessorsProcessorDropProcessor;
    /**
     * Processor to add fields
     */
    fieldsAddProcessor?: outputs.OpenpipelineMetricsEndpointsEndpointProcessorsProcessorFieldsAddProcessor;
    /**
     * Processor to remove fields
     */
    fieldsRemoveProcessor?: outputs.OpenpipelineMetricsEndpointsEndpointProcessorsProcessorFieldsRemoveProcessor;
    /**
     * Processor to rename fields
     */
    fieldsRenameProcessor?: outputs.OpenpipelineMetricsEndpointsEndpointProcessorsProcessorFieldsRenameProcessor;
    /**
     * Processor to apply a technology processors.
     */
    technologyProcessor?: outputs.OpenpipelineMetricsEndpointsEndpointProcessorsProcessorTechnologyProcessor;
}

export interface OpenpipelineMetricsEndpointsEndpointProcessorsProcessorDqlProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * The DQL script to apply on the record
     */
    dqlScript: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineMetricsEndpointsEndpointProcessorsProcessorDropProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineMetricsEndpointsEndpointProcessorsProcessorFieldsAddProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: outputs.OpenpipelineMetricsEndpointsEndpointProcessorsProcessorFieldsAddProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineMetricsEndpointsEndpointProcessorsProcessorFieldsAddProcessorField {
    /**
     * Name of the field
     */
    name: string;
    /**
     * Value to assign to the field
     */
    value: string;
}

export interface OpenpipelineMetricsEndpointsEndpointProcessorsProcessorFieldsRemoveProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: string[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineMetricsEndpointsEndpointProcessorsProcessorFieldsRenameProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to rename on the record
     */
    fields: outputs.OpenpipelineMetricsEndpointsEndpointProcessorsProcessorFieldsRenameProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineMetricsEndpointsEndpointProcessorsProcessorFieldsRenameProcessorField {
    /**
     * The field to rename
     */
    fromName: string;
    /**
     * The new field name
     */
    toName: string;
}

export interface OpenpipelineMetricsEndpointsEndpointProcessorsProcessorTechnologyProcessor {
    /**
     * Optional customer-defined matching condition, that is used in place of the main technology matcher.
     */
    customMatcher?: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * The reference identifier to a specific technology. This technology is applied on the record.
     */
    technologyId: string;
}

export interface OpenpipelineMetricsEndpointsEndpointRouting {
    /**
     * Pipeline ID of the static routing
     */
    pipelineId?: string;
    /**
     * Type of routing, static or dynamic
     */
    type: string;
}

export interface OpenpipelineMetricsPipelines {
    /**
     * Definition of a single pipeline
     */
    pipelines?: outputs.OpenpipelineMetricsPipelinesPipeline[];
}

export interface OpenpipelineMetricsPipelinesPipeline {
    /**
     * Cost Allocation stage configuration of the pipeline
     */
    costAllocation?: outputs.OpenpipelineMetricsPipelinesPipelineCostAllocation;
    /**
     * Data extraction stage configuration of the pipeline
     */
    dataExtraction?: outputs.OpenpipelineMetricsPipelinesPipelineDataExtraction;
    /**
     * Display name of the pipeline
     */
    displayName: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the pipeline
     */
    id: string;
    /**
     * Metric extraction stage configuration of the pipeline
     */
    metricExtraction?: outputs.OpenpipelineMetricsPipelinesPipelineMetricExtraction;
    /**
     * Processing stage configuration of the pipeline
     */
    processing?: outputs.OpenpipelineMetricsPipelinesPipelineProcessing;
    /**
     * Product Allocation stage configuration of the pipeline
     */
    productAllocation?: outputs.OpenpipelineMetricsPipelinesPipelineProductAllocation;
    /**
     * Security context stage configuration of the pipeline
     */
    securityContext?: outputs.OpenpipelineMetricsPipelinesPipelineSecurityContext;
    /**
     * Data extraction stage configuration of the pipeline
     */
    storage?: outputs.OpenpipelineMetricsPipelinesPipelineStorage;
}

export interface OpenpipelineMetricsPipelinesPipelineCostAllocation {
    /**
     * Cost allocation processor to use
     */
    processors?: outputs.OpenpipelineMetricsPipelinesPipelineCostAllocationProcessor[];
}

export interface OpenpipelineMetricsPipelinesPipelineCostAllocationProcessor {
    /**
     * Processor to write the occurrences as a cost allocation
     */
    costAllocationProcessor?: outputs.OpenpipelineMetricsPipelinesPipelineCostAllocationProcessorCostAllocationProcessor;
}

export interface OpenpipelineMetricsPipelinesPipelineCostAllocationProcessorCostAllocationProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Strategy to assign a value
     */
    value: outputs.OpenpipelineMetricsPipelinesPipelineCostAllocationProcessorCostAllocationProcessorValue;
}

export interface OpenpipelineMetricsPipelinesPipelineCostAllocationProcessorCostAllocationProcessorValue {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineMetricsPipelinesPipelineDataExtraction {
    /**
     * Groups all processors applicable for the DataExtractionStage.
     * Applicable processors are DavisEventExtractionProcessor and BizeventExtractionProcessor.
     */
    processors?: outputs.OpenpipelineMetricsPipelinesPipelineDataExtractionProcessor[];
}

export interface OpenpipelineMetricsPipelinesPipelineDataExtractionProcessor {
    /**
     * Processor to extract a Azure log.
     */
    azureLogForwardingProcessor?: outputs.OpenpipelineMetricsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessor;
    /**
     * Processor to extract a bizevent.
     * Fields event.type and event.provider can only be assigned to a constant or field value.
     * A multi-value constant is not supported for those fields.
     */
    bizeventExtractionProcessor?: outputs.OpenpipelineMetricsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessor;
    /**
     * Processor to apply a DQL script
     */
    davisEventExtractionProcessor?: outputs.OpenpipelineMetricsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessor;
    /**
     * Processor to extract a security event.
     */
    securityEventExtractionProcessor?: outputs.OpenpipelineMetricsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessor;
}

export interface OpenpipelineMetricsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Definition of the field extraction
     */
    fieldExtraction?: outputs.OpenpipelineMetricsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessorFieldExtraction;
    forwarderConfigId: string;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineMetricsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessorFieldExtraction {
    /**
     * Unique fields to include/exclude in the extracted record
     */
    fields?: string[];
    /**
     * Defines how the fields of the source record should be extracted
     */
    semantic: string;
}

export interface OpenpipelineMetricsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Strategy to assign a value
     */
    eventProvider: outputs.OpenpipelineMetricsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventProvider;
    /**
     * Strategy to assign a value
     */
    eventType: outputs.OpenpipelineMetricsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventType;
    /**
     * Definition of the field extraction
     */
    fieldExtraction?: outputs.OpenpipelineMetricsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorFieldExtraction;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineMetricsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventProvider {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineMetricsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventType {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineMetricsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorFieldExtraction {
    /**
     * Unique fields to include/exclude in the extracted record
     */
    fields?: string[];
    /**
     * Defines how the fields of the source record should be extracted
     */
    semantic: string;
}

export interface OpenpipelineMetricsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * List of properties for the extracted davis event
     */
    properties: outputs.OpenpipelineMetricsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessorProperty[];
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineMetricsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessorProperty {
    /**
     * The key to set on the davis event
     */
    key: string;
    /**
     * The value assigned to the key
     */
    value: string;
}

export interface OpenpipelineMetricsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Definition of the field extraction
     */
    fieldExtraction?: outputs.OpenpipelineMetricsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessorFieldExtraction;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineMetricsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessorFieldExtraction {
    /**
     * Unique fields to include/exclude in the extracted record
     */
    fields?: string[];
    /**
     * Defines how the fields of the source record should be extracted
     */
    semantic: string;
}

export interface OpenpipelineMetricsPipelinesPipelineMetricExtraction {
    /**
     * Data extraction processor to use
     */
    processors?: outputs.OpenpipelineMetricsPipelinesPipelineMetricExtractionProcessor[];
}

export interface OpenpipelineMetricsPipelinesPipelineMetricExtractionProcessor {
    /**
     * Processor to write the occurrences as a metric
     */
    counterMetricExtractionProcessor?: outputs.OpenpipelineMetricsPipelinesPipelineMetricExtractionProcessorCounterMetricExtractionProcessor;
    /**
     * Processor to write the occurrences as a metric
     */
    samplingAwareCounterMetricExtractionProcessor?: outputs.OpenpipelineMetricsPipelinesPipelineMetricExtractionProcessorSamplingAwareCounterMetricExtractionProcessor;
    /**
     * Processor to extract a value from a field as a metric.
     */
    samplingAwareValueMetricExtractionProcessor?: outputs.OpenpipelineMetricsPipelinesPipelineMetricExtractionProcessorSamplingAwareValueMetricExtractionProcessor;
    /**
     * Processor to extract a value from a field as a metric
     */
    valueMetricExtractionProcessor?: outputs.OpenpipelineMetricsPipelinesPipelineMetricExtractionProcessorValueMetricExtractionProcessor;
}

export interface OpenpipelineMetricsPipelinesPipelineMetricExtractionProcessorCounterMetricExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of dimensions to add to the metric
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineMetricsPipelinesPipelineMetricExtractionProcessorSamplingAwareCounterMetricExtractionProcessor {
    /**
     * Indicates whether aggregation is considered for metric extraction
     */
    aggregation?: string;
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of unique dimensions to add to the metric.
     * Dimensions are represented in the format '({dimensionName}=)?{sourceField}'.
     * '{dimensionName}' is optional if {sourceField} represents a valid metric dimension name.
     * '{sourceField}' has to represent a valid DQL field accessor and it can access a nested field (for example, 'field[field2][0]')
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Indicates whether sampling is considered for metric extraction. Possible values: 'DISABLED', 'ENABLED'
     */
    sampling?: string;
}

export interface OpenpipelineMetricsPipelinesPipelineMetricExtractionProcessorSamplingAwareValueMetricExtractionProcessor {
    /**
     * Indicates whether aggregation is considered for metric extraction. Possible values: 'DISABLED', 'ENABLED'
     */
    aggregation?: string;
    /**
     * The default value to use if the given field value could not be extracted. String value must be a number
     */
    defaultValue?: string;
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of unique dimensions to add to the metric.
     * Dimensions are represented in the format '({dimensionName}=)?{sourceField}'.
     * '{dimensionName}' is optional if {sourceField} represents a valid metric dimension name.
     * '{sourceField}' has to represent a valid DQL field accessor and it can access a nested field (for example, 'field[field2][0]')
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * The field from which to extract the value for the metric, or 'null' for a duration measurement
     */
    field?: string;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Indicates whether the metric value should be the specified field or duration. Possible values: 'DURATION', 'FIELD'
     */
    measurement: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Indicates whether sampling is considered for metric extraction. Possible values: 'DISABLED', 'ENABLED'
     */
    sampling?: string;
}

export interface OpenpipelineMetricsPipelinesPipelineMetricExtractionProcessorValueMetricExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of dimensions to add to the metric
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * The field to extract the value for the metric
     */
    field: string;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineMetricsPipelinesPipelineProcessing {
    /**
     * Groups all processors applicable for the ProcessingStage.
     * Applicable processors are DqlProcessor, FieldsAddProcessor, FieldsRemoveProcessor, FieldsRenameProcessor, TechnologyProcessor and DropProcessor.
     */
    processors?: outputs.OpenpipelineMetricsPipelinesPipelineProcessingProcessor[];
}

export interface OpenpipelineMetricsPipelinesPipelineProcessingProcessor {
    /**
     * Processor to apply a DQL script
     */
    dqlProcessor?: outputs.OpenpipelineMetricsPipelinesPipelineProcessingProcessorDqlProcessor;
    /**
     * Processor to drop the record either during the processing stage or at the endpoint
     */
    dropProcessor?: outputs.OpenpipelineMetricsPipelinesPipelineProcessingProcessorDropProcessor;
    /**
     * Processor to add fields
     */
    fieldsAddProcessor?: outputs.OpenpipelineMetricsPipelinesPipelineProcessingProcessorFieldsAddProcessor;
    /**
     * Processor to remove fields
     */
    fieldsRemoveProcessor?: outputs.OpenpipelineMetricsPipelinesPipelineProcessingProcessorFieldsRemoveProcessor;
    /**
     * Processor to rename fields
     */
    fieldsRenameProcessor?: outputs.OpenpipelineMetricsPipelinesPipelineProcessingProcessorFieldsRenameProcessor;
    /**
     * Processor to apply a technology processors
     */
    technologyProcessor?: outputs.OpenpipelineMetricsPipelinesPipelineProcessingProcessorTechnologyProcessor;
}

export interface OpenpipelineMetricsPipelinesPipelineProcessingProcessorDqlProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * The DQL script to apply on the record
     */
    dqlScript: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineMetricsPipelinesPipelineProcessingProcessorDropProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineMetricsPipelinesPipelineProcessingProcessorFieldsAddProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: outputs.OpenpipelineMetricsPipelinesPipelineProcessingProcessorFieldsAddProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineMetricsPipelinesPipelineProcessingProcessorFieldsAddProcessorField {
    /**
     * Name of the field
     */
    name: string;
    /**
     * Value to assign to the field
     */
    value: string;
}

export interface OpenpipelineMetricsPipelinesPipelineProcessingProcessorFieldsRemoveProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: string[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineMetricsPipelinesPipelineProcessingProcessorFieldsRenameProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to rename on the record
     */
    fields: outputs.OpenpipelineMetricsPipelinesPipelineProcessingProcessorFieldsRenameProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineMetricsPipelinesPipelineProcessingProcessorFieldsRenameProcessorField {
    /**
     * The field to rename
     */
    fromName: string;
    /**
     * The new field name
     */
    toName: string;
}

export interface OpenpipelineMetricsPipelinesPipelineProcessingProcessorTechnologyProcessor {
    /**
     * Optional customer-defined matching condition, that is used in place of the main technology matcher.
     */
    customMatcher?: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * The reference identifier to a specific technology. This technology is applied on the record.
     */
    technologyId: string;
}

export interface OpenpipelineMetricsPipelinesPipelineProductAllocation {
    /**
     * Product allocation processor to use
     */
    processors?: outputs.OpenpipelineMetricsPipelinesPipelineProductAllocationProcessor[];
}

export interface OpenpipelineMetricsPipelinesPipelineProductAllocationProcessor {
    /**
     * Processor to write the occurrences as a product allocation
     */
    productAllocationProcessor?: outputs.OpenpipelineMetricsPipelinesPipelineProductAllocationProcessorProductAllocationProcessor;
}

export interface OpenpipelineMetricsPipelinesPipelineProductAllocationProcessorProductAllocationProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Strategy to assign a value
     */
    value: outputs.OpenpipelineMetricsPipelinesPipelineProductAllocationProcessorProductAllocationProcessorValue;
}

export interface OpenpipelineMetricsPipelinesPipelineProductAllocationProcessorProductAllocationProcessorValue {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineMetricsPipelinesPipelineSecurityContext {
    /**
     * Groups all processors applicable for the SecurityContextStage.
     * Applicable processor is SecurityContextProcessor.
     */
    processors?: outputs.OpenpipelineMetricsPipelinesPipelineSecurityContextProcessor[];
}

export interface OpenpipelineMetricsPipelinesPipelineSecurityContextProcessor {
    /**
     * Processor to set the security context field
     */
    securityContextProcessor?: outputs.OpenpipelineMetricsPipelinesPipelineSecurityContextProcessorSecurityContextProcessor;
}

export interface OpenpipelineMetricsPipelinesPipelineSecurityContextProcessorSecurityContextProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Strategy to assign a value
     */
    value: outputs.OpenpipelineMetricsPipelinesPipelineSecurityContextProcessorSecurityContextProcessorValue;
}

export interface OpenpipelineMetricsPipelinesPipelineSecurityContextProcessorSecurityContextProcessorValue {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineMetricsPipelinesPipelineStorage {
    /**
     * Default bucket assigned to records which do not match any other storage processor
     */
    catchAllBucketName?: string;
    /**
     * Groups all processors applicable for the StorageStage.
     * Applicable processors are BucketAssignmentProcessor and NoStorageProcessor.
     */
    processors?: outputs.OpenpipelineMetricsPipelinesPipelineStorageProcessor[];
}

export interface OpenpipelineMetricsPipelinesPipelineStorageProcessor {
    /**
     * Processor to assign a bucket
     */
    bucketAssignmentProcessor?: outputs.OpenpipelineMetricsPipelinesPipelineStorageProcessorBucketAssignmentProcessor;
    /**
     * Processor to skip storage assignment
     */
    noStorageProcessor?: outputs.OpenpipelineMetricsPipelinesPipelineStorageProcessorNoStorageProcessor;
}

export interface OpenpipelineMetricsPipelinesPipelineStorageProcessorBucketAssignmentProcessor {
    /**
     * Bucket that is assigned when the record is matched
     */
    bucketName: string;
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineMetricsPipelinesPipelineStorageProcessorNoStorageProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineMetricsRouting {
    /**
     * Dynamic routing entry
     */
    entries?: outputs.OpenpipelineMetricsRoutingEntry[];
}

export interface OpenpipelineMetricsRoutingEntry {
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Unique note describing the dynamic route
     */
    note: string;
    /**
     * Identifier of the pipeline the record is routed into
     */
    pipelineId: string;
}

export interface OpenpipelineSdlcEventsEndpoints {
    /**
     * Definition of a single ingest source
     */
    endpoints?: outputs.OpenpipelineSdlcEventsEndpointsEndpoint[];
}

export interface OpenpipelineSdlcEventsEndpointsEndpoint {
    /**
     * The default bucket assigned to records for the ingest source
     */
    defaultBucket?: string;
    /**
     * Display name of the ingest source
     */
    displayName: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * The pre-processing done in the ingest source
     */
    processors?: outputs.OpenpipelineSdlcEventsEndpointsEndpointProcessors;
    /**
     * Routing strategy, either dynamic or static
     */
    routing: outputs.OpenpipelineSdlcEventsEndpointsEndpointRouting;
    /**
     * The segment of the ingest source, which is applied to the base path. Must be unique within a configuration."
     */
    segment: string;
}

export interface OpenpipelineSdlcEventsEndpointsEndpointProcessors {
    /**
     * Groups all processors applicable for processing in the EndpointDefinition.
     * Applicable processors are DqlProcessor, FieldsAddProcessor, FieldsRemoveProcessor, FieldsRenameProcessor and DropProcessor.
     */
    processors?: outputs.OpenpipelineSdlcEventsEndpointsEndpointProcessorsProcessor[];
}

export interface OpenpipelineSdlcEventsEndpointsEndpointProcessorsProcessor {
    /**
     * Processor to apply a DQL script
     */
    dqlProcessor?: outputs.OpenpipelineSdlcEventsEndpointsEndpointProcessorsProcessorDqlProcessor;
    /**
     * Processor to drop the record either during the processing stage or at the endpoint
     */
    dropProcessor?: outputs.OpenpipelineSdlcEventsEndpointsEndpointProcessorsProcessorDropProcessor;
    /**
     * Processor to add fields
     */
    fieldsAddProcessor?: outputs.OpenpipelineSdlcEventsEndpointsEndpointProcessorsProcessorFieldsAddProcessor;
    /**
     * Processor to remove fields
     */
    fieldsRemoveProcessor?: outputs.OpenpipelineSdlcEventsEndpointsEndpointProcessorsProcessorFieldsRemoveProcessor;
    /**
     * Processor to rename fields
     */
    fieldsRenameProcessor?: outputs.OpenpipelineSdlcEventsEndpointsEndpointProcessorsProcessorFieldsRenameProcessor;
    /**
     * Processor to apply a technology processors.
     */
    technologyProcessor?: outputs.OpenpipelineSdlcEventsEndpointsEndpointProcessorsProcessorTechnologyProcessor;
}

export interface OpenpipelineSdlcEventsEndpointsEndpointProcessorsProcessorDqlProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * The DQL script to apply on the record
     */
    dqlScript: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSdlcEventsEndpointsEndpointProcessorsProcessorDropProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSdlcEventsEndpointsEndpointProcessorsProcessorFieldsAddProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: outputs.OpenpipelineSdlcEventsEndpointsEndpointProcessorsProcessorFieldsAddProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSdlcEventsEndpointsEndpointProcessorsProcessorFieldsAddProcessorField {
    /**
     * Name of the field
     */
    name: string;
    /**
     * Value to assign to the field
     */
    value: string;
}

export interface OpenpipelineSdlcEventsEndpointsEndpointProcessorsProcessorFieldsRemoveProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: string[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSdlcEventsEndpointsEndpointProcessorsProcessorFieldsRenameProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to rename on the record
     */
    fields: outputs.OpenpipelineSdlcEventsEndpointsEndpointProcessorsProcessorFieldsRenameProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSdlcEventsEndpointsEndpointProcessorsProcessorFieldsRenameProcessorField {
    /**
     * The field to rename
     */
    fromName: string;
    /**
     * The new field name
     */
    toName: string;
}

export interface OpenpipelineSdlcEventsEndpointsEndpointProcessorsProcessorTechnologyProcessor {
    /**
     * Optional customer-defined matching condition, that is used in place of the main technology matcher.
     */
    customMatcher?: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * The reference identifier to a specific technology. This technology is applied on the record.
     */
    technologyId: string;
}

export interface OpenpipelineSdlcEventsEndpointsEndpointRouting {
    /**
     * Pipeline ID of the static routing
     */
    pipelineId?: string;
    /**
     * Type of routing, static or dynamic
     */
    type: string;
}

export interface OpenpipelineSdlcEventsPipelines {
    /**
     * Definition of a single pipeline
     */
    pipelines?: outputs.OpenpipelineSdlcEventsPipelinesPipeline[];
}

export interface OpenpipelineSdlcEventsPipelinesPipeline {
    /**
     * Cost Allocation stage configuration of the pipeline
     */
    costAllocation?: outputs.OpenpipelineSdlcEventsPipelinesPipelineCostAllocation;
    /**
     * Data extraction stage configuration of the pipeline
     */
    dataExtraction?: outputs.OpenpipelineSdlcEventsPipelinesPipelineDataExtraction;
    /**
     * Display name of the pipeline
     */
    displayName: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the pipeline
     */
    id: string;
    /**
     * Metric extraction stage configuration of the pipeline
     */
    metricExtraction?: outputs.OpenpipelineSdlcEventsPipelinesPipelineMetricExtraction;
    /**
     * Processing stage configuration of the pipeline
     */
    processing?: outputs.OpenpipelineSdlcEventsPipelinesPipelineProcessing;
    /**
     * Product Allocation stage configuration of the pipeline
     */
    productAllocation?: outputs.OpenpipelineSdlcEventsPipelinesPipelineProductAllocation;
    /**
     * Security context stage configuration of the pipeline
     */
    securityContext?: outputs.OpenpipelineSdlcEventsPipelinesPipelineSecurityContext;
    /**
     * Data extraction stage configuration of the pipeline
     */
    storage?: outputs.OpenpipelineSdlcEventsPipelinesPipelineStorage;
}

export interface OpenpipelineSdlcEventsPipelinesPipelineCostAllocation {
    /**
     * Cost allocation processor to use
     */
    processors?: outputs.OpenpipelineSdlcEventsPipelinesPipelineCostAllocationProcessor[];
}

export interface OpenpipelineSdlcEventsPipelinesPipelineCostAllocationProcessor {
    /**
     * Processor to write the occurrences as a cost allocation
     */
    costAllocationProcessor?: outputs.OpenpipelineSdlcEventsPipelinesPipelineCostAllocationProcessorCostAllocationProcessor;
}

export interface OpenpipelineSdlcEventsPipelinesPipelineCostAllocationProcessorCostAllocationProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Strategy to assign a value
     */
    value: outputs.OpenpipelineSdlcEventsPipelinesPipelineCostAllocationProcessorCostAllocationProcessorValue;
}

export interface OpenpipelineSdlcEventsPipelinesPipelineCostAllocationProcessorCostAllocationProcessorValue {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineSdlcEventsPipelinesPipelineDataExtraction {
    /**
     * Groups all processors applicable for the DataExtractionStage.
     * Applicable processors are DavisEventExtractionProcessor and BizeventExtractionProcessor.
     */
    processors?: outputs.OpenpipelineSdlcEventsPipelinesPipelineDataExtractionProcessor[];
}

export interface OpenpipelineSdlcEventsPipelinesPipelineDataExtractionProcessor {
    /**
     * Processor to extract a Azure log.
     */
    azureLogForwardingProcessor?: outputs.OpenpipelineSdlcEventsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessor;
    /**
     * Processor to extract a bizevent.
     * Fields event.type and event.provider can only be assigned to a constant or field value.
     * A multi-value constant is not supported for those fields.
     */
    bizeventExtractionProcessor?: outputs.OpenpipelineSdlcEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessor;
    /**
     * Processor to apply a DQL script
     */
    davisEventExtractionProcessor?: outputs.OpenpipelineSdlcEventsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessor;
    /**
     * Processor to extract a security event.
     */
    securityEventExtractionProcessor?: outputs.OpenpipelineSdlcEventsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessor;
}

export interface OpenpipelineSdlcEventsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Definition of the field extraction
     */
    fieldExtraction?: outputs.OpenpipelineSdlcEventsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessorFieldExtraction;
    forwarderConfigId: string;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSdlcEventsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessorFieldExtraction {
    /**
     * Unique fields to include/exclude in the extracted record
     */
    fields?: string[];
    /**
     * Defines how the fields of the source record should be extracted
     */
    semantic: string;
}

export interface OpenpipelineSdlcEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Strategy to assign a value
     */
    eventProvider: outputs.OpenpipelineSdlcEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventProvider;
    /**
     * Strategy to assign a value
     */
    eventType: outputs.OpenpipelineSdlcEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventType;
    /**
     * Definition of the field extraction
     */
    fieldExtraction?: outputs.OpenpipelineSdlcEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorFieldExtraction;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSdlcEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventProvider {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineSdlcEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventType {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineSdlcEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorFieldExtraction {
    /**
     * Unique fields to include/exclude in the extracted record
     */
    fields?: string[];
    /**
     * Defines how the fields of the source record should be extracted
     */
    semantic: string;
}

export interface OpenpipelineSdlcEventsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * List of properties for the extracted davis event
     */
    properties: outputs.OpenpipelineSdlcEventsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessorProperty[];
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSdlcEventsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessorProperty {
    /**
     * The key to set on the davis event
     */
    key: string;
    /**
     * The value assigned to the key
     */
    value: string;
}

export interface OpenpipelineSdlcEventsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Definition of the field extraction
     */
    fieldExtraction?: outputs.OpenpipelineSdlcEventsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessorFieldExtraction;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSdlcEventsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessorFieldExtraction {
    /**
     * Unique fields to include/exclude in the extracted record
     */
    fields?: string[];
    /**
     * Defines how the fields of the source record should be extracted
     */
    semantic: string;
}

export interface OpenpipelineSdlcEventsPipelinesPipelineMetricExtraction {
    /**
     * Data extraction processor to use
     */
    processors?: outputs.OpenpipelineSdlcEventsPipelinesPipelineMetricExtractionProcessor[];
}

export interface OpenpipelineSdlcEventsPipelinesPipelineMetricExtractionProcessor {
    /**
     * Processor to write the occurrences as a metric
     */
    counterMetricExtractionProcessor?: outputs.OpenpipelineSdlcEventsPipelinesPipelineMetricExtractionProcessorCounterMetricExtractionProcessor;
    /**
     * Processor to write the occurrences as a metric
     */
    samplingAwareCounterMetricExtractionProcessor?: outputs.OpenpipelineSdlcEventsPipelinesPipelineMetricExtractionProcessorSamplingAwareCounterMetricExtractionProcessor;
    /**
     * Processor to extract a value from a field as a metric.
     */
    samplingAwareValueMetricExtractionProcessor?: outputs.OpenpipelineSdlcEventsPipelinesPipelineMetricExtractionProcessorSamplingAwareValueMetricExtractionProcessor;
    /**
     * Processor to extract a value from a field as a metric
     */
    valueMetricExtractionProcessor?: outputs.OpenpipelineSdlcEventsPipelinesPipelineMetricExtractionProcessorValueMetricExtractionProcessor;
}

export interface OpenpipelineSdlcEventsPipelinesPipelineMetricExtractionProcessorCounterMetricExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of dimensions to add to the metric
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSdlcEventsPipelinesPipelineMetricExtractionProcessorSamplingAwareCounterMetricExtractionProcessor {
    /**
     * Indicates whether aggregation is considered for metric extraction
     */
    aggregation?: string;
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of unique dimensions to add to the metric.
     * Dimensions are represented in the format '({dimensionName}=)?{sourceField}'.
     * '{dimensionName}' is optional if {sourceField} represents a valid metric dimension name.
     * '{sourceField}' has to represent a valid DQL field accessor and it can access a nested field (for example, 'field[field2][0]')
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Indicates whether sampling is considered for metric extraction. Possible values: 'DISABLED', 'ENABLED'
     */
    sampling?: string;
}

export interface OpenpipelineSdlcEventsPipelinesPipelineMetricExtractionProcessorSamplingAwareValueMetricExtractionProcessor {
    /**
     * Indicates whether aggregation is considered for metric extraction. Possible values: 'DISABLED', 'ENABLED'
     */
    aggregation?: string;
    /**
     * The default value to use if the given field value could not be extracted. String value must be a number
     */
    defaultValue?: string;
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of unique dimensions to add to the metric.
     * Dimensions are represented in the format '({dimensionName}=)?{sourceField}'.
     * '{dimensionName}' is optional if {sourceField} represents a valid metric dimension name.
     * '{sourceField}' has to represent a valid DQL field accessor and it can access a nested field (for example, 'field[field2][0]')
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * The field from which to extract the value for the metric, or 'null' for a duration measurement
     */
    field?: string;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Indicates whether the metric value should be the specified field or duration. Possible values: 'DURATION', 'FIELD'
     */
    measurement: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Indicates whether sampling is considered for metric extraction. Possible values: 'DISABLED', 'ENABLED'
     */
    sampling?: string;
}

export interface OpenpipelineSdlcEventsPipelinesPipelineMetricExtractionProcessorValueMetricExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of dimensions to add to the metric
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * The field to extract the value for the metric
     */
    field: string;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSdlcEventsPipelinesPipelineProcessing {
    /**
     * Groups all processors applicable for the ProcessingStage.
     * Applicable processors are DqlProcessor, FieldsAddProcessor, FieldsRemoveProcessor, FieldsRenameProcessor, TechnologyProcessor and DropProcessor.
     */
    processors?: outputs.OpenpipelineSdlcEventsPipelinesPipelineProcessingProcessor[];
}

export interface OpenpipelineSdlcEventsPipelinesPipelineProcessingProcessor {
    /**
     * Processor to apply a DQL script
     */
    dqlProcessor?: outputs.OpenpipelineSdlcEventsPipelinesPipelineProcessingProcessorDqlProcessor;
    /**
     * Processor to drop the record either during the processing stage or at the endpoint
     */
    dropProcessor?: outputs.OpenpipelineSdlcEventsPipelinesPipelineProcessingProcessorDropProcessor;
    /**
     * Processor to add fields
     */
    fieldsAddProcessor?: outputs.OpenpipelineSdlcEventsPipelinesPipelineProcessingProcessorFieldsAddProcessor;
    /**
     * Processor to remove fields
     */
    fieldsRemoveProcessor?: outputs.OpenpipelineSdlcEventsPipelinesPipelineProcessingProcessorFieldsRemoveProcessor;
    /**
     * Processor to rename fields
     */
    fieldsRenameProcessor?: outputs.OpenpipelineSdlcEventsPipelinesPipelineProcessingProcessorFieldsRenameProcessor;
    /**
     * Processor to apply a technology processors
     */
    technologyProcessor?: outputs.OpenpipelineSdlcEventsPipelinesPipelineProcessingProcessorTechnologyProcessor;
}

export interface OpenpipelineSdlcEventsPipelinesPipelineProcessingProcessorDqlProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * The DQL script to apply on the record
     */
    dqlScript: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSdlcEventsPipelinesPipelineProcessingProcessorDropProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSdlcEventsPipelinesPipelineProcessingProcessorFieldsAddProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: outputs.OpenpipelineSdlcEventsPipelinesPipelineProcessingProcessorFieldsAddProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSdlcEventsPipelinesPipelineProcessingProcessorFieldsAddProcessorField {
    /**
     * Name of the field
     */
    name: string;
    /**
     * Value to assign to the field
     */
    value: string;
}

export interface OpenpipelineSdlcEventsPipelinesPipelineProcessingProcessorFieldsRemoveProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: string[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSdlcEventsPipelinesPipelineProcessingProcessorFieldsRenameProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to rename on the record
     */
    fields: outputs.OpenpipelineSdlcEventsPipelinesPipelineProcessingProcessorFieldsRenameProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSdlcEventsPipelinesPipelineProcessingProcessorFieldsRenameProcessorField {
    /**
     * The field to rename
     */
    fromName: string;
    /**
     * The new field name
     */
    toName: string;
}

export interface OpenpipelineSdlcEventsPipelinesPipelineProcessingProcessorTechnologyProcessor {
    /**
     * Optional customer-defined matching condition, that is used in place of the main technology matcher.
     */
    customMatcher?: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * The reference identifier to a specific technology. This technology is applied on the record.
     */
    technologyId: string;
}

export interface OpenpipelineSdlcEventsPipelinesPipelineProductAllocation {
    /**
     * Product allocation processor to use
     */
    processors?: outputs.OpenpipelineSdlcEventsPipelinesPipelineProductAllocationProcessor[];
}

export interface OpenpipelineSdlcEventsPipelinesPipelineProductAllocationProcessor {
    /**
     * Processor to write the occurrences as a product allocation
     */
    productAllocationProcessor?: outputs.OpenpipelineSdlcEventsPipelinesPipelineProductAllocationProcessorProductAllocationProcessor;
}

export interface OpenpipelineSdlcEventsPipelinesPipelineProductAllocationProcessorProductAllocationProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Strategy to assign a value
     */
    value: outputs.OpenpipelineSdlcEventsPipelinesPipelineProductAllocationProcessorProductAllocationProcessorValue;
}

export interface OpenpipelineSdlcEventsPipelinesPipelineProductAllocationProcessorProductAllocationProcessorValue {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineSdlcEventsPipelinesPipelineSecurityContext {
    /**
     * Groups all processors applicable for the SecurityContextStage.
     * Applicable processor is SecurityContextProcessor.
     */
    processors?: outputs.OpenpipelineSdlcEventsPipelinesPipelineSecurityContextProcessor[];
}

export interface OpenpipelineSdlcEventsPipelinesPipelineSecurityContextProcessor {
    /**
     * Processor to set the security context field
     */
    securityContextProcessor?: outputs.OpenpipelineSdlcEventsPipelinesPipelineSecurityContextProcessorSecurityContextProcessor;
}

export interface OpenpipelineSdlcEventsPipelinesPipelineSecurityContextProcessorSecurityContextProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Strategy to assign a value
     */
    value: outputs.OpenpipelineSdlcEventsPipelinesPipelineSecurityContextProcessorSecurityContextProcessorValue;
}

export interface OpenpipelineSdlcEventsPipelinesPipelineSecurityContextProcessorSecurityContextProcessorValue {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineSdlcEventsPipelinesPipelineStorage {
    /**
     * Default bucket assigned to records which do not match any other storage processor
     */
    catchAllBucketName?: string;
    /**
     * Groups all processors applicable for the StorageStage.
     * Applicable processors are BucketAssignmentProcessor and NoStorageProcessor.
     */
    processors?: outputs.OpenpipelineSdlcEventsPipelinesPipelineStorageProcessor[];
}

export interface OpenpipelineSdlcEventsPipelinesPipelineStorageProcessor {
    /**
     * Processor to assign a bucket
     */
    bucketAssignmentProcessor?: outputs.OpenpipelineSdlcEventsPipelinesPipelineStorageProcessorBucketAssignmentProcessor;
    /**
     * Processor to skip storage assignment
     */
    noStorageProcessor?: outputs.OpenpipelineSdlcEventsPipelinesPipelineStorageProcessorNoStorageProcessor;
}

export interface OpenpipelineSdlcEventsPipelinesPipelineStorageProcessorBucketAssignmentProcessor {
    /**
     * Bucket that is assigned when the record is matched
     */
    bucketName: string;
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSdlcEventsPipelinesPipelineStorageProcessorNoStorageProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSdlcEventsRouting {
    /**
     * Dynamic routing entry
     */
    entries?: outputs.OpenpipelineSdlcEventsRoutingEntry[];
}

export interface OpenpipelineSdlcEventsRoutingEntry {
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Unique note describing the dynamic route
     */
    note: string;
    /**
     * Identifier of the pipeline the record is routed into
     */
    pipelineId: string;
}

export interface OpenpipelineSecurityEventsEndpoints {
    /**
     * Definition of a single ingest source
     */
    endpoints?: outputs.OpenpipelineSecurityEventsEndpointsEndpoint[];
}

export interface OpenpipelineSecurityEventsEndpointsEndpoint {
    /**
     * The default bucket assigned to records for the ingest source
     */
    defaultBucket?: string;
    /**
     * Display name of the ingest source
     */
    displayName: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * The pre-processing done in the ingest source
     */
    processors?: outputs.OpenpipelineSecurityEventsEndpointsEndpointProcessors;
    /**
     * Routing strategy, either dynamic or static
     */
    routing: outputs.OpenpipelineSecurityEventsEndpointsEndpointRouting;
    /**
     * The segment of the ingest source, which is applied to the base path. Must be unique within a configuration."
     */
    segment: string;
}

export interface OpenpipelineSecurityEventsEndpointsEndpointProcessors {
    /**
     * Groups all processors applicable for processing in the EndpointDefinition.
     * Applicable processors are DqlProcessor, FieldsAddProcessor, FieldsRemoveProcessor, FieldsRenameProcessor and DropProcessor.
     */
    processors?: outputs.OpenpipelineSecurityEventsEndpointsEndpointProcessorsProcessor[];
}

export interface OpenpipelineSecurityEventsEndpointsEndpointProcessorsProcessor {
    /**
     * Processor to apply a DQL script
     */
    dqlProcessor?: outputs.OpenpipelineSecurityEventsEndpointsEndpointProcessorsProcessorDqlProcessor;
    /**
     * Processor to drop the record either during the processing stage or at the endpoint
     */
    dropProcessor?: outputs.OpenpipelineSecurityEventsEndpointsEndpointProcessorsProcessorDropProcessor;
    /**
     * Processor to add fields
     */
    fieldsAddProcessor?: outputs.OpenpipelineSecurityEventsEndpointsEndpointProcessorsProcessorFieldsAddProcessor;
    /**
     * Processor to remove fields
     */
    fieldsRemoveProcessor?: outputs.OpenpipelineSecurityEventsEndpointsEndpointProcessorsProcessorFieldsRemoveProcessor;
    /**
     * Processor to rename fields
     */
    fieldsRenameProcessor?: outputs.OpenpipelineSecurityEventsEndpointsEndpointProcessorsProcessorFieldsRenameProcessor;
    /**
     * Processor to apply a technology processors.
     */
    technologyProcessor?: outputs.OpenpipelineSecurityEventsEndpointsEndpointProcessorsProcessorTechnologyProcessor;
}

export interface OpenpipelineSecurityEventsEndpointsEndpointProcessorsProcessorDqlProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * The DQL script to apply on the record
     */
    dqlScript: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSecurityEventsEndpointsEndpointProcessorsProcessorDropProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSecurityEventsEndpointsEndpointProcessorsProcessorFieldsAddProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: outputs.OpenpipelineSecurityEventsEndpointsEndpointProcessorsProcessorFieldsAddProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSecurityEventsEndpointsEndpointProcessorsProcessorFieldsAddProcessorField {
    /**
     * Name of the field
     */
    name: string;
    /**
     * Value to assign to the field
     */
    value: string;
}

export interface OpenpipelineSecurityEventsEndpointsEndpointProcessorsProcessorFieldsRemoveProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: string[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSecurityEventsEndpointsEndpointProcessorsProcessorFieldsRenameProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to rename on the record
     */
    fields: outputs.OpenpipelineSecurityEventsEndpointsEndpointProcessorsProcessorFieldsRenameProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSecurityEventsEndpointsEndpointProcessorsProcessorFieldsRenameProcessorField {
    /**
     * The field to rename
     */
    fromName: string;
    /**
     * The new field name
     */
    toName: string;
}

export interface OpenpipelineSecurityEventsEndpointsEndpointProcessorsProcessorTechnologyProcessor {
    /**
     * Optional customer-defined matching condition, that is used in place of the main technology matcher.
     */
    customMatcher?: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * The reference identifier to a specific technology. This technology is applied on the record.
     */
    technologyId: string;
}

export interface OpenpipelineSecurityEventsEndpointsEndpointRouting {
    /**
     * Pipeline ID of the static routing
     */
    pipelineId?: string;
    /**
     * Type of routing, static or dynamic
     */
    type: string;
}

export interface OpenpipelineSecurityEventsPipelines {
    /**
     * Definition of a single pipeline
     */
    pipelines?: outputs.OpenpipelineSecurityEventsPipelinesPipeline[];
}

export interface OpenpipelineSecurityEventsPipelinesPipeline {
    /**
     * Cost Allocation stage configuration of the pipeline
     */
    costAllocation?: outputs.OpenpipelineSecurityEventsPipelinesPipelineCostAllocation;
    /**
     * Data extraction stage configuration of the pipeline
     */
    dataExtraction?: outputs.OpenpipelineSecurityEventsPipelinesPipelineDataExtraction;
    /**
     * Display name of the pipeline
     */
    displayName: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the pipeline
     */
    id: string;
    /**
     * Metric extraction stage configuration of the pipeline
     */
    metricExtraction?: outputs.OpenpipelineSecurityEventsPipelinesPipelineMetricExtraction;
    /**
     * Processing stage configuration of the pipeline
     */
    processing?: outputs.OpenpipelineSecurityEventsPipelinesPipelineProcessing;
    /**
     * Product Allocation stage configuration of the pipeline
     */
    productAllocation?: outputs.OpenpipelineSecurityEventsPipelinesPipelineProductAllocation;
    /**
     * Security context stage configuration of the pipeline
     */
    securityContext?: outputs.OpenpipelineSecurityEventsPipelinesPipelineSecurityContext;
    /**
     * Data extraction stage configuration of the pipeline
     */
    storage?: outputs.OpenpipelineSecurityEventsPipelinesPipelineStorage;
}

export interface OpenpipelineSecurityEventsPipelinesPipelineCostAllocation {
    /**
     * Cost allocation processor to use
     */
    processors?: outputs.OpenpipelineSecurityEventsPipelinesPipelineCostAllocationProcessor[];
}

export interface OpenpipelineSecurityEventsPipelinesPipelineCostAllocationProcessor {
    /**
     * Processor to write the occurrences as a cost allocation
     */
    costAllocationProcessor?: outputs.OpenpipelineSecurityEventsPipelinesPipelineCostAllocationProcessorCostAllocationProcessor;
}

export interface OpenpipelineSecurityEventsPipelinesPipelineCostAllocationProcessorCostAllocationProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Strategy to assign a value
     */
    value: outputs.OpenpipelineSecurityEventsPipelinesPipelineCostAllocationProcessorCostAllocationProcessorValue;
}

export interface OpenpipelineSecurityEventsPipelinesPipelineCostAllocationProcessorCostAllocationProcessorValue {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineSecurityEventsPipelinesPipelineDataExtraction {
    /**
     * Groups all processors applicable for the DataExtractionStage.
     * Applicable processors are DavisEventExtractionProcessor and BizeventExtractionProcessor.
     */
    processors?: outputs.OpenpipelineSecurityEventsPipelinesPipelineDataExtractionProcessor[];
}

export interface OpenpipelineSecurityEventsPipelinesPipelineDataExtractionProcessor {
    /**
     * Processor to extract a Azure log.
     */
    azureLogForwardingProcessor?: outputs.OpenpipelineSecurityEventsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessor;
    /**
     * Processor to extract a bizevent.
     * Fields event.type and event.provider can only be assigned to a constant or field value.
     * A multi-value constant is not supported for those fields.
     */
    bizeventExtractionProcessor?: outputs.OpenpipelineSecurityEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessor;
    /**
     * Processor to apply a DQL script
     */
    davisEventExtractionProcessor?: outputs.OpenpipelineSecurityEventsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessor;
    /**
     * Processor to extract a security event.
     */
    securityEventExtractionProcessor?: outputs.OpenpipelineSecurityEventsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessor;
}

export interface OpenpipelineSecurityEventsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Definition of the field extraction
     */
    fieldExtraction?: outputs.OpenpipelineSecurityEventsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessorFieldExtraction;
    forwarderConfigId: string;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSecurityEventsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessorFieldExtraction {
    /**
     * Unique fields to include/exclude in the extracted record
     */
    fields?: string[];
    /**
     * Defines how the fields of the source record should be extracted
     */
    semantic: string;
}

export interface OpenpipelineSecurityEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Strategy to assign a value
     */
    eventProvider: outputs.OpenpipelineSecurityEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventProvider;
    /**
     * Strategy to assign a value
     */
    eventType: outputs.OpenpipelineSecurityEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventType;
    /**
     * Definition of the field extraction
     */
    fieldExtraction?: outputs.OpenpipelineSecurityEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorFieldExtraction;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSecurityEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventProvider {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineSecurityEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventType {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineSecurityEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorFieldExtraction {
    /**
     * Unique fields to include/exclude in the extracted record
     */
    fields?: string[];
    /**
     * Defines how the fields of the source record should be extracted
     */
    semantic: string;
}

export interface OpenpipelineSecurityEventsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * List of properties for the extracted davis event
     */
    properties: outputs.OpenpipelineSecurityEventsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessorProperty[];
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSecurityEventsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessorProperty {
    /**
     * The key to set on the davis event
     */
    key: string;
    /**
     * The value assigned to the key
     */
    value: string;
}

export interface OpenpipelineSecurityEventsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Definition of the field extraction
     */
    fieldExtraction?: outputs.OpenpipelineSecurityEventsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessorFieldExtraction;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSecurityEventsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessorFieldExtraction {
    /**
     * Unique fields to include/exclude in the extracted record
     */
    fields?: string[];
    /**
     * Defines how the fields of the source record should be extracted
     */
    semantic: string;
}

export interface OpenpipelineSecurityEventsPipelinesPipelineMetricExtraction {
    /**
     * Data extraction processor to use
     */
    processors?: outputs.OpenpipelineSecurityEventsPipelinesPipelineMetricExtractionProcessor[];
}

export interface OpenpipelineSecurityEventsPipelinesPipelineMetricExtractionProcessor {
    /**
     * Processor to write the occurrences as a metric
     */
    counterMetricExtractionProcessor?: outputs.OpenpipelineSecurityEventsPipelinesPipelineMetricExtractionProcessorCounterMetricExtractionProcessor;
    /**
     * Processor to write the occurrences as a metric
     */
    samplingAwareCounterMetricExtractionProcessor?: outputs.OpenpipelineSecurityEventsPipelinesPipelineMetricExtractionProcessorSamplingAwareCounterMetricExtractionProcessor;
    /**
     * Processor to extract a value from a field as a metric.
     */
    samplingAwareValueMetricExtractionProcessor?: outputs.OpenpipelineSecurityEventsPipelinesPipelineMetricExtractionProcessorSamplingAwareValueMetricExtractionProcessor;
    /**
     * Processor to extract a value from a field as a metric
     */
    valueMetricExtractionProcessor?: outputs.OpenpipelineSecurityEventsPipelinesPipelineMetricExtractionProcessorValueMetricExtractionProcessor;
}

export interface OpenpipelineSecurityEventsPipelinesPipelineMetricExtractionProcessorCounterMetricExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of dimensions to add to the metric
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSecurityEventsPipelinesPipelineMetricExtractionProcessorSamplingAwareCounterMetricExtractionProcessor {
    /**
     * Indicates whether aggregation is considered for metric extraction
     */
    aggregation?: string;
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of unique dimensions to add to the metric.
     * Dimensions are represented in the format '({dimensionName}=)?{sourceField}'.
     * '{dimensionName}' is optional if {sourceField} represents a valid metric dimension name.
     * '{sourceField}' has to represent a valid DQL field accessor and it can access a nested field (for example, 'field[field2][0]')
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Indicates whether sampling is considered for metric extraction. Possible values: 'DISABLED', 'ENABLED'
     */
    sampling?: string;
}

export interface OpenpipelineSecurityEventsPipelinesPipelineMetricExtractionProcessorSamplingAwareValueMetricExtractionProcessor {
    /**
     * Indicates whether aggregation is considered for metric extraction. Possible values: 'DISABLED', 'ENABLED'
     */
    aggregation?: string;
    /**
     * The default value to use if the given field value could not be extracted. String value must be a number
     */
    defaultValue?: string;
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of unique dimensions to add to the metric.
     * Dimensions are represented in the format '({dimensionName}=)?{sourceField}'.
     * '{dimensionName}' is optional if {sourceField} represents a valid metric dimension name.
     * '{sourceField}' has to represent a valid DQL field accessor and it can access a nested field (for example, 'field[field2][0]')
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * The field from which to extract the value for the metric, or 'null' for a duration measurement
     */
    field?: string;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Indicates whether the metric value should be the specified field or duration. Possible values: 'DURATION', 'FIELD'
     */
    measurement: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Indicates whether sampling is considered for metric extraction. Possible values: 'DISABLED', 'ENABLED'
     */
    sampling?: string;
}

export interface OpenpipelineSecurityEventsPipelinesPipelineMetricExtractionProcessorValueMetricExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of dimensions to add to the metric
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * The field to extract the value for the metric
     */
    field: string;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSecurityEventsPipelinesPipelineProcessing {
    /**
     * Groups all processors applicable for the ProcessingStage.
     * Applicable processors are DqlProcessor, FieldsAddProcessor, FieldsRemoveProcessor, FieldsRenameProcessor, TechnologyProcessor and DropProcessor.
     */
    processors?: outputs.OpenpipelineSecurityEventsPipelinesPipelineProcessingProcessor[];
}

export interface OpenpipelineSecurityEventsPipelinesPipelineProcessingProcessor {
    /**
     * Processor to apply a DQL script
     */
    dqlProcessor?: outputs.OpenpipelineSecurityEventsPipelinesPipelineProcessingProcessorDqlProcessor;
    /**
     * Processor to drop the record either during the processing stage or at the endpoint
     */
    dropProcessor?: outputs.OpenpipelineSecurityEventsPipelinesPipelineProcessingProcessorDropProcessor;
    /**
     * Processor to add fields
     */
    fieldsAddProcessor?: outputs.OpenpipelineSecurityEventsPipelinesPipelineProcessingProcessorFieldsAddProcessor;
    /**
     * Processor to remove fields
     */
    fieldsRemoveProcessor?: outputs.OpenpipelineSecurityEventsPipelinesPipelineProcessingProcessorFieldsRemoveProcessor;
    /**
     * Processor to rename fields
     */
    fieldsRenameProcessor?: outputs.OpenpipelineSecurityEventsPipelinesPipelineProcessingProcessorFieldsRenameProcessor;
    /**
     * Processor to apply a technology processors
     */
    technologyProcessor?: outputs.OpenpipelineSecurityEventsPipelinesPipelineProcessingProcessorTechnologyProcessor;
}

export interface OpenpipelineSecurityEventsPipelinesPipelineProcessingProcessorDqlProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * The DQL script to apply on the record
     */
    dqlScript: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSecurityEventsPipelinesPipelineProcessingProcessorDropProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSecurityEventsPipelinesPipelineProcessingProcessorFieldsAddProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: outputs.OpenpipelineSecurityEventsPipelinesPipelineProcessingProcessorFieldsAddProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSecurityEventsPipelinesPipelineProcessingProcessorFieldsAddProcessorField {
    /**
     * Name of the field
     */
    name: string;
    /**
     * Value to assign to the field
     */
    value: string;
}

export interface OpenpipelineSecurityEventsPipelinesPipelineProcessingProcessorFieldsRemoveProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: string[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSecurityEventsPipelinesPipelineProcessingProcessorFieldsRenameProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to rename on the record
     */
    fields: outputs.OpenpipelineSecurityEventsPipelinesPipelineProcessingProcessorFieldsRenameProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSecurityEventsPipelinesPipelineProcessingProcessorFieldsRenameProcessorField {
    /**
     * The field to rename
     */
    fromName: string;
    /**
     * The new field name
     */
    toName: string;
}

export interface OpenpipelineSecurityEventsPipelinesPipelineProcessingProcessorTechnologyProcessor {
    /**
     * Optional customer-defined matching condition, that is used in place of the main technology matcher.
     */
    customMatcher?: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * The reference identifier to a specific technology. This technology is applied on the record.
     */
    technologyId: string;
}

export interface OpenpipelineSecurityEventsPipelinesPipelineProductAllocation {
    /**
     * Product allocation processor to use
     */
    processors?: outputs.OpenpipelineSecurityEventsPipelinesPipelineProductAllocationProcessor[];
}

export interface OpenpipelineSecurityEventsPipelinesPipelineProductAllocationProcessor {
    /**
     * Processor to write the occurrences as a product allocation
     */
    productAllocationProcessor?: outputs.OpenpipelineSecurityEventsPipelinesPipelineProductAllocationProcessorProductAllocationProcessor;
}

export interface OpenpipelineSecurityEventsPipelinesPipelineProductAllocationProcessorProductAllocationProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Strategy to assign a value
     */
    value: outputs.OpenpipelineSecurityEventsPipelinesPipelineProductAllocationProcessorProductAllocationProcessorValue;
}

export interface OpenpipelineSecurityEventsPipelinesPipelineProductAllocationProcessorProductAllocationProcessorValue {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineSecurityEventsPipelinesPipelineSecurityContext {
    /**
     * Groups all processors applicable for the SecurityContextStage.
     * Applicable processor is SecurityContextProcessor.
     */
    processors?: outputs.OpenpipelineSecurityEventsPipelinesPipelineSecurityContextProcessor[];
}

export interface OpenpipelineSecurityEventsPipelinesPipelineSecurityContextProcessor {
    /**
     * Processor to set the security context field
     */
    securityContextProcessor?: outputs.OpenpipelineSecurityEventsPipelinesPipelineSecurityContextProcessorSecurityContextProcessor;
}

export interface OpenpipelineSecurityEventsPipelinesPipelineSecurityContextProcessorSecurityContextProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Strategy to assign a value
     */
    value: outputs.OpenpipelineSecurityEventsPipelinesPipelineSecurityContextProcessorSecurityContextProcessorValue;
}

export interface OpenpipelineSecurityEventsPipelinesPipelineSecurityContextProcessorSecurityContextProcessorValue {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineSecurityEventsPipelinesPipelineStorage {
    /**
     * Default bucket assigned to records which do not match any other storage processor
     */
    catchAllBucketName?: string;
    /**
     * Groups all processors applicable for the StorageStage.
     * Applicable processors are BucketAssignmentProcessor and NoStorageProcessor.
     */
    processors?: outputs.OpenpipelineSecurityEventsPipelinesPipelineStorageProcessor[];
}

export interface OpenpipelineSecurityEventsPipelinesPipelineStorageProcessor {
    /**
     * Processor to assign a bucket
     */
    bucketAssignmentProcessor?: outputs.OpenpipelineSecurityEventsPipelinesPipelineStorageProcessorBucketAssignmentProcessor;
    /**
     * Processor to skip storage assignment
     */
    noStorageProcessor?: outputs.OpenpipelineSecurityEventsPipelinesPipelineStorageProcessorNoStorageProcessor;
}

export interface OpenpipelineSecurityEventsPipelinesPipelineStorageProcessorBucketAssignmentProcessor {
    /**
     * Bucket that is assigned when the record is matched
     */
    bucketName: string;
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSecurityEventsPipelinesPipelineStorageProcessorNoStorageProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSecurityEventsRouting {
    /**
     * Dynamic routing entry
     */
    entries?: outputs.OpenpipelineSecurityEventsRoutingEntry[];
}

export interface OpenpipelineSecurityEventsRoutingEntry {
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Unique note describing the dynamic route
     */
    note: string;
    /**
     * Identifier of the pipeline the record is routed into
     */
    pipelineId: string;
}

export interface OpenpipelineSpansEndpoints {
    /**
     * Definition of a single ingest source
     */
    endpoints?: outputs.OpenpipelineSpansEndpointsEndpoint[];
}

export interface OpenpipelineSpansEndpointsEndpoint {
    /**
     * The default bucket assigned to records for the ingest source
     */
    defaultBucket?: string;
    /**
     * Display name of the ingest source
     */
    displayName: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * The pre-processing done in the ingest source
     */
    processors?: outputs.OpenpipelineSpansEndpointsEndpointProcessors;
    /**
     * Routing strategy, either dynamic or static
     */
    routing: outputs.OpenpipelineSpansEndpointsEndpointRouting;
    /**
     * The segment of the ingest source, which is applied to the base path. Must be unique within a configuration."
     */
    segment: string;
}

export interface OpenpipelineSpansEndpointsEndpointProcessors {
    /**
     * Groups all processors applicable for processing in the EndpointDefinition.
     * Applicable processors are DqlProcessor, FieldsAddProcessor, FieldsRemoveProcessor, FieldsRenameProcessor and DropProcessor.
     */
    processors?: outputs.OpenpipelineSpansEndpointsEndpointProcessorsProcessor[];
}

export interface OpenpipelineSpansEndpointsEndpointProcessorsProcessor {
    /**
     * Processor to apply a DQL script
     */
    dqlProcessor?: outputs.OpenpipelineSpansEndpointsEndpointProcessorsProcessorDqlProcessor;
    /**
     * Processor to drop the record either during the processing stage or at the endpoint
     */
    dropProcessor?: outputs.OpenpipelineSpansEndpointsEndpointProcessorsProcessorDropProcessor;
    /**
     * Processor to add fields
     */
    fieldsAddProcessor?: outputs.OpenpipelineSpansEndpointsEndpointProcessorsProcessorFieldsAddProcessor;
    /**
     * Processor to remove fields
     */
    fieldsRemoveProcessor?: outputs.OpenpipelineSpansEndpointsEndpointProcessorsProcessorFieldsRemoveProcessor;
    /**
     * Processor to rename fields
     */
    fieldsRenameProcessor?: outputs.OpenpipelineSpansEndpointsEndpointProcessorsProcessorFieldsRenameProcessor;
    /**
     * Processor to apply a technology processors.
     */
    technologyProcessor?: outputs.OpenpipelineSpansEndpointsEndpointProcessorsProcessorTechnologyProcessor;
}

export interface OpenpipelineSpansEndpointsEndpointProcessorsProcessorDqlProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * The DQL script to apply on the record
     */
    dqlScript: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSpansEndpointsEndpointProcessorsProcessorDropProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSpansEndpointsEndpointProcessorsProcessorFieldsAddProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: outputs.OpenpipelineSpansEndpointsEndpointProcessorsProcessorFieldsAddProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSpansEndpointsEndpointProcessorsProcessorFieldsAddProcessorField {
    /**
     * Name of the field
     */
    name: string;
    /**
     * Value to assign to the field
     */
    value: string;
}

export interface OpenpipelineSpansEndpointsEndpointProcessorsProcessorFieldsRemoveProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: string[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSpansEndpointsEndpointProcessorsProcessorFieldsRenameProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to rename on the record
     */
    fields: outputs.OpenpipelineSpansEndpointsEndpointProcessorsProcessorFieldsRenameProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSpansEndpointsEndpointProcessorsProcessorFieldsRenameProcessorField {
    /**
     * The field to rename
     */
    fromName: string;
    /**
     * The new field name
     */
    toName: string;
}

export interface OpenpipelineSpansEndpointsEndpointProcessorsProcessorTechnologyProcessor {
    /**
     * Optional customer-defined matching condition, that is used in place of the main technology matcher.
     */
    customMatcher?: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * The reference identifier to a specific technology. This technology is applied on the record.
     */
    technologyId: string;
}

export interface OpenpipelineSpansEndpointsEndpointRouting {
    /**
     * Pipeline ID of the static routing
     */
    pipelineId?: string;
    /**
     * Type of routing, static or dynamic
     */
    type: string;
}

export interface OpenpipelineSpansPipelines {
    /**
     * Definition of a single pipeline
     */
    pipelines?: outputs.OpenpipelineSpansPipelinesPipeline[];
}

export interface OpenpipelineSpansPipelinesPipeline {
    /**
     * Cost Allocation stage configuration of the pipeline
     */
    costAllocation?: outputs.OpenpipelineSpansPipelinesPipelineCostAllocation;
    /**
     * Data extraction stage configuration of the pipeline
     */
    dataExtraction?: outputs.OpenpipelineSpansPipelinesPipelineDataExtraction;
    /**
     * Display name of the pipeline
     */
    displayName: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the pipeline
     */
    id: string;
    /**
     * Metric extraction stage configuration of the pipeline
     */
    metricExtraction?: outputs.OpenpipelineSpansPipelinesPipelineMetricExtraction;
    /**
     * Processing stage configuration of the pipeline
     */
    processing?: outputs.OpenpipelineSpansPipelinesPipelineProcessing;
    /**
     * Product Allocation stage configuration of the pipeline
     */
    productAllocation?: outputs.OpenpipelineSpansPipelinesPipelineProductAllocation;
    /**
     * Security context stage configuration of the pipeline
     */
    securityContext?: outputs.OpenpipelineSpansPipelinesPipelineSecurityContext;
    /**
     * Data extraction stage configuration of the pipeline
     */
    storage?: outputs.OpenpipelineSpansPipelinesPipelineStorage;
}

export interface OpenpipelineSpansPipelinesPipelineCostAllocation {
    /**
     * Cost allocation processor to use
     */
    processors?: outputs.OpenpipelineSpansPipelinesPipelineCostAllocationProcessor[];
}

export interface OpenpipelineSpansPipelinesPipelineCostAllocationProcessor {
    /**
     * Processor to write the occurrences as a cost allocation
     */
    costAllocationProcessor?: outputs.OpenpipelineSpansPipelinesPipelineCostAllocationProcessorCostAllocationProcessor;
}

export interface OpenpipelineSpansPipelinesPipelineCostAllocationProcessorCostAllocationProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Strategy to assign a value
     */
    value: outputs.OpenpipelineSpansPipelinesPipelineCostAllocationProcessorCostAllocationProcessorValue;
}

export interface OpenpipelineSpansPipelinesPipelineCostAllocationProcessorCostAllocationProcessorValue {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineSpansPipelinesPipelineDataExtraction {
    /**
     * Groups all processors applicable for the DataExtractionStage.
     * Applicable processors are DavisEventExtractionProcessor and BizeventExtractionProcessor.
     */
    processors?: outputs.OpenpipelineSpansPipelinesPipelineDataExtractionProcessor[];
}

export interface OpenpipelineSpansPipelinesPipelineDataExtractionProcessor {
    /**
     * Processor to extract a Azure log.
     */
    azureLogForwardingProcessor?: outputs.OpenpipelineSpansPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessor;
    /**
     * Processor to extract a bizevent.
     * Fields event.type and event.provider can only be assigned to a constant or field value.
     * A multi-value constant is not supported for those fields.
     */
    bizeventExtractionProcessor?: outputs.OpenpipelineSpansPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessor;
    /**
     * Processor to apply a DQL script
     */
    davisEventExtractionProcessor?: outputs.OpenpipelineSpansPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessor;
    /**
     * Processor to extract a security event.
     */
    securityEventExtractionProcessor?: outputs.OpenpipelineSpansPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessor;
}

export interface OpenpipelineSpansPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Definition of the field extraction
     */
    fieldExtraction?: outputs.OpenpipelineSpansPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessorFieldExtraction;
    forwarderConfigId: string;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSpansPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessorFieldExtraction {
    /**
     * Unique fields to include/exclude in the extracted record
     */
    fields?: string[];
    /**
     * Defines how the fields of the source record should be extracted
     */
    semantic: string;
}

export interface OpenpipelineSpansPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Strategy to assign a value
     */
    eventProvider: outputs.OpenpipelineSpansPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventProvider;
    /**
     * Strategy to assign a value
     */
    eventType: outputs.OpenpipelineSpansPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventType;
    /**
     * Definition of the field extraction
     */
    fieldExtraction?: outputs.OpenpipelineSpansPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorFieldExtraction;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSpansPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventProvider {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineSpansPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventType {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineSpansPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorFieldExtraction {
    /**
     * Unique fields to include/exclude in the extracted record
     */
    fields?: string[];
    /**
     * Defines how the fields of the source record should be extracted
     */
    semantic: string;
}

export interface OpenpipelineSpansPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * List of properties for the extracted davis event
     */
    properties: outputs.OpenpipelineSpansPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessorProperty[];
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSpansPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessorProperty {
    /**
     * The key to set on the davis event
     */
    key: string;
    /**
     * The value assigned to the key
     */
    value: string;
}

export interface OpenpipelineSpansPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Definition of the field extraction
     */
    fieldExtraction?: outputs.OpenpipelineSpansPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessorFieldExtraction;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSpansPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessorFieldExtraction {
    /**
     * Unique fields to include/exclude in the extracted record
     */
    fields?: string[];
    /**
     * Defines how the fields of the source record should be extracted
     */
    semantic: string;
}

export interface OpenpipelineSpansPipelinesPipelineMetricExtraction {
    /**
     * Data extraction processor to use
     */
    processors?: outputs.OpenpipelineSpansPipelinesPipelineMetricExtractionProcessor[];
}

export interface OpenpipelineSpansPipelinesPipelineMetricExtractionProcessor {
    /**
     * Processor to write the occurrences as a metric
     */
    counterMetricExtractionProcessor?: outputs.OpenpipelineSpansPipelinesPipelineMetricExtractionProcessorCounterMetricExtractionProcessor;
    /**
     * Processor to write the occurrences as a metric
     */
    samplingAwareCounterMetricExtractionProcessor?: outputs.OpenpipelineSpansPipelinesPipelineMetricExtractionProcessorSamplingAwareCounterMetricExtractionProcessor;
    /**
     * Processor to extract a value from a field as a metric.
     */
    samplingAwareValueMetricExtractionProcessor?: outputs.OpenpipelineSpansPipelinesPipelineMetricExtractionProcessorSamplingAwareValueMetricExtractionProcessor;
    /**
     * Processor to extract a value from a field as a metric
     */
    valueMetricExtractionProcessor?: outputs.OpenpipelineSpansPipelinesPipelineMetricExtractionProcessorValueMetricExtractionProcessor;
}

export interface OpenpipelineSpansPipelinesPipelineMetricExtractionProcessorCounterMetricExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of dimensions to add to the metric
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSpansPipelinesPipelineMetricExtractionProcessorSamplingAwareCounterMetricExtractionProcessor {
    /**
     * Indicates whether aggregation is considered for metric extraction
     */
    aggregation?: string;
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of unique dimensions to add to the metric.
     * Dimensions are represented in the format '({dimensionName}=)?{sourceField}'.
     * '{dimensionName}' is optional if {sourceField} represents a valid metric dimension name.
     * '{sourceField}' has to represent a valid DQL field accessor and it can access a nested field (for example, 'field[field2][0]')
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Indicates whether sampling is considered for metric extraction. Possible values: 'DISABLED', 'ENABLED'
     */
    sampling?: string;
}

export interface OpenpipelineSpansPipelinesPipelineMetricExtractionProcessorSamplingAwareValueMetricExtractionProcessor {
    /**
     * Indicates whether aggregation is considered for metric extraction. Possible values: 'DISABLED', 'ENABLED'
     */
    aggregation?: string;
    /**
     * The default value to use if the given field value could not be extracted. String value must be a number
     */
    defaultValue?: string;
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of unique dimensions to add to the metric.
     * Dimensions are represented in the format '({dimensionName}=)?{sourceField}'.
     * '{dimensionName}' is optional if {sourceField} represents a valid metric dimension name.
     * '{sourceField}' has to represent a valid DQL field accessor and it can access a nested field (for example, 'field[field2][0]')
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * The field from which to extract the value for the metric, or 'null' for a duration measurement
     */
    field?: string;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Indicates whether the metric value should be the specified field or duration. Possible values: 'DURATION', 'FIELD'
     */
    measurement: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Indicates whether sampling is considered for metric extraction. Possible values: 'DISABLED', 'ENABLED'
     */
    sampling?: string;
}

export interface OpenpipelineSpansPipelinesPipelineMetricExtractionProcessorValueMetricExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of dimensions to add to the metric
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * The field to extract the value for the metric
     */
    field: string;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSpansPipelinesPipelineProcessing {
    /**
     * Groups all processors applicable for the ProcessingStage.
     * Applicable processors are DqlProcessor, FieldsAddProcessor, FieldsRemoveProcessor, FieldsRenameProcessor, TechnologyProcessor and DropProcessor.
     */
    processors?: outputs.OpenpipelineSpansPipelinesPipelineProcessingProcessor[];
}

export interface OpenpipelineSpansPipelinesPipelineProcessingProcessor {
    /**
     * Processor to apply a DQL script
     */
    dqlProcessor?: outputs.OpenpipelineSpansPipelinesPipelineProcessingProcessorDqlProcessor;
    /**
     * Processor to drop the record either during the processing stage or at the endpoint
     */
    dropProcessor?: outputs.OpenpipelineSpansPipelinesPipelineProcessingProcessorDropProcessor;
    /**
     * Processor to add fields
     */
    fieldsAddProcessor?: outputs.OpenpipelineSpansPipelinesPipelineProcessingProcessorFieldsAddProcessor;
    /**
     * Processor to remove fields
     */
    fieldsRemoveProcessor?: outputs.OpenpipelineSpansPipelinesPipelineProcessingProcessorFieldsRemoveProcessor;
    /**
     * Processor to rename fields
     */
    fieldsRenameProcessor?: outputs.OpenpipelineSpansPipelinesPipelineProcessingProcessorFieldsRenameProcessor;
    /**
     * Processor to apply a technology processors
     */
    technologyProcessor?: outputs.OpenpipelineSpansPipelinesPipelineProcessingProcessorTechnologyProcessor;
}

export interface OpenpipelineSpansPipelinesPipelineProcessingProcessorDqlProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * The DQL script to apply on the record
     */
    dqlScript: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSpansPipelinesPipelineProcessingProcessorDropProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSpansPipelinesPipelineProcessingProcessorFieldsAddProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: outputs.OpenpipelineSpansPipelinesPipelineProcessingProcessorFieldsAddProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSpansPipelinesPipelineProcessingProcessorFieldsAddProcessorField {
    /**
     * Name of the field
     */
    name: string;
    /**
     * Value to assign to the field
     */
    value: string;
}

export interface OpenpipelineSpansPipelinesPipelineProcessingProcessorFieldsRemoveProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: string[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSpansPipelinesPipelineProcessingProcessorFieldsRenameProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to rename on the record
     */
    fields: outputs.OpenpipelineSpansPipelinesPipelineProcessingProcessorFieldsRenameProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSpansPipelinesPipelineProcessingProcessorFieldsRenameProcessorField {
    /**
     * The field to rename
     */
    fromName: string;
    /**
     * The new field name
     */
    toName: string;
}

export interface OpenpipelineSpansPipelinesPipelineProcessingProcessorTechnologyProcessor {
    /**
     * Optional customer-defined matching condition, that is used in place of the main technology matcher.
     */
    customMatcher?: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * The reference identifier to a specific technology. This technology is applied on the record.
     */
    technologyId: string;
}

export interface OpenpipelineSpansPipelinesPipelineProductAllocation {
    /**
     * Product allocation processor to use
     */
    processors?: outputs.OpenpipelineSpansPipelinesPipelineProductAllocationProcessor[];
}

export interface OpenpipelineSpansPipelinesPipelineProductAllocationProcessor {
    /**
     * Processor to write the occurrences as a product allocation
     */
    productAllocationProcessor?: outputs.OpenpipelineSpansPipelinesPipelineProductAllocationProcessorProductAllocationProcessor;
}

export interface OpenpipelineSpansPipelinesPipelineProductAllocationProcessorProductAllocationProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Strategy to assign a value
     */
    value: outputs.OpenpipelineSpansPipelinesPipelineProductAllocationProcessorProductAllocationProcessorValue;
}

export interface OpenpipelineSpansPipelinesPipelineProductAllocationProcessorProductAllocationProcessorValue {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineSpansPipelinesPipelineSecurityContext {
    /**
     * Groups all processors applicable for the SecurityContextStage.
     * Applicable processor is SecurityContextProcessor.
     */
    processors?: outputs.OpenpipelineSpansPipelinesPipelineSecurityContextProcessor[];
}

export interface OpenpipelineSpansPipelinesPipelineSecurityContextProcessor {
    /**
     * Processor to set the security context field
     */
    securityContextProcessor?: outputs.OpenpipelineSpansPipelinesPipelineSecurityContextProcessorSecurityContextProcessor;
}

export interface OpenpipelineSpansPipelinesPipelineSecurityContextProcessorSecurityContextProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Strategy to assign a value
     */
    value: outputs.OpenpipelineSpansPipelinesPipelineSecurityContextProcessorSecurityContextProcessorValue;
}

export interface OpenpipelineSpansPipelinesPipelineSecurityContextProcessorSecurityContextProcessorValue {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineSpansPipelinesPipelineStorage {
    /**
     * Default bucket assigned to records which do not match any other storage processor
     */
    catchAllBucketName?: string;
    /**
     * Groups all processors applicable for the StorageStage.
     * Applicable processors are BucketAssignmentProcessor and NoStorageProcessor.
     */
    processors?: outputs.OpenpipelineSpansPipelinesPipelineStorageProcessor[];
}

export interface OpenpipelineSpansPipelinesPipelineStorageProcessor {
    /**
     * Processor to assign a bucket
     */
    bucketAssignmentProcessor?: outputs.OpenpipelineSpansPipelinesPipelineStorageProcessorBucketAssignmentProcessor;
    /**
     * Processor to skip storage assignment
     */
    noStorageProcessor?: outputs.OpenpipelineSpansPipelinesPipelineStorageProcessorNoStorageProcessor;
}

export interface OpenpipelineSpansPipelinesPipelineStorageProcessorBucketAssignmentProcessor {
    /**
     * Bucket that is assigned when the record is matched
     */
    bucketName: string;
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSpansPipelinesPipelineStorageProcessorNoStorageProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSpansRouting {
    /**
     * Dynamic routing entry
     */
    entries?: outputs.OpenpipelineSpansRoutingEntry[];
}

export interface OpenpipelineSpansRoutingEntry {
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Unique note describing the dynamic route
     */
    note: string;
    /**
     * Identifier of the pipeline the record is routed into
     */
    pipelineId: string;
}

export interface OpenpipelineSystemEventsEndpoints {
    /**
     * Definition of a single ingest source
     */
    endpoints?: outputs.OpenpipelineSystemEventsEndpointsEndpoint[];
}

export interface OpenpipelineSystemEventsEndpointsEndpoint {
    /**
     * The default bucket assigned to records for the ingest source
     */
    defaultBucket?: string;
    /**
     * Display name of the ingest source
     */
    displayName: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * The pre-processing done in the ingest source
     */
    processors?: outputs.OpenpipelineSystemEventsEndpointsEndpointProcessors;
    /**
     * Routing strategy, either dynamic or static
     */
    routing: outputs.OpenpipelineSystemEventsEndpointsEndpointRouting;
    /**
     * The segment of the ingest source, which is applied to the base path. Must be unique within a configuration."
     */
    segment: string;
}

export interface OpenpipelineSystemEventsEndpointsEndpointProcessors {
    /**
     * Groups all processors applicable for processing in the EndpointDefinition.
     * Applicable processors are DqlProcessor, FieldsAddProcessor, FieldsRemoveProcessor, FieldsRenameProcessor and DropProcessor.
     */
    processors?: outputs.OpenpipelineSystemEventsEndpointsEndpointProcessorsProcessor[];
}

export interface OpenpipelineSystemEventsEndpointsEndpointProcessorsProcessor {
    /**
     * Processor to apply a DQL script
     */
    dqlProcessor?: outputs.OpenpipelineSystemEventsEndpointsEndpointProcessorsProcessorDqlProcessor;
    /**
     * Processor to drop the record either during the processing stage or at the endpoint
     */
    dropProcessor?: outputs.OpenpipelineSystemEventsEndpointsEndpointProcessorsProcessorDropProcessor;
    /**
     * Processor to add fields
     */
    fieldsAddProcessor?: outputs.OpenpipelineSystemEventsEndpointsEndpointProcessorsProcessorFieldsAddProcessor;
    /**
     * Processor to remove fields
     */
    fieldsRemoveProcessor?: outputs.OpenpipelineSystemEventsEndpointsEndpointProcessorsProcessorFieldsRemoveProcessor;
    /**
     * Processor to rename fields
     */
    fieldsRenameProcessor?: outputs.OpenpipelineSystemEventsEndpointsEndpointProcessorsProcessorFieldsRenameProcessor;
    /**
     * Processor to apply a technology processors.
     */
    technologyProcessor?: outputs.OpenpipelineSystemEventsEndpointsEndpointProcessorsProcessorTechnologyProcessor;
}

export interface OpenpipelineSystemEventsEndpointsEndpointProcessorsProcessorDqlProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * The DQL script to apply on the record
     */
    dqlScript: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSystemEventsEndpointsEndpointProcessorsProcessorDropProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSystemEventsEndpointsEndpointProcessorsProcessorFieldsAddProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: outputs.OpenpipelineSystemEventsEndpointsEndpointProcessorsProcessorFieldsAddProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSystemEventsEndpointsEndpointProcessorsProcessorFieldsAddProcessorField {
    /**
     * Name of the field
     */
    name: string;
    /**
     * Value to assign to the field
     */
    value: string;
}

export interface OpenpipelineSystemEventsEndpointsEndpointProcessorsProcessorFieldsRemoveProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: string[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSystemEventsEndpointsEndpointProcessorsProcessorFieldsRenameProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to rename on the record
     */
    fields: outputs.OpenpipelineSystemEventsEndpointsEndpointProcessorsProcessorFieldsRenameProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSystemEventsEndpointsEndpointProcessorsProcessorFieldsRenameProcessorField {
    /**
     * The field to rename
     */
    fromName: string;
    /**
     * The new field name
     */
    toName: string;
}

export interface OpenpipelineSystemEventsEndpointsEndpointProcessorsProcessorTechnologyProcessor {
    /**
     * Optional customer-defined matching condition, that is used in place of the main technology matcher.
     */
    customMatcher?: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * The reference identifier to a specific technology. This technology is applied on the record.
     */
    technologyId: string;
}

export interface OpenpipelineSystemEventsEndpointsEndpointRouting {
    /**
     * Pipeline ID of the static routing
     */
    pipelineId?: string;
    /**
     * Type of routing, static or dynamic
     */
    type: string;
}

export interface OpenpipelineSystemEventsPipelines {
    /**
     * Definition of a single pipeline
     */
    pipelines?: outputs.OpenpipelineSystemEventsPipelinesPipeline[];
}

export interface OpenpipelineSystemEventsPipelinesPipeline {
    /**
     * Cost Allocation stage configuration of the pipeline
     */
    costAllocation?: outputs.OpenpipelineSystemEventsPipelinesPipelineCostAllocation;
    /**
     * Data extraction stage configuration of the pipeline
     */
    dataExtraction?: outputs.OpenpipelineSystemEventsPipelinesPipelineDataExtraction;
    /**
     * Display name of the pipeline
     */
    displayName: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the pipeline
     */
    id: string;
    /**
     * Metric extraction stage configuration of the pipeline
     */
    metricExtraction?: outputs.OpenpipelineSystemEventsPipelinesPipelineMetricExtraction;
    /**
     * Processing stage configuration of the pipeline
     */
    processing?: outputs.OpenpipelineSystemEventsPipelinesPipelineProcessing;
    /**
     * Product Allocation stage configuration of the pipeline
     */
    productAllocation?: outputs.OpenpipelineSystemEventsPipelinesPipelineProductAllocation;
    /**
     * Security context stage configuration of the pipeline
     */
    securityContext?: outputs.OpenpipelineSystemEventsPipelinesPipelineSecurityContext;
    /**
     * Data extraction stage configuration of the pipeline
     */
    storage?: outputs.OpenpipelineSystemEventsPipelinesPipelineStorage;
}

export interface OpenpipelineSystemEventsPipelinesPipelineCostAllocation {
    /**
     * Cost allocation processor to use
     */
    processors?: outputs.OpenpipelineSystemEventsPipelinesPipelineCostAllocationProcessor[];
}

export interface OpenpipelineSystemEventsPipelinesPipelineCostAllocationProcessor {
    /**
     * Processor to write the occurrences as a cost allocation
     */
    costAllocationProcessor?: outputs.OpenpipelineSystemEventsPipelinesPipelineCostAllocationProcessorCostAllocationProcessor;
}

export interface OpenpipelineSystemEventsPipelinesPipelineCostAllocationProcessorCostAllocationProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Strategy to assign a value
     */
    value: outputs.OpenpipelineSystemEventsPipelinesPipelineCostAllocationProcessorCostAllocationProcessorValue;
}

export interface OpenpipelineSystemEventsPipelinesPipelineCostAllocationProcessorCostAllocationProcessorValue {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineSystemEventsPipelinesPipelineDataExtraction {
    /**
     * Groups all processors applicable for the DataExtractionStage.
     * Applicable processors are DavisEventExtractionProcessor and BizeventExtractionProcessor.
     */
    processors?: outputs.OpenpipelineSystemEventsPipelinesPipelineDataExtractionProcessor[];
}

export interface OpenpipelineSystemEventsPipelinesPipelineDataExtractionProcessor {
    /**
     * Processor to extract a Azure log.
     */
    azureLogForwardingProcessor?: outputs.OpenpipelineSystemEventsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessor;
    /**
     * Processor to extract a bizevent.
     * Fields event.type and event.provider can only be assigned to a constant or field value.
     * A multi-value constant is not supported for those fields.
     */
    bizeventExtractionProcessor?: outputs.OpenpipelineSystemEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessor;
    /**
     * Processor to apply a DQL script
     */
    davisEventExtractionProcessor?: outputs.OpenpipelineSystemEventsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessor;
    /**
     * Processor to extract a security event.
     */
    securityEventExtractionProcessor?: outputs.OpenpipelineSystemEventsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessor;
}

export interface OpenpipelineSystemEventsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Definition of the field extraction
     */
    fieldExtraction?: outputs.OpenpipelineSystemEventsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessorFieldExtraction;
    forwarderConfigId: string;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSystemEventsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessorFieldExtraction {
    /**
     * Unique fields to include/exclude in the extracted record
     */
    fields?: string[];
    /**
     * Defines how the fields of the source record should be extracted
     */
    semantic: string;
}

export interface OpenpipelineSystemEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Strategy to assign a value
     */
    eventProvider: outputs.OpenpipelineSystemEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventProvider;
    /**
     * Strategy to assign a value
     */
    eventType: outputs.OpenpipelineSystemEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventType;
    /**
     * Definition of the field extraction
     */
    fieldExtraction?: outputs.OpenpipelineSystemEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorFieldExtraction;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSystemEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventProvider {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineSystemEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventType {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineSystemEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorFieldExtraction {
    /**
     * Unique fields to include/exclude in the extracted record
     */
    fields?: string[];
    /**
     * Defines how the fields of the source record should be extracted
     */
    semantic: string;
}

export interface OpenpipelineSystemEventsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * List of properties for the extracted davis event
     */
    properties: outputs.OpenpipelineSystemEventsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessorProperty[];
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSystemEventsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessorProperty {
    /**
     * The key to set on the davis event
     */
    key: string;
    /**
     * The value assigned to the key
     */
    value: string;
}

export interface OpenpipelineSystemEventsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Definition of the field extraction
     */
    fieldExtraction?: outputs.OpenpipelineSystemEventsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessorFieldExtraction;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSystemEventsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessorFieldExtraction {
    /**
     * Unique fields to include/exclude in the extracted record
     */
    fields?: string[];
    /**
     * Defines how the fields of the source record should be extracted
     */
    semantic: string;
}

export interface OpenpipelineSystemEventsPipelinesPipelineMetricExtraction {
    /**
     * Data extraction processor to use
     */
    processors?: outputs.OpenpipelineSystemEventsPipelinesPipelineMetricExtractionProcessor[];
}

export interface OpenpipelineSystemEventsPipelinesPipelineMetricExtractionProcessor {
    /**
     * Processor to write the occurrences as a metric
     */
    counterMetricExtractionProcessor?: outputs.OpenpipelineSystemEventsPipelinesPipelineMetricExtractionProcessorCounterMetricExtractionProcessor;
    /**
     * Processor to write the occurrences as a metric
     */
    samplingAwareCounterMetricExtractionProcessor?: outputs.OpenpipelineSystemEventsPipelinesPipelineMetricExtractionProcessorSamplingAwareCounterMetricExtractionProcessor;
    /**
     * Processor to extract a value from a field as a metric.
     */
    samplingAwareValueMetricExtractionProcessor?: outputs.OpenpipelineSystemEventsPipelinesPipelineMetricExtractionProcessorSamplingAwareValueMetricExtractionProcessor;
    /**
     * Processor to extract a value from a field as a metric
     */
    valueMetricExtractionProcessor?: outputs.OpenpipelineSystemEventsPipelinesPipelineMetricExtractionProcessorValueMetricExtractionProcessor;
}

export interface OpenpipelineSystemEventsPipelinesPipelineMetricExtractionProcessorCounterMetricExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of dimensions to add to the metric
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSystemEventsPipelinesPipelineMetricExtractionProcessorSamplingAwareCounterMetricExtractionProcessor {
    /**
     * Indicates whether aggregation is considered for metric extraction
     */
    aggregation?: string;
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of unique dimensions to add to the metric.
     * Dimensions are represented in the format '({dimensionName}=)?{sourceField}'.
     * '{dimensionName}' is optional if {sourceField} represents a valid metric dimension name.
     * '{sourceField}' has to represent a valid DQL field accessor and it can access a nested field (for example, 'field[field2][0]')
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Indicates whether sampling is considered for metric extraction. Possible values: 'DISABLED', 'ENABLED'
     */
    sampling?: string;
}

export interface OpenpipelineSystemEventsPipelinesPipelineMetricExtractionProcessorSamplingAwareValueMetricExtractionProcessor {
    /**
     * Indicates whether aggregation is considered for metric extraction. Possible values: 'DISABLED', 'ENABLED'
     */
    aggregation?: string;
    /**
     * The default value to use if the given field value could not be extracted. String value must be a number
     */
    defaultValue?: string;
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of unique dimensions to add to the metric.
     * Dimensions are represented in the format '({dimensionName}=)?{sourceField}'.
     * '{dimensionName}' is optional if {sourceField} represents a valid metric dimension name.
     * '{sourceField}' has to represent a valid DQL field accessor and it can access a nested field (for example, 'field[field2][0]')
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * The field from which to extract the value for the metric, or 'null' for a duration measurement
     */
    field?: string;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Indicates whether the metric value should be the specified field or duration. Possible values: 'DURATION', 'FIELD'
     */
    measurement: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Indicates whether sampling is considered for metric extraction. Possible values: 'DISABLED', 'ENABLED'
     */
    sampling?: string;
}

export interface OpenpipelineSystemEventsPipelinesPipelineMetricExtractionProcessorValueMetricExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of dimensions to add to the metric
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * The field to extract the value for the metric
     */
    field: string;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSystemEventsPipelinesPipelineProcessing {
    /**
     * Groups all processors applicable for the ProcessingStage.
     * Applicable processors are DqlProcessor, FieldsAddProcessor, FieldsRemoveProcessor, FieldsRenameProcessor, TechnologyProcessor and DropProcessor.
     */
    processors?: outputs.OpenpipelineSystemEventsPipelinesPipelineProcessingProcessor[];
}

export interface OpenpipelineSystemEventsPipelinesPipelineProcessingProcessor {
    /**
     * Processor to apply a DQL script
     */
    dqlProcessor?: outputs.OpenpipelineSystemEventsPipelinesPipelineProcessingProcessorDqlProcessor;
    /**
     * Processor to drop the record either during the processing stage or at the endpoint
     */
    dropProcessor?: outputs.OpenpipelineSystemEventsPipelinesPipelineProcessingProcessorDropProcessor;
    /**
     * Processor to add fields
     */
    fieldsAddProcessor?: outputs.OpenpipelineSystemEventsPipelinesPipelineProcessingProcessorFieldsAddProcessor;
    /**
     * Processor to remove fields
     */
    fieldsRemoveProcessor?: outputs.OpenpipelineSystemEventsPipelinesPipelineProcessingProcessorFieldsRemoveProcessor;
    /**
     * Processor to rename fields
     */
    fieldsRenameProcessor?: outputs.OpenpipelineSystemEventsPipelinesPipelineProcessingProcessorFieldsRenameProcessor;
    /**
     * Processor to apply a technology processors
     */
    technologyProcessor?: outputs.OpenpipelineSystemEventsPipelinesPipelineProcessingProcessorTechnologyProcessor;
}

export interface OpenpipelineSystemEventsPipelinesPipelineProcessingProcessorDqlProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * The DQL script to apply on the record
     */
    dqlScript: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSystemEventsPipelinesPipelineProcessingProcessorDropProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSystemEventsPipelinesPipelineProcessingProcessorFieldsAddProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: outputs.OpenpipelineSystemEventsPipelinesPipelineProcessingProcessorFieldsAddProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSystemEventsPipelinesPipelineProcessingProcessorFieldsAddProcessorField {
    /**
     * Name of the field
     */
    name: string;
    /**
     * Value to assign to the field
     */
    value: string;
}

export interface OpenpipelineSystemEventsPipelinesPipelineProcessingProcessorFieldsRemoveProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: string[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSystemEventsPipelinesPipelineProcessingProcessorFieldsRenameProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to rename on the record
     */
    fields: outputs.OpenpipelineSystemEventsPipelinesPipelineProcessingProcessorFieldsRenameProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSystemEventsPipelinesPipelineProcessingProcessorFieldsRenameProcessorField {
    /**
     * The field to rename
     */
    fromName: string;
    /**
     * The new field name
     */
    toName: string;
}

export interface OpenpipelineSystemEventsPipelinesPipelineProcessingProcessorTechnologyProcessor {
    /**
     * Optional customer-defined matching condition, that is used in place of the main technology matcher.
     */
    customMatcher?: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * The reference identifier to a specific technology. This technology is applied on the record.
     */
    technologyId: string;
}

export interface OpenpipelineSystemEventsPipelinesPipelineProductAllocation {
    /**
     * Product allocation processor to use
     */
    processors?: outputs.OpenpipelineSystemEventsPipelinesPipelineProductAllocationProcessor[];
}

export interface OpenpipelineSystemEventsPipelinesPipelineProductAllocationProcessor {
    /**
     * Processor to write the occurrences as a product allocation
     */
    productAllocationProcessor?: outputs.OpenpipelineSystemEventsPipelinesPipelineProductAllocationProcessorProductAllocationProcessor;
}

export interface OpenpipelineSystemEventsPipelinesPipelineProductAllocationProcessorProductAllocationProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Strategy to assign a value
     */
    value: outputs.OpenpipelineSystemEventsPipelinesPipelineProductAllocationProcessorProductAllocationProcessorValue;
}

export interface OpenpipelineSystemEventsPipelinesPipelineProductAllocationProcessorProductAllocationProcessorValue {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineSystemEventsPipelinesPipelineSecurityContext {
    /**
     * Groups all processors applicable for the SecurityContextStage.
     * Applicable processor is SecurityContextProcessor.
     */
    processors?: outputs.OpenpipelineSystemEventsPipelinesPipelineSecurityContextProcessor[];
}

export interface OpenpipelineSystemEventsPipelinesPipelineSecurityContextProcessor {
    /**
     * Processor to set the security context field
     */
    securityContextProcessor?: outputs.OpenpipelineSystemEventsPipelinesPipelineSecurityContextProcessorSecurityContextProcessor;
}

export interface OpenpipelineSystemEventsPipelinesPipelineSecurityContextProcessorSecurityContextProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Strategy to assign a value
     */
    value: outputs.OpenpipelineSystemEventsPipelinesPipelineSecurityContextProcessorSecurityContextProcessorValue;
}

export interface OpenpipelineSystemEventsPipelinesPipelineSecurityContextProcessorSecurityContextProcessorValue {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineSystemEventsPipelinesPipelineStorage {
    /**
     * Default bucket assigned to records which do not match any other storage processor
     */
    catchAllBucketName?: string;
    /**
     * Groups all processors applicable for the StorageStage.
     * Applicable processors are BucketAssignmentProcessor and NoStorageProcessor.
     */
    processors?: outputs.OpenpipelineSystemEventsPipelinesPipelineStorageProcessor[];
}

export interface OpenpipelineSystemEventsPipelinesPipelineStorageProcessor {
    /**
     * Processor to assign a bucket
     */
    bucketAssignmentProcessor?: outputs.OpenpipelineSystemEventsPipelinesPipelineStorageProcessorBucketAssignmentProcessor;
    /**
     * Processor to skip storage assignment
     */
    noStorageProcessor?: outputs.OpenpipelineSystemEventsPipelinesPipelineStorageProcessorNoStorageProcessor;
}

export interface OpenpipelineSystemEventsPipelinesPipelineStorageProcessorBucketAssignmentProcessor {
    /**
     * Bucket that is assigned when the record is matched
     */
    bucketName: string;
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSystemEventsPipelinesPipelineStorageProcessorNoStorageProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineSystemEventsRouting {
    /**
     * Dynamic routing entry
     */
    entries?: outputs.OpenpipelineSystemEventsRoutingEntry[];
}

export interface OpenpipelineSystemEventsRoutingEntry {
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Unique note describing the dynamic route
     */
    note: string;
    /**
     * Identifier of the pipeline the record is routed into
     */
    pipelineId: string;
}

export interface OpenpipelineUserEventsEndpoints {
    /**
     * Definition of a single ingest source
     */
    endpoints?: outputs.OpenpipelineUserEventsEndpointsEndpoint[];
}

export interface OpenpipelineUserEventsEndpointsEndpoint {
    /**
     * The default bucket assigned to records for the ingest source
     */
    defaultBucket?: string;
    /**
     * Display name of the ingest source
     */
    displayName: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * The pre-processing done in the ingest source
     */
    processors?: outputs.OpenpipelineUserEventsEndpointsEndpointProcessors;
    /**
     * Routing strategy, either dynamic or static
     */
    routing: outputs.OpenpipelineUserEventsEndpointsEndpointRouting;
    /**
     * The segment of the ingest source, which is applied to the base path. Must be unique within a configuration."
     */
    segment: string;
}

export interface OpenpipelineUserEventsEndpointsEndpointProcessors {
    /**
     * Groups all processors applicable for processing in the EndpointDefinition.
     * Applicable processors are DqlProcessor, FieldsAddProcessor, FieldsRemoveProcessor, FieldsRenameProcessor and DropProcessor.
     */
    processors?: outputs.OpenpipelineUserEventsEndpointsEndpointProcessorsProcessor[];
}

export interface OpenpipelineUserEventsEndpointsEndpointProcessorsProcessor {
    /**
     * Processor to apply a DQL script
     */
    dqlProcessor?: outputs.OpenpipelineUserEventsEndpointsEndpointProcessorsProcessorDqlProcessor;
    /**
     * Processor to drop the record either during the processing stage or at the endpoint
     */
    dropProcessor?: outputs.OpenpipelineUserEventsEndpointsEndpointProcessorsProcessorDropProcessor;
    /**
     * Processor to add fields
     */
    fieldsAddProcessor?: outputs.OpenpipelineUserEventsEndpointsEndpointProcessorsProcessorFieldsAddProcessor;
    /**
     * Processor to remove fields
     */
    fieldsRemoveProcessor?: outputs.OpenpipelineUserEventsEndpointsEndpointProcessorsProcessorFieldsRemoveProcessor;
    /**
     * Processor to rename fields
     */
    fieldsRenameProcessor?: outputs.OpenpipelineUserEventsEndpointsEndpointProcessorsProcessorFieldsRenameProcessor;
    /**
     * Processor to apply a technology processors.
     */
    technologyProcessor?: outputs.OpenpipelineUserEventsEndpointsEndpointProcessorsProcessorTechnologyProcessor;
}

export interface OpenpipelineUserEventsEndpointsEndpointProcessorsProcessorDqlProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * The DQL script to apply on the record
     */
    dqlScript: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineUserEventsEndpointsEndpointProcessorsProcessorDropProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineUserEventsEndpointsEndpointProcessorsProcessorFieldsAddProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: outputs.OpenpipelineUserEventsEndpointsEndpointProcessorsProcessorFieldsAddProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineUserEventsEndpointsEndpointProcessorsProcessorFieldsAddProcessorField {
    /**
     * Name of the field
     */
    name: string;
    /**
     * Value to assign to the field
     */
    value: string;
}

export interface OpenpipelineUserEventsEndpointsEndpointProcessorsProcessorFieldsRemoveProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: string[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineUserEventsEndpointsEndpointProcessorsProcessorFieldsRenameProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to rename on the record
     */
    fields: outputs.OpenpipelineUserEventsEndpointsEndpointProcessorsProcessorFieldsRenameProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineUserEventsEndpointsEndpointProcessorsProcessorFieldsRenameProcessorField {
    /**
     * The field to rename
     */
    fromName: string;
    /**
     * The new field name
     */
    toName: string;
}

export interface OpenpipelineUserEventsEndpointsEndpointProcessorsProcessorTechnologyProcessor {
    /**
     * Optional customer-defined matching condition, that is used in place of the main technology matcher.
     */
    customMatcher?: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * The reference identifier to a specific technology. This technology is applied on the record.
     */
    technologyId: string;
}

export interface OpenpipelineUserEventsEndpointsEndpointRouting {
    /**
     * Pipeline ID of the static routing
     */
    pipelineId?: string;
    /**
     * Type of routing, static or dynamic
     */
    type: string;
}

export interface OpenpipelineUserEventsPipelines {
    /**
     * Definition of a single pipeline
     */
    pipelines?: outputs.OpenpipelineUserEventsPipelinesPipeline[];
}

export interface OpenpipelineUserEventsPipelinesPipeline {
    /**
     * Cost Allocation stage configuration of the pipeline
     */
    costAllocation?: outputs.OpenpipelineUserEventsPipelinesPipelineCostAllocation;
    /**
     * Data extraction stage configuration of the pipeline
     */
    dataExtraction?: outputs.OpenpipelineUserEventsPipelinesPipelineDataExtraction;
    /**
     * Display name of the pipeline
     */
    displayName: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the pipeline
     */
    id: string;
    /**
     * Metric extraction stage configuration of the pipeline
     */
    metricExtraction?: outputs.OpenpipelineUserEventsPipelinesPipelineMetricExtraction;
    /**
     * Processing stage configuration of the pipeline
     */
    processing?: outputs.OpenpipelineUserEventsPipelinesPipelineProcessing;
    /**
     * Product Allocation stage configuration of the pipeline
     */
    productAllocation?: outputs.OpenpipelineUserEventsPipelinesPipelineProductAllocation;
    /**
     * Security context stage configuration of the pipeline
     */
    securityContext?: outputs.OpenpipelineUserEventsPipelinesPipelineSecurityContext;
    /**
     * Data extraction stage configuration of the pipeline
     */
    storage?: outputs.OpenpipelineUserEventsPipelinesPipelineStorage;
}

export interface OpenpipelineUserEventsPipelinesPipelineCostAllocation {
    /**
     * Cost allocation processor to use
     */
    processors?: outputs.OpenpipelineUserEventsPipelinesPipelineCostAllocationProcessor[];
}

export interface OpenpipelineUserEventsPipelinesPipelineCostAllocationProcessor {
    /**
     * Processor to write the occurrences as a cost allocation
     */
    costAllocationProcessor?: outputs.OpenpipelineUserEventsPipelinesPipelineCostAllocationProcessorCostAllocationProcessor;
}

export interface OpenpipelineUserEventsPipelinesPipelineCostAllocationProcessorCostAllocationProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Strategy to assign a value
     */
    value: outputs.OpenpipelineUserEventsPipelinesPipelineCostAllocationProcessorCostAllocationProcessorValue;
}

export interface OpenpipelineUserEventsPipelinesPipelineCostAllocationProcessorCostAllocationProcessorValue {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineUserEventsPipelinesPipelineDataExtraction {
    /**
     * Groups all processors applicable for the DataExtractionStage.
     * Applicable processors are DavisEventExtractionProcessor and BizeventExtractionProcessor.
     */
    processors?: outputs.OpenpipelineUserEventsPipelinesPipelineDataExtractionProcessor[];
}

export interface OpenpipelineUserEventsPipelinesPipelineDataExtractionProcessor {
    /**
     * Processor to extract a Azure log.
     */
    azureLogForwardingProcessor?: outputs.OpenpipelineUserEventsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessor;
    /**
     * Processor to extract a bizevent.
     * Fields event.type and event.provider can only be assigned to a constant or field value.
     * A multi-value constant is not supported for those fields.
     */
    bizeventExtractionProcessor?: outputs.OpenpipelineUserEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessor;
    /**
     * Processor to apply a DQL script
     */
    davisEventExtractionProcessor?: outputs.OpenpipelineUserEventsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessor;
    /**
     * Processor to extract a security event.
     */
    securityEventExtractionProcessor?: outputs.OpenpipelineUserEventsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessor;
}

export interface OpenpipelineUserEventsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Definition of the field extraction
     */
    fieldExtraction?: outputs.OpenpipelineUserEventsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessorFieldExtraction;
    forwarderConfigId: string;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineUserEventsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessorFieldExtraction {
    /**
     * Unique fields to include/exclude in the extracted record
     */
    fields?: string[];
    /**
     * Defines how the fields of the source record should be extracted
     */
    semantic: string;
}

export interface OpenpipelineUserEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Strategy to assign a value
     */
    eventProvider: outputs.OpenpipelineUserEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventProvider;
    /**
     * Strategy to assign a value
     */
    eventType: outputs.OpenpipelineUserEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventType;
    /**
     * Definition of the field extraction
     */
    fieldExtraction?: outputs.OpenpipelineUserEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorFieldExtraction;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineUserEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventProvider {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineUserEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventType {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineUserEventsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorFieldExtraction {
    /**
     * Unique fields to include/exclude in the extracted record
     */
    fields?: string[];
    /**
     * Defines how the fields of the source record should be extracted
     */
    semantic: string;
}

export interface OpenpipelineUserEventsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * List of properties for the extracted davis event
     */
    properties: outputs.OpenpipelineUserEventsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessorProperty[];
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineUserEventsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessorProperty {
    /**
     * The key to set on the davis event
     */
    key: string;
    /**
     * The value assigned to the key
     */
    value: string;
}

export interface OpenpipelineUserEventsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Definition of the field extraction
     */
    fieldExtraction?: outputs.OpenpipelineUserEventsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessorFieldExtraction;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineUserEventsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessorFieldExtraction {
    /**
     * Unique fields to include/exclude in the extracted record
     */
    fields?: string[];
    /**
     * Defines how the fields of the source record should be extracted
     */
    semantic: string;
}

export interface OpenpipelineUserEventsPipelinesPipelineMetricExtraction {
    /**
     * Data extraction processor to use
     */
    processors?: outputs.OpenpipelineUserEventsPipelinesPipelineMetricExtractionProcessor[];
}

export interface OpenpipelineUserEventsPipelinesPipelineMetricExtractionProcessor {
    /**
     * Processor to write the occurrences as a metric
     */
    counterMetricExtractionProcessor?: outputs.OpenpipelineUserEventsPipelinesPipelineMetricExtractionProcessorCounterMetricExtractionProcessor;
    /**
     * Processor to write the occurrences as a metric
     */
    samplingAwareCounterMetricExtractionProcessor?: outputs.OpenpipelineUserEventsPipelinesPipelineMetricExtractionProcessorSamplingAwareCounterMetricExtractionProcessor;
    /**
     * Processor to extract a value from a field as a metric.
     */
    samplingAwareValueMetricExtractionProcessor?: outputs.OpenpipelineUserEventsPipelinesPipelineMetricExtractionProcessorSamplingAwareValueMetricExtractionProcessor;
    /**
     * Processor to extract a value from a field as a metric
     */
    valueMetricExtractionProcessor?: outputs.OpenpipelineUserEventsPipelinesPipelineMetricExtractionProcessorValueMetricExtractionProcessor;
}

export interface OpenpipelineUserEventsPipelinesPipelineMetricExtractionProcessorCounterMetricExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of dimensions to add to the metric
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineUserEventsPipelinesPipelineMetricExtractionProcessorSamplingAwareCounterMetricExtractionProcessor {
    /**
     * Indicates whether aggregation is considered for metric extraction
     */
    aggregation?: string;
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of unique dimensions to add to the metric.
     * Dimensions are represented in the format '({dimensionName}=)?{sourceField}'.
     * '{dimensionName}' is optional if {sourceField} represents a valid metric dimension name.
     * '{sourceField}' has to represent a valid DQL field accessor and it can access a nested field (for example, 'field[field2][0]')
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Indicates whether sampling is considered for metric extraction. Possible values: 'DISABLED', 'ENABLED'
     */
    sampling?: string;
}

export interface OpenpipelineUserEventsPipelinesPipelineMetricExtractionProcessorSamplingAwareValueMetricExtractionProcessor {
    /**
     * Indicates whether aggregation is considered for metric extraction. Possible values: 'DISABLED', 'ENABLED'
     */
    aggregation?: string;
    /**
     * The default value to use if the given field value could not be extracted. String value must be a number
     */
    defaultValue?: string;
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of unique dimensions to add to the metric.
     * Dimensions are represented in the format '({dimensionName}=)?{sourceField}'.
     * '{dimensionName}' is optional if {sourceField} represents a valid metric dimension name.
     * '{sourceField}' has to represent a valid DQL field accessor and it can access a nested field (for example, 'field[field2][0]')
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * The field from which to extract the value for the metric, or 'null' for a duration measurement
     */
    field?: string;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Indicates whether the metric value should be the specified field or duration. Possible values: 'DURATION', 'FIELD'
     */
    measurement: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Indicates whether sampling is considered for metric extraction. Possible values: 'DISABLED', 'ENABLED'
     */
    sampling?: string;
}

export interface OpenpipelineUserEventsPipelinesPipelineMetricExtractionProcessorValueMetricExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of dimensions to add to the metric
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * The field to extract the value for the metric
     */
    field: string;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineUserEventsPipelinesPipelineProcessing {
    /**
     * Groups all processors applicable for the ProcessingStage.
     * Applicable processors are DqlProcessor, FieldsAddProcessor, FieldsRemoveProcessor, FieldsRenameProcessor, TechnologyProcessor and DropProcessor.
     */
    processors?: outputs.OpenpipelineUserEventsPipelinesPipelineProcessingProcessor[];
}

export interface OpenpipelineUserEventsPipelinesPipelineProcessingProcessor {
    /**
     * Processor to apply a DQL script
     */
    dqlProcessor?: outputs.OpenpipelineUserEventsPipelinesPipelineProcessingProcessorDqlProcessor;
    /**
     * Processor to drop the record either during the processing stage or at the endpoint
     */
    dropProcessor?: outputs.OpenpipelineUserEventsPipelinesPipelineProcessingProcessorDropProcessor;
    /**
     * Processor to add fields
     */
    fieldsAddProcessor?: outputs.OpenpipelineUserEventsPipelinesPipelineProcessingProcessorFieldsAddProcessor;
    /**
     * Processor to remove fields
     */
    fieldsRemoveProcessor?: outputs.OpenpipelineUserEventsPipelinesPipelineProcessingProcessorFieldsRemoveProcessor;
    /**
     * Processor to rename fields
     */
    fieldsRenameProcessor?: outputs.OpenpipelineUserEventsPipelinesPipelineProcessingProcessorFieldsRenameProcessor;
    /**
     * Processor to apply a technology processors
     */
    technologyProcessor?: outputs.OpenpipelineUserEventsPipelinesPipelineProcessingProcessorTechnologyProcessor;
}

export interface OpenpipelineUserEventsPipelinesPipelineProcessingProcessorDqlProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * The DQL script to apply on the record
     */
    dqlScript: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineUserEventsPipelinesPipelineProcessingProcessorDropProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineUserEventsPipelinesPipelineProcessingProcessorFieldsAddProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: outputs.OpenpipelineUserEventsPipelinesPipelineProcessingProcessorFieldsAddProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineUserEventsPipelinesPipelineProcessingProcessorFieldsAddProcessorField {
    /**
     * Name of the field
     */
    name: string;
    /**
     * Value to assign to the field
     */
    value: string;
}

export interface OpenpipelineUserEventsPipelinesPipelineProcessingProcessorFieldsRemoveProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: string[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineUserEventsPipelinesPipelineProcessingProcessorFieldsRenameProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to rename on the record
     */
    fields: outputs.OpenpipelineUserEventsPipelinesPipelineProcessingProcessorFieldsRenameProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineUserEventsPipelinesPipelineProcessingProcessorFieldsRenameProcessorField {
    /**
     * The field to rename
     */
    fromName: string;
    /**
     * The new field name
     */
    toName: string;
}

export interface OpenpipelineUserEventsPipelinesPipelineProcessingProcessorTechnologyProcessor {
    /**
     * Optional customer-defined matching condition, that is used in place of the main technology matcher.
     */
    customMatcher?: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * The reference identifier to a specific technology. This technology is applied on the record.
     */
    technologyId: string;
}

export interface OpenpipelineUserEventsPipelinesPipelineProductAllocation {
    /**
     * Product allocation processor to use
     */
    processors?: outputs.OpenpipelineUserEventsPipelinesPipelineProductAllocationProcessor[];
}

export interface OpenpipelineUserEventsPipelinesPipelineProductAllocationProcessor {
    /**
     * Processor to write the occurrences as a product allocation
     */
    productAllocationProcessor?: outputs.OpenpipelineUserEventsPipelinesPipelineProductAllocationProcessorProductAllocationProcessor;
}

export interface OpenpipelineUserEventsPipelinesPipelineProductAllocationProcessorProductAllocationProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Strategy to assign a value
     */
    value: outputs.OpenpipelineUserEventsPipelinesPipelineProductAllocationProcessorProductAllocationProcessorValue;
}

export interface OpenpipelineUserEventsPipelinesPipelineProductAllocationProcessorProductAllocationProcessorValue {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineUserEventsPipelinesPipelineSecurityContext {
    /**
     * Groups all processors applicable for the SecurityContextStage.
     * Applicable processor is SecurityContextProcessor.
     */
    processors?: outputs.OpenpipelineUserEventsPipelinesPipelineSecurityContextProcessor[];
}

export interface OpenpipelineUserEventsPipelinesPipelineSecurityContextProcessor {
    /**
     * Processor to set the security context field
     */
    securityContextProcessor?: outputs.OpenpipelineUserEventsPipelinesPipelineSecurityContextProcessorSecurityContextProcessor;
}

export interface OpenpipelineUserEventsPipelinesPipelineSecurityContextProcessorSecurityContextProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Strategy to assign a value
     */
    value: outputs.OpenpipelineUserEventsPipelinesPipelineSecurityContextProcessorSecurityContextProcessorValue;
}

export interface OpenpipelineUserEventsPipelinesPipelineSecurityContextProcessorSecurityContextProcessorValue {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineUserEventsPipelinesPipelineStorage {
    /**
     * Default bucket assigned to records which do not match any other storage processor
     */
    catchAllBucketName?: string;
    /**
     * Groups all processors applicable for the StorageStage.
     * Applicable processors are BucketAssignmentProcessor and NoStorageProcessor.
     */
    processors?: outputs.OpenpipelineUserEventsPipelinesPipelineStorageProcessor[];
}

export interface OpenpipelineUserEventsPipelinesPipelineStorageProcessor {
    /**
     * Processor to assign a bucket
     */
    bucketAssignmentProcessor?: outputs.OpenpipelineUserEventsPipelinesPipelineStorageProcessorBucketAssignmentProcessor;
    /**
     * Processor to skip storage assignment
     */
    noStorageProcessor?: outputs.OpenpipelineUserEventsPipelinesPipelineStorageProcessorNoStorageProcessor;
}

export interface OpenpipelineUserEventsPipelinesPipelineStorageProcessorBucketAssignmentProcessor {
    /**
     * Bucket that is assigned when the record is matched
     */
    bucketName: string;
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineUserEventsPipelinesPipelineStorageProcessorNoStorageProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineUserEventsRouting {
    /**
     * Dynamic routing entry
     */
    entries?: outputs.OpenpipelineUserEventsRoutingEntry[];
}

export interface OpenpipelineUserEventsRoutingEntry {
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Unique note describing the dynamic route
     */
    note: string;
    /**
     * Identifier of the pipeline the record is routed into
     */
    pipelineId: string;
}

export interface OpenpipelineUserSessionsEndpoints {
    /**
     * Definition of a single ingest source
     */
    endpoints?: outputs.OpenpipelineUserSessionsEndpointsEndpoint[];
}

export interface OpenpipelineUserSessionsEndpointsEndpoint {
    /**
     * The default bucket assigned to records for the ingest source
     */
    defaultBucket?: string;
    /**
     * Display name of the ingest source
     */
    displayName: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * The pre-processing done in the ingest source
     */
    processors?: outputs.OpenpipelineUserSessionsEndpointsEndpointProcessors;
    /**
     * Routing strategy, either dynamic or static
     */
    routing: outputs.OpenpipelineUserSessionsEndpointsEndpointRouting;
    /**
     * The segment of the ingest source, which is applied to the base path. Must be unique within a configuration."
     */
    segment: string;
}

export interface OpenpipelineUserSessionsEndpointsEndpointProcessors {
    /**
     * Groups all processors applicable for processing in the EndpointDefinition.
     * Applicable processors are DqlProcessor, FieldsAddProcessor, FieldsRemoveProcessor, FieldsRenameProcessor and DropProcessor.
     */
    processors?: outputs.OpenpipelineUserSessionsEndpointsEndpointProcessorsProcessor[];
}

export interface OpenpipelineUserSessionsEndpointsEndpointProcessorsProcessor {
    /**
     * Processor to apply a DQL script
     */
    dqlProcessor?: outputs.OpenpipelineUserSessionsEndpointsEndpointProcessorsProcessorDqlProcessor;
    /**
     * Processor to drop the record either during the processing stage or at the endpoint
     */
    dropProcessor?: outputs.OpenpipelineUserSessionsEndpointsEndpointProcessorsProcessorDropProcessor;
    /**
     * Processor to add fields
     */
    fieldsAddProcessor?: outputs.OpenpipelineUserSessionsEndpointsEndpointProcessorsProcessorFieldsAddProcessor;
    /**
     * Processor to remove fields
     */
    fieldsRemoveProcessor?: outputs.OpenpipelineUserSessionsEndpointsEndpointProcessorsProcessorFieldsRemoveProcessor;
    /**
     * Processor to rename fields
     */
    fieldsRenameProcessor?: outputs.OpenpipelineUserSessionsEndpointsEndpointProcessorsProcessorFieldsRenameProcessor;
    /**
     * Processor to apply a technology processors.
     */
    technologyProcessor?: outputs.OpenpipelineUserSessionsEndpointsEndpointProcessorsProcessorTechnologyProcessor;
}

export interface OpenpipelineUserSessionsEndpointsEndpointProcessorsProcessorDqlProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * The DQL script to apply on the record
     */
    dqlScript: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineUserSessionsEndpointsEndpointProcessorsProcessorDropProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineUserSessionsEndpointsEndpointProcessorsProcessorFieldsAddProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: outputs.OpenpipelineUserSessionsEndpointsEndpointProcessorsProcessorFieldsAddProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineUserSessionsEndpointsEndpointProcessorsProcessorFieldsAddProcessorField {
    /**
     * Name of the field
     */
    name: string;
    /**
     * Value to assign to the field
     */
    value: string;
}

export interface OpenpipelineUserSessionsEndpointsEndpointProcessorsProcessorFieldsRemoveProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: string[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineUserSessionsEndpointsEndpointProcessorsProcessorFieldsRenameProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to rename on the record
     */
    fields: outputs.OpenpipelineUserSessionsEndpointsEndpointProcessorsProcessorFieldsRenameProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineUserSessionsEndpointsEndpointProcessorsProcessorFieldsRenameProcessorField {
    /**
     * The field to rename
     */
    fromName: string;
    /**
     * The new field name
     */
    toName: string;
}

export interface OpenpipelineUserSessionsEndpointsEndpointProcessorsProcessorTechnologyProcessor {
    /**
     * Optional customer-defined matching condition, that is used in place of the main technology matcher.
     */
    customMatcher?: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * The reference identifier to a specific technology. This technology is applied on the record.
     */
    technologyId: string;
}

export interface OpenpipelineUserSessionsEndpointsEndpointRouting {
    /**
     * Pipeline ID of the static routing
     */
    pipelineId?: string;
    /**
     * Type of routing, static or dynamic
     */
    type: string;
}

export interface OpenpipelineUserSessionsPipelines {
    /**
     * Definition of a single pipeline
     */
    pipelines?: outputs.OpenpipelineUserSessionsPipelinesPipeline[];
}

export interface OpenpipelineUserSessionsPipelinesPipeline {
    /**
     * Cost Allocation stage configuration of the pipeline
     */
    costAllocation?: outputs.OpenpipelineUserSessionsPipelinesPipelineCostAllocation;
    /**
     * Data extraction stage configuration of the pipeline
     */
    dataExtraction?: outputs.OpenpipelineUserSessionsPipelinesPipelineDataExtraction;
    /**
     * Display name of the pipeline
     */
    displayName: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the pipeline
     */
    id: string;
    /**
     * Metric extraction stage configuration of the pipeline
     */
    metricExtraction?: outputs.OpenpipelineUserSessionsPipelinesPipelineMetricExtraction;
    /**
     * Processing stage configuration of the pipeline
     */
    processing?: outputs.OpenpipelineUserSessionsPipelinesPipelineProcessing;
    /**
     * Product Allocation stage configuration of the pipeline
     */
    productAllocation?: outputs.OpenpipelineUserSessionsPipelinesPipelineProductAllocation;
    /**
     * Security context stage configuration of the pipeline
     */
    securityContext?: outputs.OpenpipelineUserSessionsPipelinesPipelineSecurityContext;
    /**
     * Data extraction stage configuration of the pipeline
     */
    storage?: outputs.OpenpipelineUserSessionsPipelinesPipelineStorage;
}

export interface OpenpipelineUserSessionsPipelinesPipelineCostAllocation {
    /**
     * Cost allocation processor to use
     */
    processors?: outputs.OpenpipelineUserSessionsPipelinesPipelineCostAllocationProcessor[];
}

export interface OpenpipelineUserSessionsPipelinesPipelineCostAllocationProcessor {
    /**
     * Processor to write the occurrences as a cost allocation
     */
    costAllocationProcessor?: outputs.OpenpipelineUserSessionsPipelinesPipelineCostAllocationProcessorCostAllocationProcessor;
}

export interface OpenpipelineUserSessionsPipelinesPipelineCostAllocationProcessorCostAllocationProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Strategy to assign a value
     */
    value: outputs.OpenpipelineUserSessionsPipelinesPipelineCostAllocationProcessorCostAllocationProcessorValue;
}

export interface OpenpipelineUserSessionsPipelinesPipelineCostAllocationProcessorCostAllocationProcessorValue {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineUserSessionsPipelinesPipelineDataExtraction {
    /**
     * Groups all processors applicable for the DataExtractionStage.
     * Applicable processors are DavisEventExtractionProcessor and BizeventExtractionProcessor.
     */
    processors?: outputs.OpenpipelineUserSessionsPipelinesPipelineDataExtractionProcessor[];
}

export interface OpenpipelineUserSessionsPipelinesPipelineDataExtractionProcessor {
    /**
     * Processor to extract a Azure log.
     */
    azureLogForwardingProcessor?: outputs.OpenpipelineUserSessionsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessor;
    /**
     * Processor to extract a bizevent.
     * Fields event.type and event.provider can only be assigned to a constant or field value.
     * A multi-value constant is not supported for those fields.
     */
    bizeventExtractionProcessor?: outputs.OpenpipelineUserSessionsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessor;
    /**
     * Processor to apply a DQL script
     */
    davisEventExtractionProcessor?: outputs.OpenpipelineUserSessionsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessor;
    /**
     * Processor to extract a security event.
     */
    securityEventExtractionProcessor?: outputs.OpenpipelineUserSessionsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessor;
}

export interface OpenpipelineUserSessionsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Definition of the field extraction
     */
    fieldExtraction?: outputs.OpenpipelineUserSessionsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessorFieldExtraction;
    forwarderConfigId: string;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineUserSessionsPipelinesPipelineDataExtractionProcessorAzureLogForwardingProcessorFieldExtraction {
    /**
     * Unique fields to include/exclude in the extracted record
     */
    fields?: string[];
    /**
     * Defines how the fields of the source record should be extracted
     */
    semantic: string;
}

export interface OpenpipelineUserSessionsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Strategy to assign a value
     */
    eventProvider: outputs.OpenpipelineUserSessionsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventProvider;
    /**
     * Strategy to assign a value
     */
    eventType: outputs.OpenpipelineUserSessionsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventType;
    /**
     * Definition of the field extraction
     */
    fieldExtraction?: outputs.OpenpipelineUserSessionsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorFieldExtraction;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineUserSessionsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventProvider {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineUserSessionsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorEventType {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineUserSessionsPipelinesPipelineDataExtractionProcessorBizeventExtractionProcessorFieldExtraction {
    /**
     * Unique fields to include/exclude in the extracted record
     */
    fields?: string[];
    /**
     * Defines how the fields of the source record should be extracted
     */
    semantic: string;
}

export interface OpenpipelineUserSessionsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * List of properties for the extracted davis event
     */
    properties: outputs.OpenpipelineUserSessionsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessorProperty[];
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineUserSessionsPipelinesPipelineDataExtractionProcessorDavisEventExtractionProcessorProperty {
    /**
     * The key to set on the davis event
     */
    key: string;
    /**
     * The value assigned to the key
     */
    value: string;
}

export interface OpenpipelineUserSessionsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Definition of the field extraction
     */
    fieldExtraction?: outputs.OpenpipelineUserSessionsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessorFieldExtraction;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineUserSessionsPipelinesPipelineDataExtractionProcessorSecurityEventExtractionProcessorFieldExtraction {
    /**
     * Unique fields to include/exclude in the extracted record
     */
    fields?: string[];
    /**
     * Defines how the fields of the source record should be extracted
     */
    semantic: string;
}

export interface OpenpipelineUserSessionsPipelinesPipelineMetricExtraction {
    /**
     * Data extraction processor to use
     */
    processors?: outputs.OpenpipelineUserSessionsPipelinesPipelineMetricExtractionProcessor[];
}

export interface OpenpipelineUserSessionsPipelinesPipelineMetricExtractionProcessor {
    /**
     * Processor to write the occurrences as a metric
     */
    counterMetricExtractionProcessor?: outputs.OpenpipelineUserSessionsPipelinesPipelineMetricExtractionProcessorCounterMetricExtractionProcessor;
    /**
     * Processor to write the occurrences as a metric
     */
    samplingAwareCounterMetricExtractionProcessor?: outputs.OpenpipelineUserSessionsPipelinesPipelineMetricExtractionProcessorSamplingAwareCounterMetricExtractionProcessor;
    /**
     * Processor to extract a value from a field as a metric.
     */
    samplingAwareValueMetricExtractionProcessor?: outputs.OpenpipelineUserSessionsPipelinesPipelineMetricExtractionProcessorSamplingAwareValueMetricExtractionProcessor;
    /**
     * Processor to extract a value from a field as a metric
     */
    valueMetricExtractionProcessor?: outputs.OpenpipelineUserSessionsPipelinesPipelineMetricExtractionProcessorValueMetricExtractionProcessor;
}

export interface OpenpipelineUserSessionsPipelinesPipelineMetricExtractionProcessorCounterMetricExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of dimensions to add to the metric
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineUserSessionsPipelinesPipelineMetricExtractionProcessorSamplingAwareCounterMetricExtractionProcessor {
    /**
     * Indicates whether aggregation is considered for metric extraction
     */
    aggregation?: string;
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of unique dimensions to add to the metric.
     * Dimensions are represented in the format '({dimensionName}=)?{sourceField}'.
     * '{dimensionName}' is optional if {sourceField} represents a valid metric dimension name.
     * '{sourceField}' has to represent a valid DQL field accessor and it can access a nested field (for example, 'field[field2][0]')
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Indicates whether sampling is considered for metric extraction. Possible values: 'DISABLED', 'ENABLED'
     */
    sampling?: string;
}

export interface OpenpipelineUserSessionsPipelinesPipelineMetricExtractionProcessorSamplingAwareValueMetricExtractionProcessor {
    /**
     * Indicates whether aggregation is considered for metric extraction. Possible values: 'DISABLED', 'ENABLED'
     */
    aggregation?: string;
    /**
     * The default value to use if the given field value could not be extracted. String value must be a number
     */
    defaultValue?: string;
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of unique dimensions to add to the metric.
     * Dimensions are represented in the format '({dimensionName}=)?{sourceField}'.
     * '{dimensionName}' is optional if {sourceField} represents a valid metric dimension name.
     * '{sourceField}' has to represent a valid DQL field accessor and it can access a nested field (for example, 'field[field2][0]')
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * The field from which to extract the value for the metric, or 'null' for a duration measurement
     */
    field?: string;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Indicates whether the metric value should be the specified field or duration. Possible values: 'DURATION', 'FIELD'
     */
    measurement: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Indicates whether sampling is considered for metric extraction. Possible values: 'DISABLED', 'ENABLED'
     */
    sampling?: string;
}

export interface OpenpipelineUserSessionsPipelinesPipelineMetricExtractionProcessorValueMetricExtractionProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * List of dimensions to add to the metric
     */
    dimensions?: string[];
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * The field to extract the value for the metric
     */
    field: string;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * The key of the metric to write
     */
    metricKey: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineUserSessionsPipelinesPipelineProcessing {
    /**
     * Groups all processors applicable for the ProcessingStage.
     * Applicable processors are DqlProcessor, FieldsAddProcessor, FieldsRemoveProcessor, FieldsRenameProcessor, TechnologyProcessor and DropProcessor.
     */
    processors?: outputs.OpenpipelineUserSessionsPipelinesPipelineProcessingProcessor[];
}

export interface OpenpipelineUserSessionsPipelinesPipelineProcessingProcessor {
    /**
     * Processor to apply a DQL script
     */
    dqlProcessor?: outputs.OpenpipelineUserSessionsPipelinesPipelineProcessingProcessorDqlProcessor;
    /**
     * Processor to drop the record either during the processing stage or at the endpoint
     */
    dropProcessor?: outputs.OpenpipelineUserSessionsPipelinesPipelineProcessingProcessorDropProcessor;
    /**
     * Processor to add fields
     */
    fieldsAddProcessor?: outputs.OpenpipelineUserSessionsPipelinesPipelineProcessingProcessorFieldsAddProcessor;
    /**
     * Processor to remove fields
     */
    fieldsRemoveProcessor?: outputs.OpenpipelineUserSessionsPipelinesPipelineProcessingProcessorFieldsRemoveProcessor;
    /**
     * Processor to rename fields
     */
    fieldsRenameProcessor?: outputs.OpenpipelineUserSessionsPipelinesPipelineProcessingProcessorFieldsRenameProcessor;
    /**
     * Processor to apply a technology processors
     */
    technologyProcessor?: outputs.OpenpipelineUserSessionsPipelinesPipelineProcessingProcessorTechnologyProcessor;
}

export interface OpenpipelineUserSessionsPipelinesPipelineProcessingProcessorDqlProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * The DQL script to apply on the record
     */
    dqlScript: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineUserSessionsPipelinesPipelineProcessingProcessorDropProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineUserSessionsPipelinesPipelineProcessingProcessorFieldsAddProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: outputs.OpenpipelineUserSessionsPipelinesPipelineProcessingProcessorFieldsAddProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineUserSessionsPipelinesPipelineProcessingProcessorFieldsAddProcessorField {
    /**
     * Name of the field
     */
    name: string;
    /**
     * Value to assign to the field
     */
    value: string;
}

export interface OpenpipelineUserSessionsPipelinesPipelineProcessingProcessorFieldsRemoveProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to add to the record
     */
    fields: string[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineUserSessionsPipelinesPipelineProcessingProcessorFieldsRenameProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Field to rename on the record
     */
    fields: outputs.OpenpipelineUserSessionsPipelinesPipelineProcessingProcessorFieldsRenameProcessorField[];
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineUserSessionsPipelinesPipelineProcessingProcessorFieldsRenameProcessorField {
    /**
     * The field to rename
     */
    fromName: string;
    /**
     * The new field name
     */
    toName: string;
}

export interface OpenpipelineUserSessionsPipelinesPipelineProcessingProcessorTechnologyProcessor {
    /**
     * Optional customer-defined matching condition, that is used in place of the main technology matcher.
     */
    customMatcher?: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * The reference identifier to a specific technology. This technology is applied on the record.
     */
    technologyId: string;
}

export interface OpenpipelineUserSessionsPipelinesPipelineProductAllocation {
    /**
     * Product allocation processor to use
     */
    processors?: outputs.OpenpipelineUserSessionsPipelinesPipelineProductAllocationProcessor[];
}

export interface OpenpipelineUserSessionsPipelinesPipelineProductAllocationProcessor {
    /**
     * Processor to write the occurrences as a product allocation
     */
    productAllocationProcessor?: outputs.OpenpipelineUserSessionsPipelinesPipelineProductAllocationProcessorProductAllocationProcessor;
}

export interface OpenpipelineUserSessionsPipelinesPipelineProductAllocationProcessorProductAllocationProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Strategy to assign a value
     */
    value: outputs.OpenpipelineUserSessionsPipelinesPipelineProductAllocationProcessorProductAllocationProcessorValue;
}

export interface OpenpipelineUserSessionsPipelinesPipelineProductAllocationProcessorProductAllocationProcessorValue {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineUserSessionsPipelinesPipelineSecurityContext {
    /**
     * Groups all processors applicable for the SecurityContextStage.
     * Applicable processor is SecurityContextProcessor.
     */
    processors?: outputs.OpenpipelineUserSessionsPipelinesPipelineSecurityContextProcessor[];
}

export interface OpenpipelineUserSessionsPipelinesPipelineSecurityContextProcessor {
    /**
     * Processor to set the security context field
     */
    securityContextProcessor?: outputs.OpenpipelineUserSessionsPipelinesPipelineSecurityContextProcessorSecurityContextProcessor;
}

export interface OpenpipelineUserSessionsPipelinesPipelineSecurityContextProcessorSecurityContextProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
    /**
     * Strategy to assign a value
     */
    value: outputs.OpenpipelineUserSessionsPipelinesPipelineSecurityContextProcessorSecurityContextProcessorValue;
}

export interface OpenpipelineUserSessionsPipelinesPipelineSecurityContextProcessorSecurityContextProcessorValue {
    /**
     * Assign a constant value. Can only be used if 'type' is set to 'constant'
     */
    constant?: string;
    /**
     * Assign a value extracted from a field. Can only be used if 'type' is set to 'field'
     */
    field?: string;
    /**
     * The constant multi value to assign. Can only be used if 'type' is set to 'multiValueConstant'
     */
    multiValueConstants?: string[];
    /**
     * Strategy to assign a value. Possible values: 'constant', 'field', 'multiValueConstant'
     */
    type: string;
}

export interface OpenpipelineUserSessionsPipelinesPipelineStorage {
    /**
     * Default bucket assigned to records which do not match any other storage processor
     */
    catchAllBucketName?: string;
    /**
     * Groups all processors applicable for the StorageStage.
     * Applicable processors are BucketAssignmentProcessor and NoStorageProcessor.
     */
    processors?: outputs.OpenpipelineUserSessionsPipelinesPipelineStorageProcessor[];
}

export interface OpenpipelineUserSessionsPipelinesPipelineStorageProcessor {
    /**
     * Processor to assign a bucket
     */
    bucketAssignmentProcessor?: outputs.OpenpipelineUserSessionsPipelinesPipelineStorageProcessorBucketAssignmentProcessor;
    /**
     * Processor to skip storage assignment
     */
    noStorageProcessor?: outputs.OpenpipelineUserSessionsPipelinesPipelineStorageProcessorNoStorageProcessor;
}

export interface OpenpipelineUserSessionsPipelinesPipelineStorageProcessorBucketAssignmentProcessor {
    /**
     * Bucket that is assigned when the record is matched
     */
    bucketName: string;
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineUserSessionsPipelinesPipelineStorageProcessorNoStorageProcessor {
    /**
     * Name or description of the processor
     */
    description: string;
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Identifier of the processor. Must be unique within a stage.
     */
    id: string;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Sample data related to the processor for documentation or testing
     */
    sampleData?: string;
}

export interface OpenpipelineUserSessionsRouting {
    /**
     * Dynamic routing entry
     */
    entries?: outputs.OpenpipelineUserSessionsRoutingEntry[];
}

export interface OpenpipelineUserSessionsRoutingEntry {
    /**
     * Indicates if the object is active
     */
    enabled: boolean;
    /**
     * Matching condition to apply on incoming records
     */
    matcher: string;
    /**
     * Unique note describing the dynamic route
     */
    note: string;
    /**
     * Identifier of the pipeline the record is routed into
     */
    pipelineId: string;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessing {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessors;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessors {
    processors: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessor[];
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsIngestsourcesProcessingProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsIngestsourcesStaticRouting {
    /**
     * Builtin Pipeline ID
     */
    builtinPipelineId?: string;
    /**
     * Pipeline ID
     */
    pipelineId?: string;
    /**
     * Possible Values: `Builtin`, `Custom`
     */
    pipelineType: string;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocation {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessors;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessors {
    processors: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessor[];
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesCostAllocationProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtraction {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessors;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessors {
    processors: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessor[];
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesDataExtractionProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesDavis {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessors;
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessors {
    processors: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessor[];
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesDavisProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtraction {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessors;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessors {
    processors: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessor[];
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesMetricExtractionProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesProcessing {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessors;
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessors {
    processors: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessor[];
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesProcessingProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocation {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessors;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessors {
    processors: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessor[];
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesProductAllocationProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContext {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessors;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessors {
    processors: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessor[];
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesSecurityContextProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesStorage {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessors;
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessors {
    processors: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessor[];
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2BizeventsPipelinesStorageProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2BizeventsRoutingRoutingEntries {
    routingEntries: outputs.OpenpipelineV2BizeventsRoutingRoutingEntriesRoutingEntry[];
}

export interface OpenpipelineV2BizeventsRoutingRoutingEntriesRoutingEntry {
    /**
     * Builtin Pipeline ID
     */
    builtinPipelineId?: string;
    /**
     * no documentation available
     */
    description: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Query which determines whether the record should be routed to the target pipeline of this rule.
     */
    matcher: string;
    /**
     * Pipeline ID
     */
    pipelineId?: string;
    /**
     * Possible Values: `Builtin`, `Custom`
     */
    pipelineType: string;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessing {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessors;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessors {
    processors: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessor[];
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    fieldExtractionEntries: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeFieldExtractionEntry[];
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeFieldExtractionEntry {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionInclude {
    fieldExtractionEntries: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionIncludeFieldExtractionEntry[];
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionIncludeFieldExtractionEntry {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorCounterMetricDimensions {
    fieldExtractionEntries: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorCounterMetricDimensionsFieldExtractionEntry[];
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorCounterMetricDimensionsFieldExtractionEntry {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensions {
    fieldExtractionEntries: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensionsFieldExtractionEntry[];
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensionsFieldExtractionEntry {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions {
    fieldExtractionEntries: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsFieldExtractionEntry[];
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsFieldExtractionEntry {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions {
    fieldExtractionEntries: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsFieldExtractionEntry[];
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsFieldExtractionEntry {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude {
    fieldExtractionEntries: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeFieldExtractionEntry[];
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeFieldExtractionEntry {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorValueMetricDimensions {
    fieldExtractionEntries: outputs.OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorValueMetricDimensionsFieldExtractionEntry[];
}

export interface OpenpipelineV2DavisEventsIngestsourcesProcessingProcessorsProcessorValueMetricDimensionsFieldExtractionEntry {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsIngestsourcesStaticRouting {
    /**
     * Builtin Pipeline ID
     */
    builtinPipelineId?: string;
    /**
     * Pipeline ID
     */
    pipelineId?: string;
    /**
     * Possible Values: `Builtin`, `Custom`
     */
    pipelineType: string;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocation {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessors;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessors {
    processors: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessor[];
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesCostAllocationProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtraction {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessors;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessors {
    processors: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessor[];
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesDataExtractionProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDavis {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessors;
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessors {
    processors: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessor[];
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesDavisProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtraction {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessors;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessors {
    processors: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessor[];
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesMetricExtractionProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessing {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessors;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessors {
    processors: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessor[];
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesProcessingProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocation {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessors;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessors {
    processors: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessor[];
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesProductAllocationProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContext {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessors;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessors {
    processors: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessor[];
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesSecurityContextProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesStorage {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessors;
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessors {
    processors: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessor[];
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisEventsPipelinesStorageProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisEventsRoutingRoutingEntries {
    routingEntries: outputs.OpenpipelineV2DavisEventsRoutingRoutingEntriesRoutingEntry[];
}

export interface OpenpipelineV2DavisEventsRoutingRoutingEntriesRoutingEntry {
    /**
     * Builtin Pipeline ID
     */
    builtinPipelineId?: string;
    /**
     * no documentation available
     */
    description: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Query which determines whether the record should be routed to the target pipeline of this rule.
     */
    matcher: string;
    /**
     * Pipeline ID
     */
    pipelineId?: string;
    /**
     * Possible Values: `Builtin`, `Custom`
     */
    pipelineType: string;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessing {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessors;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessors {
    processors: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessor[];
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsIngestsourcesProcessingProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsIngestsourcesStaticRouting {
    /**
     * Builtin Pipeline ID
     */
    builtinPipelineId?: string;
    /**
     * Pipeline ID
     */
    pipelineId?: string;
    /**
     * Possible Values: `Builtin`, `Custom`
     */
    pipelineType: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocation {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessors;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessors {
    processors: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessor[];
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesCostAllocationProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtraction {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessors;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessors {
    processors: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessor[];
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesDataExtractionProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavis {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessors;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessors {
    processors: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessor[];
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesDavisProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtraction {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessors;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessors {
    processors: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessor[];
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesMetricExtractionProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessing {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessors;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessors {
    processors: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessor[];
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesProcessingProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocation {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessors;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessors {
    processors: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessor[];
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesProductAllocationProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContext {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessors;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessors {
    processors: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessor[];
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesSecurityContextProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorage {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessors;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessors {
    processors: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessor[];
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2DavisProblemsPipelinesStorageProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2DavisProblemsRoutingRoutingEntries {
    routingEntries: outputs.OpenpipelineV2DavisProblemsRoutingRoutingEntriesRoutingEntry[];
}

export interface OpenpipelineV2DavisProblemsRoutingRoutingEntriesRoutingEntry {
    /**
     * Builtin Pipeline ID
     */
    builtinPipelineId?: string;
    /**
     * no documentation available
     */
    description: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Query which determines whether the record should be routed to the target pipeline of this rule.
     */
    matcher: string;
    /**
     * Pipeline ID
     */
    pipelineId?: string;
    /**
     * Possible Values: `Builtin`, `Custom`
     */
    pipelineType: string;
}

export interface OpenpipelineV2EventsIngestsourcesProcessing {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessors;
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessors {
    processors: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessor[];
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsIngestsourcesProcessingProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsIngestsourcesStaticRouting {
    /**
     * Builtin Pipeline ID
     */
    builtinPipelineId?: string;
    /**
     * Pipeline ID
     */
    pipelineId?: string;
    /**
     * Possible Values: `Builtin`, `Custom`
     */
    pipelineType: string;
}

export interface OpenpipelineV2EventsPipelinesCostAllocation {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessors;
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessors {
    processors: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessor[];
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsPipelinesCostAllocationProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesDataExtraction {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessors;
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessors {
    processors: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessor[];
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsPipelinesDataExtractionProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesDavis {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2EventsPipelinesDavisProcessors;
}

export interface OpenpipelineV2EventsPipelinesDavisProcessors {
    processors: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessor[];
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsPipelinesDavisProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsPipelinesDavisProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesMetricExtraction {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessors;
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessors {
    processors: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessor[];
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsPipelinesMetricExtractionProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesProcessing {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2EventsPipelinesProcessingProcessors;
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessors {
    processors: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessor[];
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsPipelinesProcessingProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesProductAllocation {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessors;
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessors {
    processors: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessor[];
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsPipelinesProductAllocationProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesSecurityContext {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessors;
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessors {
    processors: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessor[];
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsPipelinesSecurityContextProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesStorage {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2EventsPipelinesStorageProcessors;
}

export interface OpenpipelineV2EventsPipelinesStorageProcessors {
    processors: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessor[];
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsPipelinesStorageProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsPipelinesStorageProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsRoutingRoutingEntries {
    routingEntries: outputs.OpenpipelineV2EventsRoutingRoutingEntriesRoutingEntry[];
}

export interface OpenpipelineV2EventsRoutingRoutingEntriesRoutingEntry {
    /**
     * Builtin Pipeline ID
     */
    builtinPipelineId?: string;
    /**
     * no documentation available
     */
    description: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Query which determines whether the record should be routed to the target pipeline of this rule.
     */
    matcher: string;
    /**
     * Pipeline ID
     */
    pipelineId?: string;
    /**
     * Possible Values: `Builtin`, `Custom`
     */
    pipelineType: string;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessing {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessors;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessors {
    processors: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessor[];
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcIngestsourcesProcessingProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcIngestsourcesStaticRouting {
    /**
     * Builtin Pipeline ID
     */
    builtinPipelineId?: string;
    /**
     * Pipeline ID
     */
    pipelineId?: string;
    /**
     * Possible Values: `Builtin`, `Custom`
     */
    pipelineType: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocation {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessors;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessors {
    processors: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessor[];
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesCostAllocationProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtraction {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessors;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessors {
    processors: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessor[];
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesDataExtractionProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavis {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessors;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessors {
    processors: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessor[];
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesDavisProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtraction {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessors;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessors {
    processors: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessor[];
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesMetricExtractionProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessing {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessors;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessors {
    processors: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessor[];
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesProcessingProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocation {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessors;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessors {
    processors: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessor[];
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesProductAllocationProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContext {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessors;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessors {
    processors: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessor[];
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesSecurityContextProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorage {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessors;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessors {
    processors: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessor[];
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSdlcPipelinesStorageProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSdlcRoutingRoutingEntries {
    routingEntries: outputs.OpenpipelineV2EventsSdlcRoutingRoutingEntriesRoutingEntry[];
}

export interface OpenpipelineV2EventsSdlcRoutingRoutingEntriesRoutingEntry {
    /**
     * Builtin Pipeline ID
     */
    builtinPipelineId?: string;
    /**
     * no documentation available
     */
    description: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Query which determines whether the record should be routed to the target pipeline of this rule.
     */
    matcher: string;
    /**
     * Pipeline ID
     */
    pipelineId?: string;
    /**
     * Possible Values: `Builtin`, `Custom`
     */
    pipelineType: string;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessing {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessors;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessors {
    processors: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessor[];
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityIngestsourcesProcessingProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityIngestsourcesStaticRouting {
    /**
     * Builtin Pipeline ID
     */
    builtinPipelineId?: string;
    /**
     * Pipeline ID
     */
    pipelineId?: string;
    /**
     * Possible Values: `Builtin`, `Custom`
     */
    pipelineType: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocation {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessors;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessors {
    processors: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessor[];
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesCostAllocationProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtraction {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessors;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessors {
    processors: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessor[];
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesDataExtractionProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavis {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessors;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessors {
    processors: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessor[];
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesDavisProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtraction {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessors;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessors {
    processors: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessor[];
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesMetricExtractionProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessing {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessors;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessors {
    processors: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessor[];
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesProcessingProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocation {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessors;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessors {
    processors: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessor[];
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesProductAllocationProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContext {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessors;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessors {
    processors: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessor[];
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesSecurityContextProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorage {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessors;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessors {
    processors: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessor[];
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2EventsSecurityPipelinesStorageProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2EventsSecurityRoutingRoutingEntries {
    routingEntries: outputs.OpenpipelineV2EventsSecurityRoutingRoutingEntriesRoutingEntry[];
}

export interface OpenpipelineV2EventsSecurityRoutingRoutingEntriesRoutingEntry {
    /**
     * Builtin Pipeline ID
     */
    builtinPipelineId?: string;
    /**
     * no documentation available
     */
    description: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Query which determines whether the record should be routed to the target pipeline of this rule.
     */
    matcher: string;
    /**
     * Pipeline ID
     */
    pipelineId?: string;
    /**
     * Possible Values: `Builtin`, `Custom`
     */
    pipelineType: string;
}

export interface OpenpipelineV2LogsIngestsourcesProcessing {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessors;
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessors {
    processors: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessor[];
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsIngestsourcesProcessingProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsIngestsourcesStaticRouting {
    /**
     * Builtin Pipeline ID
     */
    builtinPipelineId?: string;
    /**
     * Pipeline ID
     */
    pipelineId?: string;
    /**
     * Possible Values: `Builtin`, `Custom`
     */
    pipelineType: string;
}

export interface OpenpipelineV2LogsPipelinesCostAllocation {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessors;
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessors {
    processors: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessor[];
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsPipelinesCostAllocationProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesDataExtraction {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessors;
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessors {
    processors: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessor[];
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsPipelinesDataExtractionProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesDavis {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2LogsPipelinesDavisProcessors;
}

export interface OpenpipelineV2LogsPipelinesDavisProcessors {
    processors: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessor[];
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsPipelinesDavisProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsPipelinesDavisProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesMetricExtraction {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessors;
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessors {
    processors: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessor[];
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsPipelinesMetricExtractionProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesProcessing {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2LogsPipelinesProcessingProcessors;
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessors {
    processors: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessor[];
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsPipelinesProcessingProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesProductAllocation {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessors;
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessors {
    processors: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessor[];
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsPipelinesProductAllocationProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesSecurityContext {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessors;
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessors {
    processors: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessor[];
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsPipelinesSecurityContextProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesStorage {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2LogsPipelinesStorageProcessors;
}

export interface OpenpipelineV2LogsPipelinesStorageProcessors {
    processors: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessor[];
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2LogsPipelinesStorageProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2LogsPipelinesStorageProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2LogsRoutingRoutingEntries {
    routingEntries: outputs.OpenpipelineV2LogsRoutingRoutingEntriesRoutingEntry[];
}

export interface OpenpipelineV2LogsRoutingRoutingEntriesRoutingEntry {
    /**
     * Builtin Pipeline ID
     */
    builtinPipelineId?: string;
    /**
     * no documentation available
     */
    description: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Query which determines whether the record should be routed to the target pipeline of this rule.
     */
    matcher: string;
    /**
     * Pipeline ID
     */
    pipelineId?: string;
    /**
     * Possible Values: `Builtin`, `Custom`
     */
    pipelineType: string;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessing {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessors;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessors {
    processors: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessor[];
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsIngestsourcesProcessingProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsIngestsourcesStaticRouting {
    /**
     * Builtin Pipeline ID
     */
    builtinPipelineId?: string;
    /**
     * Pipeline ID
     */
    pipelineId?: string;
    /**
     * Possible Values: `Builtin`, `Custom`
     */
    pipelineType: string;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocation {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessors;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessors {
    processors: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessor[];
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsPipelinesCostAllocationProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesDataExtraction {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessors;
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessors {
    processors: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessor[];
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsPipelinesDataExtractionProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesDavis {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2MetricsPipelinesDavisProcessors;
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessors {
    processors: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessor[];
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsPipelinesDavisProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtraction {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessors;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessors {
    processors: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessor[];
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsPipelinesMetricExtractionProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesProcessing {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessors;
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessors {
    processors: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessor[];
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsPipelinesProcessingProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocation {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessors;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessors {
    processors: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessor[];
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsPipelinesProductAllocationProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContext {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessors;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessors {
    processors: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessor[];
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsPipelinesSecurityContextProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesStorage {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2MetricsPipelinesStorageProcessors;
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessors {
    processors: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessor[];
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2MetricsPipelinesStorageProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2MetricsRoutingRoutingEntries {
    routingEntries: outputs.OpenpipelineV2MetricsRoutingRoutingEntriesRoutingEntry[];
}

export interface OpenpipelineV2MetricsRoutingRoutingEntriesRoutingEntry {
    /**
     * Builtin Pipeline ID
     */
    builtinPipelineId?: string;
    /**
     * no documentation available
     */
    description: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Query which determines whether the record should be routed to the target pipeline of this rule.
     */
    matcher: string;
    /**
     * Pipeline ID
     */
    pipelineId?: string;
    /**
     * Possible Values: `Builtin`, `Custom`
     */
    pipelineType: string;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessing {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessors;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessors {
    processors: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessor[];
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsIngestsourcesProcessingProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsIngestsourcesStaticRouting {
    /**
     * Builtin Pipeline ID
     */
    builtinPipelineId?: string;
    /**
     * Pipeline ID
     */
    pipelineId?: string;
    /**
     * Possible Values: `Builtin`, `Custom`
     */
    pipelineType: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocation {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessors;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessors {
    processors: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessor[];
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesCostAllocationProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtraction {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessors;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessors {
    processors: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessor[];
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesDataExtractionProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavis {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessors;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessors {
    processors: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessor[];
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesDavisProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtraction {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessors;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessors {
    processors: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessor[];
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesMetricExtractionProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessing {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessors;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessors {
    processors: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessor[];
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesProcessingProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocation {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessors;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessors {
    processors: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessor[];
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesProductAllocationProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContext {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessors;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessors {
    processors: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessor[];
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesSecurityContextProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorage {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessors;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessors {
    processors: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessor[];
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SecurityEventsPipelinesStorageProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SecurityEventsRoutingRoutingEntries {
    routingEntries: outputs.OpenpipelineV2SecurityEventsRoutingRoutingEntriesRoutingEntry[];
}

export interface OpenpipelineV2SecurityEventsRoutingRoutingEntriesRoutingEntry {
    /**
     * Builtin Pipeline ID
     */
    builtinPipelineId?: string;
    /**
     * no documentation available
     */
    description: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Query which determines whether the record should be routed to the target pipeline of this rule.
     */
    matcher: string;
    /**
     * Pipeline ID
     */
    pipelineId?: string;
    /**
     * Possible Values: `Builtin`, `Custom`
     */
    pipelineType: string;
}

export interface OpenpipelineV2SpansIngestsourcesProcessing {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessors;
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessors {
    processors: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessor[];
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansIngestsourcesProcessingProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansIngestsourcesStaticRouting {
    /**
     * Builtin Pipeline ID
     */
    builtinPipelineId?: string;
    /**
     * Pipeline ID
     */
    pipelineId?: string;
    /**
     * Possible Values: `Builtin`, `Custom`
     */
    pipelineType: string;
}

export interface OpenpipelineV2SpansPipelinesCostAllocation {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessors;
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessors {
    processors: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessor[];
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansPipelinesCostAllocationProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesDataExtraction {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessors;
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessors {
    processors: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessor[];
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansPipelinesDataExtractionProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesDavis {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2SpansPipelinesDavisProcessors;
}

export interface OpenpipelineV2SpansPipelinesDavisProcessors {
    processors: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessor[];
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansPipelinesDavisProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansPipelinesDavisProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesMetricExtraction {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessors;
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessors {
    processors: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessor[];
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansPipelinesMetricExtractionProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesProcessing {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2SpansPipelinesProcessingProcessors;
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessors {
    processors: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessor[];
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansPipelinesProcessingProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesProductAllocation {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessors;
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessors {
    processors: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessor[];
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansPipelinesProductAllocationProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesSecurityContext {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessors;
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessors {
    processors: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessor[];
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansPipelinesSecurityContextProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesStorage {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2SpansPipelinesStorageProcessors;
}

export interface OpenpipelineV2SpansPipelinesStorageProcessors {
    processors: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessor[];
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SpansPipelinesStorageProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SpansPipelinesStorageProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SpansRoutingRoutingEntries {
    routingEntries: outputs.OpenpipelineV2SpansRoutingRoutingEntriesRoutingEntry[];
}

export interface OpenpipelineV2SpansRoutingRoutingEntriesRoutingEntry {
    /**
     * Builtin Pipeline ID
     */
    builtinPipelineId?: string;
    /**
     * no documentation available
     */
    description: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Query which determines whether the record should be routed to the target pipeline of this rule.
     */
    matcher: string;
    /**
     * Pipeline ID
     */
    pipelineId?: string;
    /**
     * Possible Values: `Builtin`, `Custom`
     */
    pipelineType: string;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessing {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessors;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessors {
    processors: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessor[];
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    fieldExtractionEntries: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeFieldExtractionEntry[];
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeFieldExtractionEntry {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionInclude {
    fieldExtractionEntries: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionIncludeFieldExtractionEntry[];
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionIncludeFieldExtractionEntry {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorCounterMetricDimensions {
    fieldExtractionEntries: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorCounterMetricDimensionsFieldExtractionEntry[];
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorCounterMetricDimensionsFieldExtractionEntry {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensions {
    fieldExtractionEntries: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensionsFieldExtractionEntry[];
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensionsFieldExtractionEntry {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions {
    fieldExtractionEntries: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsFieldExtractionEntry[];
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsFieldExtractionEntry {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions {
    fieldExtractionEntries: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsFieldExtractionEntry[];
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsFieldExtractionEntry {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude {
    fieldExtractionEntries: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeFieldExtractionEntry[];
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeFieldExtractionEntry {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorValueMetricDimensions {
    fieldExtractionEntries: outputs.OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorValueMetricDimensionsFieldExtractionEntry[];
}

export interface OpenpipelineV2SystemEventsIngestsourcesProcessingProcessorsProcessorValueMetricDimensionsFieldExtractionEntry {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsIngestsourcesStaticRouting {
    /**
     * Builtin Pipeline ID
     */
    builtinPipelineId?: string;
    /**
     * Pipeline ID
     */
    pipelineId?: string;
    /**
     * Possible Values: `Builtin`, `Custom`
     */
    pipelineType: string;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocation {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessors;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessors {
    processors: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessor[];
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesCostAllocationProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtraction {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessors;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessors {
    processors: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessor[];
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesDataExtractionProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDavis {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessors;
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessors {
    processors: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessor[];
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesDavisProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtraction {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessors;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessors {
    processors: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessor[];
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesMetricExtractionProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessing {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessors;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessors {
    processors: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessor[];
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesProcessingProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocation {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessors;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessors {
    processors: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessor[];
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesProductAllocationProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContext {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessors;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessors {
    processors: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessor[];
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesSecurityContextProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesStorage {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessors;
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessors {
    processors: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessor[];
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2SystemEventsPipelinesStorageProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2SystemEventsRoutingRoutingEntries {
    routingEntries: outputs.OpenpipelineV2SystemEventsRoutingRoutingEntriesRoutingEntry[];
}

export interface OpenpipelineV2SystemEventsRoutingRoutingEntriesRoutingEntry {
    /**
     * Builtin Pipeline ID
     */
    builtinPipelineId?: string;
    /**
     * no documentation available
     */
    description: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Query which determines whether the record should be routed to the target pipeline of this rule.
     */
    matcher: string;
    /**
     * Pipeline ID
     */
    pipelineId?: string;
    /**
     * Possible Values: `Builtin`, `Custom`
     */
    pipelineType: string;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessing {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessors;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessors {
    processors: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessor[];
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    fieldExtractionEntries: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeFieldExtractionEntry[];
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeFieldExtractionEntry {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionInclude {
    fieldExtractionEntries: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionIncludeFieldExtractionEntry[];
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionIncludeFieldExtractionEntry {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorCounterMetricDimensions {
    fieldExtractionEntries: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorCounterMetricDimensionsFieldExtractionEntry[];
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorCounterMetricDimensionsFieldExtractionEntry {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensions {
    fieldExtractionEntries: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensionsFieldExtractionEntry[];
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensionsFieldExtractionEntry {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions {
    fieldExtractionEntries: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsFieldExtractionEntry[];
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsFieldExtractionEntry {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions {
    fieldExtractionEntries: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsFieldExtractionEntry[];
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsFieldExtractionEntry {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude {
    fieldExtractionEntries: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeFieldExtractionEntry[];
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeFieldExtractionEntry {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorValueMetricDimensions {
    fieldExtractionEntries: outputs.OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorValueMetricDimensionsFieldExtractionEntry[];
}

export interface OpenpipelineV2UserEventsIngestsourcesProcessingProcessorsProcessorValueMetricDimensionsFieldExtractionEntry {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsIngestsourcesStaticRouting {
    /**
     * Builtin Pipeline ID
     */
    builtinPipelineId?: string;
    /**
     * Pipeline ID
     */
    pipelineId?: string;
    /**
     * Possible Values: `Builtin`, `Custom`
     */
    pipelineType: string;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocation {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessors;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessors {
    processors: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessor[];
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesCostAllocationProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtraction {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessors;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessors {
    processors: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessor[];
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesDataExtractionProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesDavis {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessors;
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessors {
    processors: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessor[];
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesDavisProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtraction {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessors;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessors {
    processors: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessor[];
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesMetricExtractionProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesProcessing {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessors;
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessors {
    processors: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessor[];
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesProcessingProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocation {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessors;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessors {
    processors: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessor[];
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesProductAllocationProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContext {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessors;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessors {
    processors: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessor[];
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesSecurityContextProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesStorage {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessors;
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessors {
    processors: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessor[];
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2UserEventsPipelinesStorageProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UserEventsRoutingRoutingEntries {
    routingEntries: outputs.OpenpipelineV2UserEventsRoutingRoutingEntriesRoutingEntry[];
}

export interface OpenpipelineV2UserEventsRoutingRoutingEntriesRoutingEntry {
    /**
     * Builtin Pipeline ID
     */
    builtinPipelineId?: string;
    /**
     * no documentation available
     */
    description: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Query which determines whether the record should be routed to the target pipeline of this rule.
     */
    matcher: string;
    /**
     * Pipeline ID
     */
    pipelineId?: string;
    /**
     * Possible Values: `Builtin`, `Custom`
     */
    pipelineType: string;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessing {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessors;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessors {
    processors: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessor[];
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsIngestsourcesProcessingProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsIngestsourcesStaticRouting {
    /**
     * Builtin Pipeline ID
     */
    builtinPipelineId?: string;
    /**
     * Pipeline ID
     */
    pipelineId?: string;
    /**
     * Possible Values: `Builtin`, `Custom`
     */
    pipelineType: string;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocation {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessors;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessors {
    processors: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessor[];
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesCostAllocationProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtraction {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessors;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessors {
    processors: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessor[];
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesDataExtractionProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDavis {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessors;
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessors {
    processors: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessor[];
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesDavisProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtraction {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessors;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessors {
    processors: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessor[];
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesMetricExtractionProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessing {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessors;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessors {
    processors: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessor[];
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesProcessingProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocation {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessors;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessors {
    processors: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessor[];
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesProductAllocationProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContext {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessors;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessors {
    processors: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessor[];
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesSecurityContextProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesStorage {
    /**
     * Processors of stage
     */
    processors?: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessors;
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessors {
    processors: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessor[];
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessor {
    /**
     * Azure log forwarding processor attributes
     */
    azureLogForwarding?: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorAzureLogForwarding;
    /**
     * Bizevent extraction processor attributes
     */
    bizevent?: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorBizevent;
    /**
     * Bucket assignment processor attributes
     */
    bucketAssignment?: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorBucketAssignment;
    /**
     * Cost allocation processor attributes
     */
    costAllocation?: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorCostAllocation;
    /**
     * Counter metric processor attributes
     */
    counterMetric?: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorCounterMetric;
    /**
     * Davis event extraction processor attributes
     */
    davis?: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorDavis;
    /**
     * no documentation available
     */
    description: string;
    /**
     * DQL processor attributes
     */
    dql?: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorDql;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Fields add processor attributes
     */
    fieldsAdd?: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorFieldsAdd;
    /**
     * Fields remove processor attributes
     */
    fieldsRemove?: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorFieldsRemove;
    /**
     * Fields rename processor attributes
     */
    fieldsRename?: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorFieldsRename;
    /**
     * Histogram metric processor attributes
     */
    histogramMetric?: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorHistogramMetric;
    /**
     * Processor identifier
     */
    id: string;
    /**
     * [See our documentation](https://dt-url.net/bp234rv)
     */
    matcher?: string;
    /**
     * Product allocation processor attributes
     */
    productAllocation?: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorProductAllocation;
    /**
     * Sample data
     */
    sampleData?: string;
    /**
     * Sampling-aware counter metric processor attributes
     */
    samplingAwareCounterMetric?: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetric;
    /**
     * Sampling aware value metric processor attributes
     */
    samplingAwareValueMetric?: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorSamplingAwareValueMetric;
    /**
     * Security context processor attributes
     */
    securityContext?: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorSecurityContext;
    /**
     * Security event extraction processor attributes
     */
    securityEvent?: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorSecurityEvent;
    /**
     * Technology processor attributes
     */
    technology?: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorTechnology;
    /**
     * Possible Values: `AzureLogForwarding`, `Bizevent`, `BucketAssignment`, `CostAllocation`, `CounterMetric`, `Davis`, `Dql`, `Drop`, `FieldsAdd`, `FieldsRemove`, `FieldsRename`, `HistogramMetric`, `NoStorage`, `ProductAllocation`, `SamplingAwareCounterMetric`, `SamplingAwareValueMetric`, `SecurityContext`, `SecurityEvent`, `Technology`, `ValueMetric`
     */
    type: string;
    /**
     * Value metric processor attributes
     */
    valueMetric?: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorValueMetric;
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorAzureLogForwarding {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtraction;
    /**
     * no documentation available
     */
    forwarderConfigId: string;
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorAzureLogForwardingFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorBizevent {
    /**
     * Event provider
     */
    eventProvider: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorBizeventEventProvider;
    /**
     * Event type
     */
    eventType?: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorBizeventEventType;
    /**
     * Field extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorBizeventFieldExtraction;
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorBizeventEventProvider {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorBizeventEventProviderField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorBizeventEventProviderField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorBizeventEventType {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorBizeventEventTypeField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorBizeventEventTypeField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorBizeventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorBizeventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorBizeventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorBizeventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorBizeventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorBucketAssignment {
    /**
     * Bucket name
     */
    bucketName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorCostAllocation {
    /**
     * The strategy to set the cost allocation field
     */
    value: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorCostAllocationValue;
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorCostAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorCostAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorCostAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorCounterMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorDavis {
    /**
     * no documentation available
     */
    properties: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorDavisProperties;
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorDavisProperties {
    properties: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorDavisPropertiesProperty[];
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorDavisPropertiesProperty {
    /**
     * no documentation available
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorDql {
    /**
     * DQL script
     */
    script: string;
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorFieldsAdd {
    /**
     * Fields to Add
     */
    fields: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorFieldsAddFields;
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorFieldsAddFields {
    fields: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorFieldsAddFieldsField[];
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorFieldsAddFieldsField {
    /**
     * Fields's name
     */
    name: string;
    /**
     * Field's value
     */
    value: string;
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorFieldsRemove {
    /**
     * Fields to remove
     */
    fields: string[];
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorFieldsRename {
    /**
     * Fields to rename
     */
    fields: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorFieldsRenameFields;
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorFieldsRenameFields {
    fields: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorFieldsRenameFieldsField[];
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorFieldsRenameFieldsField {
    /**
     * Fields's name
     */
    fromName: string;
    /**
     * New field's name
     */
    toName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorHistogramMetric {
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorHistogramMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorHistogramMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorHistogramMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorHistogramMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorProductAllocation {
    /**
     * The strategy to set product allocation field
     */
    value: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorProductAllocationValue;
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorProductAllocationValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorProductAllocationValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorProductAllocationValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensions;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorSamplingAwareCounterMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorSamplingAwareValueMetric {
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    aggregation?: string;
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensions;
    /**
     * Field with metric value
     */
    field?: string;
    /**
     * Possible Values: `Duration`, `Field`
     */
    measurement: string;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `Disabled`, `Enabled`
     */
    sampling?: string;
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorSamplingAwareValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorSecurityContext {
    /**
     * Security context value assignment
     */
    value: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorSecurityContextValue;
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorSecurityContextValue {
    /**
     * Constant value
     */
    constant?: string;
    /**
     * Value from field
     */
    field?: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorSecurityContextValueField;
    /**
     * Constant multi value
     */
    multiValueConstants?: string[];
    /**
     * Possible Values: `Constant`, `Field`, `MultiValueConstant`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorSecurityContextValueField {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorSecurityEvent {
    /**
     * Field Extraction
     */
    fieldExtraction: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorSecurityEventFieldExtraction;
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorSecurityEventFieldExtraction {
    /**
     * Fields
     */
    excludes?: string[];
    /**
     * Fields
     */
    include?: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionInclude;
    /**
     * Possible Values: `Exclude`, `Include`, `IncludeAll`
     */
    type: string;
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionInclude {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionIncludeDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorSecurityEventFieldExtractionIncludeDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorTechnology {
    /**
     * Custom matching condition which should be used instead of technology matcher.
     */
    customMatcher?: string;
    /**
     * Technology ID
     */
    technologyId: string;
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorValueMetric {
    /**
     * Default value with metric value
     */
    defaultValue?: string;
    /**
     * List of dimensions
     */
    dimensions?: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorValueMetricDimensions;
    /**
     * Field with metric value
     */
    field: string;
    /**
     * Metric key
     */
    metricKey: string;
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorValueMetricDimensions {
    dimensions: outputs.OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorValueMetricDimensionsDimension[];
}

export interface OpenpipelineV2UsersessionsPipelinesStorageProcessorsProcessorValueMetricDimensionsDimension {
    /**
     * Default value
     */
    defaultValue?: string;
    /**
     * Destination field name
     */
    destinationFieldName?: string;
    /**
     * Source field name
     */
    sourceFieldName: string;
}

export interface OpenpipelineV2UsersessionsRoutingRoutingEntries {
    routingEntries: outputs.OpenpipelineV2UsersessionsRoutingRoutingEntriesRoutingEntry[];
}

export interface OpenpipelineV2UsersessionsRoutingRoutingEntriesRoutingEntry {
    /**
     * Builtin Pipeline ID
     */
    builtinPipelineId?: string;
    /**
     * no documentation available
     */
    description: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Query which determines whether the record should be routed to the target pipeline of this rule.
     */
    matcher: string;
    /**
     * Pipeline ID
     */
    pipelineId?: string;
    /**
     * Possible Values: `Builtin`, `Custom`
     */
    pipelineType: string;
}

export interface OpentelemetryMetricsAdditionalAttributes {
    additionalAttributes: outputs.OpentelemetryMetricsAdditionalAttributesAdditionalAttribute[];
}

export interface OpentelemetryMetricsAdditionalAttributesAdditionalAttribute {
    /**
     * Attribute key
     */
    attributeKey: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface OpentelemetryMetricsToDropAttributes {
    toDropAttributes: outputs.OpentelemetryMetricsToDropAttributesToDropAttribute[];
}

export interface OpentelemetryMetricsToDropAttributesToDropAttribute {
    /**
     * Attribute key
     */
    attributeKey: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface OsServicesDetectionConditionsLinux {
    linuxDetectionConditions: outputs.OsServicesDetectionConditionsLinuxLinuxDetectionCondition[];
}

export interface OsServicesDetectionConditionsLinuxLinuxDetectionCondition {
    /**
     * This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk).
     */
    condition?: string;
    /**
     * Custom metadata
     */
    hostMetadataCondition?: outputs.OsServicesDetectionConditionsLinuxLinuxDetectionConditionHostMetadataCondition;
    /**
     * Possible Values: `ServiceName`, `StartupType`
     */
    property?: string;
    /**
     * Possible Values: `RuleTypeHost`, `RuleTypeOsService`
     */
    ruleType?: string;
    /**
     * This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk).
     *
     * - `$eq(enabled)` – Matches services with startup type equal to enabled.
     *
     * Available logic operations:
     * - `$not($eq(enabled))` – Matches services with startup type different from enabled.
     * - `$or($eq(enabled),$eq(disabled))` - Matches services that are either enabled or disabled.
     *
     * Use one of the following values as a parameter for this condition:
     *
     * - `enabled`
     * - `enabled-runtime`
     * - `static`
     * - `disabled`
     */
    startupCondition?: string;
}

export interface OsServicesDetectionConditionsLinuxLinuxDetectionConditionHostMetadataCondition {
    /**
     * When enabled, the condition requires a metadata key to exist and match the constraints; when disabled, the key is optional but must still match the constrains if it is present.
     */
    keyMustExist?: boolean;
    /**
     * This string has to match a required format.
     */
    metadataCondition: string;
    /**
     * Key
     */
    metadataKey: string;
}

export interface OsServicesDetectionConditionsWindows {
    detectionConditionsWindows: outputs.OsServicesDetectionConditionsWindowsDetectionConditionsWindow[];
}

export interface OsServicesDetectionConditionsWindowsDetectionConditionsWindow {
    /**
     * This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk).
     */
    condition?: string;
    /**
     * Custom metadata
     */
    hostMetadataCondition?: outputs.OsServicesDetectionConditionsWindowsDetectionConditionsWindowHostMetadataCondition;
    /**
     * Possible Values: `DisplayName`, `Manufacturer`, `Path`, `ServiceName`, `StartupType`
     */
    property?: string;
    /**
     * Possible Values: `RuleTypeHost`, `RuleTypeOsService`
     */
    ruleType?: string;
    /**
     * This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk).
     *
     * - `$eq(manual)` – Matches services that are started manually.
     *
     * Available logic operations:
     * - `$not($eq(auto))` – Matches services with startup type different from Automatic.
     * - `$or($eq(auto),$eq(manual))` – Matches if service's startup type is either Automatic or Manual.
     *
     * Use one of the following values as a parameter for this condition:
     *
     * - `manual` for Manual
     * - `manualTrigger` for Manual (Trigger Start)
     * - `auto` for Automatic
     * - `autoDelay` for Automatic (Delayed Start)
     * - `autoTrigger` for Automatic (Trigger Start)
     * - `autoDelayTrigger` for Automatic (Delayed Start, Trigger Start)
     * - `disabled` for Disabled
     */
    startupCondition?: string;
}

export interface OsServicesDetectionConditionsWindowsDetectionConditionsWindowHostMetadataCondition {
    /**
     * When enabled, the condition requires a metadata key to exist and match the constraints; when disabled, the key is optional but must still match the constrains if it is present.
     */
    keyMustExist?: boolean;
    /**
     * This string has to match a required format.
     */
    metadataCondition: string;
    /**
     * Key
     */
    metadataKey: string;
}

export interface OsServicesMetadata {
    items: outputs.OsServicesMetadataItem[];
}

export interface OsServicesMetadataItem {
    /**
     * Type 'dt.' for key hints.
     */
    metadataKey: string;
    /**
     * no documentation available
     */
    metadataValue: string;
}

export interface OwnershipConfigOwnershipIdentifiers {
    ownershipIdentifiers: outputs.OwnershipConfigOwnershipIdentifiersOwnershipIdentifier[];
}

export interface OwnershipConfigOwnershipIdentifiersOwnershipIdentifier {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Key for ownership metadata and tags
     */
    key: string;
}

export interface OwnershipTeamsAdditionalInformation {
    additionalInformations: outputs.OwnershipTeamsAdditionalInformationAdditionalInformation[];
}

export interface OwnershipTeamsAdditionalInformationAdditionalInformation {
    /**
     * Name
     */
    key: string;
    /**
     * no documentation available
     */
    url?: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OwnershipTeamsContactDetails {
    contactDetails: outputs.OwnershipTeamsContactDetailsContactDetail[];
}

export interface OwnershipTeamsContactDetailsContactDetail {
    /**
     * no documentation available
     */
    email?: string;
    /**
     * Possible Values: `EMAIL`, `JIRA`, `MS_TEAMS`, `SLACK`
     */
    integrationType: string;
    /**
     * no documentation available
     */
    jira?: outputs.OwnershipTeamsContactDetailsContactDetailJira;
    /**
     * Team
     */
    msTeams?: string;
    /**
     * Channel
     */
    slackChannel?: string;
    /**
     * no documentation available
     */
    url?: string;
}

export interface OwnershipTeamsContactDetailsContactDetailJira {
    /**
     * Default Assignee
     */
    defaultAssignee: string;
    /**
     * no documentation available
     */
    project: string;
}

export interface OwnershipTeamsLinks {
    links: outputs.OwnershipTeamsLinksLink[];
}

export interface OwnershipTeamsLinksLink {
    /**
     * Possible Values: `DASHBOARD`, `DOCUMENTATION`, `HEALTH_APP`, `REPOSITORY`, `RUNBOOK`, `URL`, `WIKI`
     */
    linkType: string;
    /**
     * no documentation available
     */
    url: string;
}

export interface OwnershipTeamsResponsibilities {
    /**
     * Responsible for developing and maintaining high quality software. Development teams are responsible for making code changes to address performance regressions, errors, or security vulnerabilities.
     */
    development: boolean;
    /**
     * Responsible for the administration, management, and support of the IT infrastructure including physical servers, virtualization, and cloud. Teams with infrastructure responsibility are responsible for addressing hardware issues, resource limits, and operating system vulnerabilities.
     */
    infrastructure: boolean;
    /**
     * Responsible for ensuring that applications in development align with business needs and meet the usability requirements of users, stakeholders, customers, and external partners. Teams with line of business responsibility are responsible for understanding the customer experience and how it affects business goals.
     */
    lineOfBusiness: boolean;
    /**
     * Responsible for deploying and managing software, with a focus on high availability and performance. Teams with operations responsibilities needs to understand the impact, priority, and team responsible for addressing problems detected by Dynatrace.
     */
    operations: boolean;
    /**
     * Responsible for the security posture of the organization. Teams with security responsibility must understand the impact, priority, and team responsible for addressing security vulnerabilities.
     */
    security: boolean;
}

export interface OwnershipTeamsSupplementaryIdentifiers {
    supplementaryIdentifiers: outputs.OwnershipTeamsSupplementaryIdentifiersSupplementaryIdentifier[];
}

export interface OwnershipTeamsSupplementaryIdentifiersSupplementaryIdentifier {
    /**
     * Supplementary Identifier
     */
    supplementaryIdentifier: string;
}

export interface PgAnomaliesAvailability {
    /**
     * How to monitor the availability of the process group:  * `PROCESS_IMPACT`: Alert if any process of the group becomes unavailable.  * `MINIMUM_THRESHOLD`: Alert if the number of active processes in the group falls below the specified threshold.  * `OFF`: Availability monitoring is disabled.
     */
    method: string;
    /**
     * Alert if the number of active processes in the group is lower than this value.
     */
    minimumThreshold?: number;
}

export interface PlatformSloCriteria {
    criteriaDetails: outputs.PlatformSloCriteriaCriteriaDetail[];
}

export interface PlatformSloCriteriaCriteriaDetail {
    /**
     * Criteria target, example: `99.8`
     */
    target: number;
    /**
     * Timeframe from, example: `now-7d`
     */
    timeframeFrom: string;
    /**
     * Timeframe to, example: `now`
     */
    timeframeTo?: string;
    /**
     * Criteria warning, example: `99.9`
     */
    warning?: number;
}

export interface PlatformSloCustomSli {
    /**
     * A filter segment is identified by an ID. Each segment includes a list of variable definitions.
     */
    filterSegments?: outputs.PlatformSloCustomSliFilterSegments;
    /**
     * Indicator of the custom SLI. Example: `timeseries sli=avg(dt.host.cpu.idle)`
     */
    indicator: string;
}

export interface PlatformSloCustomSliFilterSegments {
    filterSegments: outputs.PlatformSloCustomSliFilterSegmentsFilterSegment[];
}

export interface PlatformSloCustomSliFilterSegmentsFilterSegment {
    /**
     * The ID of the filter segment
     */
    id: string;
    /**
     * Defines a variable with a name and a list of values
     */
    variables?: outputs.PlatformSloCustomSliFilterSegmentsFilterSegmentVariables;
}

export interface PlatformSloCustomSliFilterSegmentsFilterSegmentVariables {
    filterSegmentVariables: outputs.PlatformSloCustomSliFilterSegmentsFilterSegmentVariablesFilterSegmentVariable[];
}

export interface PlatformSloCustomSliFilterSegmentsFilterSegmentVariablesFilterSegmentVariable {
    /**
     * Name of the filter segment variable
     */
    name: string;
    /**
     * Values of the filter segment variable
     */
    values: string[];
}

export interface PlatformSloSliReference {
    /**
     * Template ID of the SLI reference
     */
    templateId: string;
    /**
     * Variables of the SLI reference
     */
    variables: outputs.PlatformSloSliReferenceVariables;
}

export interface PlatformSloSliReferenceVariables {
    sliReferenceVariables: outputs.PlatformSloSliReferenceVariablesSliReferenceVariable[];
}

export interface PlatformSloSliReferenceVariablesSliReferenceVariable {
    /**
     * Name of the SLI reference variable. Example: `hostIds`
     */
    name: string;
    /**
     * Value of the SLI reference variable. Example: `HOST-123456789ABCDEFG`
     */
    value: string;
}

export interface ProcessAvailabilityMetadata {
    items: outputs.ProcessAvailabilityMetadataItem[];
}

export interface ProcessAvailabilityMetadataItem {
    /**
     * Type 'dt.' for key hints.
     */
    key: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface ProcessAvailabilityRules {
    rules: outputs.ProcessAvailabilityRulesRule[];
}

export interface ProcessAvailabilityRulesRule {
    /**
     * - $contains(svc) – Matches if svc appears anywhere in the process property value.
     * - $eq(svc.exe) – Matches if svc.exe matches the process property value exactly.
     * - $prefix(svc) – Matches if app matches the prefix of the process property value.
     * - $suffix(svc.py) – Matches if svc.py matches the suffix of the process property value.
     *
     * For example, $suffix(svc.py) would detect processes named loyaltysvc.py and paymentssvc.py.
     *
     * For more details, see [Process availability](https://dt-url.net/v923x37).
     */
    condition?: string;
    /**
     * Host custom metadata refers to user-defined key-value pairs that you can assign to hosts monitored by Dynatrace.
     *
     * By defining custom metadata, you can enrich the monitoring data with context specific to your organization's needs, such as environment names, team ownership, application versions, or any other relevant details.
     *
     * See [Define tags and metadata for hosts](https://dt-url.net/w3hv0kbw).
     */
    hostMetadataCondition?: outputs.ProcessAvailabilityRulesRuleHostMetadataCondition;
    /**
     * Possible Values: `CommandLine`, `Executable`, `ExecutablePath`, `User`
     */
    property?: string;
    /**
     * Possible Values: `RuleTypeHost`, `RuleTypeProcess`
     */
    ruleType?: string;
}

export interface ProcessAvailabilityRulesRuleHostMetadataCondition {
    /**
     * When enabled, the condition requires a metadata key to exist and match the constraints; when disabled, the key is optional but must still match the constrains if it is present.
     */
    keyMustExist?: boolean;
    /**
     * This string has to match a required format.
     *
     * - `$contains(production)` – Matches if `production` appears anywhere in the host metadata value.
     * - `$eq(production)` – Matches if `production` matches the host metadata value exactly.
     * - `$prefix(production)` – Matches if `production` matches the prefix of the host metadata value.
     * - `$suffix(production)` – Matches if `production` matches the suffix of the host metadata value.
     *
     * Available logic operations:
     * - `$not($eq(production))` – Matches if the host metadata value is different from `production`.
     * - `$and($prefix(production),$suffix(main))` – Matches if host metadata value starts with `production` and ends with `main`.
     * - `$or($prefix(production),$suffix(main))` – Matches if host metadata value starts with `production` or ends with `main`.
     *
     * Brackets **(** and **)** that are part of the matched property **must be escaped with a tilde (~)**
     */
    metadataCondition: string;
    /**
     * Key
     */
    metadataKey: string;
}

export interface ProcessGroupDetectionGroupExtraction {
    /**
     * Optionally delimit this property between *From* and *To*.
     */
    delimiter: outputs.ProcessGroupDetectionGroupExtractionDelimiter;
    /**
     * Possible values: `DOTNET_COMMAND`, `DOTNET_COMMAND_PATH`, `ASP_NET_CORE_APPLICATION_PATH`, `AWS_ECR_ACCOUNT_ID`, `AWS_ECR_REGION`, `AWS_ECS_CLUSTER`, `AWS_ECS_CONTAINERNAME`, `AWS_ECS_FAMILY`, `AWS_ECS_REVISION`, `AWS_LAMBDA_FUNCTION_NAME`, `AWS_REGION`, `APACHE_SPARK_MASTER_IP_ADDRESS`, `APACHE_CONFIG_PATH`, `CATALINA_BASE`, `CATALINA_HOME`, `CLOUD_FOUNDRY_APP_NAME`, `CLOUD_FOUNDRY_APPLICATION_ID`, `CLOUD_FOUNDRY_INSTANCE_INDEX`, `CLOUD_FOUNDRY_SPACE_NAME`, `CLOUD_FOUNDRY_SPACE_ID`, `COLDFUSION_JVM_CONFIG_FILE`, `SERVICE_NAME`, `COMMAND_LINE_ARGS`, `CONTAINER_ID`, `CONTAINER_IMAGE_VERSION`, `CONTAINER_NAME`, `DECLARATIVE_ID`, `CONTAINER_IMAGE_NAME`, `RUXIT_CLUSTER_ID`, `RUXIT_NODE_ID`, `EXE_NAME`, `EXE_PATH`, `ELASTIC_SEARCH_CLUSTER_NAME`, `ELASTIC_SEARCH_NODE_NAME`, `EQUINOX_CONFIG_PATH`, `GLASSFISH_DOMAIN_NAME`, `GLASSFISH_INSTANCE_NAME`, `PG_ID_CALC_INPUT_KEY_LINKAGE`, `GAE_INSTANCE`, `GAE_SERVICE`, `GOOGLE_CLOUD_PROJECT`, `HYBRIS_BIN_DIR`, `HYBRIS_CONFIG_DIR`, `HYBRIS_DATA_DIR`, `IBM_CICS_REGION`, `IBM_CICS_IMS_APPLID`, `IBM_CICS_IMS_JOBNAME`, `IBM_CTG_NAME`, `IBM_IMS_CONNECT`, `IBM_IMS_CONTROL`, `IBM_IMS_MPR`, `IBM_IMS_SOAP_GW_NAME`, `IIB_BROKER_NAME`, `IIB_EXECUTION_GROUP_NAME`, `IIS_APP_POOL`, `IIS_ROLE_NAME`, `JBOSS_HOME`, `JBOSS_MODE`, `JBOSS_SERVER_NAME`, `JAVA_JAR_FILE`, `JAVA_JAR_PATH`, `JAVA_MAIN_CLASS`, `KUBERNETES_BASEPODNAME`, `KUBERNETES_CONTAINERNAME`, `KUBERNETES_FULLPODNAME`, `KUBERNETES_NAMESPACE`, `KUBERNETES_PODUID`, `MSSQL_INSTANCE_NAME`, `NODEJS_APP_NAME`, `NODEJS_APP_BASE_DIR`, `NODEJS_SCRIPT_NAME`, `ORACLE_SID`, `PHP_CLI_SCRIPT_PATH`, `PHP_CLI_WORKING_DIR`, `SOFTWAREAG_INSTALL_ROOT`, `SOFTWAREAG_PRODUCTPROPNAME`, `SPRINGBOOT_APP_NAME`, `SPRINGBOOT_PROFILE_NAME`, `SPRINGBOOT_STARTUP_CLASS`, `TIBCO_BUSINESSWORKS_CE_APP_NAME`, `TIBCO_BUSINESSWORKS_CE_VERSION`, `TIBCO_BUSINESSWORKS_APP_NODE_NAME`, `TIBCO_BUSINESSWORKS_APP_SPACE_NAME`, `TIBCO_BUSINESSWORKS_DOMAIN_NAME`, `TIPCO_BUSINESSWORKS_PROPERTY_FILE`, `TIPCO_BUSINESSWORKS_PROPERTY_FILE_PATH`, `TIBCO_BUSINESSWORKS_HOME`, `VARNISH_INSTANCE_NAME`, `WEBLOGIC_NAME`, `WEBLOGIC_CLUSTER_NAME`, `WEBLOGIC_DOMAIN_NAME`, `WEBLOGIC_HOME`, `WEBSPHERE_LIBERTY_SERVER_NAME`, `WEBSPHERE_CELL_NAME`, `WEBSPHERE_CLUSTER_NAME`, `WEBSPHERE_NODE_NAME`, `WEBSPHERE_SERVER_NAME`
     */
    property: string;
    /**
     * If this option is selected, the default Dynatrace behavior is disabled for these detected processes. Only this rule is used to separate the process group.
     */
    standaloneRule?: boolean;
}

export interface ProcessGroupDetectionGroupExtractionDelimiter {
    /**
     * Delimit from
     */
    from?: string;
    /**
     * (e.g. versions, hex, dates, and build numbers)
     */
    removeIds: boolean;
    /**
     * Delimit to
     */
    to?: string;
}

export interface ProcessGroupDetectionInstanceExtraction {
    /**
     * Optionally delimit this property between *From* and *To*.
     */
    delimiter?: outputs.ProcessGroupDetectionInstanceExtractionDelimiter;
    /**
     * Possible values: `DOTNET_COMMAND`, `DOTNET_COMMAND_PATH`, `ASP_NET_CORE_APPLICATION_PATH`, `AWS_ECR_ACCOUNT_ID`, `AWS_ECR_REGION`, `AWS_ECS_CLUSTER`, `AWS_ECS_CONTAINERNAME`, `AWS_ECS_FAMILY`, `AWS_ECS_REVISION`, `AWS_LAMBDA_FUNCTION_NAME`, `AWS_REGION`, `APACHE_SPARK_MASTER_IP_ADDRESS`, `APACHE_CONFIG_PATH`, `CATALINA_BASE`, `CATALINA_HOME`, `CLOUD_FOUNDRY_APP_NAME`, `CLOUD_FOUNDRY_APPLICATION_ID`, `CLOUD_FOUNDRY_INSTANCE_INDEX`, `CLOUD_FOUNDRY_SPACE_NAME`, `CLOUD_FOUNDRY_SPACE_ID`, `COLDFUSION_JVM_CONFIG_FILE`, `SERVICE_NAME`, `COMMAND_LINE_ARGS`, `CONTAINER_ID`, `CONTAINER_IMAGE_VERSION`, `CONTAINER_NAME`, `DECLARATIVE_ID`, `CONTAINER_IMAGE_NAME`, `RUXIT_CLUSTER_ID`, `RUXIT_NODE_ID`, `EXE_NAME`, `EXE_PATH`, `ELASTIC_SEARCH_CLUSTER_NAME`, `ELASTIC_SEARCH_NODE_NAME`, `EQUINOX_CONFIG_PATH`, `GLASSFISH_DOMAIN_NAME`, `GLASSFISH_INSTANCE_NAME`, `PG_ID_CALC_INPUT_KEY_LINKAGE`, `GAE_INSTANCE`, `GAE_SERVICE`, `GOOGLE_CLOUD_PROJECT`, `HYBRIS_BIN_DIR`, `HYBRIS_CONFIG_DIR`, `HYBRIS_DATA_DIR`, `IBM_CICS_REGION`, `IBM_CICS_IMS_APPLID`, `IBM_CICS_IMS_JOBNAME`, `IBM_CTG_NAME`, `IBM_IMS_CONNECT`, `IBM_IMS_CONTROL`, `IBM_IMS_MPR`, `IBM_IMS_SOAP_GW_NAME`, `IIB_BROKER_NAME`, `IIB_EXECUTION_GROUP_NAME`, `IIS_APP_POOL`, `IIS_ROLE_NAME`, `JBOSS_HOME`, `JBOSS_MODE`, `JBOSS_SERVER_NAME`, `JAVA_JAR_FILE`, `JAVA_JAR_PATH`, `JAVA_MAIN_CLASS`, `KUBERNETES_BASEPODNAME`, `KUBERNETES_CONTAINERNAME`, `KUBERNETES_FULLPODNAME`, `KUBERNETES_NAMESPACE`, `KUBERNETES_PODUID`, `MSSQL_INSTANCE_NAME`, `NODEJS_APP_NAME`, `NODEJS_APP_BASE_DIR`, `NODEJS_SCRIPT_NAME`, `ORACLE_SID`, `PHP_CLI_SCRIPT_PATH`, `PHP_CLI_WORKING_DIR`, `SOFTWAREAG_INSTALL_ROOT`, `SOFTWAREAG_PRODUCTPROPNAME`, `SPRINGBOOT_APP_NAME`, `SPRINGBOOT_PROFILE_NAME`, `SPRINGBOOT_STARTUP_CLASS`, `TIBCO_BUSINESSWORKS_CE_APP_NAME`, `TIBCO_BUSINESSWORKS_CE_VERSION`, `TIBCO_BUSINESSWORKS_APP_NODE_NAME`, `TIBCO_BUSINESSWORKS_APP_SPACE_NAME`, `TIBCO_BUSINESSWORKS_DOMAIN_NAME`, `TIPCO_BUSINESSWORKS_PROPERTY_FILE`, `TIPCO_BUSINESSWORKS_PROPERTY_FILE_PATH`, `TIBCO_BUSINESSWORKS_HOME`, `VARNISH_INSTANCE_NAME`, `WEBLOGIC_NAME`, `WEBLOGIC_CLUSTER_NAME`, `WEBLOGIC_DOMAIN_NAME`, `WEBLOGIC_HOME`, `WEBSPHERE_LIBERTY_SERVER_NAME`, `WEBSPHERE_CELL_NAME`, `WEBSPHERE_CLUSTER_NAME`, `WEBSPHERE_NODE_NAME`, `WEBSPHERE_SERVER_NAME`
     */
    property?: string;
}

export interface ProcessGroupDetectionInstanceExtractionDelimiter {
    /**
     * Delimit from
     */
    from?: string;
    /**
     * (e.g. versions, hex, dates, and build numbers)
     */
    removeIds: boolean;
    /**
     * Delimit to
     */
    to?: string;
}

export interface ProcessGroupDetectionProcessDetection {
    /**
     * The substring to be contained in the value `property` refers to. Case Sensitive
     */
    containedString: string;
    /**
     * Possible values: `DOTNET_COMMAND`, `DOTNET_COMMAND_PATH`, `ASP_NET_CORE_APPLICATION_PATH`, `AWS_ECR_ACCOUNT_ID`, `AWS_ECR_REGION`, `AWS_ECS_CLUSTER`, `AWS_ECS_CONTAINERNAME`, `AWS_ECS_FAMILY`, `AWS_ECS_REVISION`, `AWS_LAMBDA_FUNCTION_NAME`, `AWS_REGION`, `APACHE_SPARK_MASTER_IP_ADDRESS`, `APACHE_CONFIG_PATH`, `CATALINA_BASE`, `CATALINA_HOME`, `CLOUD_FOUNDRY_APP_NAME`, `CLOUD_FOUNDRY_APPLICATION_ID`, `CLOUD_FOUNDRY_INSTANCE_INDEX`, `CLOUD_FOUNDRY_SPACE_NAME`, `CLOUD_FOUNDRY_SPACE_ID`, `COLDFUSION_JVM_CONFIG_FILE`, `SERVICE_NAME`, `COMMAND_LINE_ARGS`, `CONTAINER_ID`, `CONTAINER_IMAGE_VERSION`, `CONTAINER_NAME`, `DECLARATIVE_ID`, `CONTAINER_IMAGE_NAME`, `RUXIT_CLUSTER_ID`, `RUXIT_NODE_ID`, `EXE_NAME`, `EXE_PATH`, `ELASTIC_SEARCH_CLUSTER_NAME`, `ELASTIC_SEARCH_NODE_NAME`, `EQUINOX_CONFIG_PATH`, `GLASSFISH_DOMAIN_NAME`, `GLASSFISH_INSTANCE_NAME`, `PG_ID_CALC_INPUT_KEY_LINKAGE`, `GAE_INSTANCE`, `GAE_SERVICE`, `GOOGLE_CLOUD_PROJECT`, `HYBRIS_BIN_DIR`, `HYBRIS_CONFIG_DIR`, `HYBRIS_DATA_DIR`, `IBM_CICS_REGION`, `IBM_CICS_IMS_APPLID`, `IBM_CICS_IMS_JOBNAME`, `IBM_CTG_NAME`, `IBM_IMS_CONNECT`, `IBM_IMS_CONTROL`, `IBM_IMS_MPR`, `IBM_IMS_SOAP_GW_NAME`, `IIB_BROKER_NAME`, `IIB_EXECUTION_GROUP_NAME`, `IIS_APP_POOL`, `IIS_ROLE_NAME`, `JBOSS_HOME`, `JBOSS_MODE`, `JBOSS_SERVER_NAME`, `JAVA_JAR_FILE`, `JAVA_JAR_PATH`, `JAVA_MAIN_CLASS`, `KUBERNETES_BASEPODNAME`, `KUBERNETES_CONTAINERNAME`, `KUBERNETES_FULLPODNAME`, `KUBERNETES_NAMESPACE`, `KUBERNETES_PODUID`, `MSSQL_INSTANCE_NAME`, `NODEJS_APP_NAME`, `NODEJS_APP_BASE_DIR`, `NODEJS_SCRIPT_NAME`, `ORACLE_SID`, `PHP_CLI_SCRIPT_PATH`, `PHP_CLI_WORKING_DIR`, `SOFTWAREAG_INSTALL_ROOT`, `SOFTWAREAG_PRODUCTPROPNAME`, `SPRINGBOOT_APP_NAME`, `SPRINGBOOT_PROFILE_NAME`, `SPRINGBOOT_STARTUP_CLASS`, `TIBCO_BUSINESSWORKS_CE_APP_NAME`, `TIBCO_BUSINESSWORKS_CE_VERSION`, `TIBCO_BUSINESSWORKS_APP_NODE_NAME`, `TIBCO_BUSINESSWORKS_APP_SPACE_NAME`, `TIBCO_BUSINESSWORKS_DOMAIN_NAME`, `TIPCO_BUSINESSWORKS_PROPERTY_FILE`, `TIPCO_BUSINESSWORKS_PROPERTY_FILE_PATH`, `TIBCO_BUSINESSWORKS_HOME`, `VARNISH_INSTANCE_NAME`, `WEBLOGIC_NAME`, `WEBLOGIC_CLUSTER_NAME`, `WEBLOGIC_DOMAIN_NAME`, `WEBLOGIC_HOME`, `WEBSPHERE_LIBERTY_SERVER_NAME`, `WEBSPHERE_CELL_NAME`, `WEBSPHERE_CLUSTER_NAME`, `WEBSPHERE_NODE_NAME`, `WEBSPHERE_SERVER_NAME`
     */
    property: string;
    /**
     * Restrict this rule to specific process types. Note: Not all types can be detected at startup. Possible values: `PROCESS_TYPE_APACHE_HTTPD`, `PROCESS_TYPE_GLASSFISH`, `PROCESS_TYPE_GO`, `PROCESS_TYPE_IIS_APP_POOL`, `PROCESS_TYPE_JBOSS`, `PROCESS_TYPE_JAVA`, `PROCESS_TYPE_NGINX`, `PROCESS_TYPE_NODE_JS`, `PROCESS_TYPE_PHP`, `PROCESS_TYPE_TOMCAT`, `PROCESS_TYPE_WEBLOGIC`, `PROCESS_TYPE_WEBSPHERE`
     */
    restrictToProcessType?: string;
}

export interface ProcessMonitoringRuleCondition {
    /**
     * supported only with OneAgent 1.167+
     */
    envVar?: string;
    /**
     * Possible Values: `APACHE_CONFIG_PATH`, `APACHE_SPARK_MASTER_IP_ADDRESS`, `ASP_NET_CORE_APPLICATION_PATH`, `AWS_ECR_ACCOUNT_ID`, `AWS_ECR_REGION`, `AWS_ECS_CLUSTER`, `AWS_ECS_CONTAINERNAME`, `AWS_ECS_FAMILY`, `AWS_ECS_REVISION`, `AWS_LAMBDA_FUNCTION_NAME`, `AWS_REGION`, `AZURE_CONTAINER_APP_ENV_DNS_SUFFIX`, `AZURE_CONTAINER_APP_NAME`, `CATALINA_BASE`, `CATALINA_HOME`, `CLOUD_FOUNDRY_APPLICATION_ID`, `CLOUD_FOUNDRY_APP_NAME`, `CLOUD_FOUNDRY_INSTANCE_INDEX`, `CLOUD_FOUNDRY_SPACE_ID`, `CLOUD_FOUNDRY_SPACE_NAME`, `COLDFUSION_JVM_CONFIG_FILE`, `COMMAND_LINE_ARGS`, `CONTAINER_ID`, `CONTAINER_IMAGE_NAME`, `CONTAINER_IMAGE_VERSION`, `CONTAINER_NAME`, `DATASOURCE_MONITORING_CONFIG_ID`, `DECLARATIVE_ID`, `DOTNET_COMMAND`, `DOTNET_COMMAND_PATH`, `ELASTIC_SEARCH_CLUSTER_NAME`, `ELASTIC_SEARCH_NODE_NAME`, `EQUINOX_CONFIG_PATH`, `EXE_NAME`, `EXE_PATH`, `GAE_INSTANCE`, `GAE_SERVICE`, `GLASSFISH_DOMAIN_NAME`, `GLASSFISH_INSTANCE_NAME`, `GOOGLE_CLOUD_PROJECT`, `HYBRIS_BIN_DIR`, `HYBRIS_CONFIG_DIR`, `HYBRIS_DATA_DIR`, `IBM_APPLID`, `IBM_CICS_IMS_APPLID`, `IBM_CICS_IMS_JOBNAME`, `IBM_CICS_REGION`, `IBM_CTG_NAME`, `IBM_IMS_CONNECT`, `IBM_IMS_CONTROL`, `IBM_IMS_MPR`, `IBM_IMS_SOAP_GW_NAME`, `IBM_JOBNAME`, `IIB_BROKER_NAME`, `IIB_EXECUTION_GROUP_NAME`, `IIS_APP_POOL`, `IIS_ROLE_NAME`, `JAVA_JAR_FILE`, `JAVA_JAR_PATH`, `JAVA_MAIN_CLASS`, `JBOSS_HOME`, `JBOSS_MODE`, `JBOSS_SERVER_NAME`, `KUBERNETES_BASEPODNAME`, `KUBERNETES_CONTAINERNAME`, `KUBERNETES_FULLPODNAME`, `KUBERNETES_NAMESPACE`, `KUBERNETES_PODUID`, `MSSQL_INSTANCE_NAME`, `NODEJS_APP_BASE_DIR`, `NODEJS_APP_NAME`, `NODEJS_SCRIPT_NAME`, `ORACLE_SID`, `PG_ID_CALC_INPUT_KEY_LINKAGE`, `PHP_CLI_SCRIPT_PATH`, `PHP_CLI_WORKING_DIR`, `PYTHON_MODULE`, `PYTHON_SCRIPT`, `PYTHON_SCRIPT_PATH`, `RKE2_TYPE`, `RUXIT_CLUSTER_ID`, `RUXIT_NODE_ID`, `SERVICE_NAME`, `SOFTWAREAG_INSTALL_ROOT`, `SOFTWAREAG_PRODUCTPROPNAME`, `SPRINGBOOT_APP_NAME`, `SPRINGBOOT_PROFILE_NAME`, `SPRINGBOOT_STARTUP_CLASS`, `TIBCO_BUSINESSWORKS_APP_NODE_NAME`, `TIBCO_BUSINESSWORKS_APP_SPACE_NAME`, `TIBCO_BUSINESSWORKS_CE_APP_NAME`, `TIBCO_BUSINESSWORKS_CE_VERSION`, `TIBCO_BUSINESSWORKS_DOMAIN_NAME`, `TIBCO_BUSINESSWORKS_HOME`, `TIPCO_BUSINESSWORKS_PROPERTY_FILE`, `TIPCO_BUSINESSWORKS_PROPERTY_FILE_PATH`, `UNKNOWN`, `VARNISH_INSTANCE_NAME`, `WEBLOGIC_CLUSTER_NAME`, `WEBLOGIC_DOMAIN_NAME`, `WEBLOGIC_HOME`, `WEBLOGIC_NAME`, `WEBSPHERE_CELL_NAME`, `WEBSPHERE_CLUSTER_NAME`, `WEBSPHERE_LIBERTY_SERVER_NAME`, `WEBSPHERE_NODE_NAME`, `WEBSPHERE_SERVER_NAME`, `Z_CM_VERSION`
     */
    item: string;
    /**
     * Possible Values: `CONTAINS`, `ENDS`, `EQUALS`, `EXISTS`, `NOT_CONTAINS`, `NOT_ENDS`, `NOT_EQUALS`, `NOT_EXISTS`, `NOT_STARTS`, `STARTS`
     */
    operator: string;
    /**
     * Condition value
     */
    value?: string;
}

export interface ProcessgroupNamingCondition {
    /**
     * A conditions for the metric usage
     */
    conditions?: outputs.ProcessgroupNamingConditionCondition[];
}

export interface ProcessgroupNamingConditionCondition {
    /**
     * Comparison for `APPLICATION_TYPE` attributes
     *
     * @deprecated You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility.
     */
    applicationTypeComparisons?: outputs.ProcessgroupNamingConditionConditionApplicationTypeComparison[];
    /**
     * Comparison for `APPLICATION_TYPE` attributes
     */
    applicationTypes?: outputs.ProcessgroupNamingConditionConditionApplicationType[];
    /**
     * Comparison for `AZURE_COMPUTE_MODE` attributes
     */
    azureComputeModeComparisons?: outputs.ProcessgroupNamingConditionConditionAzureComputeModeComparison[];
    /**
     * Comparison for `AZURE_COMPUTE_MODE` attributes
     *
     * @deprecated You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility.
     */
    azureComputeModes?: outputs.ProcessgroupNamingConditionConditionAzureComputeMode[];
    /**
     * Comparison for `AZURE_SKU` attributes
     *
     * @deprecated You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility.
     */
    azureSkuComparisions?: outputs.ProcessgroupNamingConditionConditionAzureSkuComparision[];
    /**
     * Comparison for `AZURE_SKU` attributes
     */
    azureSkus?: outputs.ProcessgroupNamingConditionConditionAzureSkus[];
    /**
     * A comparison that's yet unknown to the provider. Operator and Value need to be encoded using the 'unknowns' property.
     *
     * @deprecated You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility.
     */
    baseComparisonBasics?: outputs.ProcessgroupNamingConditionConditionBaseComparisonBasic[];
    /**
     * Fallback for not yet known type
     *
     * @deprecated 'base_condition_key' is deprecated. You should use 'key'
     */
    baseConditionKeys?: outputs.ProcessgroupNamingConditionConditionBaseConditionKey[];
    /**
     * Comparison for `BITNESS` attributes
     *
     * @deprecated You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility.
     */
    bitnessComparisions?: outputs.ProcessgroupNamingConditionConditionBitnessComparision[];
    /**
     * Comparison for `BITNESS` attributes
     */
    bitnesses?: outputs.ProcessgroupNamingConditionConditionBitness[];
    /**
     * Comparison for `CLOUD_TYPE` attributes
     *
     * @deprecated You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility.
     */
    cloudTypeComparisons?: outputs.ProcessgroupNamingConditionConditionCloudTypeComparison[];
    /**
     * Comparison for `CLOUD_TYPE` attributes
     */
    cloudTypes?: outputs.ProcessgroupNamingConditionConditionCloudType[];
    /**
     * A comparison that's yet unknown to the provider. Operator and Value need to be encoded using the 'unknowns' property.
     */
    comparisons?: outputs.ProcessgroupNamingConditionConditionComparison[];
    /**
     * Comparison for `CUSTOM_APPLICATION_TYPE` attributes
     *
     * @deprecated You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility.
     */
    customApplicationTypeComparisons?: outputs.ProcessgroupNamingConditionConditionCustomApplicationTypeComparison[];
    /**
     * Comparison for `CUSTOM_APPLICATION_TYPE` attributes
     */
    customApplicationTypes?: outputs.ProcessgroupNamingConditionConditionCustomApplicationType[];
    /**
     * Key for Custom Host Metadata
     *
     * @deprecated 'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata'
     */
    customHostMetadataConditionKeys?: outputs.ProcessgroupNamingConditionConditionCustomHostMetadataConditionKey[];
    /**
     * Key for Custom Host Metadata
     */
    customHostMetadatas?: outputs.ProcessgroupNamingConditionConditionCustomHostMetadata[];
    /**
     * Key for Custom Process Metadata
     *
     * @deprecated 'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata'
     */
    customProcessMetadataConditionKeys?: outputs.ProcessgroupNamingConditionConditionCustomProcessMetadataConditionKey[];
    /**
     * Key for Custom Process Metadata
     */
    customProcessMetadatas?: outputs.ProcessgroupNamingConditionConditionCustomProcessMetadata[];
    /**
     * Comparison for `DATABASE_TOPOLOGY` attributes
     */
    databaseTopologies?: outputs.ProcessgroupNamingConditionConditionDatabaseTopology[];
    /**
     * Comparison for `DATABASE_TOPOLOGY` attributes
     *
     * @deprecated You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility.
     */
    databaseTopologyComparisons?: outputs.ProcessgroupNamingConditionConditionDatabaseTopologyComparison[];
    /**
     * Comparison for `DCRUM_DECODER_TYPE` attributes
     *
     * @deprecated You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility.
     */
    dcrumDecoderComparisons?: outputs.ProcessgroupNamingConditionConditionDcrumDecoderComparison[];
    /**
     * Comparison for `DCRUM_DECODER_TYPE` attributes
     */
    dcrumDecoders?: outputs.ProcessgroupNamingConditionConditionDcrumDecoder[];
    /**
     * Comparison for `ENTITY_ID` attributes
     */
    entities?: outputs.ProcessgroupNamingConditionConditionEntity[];
    /**
     * Comparison for `ENTITY_ID` attributes
     *
     * @deprecated You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility.
     */
    entityIdComparisons?: outputs.ProcessgroupNamingConditionConditionEntityIdComparison[];
    /**
     * Comparison for `SIMPLE_HOST_TECH` attributes
     */
    hostTeches?: outputs.ProcessgroupNamingConditionConditionHostTech[];
    /**
     * `hypervisorTypeComparision` is deprecated. Use `hypervisor` instead
     *
     * @deprecated `hypervisorTypeComparision` is deprecated. Use `hypervisor` instead
     */
    hypervisorTypeComparisions?: outputs.ProcessgroupNamingConditionConditionHypervisorTypeComparision[];
    /**
     * Comparison for `HYPERVISOR_TYPE` attributes
     */
    hypervisors?: outputs.ProcessgroupNamingConditionConditionHypervisor[];
    /**
     * Comparison for `INDEXED_NAME` attributes
     *
     * @deprecated You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedNameComparisons?: outputs.ProcessgroupNamingConditionConditionIndexedNameComparison[];
    /**
     * Comparison for `INDEXED_NAME` attributes
     */
    indexedNames?: outputs.ProcessgroupNamingConditionConditionIndexedName[];
    /**
     * Comparison for `INDEXED_STRING` attributes
     *
     * @deprecated You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedStringComparisons?: outputs.ProcessgroupNamingConditionConditionIndexedStringComparison[];
    /**
     * Comparison for `INDEXED_STRING` attributes
     */
    indexedStrings?: outputs.ProcessgroupNamingConditionConditionIndexedString[];
    /**
     * Comparison for `INDEXED_TAG` attributes
     *
     * @deprecated You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedTagComparisons?: outputs.ProcessgroupNamingConditionConditionIndexedTagComparison[];
    /**
     * Comparison for `INDEXED_TAG` attributes
     */
    indexedTags?: outputs.ProcessgroupNamingConditionConditionIndexedTag[];
    /**
     * Comparison for `INTEGER` attributes
     *
     * @deprecated You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility.
     */
    integerComparisons?: outputs.ProcessgroupNamingConditionConditionIntegerComparison[];
    /**
     * Comparison for `INTEGER` attributes
     */
    integers?: outputs.ProcessgroupNamingConditionConditionInteger[];
    /**
     * Comparison for `IP_ADDRESS` attributes
     *
     * @deprecated You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility.
     */
    ipaddressComparisons?: outputs.ProcessgroupNamingConditionConditionIpaddressComparison[];
    /**
     * Comparison for `IP_ADDRESS` attributes
     */
    ipaddresses?: outputs.ProcessgroupNamingConditionConditionIpaddress[];
    /**
     * Fallback for not yet known type
     */
    keys?: outputs.ProcessgroupNamingConditionConditionKey[];
    /**
     * Comparison for `MOBILE_PLATFORM` attributes
     *
     * @deprecated You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility.
     */
    mobilePlatformComparisons?: outputs.ProcessgroupNamingConditionConditionMobilePlatformComparison[];
    /**
     * Comparison for `MOBILE_PLATFORM` attributes
     */
    mobilePlatforms?: outputs.ProcessgroupNamingConditionConditionMobilePlatform[];
    /**
     * Comparison for `OS_ARCHITECTURE` attributes
     */
    osArches?: outputs.ProcessgroupNamingConditionConditionOsArch[];
    /**
     * Comparison for `OS_TYPE` attributes
     */
    osTypes?: outputs.ProcessgroupNamingConditionConditionOsType[];
    /**
     * Comparison for `OS_ARCHITECTURE` attributes
     *
     * @deprecated You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility.
     */
    osarchitectureComparisons?: outputs.ProcessgroupNamingConditionConditionOsarchitectureComparison[];
    /**
     * Comparison for `OS_TYPE` attributes
     *
     * @deprecated You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility.
     */
    ostypeComparisons?: outputs.ProcessgroupNamingConditionConditionOstypeComparison[];
    /**
     * Comparison for `PAAS_TYPE` attributes
     *
     * @deprecated You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility.
     */
    paasTypeComparisons?: outputs.ProcessgroupNamingConditionConditionPaasTypeComparison[];
    /**
     * Comparison for `PAAS_TYPE` attributes
     */
    paasTypes?: outputs.ProcessgroupNamingConditionConditionPaasType[];
    /**
     * The key for dynamic attributes of the `PROCESS_PREDEFINED_METADATA_KEY` type
     *
     * @deprecated 'process_metadata_condition_key' is deprecated. You should use 'process_metadata'
     */
    processMetadataConditionKeys?: outputs.ProcessgroupNamingConditionConditionProcessMetadataConditionKey[];
    /**
     * The key for dynamic attributes of the `PROCESS_PREDEFINED_METADATA_KEY` type
     */
    processMetadatas?: outputs.ProcessgroupNamingConditionConditionProcessMetadata[];
    /**
     * Comparison for `SERVICE_TOPOLOGY` attributes
     */
    serviceTopologies?: outputs.ProcessgroupNamingConditionConditionServiceTopology[];
    /**
     * Comparison for `SERVICE_TOPOLOGY` attributes
     *
     * @deprecated You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility.
     */
    serviceTopologyComparisons?: outputs.ProcessgroupNamingConditionConditionServiceTopologyComparison[];
    /**
     * Comparison for `SERVICE_TYPE` attributes
     *
     * @deprecated You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility.
     */
    serviceTypeComparisons?: outputs.ProcessgroupNamingConditionConditionServiceTypeComparison[];
    /**
     * Comparison for `SERVICE_TYPE` attributes
     */
    serviceTypes?: outputs.ProcessgroupNamingConditionConditionServiceType[];
    /**
     * Comparison for `SIMPLE_HOST_TECH` attributes
     *
     * @deprecated You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility.
     */
    simpleHostTechComparisons?: outputs.ProcessgroupNamingConditionConditionSimpleHostTechComparison[];
    /**
     * Comparison for `SIMPLE_TECH` attributes
     *
     * @deprecated You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility.
     */
    simpleTechComparisons?: outputs.ProcessgroupNamingConditionConditionSimpleTechComparison[];
    /**
     * Comparison for `STRING` attributes
     *
     * @deprecated You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility.
     */
    stringComparisons?: outputs.ProcessgroupNamingConditionConditionStringComparison[];
    /**
     * The key for dynamic attributes of the `STRING` type
     *
     * @deprecated 'string_condition_key' is deprecated. You should use 'string_key'
     */
    stringConditionKeys?: outputs.ProcessgroupNamingConditionConditionStringConditionKey[];
    /**
     * The key for dynamic attributes of the `STRING` type
     */
    stringKeys?: outputs.ProcessgroupNamingConditionConditionStringKey[];
    /**
     * Comparison for `STRING` attributes
     */
    strings?: outputs.ProcessgroupNamingConditionConditionString[];
    /**
     * Comparison for `SYNTHETIC_ENGINE_TYPE` attributes
     *
     * @deprecated You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility.
     */
    syntheticEngineTypeComparisons?: outputs.ProcessgroupNamingConditionConditionSyntheticEngineTypeComparison[];
    /**
     * Comparison for `SYNTHETIC_ENGINE_TYPE` attributes
     */
    syntheticEngines?: outputs.ProcessgroupNamingConditionConditionSyntheticEngine[];
    /**
     * Comparison for `TAG` attributes
     *
     * @deprecated You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility.
     */
    tagComparisons?: outputs.ProcessgroupNamingConditionConditionTagComparison[];
    /**
     * Comparison for `TAG` attributes
     */
    tags?: outputs.ProcessgroupNamingConditionConditionTag[];
    /**
     * Comparison for `SIMPLE_TECH` attributes
     */
    teches?: outputs.ProcessgroupNamingConditionConditionTech[];
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
}

export interface ProcessgroupNamingConditionConditionApplicationType {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionApplicationTypeComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be APPLICATION_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionAzureComputeMode {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are DEDICATED or SHARED.
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionAzureComputeModeComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are DEDICATED or SHARED.
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionAzureSkuComparision {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be AZURE_SKU
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are BASIC, DYNAMIC, FREE, PREMIUM, SHARED and STANDARD.
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionAzureSkus {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are BASIC, DYNAMIC, FREE, PREMIUM, SHARED and STANDARD.
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionBaseComparisonBasic {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * The type of comparison
     */
    type: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ProcessgroupNamingConditionConditionBaseConditionKey {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * Defines the actual set of fields depending on the value
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ProcessgroupNamingConditionConditionBitness {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are 32 and 64.
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionBitnessComparision {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be BITNESS
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are 32 and 64.
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionCloudType {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AZURE, EC2, GOOGLE_CLOUD_PLATFORM, OPENSTACK, ORACLE and UNRECOGNIZED.
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionCloudTypeComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be CLOUD_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AZURE, EC2, GOOGLE_CLOUD_PLATFORM, OPENSTACK, ORACLE and UNRECOGNIZED.
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * The type of comparison
     */
    type: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ProcessgroupNamingConditionConditionCustomApplicationType {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AMAZON_ECHO, DESKTOP, EMBEDDED, IOT, MICROSOFT_HOLOLENS and UFO.
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionCustomApplicationTypeComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be CUSTOM_APPLICATION_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AMAZON_ECHO, DESKTOP, EMBEDDED, IOT, MICROSOFT_HOLOLENS and UFO.
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionCustomHostMetadata {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
     */
    dynamicKey: outputs.ProcessgroupNamingConditionConditionCustomHostMetadataDynamicKey;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ProcessgroupNamingConditionConditionCustomHostMetadataConditionKey {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
     */
    dynamicKey: outputs.ProcessgroupNamingConditionConditionCustomHostMetadataConditionKeyDynamicKey;
    /**
     * if specified, needs to be HOST_CUSTOM_METADATA_KEY
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ProcessgroupNamingConditionConditionCustomHostMetadataConditionKeyDynamicKey {
    /**
     * The actual key of the custom metadata
     */
    key: string;
    /**
     * The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
     */
    source: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ProcessgroupNamingConditionConditionCustomHostMetadataDynamicKey {
    /**
     * The actual key of the custom metadata
     */
    key: string;
    /**
     * The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
     */
    source: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ProcessgroupNamingConditionConditionCustomProcessMetadata {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
     */
    dynamicKey: outputs.ProcessgroupNamingConditionConditionCustomProcessMetadataDynamicKey;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ProcessgroupNamingConditionConditionCustomProcessMetadataConditionKey {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
     */
    dynamicKey: outputs.ProcessgroupNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKey;
    /**
     * if specified, needs to be PROCESS_CUSTOM_METADATA_KEY
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ProcessgroupNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKey {
    /**
     * The actual key of the custom metadata
     */
    key: string;
    /**
     * The source of the custom metadata. Possible values are CLOUD_FOUNDRY, ENVIRONMENT, GOOGLE_CLOUD, KUBERNETES and PLUGIN
     */
    source: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ProcessgroupNamingConditionConditionCustomProcessMetadataDynamicKey {
    /**
     * The actual key of the custom metadata
     */
    key: string;
    /**
     * The source of the custom metadata. Possible values are CLOUD_FOUNDRY, ENVIRONMENT, GOOGLE_CLOUD, KUBERNETES and PLUGIN
     */
    source: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ProcessgroupNamingConditionConditionDatabaseTopology {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are CLUSTER, EMBEDDED, FAILOVER, IPC, LOAD_BALANCING, SINGLE_SERVER and UNSPECIFIED.
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionDatabaseTopologyComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be DATABASE_TOPOLOGY
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are CLUSTER, EMBEDDED, FAILOVER, IPC, LOAD_BALANCING, SINGLE_SERVER and UNSPECIFIED.
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionDcrumDecoder {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are ALL_OTHER, CITRIX_APPFLOW, CITRIX_ICA, CITRIX_ICA_OVER_SSL, DB2_DRDA, HTTP, HTTPS, HTTP_EXPRESS, INFORMIX, MYSQL, ORACLE, SAP_GUI, SAP_GUI_OVER_HTTP, SAP_GUI_OVER_HTTPS, SAP_HANA_DB, SAP_RFC, SSL and TDS.
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionDcrumDecoderComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be DCRUM_DECODER_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are ALL_OTHER, CITRIX_APPFLOW, CITRIX_ICA, CITRIX_ICA_OVER_SSL, DB2_DRDA, HTTP, HTTPS, HTTP_EXPRESS, INFORMIX, MYSQL, ORACLE, SAP_GUI, SAP_GUI_OVER_HTTP, SAP_GUI_OVER_HTTPS, SAP_HANA_DB, SAP_RFC, SSL and TDS.
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionEntity {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Currently only EQUALS is supported. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionEntityIdComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Currently only EQUALS is supported. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be ENTITY_ID
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionHostTech {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: outputs.ProcessgroupNamingConditionConditionHostTechValue;
}

export interface ProcessgroupNamingConditionConditionHostTechValue {
    /**
     * Predefined technology, if technology is not predefined, then the verbatim type must be set. Possible values are APPARMOR, BOSH, BOSHBPM, CLOUDFOUNDRY, CONTAINERD, CRIO, DIEGO_CELL, DOCKER, GARDEN, GRSECURITY, KUBERNETES, OPENSHIFT, OPENSTACK_COMPUTE, OPENSTACK_CONTROLLER and SELINUX
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * Non-predefined technology, use for custom technologies
     */
    verbatimType?: string;
}

export interface ProcessgroupNamingConditionConditionHypervisor {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AHV, HYPER_V, KVM, LPAR, QEMU, VIRTUAL_BOX, VMWARE, WPAR and XEN.
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionHypervisorTypeComparision {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be HYPERVISOR_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AHV, HYPER_V, KVM, LPAR, QEMU, VIRTUAL_BOX, VMWARE, WPAR and XEN.
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionIndexedName {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS, CONTAINS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionIndexedNameComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS, CONTAINS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be INDEXED_NAME
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionIndexedString {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionIndexedStringComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be INDEXED_STRING
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionIndexedTag {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * Tag of a Dynatrace entity
     */
    value?: outputs.ProcessgroupNamingConditionConditionIndexedTagValue;
}

export interface ProcessgroupNamingConditionConditionIndexedTagComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be INDEXED_TAG
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * Tag of a Dynatrace entity
     */
    value?: outputs.ProcessgroupNamingConditionConditionIndexedTagComparisonValue;
}

export interface ProcessgroupNamingConditionConditionIndexedTagComparisonValue {
    /**
     * The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
     */
    context: string;
    /**
     * The key of the tag. Custom tags have the tag value here
     */
    key: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value of the tag. Not applicable to custom tags
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionIndexedTagValue {
    /**
     * The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
     */
    context: string;
    /**
     * The key of the tag. Custom tags have the tag value here
     */
    key: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value of the tag. Not applicable to custom tags
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionInteger {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS, EXISTS, GREATER_THAN, GREATER_THAN_OR_EQUAL, LOWER_THAN and LOWER_THAN_OR_EQUAL. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: number;
}

export interface ProcessgroupNamingConditionConditionIntegerComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS, EXISTS, GREATER_THAN, GREATER_THAN_OR_EQUAL, LOWER_THAN and LOWER_THAN_OR_EQUAL. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be INTEGER
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: number;
}

export interface ProcessgroupNamingConditionConditionIpaddress {
    /**
     * The comparison is case-sensitive (`true`) or insensitive (`false`)
     */
    caseSensitive?: boolean;
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS, IS_IP_IN_RANGE and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionIpaddressComparison {
    /**
     * The comparison is case-sensitive (`true`) or insensitive (`false`)
     */
    caseSensitive?: boolean;
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS, IS_IP_IN_RANGE and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be IP_ADDRESS
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionKey {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * Defines the actual set of fields depending on the value
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ProcessgroupNamingConditionConditionMobilePlatform {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are ANDROID, IOS, LINUX, MAC_OS, OTHER, TVOS and WINDOWS.
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionMobilePlatformComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be MOBILE_PLATFORM
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are ANDROID, IOS, LINUX, MAC_OS, OTHER, TVOS and WINDOWS.
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionOsArch {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are ARM, IA64, PARISC, PPC, PPCLE, S390, SPARC, X86 and ZOS.
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionOsType {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AIX, DARWIN, HPUX, LINUX, SOLARIS, WINDOWS and ZOS.
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionOsarchitectureComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be OS_ARCHITECTURE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are ARM, IA64, PARISC, PPC, PPCLE, S390, SPARC, X86 and ZOS.
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionOstypeComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be OS_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AIX, DARWIN, HPUX, LINUX, SOLARIS, WINDOWS and ZOS.
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionPaasType {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AWS_ECS_EC2, AWS_ECS_FARGATE, AWS_LAMBDA, AZURE_FUNCTIONS, AZURE_WEBSITES, CLOUD_FOUNDRY, GOOGLE_APP_ENGINE, HEROKU, KUBERNETES and OPENSHIFT.
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionPaasTypeComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be PAAS_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AWS_ECS_EC2, AWS_ECS_FARGATE, AWS_LAMBDA, AZURE_FUNCTIONS, AZURE_WEBSITES, CLOUD_FOUNDRY, GOOGLE_APP_ENGINE, HEROKU, KUBERNETES and OPENSHIFT.
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionProcessMetadata {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are AMAZON_ECR_IMAGE_ACCOUNT_ID,AMAZON_ECR_IMAGE_REGION, AMAZON_LAMBDA_FUNCTION_NAME, AMAZON_REGION, APACHE_CONFIG_PATH, APACHE_SPARK_MASTER_IP_ADDRESS, ASP_DOT_NET_CORE_APPLICATION_PATH, AWS_ECS_CLUSTER, AWS_ECS_CONTAINERNAME, AWS_ECS_FAMILY, AWS_ECS_REVISION, CASSANDRA_CLUSTER_NAME, CATALINA_BASE, CATALINA_HOME, CLOUD_FOUNDRY_APP_ID, CLOUD_FOUNDRY_APP_NAME, CLOUD_FOUNDRY_INSTANCE_INDEX, CLOUD_FOUNDRY_SPACE_ID, CLOUD_FOUNDRY_SPACE_NAME, COLDFUSION_JVM_CONFIG_FILE, COLDFUSION_SERVICE_NAME, COMMAND_LINE_ARGS, DOTNET_COMMAND, DOTNET_COMMAND_PATH, DYNATRACE_CLUSTER_ID, DYNATRACE_NODE_ID, ELASTICSEARCH_CLUSTER_NAME, ELASTICSEARCH_NODE_NAME, EQUINOX_CONFIG_PATH, EXE_NAME, EXE_PATH, GLASS_FISH_DOMAIN_NAME, GLASS_FISH_INSTANCE_NAME, GOOGLE_APP_ENGINE_INSTANCE, GOOGLE_APP_ENGINE_SERVICE, GOOGLE_CLOUD_PROJECT, HYBRIS_BIN_DIRECTORY, HYBRIS_CONFIG_DIRECTORY, HYBRIS_DATA_DIRECTORY, IBM_CICS_REGION, IBM_CTG_NAME, IBM_IMS_CONNECT_REGION, IBM_IMS_CONTROL_REGION, IBM_IMS_MESSAGE_PROCESSING_REGION, IBM_IMS_SOAP_GW_NAME, IBM_INTEGRATION_NODE_NAME, IBM_INTEGRATION_SERVER_NAME, IIS_APP_POOL, IIS_ROLE_NAME, JAVA_JAR_FILE, JAVA_JAR_PATH, JAVA_MAIN_CLASS, JAVA_MAIN_MODULE, JBOSS_HOME, JBOSS_MODE, JBOSS_SERVER_NAME, KUBERNETES_BASE_POD_NAME, KUBERNETES_CONTAINER_NAME, KUBERNETES_FULL_POD_NAME, KUBERNETES_NAMESPACE, KUBERNETES_POD_UID, MSSQL_INSTANCE_NAME, NODE_JS_APP_BASE_DIRECTORY, NODE_JS_APP_NAME, NODE_JS_SCRIPT_NAME, ORACLE_SID, PG_ID_CALC_INPUT_KEY_LINKAGE, PHP_SCRIPT_PATH, PHP_WORKING_DIRECTORY, RUBY_APP_ROOT_PATH, RUBY_SCRIPT_PATH, RULE_RESULT, SOFTWAREAG_INSTALL_ROOT, SOFTWAREAG_PRODUCTPROPNAME, SPRINGBOOT_APP_NAME, SPRINGBOOT_PROFILE_NAME, SPRINGBOOT_STARTUP_CLASS, TIBCO_BUSINESSWORKS_CE_APP_NAME, TIBCO_BUSINESSWORKS_CE_VERSION, TIBCO_BUSINESS_WORKS_APP_NODE_NAME, TIBCO_BUSINESS_WORKS_APP_SPACE_NAME, TIBCO_BUSINESS_WORKS_DOMAIN_NAME, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH, TIBCO_BUSINESS_WORKS_HOME, VARNISH_INSTANCE_NAME, WEB_LOGIC_CLUSTER_NAME, WEB_LOGIC_DOMAIN_NAME, WEB_LOGIC_HOME, WEB_LOGIC_NAME, WEB_SPHERE_CELL_NAME, WEB_SPHERE_CLUSTER_NAME, WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME
     */
    dynamicKey: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ProcessgroupNamingConditionConditionProcessMetadataConditionKey {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are AMAZON_ECR_IMAGE_ACCOUNT_ID,AMAZON_ECR_IMAGE_REGION, AMAZON_LAMBDA_FUNCTION_NAME, AMAZON_REGION, APACHE_CONFIG_PATH, APACHE_SPARK_MASTER_IP_ADDRESS, ASP_DOT_NET_CORE_APPLICATION_PATH, AWS_ECS_CLUSTER, AWS_ECS_CONTAINERNAME, AWS_ECS_FAMILY, AWS_ECS_REVISION, CASSANDRA_CLUSTER_NAME, CATALINA_BASE, CATALINA_HOME, CLOUD_FOUNDRY_APP_ID, CLOUD_FOUNDRY_APP_NAME, CLOUD_FOUNDRY_INSTANCE_INDEX, CLOUD_FOUNDRY_SPACE_ID, CLOUD_FOUNDRY_SPACE_NAME, COLDFUSION_JVM_CONFIG_FILE, COLDFUSION_SERVICE_NAME, COMMAND_LINE_ARGS, DOTNET_COMMAND, DOTNET_COMMAND_PATH, DYNATRACE_CLUSTER_ID, DYNATRACE_NODE_ID, ELASTICSEARCH_CLUSTER_NAME, ELASTICSEARCH_NODE_NAME, EQUINOX_CONFIG_PATH, EXE_NAME, EXE_PATH, GLASS_FISH_DOMAIN_NAME, GLASS_FISH_INSTANCE_NAME, GOOGLE_APP_ENGINE_INSTANCE, GOOGLE_APP_ENGINE_SERVICE, GOOGLE_CLOUD_PROJECT, HYBRIS_BIN_DIRECTORY, HYBRIS_CONFIG_DIRECTORY, HYBRIS_DATA_DIRECTORY, IBM_CICS_REGION, IBM_CTG_NAME, IBM_IMS_CONNECT_REGION, IBM_IMS_CONTROL_REGION, IBM_IMS_MESSAGE_PROCESSING_REGION, IBM_IMS_SOAP_GW_NAME, IBM_INTEGRATION_NODE_NAME, IBM_INTEGRATION_SERVER_NAME, IIS_APP_POOL, IIS_ROLE_NAME, JAVA_JAR_FILE, JAVA_JAR_PATH, JAVA_MAIN_CLASS, JAVA_MAIN_MODULE, JBOSS_HOME, JBOSS_MODE, JBOSS_SERVER_NAME, KUBERNETES_BASE_POD_NAME, KUBERNETES_CONTAINER_NAME, KUBERNETES_FULL_POD_NAME, KUBERNETES_NAMESPACE, KUBERNETES_POD_UID, MSSQL_INSTANCE_NAME, NODE_JS_APP_BASE_DIRECTORY, NODE_JS_APP_NAME, NODE_JS_SCRIPT_NAME, ORACLE_SID, PG_ID_CALC_INPUT_KEY_LINKAGE, PHP_SCRIPT_PATH, PHP_WORKING_DIRECTORY, RUBY_APP_ROOT_PATH, RUBY_SCRIPT_PATH, RULE_RESULT, SOFTWAREAG_INSTALL_ROOT, SOFTWAREAG_PRODUCTPROPNAME, SPRINGBOOT_APP_NAME, SPRINGBOOT_PROFILE_NAME, SPRINGBOOT_STARTUP_CLASS, TIBCO_BUSINESSWORKS_CE_APP_NAME, TIBCO_BUSINESSWORKS_CE_VERSION, TIBCO_BUSINESS_WORKS_APP_NODE_NAME, TIBCO_BUSINESS_WORKS_APP_SPACE_NAME, TIBCO_BUSINESS_WORKS_DOMAIN_NAME, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH, TIBCO_BUSINESS_WORKS_HOME, VARNISH_INSTANCE_NAME, WEB_LOGIC_CLUSTER_NAME, WEB_LOGIC_DOMAIN_NAME, WEB_LOGIC_HOME, WEB_LOGIC_NAME, WEB_SPHERE_CELL_NAME, WEB_SPHERE_CLUSTER_NAME, WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME
     */
    dynamicKey: string;
    /**
     * if specified, needs to be PROCESS_PREDEFINED_METADATA_KEY
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ProcessgroupNamingConditionConditionServiceTopology {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are EXTERNAL_SERVICE, FULLY_MONITORED and OPAQUE_SERVICE.
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionServiceTopologyComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be SERVICE_TOPOLOGY
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are EXTERNAL_SERVICE, FULLY_MONITORED and OPAQUE_SERVICE.
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionServiceType {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are BACKGROUND_ACTIVITY, CICS_SERVICE, CUSTOM_SERVICE, DATABASE_SERVICE, ENTERPRISE_SERVICE_BUS_SERVICE, EXTERNAL, IBM_INTEGRATION_BUS_SERVICE, IMS_SERVICE, MESSAGING_SERVICE, QUEUE_LISTENER_SERVICE, RMI_SERVICE, RPC_SERVICE, WEB_REQUEST_SERVICE and WEB_SERVICE.
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionServiceTypeComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be SERVICE_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are BACKGROUND_ACTIVITY, CICS_SERVICE, CUSTOM_SERVICE, DATABASE_SERVICE, ENTERPRISE_SERVICE_BUS_SERVICE, EXTERNAL, IBM_INTEGRATION_BUS_SERVICE, IMS_SERVICE, MESSAGING_SERVICE, QUEUE_LISTENER_SERVICE, RMI_SERVICE, RPC_SERVICE, WEB_REQUEST_SERVICE and WEB_SERVICE.
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionSimpleHostTechComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be SIMPLE_HOST_TECH
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: outputs.ProcessgroupNamingConditionConditionSimpleHostTechComparisonValue;
}

export interface ProcessgroupNamingConditionConditionSimpleHostTechComparisonValue {
    /**
     * Predefined technology, if technology is not predefined, then the verbatim type must be set. Possible values are APPARMOR, BOSH, BOSHBPM, CLOUDFOUNDRY, CONTAINERD, CRIO, DIEGO_CELL, DOCKER, GARDEN, GRSECURITY, KUBERNETES, OPENSHIFT, OPENSTACK_COMPUTE, OPENSTACK_CONTROLLER and SELINUX
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * Non-predefined technology, use for custom technologies
     */
    verbatimType?: string;
}

export interface ProcessgroupNamingConditionConditionSimpleTechComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be SIMPLE_TECH
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: outputs.ProcessgroupNamingConditionConditionSimpleTechComparisonValue;
}

export interface ProcessgroupNamingConditionConditionSimpleTechComparisonValue {
    /**
     * Predefined technology, if technology is not predefined, then the verbatim type must be set.
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * Non-predefined technology, use for custom technologies
     */
    verbatimType?: string;
}

export interface ProcessgroupNamingConditionConditionString {
    /**
     * The comparison is case-sensitive (`true`) or insensitive (`false`)
     */
    caseSensitive?: boolean;
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionStringComparison {
    /**
     * The comparison is case-sensitive (`true`) or insensitive (`false`)
     */
    caseSensitive?: boolean;
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be STRING
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionStringConditionKey {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are
     *    - `AMAZON_ECR_IMAGE_ACCOUNT_ID`
     *    - `AMAZON_ECR_IMAGE_REGION`
     *    - `AMAZON_LAMBDA_FUNCTION_NAME`
     *    - `AMAZON_REGION`
     *    - `APACHE_CONFIG_PATH`
     *    - `APACHE_SPARK_MASTER_IP_ADDRESS`
     *    - `ASP_DOT_NET_CORE_APPLICATION_PATH`
     *    - `AWS_ECS_CLUSTER`
     *    - `AWS_ECS_CONTAINERNAME`
     *    - `AWS_ECS_FAMILY`
     *    - `AWS_ECS_REVISION`
     *    - `CASSANDRA_CLUSTER_NAME`
     *    - `CATALINA_BASE`
     *    - `CATALINA_HOME`
     *    - `CLOUD_FOUNDRY_APP_ID`
     *    - `CLOUD_FOUNDRY_APP_NAME`
     *    - `CLOUD_FOUNDRY_INSTANCE_INDEX`
     *    - `CLOUD_FOUNDRY_SPACE_ID`
     *    - `CLOUD_FOUNDRY_SPACE_NAME`
     *    - `COLDFUSION_JVM_CONFIG_FILE`
     *    - `COLDFUSION_SERVICE_NAME`
     *    - `COMMAND_LINE_ARGS`
     *    - `DOTNET_COMMAND`
     *    - `DOTNET_COMMAND_PATH`
     *    - `DYNATRACE_CLUSTER_ID`
     *    - `DYNATRACE_NODE_ID`
     *    - `ELASTICSEARCH_CLUSTER_NAME`
     *    - `ELASTICSEARCH_NODE_NAME`
     *    - `EQUINOX_CONFIG_PATH`
     *    - `EXE_NAME`
     *    - `EXE_PATH`
     *    - `GLASS_FISH_DOMAIN_NAME`
     *    - `GLASS_FISH_INSTANCE_NAME`
     *    - `GOOGLE_APP_ENGINE_INSTANCE`
     *    - `GOOGLE_APP_ENGINE_SERVICE`
     *    - `GOOGLE_CLOUD_PROJECT`
     *    - `HYBRIS_BIN_DIRECTORY`
     *    - `HYBRIS_CONFIG_DIRECTORY`
     *    - `HYBRIS_DATA_DIRECTORY`
     *    - `IBM_CICS_REGION`
     *    - `IBM_CTG_NAME`
     *    - `IBM_IMS_CONNECT_REGION`
     *    - `IBM_IMS_CONTROL_REGION`
     *    - `IBM_IMS_MESSAGE_PROCESSING_REGION`
     *    - `IBM_IMS_SOAP_GW_NAME`
     *    - `IBM_INTEGRATION_NODE_NAME`
     *    - `IBM_INTEGRATION_SERVER_NAME`
     *    - `IIS_APP_POOL`
     *    - `IIS_ROLE_NAME`
     *    - `JAVA_JAR_FILE`
     *    - `JAVA_JAR_PATH`
     *    - `JAVA_MAIN_CLASS`
     *    - `JAVA_MAIN_MODULE`
     *    - `JBOSS_HOME`
     *    - `JBOSS_MODE`
     *    - `JBOSS_SERVER_NAME`
     *    - `KUBERNETES_BASE_POD_NAME`
     *    - `KUBERNETES_CONTAINER_NAME`
     *    - `KUBERNETES_FULL_POD_NAME`
     *    - `KUBERNETES_NAMESPACE`
     *    - `KUBERNETES_POD_UID`
     *    - `MSSQL_INSTANCE_NAME`
     *    - `NODE_JS_APP_BASE_DIRECTORY`
     *    - `NODE_JS_APP_NAME`
     *    - `NODE_JS_SCRIPT_NAME`
     *    - `ORACLE_SID`
     *    - `PG_ID_CALC_INPUT_KEY_LINKAGE`
     *    - `PHP_SCRIPT_PATH`
     *    - `PHP_WORKING_DIRECTORY`
     *    - `RUBY_APP_ROOT_PATH`
     *    - `RUBY_SCRIPT_PATH`
     *    - `RULE_RESULT`
     *    - `SOFTWAREAG_INSTALL_ROOT`
     *    - `SOFTWAREAG_PRODUCTPROPNAME`
     *    - `SPRINGBOOT_APP_NAME`
     *    - `SPRINGBOOT_PROFILE_NAME`
     *    - `SPRINGBOOT_STARTUP_CLASS`
     *    - `TIBCO_BUSINESSWORKS_CE_APP_NAME`
     *    - `TIBCO_BUSINESSWORKS_CE_VERSION`
     *    - `TIBCO_BUSINESS_WORKS_APP_NODE_NAME`
     *    - `TIBCO_BUSINESS_WORKS_APP_SPACE_NAME`
     *    - `TIBCO_BUSINESS_WORKS_DOMAIN_NAME`
     *    - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE`
     *    - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH`
     *    - `TIBCO_BUSINESS_WORKS_HOME`
     *    - `VARNISH_INSTANCE_NAME`
     *    - `WEB_LOGIC_CLUSTER_NAME`
     *    - `WEB_LOGIC_DOMAIN_NAME`
     *    - `WEB_LOGIC_HOME`
     *    - `WEB_LOGIC_NAME`
     *    - `WEB_SPHERE_CELL_NAME`
     *    - `WEB_SPHERE_CLUSTER_NAME`
     *    - `WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME`
     */
    dynamicKey: string;
    /**
     * if specified, needs to be `STRING`
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ProcessgroupNamingConditionConditionStringKey {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are
     *    - `AMAZON_ECR_IMAGE_ACCOUNT_ID`
     *    - `AMAZON_ECR_IMAGE_REGION`
     *    - `AMAZON_LAMBDA_FUNCTION_NAME`
     *    - `AMAZON_REGION`
     *    - `APACHE_CONFIG_PATH`
     *    - `APACHE_SPARK_MASTER_IP_ADDRESS`
     *    - `ASP_DOT_NET_CORE_APPLICATION_PATH`
     *    - `AWS_ECS_CLUSTER`
     *    - `AWS_ECS_CONTAINERNAME`
     *    - `AWS_ECS_FAMILY`
     *    - `AWS_ECS_REVISION`
     *    - `CASSANDRA_CLUSTER_NAME`
     *    - `CATALINA_BASE`
     *    - `CATALINA_HOME`
     *    - `CLOUD_FOUNDRY_APP_ID`
     *    - `CLOUD_FOUNDRY_APP_NAME`
     *    - `CLOUD_FOUNDRY_INSTANCE_INDEX`
     *    - `CLOUD_FOUNDRY_SPACE_ID`
     *    - `CLOUD_FOUNDRY_SPACE_NAME`
     *    - `COLDFUSION_JVM_CONFIG_FILE`
     *    - `COLDFUSION_SERVICE_NAME`
     *    - `COMMAND_LINE_ARGS`
     *    - `DOTNET_COMMAND`
     *    - `DOTNET_COMMAND_PATH`
     *    - `DYNATRACE_CLUSTER_ID`
     *    - `DYNATRACE_NODE_ID`
     *    - `ELASTICSEARCH_CLUSTER_NAME`
     *    - `ELASTICSEARCH_NODE_NAME`
     *    - `EQUINOX_CONFIG_PATH`
     *    - `EXE_NAME`
     *    - `EXE_PATH`
     *    - `GLASS_FISH_DOMAIN_NAME`
     *    - `GLASS_FISH_INSTANCE_NAME`
     *    - `GOOGLE_APP_ENGINE_INSTANCE`
     *    - `GOOGLE_APP_ENGINE_SERVICE`
     *    - `GOOGLE_CLOUD_PROJECT`
     *    - `HYBRIS_BIN_DIRECTORY`
     *    - `HYBRIS_CONFIG_DIRECTORY`
     *    - `HYBRIS_DATA_DIRECTORY`
     *    - `IBM_CICS_REGION`
     *    - `IBM_CTG_NAME`
     *    - `IBM_IMS_CONNECT_REGION`
     *    - `IBM_IMS_CONTROL_REGION`
     *    - `IBM_IMS_MESSAGE_PROCESSING_REGION`
     *    - `IBM_IMS_SOAP_GW_NAME`
     *    - `IBM_INTEGRATION_NODE_NAME`
     *    - `IBM_INTEGRATION_SERVER_NAME`
     *    - `IIS_APP_POOL`
     *    - `IIS_ROLE_NAME`
     *    - `JAVA_JAR_FILE`
     *    - `JAVA_JAR_PATH`
     *    - `JAVA_MAIN_CLASS`
     *    - `JAVA_MAIN_MODULE`
     *    - `JBOSS_HOME`
     *    - `JBOSS_MODE`
     *    - `JBOSS_SERVER_NAME`
     *    - `KUBERNETES_BASE_POD_NAME`
     *    - `KUBERNETES_CONTAINER_NAME`
     *    - `KUBERNETES_FULL_POD_NAME`
     *    - `KUBERNETES_NAMESPACE`
     *    - `KUBERNETES_POD_UID`
     *    - `MSSQL_INSTANCE_NAME`
     *    - `NODE_JS_APP_BASE_DIRECTORY`
     *    - `NODE_JS_APP_NAME`
     *    - `NODE_JS_SCRIPT_NAME`
     *    - `ORACLE_SID`
     *    - `PG_ID_CALC_INPUT_KEY_LINKAGE`
     *    - `PHP_SCRIPT_PATH`
     *    - `PHP_WORKING_DIRECTORY`
     *    - `RUBY_APP_ROOT_PATH`
     *    - `RUBY_SCRIPT_PATH`
     *    - `RULE_RESULT`
     *    - `SOFTWAREAG_INSTALL_ROOT`
     *    - `SOFTWAREAG_PRODUCTPROPNAME`
     *    - `SPRINGBOOT_APP_NAME`
     *    - `SPRINGBOOT_PROFILE_NAME`
     *    - `SPRINGBOOT_STARTUP_CLASS`
     *    - `TIBCO_BUSINESSWORKS_CE_APP_NAME`
     *    - `TIBCO_BUSINESSWORKS_CE_VERSION`
     *    - `TIBCO_BUSINESS_WORKS_APP_NODE_NAME`
     *    - `TIBCO_BUSINESS_WORKS_APP_SPACE_NAME`
     *    - `TIBCO_BUSINESS_WORKS_DOMAIN_NAME`
     *    - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE`
     *    - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH`
     *    - `TIBCO_BUSINESS_WORKS_HOME`
     *    - `VARNISH_INSTANCE_NAME`
     *    - `WEB_LOGIC_CLUSTER_NAME`
     *    - `WEB_LOGIC_DOMAIN_NAME`
     *    - `WEB_LOGIC_HOME`
     *    - `WEB_LOGIC_NAME`
     *    - `WEB_SPHERE_CELL_NAME`
     *    - `WEB_SPHERE_CLUSTER_NAME`
     *    - `WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME`
     */
    dynamicKey: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ProcessgroupNamingConditionConditionSyntheticEngine {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are  EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are CLASSIC and CUSTOM
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionSyntheticEngineTypeComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are  EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be SYNTHETIC_ENGINE_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are CLASSIC and CUSTOM
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionTag {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and TAG_KEY_EQUALS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * Tag of a Dynatrace entity
     */
    value?: outputs.ProcessgroupNamingConditionConditionTagValue;
}

export interface ProcessgroupNamingConditionConditionTagComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and TAG_KEY_EQUALS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be TAG
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * Tag of a Dynatrace entity
     */
    value?: outputs.ProcessgroupNamingConditionConditionTagComparisonValue;
}

export interface ProcessgroupNamingConditionConditionTagComparisonValue {
    /**
     * The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
     */
    context: string;
    /**
     * The key of the tag. Custom tags have the tag value here
     */
    key: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value of the tag. Not applicable to custom tags
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionTagValue {
    /**
     * The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
     */
    context: string;
    /**
     * The key of the tag. Custom tags have the tag value here
     */
    key: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value of the tag. Not applicable to custom tags
     */
    value?: string;
}

export interface ProcessgroupNamingConditionConditionTech {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: outputs.ProcessgroupNamingConditionConditionTechValue;
}

export interface ProcessgroupNamingConditionConditionTechValue {
    /**
     * Predefined technology, if technology is not predefined, then the verbatim type must be set.
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * Non-predefined technology, use for custom technologies
     */
    verbatimType?: string;
}

export interface QueueManagerAliasQueue {
    /**
     * Alias queue definitions for queue manager
     */
    aliasQueues?: outputs.QueueManagerAliasQueueAliasQueue[];
}

export interface QueueManagerAliasQueueAliasQueue {
    /**
     * The name of the alias queue
     */
    aliasQueueName: string;
    /**
     * The name of the base queue
     */
    baseQueueName: string;
    /**
     * Name of the cluster(s) this alias should be visible in
     */
    clusterVisibilities?: string[];
}

export interface QueueManagerClusterQueue {
    /**
     * Cluster queue definitions for queue manager
     */
    clusterQueues?: outputs.QueueManagerClusterQueueClusterQueue[];
}

export interface QueueManagerClusterQueueClusterQueue {
    /**
     * Name of the cluster(s) this local queue should be visible in
     */
    clusterVisibilities?: string[];
    /**
     * The name of the local queue
     */
    localQueueName: string;
}

export interface QueueManagerRemoteQueue {
    /**
     * Remote queue definitions for queue manager
     */
    remoteQueues?: outputs.QueueManagerRemoteQueueRemoteQueue[];
}

export interface QueueManagerRemoteQueueRemoteQueue {
    /**
     * Name of the cluster(s) this local definition of the remote queue should be visible in
     */
    clusterVisibilities?: string[];
    /**
     * The name of the local queue
     */
    localQueueName: string;
    /**
     * The name of the remote queue manager
     */
    remoteQueueManager: string;
    /**
     * The name of the remote queue
     */
    remoteQueueName: string;
}

export interface ReportSubscriptions {
    /**
     * A list of monthly subscribers.
     * Monthly subscribers receive the report on the first Monday of the month at midnight.
     * You can specify email addresses or Dynatrace user IDs here.
     */
    months?: string[];
    /**
     * A list of weekly subscribers.
     * Weekly subscribers receive the report every Monday at midnight.
     * You can specify email addresses or Dynatrace user IDs here.
     */
    weeks?: string[];
}

export interface RequestAttributeDataSource {
    /**
     * Specifies the location where the values are captured and stored.  Required if the **source** is one of the following: `GET_PARAMETER`, `URI`, `REQUEST_HEADER`, `RESPONSE_HEADER`.   Not applicable in other cases.   If the **source** value is `REQUEST_HEADER` or `RESPONSE_HEADER`, the `CAPTURE_AND_STORE_ON_BOTH` location is not allowed
     */
    capturingAndStorageLocation?: string;
    /**
     * IBM integration bus label node name condition for which the value is captured
     */
    cicsSdkMethodNodeCondition?: outputs.RequestAttributeDataSourceCicsSdkMethodNodeCondition;
    /**
     * CICS transaction call type condition for which the value is captured. Required if the source is: `CICS_TRANSACTION_CALL_TYPE`. Not applicable in other cases.
     */
    cicsTransactionCallType?: string;
    /**
     * The data source is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * IBM integration bus label node name condition for which the value is captured
     */
    iibLabelMethodNodeCondition?: outputs.RequestAttributeDataSourceIibLabelMethodNodeCondition;
    /**
     * IBM integration bus label node name condition for which the value is captured
     */
    iibMethodNodeCondition?: outputs.RequestAttributeDataSourceIibMethodNodeCondition;
    /**
     * The IBM integration bus node type for which the value is captured.  This or `iibMethodNodeCondition` is required if the **source** is: `IIB_NODE`.  Not applicable in other cases
     */
    iibNodeType?: string;
    /**
     * IBM integration bus label node name condition for which the value is captured
     */
    iibNodeTypeCondition?: outputs.RequestAttributeDataSourceIibNodeTypeCondition;
    /**
     * IMS transaction call type condition for which the value is captured. Required if the source is: `IMS_TRANSACTION_CALL_TYPE`. Not applicable in other cases.
     */
    imsTransactionCallType?: string;
    /**
     * The method specification if the **source** value is `METHOD_PARAM`.   Not applicable in other cases
     */
    methods?: outputs.RequestAttributeDataSourceMethod[];
    /**
     * The name of the web request parameter to capture.  Required if the **source** is one of the following: `POST_PARAMETER`, `GET_PARAMETER`, `REQUEST_HEADER`, `RESPONSE_HEADER`, `CUSTOM_ATTRIBUTE`.  Not applicable in other cases
     */
    parameterName?: string;
    /**
     * Conditions for data capturing
     */
    scope?: outputs.RequestAttributeDataSourceScope;
    /**
     * The technology of the server variable to capture if the source value is SERVER_VARIABLE.
     */
    serverVariableTechnology?: string;
    /**
     * The technology of the session attribute to capture if the **source** value is `SESSION_ATTRIBUTE`. 
     *
     *  Not applicable in other cases
     */
    sessionAttributeTechnology?: string;
    /**
     * The source of the attribute to capture. Works in conjunction with **parameterName** or **methods** and **technology**
     */
    source: string;
    /**
     * The key of the span attribute to capture. Required if the source is: `SPAN_ATTRIBUTE`. Not applicable in other cases.
     */
    spanAttributeKey?: string;
    /**
     * The technology of the method to capture if the **source** value is `METHOD_PARAM`. 
     *
     *  Not applicable in other cases
     */
    technology?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * Process values as specified
     */
    valueProcessing?: outputs.RequestAttributeDataSourceValueProcessing;
}

export interface RequestAttributeDataSourceCicsSdkMethodNodeCondition {
    /**
     * Negate the comparison
     */
    negate?: boolean;
    /**
     * Operator comparing the extracted value to the comparison value
     */
    operator: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value: string;
}

export interface RequestAttributeDataSourceIibLabelMethodNodeCondition {
    /**
     * Negate the comparison
     */
    negate?: boolean;
    /**
     * Operator comparing the extracted value to the comparison value
     */
    operator: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value: string;
}

export interface RequestAttributeDataSourceIibMethodNodeCondition {
    /**
     * Negate the comparison
     */
    negate?: boolean;
    /**
     * Operator comparing the extracted value to the comparison value
     */
    operator: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value: string;
}

export interface RequestAttributeDataSourceIibNodeTypeCondition {
    /**
     * Negate the comparison
     */
    negate?: boolean;
    /**
     * Operator comparing the extracted value to the comparison value
     */
    operator: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value: string;
}

export interface RequestAttributeDataSourceMethod {
    /**
     * The index of the argument to capture. Set `0` to capture the return value, `1` or higher to capture a mehtod argument.   Required if the **capture** is set to `ARGUMENT`.  Not applicable in other cases
     */
    argumentIndex?: number;
    /**
     * What to capture from the method
     */
    capture: string;
    /**
     * The getter chain to apply to the captured object. It is required in one of the following cases:  The **capture** is set to `THIS`.    The **capture** is set to `ARGUMENT`, and the argument is not a primitive, a primitive wrapper class, a string, or an array.   Not applicable in other cases
     */
    deepObjectAccess?: string;
    /**
     * Configuration of a method to be captured
     */
    method?: outputs.RequestAttributeDataSourceMethodMethod;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface RequestAttributeDataSourceMethodMethod {
    /**
     * Configuration of a method to be captured
     */
    argumentTypes?: string[];
    /**
     * The class name where the method to capture resides.   Either this or the **fileName** must be set
     */
    className?: string;
    /**
     * The file name where the method to capture resides.   Either this or **className** must be set
     */
    fileName?: string;
    /**
     * The operator of the comparison. If not set, `EQUALS` is used
     */
    fileNameMatcher?: string;
    /**
     * The name of the method to capture
     */
    methodName: string;
    /**
     * The modifiers of the method to capture
     */
    modifiers?: string[];
    /**
     * The return type
     */
    returnType: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The visibility of the method to capture
     */
    visibility: string;
}

export interface RequestAttributeDataSourceScope {
    /**
     * Only applies to this host group
     */
    hostGroup?: string;
    /**
     * Only applies to this process group. Note that this can't be transferred between different clusters or environments
     */
    processGroup?: string;
    /**
     * Only applies to this service technology
     */
    serviceTechnology?: string;
    /**
     * Only apply to process groups matching this tag
     */
    tagOfProcessGroup?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface RequestAttributeDataSourceValueProcessing {
    /**
     * Preprocess by extracting a substring from the original value
     */
    extractSubstring?: outputs.RequestAttributeDataSourceValueProcessingExtractSubstring;
    /**
     * Split (preprocessed) string values at this separator
     */
    splitAt?: string;
    /**
     * Prune Whitespaces. Defaults to false
     */
    trim?: boolean;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * IBM integration bus label node name condition for which the value is captured
     */
    valueCondition?: outputs.RequestAttributeDataSourceValueProcessingValueCondition;
    /**
     * Extract value from captured data per regex
     */
    valueExtractorRegex?: string;
}

export interface RequestAttributeDataSourceValueProcessingExtractSubstring {
    /**
     * The delimiter string
     */
    delimiter: string;
    /**
     * The end-delimiter string.   Required if the **position** value is `BETWEEN`. Otherwise not allowed
     */
    endDelimiter?: string;
    /**
     * The position of the extracted string relative to delimiters
     */
    position: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface RequestAttributeDataSourceValueProcessingValueCondition {
    /**
     * Negate the comparison
     */
    negate?: boolean;
    /**
     * Operator comparing the extracted value to the comparison value
     */
    operator: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value: string;
}

export interface RequestNamingConditions {
    /**
     * A conditions for the metric usage
     */
    conditions?: outputs.RequestNamingConditionsCondition[];
}

export interface RequestNamingConditionsCondition {
    /**
     * The attribute to be matched.  Note that for a service property attribute you must use the comparison of the `FAST_STRING` type. Possible values are `ACTOR_SYSTEM`, `AKKA_ACTOR_CLASS_NAME`, `AKKA_ACTOR_MESSAGE_TYPE`, `AKKA_ACTOR_PATH`, `APPLICATION_BUILD_VERSION`, `APPLICATION_RELEASE_VERSION`, `AZURE_FUNCTIONS_FUNCTION_NAME`, `AZURE_FUNCTIONS_SITE_NAME`, `CICS_PROGRAM_NAME`, `CICS_SYSTEM_ID`, `CICS_TASK_ID`, `CICS_TRANSACTION_ID`, `CICS_USER_ID`, `CPU_TIME`, `CTG_GATEWAY_URL`, `CTG_PROGRAM`, `CTG_SERVER_NAME`, `CTG_TRANSACTION_ID`, `CUSTOMSERVICE_CLASS`, `CUSTOMSERVICE_METHOD`, `DATABASE_CHILD_CALL_COUNT`, `DATABASE_CHILD_CALL_TIME`, `DATABASE_HOST`, `DATABASE_NAME`, `DATABASE_TYPE`, `DATABASE_URL`, `DISK_IO_TIME`, `ERROR_COUNT`, `ESB_APPLICATION_NAME`, `ESB_INPUT_TYPE`, `ESB_LIBRARY_NAME`, `ESB_MESSAGE_FLOW_NAME`, `EXCEPTION_CLASS`, `EXCEPTION_MESSAGE`, `FAILED_STATE`, `FAILURE_REASON`, `FLAW_STATE`, `HTTP_REQUEST_METHOD`, `HTTP_STATUS`, `HTTP_STATUS_CLASS`, `IMS_PROGRAM_NAME`, `IMS_TRANSACTION_ID`, `IMS_USER_ID`, `IO_TIME`, `IS_KEY_REQUEST`, `LAMBDA_COLDSTART`, `LOCK_TIME`, `MESSAGING_DESTINATION_TYPE`, `MESSAGING_IS_TEMPORARY_QUEUE`, `MESSAGING_QUEUE_NAME`, `MESSAGING_QUEUE_VENDOR`, `NETWORK_IO_TIME`, `NON_DATABASE_CHILD_CALL_COUNT`, `NON_DATABASE_CHILD_CALL_TIME`, `PROCESS_GROUP_NAME`, `PROCESS_GROUP_TAG`, `REMOTE_ENDPOINT`, `REMOTE_METHOD`, `REMOTE_SERVICE_NAME`, `REQUEST_NAME`, `REQUEST_TYPE`, `RESPONSE_TIME`, `RESPONSE_TIME_CLIENT`, `RMI_CLASS`, `RMI_METHOD`, `SERVICE_DISPLAY_NAME`, `SERVICE_NAME`, `SERVICE_PORT`, `SERVICE_PUBLIC_DOMAIN_NAME`, `SERVICE_REQUEST_ATTRIBUTE`, `SERVICE_TAG`, `SERVICE_TYPE`, `SERVICE_WEB_APPLICATION_ID`, `SERVICE_WEB_CONTEXT_ROOT`, `SERVICE_WEB_SERVER_NAME`, `SERVICE_WEB_SERVICE_NAME`, `SERVICE_WEB_SERVICE_NAMESPACE`, `SUSPENSION_TIME`, `TOTAL_PROCESSING_TIME`, `WAIT_TIME`, `WEBREQUEST_QUERY`, `WEBREQUEST_RELATIVE_URL`, `WEBREQUEST_URL`, `WEBREQUEST_URL_HOST`, `WEBREQUEST_URL_PATH`, `WEBREQUEST_URL_PORT`, `WEBSERVICE_ENDPOINT`, `WEBSERVICE_METHOD` and `ZOS_CALL_TYPE`
     */
    attribute: string;
    /**
     * Type-specific comparison for attributes
     */
    comparison: outputs.RequestNamingConditionsConditionComparison;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface RequestNamingConditionsConditionComparison {
    /**
     * Boolean Comparison for `BOOLEAN` attributes
     */
    boolean?: outputs.RequestNamingConditionsConditionComparisonBoolean;
    /**
     * Type-specific comparison information for attributes of type 'ESB_INPUT_NODE_TYPE'
     */
    esbInputNodeType?: outputs.RequestNamingConditionsConditionComparisonEsbInputNodeType;
    /**
     * Comparison for `FAILED_STATE` attributes
     */
    failedState?: outputs.RequestNamingConditionsConditionComparisonFailedState;
    /**
     * Comparison for `FAILURE_REASON` attributes
     */
    failureReason?: outputs.RequestNamingConditionsConditionComparisonFailureReason;
    /**
     * Comparison for `FAST_STRING` attributes. Use it for all service property attributes
     */
    fastString?: outputs.RequestNamingConditionsConditionComparisonFastString;
    /**
     * Comparison for `FLAW_STATE` attributes
     */
    flawState?: outputs.RequestNamingConditionsConditionComparisonFlawState;
    /**
     * Comparison for `NUMBER` attributes
     */
    generic?: outputs.RequestNamingConditionsConditionComparisonGeneric;
    /**
     * Comparison for `HTTP_METHOD` attributes
     */
    httpMethod?: outputs.RequestNamingConditionsConditionComparisonHttpMethod;
    /**
     * Comparison for `HTTP_STATUS_CLASS` attributes
     */
    httpStatusClass?: outputs.RequestNamingConditionsConditionComparisonHttpStatusClass;
    /**
     * Comparison for `IIB_INPUT_NODE_TYPE` attributes
     */
    iibInputNodeType?: outputs.RequestNamingConditionsConditionComparisonIibInputNodeType;
    /**
     * Reverse the comparison **operator**. For example, it turns **equals** into **does not equal**
     */
    negate?: boolean;
    /**
     * Comparison for `NUMBER` attributes
     */
    number?: outputs.RequestNamingConditionsConditionComparisonNumber;
    /**
     * Comparison for `NUMBER_REQUEST_ATTRIBUTE` attributes
     */
    numberRequestAttribute?: outputs.RequestNamingConditionsConditionComparisonNumberRequestAttribute;
    /**
     * Comparison for `SERVICE_TYPE` attributes
     */
    serviceType?: outputs.RequestNamingConditionsConditionComparisonServiceType;
    /**
     * Comparison for `STRING` attributes
     */
    string?: outputs.RequestNamingConditionsConditionComparisonString;
    /**
     * Comparison for `STRING_REQUEST_ATTRIBUTE` attributes
     */
    stringRequestAttribute?: outputs.RequestNamingConditionsConditionComparisonStringRequestAttribute;
    /**
     * Comparison for `TAG` attributes
     */
    tag?: outputs.RequestNamingConditionsConditionComparisonTag;
    /**
     * Comparison for `ZOS_CALL_TYPE` attributes
     */
    zosCallType?: outputs.RequestNamingConditionsConditionComparisonZosCallType;
}

export interface RequestNamingConditionsConditionComparisonBoolean {
    /**
     * Operator of the comparison. You can reverse it by setting `negate` to `true`. Possible values are `EQUALS`, `EQUALS_ANY_OF` and `EXISTS`
     */
    operator?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value: boolean;
    /**
     * The values to compare to
     */
    values?: boolean[];
}

export interface RequestNamingConditionsConditionComparisonEsbInputNodeType {
    /**
     * Operator of the comparison. You can reverse it by setting `negate` to `true`. Possible values are `EQUALS`, `EQUALS_ANY_OF` and `EXISTS`
     */
    operator?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are `CALLABLE_FLOW_ASYNC_RESPONSE_NODE`, `CALLABLE_FLOW_INPUT_NODE`, `DATABASE_INPUT_NODE`, `DOTNET_INPUT_NODE`, `EMAIL_INPUT_NODE`, `EVENT_INPUT`, `EVENT_INPUT_NODE`, `FILE_INPUT_NODE`, `FTE_INPUT_NODE`, `HTTP_ASYNC_RESPONSE`, `JD_EDWARDS_INPUT_NODE`, `JMS_CLIENT_INPUT_NODE`, `LABEL_NODE`, `MQ_INPUT_NODE`, `PEOPLE_SOFT_INPUT_NODE`, `REST_ASYNC_RESPONSE`, `REST_REQUEST`, `SAP_INPUT_NODE`, `SCA_ASYNC_RESPONSE_NODE`, `SCA_INPUT_NODE`, `SIEBEL_INPUT_NODE`, `SOAP_INPUT_NODE`, `TCPIP_CLIENT_INPUT_NODE`, `TCPIP_CLIENT_REQUEST_NODE`, `TCPIP_SERVER_INPUT_NODE`, `TCPIP_SERVER_REQUEST_NODE`, `TIMEOUT_NOTIFICATION_NODE` and `WS_INPUT_NODE`
     */
    value?: string;
    /**
     * The values to compare to. Possible values are `CALLABLE_FLOW_ASYNC_RESPONSE_NODE`, `CALLABLE_FLOW_INPUT_NODE`, `DATABASE_INPUT_NODE`, `DOTNET_INPUT_NODE`, `EMAIL_INPUT_NODE`, `EVENT_INPUT`, `EVENT_INPUT_NODE`, `FILE_INPUT_NODE`, `FTE_INPUT_NODE`, `HTTP_ASYNC_RESPONSE`, `JD_EDWARDS_INPUT_NODE`, `JMS_CLIENT_INPUT_NODE`, `LABEL_NODE`, `MQ_INPUT_NODE`, `PEOPLE_SOFT_INPUT_NODE`, `REST_ASYNC_RESPONSE`, `REST_REQUEST`, `SAP_INPUT_NODE`, `SCA_ASYNC_RESPONSE_NODE`, `SCA_INPUT_NODE`, `SIEBEL_INPUT_NODE`, `SOAP_INPUT_NODE`, `TCPIP_CLIENT_INPUT_NODE`, `TCPIP_CLIENT_REQUEST_NODE`, `TCPIP_SERVER_INPUT_NODE`, `TCPIP_SERVER_REQUEST_NODE`, `TIMEOUT_NOTIFICATION_NODE` and `WS_INPUT_NODE`
     */
    values?: string[];
}

export interface RequestNamingConditionsConditionComparisonFailedState {
    /**
     * Operator of the comparison. You can reverse it by setting `negate` to `true`. Possible values are `EQUALS`, `EQUALS_ANY_OF` and `EXISTS`
     */
    operator?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are `FAILED` and `FAILED`
     */
    value?: string;
    /**
     * The values to compare to. Possible values are `FAILED` and `FAILED`
     */
    values?: string[];
}

export interface RequestNamingConditionsConditionComparisonFailureReason {
    /**
     * Operator of the comparison. You can reverse it by setting `negate` to `true`. Possible values are `EQUALS`, `EQUALS_ANY_OF` and `EXISTS`
     */
    operator?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are `EXCEPTION_AT_ENTRY_NODE`, `EXCEPTION_ON_ANY_NODE`, `HTTP_CODE` and `REQUEST_ATTRIBUTE`
     */
    value?: string;
    /**
     * The values to compare to. Possible values are `EXCEPTION_AT_ENTRY_NODE`, `EXCEPTION_ON_ANY_NODE`, `HTTP_CODE` and `REQUEST_ATTRIBUTE`
     */
    values?: string[];
}

export interface RequestNamingConditionsConditionComparisonFastString {
    /**
     * The comparison is case-sensitive (`true`) or not case-sensitive (`false`)
     */
    caseSensitive?: boolean;
    /**
     * Operator of the comparison. You can reverse it by setting `negate` to `true`. Possible values are `EQUALS`, `EQUALS_ANY_OF` and `CONTAINS`
     */
    operator?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
    /**
     * The values to compare to
     */
    values?: string[];
}

export interface RequestNamingConditionsConditionComparisonFlawState {
    /**
     * Operator of the comparison. You can reverse it by setting `negate` to `true`. Possible values are `EQUALS`, `EQUALS_ANY_OF` and `EXISTS`
     */
    operator?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are `FLAWED` and `NOT_FLAWED`
     */
    value?: string;
    /**
     * The values to compare to. Possible values are `FLAWED` and `NOT_FLAWED`
     */
    values?: string[];
}

export interface RequestNamingConditionsConditionComparisonGeneric {
    /**
     * Defines the actual set of fields depending on the value
     */
    type: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface RequestNamingConditionsConditionComparisonHttpMethod {
    /**
     * Operator of the comparison. You can reverse it by setting `negate` to `true`. Possible values are `EQUALS`, `EQUALS_ANY_OF` and `EXISTS`
     */
    operator?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are `CONNECT`, `DELETE`, `GET`, `HEAD`, `OPTIONS`, `PATCH`, `POST`, `PUT` and `TRACE`
     */
    value?: string;
    /**
     * The values to compare to. Possible values are `CONNECT`, `DELETE`, `GET`, `HEAD`, `OPTIONS`, `PATCH`, `POST`, `PUT` and `TRACE`
     */
    values?: string[];
}

export interface RequestNamingConditionsConditionComparisonHttpStatusClass {
    /**
     * Operator of the comparison. You can reverse it by setting `negate` to `true`. Possible values are `EQUALS`, `EQUALS_ANY_OF` and `EXISTS`
     */
    operator?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are `C_1XX`, `C_2XX`, `C_3XX`, `C_4XX`, `C_5XX` and `NO_RESPONSE`
     */
    value?: string;
    /**
     * The values to compare to. Possible values are `C_1XX`, `C_2XX`, `C_3XX`, `C_4XX`, `C_5XX` and `NO_RESPONSE`
     */
    values?: string[];
}

export interface RequestNamingConditionsConditionComparisonIibInputNodeType {
    /**
     * Operator of the comparison. You can reverse it by setting `negate` to `true`. Possible values are `EQUALS`, `EQUALS_ANY_OF` and `EXISTS`
     */
    operator?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are `CALLABLE_FLOW_ASYNC_RESPONSE_NODE`, `CALLABLE_FLOW_INPUT_NODE`, `DATABASE_INPUT_NODE`, `DOTNET_INPUT_NODE`, `EMAIL_INPUT_NODE`, `EVENT_INPUT`, `EVENT_INPUT_NODE`, `FILE_INPUT_NODE`, `FTE_INPUT_NODE`, `HTTP_ASYNC_RESPONSE`, `JD_EDWARDS_INPUT_NODE`, `JMS_CLIENT_INPUT_NODE`, `LABEL_NODE`, `MQ_INPUT_NODE`, `PEOPLE_SOFT_INPUT_NODE`, `REST_ASYNC_RESPONSE`, `REST_REQUEST`, `SAP_INPUT_NODE`, `SCA_ASYNC_RESPONSE_NODE`, `SCA_INPUT_NODE`, `SIEBEL_INPUT_NODE`, `SOAP_INPUT_NODE`, `TCPIP_CLIENT_INPUT_NODE`, `TCPIP_CLIENT_REQUEST_NODE`, `TCPIP_SERVER_INPUT_NODE`, `TCPIP_SERVER_REQUEST_NODE`, `TIMEOUT_NOTIFICATION_NODE` and `WS_INPUT_NODE`
     */
    value?: string;
    /**
     * The values to compare to. Possible values are `CALLABLE_FLOW_ASYNC_RESPONSE_NODE`, `CALLABLE_FLOW_INPUT_NODE`, `DATABASE_INPUT_NODE`, `DOTNET_INPUT_NODE`, `EMAIL_INPUT_NODE`, `EVENT_INPUT`, `EVENT_INPUT_NODE`, `FILE_INPUT_NODE`, `FTE_INPUT_NODE`, `HTTP_ASYNC_RESPONSE`, `JD_EDWARDS_INPUT_NODE`, `JMS_CLIENT_INPUT_NODE`, `LABEL_NODE`, `MQ_INPUT_NODE`, `PEOPLE_SOFT_INPUT_NODE`, `REST_ASYNC_RESPONSE`, `REST_REQUEST`, `SAP_INPUT_NODE`, `SCA_ASYNC_RESPONSE_NODE`, `SCA_INPUT_NODE`, `SIEBEL_INPUT_NODE`, `SOAP_INPUT_NODE`, `TCPIP_CLIENT_INPUT_NODE`, `TCPIP_CLIENT_REQUEST_NODE`, `TCPIP_SERVER_INPUT_NODE`, `TCPIP_SERVER_REQUEST_NODE`, `TIMEOUT_NOTIFICATION_NODE` and `WS_INPUT_NODE`
     */
    values?: string[];
}

export interface RequestNamingConditionsConditionComparisonNumber {
    /**
     * Operator of the comparison. You can reverse it by setting `negate` to `true`. Possible values are `EQUALS`, `EQUALS_ANY_OF`, `EXISTS`, `GREATER_THAN`, `GREATER_THAN_OR_EQUAL`, `LOWER_THAN` and `LOWER_THAN_OR_EQUAL`
     */
    operator?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: number;
    /**
     * The values to compare to
     */
    values?: number[];
}

export interface RequestNamingConditionsConditionComparisonNumberRequestAttribute {
    /**
     * If `true`, the request attribute is matched on child service calls. Default is `false`
     */
    matchOnChildCalls?: boolean;
    /**
     * Operator of the comparison. You can reverse it by setting `negate` to `true`. Possible values are `EQUALS`, `EQUALS_ANY_OF`, `EXISTS`, `GREATER_THAN`, `GREATER_THAN_OR_EQUAL`, `LOWER_THAN` and `LOWER_THAN_OR_EQUAL`
     */
    operator?: string;
    /**
     * No documentation available for this attribute
     */
    requestAttribute: string;
    /**
     * Defines valid sources of request attributes for conditions or placeholders
     */
    source?: outputs.RequestNamingConditionsConditionComparisonNumberRequestAttributeSource;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: number;
    /**
     * The values to compare to
     */
    values?: number[];
}

export interface RequestNamingConditionsConditionComparisonNumberRequestAttributeSource {
    /**
     * Use only request attributes from services that belong to this management zone.. Use either this or `serviceTag`
     */
    managementZone?: string;
    /**
     * Use only request attributes from services that have this tag. Use either this or `managementZone`
     */
    serviceTag?: outputs.RequestNamingConditionsConditionComparisonNumberRequestAttributeSourceServiceTag;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface RequestNamingConditionsConditionComparisonNumberRequestAttributeSourceServiceTag {
    /**
     * The origin of the tag, such as AWS or Cloud Foundry. For custom tags use the `CONTEXTLESS` value. The context is set for tags that are automatically imported by OneAgent (for example, from the AWS console or environment variables). It’s useful for determining the origin of tags when not manually defined, and it also helps to prevent clashes with other existing tags. If the tag is not automatically imported, `CONTEXTLESS` set. Possible values are `AWS`, `AWS_GENERIC`, `AZURE`, `CLOUD_FOUNDRY`, `CONTEXTLESS`, `ENVIRONMENT`, `GOOGLE_COMPUTE_ENGINE` and `KUBERNETES`
     */
    context?: string;
    /**
     * The key of the tag. For custom tags, put the tag value here. The key allows categorization of multiple tags. It is possible that there are multiple values for a single key which will all be represented as standalone tags. Therefore, the key does not have the semantic of a map key but is more like a key of a key-value tuple. In some cases, for example custom tags, the key represents the actual tag value and the value field is not set – those are called valueless tags
     */
    key: string;
    /**
     * has no documentation
     */
    tagKey?: outputs.RequestNamingConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKey;
    /**
     * The value of the tag. Not applicable to custom tags. If a tag does have a separate key and value (in the textual representation they are split by the colon ‘:’), this field is set with the actual value. Key-value pairs can occur for automatically imported tags and tags set by rules if extractors are used
     */
    value?: string;
}

export interface RequestNamingConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKey {
    /**
     * has no documentation
     */
    context?: string;
    /**
     * has no documentation
     */
    key?: string;
}

export interface RequestNamingConditionsConditionComparisonServiceType {
    /**
     * Operator of the comparison. You can reverse it by setting `negate` to `true`. Possible values are `EQUALS`, `EQUALS_ANY_OF` and `EXISTS`
     */
    operator?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are `BACKGROUND_ACTIVITY`, `CICS_SERVICE`, `CUSTOM_SERVICE`, `DATABASE_SERVICE`, `ENTERPRISE_SERVICE_BUS_SERVICE`, `EXTERNAL`, `IBM_INTEGRATION_BUS_SERVICE`, `IMS_SERVICE`, `MESSAGING_SERVICE`, `RMI_SERVICE`, `RPC_SERVICE`, `WEB_REQUEST_SERVICE` and `WEB_SERVICE`
     */
    value?: string;
    /**
     * The values to compare to. Possible values are `BACKGROUND_ACTIVITY`, `CICS_SERVICE`, `CUSTOM_SERVICE`, `DATABASE_SERVICE`, `ENTERPRISE_SERVICE_BUS_SERVICE`, `EXTERNAL`, `IBM_INTEGRATION_BUS_SERVICE`, `IMS_SERVICE`, `MESSAGING_SERVICE`, `RMI_SERVICE`, `RPC_SERVICE`, `WEB_REQUEST_SERVICE` and `WEB_SERVICE`
     */
    values?: string[];
}

export interface RequestNamingConditionsConditionComparisonString {
    /**
     * The comparison is case-sensitive (`true`) or not case-sensitive (`false`)
     */
    caseSensitive?: boolean;
    /**
     * Operator of the comparison. You can reverse it by setting `negate` to `true`. Possible values are `BEGINS_WITH`, `BEGINS_WITH_ANY_OF`, `CONTAINS`, `ENDS_WITH`, `ENDS_WITH_ANY_OF`, `EQUALS`, `EQUALS_ANY_OF`, `EXISTS` and `REGEX_MATCHES`
     */
    operator?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
    /**
     * The values to compare to
     */
    values?: string[];
}

export interface RequestNamingConditionsConditionComparisonStringRequestAttribute {
    /**
     * The comparison is case-sensitive (`true`) or not case-sensitive (`false`)
     */
    caseSensitive?: boolean;
    /**
     * If `true`, the request attribute is matched on child service calls. Default is `false`
     */
    matchOnChildCalls?: boolean;
    /**
     * Operator of the comparison. You can reverse it by setting `negate` to `true`. Possible values are `BEGINS_WITH`, `BEGINS_WITH_ANY_OF`, `CONTAINS`, `ENDS_WITH`, `ENDS_WITH_ANY_OF`, `EQUALS`, `EQUALS_ANY_OF`, `EXISTS` and `REGEX_MATCHES`
     */
    operator?: string;
    /**
     * No documentation available for this attribute
     */
    requestAttribute: string;
    /**
     * Defines valid sources of request attributes for conditions or placeholders
     */
    source?: outputs.RequestNamingConditionsConditionComparisonStringRequestAttributeSource;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
    /**
     * The values to compare to
     */
    values?: string[];
}

export interface RequestNamingConditionsConditionComparisonStringRequestAttributeSource {
    /**
     * Use only request attributes from services that belong to this management zone.. Use either this or `serviceTag`
     */
    managementZone?: string;
    /**
     * Use only request attributes from services that have this tag. Use either this or `managementZone`
     */
    serviceTag?: outputs.RequestNamingConditionsConditionComparisonStringRequestAttributeSourceServiceTag;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface RequestNamingConditionsConditionComparisonStringRequestAttributeSourceServiceTag {
    /**
     * The origin of the tag, such as AWS or Cloud Foundry. For custom tags use the `CONTEXTLESS` value. The context is set for tags that are automatically imported by OneAgent (for example, from the AWS console or environment variables). It’s useful for determining the origin of tags when not manually defined, and it also helps to prevent clashes with other existing tags. If the tag is not automatically imported, `CONTEXTLESS` set. Possible values are `AWS`, `AWS_GENERIC`, `AZURE`, `CLOUD_FOUNDRY`, `CONTEXTLESS`, `ENVIRONMENT`, `GOOGLE_COMPUTE_ENGINE` and `KUBERNETES`
     */
    context?: string;
    /**
     * The key of the tag. For custom tags, put the tag value here. The key allows categorization of multiple tags. It is possible that there are multiple values for a single key which will all be represented as standalone tags. Therefore, the key does not have the semantic of a map key but is more like a key of a key-value tuple. In some cases, for example custom tags, the key represents the actual tag value and the value field is not set – those are called valueless tags
     */
    key: string;
    /**
     * has no documentation
     */
    tagKey?: outputs.RequestNamingConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKey;
    /**
     * The value of the tag. Not applicable to custom tags. If a tag does have a separate key and value (in the textual representation they are split by the colon ‘:’), this field is set with the actual value. Key-value pairs can occur for automatically imported tags and tags set by rules if extractors are used
     */
    value?: string;
}

export interface RequestNamingConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKey {
    /**
     * has no documentation
     */
    context?: string;
    /**
     * has no documentation
     */
    key?: string;
}

export interface RequestNamingConditionsConditionComparisonTag {
    /**
     * Operator of the comparison. You can reverse it by setting `negate` to `true`. Possible values are `EQUALS`, `EQUALS_ANY_OF`, `TAG_KEY_EQUALS` and `TAG_KEY_EQUALS_ANY_OF`
     */
    operator?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The values to compare to
     */
    value?: outputs.RequestNamingConditionsConditionComparisonTagValue;
    /**
     * The values to compare to
     */
    values?: outputs.RequestNamingConditionsConditionComparisonTagValues;
}

export interface RequestNamingConditionsConditionComparisonTagValue {
    /**
     * The origin of the tag, such as AWS or Cloud Foundry. Custom tags use the `CONTEXTLESS` value. Possible values are `AWS`, `AWS_GENERIC`, `AZURE`, `CLOUD_FOUNDRY`, `CONTEXTLESS`, `ENVIRONMENT`, `GOOGLE_CLOUD` and `KUBERNETES`
     */
    context: string;
    /**
     * The key of the tag. Custom tags have the tag value here
     */
    key: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value of the tag. Not applicable to custom tags
     */
    value?: string;
}

export interface RequestNamingConditionsConditionComparisonTagValues {
    /**
     * The values to compare to
     */
    values?: outputs.RequestNamingConditionsConditionComparisonTagValuesValue[];
}

export interface RequestNamingConditionsConditionComparisonTagValuesValue {
    /**
     * The origin of the tag, such as AWS or Cloud Foundry. Custom tags use the `CONTEXTLESS` value. Possible values are `AWS`, `AWS_GENERIC`, `AZURE`, `CLOUD_FOUNDRY`, `CONTEXTLESS`, `ENVIRONMENT`, `GOOGLE_CLOUD` and `KUBERNETES`
     */
    context: string;
    /**
     * The key of the tag. Custom tags have the tag value here
     */
    key: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value of the tag. Not applicable to custom tags
     */
    value?: string;
}

export interface RequestNamingConditionsConditionComparisonZosCallType {
    /**
     * Operator of the comparison. You can reverse it by setting `negate` to `true`. Possible values are `EQUALS`, `EQUALS_ANY_OF` and `EXISTS`
     */
    operator?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are `CTG`, `DPL`, `EXPLICIT_ADK`, `IMS_CONNECT`, `IMS_CONNECT_API`, `IMS_ITRA`, `IMS_MSC`, `IMS_PGM_SWITCH`, `IMS_SHARED_QUEUES`, `IMS_TRANS_EXEC`, `MQ`, `SOAP`, `START`, `TX` and `UNKNOWN`
     */
    value?: string;
    /**
     * The values to compare to. Possible values are `CTG`, `DPL`, `EXPLICIT_ADK`, `IMS_CONNECT`, `IMS_CONNECT_API`, `IMS_ITRA`, `IMS_MSC`, `IMS_PGM_SWITCH`, `IMS_SHARED_QUEUES`, `IMS_TRANS_EXEC`, `MQ`, `SOAP`, `START`, `TX` and `UNKNOWN`
     */
    values?: string[];
}

export interface RequestNamingPlaceholders {
    /**
     * A custom placeholder to be used in a dimension value pattern
     */
    placeholders?: outputs.RequestNamingPlaceholdersPlaceholder[];
}

export interface RequestNamingPlaceholdersPlaceholder {
    /**
     * Which value of the request attribute must be used when it occurs across multiple child requests. Only applicable for the `SERVICE_REQUEST_ATTRIBUTE` attribute, when **useFromChildCalls** is `true`. For the `COUNT` aggregation, the **kind** field is not applicable. Possible values are `COUNT`, `FIRST` and `LAST`.
     */
    aggregation?: string;
    /**
     * The attribute to extract from. You can only use attributes of the **string** type. Possible values are `ACTOR_SYSTEM`, `AKKA_ACTOR_CLASS_NAME`, `AKKA_ACTOR_MESSAGE_TYPE`, `AKKA_ACTOR_PATH`, `APPLICATION_BUILD_VERSION`, `APPLICATION_RELEASE_VERSION`, `AZURE_FUNCTIONS_FUNCTION_NAME`, `AZURE_FUNCTIONS_SITE_NAME`, `CICS_PROGRAM_NAME`, `CICS_SYSTEM_ID`, `CICS_TASK_ID`, `CICS_TRANSACTION_ID`, `CICS_USER_ID`, `CPU_TIME`, `CTG_GATEWAY_URL`, `CTG_PROGRAM`, `CTG_SERVER_NAME`, `CTG_TRANSACTION_ID`, `CUSTOMSERVICE_CLASS`, `CUSTOMSERVICE_METHOD`, `DATABASE_CHILD_CALL_COUNT`, `DATABASE_CHILD_CALL_TIME`, `DATABASE_HOST`, `DATABASE_NAME`, `DATABASE_TYPE`, `DATABASE_URL`, `DISK_IO_TIME`, `ERROR_COUNT`, `ESB_APPLICATION_NAME`, `ESB_INPUT_TYPE`, `ESB_LIBRARY_NAME`, `ESB_MESSAGE_FLOW_NAME`, `EXCEPTION_CLASS`, `EXCEPTION_MESSAGE`, `FAILED_STATE`, `FAILURE_REASON`, `FLAW_STATE`, `HTTP_REQUEST_METHOD`, `HTTP_STATUS`, `HTTP_STATUS_CLASS`, `IMS_PROGRAM_NAME`, `IMS_TRANSACTION_ID`, `IMS_USER_ID`, `IO_TIME`, `IS_KEY_REQUEST`, `LAMBDA_COLDSTART`, `LOCK_TIME`, `MESSAGING_DESTINATION_TYPE`, `MESSAGING_IS_TEMPORARY_QUEUE`, `MESSAGING_QUEUE_NAME`, `MESSAGING_QUEUE_VENDOR`, `NETWORK_IO_TIME`, `NON_DATABASE_CHILD_CALL_COUNT`, `NON_DATABASE_CHILD_CALL_TIME`, `PROCESS_GROUP_NAME`, `PROCESS_GROUP_TAG`, `REMOTE_ENDPOINT`, `REMOTE_METHOD`, `REMOTE_SERVICE_NAME`, `REQUEST_NAME`, `REQUEST_TYPE`, `RESPONSE_TIME`, `RESPONSE_TIME_CLIENT`, `RMI_CLASS`, `RMI_METHOD`, `SERVICE_DISPLAY_NAME`, `SERVICE_NAME`, `SERVICE_PORT`, `SERVICE_PUBLIC_DOMAIN_NAME`, `SERVICE_REQUEST_ATTRIBUTE`, `SERVICE_TAG`, `SERVICE_TYPE`, `SERVICE_WEB_APPLICATION_ID`, `SERVICE_WEB_CONTEXT_ROOT`, `SERVICE_WEB_SERVER_NAME`, `SERVICE_WEB_SERVICE_NAME`, `SERVICE_WEB_SERVICE_NAMESPACE`, `SUSPENSION_TIME`, `TOTAL_PROCESSING_TIME`, `WAIT_TIME`, `WEBREQUEST_QUERY`, `WEBREQUEST_RELATIVE_URL`, `WEBREQUEST_URL`, `WEBREQUEST_URL_HOST`, `WEBREQUEST_URL_PATH`, `WEBREQUEST_URL_PORT`, `WEBSERVICE_ENDPOINT`, `WEBSERVICE_METHOD` and `ZOS_CALL_TYPE`
     */
    attribute: string;
    /**
     * Depending on the `kind` value:
     *
     *
     * * `REGEX_EXTRACTION`: The regular expression.
     *
     *
     * * `BETWEEN_DELIMITER`: The opening delimiter string to look for.
     *
     *
     * * All other values: The delimiter string to look for
     */
    delimiterOrRegex?: string;
    /**
     * The closing delimiter string to look for. Required if the `kind` value is `BETWEEN_DELIMITER`. Not applicable otherwise
     */
    endDelimiter?: string;
    /**
     * The type of extraction. Defines either usage of regular expression (`regex`) or the position of request attribute value to be extracted. When the `attribute` is `SERVICE_REQUEST_ATTRIBUTE` attribute and `aggregation` is `COUNT`, needs to be set to `ORIGINAL_TEXT`. Possible values are 	`AFTER_DELIMITER`, `BEFORE_DELIMITER`, `BETWEEN_DELIMITER`, `ORIGINAL_TEXT` and `REGEX_EXTRACTION`
     */
    kind: string;
    /**
     * The name of the placeholder. Use it in the naming pattern as `{name}`
     */
    name: string;
    /**
     * The format of the extracted string. Possible values are `ORIGINAL`, `TO_LOWER_CASE` and `TO_UPPER_CASE`
     */
    normalization?: string;
    /**
     * The One Agent attribute to extract from. Required if the kind value is `ONE_AGENT_ATTRIBUTE`. Not applicable otherwise.
     */
    oneagentAttributeKey?: string;
    /**
     * The request attribute to extract from. Required if the `kind` value is `SERVICE_REQUEST_ATTRIBUTE`. Not applicable otherwise
     */
    requestAttribute?: string;
    /**
     * Defines valid sources of request attributes for conditions or placeholders
     */
    source?: outputs.RequestNamingPlaceholdersPlaceholderSource;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * If `true` request attribute will be taken from a child service call. Only applicable for the `SERVICE_REQUEST_ATTRIBUTE` attribute. Defaults to `false`
     */
    useFromChildCalls?: boolean;
}

export interface RequestNamingPlaceholdersPlaceholderSource {
    /**
     * Use only request attributes from services that belong to this management zone.. Use either this or `serviceTag`
     */
    managementZone?: string;
    /**
     * Use only request attributes from services that have this tag. Use either this or `managementZone`
     */
    serviceTag?: outputs.RequestNamingPlaceholdersPlaceholderSourceServiceTag;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface RequestNamingPlaceholdersPlaceholderSourceServiceTag {
    /**
     * The origin of the tag, such as AWS or Cloud Foundry. For custom tags use the `CONTEXTLESS` value. The context is set for tags that are automatically imported by OneAgent (for example, from the AWS console or environment variables). It’s useful for determining the origin of tags when not manually defined, and it also helps to prevent clashes with other existing tags. If the tag is not automatically imported, `CONTEXTLESS` set. Possible values are `AWS`, `AWS_GENERIC`, `AZURE`, `CLOUD_FOUNDRY`, `CONTEXTLESS`, `ENVIRONMENT`, `GOOGLE_COMPUTE_ENGINE` and `KUBERNETES`
     */
    context?: string;
    /**
     * The key of the tag. For custom tags, put the tag value here. The key allows categorization of multiple tags. It is possible that there are multiple values for a single key which will all be represented as standalone tags. Therefore, the key does not have the semantic of a map key but is more like a key of a key-value tuple. In some cases, for example custom tags, the key represents the actual tag value and the value field is not set – those are called valueless tags
     */
    key: string;
    /**
     * has no documentation
     */
    tagKey?: outputs.RequestNamingPlaceholdersPlaceholderSourceServiceTagTagKey;
    /**
     * The value of the tag. Not applicable to custom tags. If a tag does have a separate key and value (in the textual representation they are split by the colon ‘:’), this field is set with the actual value. Key-value pairs can occur for automatically imported tags and tags set by rules if extractors are used
     */
    value?: string;
}

export interface RequestNamingPlaceholdersPlaceholderSourceServiceTagTagKey {
    /**
     * has no documentation
     */
    context?: string;
    /**
     * has no documentation
     */
    key?: string;
}

export interface ResourceAttributesKeys {
    rules: outputs.ResourceAttributesKeysRule[];
}

export interface ResourceAttributesKeysRule {
    /**
     * Attribute key **service.name** is automatically captured by default
     */
    attributeKey: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Possible Values: `MASK_ENTIRE_VALUE`, `MASK_ONLY_CONFIDENTIAL_DATA`, `NOT_MASKED`
     */
    masking: string;
}

export interface RumProviderBreakdownDomainNamePatternList {
    domainNamePatterns: outputs.RumProviderBreakdownDomainNamePatternListDomainNamePattern[];
}

export interface RumProviderBreakdownDomainNamePatternListDomainNamePattern {
    /**
     * Use a ends-with pattern for this content provider's domain
     */
    pattern: string;
}

export interface SegmentIncludes {
    /**
     * TODO: No documentation available
     */
    items?: outputs.SegmentIncludesItem[];
}

export interface SegmentIncludesItem {
    /**
     * [Experimental] The tables that the entity-filter will be applied to`
     */
    applyTos?: string[];
    /**
     * The data object that the filter will be applied to. Use '*all*data_object' to apply it to all dataObjects
     */
    dataObject: string;
    /**
     * Data will be filtered by this value
     */
    filter: string;
    /**
     * [Experimental] The relationship of an include which has to be be specified when the data object is an entity view
     */
    relationship?: outputs.SegmentIncludesItemRelationship;
}

export interface SegmentIncludesItemRelationship {
    /**
     * Name of the relationship
     */
    name: string;
    /**
     * Target of the relationship
     */
    target: string;
}

export interface SegmentVariables {
    /**
     * Type of the variable
     */
    type: string;
    /**
     * Value of the variable
     */
    value: string;
}

export interface ServiceAnomaliesFailureRates {
    /**
     * Parameters of failure rate increase auto-detection. Example: If the expected error rate is 1.5%, and you set an absolute increase of 1%, and a relative increase of 50%, the thresholds will be:  Absolute: 1.5% + **1%** = 2.5%  Relative: 1.5% + 1.5% * **50%** = 2.25%
     */
    auto?: outputs.ServiceAnomaliesFailureRatesAuto;
    /**
     * Fixed thresholds for failure rate increase detection
     */
    thresholds?: outputs.ServiceAnomaliesFailureRatesThresholds;
}

export interface ServiceAnomaliesFailureRatesAuto {
    /**
     * Absolute increase of failing service calls to trigger an alert, %
     */
    absolute: number;
    /**
     * Relative increase of failing service calls to trigger an alert, %
     */
    relative: number;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface ServiceAnomaliesFailureRatesThresholds {
    /**
     * Sensitivity of the threshold.  With `low` sensitivity, high statistical confidence is used. Brief violations (for example, due to a surge in load) won't trigger alerts.  With `high` sensitivity, no statistical confidence is used. Each violation triggers alert
     */
    sensitivity: string;
    /**
     * Failure rate during any 5-minute period to trigger an alert, %
     */
    threshold: number;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface ServiceAnomaliesLoad {
    /**
     * The configuration of traffic drops detection
     */
    drops?: outputs.ServiceAnomaliesLoadDrops;
    /**
     * The configuration of traffic spikes detection
     */
    spikes?: outputs.ServiceAnomaliesLoadSpikes;
}

export interface ServiceAnomaliesLoadDrops {
    /**
     * Alert if the service stays in abnormal state for at least *X* minutes
     */
    minutes?: number;
    /**
     * Alert if the observed load is more than *X* % of the expected value
     */
    percent?: number;
}

export interface ServiceAnomaliesLoadSpikes {
    /**
     * Alert if the service stays in abnormal state for at least *X* minutes
     */
    minutes?: number;
    /**
     * Alert if the observed load is more than *X* % of the expected value
     */
    percent?: number;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface ServiceAnomaliesResponseTimes {
    /**
     * Parameters of the response time degradation auto-detection. Violation of **any** criterion triggers an alert
     */
    auto?: outputs.ServiceAnomaliesResponseTimesAuto;
    /**
     * Fixed thresholds for response time degradation detection
     */
    thresholds?: outputs.ServiceAnomaliesResponseTimesThresholds;
}

export interface ServiceAnomaliesResponseTimesAuto {
    /**
     * Minimal service load to detect response time degradation. Response time degradation of services with smaller load won't trigger alerts. Possible values are `FIFTEEN_REQUESTS_PER_MINUTE`, `FIVE_REQUESTS_PER_MINUTE`, `ONE_REQUEST_PER_MINUTE` and `TEN_REQUESTS_PER_MINUTE`
     */
    load: string;
    /**
     * Alert if the response time degrades by more than *X* milliseconds
     */
    milliseconds: number;
    /**
     * Alert if the response time degrades by more than *X* %
     */
    percent: number;
    /**
     * Alert if the response time of the slowest 10% degrades by more than *X* milliseconds
     */
    slowestMilliseconds: number;
    /**
     * Alert if the response time of the slowest 10% degrades by more than *X* milliseconds
     */
    slowestPercent: number;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface ServiceAnomaliesResponseTimesThresholds {
    /**
     * Minimal service load to detect response time degradation. Response time degradation of services with smaller load won't trigger alerts. Possible values are `FIFTEEN_REQUESTS_PER_MINUTE`, `FIVE_REQUESTS_PER_MINUTE`, `ONE_REQUEST_PER_MINUTE` and `TEN_REQUESTS_PER_MINUTE`
     */
    load: string;
    /**
     * Response time during any 5-minute period to trigger an alert, in milliseconds
     */
    milliseconds: number;
    /**
     * Sensitivity of the threshold.  With `low` sensitivity, high statistical confidence is used. Brief violations (for example, due to a surge in load) won't trigger alerts.  With `high` sensitivity, no statistical confidence is used. Each violation triggers an alert
     */
    sensitivity: string;
    /**
     * Response time of the 10% slowest during any 5-minute period to trigger an alert, in milliseconds
     */
    slowestMilliseconds: number;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface ServiceAnomaliesV2FailureRate {
    /**
     * Alert if the percentage of failing service calls increases by **both** the absolute and relative thresholds:
     */
    autoDetection?: outputs.ServiceAnomaliesV2FailureRateAutoDetection;
    /**
     * Possible Values: `Auto`, `Fixed`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Alert if a given failure rate is exceeded during any 5-minute-period
     */
    fixedDetection?: outputs.ServiceAnomaliesV2FailureRateFixedDetection;
}

export interface ServiceAnomaliesV2FailureRateAutoDetection {
    /**
     * Absolute threshold
     */
    absoluteIncrease: number;
    /**
     * Avoid over-alerting
     */
    overAlertingProtection: outputs.ServiceAnomaliesV2FailureRateAutoDetectionOverAlertingProtection;
    /**
     * Relative threshold
     */
    relativeIncrease: number;
}

export interface ServiceAnomaliesV2FailureRateAutoDetectionOverAlertingProtection {
    /**
     * Only alert if the abnormal state remains for at least
     */
    minutesAbnormalState: number;
    /**
     * Only alert if there are at least
     */
    requestsPerMinute: number;
}

export interface ServiceAnomaliesV2FailureRateFixedDetection {
    /**
     * Avoid over-alerting
     */
    overAlertingProtection: outputs.ServiceAnomaliesV2FailureRateFixedDetectionOverAlertingProtection;
    /**
     * Possible Values: `High`, `Low`, `Medium`
     */
    sensitivity: string;
    /**
     * no documentation available
     */
    threshold: number;
}

export interface ServiceAnomaliesV2FailureRateFixedDetectionOverAlertingProtection {
    /**
     * Only alert if the abnormal state remains for at least
     */
    minutesAbnormalState: number;
    /**
     * Only alert if there are at least
     */
    requestsPerMinute: number;
}

export interface ServiceAnomaliesV2LoadDrops {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Threshold
     */
    loadDropPercent?: number;
    /**
     * Time span
     */
    minutesAbnormalState?: number;
}

export interface ServiceAnomaliesV2LoadSpikes {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Threshold
     */
    loadSpikePercent?: number;
    /**
     * Time span
     */
    minutesAbnormalState?: number;
}

export interface ServiceAnomaliesV2ResponseTime {
    /**
     * no documentation available
     */
    autoDetection?: outputs.ServiceAnomaliesV2ResponseTimeAutoDetection;
    /**
     * Possible Values: `Auto`, `Fixed`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * no documentation available
     */
    fixedDetection?: outputs.ServiceAnomaliesV2ResponseTimeFixedDetection;
}

export interface ServiceAnomaliesV2ResponseTimeAutoDetection {
    /**
     * Avoid over-alerting
     */
    overAlertingProtection: outputs.ServiceAnomaliesV2ResponseTimeAutoDetectionOverAlertingProtection;
    /**
     * Alert if the median response time of all requests degrades beyond **both** the absolute and relative thresholds:
     */
    responseTimeAll: outputs.ServiceAnomaliesV2ResponseTimeAutoDetectionResponseTimeAll;
    /**
     * Alert if the response time of the slowest 10% of requests degrades beyond **both** the absolute and relative thresholds:
     */
    responseTimeSlowest: outputs.ServiceAnomaliesV2ResponseTimeAutoDetectionResponseTimeSlowest;
}

export interface ServiceAnomaliesV2ResponseTimeAutoDetectionOverAlertingProtection {
    /**
     * Only alert if the abnormal state remains for at least
     */
    minutesAbnormalState: number;
    /**
     * Only alert if there are at least
     */
    requestsPerMinute: number;
}

export interface ServiceAnomaliesV2ResponseTimeAutoDetectionResponseTimeAll {
    /**
     * Absolute threshold
     */
    degradationMilliseconds: number;
    /**
     * Relative threshold
     */
    degradationPercent: number;
}

export interface ServiceAnomaliesV2ResponseTimeAutoDetectionResponseTimeSlowest {
    /**
     * Absolute threshold
     */
    slowestDegradationMilliseconds: number;
    /**
     * Relative threshold
     */
    slowestDegradationPercent: number;
}

export interface ServiceAnomaliesV2ResponseTimeFixedDetection {
    /**
     * Avoid over-alerting
     */
    overAlertingProtection: outputs.ServiceAnomaliesV2ResponseTimeFixedDetectionOverAlertingProtection;
    /**
     * Alert if the median response time of all requests degrades beyond this threshold:
     */
    responseTimeAll: outputs.ServiceAnomaliesV2ResponseTimeFixedDetectionResponseTimeAll;
    /**
     * Alert if the response time of the slowest 10% of requests degrades beyond this threshold:
     */
    responseTimeSlowest: outputs.ServiceAnomaliesV2ResponseTimeFixedDetectionResponseTimeSlowest;
    /**
     * Possible Values: `High`, `Low`, `Medium`
     */
    sensitivity: string;
}

export interface ServiceAnomaliesV2ResponseTimeFixedDetectionOverAlertingProtection {
    /**
     * Only alert if the abnormal state remains for at least
     */
    minutesAbnormalState: number;
    /**
     * Only alert if there are at least
     */
    requestsPerMinute: number;
}

export interface ServiceAnomaliesV2ResponseTimeFixedDetectionResponseTimeAll {
    /**
     * Alert if the response time degrades beyond this many ms within an observation period of 5 minutes
     */
    degradationMilliseconds: number;
}

export interface ServiceAnomaliesV2ResponseTimeFixedDetectionResponseTimeSlowest {
    /**
     * Alert if the response time of the slowest 10% degrades beyond this many ms within an observation period of 5 minutes
     */
    slowestDegradationMilliseconds: number;
}

export interface ServiceDetectionRulesRule {
    /**
     * Define resource attributes that should not be part of the name but are required to detect the service, e.g. service.namespace or k8s.workload.kind.. Attributes specified here are required to apply the rule. If any of them is missing, the rule will not be applied and ruleset evaluation continues.
     *
     * All attribute values contribute to the final service ID.
     */
    additionalRequiredAttributes?: string[];
    /**
     * Limits the scope of the service detection rule using [DQL matcher](https://dt-url.net/l603wby) conditions on resource attributes.. A rule is applied only if the condition matches, otherwise the ruleset evaluation continues.
     *
     * If empty, the condition will always match.
     */
    condition?: string;
    /**
     * no documentation available
     */
    description?: string;
    /**
     * Rule name
     */
    ruleName: string;
    /**
     * Specify resource attribute placeholders in curly braces, e.g. {service.name} or {k8s.workload.name}.. All attributes used in the placeholder are required for the rule to apply. If any of them is missing, the rule will not be applied and ruleset evaluation continues.
     */
    serviceNameTemplate: string;
}

export interface ServiceExternalWebRequestConditions {
    conditions: outputs.ServiceExternalWebRequestConditionsCondition[];
}

export interface ServiceExternalWebRequestConditionsCondition {
    /**
     * Take the value of this attribute
     */
    attribute: string;
    /**
     * Apply this operation
     */
    compareOperationType: string;
    /**
     * Technology
     */
    frameworks?: string[];
    /**
     * Ignore case sensitivity for texts.
     */
    ignoreCase?: boolean;
    /**
     * Value
     */
    intValue?: number;
    /**
     * Values
     */
    intValues?: number[];
    /**
     * From
     */
    ipRangeFrom?: string;
    /**
     * To
     */
    ipRangeTo?: string;
    /**
     * If multiple values are specified, at least one of them must match for the condition to match
     */
    tagValues?: string[];
    /**
     * If multiple values are specified, at least one of them must match for the condition to match
     */
    textValues?: string[];
}

export interface ServiceExternalWebRequestIdContributors {
    /**
     * Application identifier
     */
    applicationId: outputs.ServiceExternalWebRequestIdContributorsApplicationId;
    /**
     * URL context root
     */
    contextRoot: outputs.ServiceExternalWebRequestIdContributorsContextRoot;
    /**
     * Let the port contribute to the Service Id
     */
    portForServiceId: boolean;
    /**
     * Public domain name
     */
    publicDomainName: outputs.ServiceExternalWebRequestIdContributorsPublicDomainName;
}

export interface ServiceExternalWebRequestIdContributorsApplicationId {
    /**
     * Transform this value before letting it contribute to the Service Id
     */
    enableIdContributor: boolean;
    /**
     * no documentation available
     */
    serviceIdContributor?: outputs.ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributor;
}

export interface ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributor {
    /**
     * Possible Values: `OriginalValue`, `OverrideValue`, `TransformValue`
     */
    contributionType: string;
    /**
     * Choose how to transform a value before it contributes to the Service Id. Note that all of the Transformations are always applied. Transformations are applied in the order they are specified, and the output of the previous transformation is the input for the next one. The resulting value contributes to the Service Id and can be found on the **Service overview page** under **Properties and tags**.
     */
    transformations?: outputs.ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorTransformations;
    /**
     * The value to be used instead of the detected value.
     */
    valueOverride?: outputs.ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorValueOverride;
}

export interface ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorTransformations {
    transformations: outputs.ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsTransformation[];
}

export interface ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsTransformation {
    /**
     * include hexadecimal numbers
     */
    includeHexNumbers?: boolean;
    /**
     * min digit count
     */
    minDigitCount?: number;
    /**
     * no documentation available
     */
    prefix?: string;
    /**
     * replacement
     */
    replacementValue?: string;
    /**
     * How many segments should be taken.
     */
    segmentCount?: number;
    /**
     * select index
     */
    selectIndex?: number;
    /**
     * split by
     */
    splitDelimiter?: string;
    /**
     * no documentation available
     */
    suffix?: string;
    /**
     * take from end
     */
    takeFromEnd?: boolean;
    /**
     * Possible Values: `AFTER`, `BEFORE`, `BETWEEN`, `REMOVE_CREDIT_CARDS`, `REMOVE_IBANS`, `REMOVE_IPS`, `REMOVE_NUMBERS`, `REPLACE_BETWEEN`, `SPLIT_SELECT`, `TAKE_SEGMENTS`
     */
    transformationType: string;
}

export interface ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorValueOverride {
    /**
     * no documentation available
     */
    value: string;
}

export interface ServiceExternalWebRequestIdContributorsContextRoot {
    /**
     * Transform this value before letting it contribute to the Service Id
     */
    enableIdContributor: boolean;
    /**
     * no documentation available
     */
    serviceIdContributor?: outputs.ServiceExternalWebRequestIdContributorsContextRootServiceIdContributor;
}

export interface ServiceExternalWebRequestIdContributorsContextRootServiceIdContributor {
    /**
     * Possible Values: `OriginalValue`, `OverrideValue`, `TransformURL`, `TransformValue`
     */
    contributionType: string;
    /**
     * The number of segments of the URL to be kept. The URL is divided by slashes (/), the indexing starts with 1 at context root. For example, if you specify 2 for the `www.dynatrace.com/support/help/dynatrace-api/` URL, the value of `support/help` is used.
     */
    segmentCount?: number;
    /**
     * Choose how to transform a value before it contributes to the Service Id. Note that all of the Transformations are always applied. Transformations are applied in the order they are specified, and the output of the previous transformation is the input for the next one. The resulting value contributes to the Service Id and can be found on the **Service overview page** under **Properties and tags**.
     */
    transformations?: outputs.ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorTransformations;
    /**
     * The value to be used instead of the detected value.
     */
    valueOverride?: outputs.ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorValueOverride;
}

export interface ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorTransformations {
    transformations: outputs.ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorTransformationsTransformation[];
}

export interface ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorTransformationsTransformation {
    /**
     * include hexadecimal numbers
     */
    includeHexNumbers?: boolean;
    /**
     * min digit count
     */
    minDigitCount?: number;
    /**
     * no documentation available
     */
    prefix?: string;
    /**
     * replacement
     */
    replacementValue?: string;
    /**
     * no documentation available
     */
    suffix?: string;
    /**
     * Possible Values: `BEFORE`, `REMOVE_CREDIT_CARDS`, `REMOVE_IBANS`, `REMOVE_IPS`, `REMOVE_NUMBERS`, `REPLACE_BETWEEN`
     */
    transformationType: string;
}

export interface ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorValueOverride {
    /**
     * no documentation available
     */
    value: string;
}

export interface ServiceExternalWebRequestIdContributorsPublicDomainName {
    /**
     * Transform this value before letting it contribute to the Service Id
     */
    enableIdContributor: boolean;
    /**
     * no documentation available
     */
    serviceIdContributor?: outputs.ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributor;
}

export interface ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributor {
    /**
     * Possible Values: `OriginalValue`, `OverrideValue`, `TransformValue`
     */
    contributionType: string;
    /**
     * Use the detected host name instead of the request's domain name.
     */
    copyFromHostName?: boolean;
    /**
     * Choose how to transform a value before it contributes to the Service Id. Note that all of the Transformations are always applied. Transformations are applied in the order they are specified, and the output of the previous transformation is the input for the next one. The resulting value contributes to the Service Id and can be found on the **Service overview page** under **Properties and tags**.
     */
    transformations?: outputs.ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorTransformations;
    /**
     * The value to be used instead of the detected value.
     */
    valueOverride?: outputs.ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorValueOverride;
}

export interface ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorTransformations {
    transformations: outputs.ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorTransformationsTransformation[];
}

export interface ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorTransformationsTransformation {
    /**
     * include hexadecimal numbers
     */
    includeHexNumbers?: boolean;
    /**
     * min digit count
     */
    minDigitCount?: number;
    /**
     * no documentation available
     */
    prefix?: string;
    /**
     * replacement
     */
    replacementValue?: string;
    /**
     * How many segments should be taken.
     */
    segmentCount?: number;
    /**
     * select index
     */
    selectIndex?: number;
    /**
     * split by
     */
    splitDelimiter?: string;
    /**
     * no documentation available
     */
    suffix?: string;
    /**
     * take from end
     */
    takeFromEnd?: boolean;
    /**
     * Possible Values: `AFTER`, `BEFORE`, `BETWEEN`, `REMOVE_CREDIT_CARDS`, `REMOVE_IBANS`, `REMOVE_IPS`, `REMOVE_NUMBERS`, `REPLACE_BETWEEN`, `SPLIT_SELECT`, `TAKE_SEGMENTS`
     */
    transformationType: string;
}

export interface ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorValueOverride {
    /**
     * no documentation available
     */
    value: string;
}

export interface ServiceExternalWebServiceConditions {
    conditions: outputs.ServiceExternalWebServiceConditionsCondition[];
}

export interface ServiceExternalWebServiceConditionsCondition {
    /**
     * Take the value of this attribute
     */
    attribute: string;
    /**
     * Apply this operation
     */
    compareOperationType: string;
    /**
     * Technology
     */
    frameworks?: string[];
    /**
     * Ignore case sensitivity for texts.
     */
    ignoreCase?: boolean;
    /**
     * Value
     */
    intValue?: number;
    /**
     * Values
     */
    intValues?: number[];
    /**
     * From
     */
    ipRangeFrom?: string;
    /**
     * To
     */
    ipRangeTo?: string;
    /**
     * If multiple values are specified, at least one of them must match for the condition to match
     */
    tagValues?: string[];
    /**
     * If multiple values are specified, at least one of them must match for the condition to match
     */
    textValues?: string[];
}

export interface ServiceExternalWebServiceIdContributors {
    /**
     * Detect the matching requests as web request services instead of web services.
     */
    detectAsWebRequestService: boolean;
    /**
     * Let the port contribute to the Service Id
     */
    portForServiceId?: boolean;
    /**
     * URL path
     */
    urlPath?: outputs.ServiceExternalWebServiceIdContributorsUrlPath;
}

export interface ServiceExternalWebServiceIdContributorsUrlPath {
    /**
     * Transform this value before letting it contribute to the Service Id
     */
    enableIdContributor: boolean;
    /**
     * no documentation available
     */
    serviceIdContributor?: outputs.ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributor;
}

export interface ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributor {
    /**
     * Possible Values: `OriginalValue`, `OverrideValue`, `TransformValue`
     */
    contributionType: string;
    /**
     * Choose how to transform a value before it contributes to the Service Id. Note that all of the Transformations are always applied. Transformations are applied in the order they are specified, and the output of the previous transformation is the input for the next one. The resulting value contributes to the Service Id and can be found on the **Service overview page** under **Properties and tags**.
     */
    transformations?: outputs.ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorTransformations;
    /**
     * The value to be used instead of the detected value.
     */
    valueOverride?: outputs.ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorValueOverride;
}

export interface ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorTransformations {
    transformations: outputs.ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorTransformationsTransformation[];
}

export interface ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorTransformationsTransformation {
    /**
     * include hexadecimal numbers
     */
    includeHexNumbers?: boolean;
    /**
     * min digit count
     */
    minDigitCount?: number;
    /**
     * no documentation available
     */
    prefix?: string;
    /**
     * replacement
     */
    replacementValue?: string;
    /**
     * How many segments should be taken.
     */
    segmentCount?: number;
    /**
     * select index
     */
    selectIndex?: number;
    /**
     * split by
     */
    splitDelimiter?: string;
    /**
     * no documentation available
     */
    suffix?: string;
    /**
     * take from end
     */
    takeFromEnd?: boolean;
    /**
     * Possible Values: `AFTER`, `BEFORE`, `BETWEEN`, `REMOVE_CREDIT_CARDS`, `REMOVE_IBANS`, `REMOVE_IPS`, `REMOVE_NUMBERS`, `REPLACE_BETWEEN`, `SPLIT_SELECT`, `TAKE_SEGMENTS`
     */
    transformationType: string;
}

export interface ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorValueOverride {
    /**
     * no documentation available
     */
    value: string;
}

export interface ServiceFailureExceptionRules {
    /**
     * Some custom error situations are only detectable via a return value or other means. To support such cases, [define a request attribute](https://dt-url.net/ys5k0p4y) that captures the required data. Then define a custom error rule that determines if the request has failed based on the value of the request attribute.
     */
    customErrorRules?: outputs.ServiceFailureExceptionRulesCustomErrorRules;
    /**
     * There may be situations where your application code handles exceptions gracefully in a manner that these failures aren't detected by Dynatrace. Use this setting to define specific gracefully-handled exceptions that should be treated as service failures.
     */
    customHandledExceptions?: outputs.ServiceFailureExceptionRulesCustomHandledExceptions;
    /**
     * Ignore all exceptions
     */
    ignoreAllExceptions: boolean;
    /**
     * Ignore span failure detection
     */
    ignoreSpanFailureDetection: boolean;
    /**
     * Some exceptions that are thrown by legacy or 3rd-party code indicate a specific response, not an error. Use this setting to instruct Dynatrace to treat such exceptions as non-failed requests.. If an exception matching any of the defined patterns occurs in a request, it will not be considered as a failure. Other exceptions occurring at the same request might still mark the request as failed.
     */
    ignoredExceptions?: outputs.ServiceFailureExceptionRulesIgnoredExceptions;
    /**
     * Define exceptions which indicate that a service call should not be considered as failed. E.g. an exception indicating that the client aborted the operation.. If an exception matching any of the defined patterns occurs on the entry node of the service, it will be considered successful. Compared to ignored exceptions, the request will be considered successful even if other exceptions occur in the same request.
     */
    successForcingExceptions?: outputs.ServiceFailureExceptionRulesSuccessForcingExceptions;
}

export interface ServiceFailureExceptionRulesCustomErrorRules {
    customErrorRules: outputs.ServiceFailureExceptionRulesCustomErrorRulesCustomErrorRule[];
}

export interface ServiceFailureExceptionRulesCustomErrorRulesCustomErrorRule {
    /**
     * Request attribute condition
     */
    condition: outputs.ServiceFailureExceptionRulesCustomErrorRulesCustomErrorRuleCondition;
    /**
     * Request attribute
     */
    requestAttribute: string;
}

export interface ServiceFailureExceptionRulesCustomErrorRulesCustomErrorRuleCondition {
    /**
     * Case sensitive
     */
    caseSensitive?: boolean;
    /**
     * Apply this comparison
     */
    compareOperationType: string;
    /**
     * Value
     */
    doubleValue?: number;
    /**
     * Value
     */
    intValue?: number;
    /**
     * Value
     */
    textValue?: string;
}

export interface ServiceFailureExceptionRulesCustomHandledExceptions {
    customHandledExceptions: outputs.ServiceFailureExceptionRulesCustomHandledExceptionsCustomHandledException[];
}

export interface ServiceFailureExceptionRulesCustomHandledExceptionsCustomHandledException {
    /**
     * The pattern will match if it is contained within the actual class name.
     */
    classPattern?: string;
    /**
     * Optionally, define an exception message pattern. The pattern will match if the actual exception message contains the pattern.
     */
    messagePattern?: string;
}

export interface ServiceFailureExceptionRulesIgnoredExceptions {
    customHandledExceptions: outputs.ServiceFailureExceptionRulesIgnoredExceptionsCustomHandledException[];
}

export interface ServiceFailureExceptionRulesIgnoredExceptionsCustomHandledException {
    /**
     * The pattern will match if it is contained within the actual class name.
     */
    classPattern?: string;
    /**
     * Optionally, define an exception message pattern. The pattern will match if the actual exception message contains the pattern.
     */
    messagePattern?: string;
}

export interface ServiceFailureExceptionRulesSuccessForcingExceptions {
    customHandledExceptions: outputs.ServiceFailureExceptionRulesSuccessForcingExceptionsCustomHandledException[];
}

export interface ServiceFailureExceptionRulesSuccessForcingExceptionsCustomHandledException {
    /**
     * The pattern will match if it is contained within the actual class name.
     */
    classPattern?: string;
    /**
     * Optionally, define an exception message pattern. The pattern will match if the actual exception message contains the pattern.
     */
    messagePattern?: string;
}

export interface ServiceFullWebRequestConditions {
    conditions: outputs.ServiceFullWebRequestConditionsCondition[];
}

export interface ServiceFullWebRequestConditionsCondition {
    /**
     * Take the value of this attribute
     */
    attribute: string;
    /**
     * Apply this operation
     */
    compareOperationType: string;
    /**
     * Technology
     */
    frameworks?: string[];
    /**
     * Ignore case sensitivity for texts.
     */
    ignoreCase?: boolean;
    /**
     * Value
     */
    intValue?: number;
    /**
     * Values
     */
    intValues?: number[];
    /**
     * From
     */
    ipRangeFrom?: string;
    /**
     * To
     */
    ipRangeTo?: string;
    /**
     * If multiple values are specified, at least one of them must match for the condition to match
     */
    tagValues?: string[];
    /**
     * If multiple values are specified, at least one of them must match for the condition to match
     */
    textValues?: string[];
}

export interface ServiceFullWebRequestIdContributors {
    /**
     * Application identifier
     */
    applicationId: outputs.ServiceFullWebRequestIdContributorsApplicationId;
    /**
     * The context root is the first segment of the request URL after the Server name. For example, in the `www.dynatrace.com/support/help/dynatrace-api/` URL the context root is `/support`. The context root value can be found on the **Service overview page** under **Properties and tags**.
     */
    contextRoot: outputs.ServiceFullWebRequestIdContributorsContextRoot;
    /**
     * Server Name
     */
    serverName: outputs.ServiceFullWebRequestIdContributorsServerName;
}

export interface ServiceFullWebRequestIdContributorsApplicationId {
    /**
     * Transform this value before letting it contribute to the Service Id
     */
    enableIdContributor: boolean;
    /**
     * no documentation available
     */
    serviceIdContributor?: outputs.ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributor;
}

export interface ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributor {
    /**
     * Possible Values: `OriginalValue`, `OverrideValue`, `TransformValue`
     */
    contributionType: string;
    /**
     * Choose how to transform a value before it contributes to the Service Id. Note that all of the Transformations are always applied. Transformations are applied in the order they are specified, and the output of the previous transformation is the input for the next one. The resulting value contributes to the Service Id and can be found on the **Service overview page** under **Properties and tags**.
     */
    transformations?: outputs.ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorTransformations;
    /**
     * The value to be used instead of the detected value.
     */
    valueOverride?: outputs.ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorValueOverride;
}

export interface ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorTransformations {
    transformations: outputs.ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsTransformation[];
}

export interface ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsTransformation {
    /**
     * include hexadecimal numbers
     */
    includeHexNumbers?: boolean;
    /**
     * min digit count
     */
    minDigitCount?: number;
    /**
     * no documentation available
     */
    prefix?: string;
    /**
     * replacement
     */
    replacementValue?: string;
    /**
     * How many segments should be taken.
     */
    segmentCount?: number;
    /**
     * select index
     */
    selectIndex?: number;
    /**
     * split by
     */
    splitDelimiter?: string;
    /**
     * no documentation available
     */
    suffix?: string;
    /**
     * take from end
     */
    takeFromEnd?: boolean;
    /**
     * Possible Values: `AFTER`, `BEFORE`, `BETWEEN`, `REMOVE_CREDIT_CARDS`, `REMOVE_IBANS`, `REMOVE_IPS`, `REMOVE_NUMBERS`, `REPLACE_BETWEEN`, `SPLIT_SELECT`, `TAKE_SEGMENTS`
     */
    transformationType: string;
}

export interface ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorValueOverride {
    /**
     * no documentation available
     */
    value: string;
}

export interface ServiceFullWebRequestIdContributorsContextRoot {
    /**
     * Transform this value before letting it contribute to the Service Id
     */
    enableIdContributor: boolean;
    /**
     * no documentation available
     */
    serviceIdContributor?: outputs.ServiceFullWebRequestIdContributorsContextRootServiceIdContributor;
}

export interface ServiceFullWebRequestIdContributorsContextRootServiceIdContributor {
    /**
     * Possible Values: `OriginalValue`, `OverrideValue`, `TransformURL`, `TransformValue`
     */
    contributionType: string;
    /**
     * The number of segments of the URL to be kept. The URL is divided by slashes (/), the indexing starts with 1 at context root. For example, if you specify 2 for the `www.dynatrace.com/support/help/dynatrace-api/` URL, the value of `support/help` is used.
     */
    segmentCount?: number;
    /**
     * Choose how to transform a value before it contributes to the Service Id. Note that all of the Transformations are always applied. Transformations are applied in the order they are specified, and the output of the previous transformation is the input for the next one. The resulting value contributes to the Service Id and can be found on the **Service overview page** under **Properties and tags**.
     */
    transformations?: outputs.ServiceFullWebRequestIdContributorsContextRootServiceIdContributorTransformations;
    /**
     * The value to be used instead of the detected value.
     */
    valueOverride?: outputs.ServiceFullWebRequestIdContributorsContextRootServiceIdContributorValueOverride;
}

export interface ServiceFullWebRequestIdContributorsContextRootServiceIdContributorTransformations {
    transformations: outputs.ServiceFullWebRequestIdContributorsContextRootServiceIdContributorTransformationsTransformation[];
}

export interface ServiceFullWebRequestIdContributorsContextRootServiceIdContributorTransformationsTransformation {
    /**
     * include hexadecimal numbers
     */
    includeHexNumbers?: boolean;
    /**
     * min digit count
     */
    minDigitCount?: number;
    /**
     * no documentation available
     */
    prefix?: string;
    /**
     * replacement
     */
    replacementValue?: string;
    /**
     * no documentation available
     */
    suffix?: string;
    /**
     * Possible Values: `BEFORE`, `REMOVE_CREDIT_CARDS`, `REMOVE_IBANS`, `REMOVE_IPS`, `REMOVE_NUMBERS`, `REPLACE_BETWEEN`
     */
    transformationType: string;
}

export interface ServiceFullWebRequestIdContributorsContextRootServiceIdContributorValueOverride {
    /**
     * no documentation available
     */
    value: string;
}

export interface ServiceFullWebRequestIdContributorsServerName {
    /**
     * Transform this value before letting it contribute to the Service Id
     */
    enableIdContributor: boolean;
    /**
     * no documentation available
     */
    serviceIdContributor?: outputs.ServiceFullWebRequestIdContributorsServerNameServiceIdContributor;
}

export interface ServiceFullWebRequestIdContributorsServerNameServiceIdContributor {
    /**
     * Possible Values: `OriginalValue`, `OverrideValue`, `TransformValue`
     */
    contributionType: string;
    /**
     * Choose how to transform a value before it contributes to the Service Id. Note that all of the Transformations are always applied. Transformations are applied in the order they are specified, and the output of the previous transformation is the input for the next one. The resulting value contributes to the Service Id and can be found on the **Service overview page** under **Properties and tags**.
     */
    transformations?: outputs.ServiceFullWebRequestIdContributorsServerNameServiceIdContributorTransformations;
    /**
     * The value to be used instead of the detected value.
     */
    valueOverride?: outputs.ServiceFullWebRequestIdContributorsServerNameServiceIdContributorValueOverride;
}

export interface ServiceFullWebRequestIdContributorsServerNameServiceIdContributorTransformations {
    transformations: outputs.ServiceFullWebRequestIdContributorsServerNameServiceIdContributorTransformationsTransformation[];
}

export interface ServiceFullWebRequestIdContributorsServerNameServiceIdContributorTransformationsTransformation {
    /**
     * include hexadecimal numbers
     */
    includeHexNumbers?: boolean;
    /**
     * min digit count
     */
    minDigitCount?: number;
    /**
     * no documentation available
     */
    prefix?: string;
    /**
     * replacement
     */
    replacementValue?: string;
    /**
     * How many segments should be taken.
     */
    segmentCount?: number;
    /**
     * select index
     */
    selectIndex?: number;
    /**
     * split by
     */
    splitDelimiter?: string;
    /**
     * no documentation available
     */
    suffix?: string;
    /**
     * take from end
     */
    takeFromEnd?: boolean;
    /**
     * Possible Values: `AFTER`, `BEFORE`, `BETWEEN`, `REMOVE_CREDIT_CARDS`, `REMOVE_IBANS`, `REMOVE_IPS`, `REMOVE_NUMBERS`, `REPLACE_BETWEEN`, `SPLIT_SELECT`, `TAKE_SEGMENTS`
     */
    transformationType: string;
}

export interface ServiceFullWebRequestIdContributorsServerNameServiceIdContributorValueOverride {
    /**
     * no documentation available
     */
    value: string;
}

export interface ServiceFullWebServiceConditions {
    conditions: outputs.ServiceFullWebServiceConditionsCondition[];
}

export interface ServiceFullWebServiceConditionsCondition {
    /**
     * Take the value of this attribute
     */
    attribute: string;
    /**
     * Apply this operation
     */
    compareOperationType: string;
    /**
     * Technology
     */
    frameworks?: string[];
    /**
     * Ignore case sensitivity for texts.
     */
    ignoreCase?: boolean;
    /**
     * Value
     */
    intValue?: number;
    /**
     * Values
     */
    intValues?: number[];
    /**
     * From
     */
    ipRangeFrom?: string;
    /**
     * To
     */
    ipRangeTo?: string;
    /**
     * If multiple values are specified, at least one of them must match for the condition to match
     */
    tagValues?: string[];
    /**
     * If multiple values are specified, at least one of them must match for the condition to match
     */
    textValues?: string[];
}

export interface ServiceFullWebServiceIdContributors {
    /**
     * Application identifier
     */
    applicationId?: outputs.ServiceFullWebServiceIdContributorsApplicationId;
    /**
     * The context root is the first segment of the request URL after the Server name. For example, in the `www.dynatrace.com/support/help/dynatrace-api/` URL the context root is `/support`. The context root value can be found on the **Service overview page** under **Properties and tags**.
     */
    contextRoot?: outputs.ServiceFullWebServiceIdContributorsContextRoot;
    /**
     * Detect the matching requests as full web services (false) or web request services (true).
     */
    detectAsWebRequestService: boolean;
    /**
     * Server name
     */
    serverName?: outputs.ServiceFullWebServiceIdContributorsServerName;
    /**
     * Web service name
     */
    webServiceName?: outputs.ServiceFullWebServiceIdContributorsWebServiceName;
    /**
     * Web service namespace
     */
    webServiceNamespace?: outputs.ServiceFullWebServiceIdContributorsWebServiceNamespace;
}

export interface ServiceFullWebServiceIdContributorsApplicationId {
    /**
     * Transform this value before letting it contribute to the Service Id
     */
    enableIdContributor: boolean;
    /**
     * no documentation available
     */
    serviceIdContributor?: outputs.ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributor;
}

export interface ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributor {
    /**
     * Possible Values: `OriginalValue`, `OverrideValue`, `TransformValue`
     */
    contributionType: string;
    /**
     * Choose how to transform a value before it contributes to the Service Id. Note that all of the Transformations are always applied. Transformations are applied in the order they are specified, and the output of the previous transformation is the input for the next one. The resulting value contributes to the Service Id and can be found on the **Service overview page** under **Properties and tags**.
     */
    transformations?: outputs.ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorTransformations;
    /**
     * The value to be used instead of the detected value.
     */
    valueOverride?: outputs.ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorValueOverride;
}

export interface ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorTransformations {
    transformations: outputs.ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorTransformationsTransformation[];
}

export interface ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorTransformationsTransformation {
    /**
     * include hexadecimal numbers
     */
    includeHexNumbers?: boolean;
    /**
     * min digit count
     */
    minDigitCount?: number;
    /**
     * no documentation available
     */
    prefix?: string;
    /**
     * replacement
     */
    replacementValue?: string;
    /**
     * How many segments should be taken.
     */
    segmentCount?: number;
    /**
     * select index
     */
    selectIndex?: number;
    /**
     * split by
     */
    splitDelimiter?: string;
    /**
     * no documentation available
     */
    suffix?: string;
    /**
     * take from end
     */
    takeFromEnd?: boolean;
    /**
     * Possible Values: `AFTER`, `BEFORE`, `BETWEEN`, `REMOVE_CREDIT_CARDS`, `REMOVE_IBANS`, `REMOVE_IPS`, `REMOVE_NUMBERS`, `REPLACE_BETWEEN`, `SPLIT_SELECT`, `TAKE_SEGMENTS`
     */
    transformationType: string;
}

export interface ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorValueOverride {
    /**
     * no documentation available
     */
    value: string;
}

export interface ServiceFullWebServiceIdContributorsContextRoot {
    /**
     * Transform this value before letting it contribute to the Service Id
     */
    enableIdContributor: boolean;
    /**
     * no documentation available
     */
    serviceIdContributor?: outputs.ServiceFullWebServiceIdContributorsContextRootServiceIdContributor;
}

export interface ServiceFullWebServiceIdContributorsContextRootServiceIdContributor {
    /**
     * Possible Values: `OriginalValue`, `OverrideValue`, `TransformURL`, `TransformValue`
     */
    contributionType: string;
    /**
     * The number of segments of the URL to be kept. The URL is divided by slashes (/), the indexing starts with 1 at context root. For example, if you specify 2 for the `www.dynatrace.com/support/help/dynatrace-api/` URL, the value of `support/help` is used.
     */
    segmentCount?: number;
    /**
     * Choose how to transform a value before it contributes to the Service Id. Note that all of the Transformations are always applied. Transformations are applied in the order they are specified, and the output of the previous transformation is the input for the next one. The resulting value contributes to the Service Id and can be found on the **Service overview page** under **Properties and tags**.
     */
    transformations?: outputs.ServiceFullWebServiceIdContributorsContextRootServiceIdContributorTransformations;
    /**
     * The value to be used instead of the detected value.
     */
    valueOverride?: outputs.ServiceFullWebServiceIdContributorsContextRootServiceIdContributorValueOverride;
}

export interface ServiceFullWebServiceIdContributorsContextRootServiceIdContributorTransformations {
    transformations: outputs.ServiceFullWebServiceIdContributorsContextRootServiceIdContributorTransformationsTransformation[];
}

export interface ServiceFullWebServiceIdContributorsContextRootServiceIdContributorTransformationsTransformation {
    /**
     * include hexadecimal numbers
     */
    includeHexNumbers?: boolean;
    /**
     * min digit count
     */
    minDigitCount?: number;
    /**
     * no documentation available
     */
    prefix?: string;
    /**
     * replacement
     */
    replacementValue?: string;
    /**
     * no documentation available
     */
    suffix?: string;
    /**
     * Possible Values: `BEFORE`, `REMOVE_CREDIT_CARDS`, `REMOVE_IBANS`, `REMOVE_IPS`, `REMOVE_NUMBERS`, `REPLACE_BETWEEN`
     */
    transformationType: string;
}

export interface ServiceFullWebServiceIdContributorsContextRootServiceIdContributorValueOverride {
    /**
     * no documentation available
     */
    value: string;
}

export interface ServiceFullWebServiceIdContributorsServerName {
    /**
     * Transform this value before letting it contribute to the Service Id
     */
    enableIdContributor: boolean;
    /**
     * no documentation available
     */
    serviceIdContributor?: outputs.ServiceFullWebServiceIdContributorsServerNameServiceIdContributor;
}

export interface ServiceFullWebServiceIdContributorsServerNameServiceIdContributor {
    /**
     * Possible Values: `OriginalValue`, `OverrideValue`, `TransformValue`
     */
    contributionType: string;
    /**
     * Choose how to transform a value before it contributes to the Service Id. Note that all of the Transformations are always applied. Transformations are applied in the order they are specified, and the output of the previous transformation is the input for the next one. The resulting value contributes to the Service Id and can be found on the **Service overview page** under **Properties and tags**.
     */
    transformations?: outputs.ServiceFullWebServiceIdContributorsServerNameServiceIdContributorTransformations;
    /**
     * The value to be used instead of the detected value.
     */
    valueOverride?: outputs.ServiceFullWebServiceIdContributorsServerNameServiceIdContributorValueOverride;
}

export interface ServiceFullWebServiceIdContributorsServerNameServiceIdContributorTransformations {
    transformations: outputs.ServiceFullWebServiceIdContributorsServerNameServiceIdContributorTransformationsTransformation[];
}

export interface ServiceFullWebServiceIdContributorsServerNameServiceIdContributorTransformationsTransformation {
    /**
     * include hexadecimal numbers
     */
    includeHexNumbers?: boolean;
    /**
     * min digit count
     */
    minDigitCount?: number;
    /**
     * no documentation available
     */
    prefix?: string;
    /**
     * replacement
     */
    replacementValue?: string;
    /**
     * How many segments should be taken.
     */
    segmentCount?: number;
    /**
     * select index
     */
    selectIndex?: number;
    /**
     * split by
     */
    splitDelimiter?: string;
    /**
     * no documentation available
     */
    suffix?: string;
    /**
     * take from end
     */
    takeFromEnd?: boolean;
    /**
     * Possible Values: `AFTER`, `BEFORE`, `BETWEEN`, `REMOVE_CREDIT_CARDS`, `REMOVE_IBANS`, `REMOVE_IPS`, `REMOVE_NUMBERS`, `REPLACE_BETWEEN`, `SPLIT_SELECT`, `TAKE_SEGMENTS`
     */
    transformationType: string;
}

export interface ServiceFullWebServiceIdContributorsServerNameServiceIdContributorValueOverride {
    /**
     * no documentation available
     */
    value: string;
}

export interface ServiceFullWebServiceIdContributorsWebServiceName {
    /**
     * Transform this value before letting it contribute to the Service Id
     */
    enableIdContributor: boolean;
    /**
     * no documentation available
     */
    serviceIdContributor?: outputs.ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributor;
}

export interface ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributor {
    /**
     * Possible Values: `OriginalValue`, `OverrideValue`, `TransformValue`
     */
    contributionType: string;
    /**
     * Choose how to transform a value before it contributes to the Service Id. Note that all of the Transformations are always applied. Transformations are applied in the order they are specified, and the output of the previous transformation is the input for the next one. The resulting value contributes to the Service Id and can be found on the **Service overview page** under **Properties and tags**.
     */
    transformations?: outputs.ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorTransformations;
    /**
     * The value to be used instead of the detected value.
     */
    valueOverride?: outputs.ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorValueOverride;
}

export interface ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorTransformations {
    transformations: outputs.ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorTransformationsTransformation[];
}

export interface ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorTransformationsTransformation {
    /**
     * include hexadecimal numbers
     */
    includeHexNumbers?: boolean;
    /**
     * min digit count
     */
    minDigitCount?: number;
    /**
     * no documentation available
     */
    prefix?: string;
    /**
     * replacement
     */
    replacementValue?: string;
    /**
     * How many segments should be taken.
     */
    segmentCount?: number;
    /**
     * select index
     */
    selectIndex?: number;
    /**
     * split by
     */
    splitDelimiter?: string;
    /**
     * no documentation available
     */
    suffix?: string;
    /**
     * take from end
     */
    takeFromEnd?: boolean;
    /**
     * Possible Values: `AFTER`, `BEFORE`, `BETWEEN`, `REMOVE_CREDIT_CARDS`, `REMOVE_IBANS`, `REMOVE_IPS`, `REMOVE_NUMBERS`, `REPLACE_BETWEEN`, `SPLIT_SELECT`, `TAKE_SEGMENTS`
     */
    transformationType: string;
}

export interface ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorValueOverride {
    /**
     * no documentation available
     */
    value: string;
}

export interface ServiceFullWebServiceIdContributorsWebServiceNamespace {
    /**
     * Transform this value before letting it contribute to the Service Id
     */
    enableIdContributor: boolean;
    /**
     * no documentation available
     */
    serviceIdContributor?: outputs.ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributor;
}

export interface ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributor {
    /**
     * Possible Values: `OriginalValue`, `OverrideValue`, `TransformValue`
     */
    contributionType: string;
    /**
     * Choose how to transform a value before it contributes to the Service Id. Note that all of the Transformations are always applied. Transformations are applied in the order they are specified, and the output of the previous transformation is the input for the next one. The resulting value contributes to the Service Id and can be found on the **Service overview page** under **Properties and tags**.
     */
    transformations?: outputs.ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorTransformations;
    /**
     * The value to be used instead of the detected value.
     */
    valueOverride?: outputs.ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorValueOverride;
}

export interface ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorTransformations {
    transformations: outputs.ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorTransformationsTransformation[];
}

export interface ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorTransformationsTransformation {
    /**
     * include hexadecimal numbers
     */
    includeHexNumbers?: boolean;
    /**
     * min digit count
     */
    minDigitCount?: number;
    /**
     * no documentation available
     */
    prefix?: string;
    /**
     * replacement
     */
    replacementValue?: string;
    /**
     * How many segments should be taken.
     */
    segmentCount?: number;
    /**
     * select index
     */
    selectIndex?: number;
    /**
     * split by
     */
    splitDelimiter?: string;
    /**
     * no documentation available
     */
    suffix?: string;
    /**
     * take from end
     */
    takeFromEnd?: boolean;
    /**
     * Possible Values: `AFTER`, `BEFORE`, `BETWEEN`, `REMOVE_CREDIT_CARDS`, `REMOVE_IBANS`, `REMOVE_IPS`, `REMOVE_NUMBERS`, `REPLACE_BETWEEN`, `SPLIT_SELECT`, `TAKE_SEGMENTS`
     */
    transformationType: string;
}

export interface ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorValueOverride {
    /**
     * no documentation available
     */
    value: string;
}

export interface ServiceHttpFailureBrokenLinks {
    /**
     * If your application relies on other hosts at other domains, add the associated domain names here. Once configured, Dynatrace will consider 404s thrown by hosts at these domains to be service failures related to your application.
     */
    brokenLinkDomains?: string[];
    /**
     * Consider 404 HTTP response codes as failures
     */
    http404NotFoundFailures: boolean;
}

export interface ServiceHttpFailureHttpResponseCodes {
    /**
     * HTTP response codes which indicate client side errors
     */
    clientSideErrors: string;
    /**
     * Treat missing HTTP response code as client side error
     */
    failOnMissingResponseCodeClientSide: boolean;
    /**
     * Treat missing HTTP response code as server side errors
     */
    failOnMissingResponseCodeServerSide: boolean;
    /**
     * HTTP response codes which indicate an error on the server side
     */
    serverSideErrors: string;
}

export interface ServiceNamingCondition {
    /**
     * A conditions for the metric usage
     */
    conditions?: outputs.ServiceNamingConditionCondition[];
}

export interface ServiceNamingConditionCondition {
    /**
     * Comparison for `APPLICATION_TYPE` attributes
     *
     * @deprecated You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility.
     */
    applicationTypeComparisons?: outputs.ServiceNamingConditionConditionApplicationTypeComparison[];
    /**
     * Comparison for `APPLICATION_TYPE` attributes
     */
    applicationTypes?: outputs.ServiceNamingConditionConditionApplicationType[];
    /**
     * Comparison for `AZURE_COMPUTE_MODE` attributes
     */
    azureComputeModeComparisons?: outputs.ServiceNamingConditionConditionAzureComputeModeComparison[];
    /**
     * Comparison for `AZURE_COMPUTE_MODE` attributes
     *
     * @deprecated You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility.
     */
    azureComputeModes?: outputs.ServiceNamingConditionConditionAzureComputeMode[];
    /**
     * Comparison for `AZURE_SKU` attributes
     *
     * @deprecated You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility.
     */
    azureSkuComparisions?: outputs.ServiceNamingConditionConditionAzureSkuComparision[];
    /**
     * Comparison for `AZURE_SKU` attributes
     */
    azureSkus?: outputs.ServiceNamingConditionConditionAzureSkus[];
    /**
     * A comparison that's yet unknown to the provider. Operator and Value need to be encoded using the 'unknowns' property.
     *
     * @deprecated You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility.
     */
    baseComparisonBasics?: outputs.ServiceNamingConditionConditionBaseComparisonBasic[];
    /**
     * Fallback for not yet known type
     *
     * @deprecated 'base_condition_key' is deprecated. You should use 'key'
     */
    baseConditionKeys?: outputs.ServiceNamingConditionConditionBaseConditionKey[];
    /**
     * Comparison for `BITNESS` attributes
     *
     * @deprecated You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility.
     */
    bitnessComparisions?: outputs.ServiceNamingConditionConditionBitnessComparision[];
    /**
     * Comparison for `BITNESS` attributes
     */
    bitnesses?: outputs.ServiceNamingConditionConditionBitness[];
    /**
     * Comparison for `CLOUD_TYPE` attributes
     *
     * @deprecated You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility.
     */
    cloudTypeComparisons?: outputs.ServiceNamingConditionConditionCloudTypeComparison[];
    /**
     * Comparison for `CLOUD_TYPE` attributes
     */
    cloudTypes?: outputs.ServiceNamingConditionConditionCloudType[];
    /**
     * A comparison that's yet unknown to the provider. Operator and Value need to be encoded using the 'unknowns' property.
     */
    comparisons?: outputs.ServiceNamingConditionConditionComparison[];
    /**
     * Comparison for `CUSTOM_APPLICATION_TYPE` attributes
     *
     * @deprecated You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility.
     */
    customApplicationTypeComparisons?: outputs.ServiceNamingConditionConditionCustomApplicationTypeComparison[];
    /**
     * Comparison for `CUSTOM_APPLICATION_TYPE` attributes
     */
    customApplicationTypes?: outputs.ServiceNamingConditionConditionCustomApplicationType[];
    /**
     * Key for Custom Host Metadata
     *
     * @deprecated 'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata'
     */
    customHostMetadataConditionKeys?: outputs.ServiceNamingConditionConditionCustomHostMetadataConditionKey[];
    /**
     * Key for Custom Host Metadata
     */
    customHostMetadatas?: outputs.ServiceNamingConditionConditionCustomHostMetadata[];
    /**
     * Key for Custom Process Metadata
     *
     * @deprecated 'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata'
     */
    customProcessMetadataConditionKeys?: outputs.ServiceNamingConditionConditionCustomProcessMetadataConditionKey[];
    /**
     * Key for Custom Process Metadata
     */
    customProcessMetadatas?: outputs.ServiceNamingConditionConditionCustomProcessMetadata[];
    /**
     * Comparison for `DATABASE_TOPOLOGY` attributes
     */
    databaseTopologies?: outputs.ServiceNamingConditionConditionDatabaseTopology[];
    /**
     * Comparison for `DATABASE_TOPOLOGY` attributes
     *
     * @deprecated You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility.
     */
    databaseTopologyComparisons?: outputs.ServiceNamingConditionConditionDatabaseTopologyComparison[];
    /**
     * Comparison for `DCRUM_DECODER_TYPE` attributes
     *
     * @deprecated You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility.
     */
    dcrumDecoderComparisons?: outputs.ServiceNamingConditionConditionDcrumDecoderComparison[];
    /**
     * Comparison for `DCRUM_DECODER_TYPE` attributes
     */
    dcrumDecoders?: outputs.ServiceNamingConditionConditionDcrumDecoder[];
    /**
     * Comparison for `ENTITY_ID` attributes
     */
    entities?: outputs.ServiceNamingConditionConditionEntity[];
    /**
     * Comparison for `ENTITY_ID` attributes
     *
     * @deprecated You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility.
     */
    entityIdComparisons?: outputs.ServiceNamingConditionConditionEntityIdComparison[];
    /**
     * Comparison for `SIMPLE_HOST_TECH` attributes
     */
    hostTeches?: outputs.ServiceNamingConditionConditionHostTech[];
    /**
     * `hypervisorTypeComparision` is deprecated. Use `hypervisor` instead
     *
     * @deprecated `hypervisorTypeComparision` is deprecated. Use `hypervisor` instead
     */
    hypervisorTypeComparisions?: outputs.ServiceNamingConditionConditionHypervisorTypeComparision[];
    /**
     * Comparison for `HYPERVISOR_TYPE` attributes
     */
    hypervisors?: outputs.ServiceNamingConditionConditionHypervisor[];
    /**
     * Comparison for `INDEXED_NAME` attributes
     *
     * @deprecated You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedNameComparisons?: outputs.ServiceNamingConditionConditionIndexedNameComparison[];
    /**
     * Comparison for `INDEXED_NAME` attributes
     */
    indexedNames?: outputs.ServiceNamingConditionConditionIndexedName[];
    /**
     * Comparison for `INDEXED_STRING` attributes
     *
     * @deprecated You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedStringComparisons?: outputs.ServiceNamingConditionConditionIndexedStringComparison[];
    /**
     * Comparison for `INDEXED_STRING` attributes
     */
    indexedStrings?: outputs.ServiceNamingConditionConditionIndexedString[];
    /**
     * Comparison for `INDEXED_TAG` attributes
     *
     * @deprecated You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedTagComparisons?: outputs.ServiceNamingConditionConditionIndexedTagComparison[];
    /**
     * Comparison for `INDEXED_TAG` attributes
     */
    indexedTags?: outputs.ServiceNamingConditionConditionIndexedTag[];
    /**
     * Comparison for `INTEGER` attributes
     *
     * @deprecated You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility.
     */
    integerComparisons?: outputs.ServiceNamingConditionConditionIntegerComparison[];
    /**
     * Comparison for `INTEGER` attributes
     */
    integers?: outputs.ServiceNamingConditionConditionInteger[];
    /**
     * Comparison for `IP_ADDRESS` attributes
     *
     * @deprecated You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility.
     */
    ipaddressComparisons?: outputs.ServiceNamingConditionConditionIpaddressComparison[];
    /**
     * Comparison for `IP_ADDRESS` attributes
     */
    ipaddresses?: outputs.ServiceNamingConditionConditionIpaddress[];
    /**
     * Fallback for not yet known type
     */
    keys?: outputs.ServiceNamingConditionConditionKey[];
    /**
     * Comparison for `MOBILE_PLATFORM` attributes
     *
     * @deprecated You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility.
     */
    mobilePlatformComparisons?: outputs.ServiceNamingConditionConditionMobilePlatformComparison[];
    /**
     * Comparison for `MOBILE_PLATFORM` attributes
     */
    mobilePlatforms?: outputs.ServiceNamingConditionConditionMobilePlatform[];
    /**
     * Comparison for `OS_ARCHITECTURE` attributes
     */
    osArches?: outputs.ServiceNamingConditionConditionOsArch[];
    /**
     * Comparison for `OS_TYPE` attributes
     */
    osTypes?: outputs.ServiceNamingConditionConditionOsType[];
    /**
     * Comparison for `OS_ARCHITECTURE` attributes
     *
     * @deprecated You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility.
     */
    osarchitectureComparisons?: outputs.ServiceNamingConditionConditionOsarchitectureComparison[];
    /**
     * Comparison for `OS_TYPE` attributes
     *
     * @deprecated You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility.
     */
    ostypeComparisons?: outputs.ServiceNamingConditionConditionOstypeComparison[];
    /**
     * Comparison for `PAAS_TYPE` attributes
     *
     * @deprecated You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility.
     */
    paasTypeComparisons?: outputs.ServiceNamingConditionConditionPaasTypeComparison[];
    /**
     * Comparison for `PAAS_TYPE` attributes
     */
    paasTypes?: outputs.ServiceNamingConditionConditionPaasType[];
    /**
     * The key for dynamic attributes of the `PROCESS_PREDEFINED_METADATA_KEY` type
     *
     * @deprecated 'process_metadata_condition_key' is deprecated. You should use 'process_metadata'
     */
    processMetadataConditionKeys?: outputs.ServiceNamingConditionConditionProcessMetadataConditionKey[];
    /**
     * The key for dynamic attributes of the `PROCESS_PREDEFINED_METADATA_KEY` type
     */
    processMetadatas?: outputs.ServiceNamingConditionConditionProcessMetadata[];
    /**
     * Comparison for `SERVICE_TOPOLOGY` attributes
     */
    serviceTopologies?: outputs.ServiceNamingConditionConditionServiceTopology[];
    /**
     * Comparison for `SERVICE_TOPOLOGY` attributes
     *
     * @deprecated You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility.
     */
    serviceTopologyComparisons?: outputs.ServiceNamingConditionConditionServiceTopologyComparison[];
    /**
     * Comparison for `SERVICE_TYPE` attributes
     *
     * @deprecated You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility.
     */
    serviceTypeComparisons?: outputs.ServiceNamingConditionConditionServiceTypeComparison[];
    /**
     * Comparison for `SERVICE_TYPE` attributes
     */
    serviceTypes?: outputs.ServiceNamingConditionConditionServiceType[];
    /**
     * Comparison for `SIMPLE_HOST_TECH` attributes
     *
     * @deprecated You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility.
     */
    simpleHostTechComparisons?: outputs.ServiceNamingConditionConditionSimpleHostTechComparison[];
    /**
     * Comparison for `SIMPLE_TECH` attributes
     *
     * @deprecated You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility.
     */
    simpleTechComparisons?: outputs.ServiceNamingConditionConditionSimpleTechComparison[];
    /**
     * Comparison for `STRING` attributes
     *
     * @deprecated You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility.
     */
    stringComparisons?: outputs.ServiceNamingConditionConditionStringComparison[];
    /**
     * The key for dynamic attributes of the `STRING` type
     *
     * @deprecated 'string_condition_key' is deprecated. You should use 'string_key'
     */
    stringConditionKeys?: outputs.ServiceNamingConditionConditionStringConditionKey[];
    /**
     * The key for dynamic attributes of the `STRING` type
     */
    stringKeys?: outputs.ServiceNamingConditionConditionStringKey[];
    /**
     * Comparison for `STRING` attributes
     */
    strings?: outputs.ServiceNamingConditionConditionString[];
    /**
     * Comparison for `SYNTHETIC_ENGINE_TYPE` attributes
     *
     * @deprecated You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility.
     */
    syntheticEngineTypeComparisons?: outputs.ServiceNamingConditionConditionSyntheticEngineTypeComparison[];
    /**
     * Comparison for `SYNTHETIC_ENGINE_TYPE` attributes
     */
    syntheticEngines?: outputs.ServiceNamingConditionConditionSyntheticEngine[];
    /**
     * Comparison for `TAG` attributes
     *
     * @deprecated You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility.
     */
    tagComparisons?: outputs.ServiceNamingConditionConditionTagComparison[];
    /**
     * Comparison for `TAG` attributes
     */
    tags?: outputs.ServiceNamingConditionConditionTag[];
    /**
     * Comparison for `SIMPLE_TECH` attributes
     */
    teches?: outputs.ServiceNamingConditionConditionTech[];
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
}

export interface ServiceNamingConditionConditionApplicationType {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface ServiceNamingConditionConditionApplicationTypeComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be APPLICATION_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface ServiceNamingConditionConditionAzureComputeMode {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are DEDICATED or SHARED.
     */
    value?: string;
}

export interface ServiceNamingConditionConditionAzureComputeModeComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are DEDICATED or SHARED.
     */
    value?: string;
}

export interface ServiceNamingConditionConditionAzureSkuComparision {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be AZURE_SKU
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are BASIC, DYNAMIC, FREE, PREMIUM, SHARED and STANDARD.
     */
    value?: string;
}

export interface ServiceNamingConditionConditionAzureSkus {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are BASIC, DYNAMIC, FREE, PREMIUM, SHARED and STANDARD.
     */
    value?: string;
}

export interface ServiceNamingConditionConditionBaseComparisonBasic {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * The type of comparison
     */
    type: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ServiceNamingConditionConditionBaseConditionKey {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * Defines the actual set of fields depending on the value
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ServiceNamingConditionConditionBitness {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are 32 and 64.
     */
    value?: string;
}

export interface ServiceNamingConditionConditionBitnessComparision {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be BITNESS
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are 32 and 64.
     */
    value?: string;
}

export interface ServiceNamingConditionConditionCloudType {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AZURE, EC2, GOOGLE_CLOUD_PLATFORM, OPENSTACK, ORACLE and UNRECOGNIZED.
     */
    value?: string;
}

export interface ServiceNamingConditionConditionCloudTypeComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be CLOUD_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AZURE, EC2, GOOGLE_CLOUD_PLATFORM, OPENSTACK, ORACLE and UNRECOGNIZED.
     */
    value?: string;
}

export interface ServiceNamingConditionConditionComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * The type of comparison
     */
    type: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ServiceNamingConditionConditionCustomApplicationType {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AMAZON_ECHO, DESKTOP, EMBEDDED, IOT, MICROSOFT_HOLOLENS and UFO.
     */
    value?: string;
}

export interface ServiceNamingConditionConditionCustomApplicationTypeComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be CUSTOM_APPLICATION_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AMAZON_ECHO, DESKTOP, EMBEDDED, IOT, MICROSOFT_HOLOLENS and UFO.
     */
    value?: string;
}

export interface ServiceNamingConditionConditionCustomHostMetadata {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
     */
    dynamicKey: outputs.ServiceNamingConditionConditionCustomHostMetadataDynamicKey;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ServiceNamingConditionConditionCustomHostMetadataConditionKey {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
     */
    dynamicKey: outputs.ServiceNamingConditionConditionCustomHostMetadataConditionKeyDynamicKey;
    /**
     * if specified, needs to be HOST_CUSTOM_METADATA_KEY
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ServiceNamingConditionConditionCustomHostMetadataConditionKeyDynamicKey {
    /**
     * The actual key of the custom metadata
     */
    key: string;
    /**
     * The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
     */
    source: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ServiceNamingConditionConditionCustomHostMetadataDynamicKey {
    /**
     * The actual key of the custom metadata
     */
    key: string;
    /**
     * The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
     */
    source: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ServiceNamingConditionConditionCustomProcessMetadata {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
     */
    dynamicKey: outputs.ServiceNamingConditionConditionCustomProcessMetadataDynamicKey;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ServiceNamingConditionConditionCustomProcessMetadataConditionKey {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
     */
    dynamicKey: outputs.ServiceNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKey;
    /**
     * if specified, needs to be PROCESS_CUSTOM_METADATA_KEY
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ServiceNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKey {
    /**
     * The actual key of the custom metadata
     */
    key: string;
    /**
     * The source of the custom metadata. Possible values are CLOUD_FOUNDRY, ENVIRONMENT, GOOGLE_CLOUD, KUBERNETES and PLUGIN
     */
    source: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ServiceNamingConditionConditionCustomProcessMetadataDynamicKey {
    /**
     * The actual key of the custom metadata
     */
    key: string;
    /**
     * The source of the custom metadata. Possible values are CLOUD_FOUNDRY, ENVIRONMENT, GOOGLE_CLOUD, KUBERNETES and PLUGIN
     */
    source: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ServiceNamingConditionConditionDatabaseTopology {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are CLUSTER, EMBEDDED, FAILOVER, IPC, LOAD_BALANCING, SINGLE_SERVER and UNSPECIFIED.
     */
    value?: string;
}

export interface ServiceNamingConditionConditionDatabaseTopologyComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be DATABASE_TOPOLOGY
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are CLUSTER, EMBEDDED, FAILOVER, IPC, LOAD_BALANCING, SINGLE_SERVER and UNSPECIFIED.
     */
    value?: string;
}

export interface ServiceNamingConditionConditionDcrumDecoder {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are ALL_OTHER, CITRIX_APPFLOW, CITRIX_ICA, CITRIX_ICA_OVER_SSL, DB2_DRDA, HTTP, HTTPS, HTTP_EXPRESS, INFORMIX, MYSQL, ORACLE, SAP_GUI, SAP_GUI_OVER_HTTP, SAP_GUI_OVER_HTTPS, SAP_HANA_DB, SAP_RFC, SSL and TDS.
     */
    value?: string;
}

export interface ServiceNamingConditionConditionDcrumDecoderComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be DCRUM_DECODER_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are ALL_OTHER, CITRIX_APPFLOW, CITRIX_ICA, CITRIX_ICA_OVER_SSL, DB2_DRDA, HTTP, HTTPS, HTTP_EXPRESS, INFORMIX, MYSQL, ORACLE, SAP_GUI, SAP_GUI_OVER_HTTP, SAP_GUI_OVER_HTTPS, SAP_HANA_DB, SAP_RFC, SSL and TDS.
     */
    value?: string;
}

export interface ServiceNamingConditionConditionEntity {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Currently only EQUALS is supported. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface ServiceNamingConditionConditionEntityIdComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Currently only EQUALS is supported. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be ENTITY_ID
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface ServiceNamingConditionConditionHostTech {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: outputs.ServiceNamingConditionConditionHostTechValue;
}

export interface ServiceNamingConditionConditionHostTechValue {
    /**
     * Predefined technology, if technology is not predefined, then the verbatim type must be set. Possible values are APPARMOR, BOSH, BOSHBPM, CLOUDFOUNDRY, CONTAINERD, CRIO, DIEGO_CELL, DOCKER, GARDEN, GRSECURITY, KUBERNETES, OPENSHIFT, OPENSTACK_COMPUTE, OPENSTACK_CONTROLLER and SELINUX
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * Non-predefined technology, use for custom technologies
     */
    verbatimType?: string;
}

export interface ServiceNamingConditionConditionHypervisor {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AHV, HYPER_V, KVM, LPAR, QEMU, VIRTUAL_BOX, VMWARE, WPAR and XEN.
     */
    value?: string;
}

export interface ServiceNamingConditionConditionHypervisorTypeComparision {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be HYPERVISOR_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AHV, HYPER_V, KVM, LPAR, QEMU, VIRTUAL_BOX, VMWARE, WPAR and XEN.
     */
    value?: string;
}

export interface ServiceNamingConditionConditionIndexedName {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS, CONTAINS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface ServiceNamingConditionConditionIndexedNameComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS, CONTAINS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be INDEXED_NAME
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface ServiceNamingConditionConditionIndexedString {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface ServiceNamingConditionConditionIndexedStringComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be INDEXED_STRING
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface ServiceNamingConditionConditionIndexedTag {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * Tag of a Dynatrace entity
     */
    value?: outputs.ServiceNamingConditionConditionIndexedTagValue;
}

export interface ServiceNamingConditionConditionIndexedTagComparison {
    /**
     * Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
     */
    negate?: boolean;
    /**
     * Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be INDEXED_TAG
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * Tag of a Dynatrace entity
     */
    value?: outputs.ServiceNamingConditionConditionIndexedTagComparisonValue;
}

export interface ServiceNamingConditionConditionIndexedTagComparisonValue {
    /**
     * The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
     */
    context: string;
    /**
     * The key of the tag. Custom tags have the tag value here
     */
    key: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value of the tag. Not applicable to custom tags
     */
    value?: string;
}

export interface ServiceNamingConditionConditionIndexedTagValue {
    /**
     * The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
     */
    context: string;
    /**
     * The key of the tag. Custom tags have the tag value here
     */
    key: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value of the tag. Not applicable to custom tags
     */
    value?: string;
}

export interface ServiceNamingConditionConditionInteger {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS, EXISTS, GREATER_THAN, GREATER_THAN_OR_EQUAL, LOWER_THAN and LOWER_THAN_OR_EQUAL. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: number;
}

export interface ServiceNamingConditionConditionIntegerComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS, EXISTS, GREATER_THAN, GREATER_THAN_OR_EQUAL, LOWER_THAN and LOWER_THAN_OR_EQUAL. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be INTEGER
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: number;
}

export interface ServiceNamingConditionConditionIpaddress {
    /**
     * The comparison is case-sensitive (`true`) or insensitive (`false`)
     */
    caseSensitive?: boolean;
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS, IS_IP_IN_RANGE and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface ServiceNamingConditionConditionIpaddressComparison {
    /**
     * The comparison is case-sensitive (`true`) or insensitive (`false`)
     */
    caseSensitive?: boolean;
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS, IS_IP_IN_RANGE and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be IP_ADDRESS
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface ServiceNamingConditionConditionKey {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * Defines the actual set of fields depending on the value
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ServiceNamingConditionConditionMobilePlatform {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are ANDROID, IOS, LINUX, MAC_OS, OTHER, TVOS and WINDOWS.
     */
    value?: string;
}

export interface ServiceNamingConditionConditionMobilePlatformComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be MOBILE_PLATFORM
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are ANDROID, IOS, LINUX, MAC_OS, OTHER, TVOS and WINDOWS.
     */
    value?: string;
}

export interface ServiceNamingConditionConditionOsArch {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are ARM, IA64, PARISC, PPC, PPCLE, S390, SPARC, X86 and ZOS.
     */
    value?: string;
}

export interface ServiceNamingConditionConditionOsType {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AIX, DARWIN, HPUX, LINUX, SOLARIS, WINDOWS and ZOS.
     */
    value?: string;
}

export interface ServiceNamingConditionConditionOsarchitectureComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be OS_ARCHITECTURE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are ARM, IA64, PARISC, PPC, PPCLE, S390, SPARC, X86 and ZOS.
     */
    value?: string;
}

export interface ServiceNamingConditionConditionOstypeComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be OS_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AIX, DARWIN, HPUX, LINUX, SOLARIS, WINDOWS and ZOS.
     */
    value?: string;
}

export interface ServiceNamingConditionConditionPaasType {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AWS_ECS_EC2, AWS_ECS_FARGATE, AWS_LAMBDA, AZURE_FUNCTIONS, AZURE_WEBSITES, CLOUD_FOUNDRY, GOOGLE_APP_ENGINE, HEROKU, KUBERNETES and OPENSHIFT.
     */
    value?: string;
}

export interface ServiceNamingConditionConditionPaasTypeComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be PAAS_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are AWS_ECS_EC2, AWS_ECS_FARGATE, AWS_LAMBDA, AZURE_FUNCTIONS, AZURE_WEBSITES, CLOUD_FOUNDRY, GOOGLE_APP_ENGINE, HEROKU, KUBERNETES and OPENSHIFT.
     */
    value?: string;
}

export interface ServiceNamingConditionConditionProcessMetadata {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are AMAZON_ECR_IMAGE_ACCOUNT_ID,AMAZON_ECR_IMAGE_REGION, AMAZON_LAMBDA_FUNCTION_NAME, AMAZON_REGION, APACHE_CONFIG_PATH, APACHE_SPARK_MASTER_IP_ADDRESS, ASP_DOT_NET_CORE_APPLICATION_PATH, AWS_ECS_CLUSTER, AWS_ECS_CONTAINERNAME, AWS_ECS_FAMILY, AWS_ECS_REVISION, CASSANDRA_CLUSTER_NAME, CATALINA_BASE, CATALINA_HOME, CLOUD_FOUNDRY_APP_ID, CLOUD_FOUNDRY_APP_NAME, CLOUD_FOUNDRY_INSTANCE_INDEX, CLOUD_FOUNDRY_SPACE_ID, CLOUD_FOUNDRY_SPACE_NAME, COLDFUSION_JVM_CONFIG_FILE, COLDFUSION_SERVICE_NAME, COMMAND_LINE_ARGS, DOTNET_COMMAND, DOTNET_COMMAND_PATH, DYNATRACE_CLUSTER_ID, DYNATRACE_NODE_ID, ELASTICSEARCH_CLUSTER_NAME, ELASTICSEARCH_NODE_NAME, EQUINOX_CONFIG_PATH, EXE_NAME, EXE_PATH, GLASS_FISH_DOMAIN_NAME, GLASS_FISH_INSTANCE_NAME, GOOGLE_APP_ENGINE_INSTANCE, GOOGLE_APP_ENGINE_SERVICE, GOOGLE_CLOUD_PROJECT, HYBRIS_BIN_DIRECTORY, HYBRIS_CONFIG_DIRECTORY, HYBRIS_DATA_DIRECTORY, IBM_CICS_REGION, IBM_CTG_NAME, IBM_IMS_CONNECT_REGION, IBM_IMS_CONTROL_REGION, IBM_IMS_MESSAGE_PROCESSING_REGION, IBM_IMS_SOAP_GW_NAME, IBM_INTEGRATION_NODE_NAME, IBM_INTEGRATION_SERVER_NAME, IIS_APP_POOL, IIS_ROLE_NAME, JAVA_JAR_FILE, JAVA_JAR_PATH, JAVA_MAIN_CLASS, JAVA_MAIN_MODULE, JBOSS_HOME, JBOSS_MODE, JBOSS_SERVER_NAME, KUBERNETES_BASE_POD_NAME, KUBERNETES_CONTAINER_NAME, KUBERNETES_FULL_POD_NAME, KUBERNETES_NAMESPACE, KUBERNETES_POD_UID, MSSQL_INSTANCE_NAME, NODE_JS_APP_BASE_DIRECTORY, NODE_JS_APP_NAME, NODE_JS_SCRIPT_NAME, ORACLE_SID, PG_ID_CALC_INPUT_KEY_LINKAGE, PHP_SCRIPT_PATH, PHP_WORKING_DIRECTORY, RUBY_APP_ROOT_PATH, RUBY_SCRIPT_PATH, RULE_RESULT, SOFTWAREAG_INSTALL_ROOT, SOFTWAREAG_PRODUCTPROPNAME, SPRINGBOOT_APP_NAME, SPRINGBOOT_PROFILE_NAME, SPRINGBOOT_STARTUP_CLASS, TIBCO_BUSINESSWORKS_CE_APP_NAME, TIBCO_BUSINESSWORKS_CE_VERSION, TIBCO_BUSINESS_WORKS_APP_NODE_NAME, TIBCO_BUSINESS_WORKS_APP_SPACE_NAME, TIBCO_BUSINESS_WORKS_DOMAIN_NAME, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH, TIBCO_BUSINESS_WORKS_HOME, VARNISH_INSTANCE_NAME, WEB_LOGIC_CLUSTER_NAME, WEB_LOGIC_DOMAIN_NAME, WEB_LOGIC_HOME, WEB_LOGIC_NAME, WEB_SPHERE_CELL_NAME, WEB_SPHERE_CLUSTER_NAME, WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME
     */
    dynamicKey: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ServiceNamingConditionConditionProcessMetadataConditionKey {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are AMAZON_ECR_IMAGE_ACCOUNT_ID,AMAZON_ECR_IMAGE_REGION, AMAZON_LAMBDA_FUNCTION_NAME, AMAZON_REGION, APACHE_CONFIG_PATH, APACHE_SPARK_MASTER_IP_ADDRESS, ASP_DOT_NET_CORE_APPLICATION_PATH, AWS_ECS_CLUSTER, AWS_ECS_CONTAINERNAME, AWS_ECS_FAMILY, AWS_ECS_REVISION, CASSANDRA_CLUSTER_NAME, CATALINA_BASE, CATALINA_HOME, CLOUD_FOUNDRY_APP_ID, CLOUD_FOUNDRY_APP_NAME, CLOUD_FOUNDRY_INSTANCE_INDEX, CLOUD_FOUNDRY_SPACE_ID, CLOUD_FOUNDRY_SPACE_NAME, COLDFUSION_JVM_CONFIG_FILE, COLDFUSION_SERVICE_NAME, COMMAND_LINE_ARGS, DOTNET_COMMAND, DOTNET_COMMAND_PATH, DYNATRACE_CLUSTER_ID, DYNATRACE_NODE_ID, ELASTICSEARCH_CLUSTER_NAME, ELASTICSEARCH_NODE_NAME, EQUINOX_CONFIG_PATH, EXE_NAME, EXE_PATH, GLASS_FISH_DOMAIN_NAME, GLASS_FISH_INSTANCE_NAME, GOOGLE_APP_ENGINE_INSTANCE, GOOGLE_APP_ENGINE_SERVICE, GOOGLE_CLOUD_PROJECT, HYBRIS_BIN_DIRECTORY, HYBRIS_CONFIG_DIRECTORY, HYBRIS_DATA_DIRECTORY, IBM_CICS_REGION, IBM_CTG_NAME, IBM_IMS_CONNECT_REGION, IBM_IMS_CONTROL_REGION, IBM_IMS_MESSAGE_PROCESSING_REGION, IBM_IMS_SOAP_GW_NAME, IBM_INTEGRATION_NODE_NAME, IBM_INTEGRATION_SERVER_NAME, IIS_APP_POOL, IIS_ROLE_NAME, JAVA_JAR_FILE, JAVA_JAR_PATH, JAVA_MAIN_CLASS, JAVA_MAIN_MODULE, JBOSS_HOME, JBOSS_MODE, JBOSS_SERVER_NAME, KUBERNETES_BASE_POD_NAME, KUBERNETES_CONTAINER_NAME, KUBERNETES_FULL_POD_NAME, KUBERNETES_NAMESPACE, KUBERNETES_POD_UID, MSSQL_INSTANCE_NAME, NODE_JS_APP_BASE_DIRECTORY, NODE_JS_APP_NAME, NODE_JS_SCRIPT_NAME, ORACLE_SID, PG_ID_CALC_INPUT_KEY_LINKAGE, PHP_SCRIPT_PATH, PHP_WORKING_DIRECTORY, RUBY_APP_ROOT_PATH, RUBY_SCRIPT_PATH, RULE_RESULT, SOFTWAREAG_INSTALL_ROOT, SOFTWAREAG_PRODUCTPROPNAME, SPRINGBOOT_APP_NAME, SPRINGBOOT_PROFILE_NAME, SPRINGBOOT_STARTUP_CLASS, TIBCO_BUSINESSWORKS_CE_APP_NAME, TIBCO_BUSINESSWORKS_CE_VERSION, TIBCO_BUSINESS_WORKS_APP_NODE_NAME, TIBCO_BUSINESS_WORKS_APP_SPACE_NAME, TIBCO_BUSINESS_WORKS_DOMAIN_NAME, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH, TIBCO_BUSINESS_WORKS_HOME, VARNISH_INSTANCE_NAME, WEB_LOGIC_CLUSTER_NAME, WEB_LOGIC_DOMAIN_NAME, WEB_LOGIC_HOME, WEB_LOGIC_NAME, WEB_SPHERE_CELL_NAME, WEB_SPHERE_CLUSTER_NAME, WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME
     */
    dynamicKey: string;
    /**
     * if specified, needs to be PROCESS_PREDEFINED_METADATA_KEY
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ServiceNamingConditionConditionServiceTopology {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are EXTERNAL_SERVICE, FULLY_MONITORED and OPAQUE_SERVICE.
     */
    value?: string;
}

export interface ServiceNamingConditionConditionServiceTopologyComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be SERVICE_TOPOLOGY
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are EXTERNAL_SERVICE, FULLY_MONITORED and OPAQUE_SERVICE.
     */
    value?: string;
}

export interface ServiceNamingConditionConditionServiceType {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are BACKGROUND_ACTIVITY, CICS_SERVICE, CUSTOM_SERVICE, DATABASE_SERVICE, ENTERPRISE_SERVICE_BUS_SERVICE, EXTERNAL, IBM_INTEGRATION_BUS_SERVICE, IMS_SERVICE, MESSAGING_SERVICE, QUEUE_LISTENER_SERVICE, RMI_SERVICE, RPC_SERVICE, WEB_REQUEST_SERVICE and WEB_SERVICE.
     */
    value?: string;
}

export interface ServiceNamingConditionConditionServiceTypeComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be SERVICE_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are BACKGROUND_ACTIVITY, CICS_SERVICE, CUSTOM_SERVICE, DATABASE_SERVICE, ENTERPRISE_SERVICE_BUS_SERVICE, EXTERNAL, IBM_INTEGRATION_BUS_SERVICE, IMS_SERVICE, MESSAGING_SERVICE, QUEUE_LISTENER_SERVICE, RMI_SERVICE, RPC_SERVICE, WEB_REQUEST_SERVICE and WEB_SERVICE.
     */
    value?: string;
}

export interface ServiceNamingConditionConditionSimpleHostTechComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be SIMPLE_HOST_TECH
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: outputs.ServiceNamingConditionConditionSimpleHostTechComparisonValue;
}

export interface ServiceNamingConditionConditionSimpleHostTechComparisonValue {
    /**
     * Predefined technology, if technology is not predefined, then the verbatim type must be set. Possible values are APPARMOR, BOSH, BOSHBPM, CLOUDFOUNDRY, CONTAINERD, CRIO, DIEGO_CELL, DOCKER, GARDEN, GRSECURITY, KUBERNETES, OPENSHIFT, OPENSTACK_COMPUTE, OPENSTACK_CONTROLLER and SELINUX
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * Non-predefined technology, use for custom technologies
     */
    verbatimType?: string;
}

export interface ServiceNamingConditionConditionSimpleTechComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be SIMPLE_TECH
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: outputs.ServiceNamingConditionConditionSimpleTechComparisonValue;
}

export interface ServiceNamingConditionConditionSimpleTechComparisonValue {
    /**
     * Predefined technology, if technology is not predefined, then the verbatim type must be set.
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * Non-predefined technology, use for custom technologies
     */
    verbatimType?: string;
}

export interface ServiceNamingConditionConditionString {
    /**
     * The comparison is case-sensitive (`true`) or insensitive (`false`)
     */
    caseSensitive?: boolean;
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface ServiceNamingConditionConditionStringComparison {
    /**
     * The comparison is case-sensitive (`true`) or insensitive (`false`)
     */
    caseSensitive?: boolean;
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be STRING
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface ServiceNamingConditionConditionStringConditionKey {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are
     *    - `AMAZON_ECR_IMAGE_ACCOUNT_ID`
     *    - `AMAZON_ECR_IMAGE_REGION`
     *    - `AMAZON_LAMBDA_FUNCTION_NAME`
     *    - `AMAZON_REGION`
     *    - `APACHE_CONFIG_PATH`
     *    - `APACHE_SPARK_MASTER_IP_ADDRESS`
     *    - `ASP_DOT_NET_CORE_APPLICATION_PATH`
     *    - `AWS_ECS_CLUSTER`
     *    - `AWS_ECS_CONTAINERNAME`
     *    - `AWS_ECS_FAMILY`
     *    - `AWS_ECS_REVISION`
     *    - `CASSANDRA_CLUSTER_NAME`
     *    - `CATALINA_BASE`
     *    - `CATALINA_HOME`
     *    - `CLOUD_FOUNDRY_APP_ID`
     *    - `CLOUD_FOUNDRY_APP_NAME`
     *    - `CLOUD_FOUNDRY_INSTANCE_INDEX`
     *    - `CLOUD_FOUNDRY_SPACE_ID`
     *    - `CLOUD_FOUNDRY_SPACE_NAME`
     *    - `COLDFUSION_JVM_CONFIG_FILE`
     *    - `COLDFUSION_SERVICE_NAME`
     *    - `COMMAND_LINE_ARGS`
     *    - `DOTNET_COMMAND`
     *    - `DOTNET_COMMAND_PATH`
     *    - `DYNATRACE_CLUSTER_ID`
     *    - `DYNATRACE_NODE_ID`
     *    - `ELASTICSEARCH_CLUSTER_NAME`
     *    - `ELASTICSEARCH_NODE_NAME`
     *    - `EQUINOX_CONFIG_PATH`
     *    - `EXE_NAME`
     *    - `EXE_PATH`
     *    - `GLASS_FISH_DOMAIN_NAME`
     *    - `GLASS_FISH_INSTANCE_NAME`
     *    - `GOOGLE_APP_ENGINE_INSTANCE`
     *    - `GOOGLE_APP_ENGINE_SERVICE`
     *    - `GOOGLE_CLOUD_PROJECT`
     *    - `HYBRIS_BIN_DIRECTORY`
     *    - `HYBRIS_CONFIG_DIRECTORY`
     *    - `HYBRIS_DATA_DIRECTORY`
     *    - `IBM_CICS_REGION`
     *    - `IBM_CTG_NAME`
     *    - `IBM_IMS_CONNECT_REGION`
     *    - `IBM_IMS_CONTROL_REGION`
     *    - `IBM_IMS_MESSAGE_PROCESSING_REGION`
     *    - `IBM_IMS_SOAP_GW_NAME`
     *    - `IBM_INTEGRATION_NODE_NAME`
     *    - `IBM_INTEGRATION_SERVER_NAME`
     *    - `IIS_APP_POOL`
     *    - `IIS_ROLE_NAME`
     *    - `JAVA_JAR_FILE`
     *    - `JAVA_JAR_PATH`
     *    - `JAVA_MAIN_CLASS`
     *    - `JAVA_MAIN_MODULE`
     *    - `JBOSS_HOME`
     *    - `JBOSS_MODE`
     *    - `JBOSS_SERVER_NAME`
     *    - `KUBERNETES_BASE_POD_NAME`
     *    - `KUBERNETES_CONTAINER_NAME`
     *    - `KUBERNETES_FULL_POD_NAME`
     *    - `KUBERNETES_NAMESPACE`
     *    - `KUBERNETES_POD_UID`
     *    - `MSSQL_INSTANCE_NAME`
     *    - `NODE_JS_APP_BASE_DIRECTORY`
     *    - `NODE_JS_APP_NAME`
     *    - `NODE_JS_SCRIPT_NAME`
     *    - `ORACLE_SID`
     *    - `PG_ID_CALC_INPUT_KEY_LINKAGE`
     *    - `PHP_SCRIPT_PATH`
     *    - `PHP_WORKING_DIRECTORY`
     *    - `RUBY_APP_ROOT_PATH`
     *    - `RUBY_SCRIPT_PATH`
     *    - `RULE_RESULT`
     *    - `SOFTWAREAG_INSTALL_ROOT`
     *    - `SOFTWAREAG_PRODUCTPROPNAME`
     *    - `SPRINGBOOT_APP_NAME`
     *    - `SPRINGBOOT_PROFILE_NAME`
     *    - `SPRINGBOOT_STARTUP_CLASS`
     *    - `TIBCO_BUSINESSWORKS_CE_APP_NAME`
     *    - `TIBCO_BUSINESSWORKS_CE_VERSION`
     *    - `TIBCO_BUSINESS_WORKS_APP_NODE_NAME`
     *    - `TIBCO_BUSINESS_WORKS_APP_SPACE_NAME`
     *    - `TIBCO_BUSINESS_WORKS_DOMAIN_NAME`
     *    - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE`
     *    - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH`
     *    - `TIBCO_BUSINESS_WORKS_HOME`
     *    - `VARNISH_INSTANCE_NAME`
     *    - `WEB_LOGIC_CLUSTER_NAME`
     *    - `WEB_LOGIC_DOMAIN_NAME`
     *    - `WEB_LOGIC_HOME`
     *    - `WEB_LOGIC_NAME`
     *    - `WEB_SPHERE_CELL_NAME`
     *    - `WEB_SPHERE_CLUSTER_NAME`
     *    - `WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME`
     */
    dynamicKey: string;
    /**
     * if specified, needs to be `STRING`
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ServiceNamingConditionConditionStringKey {
    /**
     * The attribute to be used for comparision
     */
    attribute: string;
    /**
     * The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are
     *    - `AMAZON_ECR_IMAGE_ACCOUNT_ID`
     *    - `AMAZON_ECR_IMAGE_REGION`
     *    - `AMAZON_LAMBDA_FUNCTION_NAME`
     *    - `AMAZON_REGION`
     *    - `APACHE_CONFIG_PATH`
     *    - `APACHE_SPARK_MASTER_IP_ADDRESS`
     *    - `ASP_DOT_NET_CORE_APPLICATION_PATH`
     *    - `AWS_ECS_CLUSTER`
     *    - `AWS_ECS_CONTAINERNAME`
     *    - `AWS_ECS_FAMILY`
     *    - `AWS_ECS_REVISION`
     *    - `CASSANDRA_CLUSTER_NAME`
     *    - `CATALINA_BASE`
     *    - `CATALINA_HOME`
     *    - `CLOUD_FOUNDRY_APP_ID`
     *    - `CLOUD_FOUNDRY_APP_NAME`
     *    - `CLOUD_FOUNDRY_INSTANCE_INDEX`
     *    - `CLOUD_FOUNDRY_SPACE_ID`
     *    - `CLOUD_FOUNDRY_SPACE_NAME`
     *    - `COLDFUSION_JVM_CONFIG_FILE`
     *    - `COLDFUSION_SERVICE_NAME`
     *    - `COMMAND_LINE_ARGS`
     *    - `DOTNET_COMMAND`
     *    - `DOTNET_COMMAND_PATH`
     *    - `DYNATRACE_CLUSTER_ID`
     *    - `DYNATRACE_NODE_ID`
     *    - `ELASTICSEARCH_CLUSTER_NAME`
     *    - `ELASTICSEARCH_NODE_NAME`
     *    - `EQUINOX_CONFIG_PATH`
     *    - `EXE_NAME`
     *    - `EXE_PATH`
     *    - `GLASS_FISH_DOMAIN_NAME`
     *    - `GLASS_FISH_INSTANCE_NAME`
     *    - `GOOGLE_APP_ENGINE_INSTANCE`
     *    - `GOOGLE_APP_ENGINE_SERVICE`
     *    - `GOOGLE_CLOUD_PROJECT`
     *    - `HYBRIS_BIN_DIRECTORY`
     *    - `HYBRIS_CONFIG_DIRECTORY`
     *    - `HYBRIS_DATA_DIRECTORY`
     *    - `IBM_CICS_REGION`
     *    - `IBM_CTG_NAME`
     *    - `IBM_IMS_CONNECT_REGION`
     *    - `IBM_IMS_CONTROL_REGION`
     *    - `IBM_IMS_MESSAGE_PROCESSING_REGION`
     *    - `IBM_IMS_SOAP_GW_NAME`
     *    - `IBM_INTEGRATION_NODE_NAME`
     *    - `IBM_INTEGRATION_SERVER_NAME`
     *    - `IIS_APP_POOL`
     *    - `IIS_ROLE_NAME`
     *    - `JAVA_JAR_FILE`
     *    - `JAVA_JAR_PATH`
     *    - `JAVA_MAIN_CLASS`
     *    - `JAVA_MAIN_MODULE`
     *    - `JBOSS_HOME`
     *    - `JBOSS_MODE`
     *    - `JBOSS_SERVER_NAME`
     *    - `KUBERNETES_BASE_POD_NAME`
     *    - `KUBERNETES_CONTAINER_NAME`
     *    - `KUBERNETES_FULL_POD_NAME`
     *    - `KUBERNETES_NAMESPACE`
     *    - `KUBERNETES_POD_UID`
     *    - `MSSQL_INSTANCE_NAME`
     *    - `NODE_JS_APP_BASE_DIRECTORY`
     *    - `NODE_JS_APP_NAME`
     *    - `NODE_JS_SCRIPT_NAME`
     *    - `ORACLE_SID`
     *    - `PG_ID_CALC_INPUT_KEY_LINKAGE`
     *    - `PHP_SCRIPT_PATH`
     *    - `PHP_WORKING_DIRECTORY`
     *    - `RUBY_APP_ROOT_PATH`
     *    - `RUBY_SCRIPT_PATH`
     *    - `RULE_RESULT`
     *    - `SOFTWAREAG_INSTALL_ROOT`
     *    - `SOFTWAREAG_PRODUCTPROPNAME`
     *    - `SPRINGBOOT_APP_NAME`
     *    - `SPRINGBOOT_PROFILE_NAME`
     *    - `SPRINGBOOT_STARTUP_CLASS`
     *    - `TIBCO_BUSINESSWORKS_CE_APP_NAME`
     *    - `TIBCO_BUSINESSWORKS_CE_VERSION`
     *    - `TIBCO_BUSINESS_WORKS_APP_NODE_NAME`
     *    - `TIBCO_BUSINESS_WORKS_APP_SPACE_NAME`
     *    - `TIBCO_BUSINESS_WORKS_DOMAIN_NAME`
     *    - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE`
     *    - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH`
     *    - `TIBCO_BUSINESS_WORKS_HOME`
     *    - `VARNISH_INSTANCE_NAME`
     *    - `WEB_LOGIC_CLUSTER_NAME`
     *    - `WEB_LOGIC_DOMAIN_NAME`
     *    - `WEB_LOGIC_HOME`
     *    - `WEB_LOGIC_NAME`
     *    - `WEB_SPHERE_CELL_NAME`
     *    - `WEB_SPHERE_CLUSTER_NAME`
     *    - `WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME`
     */
    dynamicKey: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
}

export interface ServiceNamingConditionConditionSyntheticEngine {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are  EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are CLASSIC and CUSTOM
     */
    value?: string;
}

export interface ServiceNamingConditionConditionSyntheticEngineTypeComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are  EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be SYNTHETIC_ENGINE_TYPE
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to. Possible values are CLASSIC and CUSTOM
     */
    value?: string;
}

export interface ServiceNamingConditionConditionTag {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and TAG_KEY_EQUALS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * Tag of a Dynatrace entity
     */
    value?: outputs.ServiceNamingConditionConditionTagValue;
}

export interface ServiceNamingConditionConditionTagComparison {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and TAG_KEY_EQUALS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * if specified, needs to be TAG
     *
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * Tag of a Dynatrace entity
     */
    value?: outputs.ServiceNamingConditionConditionTagComparisonValue;
}

export interface ServiceNamingConditionConditionTagComparisonValue {
    /**
     * The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
     */
    context: string;
    /**
     * The key of the tag. Custom tags have the tag value here
     */
    key: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value of the tag. Not applicable to custom tags
     */
    value?: string;
}

export interface ServiceNamingConditionConditionTagValue {
    /**
     * The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
     */
    context: string;
    /**
     * The key of the tag. Custom tags have the tag value here
     */
    key: string;
    /**
     * Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
     */
    unknowns?: string;
    /**
     * The value of the tag. Not applicable to custom tags
     */
    value?: string;
}

export interface ServiceNamingConditionConditionTech {
    /**
     * Reverses the operator. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
     */
    operator: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value?: outputs.ServiceNamingConditionConditionTechValue;
}

export interface ServiceNamingConditionConditionTechValue {
    /**
     * Predefined technology, if technology is not predefined, then the verbatim type must be set.
     */
    type?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * Non-predefined technology, use for custom technologies
     */
    verbatimType?: string;
}

export interface ServiceSplittingRule {
    /**
     * Limits the scope of the service splitting rule using [DQL matcher](https://dt-url.net/l603wby) conditions on resource attributes..  A rule is applied only if the condition matches, otherwise the ruleset evaluation continues.
     */
    condition?: string;
    /**
     * no documentation available
     */
    description?: string;
    /**
     * Rule name
     */
    ruleName: string;
    /**
     * Define the entire set of resource attributes that should split your services in the matching scope.. Each attribute that exists will contribute to the final service ID.
     */
    serviceSplittingAttributes?: outputs.ServiceSplittingRuleServiceSplittingAttributes;
}

export interface ServiceSplittingRuleServiceSplittingAttributes {
    serviceSplittingAttributes: outputs.ServiceSplittingRuleServiceSplittingAttributesServiceSplittingAttribute[];
}

export interface ServiceSplittingRuleServiceSplittingAttributesServiceSplittingAttribute {
    /**
     * Attribute key
     */
    key: string;
}

export interface SessionReplayWebPrivacyMaskingPresets {
    /**
     * (Field has overlap with `dynatrace.ApplicationDataPrivacy`) The elements are defined by the CSS selector or attribute name.
     */
    playbackMaskingAllowListRules?: outputs.SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingAllowListRules;
    /**
     * (Field has overlap with `dynatrace.ApplicationDataPrivacy`) The elements are defined by the CSS selector or attribute name.
     */
    playbackMaskingBlockListRules?: outputs.SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingBlockListRules;
    /**
     * (Field has overlap with `dynatrace.ApplicationDataPrivacy`) Possible Values: `MASK_ALL`, `MASK_USER_INPUT`, `ALLOW_LIST`, `BLOCK_LIST`
     */
    playbackMaskingPreset: string;
    /**
     * (Field has overlap with `dynatrace.ApplicationDataPrivacy`) The elements are defined by the CSS selector or attribute name.
     */
    recordingMaskingAllowListRules?: outputs.SessionReplayWebPrivacyMaskingPresetsRecordingMaskingAllowListRules;
    /**
     * (Field has overlap with `dynatrace.ApplicationDataPrivacy`) The elements are defined by the CSS selector or attribute name.
     */
    recordingMaskingBlockListRules?: outputs.SessionReplayWebPrivacyMaskingPresetsRecordingMaskingBlockListRules;
    /**
     * (Field has overlap with `dynatrace.ApplicationDataPrivacy`) Possible Values: `MASK_USER_INPUT`, `ALLOW_LIST`, `BLOCK_LIST`, `MASK_ALL`
     */
    recordingMaskingPreset: string;
}

export interface SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingAllowListRules {
    allowListRules: outputs.SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingAllowListRulesAllowListRule[];
}

export interface SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingAllowListRulesAllowListRule {
    /**
     * Attribute masking can be applied to web applications that store data within attributes, typically data-NAME attributes in HTML5. When you define attributes, their values are masked while recording but not removed.
     */
    attributeExpression?: string;
    /**
     * Content masking can be applied to webpages where personal data is displayed. When content masking is applied to parent elements, all child elements are masked by default.
     */
    cssExpression?: string;
    /**
     * Possible Values: `ATTRIBUTE`, `ELEMENT`
     */
    target: string;
}

export interface SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingBlockListRules {
    blockListRules: outputs.SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingBlockListRulesBlockListRule[];
}

export interface SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingBlockListRulesBlockListRule {
    /**
     * Attribute masking can be applied to web applications that store data within attributes, typically data-NAME attributes in HTML5. When you define attributes, their values are masked while recording but not removed.
     */
    attributeExpression?: string;
    /**
     * Content masking can be applied to webpages where personal data is displayed. When content masking is applied to parent elements, all child elements are masked by default.
     */
    cssExpression?: string;
    /**
     * Hide user interactions with these elements, including clicks that expand elements, highlighting that results from hovering a cursor over an option, and selection of specific form options.
     */
    hideUserInteraction?: boolean;
    /**
     * Possible Values: `ELEMENT`, `ATTRIBUTE`
     */
    target: string;
}

export interface SessionReplayWebPrivacyMaskingPresetsRecordingMaskingAllowListRules {
    allowListRules: outputs.SessionReplayWebPrivacyMaskingPresetsRecordingMaskingAllowListRulesAllowListRule[];
}

export interface SessionReplayWebPrivacyMaskingPresetsRecordingMaskingAllowListRulesAllowListRule {
    /**
     * Attribute masking can be applied to web applications that store data within attributes, typically data-NAME attributes in HTML5. When you define attributes, their values are masked while recording but not removed.
     */
    attributeExpression?: string;
    /**
     * Content masking can be applied to webpages where personal data is displayed. When content masking is applied to parent elements, all child elements are masked by default.
     */
    cssExpression?: string;
    /**
     * Possible Values: `ATTRIBUTE`, `ELEMENT`
     */
    target: string;
}

export interface SessionReplayWebPrivacyMaskingPresetsRecordingMaskingBlockListRules {
    blockListRules: outputs.SessionReplayWebPrivacyMaskingPresetsRecordingMaskingBlockListRulesBlockListRule[];
}

export interface SessionReplayWebPrivacyMaskingPresetsRecordingMaskingBlockListRulesBlockListRule {
    /**
     * Attribute masking can be applied to web applications that store data within attributes, typically data-NAME attributes in HTML5. When you define attributes, their values are masked while recording but not removed.
     */
    attributeExpression?: string;
    /**
     * Content masking can be applied to webpages where personal data is displayed. When content masking is applied to parent elements, all child elements are masked by default.
     */
    cssExpression?: string;
    /**
     * Hide user interactions with these elements, including clicks that expand elements, highlighting that results from hovering a cursor over an option, and selection of specific form options.
     */
    hideUserInteraction?: boolean;
    /**
     * Possible Values: `ELEMENT`, `ATTRIBUTE`
     */
    target: string;
}

export interface SettingsPermissionsGroups {
    /**
     * Group that is to be granted read or write permissions
     */
    groups: outputs.SettingsPermissionsGroupsGroup[];
}

export interface SettingsPermissionsGroupsGroup {
    /**
     * Valid values: `read`, `write`
     */
    access: string;
    /**
     * The UUID of the group, conveniently retrieved via the `id` attribute provided by the data source `dynatrace*iam*group
     */
    id: string;
}

export interface SettingsPermissionsUsers {
    /**
     * User that is to be granted read or write permissions
     */
    users: outputs.SettingsPermissionsUsersUser[];
}

export interface SettingsPermissionsUsersUser {
    /**
     * Valid values: `read`, `write`
     */
    access: string;
    /**
     * The UUID of the user, conveniently retrieved via the `uid` attribute provided by the data source `dynatrace.IamUser`
     */
    uid: string;
}

export interface SiteReliabilityGuardianObjectives {
    objectives: outputs.SiteReliabilityGuardianObjectivesObjective[];
}

export interface SiteReliabilityGuardianObjectivesObjective {
    /**
     * Enable auto adaptive threshold
     */
    autoAdaptiveThresholdEnabled?: boolean;
    /**
     * Possible Values: `GREATER_THAN_OR_EQUAL`, `LESS_THAN_OR_EQUAL`
     */
    comparisonOperator: string;
    /**
     * no documentation available
     */
    description?: string;
    /**
     * Display Unit
     */
    displayUnit?: outputs.SiteReliabilityGuardianObjectivesObjectiveDisplayUnit;
    /**
     * DQL query
     */
    dqlQuery?: string;
    /**
     * Objective name
     */
    name: string;
    /**
     * Possible Values: `DQL`, `REFERENCE_SLO`
     */
    objectiveType: string;
    /**
     * Please enter the metric key of your desired SLO. SLO metric keys have to start with 'func:slo.'
     */
    referenceSlo?: string;
    /**
     * no documentation available
     */
    segments?: outputs.SiteReliabilityGuardianObjectivesObjectiveSegments;
    /**
     * no documentation available
     */
    target?: number;
    /**
     * no documentation available
     */
    warning?: number;
}

export interface SiteReliabilityGuardianObjectivesObjectiveDisplayUnit {
    /**
     * Base Unit
     */
    base: string;
    /**
     * Decimals
     */
    decimals: number;
    /**
     * display as unit
     */
    display: string;
}

export interface SiteReliabilityGuardianObjectivesObjectiveSegments {
    segments: outputs.SiteReliabilityGuardianObjectivesObjectiveSegmentsSegment[];
}

export interface SiteReliabilityGuardianObjectivesObjectiveSegmentsSegment {
    /**
     * Segment ID
     */
    id: string;
    /**
     * Segment Variables
     */
    variables?: outputs.SiteReliabilityGuardianObjectivesObjectiveSegmentsSegmentVariables;
}

export interface SiteReliabilityGuardianObjectivesObjectiveSegmentsSegmentVariables {
    variables: outputs.SiteReliabilityGuardianObjectivesObjectiveSegmentsSegmentVariablesVariable[];
}

export interface SiteReliabilityGuardianObjectivesObjectiveSegmentsSegmentVariablesVariable {
    /**
     * Variable Name
     */
    name: string;
    /**
     * Variable Values
     */
    values?: string[];
}

export interface SiteReliabilityGuardianVariables {
    variables: outputs.SiteReliabilityGuardianVariablesVariable[];
}

export interface SiteReliabilityGuardianVariablesVariable {
    /**
     * Value
     */
    definition: string;
    /**
     * no documentation available
     */
    name: string;
}

export interface SloErrorBudgetBurnRate {
    /**
     * The error budget burn rate calculation is enabled (true) or disabled (false).
     */
    burnRateVisualizationEnabled?: boolean;
    /**
     * The threshold between a slow and a fast burn rate.
     */
    fastBurnThreshold?: number;
}

export interface SloV2ErrorBudgetBurnRate {
    /**
     * Burn rate visualization enabled
     */
    burnRateVisualizationEnabled: boolean;
    /**
     * The threshold defines when a burn rate is marked as fast-burning (high-emergency). Burn rates lower than this threshold (and greater than 1) are highlighted as slow-burn (low-emergency).
     */
    fastBurnThreshold?: number;
}

export interface SpanCaptureRuleMatches {
    /**
     * Matching strategies for the Span
     */
    matches: outputs.SpanCaptureRuleMatchesMatch[];
}

export interface SpanCaptureRuleMatchesMatch {
    /**
     * Whether to match strings case sensitively or not
     */
    caseSensitive?: boolean;
    /**
     * Possible values are `EQUALS`, `CONTAINS`, `STARTS_WITH`, `ENDS_WITH`, `DOES_NOT_EQUAL`, `DOES_NOT_CONTAIN`, `DOES_NOT_START_WITH` and `DOES_NOT_END_WITH`.
     */
    comparison: string;
    /**
     * The name of the attribute if `source` is `ATTRIBUTE`
     */
    key?: string;
    /**
     * What to match against. Possible values are `SPAN_NAME`, `SPAN_KIND`, `ATTRIBUTE`, `INSTRUMENTATION_LIBRARY_NAME` and `INSTRUMENTATION_LIBRARY_VERSION`
     */
    source: string;
    /**
     * The value to compare against. When `source` is `SPAN_KIND` the only allowed values are `INTERNAL`, `SERVER`, `CLIENT`, `PRODUCER` and `CONSUMER`
     */
    value?: string;
}

export interface SpanContextPropagationMatches {
    /**
     * Matching strategies for the Span
     */
    matches: outputs.SpanContextPropagationMatchesMatch[];
}

export interface SpanContextPropagationMatchesMatch {
    /**
     * Whether to match strings case sensitively or not
     */
    caseSensitive?: boolean;
    /**
     * Possible values are `EQUALS`, `CONTAINS`, `STARTS_WITH`, `ENDS_WITH`, `DOES_NOT_EQUAL`, `DOES_NOT_CONTAIN`, `DOES_NOT_START_WITH` and `DOES_NOT_END_WITH`.
     */
    comparison: string;
    /**
     * The name of the attribute if `source` is `ATTRIBUTE`
     */
    key?: string;
    /**
     * What to match against. Possible values are `SPAN_NAME`, `SPAN_KIND`, `ATTRIBUTE`, `INSTRUMENTATION_LIBRARY_NAME` and `INSTRUMENTATION_LIBRARY_VERSION`
     */
    source: string;
    /**
     * The value to compare against. When `source` is `SPAN_KIND` the only allowed values are `INTERNAL`, `SERVER`, `CLIENT`, `PRODUCER` and `CONSUMER`
     */
    value?: string;
}

export interface SpanEntryPointMatches {
    /**
     * Matching strategies for the Span
     */
    matches: outputs.SpanEntryPointMatchesMatch[];
}

export interface SpanEntryPointMatchesMatch {
    /**
     * Whether to match strings case sensitively or not
     */
    caseSensitive?: boolean;
    /**
     * Possible values are `EQUALS`, `CONTAINS`, `STARTS_WITH`, `ENDS_WITH`, `DOES_NOT_EQUAL`, `DOES_NOT_CONTAIN`, `DOES_NOT_START_WITH` and `DOES_NOT_END_WITH`.
     */
    comparison: string;
    /**
     * The name of the attribute if `source` is `ATTRIBUTE`
     */
    key?: string;
    /**
     * What to match against. Possible values are `SPAN_NAME`, `SPAN_KIND`, `ATTRIBUTE`, `INSTRUMENTATION_LIBRARY_NAME` and `INSTRUMENTATION_LIBRARY_VERSION`
     */
    source: string;
    /**
     * The value to compare against. When `source` is `SPAN_KIND` the only allowed values are `INTERNAL`, `SERVER`, `CLIENT`, `PRODUCER` and `CONSUMER`
     */
    value?: string;
}

export interface UpdateWindowsDailyRecurrence {
    /**
     * Every **X** days:
     * * `1` = every day,
     * * `2` = every two days,
     * * `3` = every three days,
     * * etc.
     */
    every: number;
    /**
     * Recurrence range
     */
    recurrenceRange: outputs.UpdateWindowsDailyRecurrenceRecurrenceRange;
    /**
     * Update time
     */
    updateTime: outputs.UpdateWindowsDailyRecurrenceUpdateTime;
}

export interface UpdateWindowsDailyRecurrenceRecurrenceRange {
    /**
     * no documentation available
     */
    end: string;
    /**
     * no documentation available
     */
    start: string;
}

export interface UpdateWindowsDailyRecurrenceUpdateTime {
    /**
     * Duration (minutes)
     */
    duration: number;
    /**
     * Start time (24-hour clock)
     */
    startTime: string;
    /**
     * Possible Values: `GMT_06_00`, `GMT_12_00`, `GMT_10_00`, `GMT_07_00`, `GMT_00_00`, `GMT_11_00`, `GMT_03_00`, `GMT_01_00`, `GMT_05_00`, `GMT_09_00`, `GMT_02_00`, `GMT_04_00`, `GMT_08_00`
     */
    timeZone: string;
}

export interface UpdateWindowsMonthlyRecurrence {
    /**
     * Every **X** months:
     * * `1` = every month,
     * * `2` = every two months,
     * * `3` = every three months,
     * * etc.
     */
    every: number;
    /**
     * Recurrence range
     */
    recurrenceRange: outputs.UpdateWindowsMonthlyRecurrenceRecurrenceRange;
    /**
     * Day of the month
     */
    selectedMonthDay: number;
    /**
     * Update time
     */
    updateTime: outputs.UpdateWindowsMonthlyRecurrenceUpdateTime;
}

export interface UpdateWindowsMonthlyRecurrenceRecurrenceRange {
    /**
     * no documentation available
     */
    end: string;
    /**
     * no documentation available
     */
    start: string;
}

export interface UpdateWindowsMonthlyRecurrenceUpdateTime {
    /**
     * Duration (minutes)
     */
    duration: number;
    /**
     * Start time (24-hour clock)
     */
    startTime: string;
    /**
     * Possible Values: `GMT_06_00`, `GMT_12_00`, `GMT_10_00`, `GMT_07_00`, `GMT_00_00`, `GMT_11_00`, `GMT_03_00`, `GMT_01_00`, `GMT_05_00`, `GMT_09_00`, `GMT_02_00`, `GMT_04_00`, `GMT_08_00`
     */
    timeZone: string;
}

export interface UpdateWindowsOnceRecurrence {
    /**
     * Update time
     */
    recurrenceRange: outputs.UpdateWindowsOnceRecurrenceRecurrenceRange;
}

export interface UpdateWindowsOnceRecurrenceRecurrenceRange {
    /**
     * no documentation available
     */
    end: string;
    /**
     * no documentation available
     */
    start: string;
}

export interface UpdateWindowsWeeklyRecurrence {
    /**
     * Every **X** weeks:
     * * `1` = every week,
     * * `2` = every two weeks,
     * * `3` = every three weeks,
     * * etc.
     */
    every: number;
    /**
     * Recurrence range
     */
    recurrenceRange: outputs.UpdateWindowsWeeklyRecurrenceRecurrenceRange;
    /**
     * Day of the week
     */
    selectedWeekDays: outputs.UpdateWindowsWeeklyRecurrenceSelectedWeekDays;
    /**
     * Update time
     */
    updateTime: outputs.UpdateWindowsWeeklyRecurrenceUpdateTime;
}

export interface UpdateWindowsWeeklyRecurrenceRecurrenceRange {
    /**
     * no documentation available
     */
    end: string;
    /**
     * no documentation available
     */
    start: string;
}

export interface UpdateWindowsWeeklyRecurrenceSelectedWeekDays {
    /**
     * no documentation available
     */
    friday: boolean;
    /**
     * no documentation available
     */
    monday: boolean;
    /**
     * no documentation available
     */
    saturday: boolean;
    /**
     * no documentation available
     */
    sunday: boolean;
    /**
     * no documentation available
     */
    thursday: boolean;
    /**
     * no documentation available
     */
    tuesday: boolean;
    /**
     * no documentation available
     */
    wednesday: boolean;
}

export interface UpdateWindowsWeeklyRecurrenceUpdateTime {
    /**
     * Duration (minutes)
     */
    duration: number;
    /**
     * Start time (24-hour clock)
     */
    startTime: string;
    /**
     * Possible Values: `GMT_06_00`, `GMT_12_00`, `GMT_10_00`, `GMT_07_00`, `GMT_00_00`, `GMT_11_00`, `GMT_03_00`, `GMT_01_00`, `GMT_05_00`, `GMT_09_00`, `GMT_02_00`, `GMT_04_00`, `GMT_08_00`
     */
    timeZone: string;
}

export interface UrlBasedSamplingQueryParameters {
    parameters: outputs.UrlBasedSamplingQueryParametersParameter[];
}

export interface UrlBasedSamplingQueryParametersParameter {
    /**
     * Query parameter name
     */
    name: string;
    /**
     * Query parameter value
     */
    value?: string;
    /**
     * Query parameter value is undefined
     */
    valueIsUndefined?: boolean;
}

export interface UserActionMetricsFilters {
    filters: outputs.UserActionMetricsFiltersFilter[];
}

export interface UserActionMetricsFiltersFilter {
    /**
     * Field name
     */
    fieldName: string;
    /**
     * Possible Values: `EQUALS`, `GREATER_THAN`, `GREATER_THAN_OR_EQUAL_TO`, `IN`, `IS_NOT_NULL`, `IS_NULL`, `LESS_THAN`, `LESS_THAN_OR_EQUAL_TO`, `LIKE`, `NOT_EQUAL`, `NOT_LIKE`, `STARTS_WITH`
     */
    operator: string;
    /**
     * no documentation available
     */
    value?: string;
    /**
     * Values
     */
    valueIns?: string[];
}

export interface UserActionMetricsValue {
    /**
     * Field name
     */
    fieldName?: string;
    /**
     * Possible Values: `COUNTER`, `FIELD`
     */
    type: string;
}

export interface UserGroupPermissions {
    /**
     * A permission granted to one or multiple environments
     */
    grants: outputs.UserGroupPermissionsGrant[];
}

export interface UserGroupPermissionsGrant {
    /**
     * The ids of the environments this permission grants the user access to.
     */
    environments?: string[];
    /**
     * The permission. Possible values are `VIEWER`, `MANAGE_SETTINGS`, `AGENT_INSTALL`, `LOG_VIEWER`, `VIEW_SENSITIVE_REQUEST_DATA`, `CONFIGURE_REQUEST_CAPTURE_DATA`, `REPLAY_SESSION_DATA`, `REPLAY_SESSION_DATA_WITHOUT_MASKING`, `MANAGE_SECURITY_PROBLEMS` and `MANAGE_SUPPORT_TICKETS`.
     */
    permission: string;
}

export interface UserSessionMetricsFilters {
    filters: outputs.UserSessionMetricsFiltersFilter[];
}

export interface UserSessionMetricsFiltersFilter {
    /**
     * Field name
     */
    fieldName: string;
    /**
     * Possible Values: `EQUALS`, `GREATER_THAN`, `GREATER_THAN_OR_EQUAL_TO`, `IN`, `IS_NOT_NULL`, `IS_NULL`, `LESS_THAN`, `LESS_THAN_OR_EQUAL_TO`, `LIKE`, `NOT_EQUAL`, `NOT_LIKE`, `STARTS_WITH`
     */
    operator: string;
    /**
     * no documentation available
     */
    value?: string;
    /**
     * Values
     */
    valueIns?: string[];
}

export interface UserSessionMetricsValue {
    /**
     * Field name
     */
    fieldName?: string;
    /**
     * Possible Values: `COUNTER`, `FIELD`
     */
    type: string;
}

export interface VmwareAnomaliesDroppedPacketsDetection {
    /**
     * Alert if the condition is met in 3 out of 5 samples
     */
    customThresholds?: outputs.VmwareAnomaliesDroppedPacketsDetectionCustomThresholds;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface VmwareAnomaliesDroppedPacketsDetectionCustomThresholds {
    /**
     * Receive/transmit dropped packets rate on NIC is higher than
     */
    droppedPacketsPerSecond: number;
}

export interface VmwareAnomaliesEsxiHighCpuDetection {
    /**
     * Alert if **all three** conditions are met in 3 out of 5 samples
     */
    customThresholds?: outputs.VmwareAnomaliesEsxiHighCpuDetectionCustomThresholds;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface VmwareAnomaliesEsxiHighCpuDetectionCustomThresholds {
    /**
     * At least one peak occurred when Hypervisor CPU usage was higher than
     */
    cpuPeakPercentage: number;
    /**
     * CPU usage is higher than
     */
    cpuUsagePercentage: number;
    /**
     * VM CPU ready is higher than
     */
    vmCpuReadyPercentage: number;
}

export interface VmwareAnomaliesEsxiHighMemoryDetection {
    /**
     * Alert if the condition is met in 3 out of 5 samples
     */
    customThresholds?: outputs.VmwareAnomaliesEsxiHighMemoryDetectionCustomThresholds;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface VmwareAnomaliesEsxiHighMemoryDetectionCustomThresholds {
    /**
     * ESXi host swap IN/OUT or compression/decompression rate is higher than
     */
    compressionDecompressionRate: number;
}

export interface VmwareAnomaliesGuestCpuLimitDetection {
    /**
     * Alert if **all three** conditions are met in 3 out of 5 samples
     */
    customThresholds?: outputs.VmwareAnomaliesGuestCpuLimitDetectionCustomThresholds;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface VmwareAnomaliesGuestCpuLimitDetectionCustomThresholds {
    /**
     * Hypervisor CPU usage is higher than
     */
    hostCpuUsagePercentage: number;
    /**
     * VM CPU ready is higher than
     */
    vmCpuReadyPercentage: number;
    /**
     * VM CPU usage (VM CPU Usage Mhz / VM CPU limit in Mhz) is higher than
     */
    vmCpuUsagePercentage: number;
}

export interface VmwareAnomaliesLowDatastoreSpaceDetection {
    /**
     * Alert if the condition is met in 1 out of 5 samples
     */
    customThresholds?: outputs.VmwareAnomaliesLowDatastoreSpaceDetectionCustomThresholds;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface VmwareAnomaliesLowDatastoreSpaceDetectionCustomThresholds {
    /**
     * Datastore free space is lower than
     */
    freeSpacePercentage: number;
}

export interface VmwareAnomaliesOverloadedStorageDetection {
    /**
     * Alert if the condition is met in 3 out of 5 samples
     */
    customThresholds?: outputs.VmwareAnomaliesOverloadedStorageDetectionCustomThresholds;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface VmwareAnomaliesOverloadedStorageDetectionCustomThresholds {
    /**
     * Number of command aborts is higher than
     */
    commandAbortsNumber: number;
}

export interface VmwareAnomaliesSlowPhysicalStorageDetection {
    /**
     * Alert if **any** condition is met in 4 out of 5 samples
     */
    customThresholds?: outputs.VmwareAnomaliesSlowPhysicalStorageDetectionCustomThresholds;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface VmwareAnomaliesSlowPhysicalStorageDetectionCustomThresholds {
    /**
     * Read/write latency is higher than
     */
    avgReadWriteLatency: number;
    /**
     * Peak value for read/write latency is higher than
     */
    peakReadWriteLatency: number;
}

export interface VmwareAnomaliesUndersizedStorageDetection {
    /**
     * Alert if **any** condition is met in 3 out of 5 samples
     */
    customThresholds?: outputs.VmwareAnomaliesUndersizedStorageDetectionCustomThresholds;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface VmwareAnomaliesUndersizedStorageDetectionCustomThresholds {
    /**
     * Average queue command latency is higher than
     */
    averageQueueCommandLatency: number;
    /**
     * Peak queue command latency is higher than
     */
    peakQueueCommandLatency: number;
}

export interface VulnerabilityCodeCriteria {
    /**
     * Process group
     */
    processGroup?: string;
}

export interface VulnerabilityCodeMetadata {
    /**
     * no documentation available
     */
    comment: string;
}

export interface VulnerabilityCodeResourceAttributeConditions {
    resourceAttributeConditions: outputs.VulnerabilityCodeResourceAttributeConditionsResourceAttributeCondition[];
}

export interface VulnerabilityCodeResourceAttributeConditionsResourceAttributeCondition {
    /**
     * Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_END_WITH`, `DOES_NOT_EXIST`, `DOES_NOT_START_WITH`, `ENDS_WITH`, `EQUALS`, `EXISTS`, `NOT_EQUALS`, `STARTS_WITH`
     */
    matcher: string;
    /**
     * Resource attribute key
     */
    resourceAttributeKey: string;
    /**
     * Resource attribute value
     */
    resourceAttributeValue?: string;
}

export interface VulnerabilityCodeVulnerabilityDetectionControl {
    /**
     * Possible Values: `MONITORING_OFF`, `MONITORING_ON`
     */
    monitoringMode: string;
}

export interface VulnerabilitySettingsTechnologies {
    /**
     * NET
     */
    enableDotNet: boolean;
    /**
     * NET runtimes
     */
    enableDotNetRuntime?: boolean;
    /**
     * Go
     */
    enableGo: boolean;
    /**
     * Java
     */
    enableJava: boolean;
    /**
     * Java runtimes
     */
    enableJavaRuntime?: boolean;
    /**
     * Kubernetes
     */
    enableKubernetes: boolean;
    /**
     * Node.js
     */
    enableNodeJs: boolean;
    /**
     * Node.js runtimes
     */
    enableNodeJsRuntime?: boolean;
    /**
     * PHP
     */
    enablePhp: boolean;
    /**
     * Python
     */
    enablePython?: boolean;
    /**
     * Python runtimes
     */
    enablePythonRuntime?: boolean;
}

export interface VulnerabilityThirdPartyAttrMetadata {
    /**
     * no documentation available
     */
    comment: string;
}

export interface VulnerabilityThirdPartyAttrResourceAttributeConditions {
    resourceAttributeConditions: outputs.VulnerabilityThirdPartyAttrResourceAttributeConditionsResourceAttributeCondition[];
}

export interface VulnerabilityThirdPartyAttrResourceAttributeConditionsResourceAttributeCondition {
    /**
     * Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_END_WITH`, `DOES_NOT_EXIST`, `DOES_NOT_START_WITH`, `ENDS_WITH`, `EQUALS`, `EXISTS`, `NOT_EQUALS`, `STARTS_WITH`
     */
    matcher: string;
    /**
     * Resource attribute key
     */
    resourceAttributeKey: string;
    /**
     * Resource attribute value
     */
    resourceAttributeValue?: string;
}

export interface VulnerabilityThirdPartyAttrVulnerabilityDetectionControl {
    /**
     * Possible Values: `MONITORING_OFF`, `MONITORING_ON`
     */
    monitoringMode: string;
}

export interface VulnerabilityThirdPartyK8sKubernetesLabelConditions {
    kubernetesLabelConditions: outputs.VulnerabilityThirdPartyK8sKubernetesLabelConditionsKubernetesLabelCondition[];
}

export interface VulnerabilityThirdPartyK8sKubernetesLabelConditionsKubernetesLabelCondition {
    /**
     * Kubernetes label key
     */
    kubernetesLabelKey: string;
    /**
     * Kubernetes label value
     */
    kubernetesLabelValue?: string;
    /**
     * Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_END_WITH`, `DOES_NOT_EXIST`, `DOES_NOT_START_WITH`, `ENDS_WITH`, `EQUALS`, `EXISTS`, `NOT_EQUALS`, `STARTS_WITH`
     */
    matcher: string;
}

export interface VulnerabilityThirdPartyK8sMetadata {
    /**
     * no documentation available
     */
    comment: string;
}

export interface VulnerabilityThirdPartyK8sVulnerabilityDetectionControl {
    /**
     * Possible Values: `MONITORING_OFF`, `MONITORING_ON`
     */
    monitoringMode: string;
}

export interface WebAppAnomaliesErrorRate {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Alert if the percentage of failing user actions increases by **both** the absolute and relative thresholds:
     */
    errorRateAuto?: outputs.WebAppAnomaliesErrorRateErrorRateAuto;
    /**
     * Possible Values: `Auto`, `Fixed`
     */
    errorRateDetectionMode?: string;
    /**
     * no documentation available
     */
    errorRateFixed?: outputs.WebAppAnomaliesErrorRateErrorRateFixed;
}

export interface WebAppAnomaliesErrorRateErrorRateAuto {
    /**
     * Absolute threshold
     */
    absoluteIncrease: number;
    /**
     * Avoid over-alerting
     */
    overAlertingProtection: outputs.WebAppAnomaliesErrorRateErrorRateAutoOverAlertingProtection;
    /**
     * Relative threshold
     */
    relativeIncrease: number;
}

export interface WebAppAnomaliesErrorRateErrorRateAutoOverAlertingProtection {
    /**
     * Only alert if there are at least
     */
    actionsPerMinute: number;
    /**
     * Only alert if the abnormal state remains for at least
     */
    minutesAbnormalState: number;
}

export interface WebAppAnomaliesErrorRateErrorRateFixed {
    /**
     * To avoid over-alerting for low traffic applications
     */
    errorRateReqPerMin: number;
    /**
     * Possible Values: `Low`, `Medium`, `High`
     */
    errorRateSensitivity: string;
    /**
     * Alert if this custom error rate threshold is exceeded during any 5-minute-period
     */
    maxFailureRateIncrease: number;
    /**
     * Amount of minutes the observed traffic has to stay in abnormal state before alert
     */
    minutesAbnormalState: number;
}

export interface WebAppAnomaliesResponseTime {
    /**
     * Possible Values: `Auto`, `Fixed`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * no documentation available
     */
    responseTimeAuto?: outputs.WebAppAnomaliesResponseTimeResponseTimeAuto;
    /**
     * no documentation available
     */
    responseTimeFixed?: outputs.WebAppAnomaliesResponseTimeResponseTimeFixed;
}

export interface WebAppAnomaliesResponseTimeResponseTimeAuto {
    /**
     * Avoid over-alerting
     */
    overAlertingProtection: outputs.WebAppAnomaliesResponseTimeResponseTimeAutoOverAlertingProtection;
    /**
     * Alert if the median response time of all user actions degrades beyond **both** the absolute and relative thresholds:
     */
    responseTimeAll: outputs.WebAppAnomaliesResponseTimeResponseTimeAutoResponseTimeAll;
    /**
     * Alert if the response time of the slowest 10% of requests degrades beyond **both** the absolute and relative thresholds:
     */
    responseTimeSlowest: outputs.WebAppAnomaliesResponseTimeResponseTimeAutoResponseTimeSlowest;
}

export interface WebAppAnomaliesResponseTimeResponseTimeAutoOverAlertingProtection {
    /**
     * Only alert if there are at least
     */
    actionsPerMinute: number;
    /**
     * Only alert if the abnormal state remains for at least
     */
    minutesAbnormalState: number;
}

export interface WebAppAnomaliesResponseTimeResponseTimeAutoResponseTimeAll {
    /**
     * Absolute threshold
     */
    degradationMilliseconds: number;
    /**
     * Relative threshold
     */
    degradationPercent: number;
}

export interface WebAppAnomaliesResponseTimeResponseTimeAutoResponseTimeSlowest {
    /**
     * Absolute threshold
     */
    slowestDegradationMilliseconds: number;
    /**
     * Relative threshold
     */
    slowestDegradationPercent: number;
}

export interface WebAppAnomaliesResponseTimeResponseTimeFixed {
    /**
     * Avoid over-alerting
     */
    overAlertingProtection: outputs.WebAppAnomaliesResponseTimeResponseTimeFixedOverAlertingProtection;
    /**
     * Alert if the key performance metric of all requests degrades beyond this threshold:
     */
    responseTimeAll: outputs.WebAppAnomaliesResponseTimeResponseTimeFixedResponseTimeAll;
    /**
     * Alert if the key performance metric of the slowest 10% of requests degrades beyond this threshold:
     */
    responseTimeSlowest: outputs.WebAppAnomaliesResponseTimeResponseTimeFixedResponseTimeSlowest;
    /**
     * Possible Values: `Medium`, `High`, `Low`
     */
    sensitivity: string;
}

export interface WebAppAnomaliesResponseTimeResponseTimeFixedOverAlertingProtection {
    /**
     * Only alert if there are at least
     */
    actionsPerMinute: number;
    /**
     * Only alert if the abnormal state remains for at least
     */
    minutesAbnormalState: number;
}

export interface WebAppAnomaliesResponseTimeResponseTimeFixedResponseTimeAll {
    /**
     * Alert if the key performance metric degrades beyond this many ms within an observation period of 5 minutes
     */
    degradationMilliseconds: number;
}

export interface WebAppAnomaliesResponseTimeResponseTimeFixedResponseTimeSlowest {
    /**
     * Alert if the key performance metric of the slowest 10% degrades beyond this many ms within an observation period of 5 minutes
     */
    slowestDegradationMilliseconds: number;
}

export interface WebAppAnomaliesTrafficDrops {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Dynatrace learns your typical application traffic over an observation period of one week.
     */
    trafficDrops?: outputs.WebAppAnomaliesTrafficDropsTrafficDrops;
}

export interface WebAppAnomaliesTrafficDropsTrafficDrops {
    /**
     * Minutes the observed traffic has to stay in abnormal state before alert
     */
    abnormalStateAbnormalState: number;
    /**
     * Alert if the observed traffic is less than this percentage of the expected value
     */
    trafficDropPercentage: number;
}

export interface WebAppAnomaliesTrafficSpikes {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Dynatrace learns your typical application traffic over an observation period of one week.
     */
    trafficSpikes?: outputs.WebAppAnomaliesTrafficSpikesTrafficSpikes;
}

export interface WebAppAnomaliesTrafficSpikesTrafficSpikes {
    /**
     * Minutes an application has to stay in abnormal state before alert
     */
    minutesAbnormalState: number;
    /**
     * Alert if the observed traffic is more than this percentage of the expected value
     */
    trafficSpikePercentage: number;
}

export interface WebAppAutoInjectionCacheControlHeaders {
    /**
     * [How to ensure timely configuration updates for automatic injection?](https://dt-url.net/m9039ea)
     */
    cacheControlHeaders: boolean;
}

export interface WebAppAutoInjectionMonitoringCodeSourceSection {
    /**
     * Real User Monitoring code source
     */
    codeSource: string;
    /**
     * Specify the source path for placement of your application's custom JavaScript library file. By default, this path is set to the root directory of your web server. A custom source path may be necessary if your server operates behind a firewall.
     */
    monitoringCodePath?: string;
}

export interface WebAppAutoInjectionSnippetFormat {
    /**
     * Possible Values: `DEFERRED`, `SYNCHRONOUSLY`
     */
    codeSnippetType?: string;
    /**
     * Possible Values: `async`, `defer`, `none`
     */
    scriptExecutionAttribute?: string;
    /**
     * Snippet format
     */
    snippetFormat: string;
}

export interface WebAppCustomErrorsErrorRules {
    errorRules: outputs.WebAppCustomErrorsErrorRulesErrorRule[];
}

export interface WebAppCustomErrorsErrorRulesErrorRule {
    /**
     * Capture settings
     */
    captureSettings: outputs.WebAppCustomErrorsErrorRulesErrorRuleCaptureSettings;
    /**
     * Possible Values: `ALL`, `BEGINS_WITH`, `CONTAINS`, `ENDS_WITH`, `EQUALS`
     */
    keyMatcher: string;
    /**
     * A case-insensitive key pattern
     */
    keyPattern?: string;
    /**
     * Possible Values: `ALL`, `BEGINS_WITH`, `CONTAINS`, `ENDS_WITH`, `EQUALS`
     */
    valueMatcher: string;
    /**
     * A case-insensitive value pattern
     */
    valuePattern?: string;
}

export interface WebAppCustomErrorsErrorRulesErrorRuleCaptureSettings {
    /**
     * Capture this error
     */
    capture: boolean;
    /**
     * [View more details](https://dt-url.net/hd580p2k)
     */
    considerForAi?: boolean;
    /**
     * Include error in Apdex calculations
     */
    impactApdex?: boolean;
}

export interface WebAppCustomPropRestrictionsCustomEventPropertiesAllowList {
    customSessionPropertiesAllows: outputs.WebAppCustomPropRestrictionsCustomEventPropertiesAllowListCustomSessionPropertiesAllow[];
}

export interface WebAppCustomPropRestrictionsCustomEventPropertiesAllowListCustomSessionPropertiesAllow {
    /**
     * Field name validation should be case-insensitive
     */
    caseInsensitiveNamingEnabled?: boolean;
    /**
     * Possible Values: `BOOLEAN`, `NUMBER`, `STRING`
     */
    fieldDataType: string;
    /**
     * Field name
     */
    fieldName: string;
}

export interface WebAppCustomPropRestrictionsCustomSessionPropertiesAllowList {
    customSessionPropertiesAllows: outputs.WebAppCustomPropRestrictionsCustomSessionPropertiesAllowListCustomSessionPropertiesAllow[];
}

export interface WebAppCustomPropRestrictionsCustomSessionPropertiesAllowListCustomSessionPropertiesAllow {
    /**
     * Field name validation should be case-insensitive
     */
    caseInsensitiveNamingEnabled?: boolean;
    /**
     * Possible Values: `BOOLEAN`, `NUMBER`, `STRING`
     */
    fieldDataType: string;
    /**
     * Field name
     */
    fieldName: string;
}

export interface WebAppEnablementExperienceAnalytics {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface WebAppEnablementRum {
    /**
     * (Field has overlap with `dynatrace.WebApplication`) Percentage of user sessions captured and analyzed
     */
    costAndTrafficControl: number;
    /**
     * (Field has overlap with `dynatrace.WebApplication`) This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Enable Real User Monitoring powered by Grail
     */
    enabledOnGrail?: boolean;
}

export interface WebAppEnablementSessionReplay {
    /**
     * (Field has overlap with `dynatrace.WebApplication`) [Percentage of user sessions recorded with Session Replay](https://dt-url.net/sr-cost-traffic-control). For example, if you have 50% for RUM and 50% for Session Replay, it results in 25% of sessions recorded with Session Replay.
     */
    costAndTrafficControl: number;
    /**
     * (Field has overlap with `dynatrace.WebApplication`) This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface WebAppIpAddressExclusionIpExclusionList {
    ipExclusions: outputs.WebAppIpAddressExclusionIpExclusionListIpExclusion[];
}

export interface WebAppIpAddressExclusionIpExclusionListIpExclusion {
    /**
     * Single IP or IP range start address
     */
    ip: string;
    /**
     * IP range end
     */
    ipTo?: string;
}

export interface WebAppKeyPerformanceCustomThresholds {
    /**
     * If **User action duration** is above this value, the action is assigned to the Frustrated performance zone.
     */
    frustratingThresholdSeconds: number;
    /**
     * If **User action duration** is below this value, the action is assigned to the Satisfied performance zone.
     */
    toleratedThresholdSeconds: number;
}

export interface WebAppKeyPerformanceLoadFallbackThresholds {
    /**
     * If **User action duration** is above this value, the action is assigned to the Frustrated performance zone.
     */
    frustratingFallbackThresholdSeconds: number;
    /**
     * If **User action duration** is below this value, the action is assigned to the Satisfied performance zone.
     */
    toleratedFallbackThresholdSeconds: number;
}

export interface WebAppKeyPerformanceLoadThresholds {
    /**
     * If the key performance metric is above this value, the action is assigned to the Frustrated performance zone.
     */
    frustratingThresholdSeconds: number;
    /**
     * If the key performance metric is below this value, the action is assigned to the Satisfied performance zone.
     */
    toleratedThresholdSeconds: number;
}

export interface WebAppKeyPerformanceXhrFallbackThresholds {
    /**
     * If **User action duration** is above this value, the action is assigned to the Frustrated performance zone.
     */
    frustratingFallbackThresholdSeconds: number;
    /**
     * If **User action duration** is below this value, the action is assigned to the Satisfied performance zone.
     */
    toleratedFallbackThresholdSeconds: number;
}

export interface WebAppKeyPerformanceXhrThresholds {
    /**
     * If the key performance metric is above this value, the action is assigned to the Frustrated performance zone.
     */
    frustratingThresholdSeconds: number;
    /**
     * If the key performance metric is below this value, the action is assigned to the Satisfied performance zone.
     */
    toleratedThresholdSeconds: number;
}

export interface WebAppManualInsertionCodeSnippet {
    /**
     * Possible Values: `DEFERRED`, `SYNCHRONOUSLY`
     */
    codeSnippetType: string;
}

export interface WebAppManualInsertionJavascriptTag {
    /**
     * Duration in hours, possible Values: `1`, `12`, `144`, `24`, `3`, `6`, `72`
     */
    cacheDuration: string;
    /**
     * Add the `crossorigin=anonymous` attribute to capture JavaScript error messages and W3C resource timings
     */
    crossoriginAnonymous: boolean;
    /**
     * Possible Values: `Async`, `Defer`, `None`
     */
    scriptExecutionAttribute?: string;
}

export interface WebAppManualInsertionOneagentJavascriptTag {
    /**
     * Possible Values: `Async`, `Defer`, `None`
     */
    scriptExecutionAttribute?: string;
}

export interface WebAppManualInsertionOneagentJavascriptTagSri {
    /**
     * Possible Values: `Async`, `Defer`, `None`
     */
    scriptExecutionAttribute?: string;
}

export interface WebAppRequestErrorsErrorRules {
    errorRules: outputs.WebAppRequestErrorsErrorRulesErrorRule[];
}

export interface WebAppRequestErrorsErrorRulesErrorRule {
    /**
     * Capture settings
     */
    captureSettings: outputs.WebAppRequestErrorsErrorRulesErrorRuleCaptureSettings;
    /**
     * Match by errors that have CSP violations
     */
    considerCspViolations: boolean;
    /**
     * Match by errors that have failed image requests
     */
    considerFailedImages: boolean;
    /**
     * Match by error code
     */
    errorCodes?: string;
    /**
     * Filter settings
     */
    filterSettings: outputs.WebAppRequestErrorsErrorRulesErrorRuleFilterSettings;
}

export interface WebAppRequestErrorsErrorRulesErrorRuleCaptureSettings {
    /**
     * Capture this error
     */
    capture: boolean;
    /**
     * [View more details](https://dt-url.net/hd580p2k)
     */
    considerForAi?: boolean;
    /**
     * Include error in Apdex calculations
     */
    impactApdex?: boolean;
}

export interface WebAppRequestErrorsErrorRulesErrorRuleFilterSettings {
    /**
     * Possible Values: `BEGINS_WITH`, `CONTAINS`, `ENDS_WITH`, `EQUALS`
     */
    filter?: string;
    /**
     * no documentation available
     */
    url?: string;
}

export interface WebApplicationConversionGoals {
    /**
     * A conversion goal of the application
     */
    goals: outputs.WebApplicationConversionGoalsGoal[];
}

export interface WebApplicationConversionGoalsGoal {
    /**
     * Configuration of a destination-based conversion goal
     */
    destination?: outputs.WebApplicationConversionGoalsGoalDestination;
    /**
     * The ID of conversion goal.
     */
    id: string;
    /**
     * The name of the conversion goal. Valid length within 1 and 50 characters.
     */
    name: string;
    /**
     * The type of the web application. Possible values are `AUTO_INJECTED`, `BROWSER_EXTENSION_INJECTED` and `MANUALLY_INJECTED`
     */
    type?: string;
    /**
     * Configuration of a destination-based conversion goal
     */
    userAction?: outputs.WebApplicationConversionGoalsGoalUserAction;
    /**
     * Configuration of a destination-based conversion goal
     */
    visitDuration?: outputs.WebApplicationConversionGoalsGoalVisitDuration;
    /**
     * Configuration of a destination-based conversion goal
     */
    visitNumAction?: outputs.WebApplicationConversionGoalsGoalVisitNumAction;
}

export interface WebApplicationConversionGoalsGoalDestination {
    /**
     * The match is case-sensitive (`true`) or (`false`)
     */
    caseSensitive?: boolean;
    /**
     * The operator of the match. Possible values are `Begins`, `Contains` and `Ends`.
     */
    matchType?: string;
    /**
     * The path to be reached to hit the conversion goal
     */
    urlOrPath: string;
}

export interface WebApplicationConversionGoalsGoalUserAction {
    /**
     * Type of the action to which the rule applies. Possible values are `Custom`, `Load` and `Xhr`.
     */
    actionType?: string;
    /**
     * The match is case-sensitive (`true`) or (`false`)
     */
    caseSensitive?: boolean;
    /**
     * The type of the entity to which the rule applies. Possible values are `ActionName`, `CssSelector`, `JavaScriptVariable`, `MetaTag`, `PagePath`, `PageTitle`, `PageUrl`, `UrlAnchor` and `XhrUrl`.
     */
    matchEntity?: string;
    /**
     * The operator of the match. Possible values are `Begins`, `Contains` and `Ends`.
     */
    matchType?: string;
    /**
     * The value to be matched to hit the conversion goal
     */
    value?: string;
}

export interface WebApplicationConversionGoalsGoalVisitDuration {
    /**
     * The duration of session to hit the conversion goal, in milliseconds
     */
    duration: number;
}

export interface WebApplicationConversionGoalsGoalVisitNumAction {
    /**
     * The number of user actions to hit the conversion goal
     */
    numUserActions?: number;
}

export interface WebApplicationCustomActionApdexSettings {
    /**
     * Fallback threshold of an XHR action, defining a tolerable user experience, when the configured KPM is not available. Values between 0 and 240000 are allowed.
     */
    frustratingFallbackThreshold: number;
    /**
     * Maximal value of apdex, which is considered as tolerable user experience. Values between 0 and 240000 are allowed.
     */
    frustratingThreshold: number;
    /**
     * no documentation available
     *
     * @deprecated The attribute `threshold` no longer exists in the API schema, please use `toleratedThreshold`, `frustratingThreshold`, `toleratedFallbackThreshold`, and `frustratingFallbackThreshold` instead
     */
    threshold?: number;
    /**
     * Fallback threshold of an XHR action, defining a satisfied user experience, when the configured KPM is not available. Values between 0 and 60000 are allowed.
     */
    toleratedFallbackThreshold: number;
    /**
     * Maximal value of apdex, which is considered as satisfied user experience. Values between 0 and 60000 are allowed.
     */
    toleratedThreshold: number;
}

export interface WebApplicationKeyUserAction {
    /**
     * Configuration of the key user action
     */
    actions: outputs.WebApplicationKeyUserActionAction[];
}

export interface WebApplicationKeyUserActionAction {
    /**
     * The domain where the action is performed.
     */
    domain?: string;
    /**
     * The name of the action
     */
    name: string;
    /**
     * The type of the action. Possible values are `Custom`, `Load` and `Xhr`.
     */
    type: string;
}

export interface WebApplicationLoadActionApdexSettings {
    /**
     * Fallback threshold of an XHR action, defining a tolerable user experience, when the configured KPM is not available. Values between 0 and 240000 are allowed.
     */
    frustratingFallbackThreshold: number;
    /**
     * Maximal value of apdex, which is considered as tolerable user experience. Values between 0 and 240000 are allowed.
     */
    frustratingThreshold: number;
    /**
     * no documentation available
     *
     * @deprecated The attribute `threshold` no longer exists in the API schema, please use `toleratedThreshold`, `frustratingThreshold`, `toleratedFallbackThreshold`, and `frustratingFallbackThreshold` instead
     */
    threshold?: number;
    /**
     * Fallback threshold of an XHR action, defining a satisfied user experience, when the configured KPM is not available. Values between 0 and 60000 are allowed.
     */
    toleratedFallbackThreshold: number;
    /**
     * Maximal value of apdex, which is considered as satisfied user experience. Values between 0 and 60000 are allowed.
     */
    toleratedThreshold: number;
}

export interface WebApplicationMetaDataCaptureSettings {
    /**
     * Java script agent meta data capture settings
     */
    captures?: outputs.WebApplicationMetaDataCaptureSettingsCapture[];
}

export interface WebApplicationMetaDataCaptureSettingsCapture {
    /**
     * The name of the meta data to capture
     */
    capturingName: string;
    /**
     * Name for displaying the captured values in Dynatrace
     */
    name: string;
    /**
     * `true` if this metadata should be captured regardless of the privacy settings, `false` otherwise
     */
    publicMetadata?: boolean;
    /**
     * The type of the meta data to capture. Possible values are `COOKIE`, `CSS_SELECTOR`, `JAVA_SCRIPT_FUNCTION`, `JAVA_SCRIPT_VARIABLE`, `META_TAG` and `QUERY_STRING`.
     */
    type: string;
    /**
     * The unique ID of the meta data to capture
     */
    uniqueId?: number;
    /**
     * `true` if the last captured value should be used for this metadata. By default the first value will be used.
     */
    useLastValue?: boolean;
}

export interface WebApplicationMonitoringSettings {
    /**
     * Add the cross origin = anonymous attribute to capture JavaScript error messages and W3C resource timings
     */
    addCrossOriginAnonymousAttribute: boolean;
    /**
     * Advanced JavaScript tag settings
     */
    advancedJavascriptTagSettings: outputs.WebApplicationMonitoringSettingsAdvancedJavascriptTagSettings;
    /**
     * The name of the angular package
     */
    angularPackageName?: string;
    /**
     * Settings for restricting certain browser type, version, platform and, comparator. It also restricts the mode
     */
    browserRestrictionSettings?: outputs.WebApplicationMonitoringSettingsBrowserRestrictionSettings;
    /**
     * Optimize the value of cache control headers for use with Dynatrace real user monitoring enabled/disabled
     */
    cacheControlHeaderOptimizations?: boolean;
    /**
     * Settings for content capture
     */
    contentCapture: outputs.WebApplicationMonitoringSettingsContentCapture;
    /**
     * Domain for cookie placement. Maximum 150 characters.
     */
    cookiePlacementDomain?: string;
    /**
     * To enable RUM for XHR calls to AWS Lambda, define a regular expression matching these calls, Dynatrace can then automatically add a custom header (`x-dtc`) to each such request to the respective endpoints in AWS.
     */
    correlationHeaderInclusionRegex?: string;
    /**
     * The location to send monitoring data from the JavaScript tag.
     *
     *  Specify either a relative or an absolute URL. If you use an absolute URL, data will be sent using CORS. 
     *
     *  **Required** for auto-injected applications, optional for agentless applications. Maximum 512 characters.
     */
    customConfigurationProperties?: string;
    /**
     * You can exclude some actions from becoming XHR actions.
     *
     * Put a regular expression, matching all the required URLs, here.
     *
     * If noting specified the feature is disabled
     */
    excludeXhrRegex?: string;
    /**
     * `fetch()` request capture enabled/disabled
     */
    fetchRequests?: boolean;
    /**
     * Manage IP address exclusion settings with `dynatrace.WebAppIpAddressExclusion` resource
     */
    ignoreIpAddressRestrictionSettings: boolean;
    /**
     * Possible valures are `CODE_SNIPPET`, `CODE_SNIPPET_ASYNC`, `INLINE_CODE`, `JAVASCRIPT_TAG`, `JAVASCRIPT_TAG_COMPLETE`, `JAVASCRIPT_TAG_SRI`
     */
    injectionMode: string;
    /**
     * Instrumented web or app server.
     */
    instrumentedWebServer?: boolean;
    /**
     * Settings for restricting certain ip addresses and for introducing subnet mask. It also restricts the mode
     */
    ipAddressRestrictionSettings?: outputs.WebApplicationMonitoringSettingsIpAddressRestrictionSettings;
    /**
     * Support of various JavaScript frameworks
     */
    javascriptFrameworkSupport?: outputs.WebApplicationMonitoringSettingsJavascriptFrameworkSupport;
    /**
     * Java script injection rules
     */
    javascriptInjectionRules?: outputs.WebApplicationMonitoringSettingsJavascriptInjectionRules;
    /**
     * Get the JavaScript library file from the CDN. Not supported by agentless applications and assumed to be false for auto-injected applications if omitted.
     */
    libraryFileFromCdn?: boolean;
    /**
     * The location of your application’s custom JavaScript library file. 
     *
     *  If nothing specified the root directory of your web server is used. 
     *
     *  **Required** for auto-injected applications, not supported by agentless applications. Maximum 512 characters.
     */
    libraryFileLocation?: string;
    /**
     * The location to send monitoring data from the JavaScript tag.
     *
     *  Specify either a relative or an absolute URL. If you use an absolute URL, data will be sent using CORS. 
     *
     *  **Required** for auto-injected applications, optional for agentless applications. Maximum 512 characters.
     */
    monitoringDataPath?: string;
    /**
     * Same site cookie attribute
     */
    sameSiteCookieAttribute?: string;
    /**
     * Time duration for the cache settings
     */
    scriptTagCacheDurationInHours: number;
    /**
     * Secure attribute usage for Dynatrace cookies enabled/disabled
     */
    secureCookieAttribute?: boolean;
    /**
     * Path to identify the server’s request ID. Maximum 150 characters.
     */
    serverRequestPathId?: string;
    /**
     * Send beacon data via CORS.
     */
    useCors?: boolean;
    /**
     * `XmlHttpRequest` support enabled/disabled
     */
    xmlHttpRequest?: boolean;
}

export interface WebApplicationMonitoringSettingsAdvancedJavascriptTagSettings {
    /**
     * Additional event handlers and wrappers
     */
    additionalEventHandlers: outputs.WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsAdditionalEventHandlers;
    /**
     * In addition to the event handlers, events called using `addEventListener` or `attachEvent` can be captured. Be careful with this option! Event wrappers can conflict with the JavaScript code on a web page
     */
    eventWrapperSettings?: outputs.WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsEventWrapperSettings;
    /**
     * Global event capture settings
     */
    globalEventCaptureSettings?: outputs.WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsGlobalEventCaptureSettings;
    /**
     * Instrumentation of unsupported Ajax frameworks enabled/disabled
     */
    instrumentUnsupportedAjaxFrameworks?: boolean;
    /**
     * Maximum character length for action names. Valid values range from 5 to 10000.
     */
    maxActionNameLength: number;
    /**
     * Maximum number of errors to be captured per page. Valid values range from 0 to 50.
     */
    maxErrorsToCapture: number;
    /**
     * Proxy wrapper enabled/disabled
     */
    proxyWrapperEnabled?: boolean;
    /**
     * Additional special characters that are to be escaped using non-alphanumeric characters in HTML escape format. Maximum length 30 character. Allowed characters are `^`, `\`, `<` and `>`.
     */
    specialCharactersToEscape?: string;
    /**
     * Send the beacon signal as a synchronous XMLHttpRequest using Firefox enabled/disabled
     */
    syncBeaconFirefox?: boolean;
    /**
     * Send the beacon signal as a synchronous XMLHttpRequest using Internet Explorer enabled/disabled
     */
    syncBeaconInternetExplorer?: boolean;
    /**
     * User action name attribute
     */
    userActionNameAttribute?: string;
}

export interface WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsAdditionalEventHandlers {
    /**
     * Blur event handler enabled/disabled
     */
    blur?: boolean;
    /**
     * Change event handler enabled/disabled
     */
    change?: boolean;
    /**
     * Click event handler enabled/disabled
     */
    click?: boolean;
    /**
     * Max. number of DOM nodes to instrument. Valid values range from 0 to 100000.
     */
    maxDomNodes: number;
    /**
     * Mouseup event handler enabled/disabled
     */
    mouseup?: boolean;
    /**
     * toString method enabled/disabled
     */
    toStringMethod?: boolean;
    /**
     * Use mouseup event for clicks enabled/disabled
     */
    useMouseUpEventForClicks?: boolean;
}

export interface WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsEventWrapperSettings {
    /**
     * Blur enabled/disabled
     */
    blur?: boolean;
    /**
     * Change enabled/disabled
     */
    change?: boolean;
    /**
     * Click enabled/disabled
     */
    click?: boolean;
    /**
     * MouseUp enabled/disabled
     */
    mouseup?: boolean;
    /**
     * TouchEnd enabled/disabled
     */
    touchEnd?: boolean;
    /**
     * TouchStart enabled/disabled
     */
    touchStart?: boolean;
}

export interface WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsGlobalEventCaptureSettings {
    /**
     * Additional events to be captured globally as user input.
     */
    additionalEventCapturedAsUserInput?: string;
    /**
     * Change enabled/disabled
     */
    change?: boolean;
    /**
     * Click enabled/disabled
     */
    click?: boolean;
    /**
     * DoubleClick enabled/disabled
     */
    doubleclick?: boolean;
    /**
     * KeyDown enabled/disabled
     */
    keydown?: boolean;
    /**
     * KeyUp enabled/disabled
     */
    keyup?: boolean;
    /**
     * MouseDown enabled/disabled
     */
    mousedown?: boolean;
    /**
     * MouseUp enabled/disabled
     */
    mouseup?: boolean;
    /**
     * Scroll enabled/disabled
     */
    scroll?: boolean;
    /**
     * TouchEnd enabled/disabled
     */
    touchEnd?: boolean;
    /**
     * TouchStart enabled/disabled
     */
    touchStart?: boolean;
}

export interface WebApplicationMonitoringSettingsBrowserRestrictionSettings {
    /**
     * The mode of the list of browser restrictions. Possible values area `EXCLUDE` and `INCLUDE`.
     */
    mode: string;
    /**
     * A list of browser restrictions
     */
    restrictions?: outputs.WebApplicationMonitoringSettingsBrowserRestrictionSettingsRestrictions;
}

export interface WebApplicationMonitoringSettingsBrowserRestrictionSettingsRestrictions {
    /**
     * Browser exclusion rules for the browsers that are to be excluded
     */
    restrictions: outputs.WebApplicationMonitoringSettingsBrowserRestrictionSettingsRestrictionsRestriction[];
}

export interface WebApplicationMonitoringSettingsBrowserRestrictionSettingsRestrictionsRestriction {
    /**
     * The type of the browser that is used. Possible values are `ANDROID_WEBKIT`, `BOTS_SPIDERS`, `CHROME`, `EDGE`, `FIREFOX`, `INTERNET_EXPLORER,`OPERA`and`SAFARI`
     */
    browserType: string;
    /**
     * The version of the browser that is used
     */
    browserVersion?: string;
    /**
     * No documentation available. Possible values are `EQUALS`, `GREATER_THAN_OR_EQUAL` and `LOWER_THAN_OR_EQUAL`.
     */
    comparator?: string;
    /**
     * The platform on which the browser is being used. Possible values are `ALL`, `DESKTOP` and `MOBILE`
     */
    platform?: string;
}

export interface WebApplicationMonitoringSettingsContentCapture {
    /**
     * JavaScript errors monitoring enabled/disabled
     */
    javascriptErrors?: boolean;
    /**
     * Settings for resource timings capture
     */
    resourceTimingSettings: outputs.WebApplicationMonitoringSettingsContentCaptureResourceTimingSettings;
    /**
     * Settings for timed action capture
     */
    timeoutSettings: outputs.WebApplicationMonitoringSettingsContentCaptureTimeoutSettings;
    /**
     * Visually complete and Speed index support enabled/disabled
     */
    visuallyCompleteAndSpeedIndex?: boolean;
    /**
     * Settings for VisuallyComplete
     */
    visuallyCompleteSettings?: outputs.WebApplicationMonitoringSettingsContentCaptureVisuallyCompleteSettings;
}

export interface WebApplicationMonitoringSettingsContentCaptureResourceTimingSettings {
    /**
     * Instrumentation delay for monitoring resource and image resource impact in browsers that don't offer W3C resource timings.
     */
    instrumentationDelay: number;
    /**
     * Timing for JavaScript files and images on non-W3C supported browsers enabled/disabled
     */
    nonW3cResourceTimings?: boolean;
    /**
     * Defines how detailed resource timings are captured.
     *
     * Only effective if **w3cResourceTimings** or **nonW3cResourceTimings** is enabled. Possible values are `CAPTURE_ALL_SUMMARIES`, `CAPTURE_FULL_DETAILS` and `CAPTURE_LIMITED_SUMMARIES`
     */
    resourceTimingCaptureType?: string;
    /**
     * Limits the number of domains for which W3C resource timings are captured.
     *
     * Only effective if **resourceTimingCaptureType** is `CAPTURE_LIMITED_SUMMARIES`. Valid values range from 0 to 50.
     */
    resourceTimingsDomainLimit?: number;
    /**
     * W3C resource timings for third party/CDN enabled/disabled
     */
    w3cResourceTimings?: boolean;
}

export interface WebApplicationMonitoringSettingsContentCaptureTimeoutSettings {
    /**
     * Defines how deep temporary actions may cascade. 0 disables temporary actions completely. Recommended value if enabled is 3
     */
    temporaryActionLimit: number;
    /**
     * The total timeout of all cascaded timeouts that should still be able to create a temporary action
     */
    temporaryActionTotalTimeout: number;
    /**
     * Timed action support enabled/disabled.
     */
    timedActionSupport?: boolean;
}

export interface WebApplicationMonitoringSettingsContentCaptureVisuallyCompleteSettings {
    /**
     * A RegularExpression used to exclude images and iframes from being detected by the VC module
     */
    excludeUrlRegex?: string;
    /**
     * Query selector for mutation nodes to ignore in VC and SI calculation
     */
    ignoredMutationsList?: string;
    /**
     * The time in ms the VC module waits for no mutations happening on the page after the load action. Defaults to 1000. Valid values range from 0 to 30000.
     */
    inactivityTimeout?: number;
    /**
     * Determines the time in ms VC waits after an action closes to start calculation. Defaults to 50. Valid values range from 0 to 5000.
     */
    mutationTimeout?: number;
    /**
     * Minimum visible area in pixels of elements to be counted towards VC and SI. Defaults to 50. Valid values range from 0 to 10000.
     */
    threshold?: number;
}

export interface WebApplicationMonitoringSettingsIpAddressRestrictionSettings {
    /**
     * The mode of the list of ip address restrictions. Possible values area `EXCLUDE` and `INCLUDE`.
     */
    mode: string;
    /**
     * The IP addresses or the IP address ranges to be mapped to the location
     */
    restrictions?: outputs.WebApplicationMonitoringSettingsIpAddressRestrictionSettingsRestrictions;
}

export interface WebApplicationMonitoringSettingsIpAddressRestrictionSettingsRestrictions {
    /**
     * The IP address or the IP address range to be mapped to the location
     */
    ranges: outputs.WebApplicationMonitoringSettingsIpAddressRestrictionSettingsRestrictionsRange[];
}

export interface WebApplicationMonitoringSettingsIpAddressRestrictionSettingsRestrictionsRange {
    /**
     * The IP address to be mapped.
     */
    address: string;
    /**
     * The **to** address of the IP address range.
     */
    addressTo?: string;
    /**
     * The subnet mask of the IP address range. Valid values range from 0 to 128.
     */
    subnetMask?: number;
}

export interface WebApplicationMonitoringSettingsJavascriptFrameworkSupport {
    /**
     * ActiveXObject support enabled/disabled
     */
    activeXObject?: boolean;
    /**
     * AngularJS and Angular support enabled/disabled
     */
    angular?: boolean;
    /**
     * Dojo support enabled/disabled
     */
    dojo?: boolean;
    /**
     * ExtJS, Sencha Touch support enabled/disabled
     */
    extjs?: boolean;
    /**
     * ICEfaces support enabled/disabled
     */
    icefaces?: boolean;
    /**
     * jQuery, Backbone.js support enabled/disabled
     */
    jquery?: boolean;
    /**
     * MooTools support enabled/disabled
     */
    mooTools?: boolean;
    /**
     * Prototype support enabled/disabled
     */
    prototype?: boolean;
}

export interface WebApplicationMonitoringSettingsJavascriptInjectionRules {
    /**
     * Java script injection rule
     */
    rules: outputs.WebApplicationMonitoringSettingsJavascriptInjectionRulesRule[];
}

export interface WebApplicationMonitoringSettingsJavascriptInjectionRulesRule {
    /**
     * `fetch()` request capture enabled/disabled
     */
    enabled?: boolean;
    /**
     * The HTML pattern of the java script injection
     */
    htmlPattern?: string;
    /**
     * The url rule of the java script injection. Possible values are `AFTER_SPECIFIC_HTML`, `AUTOMATIC_INJECTION`, `BEFORE_SPECIFIC_HTML` and `DO_NOT_INJECT`.
     */
    rule: string;
    /**
     * The target against which the rule of the java script injection should be matched. Possible values are `PAGE_QUERY` and `URL`.
     */
    target?: string;
    /**
     * The url operator of the java script injection. Possible values are `ALL_PAGES`, `CONTAINS`, `ENDS_WITH`, `EQUALS` and `STARTS_WITH`.
     */
    urlOperator: string;
    /**
     * The url pattern of the java script injection
     */
    urlPattern?: string;
}

export interface WebApplicationSessionReplayConfig {
    /**
     * (Field has overlap with `dynatrace.WebAppEnablement`) Session replay sampling rating in percent
     */
    costControlPercentage: number;
    /**
     * (Field has overlap with `dynatrace.SessionReplayResourceCapture`) A list of URLs to be excluded from CSS resource capturing
     */
    cssResourceCapturingExclusionRules?: string[];
    /**
     * (Field has overlap with `dynatrace.SessionReplayResourceCapture`) Capture (`true`) or don't capture (`false`) CSS resources from the session
     */
    enableCssResourceCapturing?: boolean;
    /**
     * (Field has overlap with `dynatrace.WebAppEnablement`) SessionReplay Enabled/Disabled
     */
    enabled?: boolean;
}

export interface WebApplicationUserActionAndSessionProperties {
    /**
     * User action and session properties settings
     */
    properties?: outputs.WebApplicationUserActionAndSessionPropertiesProperty[];
}

export interface WebApplicationUserActionAndSessionPropertiesProperty {
    /**
     * The aggregation type of the property.
     */
    aggregation?: string;
    /**
     * The cleanup rule of the property. 
     *
     * Defines how to extract the data you need from a string value. Specify the [regular expression](https://dt-url.net/k9e0iaq) for the data you need there
     */
    cleanupRule?: string;
    /**
     * The display name of the property
     */
    displayName?: string;
    /**
     * Unique id among all userTags and properties of this application
     */
    id: number;
    /**
     * If `true`, the value of this property will always be stored in lower case. Defaults to `false`.
     */
    ignoreCase?: boolean;
    /**
     * Key of the property
     */
    key: string;
    /**
     * If the `type` is `LONG_STRING`, the max length for this property. Must be a multiple of `100`. Defaults to `200`. Maximum is `1000`.
     */
    longStringLength?: number;
    /**
     * If the origin is `META_DATA`, metaData id of the property
     */
    metadataId?: number;
    /**
     * The origin of the property. Possible values are `JAVASCRIPT_API`, `META_DATA` and `SERVER_SIDE_REQUEST_ATTRIBUTE`.
     */
    origin: string;
    /**
     * The ID of the request attribute. 
     *
     * Only applicable when the **origin** is set to `SERVER_SIDE_REQUEST_ATTRIBUTE`
     */
    serverSideRequestAttribute?: string;
    /**
     * If `true`, the property is stored as a session property
     */
    storeAsSessionProperty?: boolean;
    /**
     * If `true`, the property is stored as a user action property
     */
    storeAsUserActionProperty?: boolean;
    /**
     * The data type of the property. Possible values are `DATE`, `DOUBLE`, `LONG`, `LONG_STRING` and `STRING`.
     */
    type: string;
}

export interface WebApplicationUserActionNamingSettings {
    /**
     * User action naming rules for custom actions
     */
    customActionNamingRules?: outputs.WebApplicationUserActionNamingSettingsCustomActionNamingRules;
    /**
     * Case insensitive naming
     */
    ignoreCase?: boolean;
    /**
     * User action naming rules for loading actions
     */
    loadActionNamingRules?: outputs.WebApplicationUserActionNamingSettingsLoadActionNamingRules;
    /**
     * User action placeholders
     */
    placeholders?: outputs.WebApplicationUserActionNamingSettingsPlaceholders;
    /**
     * User action naming rules for custom actions. If not specified Dynatrace assumes `__sid`, `cfid`, `cftoken`, `phpsessid` and `sid`.
     */
    queryParameterCleanups: string[];
    /**
     * Deactivate this setting if different domains should not result in separate user actions
     */
    splitUserActionsByDomain?: boolean;
    /**
     * First load action found under an XHR action should be used when true. Else the deepest one under the xhr action is used
     */
    useFirstDetectedLoadAction?: boolean;
    /**
     * User action naming rules for XHR actions
     */
    xhrActionNamingRules?: outputs.WebApplicationUserActionNamingSettingsXhrActionNamingRules;
}

export interface WebApplicationUserActionNamingSettingsCustomActionNamingRules {
    /**
     * The settings of naming rule
     */
    rules: outputs.WebApplicationUserActionNamingSettingsCustomActionNamingRulesRule[];
}

export interface WebApplicationUserActionNamingSettingsCustomActionNamingRulesRule {
    /**
     * Defines the conditions when the naming rule should apply
     */
    conditions?: outputs.WebApplicationUserActionNamingSettingsCustomActionNamingRulesRuleConditions;
    /**
     * Naming pattern. Use Curly brackets `{}` to select placeholders
     */
    template: string;
    /**
     * If set to `true` the conditions will be connected by logical OR instead of logical AND
     */
    useOrConditions?: boolean;
}

export interface WebApplicationUserActionNamingSettingsCustomActionNamingRulesRuleConditions {
    /**
     * Defines the conditions when the naming rule should apply
     */
    conditions: outputs.WebApplicationUserActionNamingSettingsCustomActionNamingRulesRuleConditionsCondition[];
}

export interface WebApplicationUserActionNamingSettingsCustomActionNamingRulesRuleConditionsCondition {
    /**
     * Must be a defined placeholder wrapped in curly braces
     */
    operand1: string;
    /**
     * Must be null if operator is `IS_EMPTY`, a regex if operator is `MATCHES_REGULAR_ERPRESSION`. In all other cases the value can be a freetext or a placeholder wrapped in curly braces
     */
    operand2?: string;
    /**
     * The operator of the condition. Possible values are `CONTAINS`, `ENDS_WITH`, `EQUALS`, `IS_EMPTY`, `IS_NOT_EMPTY`, `MATCHES_REGULAR_EXPRESSION`, `NOT_CONTAINS`, `NOT_ENDS_WITH`, `NOT_EQUALS`, `NOT_MATCHES_REGULAR_EXPRESSION`, `NOT_STARTS_WITH` and `STARTS_WITH`.
     */
    operator: string;
}

export interface WebApplicationUserActionNamingSettingsLoadActionNamingRules {
    /**
     * The settings of naming rule
     */
    rules: outputs.WebApplicationUserActionNamingSettingsLoadActionNamingRulesRule[];
}

export interface WebApplicationUserActionNamingSettingsLoadActionNamingRulesRule {
    /**
     * Defines the conditions when the naming rule should apply
     */
    conditions?: outputs.WebApplicationUserActionNamingSettingsLoadActionNamingRulesRuleConditions;
    /**
     * Naming pattern. Use Curly brackets `{}` to select placeholders
     */
    template: string;
    /**
     * If set to `true` the conditions will be connected by logical OR instead of logical AND
     */
    useOrConditions?: boolean;
}

export interface WebApplicationUserActionNamingSettingsLoadActionNamingRulesRuleConditions {
    /**
     * Defines the conditions when the naming rule should apply
     */
    conditions: outputs.WebApplicationUserActionNamingSettingsLoadActionNamingRulesRuleConditionsCondition[];
}

export interface WebApplicationUserActionNamingSettingsLoadActionNamingRulesRuleConditionsCondition {
    /**
     * Must be a defined placeholder wrapped in curly braces
     */
    operand1: string;
    /**
     * Must be null if operator is `IS_EMPTY`, a regex if operator is `MATCHES_REGULAR_ERPRESSION`. In all other cases the value can be a freetext or a placeholder wrapped in curly braces
     */
    operand2?: string;
    /**
     * The operator of the condition. Possible values are `CONTAINS`, `ENDS_WITH`, `EQUALS`, `IS_EMPTY`, `IS_NOT_EMPTY`, `MATCHES_REGULAR_EXPRESSION`, `NOT_CONTAINS`, `NOT_ENDS_WITH`, `NOT_EQUALS`, `NOT_MATCHES_REGULAR_EXPRESSION`, `NOT_STARTS_WITH` and `STARTS_WITH`.
     */
    operator: string;
}

export interface WebApplicationUserActionNamingSettingsPlaceholders {
    /**
     * User action placeholders
     */
    placeholders: outputs.WebApplicationUserActionNamingSettingsPlaceholdersPlaceholder[];
}

export interface WebApplicationUserActionNamingSettingsPlaceholdersPlaceholder {
    /**
     * The input for the place holder. Possible values are `ELEMENT_IDENTIFIER`, `INPUT_TYPE`, `METADATA`, `PAGE_TITLE`, `PAGE_URL`, `SOURCE_URL`, `TOP_XHR_URL` and `XHR_URL`
     */
    input: string;
    /**
     * The ID of the metadata
     */
    metadataId?: number;
    /**
     * Placeholder name. Valid length needs to be between 1 and 50 characters
     */
    name: string;
    /**
     * The part to process. Possible values are `ALL`, `ANCHOR` and `PATH`
     */
    processingPart: string;
    /**
     * The processing step settings
     */
    processingSteps?: outputs.WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderProcessingSteps;
    /**
     * Use the element identifier that was selected by Dynatrace
     */
    useGuessedElementIdentifier?: boolean;
}

export interface WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderProcessingSteps {
    /**
     * The processing step
     */
    steps: outputs.WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderProcessingStepsStep[];
}

export interface WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderProcessingStepsStep {
    /**
     * If set to `true`: Returns the input if `patternBefore` or `patternAfter` cannot be found and the `type` is `SUBSTRING`. Returns the input if `regularExpression` doesn't match and `type` is `EXTRACT_BY_REGULAR_EXPRESSION`.
     */
    fallbackToInput?: boolean;
    /**
     * The pattern after the required value. It will be removed.
     */
    patternAfter?: string;
    /**
     * The required occurrence of **patternAfter**. Possible values are `FIRST` and `LAST`.
     */
    patternAfterSearchType?: string;
    /**
     * The pattern before the required value. It will be removed.
     */
    patternBefore?: string;
    /**
     * The required occurrence of **patternBefore**. Possible values are `FIRST` and `LAST`.
     */
    patternBeforeSearchType?: string;
    /**
     * The pattern to be replaced. 
     *
     *  Only applicable if the `type` is `REPLACE_WITH_PATTERN`.
     */
    patternToReplace?: string;
    /**
     * A regular expression for the string to be extracted or replaced. Only applicable if the `type` is `EXTRACT_BY_REGULAR_EXPRESSION` or `REPLACE_WITH_REGULAR_EXPRESSION`.
     */
    regularExpression?: string;
    /**
     * Replacement for the original value
     */
    replacement?: string;
    /**
     * An action to be taken by the processing:
     */
    type: string;
}

export interface WebApplicationUserActionNamingSettingsXhrActionNamingRules {
    /**
     * The settings of naming rule
     */
    rules: outputs.WebApplicationUserActionNamingSettingsXhrActionNamingRulesRule[];
}

export interface WebApplicationUserActionNamingSettingsXhrActionNamingRulesRule {
    /**
     * Defines the conditions when the naming rule should apply
     */
    conditions?: outputs.WebApplicationUserActionNamingSettingsXhrActionNamingRulesRuleConditions;
    /**
     * Naming pattern. Use Curly brackets `{}` to select placeholders
     */
    template: string;
    /**
     * If set to `true` the conditions will be connected by logical OR instead of logical AND
     */
    useOrConditions?: boolean;
}

export interface WebApplicationUserActionNamingSettingsXhrActionNamingRulesRuleConditions {
    /**
     * Defines the conditions when the naming rule should apply
     */
    conditions: outputs.WebApplicationUserActionNamingSettingsXhrActionNamingRulesRuleConditionsCondition[];
}

export interface WebApplicationUserActionNamingSettingsXhrActionNamingRulesRuleConditionsCondition {
    /**
     * Must be a defined placeholder wrapped in curly braces
     */
    operand1: string;
    /**
     * Must be null if operator is `IS_EMPTY`, a regex if operator is `MATCHES_REGULAR_ERPRESSION`. In all other cases the value can be a freetext or a placeholder wrapped in curly braces
     */
    operand2?: string;
    /**
     * The operator of the condition. Possible values are `CONTAINS`, `ENDS_WITH`, `EQUALS`, `IS_EMPTY`, `IS_NOT_EMPTY`, `MATCHES_REGULAR_EXPRESSION`, `NOT_CONTAINS`, `NOT_ENDS_WITH`, `NOT_EQUALS`, `NOT_MATCHES_REGULAR_EXPRESSION`, `NOT_STARTS_WITH` and `STARTS_WITH`.
     */
    operator: string;
}

export interface WebApplicationUserTags {
    /**
     * User tag settings
     */
    tags: outputs.WebApplicationUserTagsTag[];
}

export interface WebApplicationUserTagsTag {
    /**
     * Cleanup rule expression of the userTag
     */
    cleanupRule?: string;
    id?: number;
    /**
     * If `true`, the value of this tag will always be stored in lower case. Defaults to `false`.
     */
    ignoreCase?: boolean;
    /**
     * If it's of type metaData, metaData id of the userTag
     */
    metadataId?: number;
    /**
     * The ID of the RrequestAttribute for the userTag
     */
    serverSideRequestAttribute?: string;
    /**
     * A unique ID among all userTags and properties of this application. Minimum value is 1.
     */
    uniqueId: number;
}

export interface WebApplicationWaterfallSettings {
    /**
     * Warn about resources with a lower browser cache rate above *X*%. Values between 1 and 100 are allowed.
     */
    resourceBrowserCachingThreshold: number;
    /**
     * Warn about resources larger than *X* bytes. Values between 0 and 99999000 are allowed.
     */
    resourcesThreshold: number;
    /**
     * Warn about slow CDN resources with a response time above *X* ms. Values between 0 and 99999000 are allowed.
     */
    slowCndResourcesThreshold: number;
    /**
     * Warn about slow 1st party resources with a response time above *X* ms. Values between 0 and 99999000 are allowed.
     */
    slowFirstPartyResourcesThreshold: number;
    /**
     * Warn about slow 3rd party resources with a response time above *X* ms. Values between 0 and 99999000 are allowed.
     */
    slowThirdPartyResourcesThreshold: number;
    /**
     * Warn if Speed index exceeds *X* % of Visually complete. Values between 1 and 99 are allowed.
     */
    speedIndexVisuallyCompleteRatioThreshold: number;
    /**
     * Warn about uncompressed resources larger than *X* bytes. Values between 0 and 99999 are allowed.
     */
    uncompressedResourcesThreshold: number;
}

export interface WebApplicationXhrActionApdexSettings {
    /**
     * Fallback threshold of an XHR action, defining a tolerable user experience, when the configured KPM is not available. Values between 0 and 240000 are allowed.
     */
    frustratingFallbackThreshold: number;
    /**
     * Maximal value of apdex, which is considered as tolerable user experience. Values between 0 and 240000 are allowed.
     */
    frustratingThreshold: number;
    /**
     * no documentation available
     *
     * @deprecated The attribute `threshold` no longer exists in the API schema, please use `toleratedThreshold`, `frustratingThreshold`, `toleratedFallbackThreshold`, and `frustratingFallbackThreshold` instead
     */
    threshold?: number;
    /**
     * Fallback threshold of an XHR action, defining a satisfied user experience, when the configured KPM is not available. Values between 0 and 60000 are allowed.
     */
    toleratedFallbackThreshold: number;
    /**
     * Maximal value of apdex, which is considered as satisfied user experience. Values between 0 and 60000 are allowed.
     */
    toleratedThreshold: number;
}

export interface WebhookNotificationHeaders {
    /**
     * An additional HTTP Header to include when sending requests
     */
    headers: outputs.WebhookNotificationHeadersHeader[];
}

export interface WebhookNotificationHeadersHeader {
    /**
     * The name of the HTTP header
     */
    name: string;
    /**
     * The value of the HTTP header as a sensitive property. May contain an empty value. `secretValue` and `value` are mutually exclusive. Only one of those two is allowed to be specified.
     */
    secretValue?: string;
    /**
     * The value of the HTTP header. May contain an empty value. `secretValue` and `value` are mutually exclusive. Only one of those two is allowed to be specified.
     */
    value?: string;
}

export interface WebhookNotificationOauth2Credentials {
    /**
     * Access token URL
     */
    accessTokenUrl: string;
    /**
     * If false, the client credentials are included in the HTTP request body.
     */
    authenticateViaRequestHeader?: boolean;
    /**
     * Client ID
     */
    clientId: string;
    /**
     * Client secret
     */
    clientSecret: string;
    /**
     * The scope of access you are requesting
     */
    scope?: string;
}

export interface XmattersNotificationHeaders {
    /**
     * An additional HTTP Header to include when sending requests
     */
    headers: outputs.XmattersNotificationHeadersHeader[];
}

export interface XmattersNotificationHeadersHeader {
    /**
     * The name of the HTTP header
     */
    name: string;
    /**
     * The value of the HTTP header as a sensitive property. May contain an empty value. `secretValue` and `value` are mutually exclusive. Only one of those two is allowed to be specified.
     */
    secretValue?: string;
    /**
     * The value of the HTTP header. May contain an empty value. `secretValue` and `value` are mutually exclusive. Only one of those two is allowed to be specified.
     */
    value?: string;
}

