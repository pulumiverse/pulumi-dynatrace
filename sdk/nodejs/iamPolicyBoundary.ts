// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * > **Dynatrace SaaS only**
 *
 * > To utilize this resource, please define the environment variables `DT_CLIENT_ID`, `DT_CLIENT_SECRET`, `DT_ACCOUNT_ID` with an OAuth client including the following permissions: **Allow IAM policy configuration for environments** (`iam-policies-management`) and **View environments** (`account-env-read`).
 *
 * > This resource is excluded by default in the export utility, please explicitly specify the resource to retrieve existing configuration.
 *
 * ## Dynatrace Documentation
 *
 * - Dynatrace IAM Group Permissions - https://docs.dynatrace.com/docs/manage/identity-access-management/permission-management/manage-user-permissions-policies
 *
 * - Settings API - https://www.dynatrace.com/support/help/how-to-use-dynatrace/user-management-and-sso/manage-groups-and-permissions/iam/iam-getting-started
 *
 * ## Resource Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dynatrace from "@pulumiverse/dynatrace";
 *
 * const thisIamPolicyBoundary = new dynatrace.IamPolicyBoundary("thisIamPolicyBoundary", {query: "environment:management-zone startsWith \"[Foo]\";"});
 * const thisIamGroup = new dynatrace.IamGroup("thisIamGroup", {});
 * const thisIamPolicy = new dynatrace.IamPolicy("thisIamPolicy", {
 *     account: "########-####-####-####-############",
 *     statementQuery: "ALLOW settings:objects:read, settings:schemas:read WHERE settings:schemaId = \"#########\";",
 * });
 * const thisIamPolicyBindingsV2 = new dynatrace.IamPolicyBindingsV2("thisIamPolicyBindingsV2", {
 *     environment: "########",
 *     group: thisIamGroup.id,
 *     policies: [{
 *         id: thisIamPolicy.id,
 *         boundaries: [thisIamPolicyBoundary.id],
 *     }],
 * });
 * ```
 */
export class IamPolicyBoundary extends pulumi.CustomResource {
    /**
     * Get an existing IamPolicyBoundary resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IamPolicyBoundaryState, opts?: pulumi.CustomResourceOptions): IamPolicyBoundary {
        return new IamPolicyBoundary(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/iamPolicyBoundary:IamPolicyBoundary';

    /**
     * Returns true if the given object is an instance of IamPolicyBoundary.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IamPolicyBoundary {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IamPolicyBoundary.__pulumiType;
    }

    /**
     * The name of the policy
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The boundary query
     */
    public readonly query!: pulumi.Output<string>;

    /**
     * Create a IamPolicyBoundary resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IamPolicyBoundaryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IamPolicyBoundaryArgs | IamPolicyBoundaryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IamPolicyBoundaryState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["query"] = state ? state.query : undefined;
        } else {
            const args = argsOrState as IamPolicyBoundaryArgs | undefined;
            if ((!args || args.query === undefined) && !opts.urn) {
                throw new Error("Missing required property 'query'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["query"] = args ? args.query : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IamPolicyBoundary.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IamPolicyBoundary resources.
 */
export interface IamPolicyBoundaryState {
    /**
     * The name of the policy
     */
    name?: pulumi.Input<string>;
    /**
     * The boundary query
     */
    query?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IamPolicyBoundary resource.
 */
export interface IamPolicyBoundaryArgs {
    /**
     * The name of the policy
     */
    name?: pulumi.Input<string>;
    /**
     * The boundary query
     */
    query: pulumi.Input<string>;
}
