// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Alerting extends pulumi.CustomResource {
    /**
     * Get an existing Alerting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlertingState, opts?: pulumi.CustomResourceOptions): Alerting {
        return new Alerting(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/alerting:Alerting';

    /**
     * Returns true if the given object is an instance of Alerting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Alerting {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Alerting.__pulumiType;
    }

    /**
     * The list of event filters.  For all filters that are *negated* inside of these event filters, that is all `Predefined` as well as `Custom` (Title and/or Description) ones the AND logic applies. For all *non-negated* ones the OR logic applies. Between these two groups, negated and non-negated, the AND logic applies.  If you specify both severity rule and event filter, the AND logic applies
     */
    public readonly filters!: pulumi.Output<outputs.AlertingFilters | undefined>;
    /**
     * The ID of this setting when referred to by the Config REST API V1
     */
    public readonly legacyId!: pulumi.Output<string>;
    /**
     * Entities which are part of the configured management zones will match this alerting profile. It is recommended to use manual tags instead.
     */
    public readonly managementZone!: pulumi.Output<string | undefined>;
    /**
     * The name of the alerting profile, displayed in the UI
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
     */
    public readonly rules!: pulumi.Output<outputs.AlertingRules | undefined>;

    /**
     * Create a Alerting resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AlertingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlertingArgs | AlertingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlertingState | undefined;
            resourceInputs["filters"] = state ? state.filters : undefined;
            resourceInputs["legacyId"] = state ? state.legacyId : undefined;
            resourceInputs["managementZone"] = state ? state.managementZone : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
        } else {
            const args = argsOrState as AlertingArgs | undefined;
            resourceInputs["filters"] = args ? args.filters : undefined;
            resourceInputs["legacyId"] = args ? args.legacyId : undefined;
            resourceInputs["managementZone"] = args ? args.managementZone : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Alerting.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Alerting resources.
 */
export interface AlertingState {
    /**
     * The list of event filters.  For all filters that are *negated* inside of these event filters, that is all `Predefined` as well as `Custom` (Title and/or Description) ones the AND logic applies. For all *non-negated* ones the OR logic applies. Between these two groups, negated and non-negated, the AND logic applies.  If you specify both severity rule and event filter, the AND logic applies
     */
    filters?: pulumi.Input<inputs.AlertingFilters>;
    /**
     * The ID of this setting when referred to by the Config REST API V1
     */
    legacyId?: pulumi.Input<string>;
    /**
     * Entities which are part of the configured management zones will match this alerting profile. It is recommended to use manual tags instead.
     */
    managementZone?: pulumi.Input<string>;
    /**
     * The name of the alerting profile, displayed in the UI
     */
    name?: pulumi.Input<string>;
    /**
     * A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
     */
    rules?: pulumi.Input<inputs.AlertingRules>;
}

/**
 * The set of arguments for constructing a Alerting resource.
 */
export interface AlertingArgs {
    /**
     * The list of event filters.  For all filters that are *negated* inside of these event filters, that is all `Predefined` as well as `Custom` (Title and/or Description) ones the AND logic applies. For all *non-negated* ones the OR logic applies. Between these two groups, negated and non-negated, the AND logic applies.  If you specify both severity rule and event filter, the AND logic applies
     */
    filters?: pulumi.Input<inputs.AlertingFilters>;
    /**
     * The ID of this setting when referred to by the Config REST API V1
     */
    legacyId?: pulumi.Input<string>;
    /**
     * Entities which are part of the configured management zones will match this alerting profile. It is recommended to use manual tags instead.
     */
    managementZone?: pulumi.Input<string>;
    /**
     * The name of the alerting profile, displayed in the UI
     */
    name?: pulumi.Input<string>;
    /**
     * A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
     */
    rules?: pulumi.Input<inputs.AlertingRules>;
}
