// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class WebAppKeyPerformanceXhr extends pulumi.CustomResource {
    /**
     * Get an existing WebAppKeyPerformanceXhr resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WebAppKeyPerformanceXhrState, opts?: pulumi.CustomResourceOptions): WebAppKeyPerformanceXhr {
        return new WebAppKeyPerformanceXhr(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/webAppKeyPerformanceXhr:WebAppKeyPerformanceXhr';

    /**
     * Returns true if the given object is an instance of WebAppKeyPerformanceXhr.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WebAppKeyPerformanceXhr {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WebAppKeyPerformanceXhr.__pulumiType;
    }

    /**
     * If the selected key performance metric is not detected, the **User action duration** metric is used instead.
     */
    declare public readonly fallbackThresholds: pulumi.Output<outputs.WebAppKeyPerformanceXhrFallbackThresholds | undefined>;
    /**
     * Possible Values: `RESPONSE_END`, `RESPONSE_START`, `USER_ACTION_DURATION`, `VISUALLY_COMPLETE`
     */
    declare public readonly kpm: pulumi.Output<string>;
    /**
     * The scope of this setting (APPLICATION_METHOD, APPLICATION)
     */
    declare public readonly scope: pulumi.Output<string>;
    /**
     * Set the Tolerating and Frustrated performance thresholds for this action type.
     */
    declare public readonly thresholds: pulumi.Output<outputs.WebAppKeyPerformanceXhrThresholds>;

    /**
     * Create a WebAppKeyPerformanceXhr resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WebAppKeyPerformanceXhrArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WebAppKeyPerformanceXhrArgs | WebAppKeyPerformanceXhrState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WebAppKeyPerformanceXhrState | undefined;
            resourceInputs["fallbackThresholds"] = state?.fallbackThresholds;
            resourceInputs["kpm"] = state?.kpm;
            resourceInputs["scope"] = state?.scope;
            resourceInputs["thresholds"] = state?.thresholds;
        } else {
            const args = argsOrState as WebAppKeyPerformanceXhrArgs | undefined;
            if (args?.kpm === undefined && !opts.urn) {
                throw new Error("Missing required property 'kpm'");
            }
            if (args?.scope === undefined && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            if (args?.thresholds === undefined && !opts.urn) {
                throw new Error("Missing required property 'thresholds'");
            }
            resourceInputs["fallbackThresholds"] = args?.fallbackThresholds;
            resourceInputs["kpm"] = args?.kpm;
            resourceInputs["scope"] = args?.scope;
            resourceInputs["thresholds"] = args?.thresholds;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WebAppKeyPerformanceXhr.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WebAppKeyPerformanceXhr resources.
 */
export interface WebAppKeyPerformanceXhrState {
    /**
     * If the selected key performance metric is not detected, the **User action duration** metric is used instead.
     */
    fallbackThresholds?: pulumi.Input<inputs.WebAppKeyPerformanceXhrFallbackThresholds>;
    /**
     * Possible Values: `RESPONSE_END`, `RESPONSE_START`, `USER_ACTION_DURATION`, `VISUALLY_COMPLETE`
     */
    kpm?: pulumi.Input<string>;
    /**
     * The scope of this setting (APPLICATION_METHOD, APPLICATION)
     */
    scope?: pulumi.Input<string>;
    /**
     * Set the Tolerating and Frustrated performance thresholds for this action type.
     */
    thresholds?: pulumi.Input<inputs.WebAppKeyPerformanceXhrThresholds>;
}

/**
 * The set of arguments for constructing a WebAppKeyPerformanceXhr resource.
 */
export interface WebAppKeyPerformanceXhrArgs {
    /**
     * If the selected key performance metric is not detected, the **User action duration** metric is used instead.
     */
    fallbackThresholds?: pulumi.Input<inputs.WebAppKeyPerformanceXhrFallbackThresholds>;
    /**
     * Possible Values: `RESPONSE_END`, `RESPONSE_START`, `USER_ACTION_DURATION`, `VISUALLY_COMPLETE`
     */
    kpm: pulumi.Input<string>;
    /**
     * The scope of this setting (APPLICATION_METHOD, APPLICATION)
     */
    scope: pulumi.Input<string>;
    /**
     * Set the Tolerating and Frustrated performance thresholds for this action type.
     */
    thresholds: pulumi.Input<inputs.WebAppKeyPerformanceXhrThresholds>;
}
