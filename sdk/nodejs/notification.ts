// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Notification extends pulumi.CustomResource {
    /**
     * Get an existing Notification resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NotificationState, opts?: pulumi.CustomResourceOptions): Notification {
        return new Notification(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/notification:Notification';

    /**
     * Returns true if the given object is an instance of Notification.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Notification {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Notification.__pulumiType;
    }

    /**
     * Configuration for Ansible Tower Notification
     */
    public readonly ansibleTower!: pulumi.Output<outputs.NotificationAnsibleTower | undefined>;
    /**
     * Configuration for Generic Notification
     */
    public readonly config!: pulumi.Output<outputs.NotificationConfig | undefined>;
    /**
     * Configuration for Email Notification
     */
    public readonly email!: pulumi.Output<outputs.NotificationEmail | undefined>;
    /**
     * Configuration for Jira Notification
     */
    public readonly jira!: pulumi.Output<outputs.NotificationJira | undefined>;
    /**
     * Configuration for OpsGenie Notification
     */
    public readonly opsGenie!: pulumi.Output<outputs.NotificationOpsGenie | undefined>;
    /**
     * Configuration for PagerDuty Notification
     */
    public readonly pagerDuty!: pulumi.Output<outputs.NotificationPagerDuty | undefined>;
    /**
     * Configuration for ServiceNow Notification
     */
    public readonly serviceNow!: pulumi.Output<outputs.NotificationServiceNow | undefined>;
    /**
     * Configuration for Slack Notification
     */
    public readonly slack!: pulumi.Output<outputs.NotificationSlack | undefined>;
    /**
     * Configuration for Trello Notification
     */
    public readonly trello!: pulumi.Output<outputs.NotificationTrello | undefined>;
    /**
     * Configuration for VictorOps Notification
     */
    public readonly victorOps!: pulumi.Output<outputs.NotificationVictorOps | undefined>;
    /**
     * Configuration for WebHook Notification
     */
    public readonly webHook!: pulumi.Output<outputs.NotificationWebHook | undefined>;
    /**
     * Configuration for XMatters Notification
     */
    public readonly xmatters!: pulumi.Output<outputs.NotificationXmatters | undefined>;

    /**
     * Create a Notification resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NotificationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NotificationArgs | NotificationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NotificationState | undefined;
            resourceInputs["ansibleTower"] = state ? state.ansibleTower : undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["jira"] = state ? state.jira : undefined;
            resourceInputs["opsGenie"] = state ? state.opsGenie : undefined;
            resourceInputs["pagerDuty"] = state ? state.pagerDuty : undefined;
            resourceInputs["serviceNow"] = state ? state.serviceNow : undefined;
            resourceInputs["slack"] = state ? state.slack : undefined;
            resourceInputs["trello"] = state ? state.trello : undefined;
            resourceInputs["victorOps"] = state ? state.victorOps : undefined;
            resourceInputs["webHook"] = state ? state.webHook : undefined;
            resourceInputs["xmatters"] = state ? state.xmatters : undefined;
        } else {
            const args = argsOrState as NotificationArgs | undefined;
            resourceInputs["ansibleTower"] = args ? args.ansibleTower : undefined;
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["jira"] = args ? args.jira : undefined;
            resourceInputs["opsGenie"] = args ? args.opsGenie : undefined;
            resourceInputs["pagerDuty"] = args ? args.pagerDuty : undefined;
            resourceInputs["serviceNow"] = args ? args.serviceNow : undefined;
            resourceInputs["slack"] = args ? args.slack : undefined;
            resourceInputs["trello"] = args ? args.trello : undefined;
            resourceInputs["victorOps"] = args ? args.victorOps : undefined;
            resourceInputs["webHook"] = args ? args.webHook : undefined;
            resourceInputs["xmatters"] = args ? args.xmatters : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Notification.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Notification resources.
 */
export interface NotificationState {
    /**
     * Configuration for Ansible Tower Notification
     */
    ansibleTower?: pulumi.Input<inputs.NotificationAnsibleTower>;
    /**
     * Configuration for Generic Notification
     */
    config?: pulumi.Input<inputs.NotificationConfig>;
    /**
     * Configuration for Email Notification
     */
    email?: pulumi.Input<inputs.NotificationEmail>;
    /**
     * Configuration for Jira Notification
     */
    jira?: pulumi.Input<inputs.NotificationJira>;
    /**
     * Configuration for OpsGenie Notification
     */
    opsGenie?: pulumi.Input<inputs.NotificationOpsGenie>;
    /**
     * Configuration for PagerDuty Notification
     */
    pagerDuty?: pulumi.Input<inputs.NotificationPagerDuty>;
    /**
     * Configuration for ServiceNow Notification
     */
    serviceNow?: pulumi.Input<inputs.NotificationServiceNow>;
    /**
     * Configuration for Slack Notification
     */
    slack?: pulumi.Input<inputs.NotificationSlack>;
    /**
     * Configuration for Trello Notification
     */
    trello?: pulumi.Input<inputs.NotificationTrello>;
    /**
     * Configuration for VictorOps Notification
     */
    victorOps?: pulumi.Input<inputs.NotificationVictorOps>;
    /**
     * Configuration for WebHook Notification
     */
    webHook?: pulumi.Input<inputs.NotificationWebHook>;
    /**
     * Configuration for XMatters Notification
     */
    xmatters?: pulumi.Input<inputs.NotificationXmatters>;
}

/**
 * The set of arguments for constructing a Notification resource.
 */
export interface NotificationArgs {
    /**
     * Configuration for Ansible Tower Notification
     */
    ansibleTower?: pulumi.Input<inputs.NotificationAnsibleTower>;
    /**
     * Configuration for Generic Notification
     */
    config?: pulumi.Input<inputs.NotificationConfig>;
    /**
     * Configuration for Email Notification
     */
    email?: pulumi.Input<inputs.NotificationEmail>;
    /**
     * Configuration for Jira Notification
     */
    jira?: pulumi.Input<inputs.NotificationJira>;
    /**
     * Configuration for OpsGenie Notification
     */
    opsGenie?: pulumi.Input<inputs.NotificationOpsGenie>;
    /**
     * Configuration for PagerDuty Notification
     */
    pagerDuty?: pulumi.Input<inputs.NotificationPagerDuty>;
    /**
     * Configuration for ServiceNow Notification
     */
    serviceNow?: pulumi.Input<inputs.NotificationServiceNow>;
    /**
     * Configuration for Slack Notification
     */
    slack?: pulumi.Input<inputs.NotificationSlack>;
    /**
     * Configuration for Trello Notification
     */
    trello?: pulumi.Input<inputs.NotificationTrello>;
    /**
     * Configuration for VictorOps Notification
     */
    victorOps?: pulumi.Input<inputs.NotificationVictorOps>;
    /**
     * Configuration for WebHook Notification
     */
    webHook?: pulumi.Input<inputs.NotificationWebHook>;
    /**
     * Configuration for XMatters Notification
     */
    xmatters?: pulumi.Input<inputs.NotificationXmatters>;
}
