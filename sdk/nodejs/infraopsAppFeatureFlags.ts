// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class InfraopsAppFeatureFlags extends pulumi.CustomResource {
    /**
     * Get an existing InfraopsAppFeatureFlags resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InfraopsAppFeatureFlagsState, opts?: pulumi.CustomResourceOptions): InfraopsAppFeatureFlags {
        return new InfraopsAppFeatureFlags(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/infraopsAppFeatureFlags:InfraopsAppFeatureFlags';

    /**
     * Returns true if the given object is an instance of InfraopsAppFeatureFlags.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InfraopsAppFeatureFlags {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InfraopsAppFeatureFlags.__pulumiType;
    }

    /**
     * State of boolean feature
     */
    public readonly booleanValue!: pulumi.Output<boolean | undefined>;
    /**
     * Name of the feature
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * State of numeric feature
     */
    public readonly numberValue!: pulumi.Output<number | undefined>;
    /**
     * State of textual feature
     */
    public readonly stringValue!: pulumi.Output<string | undefined>;
    /**
     * Possible Values: `Boolean`, `Number`, `String`
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a InfraopsAppFeatureFlags resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InfraopsAppFeatureFlagsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InfraopsAppFeatureFlagsArgs | InfraopsAppFeatureFlagsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InfraopsAppFeatureFlagsState | undefined;
            resourceInputs["booleanValue"] = state ? state.booleanValue : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numberValue"] = state ? state.numberValue : undefined;
            resourceInputs["stringValue"] = state ? state.stringValue : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as InfraopsAppFeatureFlagsArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["booleanValue"] = args ? args.booleanValue : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["numberValue"] = args ? args.numberValue : undefined;
            resourceInputs["stringValue"] = args ? args.stringValue : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InfraopsAppFeatureFlags.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InfraopsAppFeatureFlags resources.
 */
export interface InfraopsAppFeatureFlagsState {
    /**
     * State of boolean feature
     */
    booleanValue?: pulumi.Input<boolean>;
    /**
     * Name of the feature
     */
    name?: pulumi.Input<string>;
    /**
     * State of numeric feature
     */
    numberValue?: pulumi.Input<number>;
    /**
     * State of textual feature
     */
    stringValue?: pulumi.Input<string>;
    /**
     * Possible Values: `Boolean`, `Number`, `String`
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InfraopsAppFeatureFlags resource.
 */
export interface InfraopsAppFeatureFlagsArgs {
    /**
     * State of boolean feature
     */
    booleanValue?: pulumi.Input<boolean>;
    /**
     * Name of the feature
     */
    name?: pulumi.Input<string>;
    /**
     * State of numeric feature
     */
    numberValue?: pulumi.Input<number>;
    /**
     * State of textual feature
     */
    stringValue?: pulumi.Input<string>;
    /**
     * Possible Values: `Boolean`, `Number`, `String`
     */
    type: pulumi.Input<string>;
}
