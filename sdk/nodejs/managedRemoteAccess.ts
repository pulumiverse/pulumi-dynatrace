// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ManagedRemoteAccess extends pulumi.CustomResource {
    /**
     * Get an existing ManagedRemoteAccess resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagedRemoteAccessState, opts?: pulumi.CustomResourceOptions): ManagedRemoteAccess {
        return new ManagedRemoteAccess(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/managedRemoteAccess:ManagedRemoteAccess';

    /**
     * Returns true if the given object is an instance of ManagedRemoteAccess.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagedRemoteAccess {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagedRemoteAccess.__pulumiType;
    }

    /**
     * Request reason description, cannot be changed once created
     */
    public readonly reason!: pulumi.Output<string>;
    /**
     * For how many days access is requested, cannot be changed once created
     */
    public readonly requestedDays!: pulumi.Output<number>;
    /**
     * Requested role, cannot be changed once created
     */
    public readonly role!: pulumi.Output<string>;
    /**
     * Access request state. Automatically set as `ACCEPTED` on create, state can be changed in subsequent updates.
     */
    public readonly state!: pulumi.Output<string | undefined>;
    /**
     * User id, cannot be changed once created
     */
    public readonly userId!: pulumi.Output<string>;

    /**
     * Create a ManagedRemoteAccess resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagedRemoteAccessArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagedRemoteAccessArgs | ManagedRemoteAccessState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagedRemoteAccessState | undefined;
            resourceInputs["reason"] = state ? state.reason : undefined;
            resourceInputs["requestedDays"] = state ? state.requestedDays : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as ManagedRemoteAccessArgs | undefined;
            if ((!args || args.reason === undefined) && !opts.urn) {
                throw new Error("Missing required property 'reason'");
            }
            if ((!args || args.requestedDays === undefined) && !opts.urn) {
                throw new Error("Missing required property 'requestedDays'");
            }
            if ((!args || args.role === undefined) && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            if ((!args || args.userId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userId'");
            }
            resourceInputs["reason"] = args ? args.reason : undefined;
            resourceInputs["requestedDays"] = args ? args.requestedDays : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagedRemoteAccess.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ManagedRemoteAccess resources.
 */
export interface ManagedRemoteAccessState {
    /**
     * Request reason description, cannot be changed once created
     */
    reason?: pulumi.Input<string>;
    /**
     * For how many days access is requested, cannot be changed once created
     */
    requestedDays?: pulumi.Input<number>;
    /**
     * Requested role, cannot be changed once created
     */
    role?: pulumi.Input<string>;
    /**
     * Access request state. Automatically set as `ACCEPTED` on create, state can be changed in subsequent updates.
     */
    state?: pulumi.Input<string>;
    /**
     * User id, cannot be changed once created
     */
    userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ManagedRemoteAccess resource.
 */
export interface ManagedRemoteAccessArgs {
    /**
     * Request reason description, cannot be changed once created
     */
    reason: pulumi.Input<string>;
    /**
     * For how many days access is requested, cannot be changed once created
     */
    requestedDays: pulumi.Input<number>;
    /**
     * Requested role, cannot be changed once created
     */
    role: pulumi.Input<string>;
    /**
     * Access request state. Automatically set as `ACCEPTED` on create, state can be changed in subsequent updates.
     */
    state?: pulumi.Input<string>;
    /**
     * User id, cannot be changed once created
     */
    userId: pulumi.Input<string>;
}
