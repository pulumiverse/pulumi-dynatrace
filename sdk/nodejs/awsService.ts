// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * > This resource is excluded by default in the export utility.
 *
 * > This resource requires the API token scopes **Read configuration** (`ReadConfig`) and **Write configuration** (`WriteConfig`)
 *
 * ## Dynatrace Documentation
 *
 * - Amazon Web Services - https://www.dynatrace.com/support/help/setup-and-configuration/setup-on-cloud-platforms/amazon-web-services/amazon-web-services-integrations/aws-service-metrics
 *
 * - AWS credentials API - https://www.dynatrace.com/support/help/dynatrace-api/configuration-api/aws-credentials-api
 *
 * ## Resource Example Usage
 *
 * This example utilizes the data source `dynatrace.getAwsSupportedServices` in order to query for a full list of all supported services.
 * The `forEach` loop within the resource `dynatrace.AwsService` configures each of these services to get utilized with the default metrics recommended by Dynatrace (`useRecommendedMetrics`).
 *
 * If you want to configure a different set of metrics for a specific service, a separate resource `dynatrace.AwsService` will be necessary for that. That allows you to configure the `metric` blocks according to your wishes.
 * Just be aware of the fact, that Dynatrace enforces for most services a recommended set of metrics. All of them need to be part of your configuration in order to end up with a non-empty plan.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dynatrace from "@pulumiverse/dynatrace";
 *
 * export = async () => {
 *     const tERRAFORMSAMPLE = new dynatrace.AwsCredentials("tERRAFORMSAMPLE", {
 *         label: "TERRAFORM-TEST-001",
 *         partitionType: "AWS_DEFAULT",
 *         taggedOnly: false,
 *         authenticationData: {
 *             accountId: "246186168471",
 *             iamRole: "Dynatrace_monitoring_role_demo1",
 *         },
 *         removeDefaults: true,
 *     });
 *     const supportedServices = await dynatrace.getAwsSupportedServices({});
 *     const tERRAFORMSAMPLEServices: dynatrace.AwsService[] = [];
 *     for (const range of Object.entries(supportedServices.services).map(([k, v]) => ({key: k, value: v}))) {
 *         tERRAFORMSAMPLEServices.push(new dynatrace.AwsService(`tERRAFORMSAMPLEServices-${range.key}`, {
 *             credentialsId: tERRAFORMSAMPLE.id,
 *             useRecommendedMetrics: true,
 *         }));
 *     }
 * }
 * ```
 */
export class AwsService extends pulumi.CustomResource {
    /**
     * Get an existing AwsService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AwsServiceState, opts?: pulumi.CustomResourceOptions): AwsService {
        return new AwsService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/awsService:AwsService';

    /**
     * Returns true if the given object is an instance of AwsService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AwsService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AwsService.__pulumiType;
    }

    /**
     * This attribute is automatically set to `true` if Dynatrace considers the supporting service with the given name to be a built-in service
     */
    declare public /*out*/ readonly builtIn: pulumi.Output<boolean>;
    /**
     * the ID of the azure credentials this supported service belongs to
     */
    declare public readonly credentialsId: pulumi.Output<string>;
    declare public readonly metrics: pulumi.Output<outputs.AwsServiceMetric[] | undefined>;
    /**
     * The name of the supporting service.
     */
    declare public readonly name: pulumi.Output<string>;
    declare public /*out*/ readonly requiredMetrics: pulumi.Output<string>;
    declare public readonly useRecommendedMetrics: pulumi.Output<boolean | undefined>;

    /**
     * Create a AwsService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AwsServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AwsServiceArgs | AwsServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AwsServiceState | undefined;
            resourceInputs["builtIn"] = state?.builtIn;
            resourceInputs["credentialsId"] = state?.credentialsId;
            resourceInputs["metrics"] = state?.metrics;
            resourceInputs["name"] = state?.name;
            resourceInputs["requiredMetrics"] = state?.requiredMetrics;
            resourceInputs["useRecommendedMetrics"] = state?.useRecommendedMetrics;
        } else {
            const args = argsOrState as AwsServiceArgs | undefined;
            if (args?.credentialsId === undefined && !opts.urn) {
                throw new Error("Missing required property 'credentialsId'");
            }
            resourceInputs["credentialsId"] = args?.credentialsId;
            resourceInputs["metrics"] = args?.metrics;
            resourceInputs["name"] = args?.name;
            resourceInputs["useRecommendedMetrics"] = args?.useRecommendedMetrics;
            resourceInputs["builtIn"] = undefined /*out*/;
            resourceInputs["requiredMetrics"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AwsService.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AwsService resources.
 */
export interface AwsServiceState {
    /**
     * This attribute is automatically set to `true` if Dynatrace considers the supporting service with the given name to be a built-in service
     */
    builtIn?: pulumi.Input<boolean>;
    /**
     * the ID of the azure credentials this supported service belongs to
     */
    credentialsId?: pulumi.Input<string>;
    metrics?: pulumi.Input<pulumi.Input<inputs.AwsServiceMetric>[]>;
    /**
     * The name of the supporting service.
     */
    name?: pulumi.Input<string>;
    requiredMetrics?: pulumi.Input<string>;
    useRecommendedMetrics?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a AwsService resource.
 */
export interface AwsServiceArgs {
    /**
     * the ID of the azure credentials this supported service belongs to
     */
    credentialsId: pulumi.Input<string>;
    metrics?: pulumi.Input<pulumi.Input<inputs.AwsServiceMetric>[]>;
    /**
     * The name of the supporting service.
     */
    name?: pulumi.Input<string>;
    useRecommendedMetrics?: pulumi.Input<boolean>;
}
