// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OpentelemetryMetrics extends pulumi.CustomResource {
    /**
     * Get an existing OpentelemetryMetrics resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OpentelemetryMetricsState, opts?: pulumi.CustomResourceOptions): OpentelemetryMetrics {
        return new OpentelemetryMetrics(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/opentelemetryMetrics:OpentelemetryMetrics';

    /**
     * Returns true if the given object is an instance of OpentelemetryMetrics.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OpentelemetryMetrics {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OpentelemetryMetrics.__pulumiType;
    }

    /**
     * When enabled, the attributes defined in the list below will be added as dimensions to ingested OTLP metrics if they are present in the OpenTelemetry resource or in the instrumentation scope.
     */
    public readonly additionalAttributes!: pulumi.Output<outputs.OpentelemetryMetricsAdditionalAttributes | undefined>;
    /**
     * Add the resource and scope attributes configured below as dimensions
     */
    public readonly additionalAttributesToDimensionEnabled!: pulumi.Output<boolean>;
    /**
     * When enabled, the Meter name (also referred to as InstrumentationScope or InstrumentationLibrary in OpenTelemetry SDKs)
     * and version will be added as dimensions (`otel.scope.name` and `otel.scope.version`) to ingested OTLP metrics. **Note:**
     * Modifying this setting will cause the metric to change. This may have an impact on existing dashboards, events and
     * alerts that make use of these dimensions. In this case, they will need to be updated manually
     */
    public readonly meterNameToDimensionEnabled!: pulumi.Output<boolean>;
    public readonly mode!: pulumi.Output<string | undefined>;
    /**
     * The scope of this setting (environment-default). Omit this property if you want to cover the whole environment.
     */
    public readonly scope!: pulumi.Output<string | undefined>;
    /**
     * The attributes defined in the list below will be dropped from all ingested OTLP metrics. Upon ingest, the *Allow list:
     * resource and scope attributes* above is applied first. Then, the *Deny list: all attributes* below is applied. The deny
     * list therefore applies to all attributes from all sources (data points, scope and resource). **Notes:** * Modifying this
     * setting (adding, renaming, disabling or removing attributes) will cause the metric to change. This may have an impact on
     * existing dashboards, events and alerts that make use of these dimensions. In this case, they will need to be updated
     * manually. * Dynatrace does not recommend including attributes starting with "dt." to the deny list. Dynatrace leverages
     * these attributes to [Enrich
     * metrics](https://www.dynatrace.com/support/help/extend-dynatrace/extend-metrics/reference/enrich-metrics).
     */
    public readonly toDropAttributes!: pulumi.Output<outputs.OpentelemetryMetricsToDropAttributes | undefined>;

    /**
     * Create a OpentelemetryMetrics resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: OpentelemetryMetricsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OpentelemetryMetricsArgs | OpentelemetryMetricsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OpentelemetryMetricsState | undefined;
            resourceInputs["additionalAttributes"] = state ? state.additionalAttributes : undefined;
            resourceInputs["additionalAttributesToDimensionEnabled"] = state ? state.additionalAttributesToDimensionEnabled : undefined;
            resourceInputs["meterNameToDimensionEnabled"] = state ? state.meterNameToDimensionEnabled : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["toDropAttributes"] = state ? state.toDropAttributes : undefined;
        } else {
            const args = argsOrState as OpentelemetryMetricsArgs | undefined;
            resourceInputs["additionalAttributes"] = args ? args.additionalAttributes : undefined;
            resourceInputs["additionalAttributesToDimensionEnabled"] = args ? args.additionalAttributesToDimensionEnabled : undefined;
            resourceInputs["meterNameToDimensionEnabled"] = args ? args.meterNameToDimensionEnabled : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["toDropAttributes"] = args ? args.toDropAttributes : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OpentelemetryMetrics.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OpentelemetryMetrics resources.
 */
export interface OpentelemetryMetricsState {
    /**
     * When enabled, the attributes defined in the list below will be added as dimensions to ingested OTLP metrics if they are present in the OpenTelemetry resource or in the instrumentation scope.
     */
    additionalAttributes?: pulumi.Input<inputs.OpentelemetryMetricsAdditionalAttributes>;
    /**
     * Add the resource and scope attributes configured below as dimensions
     */
    additionalAttributesToDimensionEnabled?: pulumi.Input<boolean>;
    /**
     * When enabled, the Meter name (also referred to as InstrumentationScope or InstrumentationLibrary in OpenTelemetry SDKs)
     * and version will be added as dimensions (`otel.scope.name` and `otel.scope.version`) to ingested OTLP metrics. **Note:**
     * Modifying this setting will cause the metric to change. This may have an impact on existing dashboards, events and
     * alerts that make use of these dimensions. In this case, they will need to be updated manually
     */
    meterNameToDimensionEnabled?: pulumi.Input<boolean>;
    mode?: pulumi.Input<string>;
    /**
     * The scope of this setting (environment-default). Omit this property if you want to cover the whole environment.
     */
    scope?: pulumi.Input<string>;
    /**
     * The attributes defined in the list below will be dropped from all ingested OTLP metrics. Upon ingest, the *Allow list:
     * resource and scope attributes* above is applied first. Then, the *Deny list: all attributes* below is applied. The deny
     * list therefore applies to all attributes from all sources (data points, scope and resource). **Notes:** * Modifying this
     * setting (adding, renaming, disabling or removing attributes) will cause the metric to change. This may have an impact on
     * existing dashboards, events and alerts that make use of these dimensions. In this case, they will need to be updated
     * manually. * Dynatrace does not recommend including attributes starting with "dt." to the deny list. Dynatrace leverages
     * these attributes to [Enrich
     * metrics](https://www.dynatrace.com/support/help/extend-dynatrace/extend-metrics/reference/enrich-metrics).
     */
    toDropAttributes?: pulumi.Input<inputs.OpentelemetryMetricsToDropAttributes>;
}

/**
 * The set of arguments for constructing a OpentelemetryMetrics resource.
 */
export interface OpentelemetryMetricsArgs {
    /**
     * When enabled, the attributes defined in the list below will be added as dimensions to ingested OTLP metrics if they are present in the OpenTelemetry resource or in the instrumentation scope.
     */
    additionalAttributes?: pulumi.Input<inputs.OpentelemetryMetricsAdditionalAttributes>;
    /**
     * Add the resource and scope attributes configured below as dimensions
     */
    additionalAttributesToDimensionEnabled?: pulumi.Input<boolean>;
    /**
     * When enabled, the Meter name (also referred to as InstrumentationScope or InstrumentationLibrary in OpenTelemetry SDKs)
     * and version will be added as dimensions (`otel.scope.name` and `otel.scope.version`) to ingested OTLP metrics. **Note:**
     * Modifying this setting will cause the metric to change. This may have an impact on existing dashboards, events and
     * alerts that make use of these dimensions. In this case, they will need to be updated manually
     */
    meterNameToDimensionEnabled?: pulumi.Input<boolean>;
    mode?: pulumi.Input<string>;
    /**
     * The scope of this setting (environment-default). Omit this property if you want to cover the whole environment.
     */
    scope?: pulumi.Input<string>;
    /**
     * The attributes defined in the list below will be dropped from all ingested OTLP metrics. Upon ingest, the *Allow list:
     * resource and scope attributes* above is applied first. Then, the *Deny list: all attributes* below is applied. The deny
     * list therefore applies to all attributes from all sources (data points, scope and resource). **Notes:** * Modifying this
     * setting (adding, renaming, disabling or removing attributes) will cause the metric to change. This may have an impact on
     * existing dashboards, events and alerts that make use of these dimensions. In this case, they will need to be updated
     * manually. * Dynatrace does not recommend including attributes starting with "dt." to the deny list. Dynatrace leverages
     * these attributes to [Enrich
     * metrics](https://www.dynatrace.com/support/help/extend-dynatrace/extend-metrics/reference/enrich-metrics).
     */
    toDropAttributes?: pulumi.Input<inputs.OpentelemetryMetricsToDropAttributes>;
}
