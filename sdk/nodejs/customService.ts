// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CustomService extends pulumi.CustomResource {
    /**
     * Get an existing CustomService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CustomServiceState, opts?: pulumi.CustomResourceOptions): CustomService {
        return new CustomService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/customService:CustomService';

    /**
     * Returns true if the given object is an instance of CustomService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CustomService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomService.__pulumiType;
    }

    /**
     * Custom service enabled/disabled
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The name of the custom service, displayed in the UI
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The list of process groups the custom service should belong to
     */
    public readonly processGroups!: pulumi.Output<string[] | undefined>;
    /**
     * The queue entry point flag. Set to `true` for custom messaging services
     */
    public readonly queueEntryPoint!: pulumi.Output<boolean | undefined>;
    /**
     * The queue entry point type (IBM*MQ, JMS, KAFKA, MSMQ or RABBIT*MQ)
     */
    public readonly queueEntryPointType!: pulumi.Output<string | undefined>;
    /**
     * The list of rules defining the custom service
     */
    public readonly rules!: pulumi.Output<outputs.CustomServiceRule[] | undefined>;
    /**
     * Matcher applying to the file name (ENDS*WITH, EQUALS or STARTS*WITH). Default value is ENDS_WITH (if applicable)
     */
    public readonly technology!: pulumi.Output<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    public readonly unknowns!: pulumi.Output<string | undefined>;

    /**
     * Create a CustomService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CustomServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CustomServiceArgs | CustomServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CustomServiceState | undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["processGroups"] = state ? state.processGroups : undefined;
            resourceInputs["queueEntryPoint"] = state ? state.queueEntryPoint : undefined;
            resourceInputs["queueEntryPointType"] = state ? state.queueEntryPointType : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["technology"] = state ? state.technology : undefined;
            resourceInputs["unknowns"] = state ? state.unknowns : undefined;
        } else {
            const args = argsOrState as CustomServiceArgs | undefined;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.technology === undefined) && !opts.urn) {
                throw new Error("Missing required property 'technology'");
            }
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["processGroups"] = args ? args.processGroups : undefined;
            resourceInputs["queueEntryPoint"] = args ? args.queueEntryPoint : undefined;
            resourceInputs["queueEntryPointType"] = args ? args.queueEntryPointType : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["technology"] = args ? args.technology : undefined;
            resourceInputs["unknowns"] = args ? args.unknowns : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CustomService.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CustomService resources.
 */
export interface CustomServiceState {
    /**
     * Custom service enabled/disabled
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The name of the custom service, displayed in the UI
     */
    name?: pulumi.Input<string>;
    /**
     * The list of process groups the custom service should belong to
     */
    processGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The queue entry point flag. Set to `true` for custom messaging services
     */
    queueEntryPoint?: pulumi.Input<boolean>;
    /**
     * The queue entry point type (IBM*MQ, JMS, KAFKA, MSMQ or RABBIT*MQ)
     */
    queueEntryPointType?: pulumi.Input<string>;
    /**
     * The list of rules defining the custom service
     */
    rules?: pulumi.Input<pulumi.Input<inputs.CustomServiceRule>[]>;
    /**
     * Matcher applying to the file name (ENDS*WITH, EQUALS or STARTS*WITH). Default value is ENDS_WITH (if applicable)
     */
    technology?: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CustomService resource.
 */
export interface CustomServiceArgs {
    /**
     * Custom service enabled/disabled
     */
    enabled: pulumi.Input<boolean>;
    /**
     * The name of the custom service, displayed in the UI
     */
    name?: pulumi.Input<string>;
    /**
     * The list of process groups the custom service should belong to
     */
    processGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The queue entry point flag. Set to `true` for custom messaging services
     */
    queueEntryPoint?: pulumi.Input<boolean>;
    /**
     * The queue entry point type (IBM*MQ, JMS, KAFKA, MSMQ or RABBIT*MQ)
     */
    queueEntryPointType?: pulumi.Input<string>;
    /**
     * The list of rules defining the custom service
     */
    rules?: pulumi.Input<pulumi.Input<inputs.CustomServiceRule>[]>;
    /**
     * Matcher applying to the file name (ENDS*WITH, EQUALS or STARTS*WITH). Default value is ENDS_WITH (if applicable)
     */
    technology: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}
