// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DavisCopilot extends pulumi.CustomResource {
    /**
     * Get an existing DavisCopilot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DavisCopilotState, opts?: pulumi.CustomResourceOptions): DavisCopilot {
        return new DavisCopilot(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/davisCopilot:DavisCopilot';

    /**
     * Returns true if the given object is an instance of DavisCopilot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DavisCopilot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DavisCopilot.__pulumiType;
    }

    /**
     * You can exclude specific data buckets and tables from the Davis CoPilot semantic index. Learn more about [configuring data access](https://dt-url.net/lc62i1q).
     */
    declare public readonly blocklistEntries: pulumi.Output<outputs.DavisCopilotBlocklistEntries | undefined>;
    /**
     * Please note that once enabled, you still need to [assign permissions](https://dt-url.net/rh22idn) to the relevant user groups.
     */
    declare public readonly enableCopilot: pulumi.Output<boolean>;
    /**
     * You can enrich Davis CoPilot with your environment data. This lets you generate more accurate queries that identify and reference relevant entities, events, spans, logs, and metrics from your environment. Once enabled, Davis CoPilot periodically scans your Grail data to create its own semantic index. Please note, it can take up to 24 hours to reflect changes. Learn more about [environment-aware queries](https://dt-url.net/4g42iu7).
     */
    declare public readonly enableTenantAwareDataMining: pulumi.Output<boolean | undefined>;

    /**
     * Create a DavisCopilot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DavisCopilotArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DavisCopilotArgs | DavisCopilotState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DavisCopilotState | undefined;
            resourceInputs["blocklistEntries"] = state?.blocklistEntries;
            resourceInputs["enableCopilot"] = state?.enableCopilot;
            resourceInputs["enableTenantAwareDataMining"] = state?.enableTenantAwareDataMining;
        } else {
            const args = argsOrState as DavisCopilotArgs | undefined;
            if (args?.enableCopilot === undefined && !opts.urn) {
                throw new Error("Missing required property 'enableCopilot'");
            }
            resourceInputs["blocklistEntries"] = args?.blocklistEntries;
            resourceInputs["enableCopilot"] = args?.enableCopilot;
            resourceInputs["enableTenantAwareDataMining"] = args?.enableTenantAwareDataMining;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DavisCopilot.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DavisCopilot resources.
 */
export interface DavisCopilotState {
    /**
     * You can exclude specific data buckets and tables from the Davis CoPilot semantic index. Learn more about [configuring data access](https://dt-url.net/lc62i1q).
     */
    blocklistEntries?: pulumi.Input<inputs.DavisCopilotBlocklistEntries>;
    /**
     * Please note that once enabled, you still need to [assign permissions](https://dt-url.net/rh22idn) to the relevant user groups.
     */
    enableCopilot?: pulumi.Input<boolean>;
    /**
     * You can enrich Davis CoPilot with your environment data. This lets you generate more accurate queries that identify and reference relevant entities, events, spans, logs, and metrics from your environment. Once enabled, Davis CoPilot periodically scans your Grail data to create its own semantic index. Please note, it can take up to 24 hours to reflect changes. Learn more about [environment-aware queries](https://dt-url.net/4g42iu7).
     */
    enableTenantAwareDataMining?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a DavisCopilot resource.
 */
export interface DavisCopilotArgs {
    /**
     * You can exclude specific data buckets and tables from the Davis CoPilot semantic index. Learn more about [configuring data access](https://dt-url.net/lc62i1q).
     */
    blocklistEntries?: pulumi.Input<inputs.DavisCopilotBlocklistEntries>;
    /**
     * Please note that once enabled, you still need to [assign permissions](https://dt-url.net/rh22idn) to the relevant user groups.
     */
    enableCopilot: pulumi.Input<boolean>;
    /**
     * You can enrich Davis CoPilot with your environment data. This lets you generate more accurate queries that identify and reference relevant entities, events, spans, logs, and metrics from your environment. Once enabled, Davis CoPilot periodically scans your Grail data to create its own semantic index. Please note, it can take up to 24 hours to reflect changes. Learn more about [environment-aware queries](https://dt-url.net/4g42iu7).
     */
    enableTenantAwareDataMining?: pulumi.Input<boolean>;
}
