// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PlatformBucket extends pulumi.CustomResource {
    /**
     * Get an existing PlatformBucket resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PlatformBucketState, opts?: pulumi.CustomResourceOptions): PlatformBucket {
        return new PlatformBucket(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/platformBucket:PlatformBucket';

    /**
     * Returns true if the given object is an instance of PlatformBucket.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PlatformBucket {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PlatformBucket.__pulumiType;
    }

    /**
     * The name of the bucket definition when visualized within the UI
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    /**
     * The name / id of the bucket definition
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The retention of stored data in days
     */
    public readonly retention!: pulumi.Output<number>;
    /**
     * The status of the bucket definition. Usually has the value `active` unless an update or delete is currently happening
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The table the bucket definition applies to. Possible values are `logs`, `spans`,	`events` and `bizevents`. Changing this attribute will result in deleting and re-creating the bucket definition
     */
    public readonly table!: pulumi.Output<string>;

    /**
     * Create a PlatformBucket resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PlatformBucketArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PlatformBucketArgs | PlatformBucketState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PlatformBucketState | undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["retention"] = state ? state.retention : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["table"] = state ? state.table : undefined;
        } else {
            const args = argsOrState as PlatformBucketArgs | undefined;
            if ((!args || args.retention === undefined) && !opts.urn) {
                throw new Error("Missing required property 'retention'");
            }
            if ((!args || args.table === undefined) && !opts.urn) {
                throw new Error("Missing required property 'table'");
            }
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["retention"] = args ? args.retention : undefined;
            resourceInputs["table"] = args ? args.table : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PlatformBucket.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PlatformBucket resources.
 */
export interface PlatformBucketState {
    /**
     * The name of the bucket definition when visualized within the UI
     */
    displayName?: pulumi.Input<string>;
    /**
     * The name / id of the bucket definition
     */
    name?: pulumi.Input<string>;
    /**
     * The retention of stored data in days
     */
    retention?: pulumi.Input<number>;
    /**
     * The status of the bucket definition. Usually has the value `active` unless an update or delete is currently happening
     */
    status?: pulumi.Input<string>;
    /**
     * The table the bucket definition applies to. Possible values are `logs`, `spans`,	`events` and `bizevents`. Changing this attribute will result in deleting and re-creating the bucket definition
     */
    table?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PlatformBucket resource.
 */
export interface PlatformBucketArgs {
    /**
     * The name of the bucket definition when visualized within the UI
     */
    displayName?: pulumi.Input<string>;
    /**
     * The name / id of the bucket definition
     */
    name?: pulumi.Input<string>;
    /**
     * The retention of stored data in days
     */
    retention: pulumi.Input<number>;
    /**
     * The table the bucket definition applies to. Possible values are `logs`, `spans`,	`events` and `bizevents`. Changing this attribute will result in deleting and re-creating the bucket definition
     */
    table: pulumi.Input<string>;
}
