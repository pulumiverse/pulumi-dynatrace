// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VmwareAnomalies extends pulumi.CustomResource {
    /**
     * Get an existing VmwareAnomalies resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VmwareAnomaliesState, opts?: pulumi.CustomResourceOptions): VmwareAnomalies {
        return new VmwareAnomalies(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/vmwareAnomalies:VmwareAnomalies';

    /**
     * Returns true if the given object is an instance of VmwareAnomalies.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VmwareAnomalies {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VmwareAnomalies.__pulumiType;
    }

    /**
     * no documentation available
     */
    declare public readonly droppedPacketsDetection: pulumi.Output<outputs.VmwareAnomaliesDroppedPacketsDetection>;
    /**
     * no documentation available
     */
    declare public readonly esxiHighCpuDetection: pulumi.Output<outputs.VmwareAnomaliesEsxiHighCpuDetection>;
    /**
     * no documentation available
     */
    declare public readonly esxiHighMemoryDetection: pulumi.Output<outputs.VmwareAnomaliesEsxiHighMemoryDetection>;
    /**
     * no documentation available
     */
    declare public readonly guestCpuLimitDetection: pulumi.Output<outputs.VmwareAnomaliesGuestCpuLimitDetection>;
    /**
     * no documentation available
     */
    declare public readonly lowDatastoreSpaceDetection: pulumi.Output<outputs.VmwareAnomaliesLowDatastoreSpaceDetection>;
    /**
     * no documentation available
     */
    declare public readonly overloadedStorageDetection: pulumi.Output<outputs.VmwareAnomaliesOverloadedStorageDetection>;
    /**
     * no documentation available
     */
    declare public readonly slowPhysicalStorageDetection: pulumi.Output<outputs.VmwareAnomaliesSlowPhysicalStorageDetection>;
    /**
     * no documentation available
     */
    declare public readonly undersizedStorageDetection: pulumi.Output<outputs.VmwareAnomaliesUndersizedStorageDetection>;

    /**
     * Create a VmwareAnomalies resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VmwareAnomaliesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VmwareAnomaliesArgs | VmwareAnomaliesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VmwareAnomaliesState | undefined;
            resourceInputs["droppedPacketsDetection"] = state?.droppedPacketsDetection;
            resourceInputs["esxiHighCpuDetection"] = state?.esxiHighCpuDetection;
            resourceInputs["esxiHighMemoryDetection"] = state?.esxiHighMemoryDetection;
            resourceInputs["guestCpuLimitDetection"] = state?.guestCpuLimitDetection;
            resourceInputs["lowDatastoreSpaceDetection"] = state?.lowDatastoreSpaceDetection;
            resourceInputs["overloadedStorageDetection"] = state?.overloadedStorageDetection;
            resourceInputs["slowPhysicalStorageDetection"] = state?.slowPhysicalStorageDetection;
            resourceInputs["undersizedStorageDetection"] = state?.undersizedStorageDetection;
        } else {
            const args = argsOrState as VmwareAnomaliesArgs | undefined;
            if (args?.droppedPacketsDetection === undefined && !opts.urn) {
                throw new Error("Missing required property 'droppedPacketsDetection'");
            }
            if (args?.esxiHighCpuDetection === undefined && !opts.urn) {
                throw new Error("Missing required property 'esxiHighCpuDetection'");
            }
            if (args?.esxiHighMemoryDetection === undefined && !opts.urn) {
                throw new Error("Missing required property 'esxiHighMemoryDetection'");
            }
            if (args?.guestCpuLimitDetection === undefined && !opts.urn) {
                throw new Error("Missing required property 'guestCpuLimitDetection'");
            }
            if (args?.lowDatastoreSpaceDetection === undefined && !opts.urn) {
                throw new Error("Missing required property 'lowDatastoreSpaceDetection'");
            }
            if (args?.overloadedStorageDetection === undefined && !opts.urn) {
                throw new Error("Missing required property 'overloadedStorageDetection'");
            }
            if (args?.slowPhysicalStorageDetection === undefined && !opts.urn) {
                throw new Error("Missing required property 'slowPhysicalStorageDetection'");
            }
            if (args?.undersizedStorageDetection === undefined && !opts.urn) {
                throw new Error("Missing required property 'undersizedStorageDetection'");
            }
            resourceInputs["droppedPacketsDetection"] = args?.droppedPacketsDetection;
            resourceInputs["esxiHighCpuDetection"] = args?.esxiHighCpuDetection;
            resourceInputs["esxiHighMemoryDetection"] = args?.esxiHighMemoryDetection;
            resourceInputs["guestCpuLimitDetection"] = args?.guestCpuLimitDetection;
            resourceInputs["lowDatastoreSpaceDetection"] = args?.lowDatastoreSpaceDetection;
            resourceInputs["overloadedStorageDetection"] = args?.overloadedStorageDetection;
            resourceInputs["slowPhysicalStorageDetection"] = args?.slowPhysicalStorageDetection;
            resourceInputs["undersizedStorageDetection"] = args?.undersizedStorageDetection;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VmwareAnomalies.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VmwareAnomalies resources.
 */
export interface VmwareAnomaliesState {
    /**
     * no documentation available
     */
    droppedPacketsDetection?: pulumi.Input<inputs.VmwareAnomaliesDroppedPacketsDetection>;
    /**
     * no documentation available
     */
    esxiHighCpuDetection?: pulumi.Input<inputs.VmwareAnomaliesEsxiHighCpuDetection>;
    /**
     * no documentation available
     */
    esxiHighMemoryDetection?: pulumi.Input<inputs.VmwareAnomaliesEsxiHighMemoryDetection>;
    /**
     * no documentation available
     */
    guestCpuLimitDetection?: pulumi.Input<inputs.VmwareAnomaliesGuestCpuLimitDetection>;
    /**
     * no documentation available
     */
    lowDatastoreSpaceDetection?: pulumi.Input<inputs.VmwareAnomaliesLowDatastoreSpaceDetection>;
    /**
     * no documentation available
     */
    overloadedStorageDetection?: pulumi.Input<inputs.VmwareAnomaliesOverloadedStorageDetection>;
    /**
     * no documentation available
     */
    slowPhysicalStorageDetection?: pulumi.Input<inputs.VmwareAnomaliesSlowPhysicalStorageDetection>;
    /**
     * no documentation available
     */
    undersizedStorageDetection?: pulumi.Input<inputs.VmwareAnomaliesUndersizedStorageDetection>;
}

/**
 * The set of arguments for constructing a VmwareAnomalies resource.
 */
export interface VmwareAnomaliesArgs {
    /**
     * no documentation available
     */
    droppedPacketsDetection: pulumi.Input<inputs.VmwareAnomaliesDroppedPacketsDetection>;
    /**
     * no documentation available
     */
    esxiHighCpuDetection: pulumi.Input<inputs.VmwareAnomaliesEsxiHighCpuDetection>;
    /**
     * no documentation available
     */
    esxiHighMemoryDetection: pulumi.Input<inputs.VmwareAnomaliesEsxiHighMemoryDetection>;
    /**
     * no documentation available
     */
    guestCpuLimitDetection: pulumi.Input<inputs.VmwareAnomaliesGuestCpuLimitDetection>;
    /**
     * no documentation available
     */
    lowDatastoreSpaceDetection: pulumi.Input<inputs.VmwareAnomaliesLowDatastoreSpaceDetection>;
    /**
     * no documentation available
     */
    overloadedStorageDetection: pulumi.Input<inputs.VmwareAnomaliesOverloadedStorageDetection>;
    /**
     * no documentation available
     */
    slowPhysicalStorageDetection: pulumi.Input<inputs.VmwareAnomaliesSlowPhysicalStorageDetection>;
    /**
     * no documentation available
     */
    undersizedStorageDetection: pulumi.Input<inputs.VmwareAnomaliesUndersizedStorageDetection>;
}
