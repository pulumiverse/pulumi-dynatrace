// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LogStorage extends pulumi.CustomResource {
    /**
     * Get an existing LogStorage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogStorageState, opts?: pulumi.CustomResourceOptions): LogStorage {
        return new LogStorage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/logStorage:LogStorage';

    /**
     * Returns true if the given object is an instance of LogStorage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogStorage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogStorage.__pulumiType;
    }

    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
     */
    declare public readonly insertAfter: pulumi.Output<string>;
    /**
     * no documentation available
     */
    declare public readonly matchers: pulumi.Output<outputs.LogStorageMatchers | undefined>;
    /**
     * Name
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The scope of this setting (HOST, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
     */
    declare public readonly scope: pulumi.Output<string | undefined>;
    /**
     * If `true` matching logs will be included in storage. If `false` matching logs will be excluded from storage.
     */
    declare public readonly sendToStorage: pulumi.Output<boolean>;

    /**
     * Create a LogStorage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogStorageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogStorageArgs | LogStorageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogStorageState | undefined;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["insertAfter"] = state?.insertAfter;
            resourceInputs["matchers"] = state?.matchers;
            resourceInputs["name"] = state?.name;
            resourceInputs["scope"] = state?.scope;
            resourceInputs["sendToStorage"] = state?.sendToStorage;
        } else {
            const args = argsOrState as LogStorageArgs | undefined;
            if (args?.enabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if (args?.sendToStorage === undefined && !opts.urn) {
                throw new Error("Missing required property 'sendToStorage'");
            }
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["insertAfter"] = args?.insertAfter;
            resourceInputs["matchers"] = args?.matchers;
            resourceInputs["name"] = args?.name;
            resourceInputs["scope"] = args?.scope;
            resourceInputs["sendToStorage"] = args?.sendToStorage;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogStorage.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LogStorage resources.
 */
export interface LogStorageState {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
     */
    insertAfter?: pulumi.Input<string>;
    /**
     * no documentation available
     */
    matchers?: pulumi.Input<inputs.LogStorageMatchers>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * The scope of this setting (HOST, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
     */
    scope?: pulumi.Input<string>;
    /**
     * If `true` matching logs will be included in storage. If `false` matching logs will be excluded from storage.
     */
    sendToStorage?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a LogStorage resource.
 */
export interface LogStorageArgs {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
     */
    insertAfter?: pulumi.Input<string>;
    /**
     * no documentation available
     */
    matchers?: pulumi.Input<inputs.LogStorageMatchers>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * The scope of this setting (HOST, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
     */
    scope?: pulumi.Input<string>;
    /**
     * If `true` matching logs will be included in storage. If `false` matching logs will be excluded from storage.
     */
    sendToStorage: pulumi.Input<boolean>;
}
