// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ServicenowConnection extends pulumi.CustomResource {
    /**
     * Get an existing ServicenowConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServicenowConnectionState, opts?: pulumi.CustomResourceOptions): ServicenowConnection {
        return new ServicenowConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/servicenowConnection:ServicenowConnection';

    /**
     * Returns true if the given object is an instance of ServicenowConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServicenowConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServicenowConnection.__pulumiType;
    }

    /**
     * A unique and clearly identifiable connection name to your ServiceNow instance.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Password of the ServiceNow user.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Possible Values: `basic`
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * URL of the ServiceNow instance.
     */
    public readonly url!: pulumi.Output<string>;
    /**
     * Username or Email address.
     */
    public readonly user!: pulumi.Output<string | undefined>;

    /**
     * Create a ServicenowConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServicenowConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServicenowConnectionArgs | ServicenowConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServicenowConnectionState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
        } else {
            const args = argsOrState as ServicenowConnectionArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.url === undefined) && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ServicenowConnection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServicenowConnection resources.
 */
export interface ServicenowConnectionState {
    /**
     * A unique and clearly identifiable connection name to your ServiceNow instance.
     */
    name?: pulumi.Input<string>;
    /**
     * Password of the ServiceNow user.
     */
    password?: pulumi.Input<string>;
    /**
     * Possible Values: `basic`
     */
    type?: pulumi.Input<string>;
    /**
     * URL of the ServiceNow instance.
     */
    url?: pulumi.Input<string>;
    /**
     * Username or Email address.
     */
    user?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServicenowConnection resource.
 */
export interface ServicenowConnectionArgs {
    /**
     * A unique and clearly identifiable connection name to your ServiceNow instance.
     */
    name?: pulumi.Input<string>;
    /**
     * Password of the ServiceNow user.
     */
    password?: pulumi.Input<string>;
    /**
     * Possible Values: `basic`
     */
    type: pulumi.Input<string>;
    /**
     * URL of the ServiceNow instance.
     */
    url: pulumi.Input<string>;
    /**
     * Username or Email address.
     */
    user?: pulumi.Input<string>;
}
