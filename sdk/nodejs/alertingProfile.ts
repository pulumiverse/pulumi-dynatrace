// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * !> This resource API endpoint has been deprecated, please use dynatrace.Alerting instead.
 *
 * > This resource requires the API token scopes **Read configuration** (`ReadConfig`) and **Write configuration** (`WriteConfig`)
 *
 * ## Dynatrace Documentation
 *
 * - Alerting profiles - https://www.dynatrace.com/support/help/how-to-use-dynatrace/problem-detection-and-analysis/notifications-and-alerting/alerting-profiles
 *
 * - Alerting profiles API - https://www.dynatrace.com/support/help/dynatrace-api/configuration-api/alerting-profiles-api
 *
 * ## Resource Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dynatrace from "@pulumiverse/dynatrace";
 *
 * const _name_ = new dynatrace.AlertingProfile("#name#", {
 *     displayName: "#name#",
 *     mzId: "",
 *     rules: [
 *         {
 *             delayInMinutes: 0,
 *             severityLevel: "AVAILABILITY",
 *             tagFilters: [{
 *                 includeMode: "INCLUDE_ALL",
 *                 tagFilters: [
 *                     {
 *                         context: "CONTEXTLESS",
 *                         key: "EnvironmentA",
 *                         value: "production",
 *                     },
 *                     {
 *                         context: "CONTEXTLESS",
 *                         key: "Team",
 *                         value: "test",
 *                     },
 *                 ],
 *             }],
 *         },
 *         {
 *             delayInMinutes: 0,
 *             severityLevel: "CUSTOM_ALERT",
 *             tagFilters: [{
 *                 includeMode: "INCLUDE_ALL",
 *                 tagFilters: [
 *                     {
 *                         context: "CONTEXTLESS",
 *                         key: "EnvironmentB",
 *                         value: "production",
 *                     },
 *                     {
 *                         context: "CONTEXTLESS",
 *                         key: "Team",
 *                         value: "test",
 *                     },
 *                 ],
 *             }],
 *         },
 *         {
 *             delayInMinutes: 0,
 *             severityLevel: "ERROR",
 *             tagFilters: [{
 *                 includeMode: "INCLUDE_ALL",
 *                 tagFilters: [
 *                     {
 *                         context: "CONTEXTLESS",
 *                         key: "EnvironmentC",
 *                         value: "production",
 *                     },
 *                     {
 *                         context: "CONTEXTLESS",
 *                         key: "Team",
 *                         value: "test",
 *                     },
 *                 ],
 *             }],
 *         },
 *         {
 *             delayInMinutes: 0,
 *             severityLevel: "MONITORING_UNAVAILABLE",
 *             tagFilters: [{
 *                 includeMode: "INCLUDE_ALL",
 *                 tagFilters: [
 *                     {
 *                         context: "CONTEXTLESS",
 *                         key: "EnvironmentD",
 *                         value: "production",
 *                     },
 *                     {
 *                         context: "CONTEXTLESS",
 *                         key: "Team",
 *                         value: "test",
 *                     },
 *                 ],
 *             }],
 *         },
 *         {
 *             delayInMinutes: 0,
 *             severityLevel: "PERFORMANCE",
 *             tagFilters: [{
 *                 includeMode: "INCLUDE_ALL",
 *                 tagFilters: [
 *                     {
 *                         context: "CONTEXTLESS",
 *                         key: "EnvironmentE",
 *                         value: "production",
 *                     },
 *                     {
 *                         context: "CONTEXTLESS",
 *                         key: "Team",
 *                         value: "test",
 *                     },
 *                 ],
 *             }],
 *         },
 *         {
 *             delayInMinutes: 0,
 *             severityLevel: "RESOURCE_CONTENTION",
 *             tagFilters: [{
 *                 includeMode: "INCLUDE_ALL",
 *                 tagFilters: [
 *                     {
 *                         context: "CONTEXTLESS",
 *                         key: "EnvironmentF",
 *                         value: "production",
 *                     },
 *                     {
 *                         context: "CONTEXTLESS",
 *                         key: "Team",
 *                         value: "test",
 *                     },
 *                 ],
 *             }],
 *         },
 *     ],
 * });
 * ```
 */
export class AlertingProfile extends pulumi.CustomResource {
    /**
     * Get an existing AlertingProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlertingProfileState, opts?: pulumi.CustomResourceOptions): AlertingProfile {
        return new AlertingProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/alertingProfile:AlertingProfile';

    /**
     * Returns true if the given object is an instance of AlertingProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AlertingProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlertingProfile.__pulumiType;
    }

    /**
     * The name of the alerting profile, displayed in the UI
     */
    declare public readonly displayName: pulumi.Output<string>;
    /**
     * The list of event filters.  For all filters that are *negated* inside of these event filters, that is all `Predefined` as well as `Custom` (Title and/or Description) ones the AND logic applies. For all *non-negated* ones the OR logic applies. Between these two groups, negated and non-negated, the AND logic applies.  If you specify both severity rule and event filter, the AND logic applies
     */
    declare public readonly eventTypeFilters: pulumi.Output<outputs.AlertingProfileEventTypeFilter[] | undefined>;
    /**
     * `metadata` exists for backwards compatibility but shouldn't get specified anymore
     *
     * @deprecated `metadata` exists for backwards compatibility but shouldn't get specified anymore
     */
    declare public readonly metadata: pulumi.Output<outputs.AlertingProfileMetadata | undefined>;
    /**
     * The ID of the management zone to which the alerting profile applies
     */
    declare public readonly mzId: pulumi.Output<string | undefined>;
    /**
     * A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
     */
    declare public readonly rules: pulumi.Output<outputs.AlertingProfileRule[] | undefined>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    declare public readonly unknowns: pulumi.Output<string | undefined>;

    /**
     * Create a AlertingProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlertingProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlertingProfileArgs | AlertingProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlertingProfileState | undefined;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["eventTypeFilters"] = state?.eventTypeFilters;
            resourceInputs["metadata"] = state?.metadata;
            resourceInputs["mzId"] = state?.mzId;
            resourceInputs["rules"] = state?.rules;
            resourceInputs["unknowns"] = state?.unknowns;
        } else {
            const args = argsOrState as AlertingProfileArgs | undefined;
            if (args?.displayName === undefined && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["eventTypeFilters"] = args?.eventTypeFilters;
            resourceInputs["metadata"] = args?.metadata;
            resourceInputs["mzId"] = args?.mzId;
            resourceInputs["rules"] = args?.rules;
            resourceInputs["unknowns"] = args?.unknowns;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AlertingProfile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AlertingProfile resources.
 */
export interface AlertingProfileState {
    /**
     * The name of the alerting profile, displayed in the UI
     */
    displayName?: pulumi.Input<string>;
    /**
     * The list of event filters.  For all filters that are *negated* inside of these event filters, that is all `Predefined` as well as `Custom` (Title and/or Description) ones the AND logic applies. For all *non-negated* ones the OR logic applies. Between these two groups, negated and non-negated, the AND logic applies.  If you specify both severity rule and event filter, the AND logic applies
     */
    eventTypeFilters?: pulumi.Input<pulumi.Input<inputs.AlertingProfileEventTypeFilter>[]>;
    /**
     * `metadata` exists for backwards compatibility but shouldn't get specified anymore
     *
     * @deprecated `metadata` exists for backwards compatibility but shouldn't get specified anymore
     */
    metadata?: pulumi.Input<inputs.AlertingProfileMetadata>;
    /**
     * The ID of the management zone to which the alerting profile applies
     */
    mzId?: pulumi.Input<string>;
    /**
     * A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
     */
    rules?: pulumi.Input<pulumi.Input<inputs.AlertingProfileRule>[]>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AlertingProfile resource.
 */
export interface AlertingProfileArgs {
    /**
     * The name of the alerting profile, displayed in the UI
     */
    displayName: pulumi.Input<string>;
    /**
     * The list of event filters.  For all filters that are *negated* inside of these event filters, that is all `Predefined` as well as `Custom` (Title and/or Description) ones the AND logic applies. For all *non-negated* ones the OR logic applies. Between these two groups, negated and non-negated, the AND logic applies.  If you specify both severity rule and event filter, the AND logic applies
     */
    eventTypeFilters?: pulumi.Input<pulumi.Input<inputs.AlertingProfileEventTypeFilter>[]>;
    /**
     * `metadata` exists for backwards compatibility but shouldn't get specified anymore
     *
     * @deprecated `metadata` exists for backwards compatibility but shouldn't get specified anymore
     */
    metadata?: pulumi.Input<inputs.AlertingProfileMetadata>;
    /**
     * The ID of the management zone to which the alerting profile applies
     */
    mzId?: pulumi.Input<string>;
    /**
     * A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
     */
    rules?: pulumi.Input<pulumi.Input<inputs.AlertingProfileRule>[]>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}
