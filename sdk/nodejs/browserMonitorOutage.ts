// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class BrowserMonitorOutage extends pulumi.CustomResource {
    /**
     * Get an existing BrowserMonitorOutage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BrowserMonitorOutageState, opts?: pulumi.CustomResourceOptions): BrowserMonitorOutage {
        return new BrowserMonitorOutage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/browserMonitorOutage:BrowserMonitorOutage';

    /**
     * Returns true if the given object is an instance of BrowserMonitorOutage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BrowserMonitorOutage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BrowserMonitorOutage.__pulumiType;
    }

    /**
     * (Field has overlap with `dynatrace.BrowserMonitor`) Alert if all locations are unable to access my web application
     */
    public readonly globalConsecutiveOutageCountThreshold!: pulumi.Output<number | undefined>;
    /**
     * (Field has overlap with `dynatrace.BrowserMonitor`) Generate a problem and send an alert when the monitor is unavailable at all configured locations.
     */
    public readonly globalOutages!: pulumi.Output<boolean>;
    /**
     * (Field has overlap with `dynatrace.BrowserMonitor`) are unable to access my web application
     */
    public readonly localConsecutiveOutageCountThreshold!: pulumi.Output<number | undefined>;
    /**
     * (Field has overlap with `dynatrace.BrowserMonitor`) Alert if at least
     */
    public readonly localLocationOutageCountThreshold!: pulumi.Output<number | undefined>;
    /**
     * (Field has overlap with `dynatrace.BrowserMonitor`) Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
     */
    public readonly localOutages!: pulumi.Output<boolean>;
    /**
     * (Field has overlap with `dynatrace.BrowserMonitor`) When enabled, which is the default, failing monitor executions are retried immediately one time to avoid false positives and only the second result is used. When disabled, we use the first result right away.
     * Requires ActiveGate version 1.207+ for private locations.
     */
    public readonly retryOnError!: pulumi.Output<boolean>;
    /**
     * The scope of this setting (SYNTHETIC_TEST). Omit this property if you want to cover the whole environment.
     */
    public readonly scope!: pulumi.Output<string | undefined>;

    /**
     * Create a BrowserMonitorOutage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BrowserMonitorOutageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BrowserMonitorOutageArgs | BrowserMonitorOutageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BrowserMonitorOutageState | undefined;
            resourceInputs["globalConsecutiveOutageCountThreshold"] = state ? state.globalConsecutiveOutageCountThreshold : undefined;
            resourceInputs["globalOutages"] = state ? state.globalOutages : undefined;
            resourceInputs["localConsecutiveOutageCountThreshold"] = state ? state.localConsecutiveOutageCountThreshold : undefined;
            resourceInputs["localLocationOutageCountThreshold"] = state ? state.localLocationOutageCountThreshold : undefined;
            resourceInputs["localOutages"] = state ? state.localOutages : undefined;
            resourceInputs["retryOnError"] = state ? state.retryOnError : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
        } else {
            const args = argsOrState as BrowserMonitorOutageArgs | undefined;
            if ((!args || args.globalOutages === undefined) && !opts.urn) {
                throw new Error("Missing required property 'globalOutages'");
            }
            if ((!args || args.localOutages === undefined) && !opts.urn) {
                throw new Error("Missing required property 'localOutages'");
            }
            if ((!args || args.retryOnError === undefined) && !opts.urn) {
                throw new Error("Missing required property 'retryOnError'");
            }
            resourceInputs["globalConsecutiveOutageCountThreshold"] = args ? args.globalConsecutiveOutageCountThreshold : undefined;
            resourceInputs["globalOutages"] = args ? args.globalOutages : undefined;
            resourceInputs["localConsecutiveOutageCountThreshold"] = args ? args.localConsecutiveOutageCountThreshold : undefined;
            resourceInputs["localLocationOutageCountThreshold"] = args ? args.localLocationOutageCountThreshold : undefined;
            resourceInputs["localOutages"] = args ? args.localOutages : undefined;
            resourceInputs["retryOnError"] = args ? args.retryOnError : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BrowserMonitorOutage.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BrowserMonitorOutage resources.
 */
export interface BrowserMonitorOutageState {
    /**
     * (Field has overlap with `dynatrace.BrowserMonitor`) Alert if all locations are unable to access my web application
     */
    globalConsecutiveOutageCountThreshold?: pulumi.Input<number>;
    /**
     * (Field has overlap with `dynatrace.BrowserMonitor`) Generate a problem and send an alert when the monitor is unavailable at all configured locations.
     */
    globalOutages?: pulumi.Input<boolean>;
    /**
     * (Field has overlap with `dynatrace.BrowserMonitor`) are unable to access my web application
     */
    localConsecutiveOutageCountThreshold?: pulumi.Input<number>;
    /**
     * (Field has overlap with `dynatrace.BrowserMonitor`) Alert if at least
     */
    localLocationOutageCountThreshold?: pulumi.Input<number>;
    /**
     * (Field has overlap with `dynatrace.BrowserMonitor`) Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
     */
    localOutages?: pulumi.Input<boolean>;
    /**
     * (Field has overlap with `dynatrace.BrowserMonitor`) When enabled, which is the default, failing monitor executions are retried immediately one time to avoid false positives and only the second result is used. When disabled, we use the first result right away.
     * Requires ActiveGate version 1.207+ for private locations.
     */
    retryOnError?: pulumi.Input<boolean>;
    /**
     * The scope of this setting (SYNTHETIC_TEST). Omit this property if you want to cover the whole environment.
     */
    scope?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BrowserMonitorOutage resource.
 */
export interface BrowserMonitorOutageArgs {
    /**
     * (Field has overlap with `dynatrace.BrowserMonitor`) Alert if all locations are unable to access my web application
     */
    globalConsecutiveOutageCountThreshold?: pulumi.Input<number>;
    /**
     * (Field has overlap with `dynatrace.BrowserMonitor`) Generate a problem and send an alert when the monitor is unavailable at all configured locations.
     */
    globalOutages: pulumi.Input<boolean>;
    /**
     * (Field has overlap with `dynatrace.BrowserMonitor`) are unable to access my web application
     */
    localConsecutiveOutageCountThreshold?: pulumi.Input<number>;
    /**
     * (Field has overlap with `dynatrace.BrowserMonitor`) Alert if at least
     */
    localLocationOutageCountThreshold?: pulumi.Input<number>;
    /**
     * (Field has overlap with `dynatrace.BrowserMonitor`) Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
     */
    localOutages: pulumi.Input<boolean>;
    /**
     * (Field has overlap with `dynatrace.BrowserMonitor`) When enabled, which is the default, failing monitor executions are retried immediately one time to avoid false positives and only the second result is used. When disabled, we use the first result right away.
     * Requires ActiveGate version 1.207+ for private locations.
     */
    retryOnError: pulumi.Input<boolean>;
    /**
     * The scope of this setting (SYNTHETIC_TEST). Omit this property if you want to cover the whole environment.
     */
    scope?: pulumi.Input<string>;
}
