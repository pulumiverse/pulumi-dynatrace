// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AnsibleTowerNotification extends pulumi.CustomResource {
    /**
     * Get an existing AnsibleTowerNotification resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AnsibleTowerNotificationState, opts?: pulumi.CustomResourceOptions): AnsibleTowerNotification {
        return new AnsibleTowerNotification(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/ansibleTowerNotification:AnsibleTowerNotification';

    /**
     * Returns true if the given object is an instance of AnsibleTowerNotification.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AnsibleTowerNotification {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AnsibleTowerNotification.__pulumiType;
    }

    /**
     * The notification is active (`true`) or inactive (`false`). Default is `false`.
     */
    declare public readonly active: pulumi.Output<boolean | undefined>;
    /**
     * The custom message of the notification. This message will be displayed in the extra variables **Message** field of your job template. You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     */
    declare public readonly customMessage: pulumi.Output<string>;
    /**
     * Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates. Default is `false`.
     */
    declare public readonly insecure: pulumi.Output<boolean | undefined>;
    /**
     * The URL of the target Ansible Tower job template
     */
    declare public readonly jobTemplateUrl: pulumi.Output<string>;
    /**
     * The ID of these settings when referred to from resources requiring the REST API V1 keys
     */
    declare public readonly legacyId: pulumi.Output<string>;
    /**
     * The display name within the Dynatrace WebUI.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The password for the Ansible Tower account
     */
    declare public readonly password: pulumi.Output<string | undefined>;
    /**
     * The ID of the associated alerting profile.
     */
    declare public readonly profile: pulumi.Output<string>;
    /**
     * The username of the Ansible Tower account
     */
    declare public readonly username: pulumi.Output<string>;

    /**
     * Create a AnsibleTowerNotification resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AnsibleTowerNotificationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AnsibleTowerNotificationArgs | AnsibleTowerNotificationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AnsibleTowerNotificationState | undefined;
            resourceInputs["active"] = state?.active;
            resourceInputs["customMessage"] = state?.customMessage;
            resourceInputs["insecure"] = state?.insecure;
            resourceInputs["jobTemplateUrl"] = state?.jobTemplateUrl;
            resourceInputs["legacyId"] = state?.legacyId;
            resourceInputs["name"] = state?.name;
            resourceInputs["password"] = state?.password;
            resourceInputs["profile"] = state?.profile;
            resourceInputs["username"] = state?.username;
        } else {
            const args = argsOrState as AnsibleTowerNotificationArgs | undefined;
            if (args?.customMessage === undefined && !opts.urn) {
                throw new Error("Missing required property 'customMessage'");
            }
            if (args?.jobTemplateUrl === undefined && !opts.urn) {
                throw new Error("Missing required property 'jobTemplateUrl'");
            }
            if (args?.profile === undefined && !opts.urn) {
                throw new Error("Missing required property 'profile'");
            }
            if (args?.username === undefined && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["active"] = args?.active;
            resourceInputs["customMessage"] = args?.customMessage;
            resourceInputs["insecure"] = args?.insecure;
            resourceInputs["jobTemplateUrl"] = args?.jobTemplateUrl;
            resourceInputs["legacyId"] = args?.legacyId;
            resourceInputs["name"] = args?.name;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["profile"] = args?.profile;
            resourceInputs["username"] = args?.username;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AnsibleTowerNotification.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AnsibleTowerNotification resources.
 */
export interface AnsibleTowerNotificationState {
    /**
     * The notification is active (`true`) or inactive (`false`). Default is `false`.
     */
    active?: pulumi.Input<boolean>;
    /**
     * The custom message of the notification. This message will be displayed in the extra variables **Message** field of your job template. You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     */
    customMessage?: pulumi.Input<string>;
    /**
     * Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates. Default is `false`.
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * The URL of the target Ansible Tower job template
     */
    jobTemplateUrl?: pulumi.Input<string>;
    /**
     * The ID of these settings when referred to from resources requiring the REST API V1 keys
     */
    legacyId?: pulumi.Input<string>;
    /**
     * The display name within the Dynatrace WebUI.
     */
    name?: pulumi.Input<string>;
    /**
     * The password for the Ansible Tower account
     */
    password?: pulumi.Input<string>;
    /**
     * The ID of the associated alerting profile.
     */
    profile?: pulumi.Input<string>;
    /**
     * The username of the Ansible Tower account
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AnsibleTowerNotification resource.
 */
export interface AnsibleTowerNotificationArgs {
    /**
     * The notification is active (`true`) or inactive (`false`). Default is `false`.
     */
    active?: pulumi.Input<boolean>;
    /**
     * The custom message of the notification. This message will be displayed in the extra variables **Message** field of your job template. You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     */
    customMessage: pulumi.Input<string>;
    /**
     * Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates. Default is `false`.
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * The URL of the target Ansible Tower job template
     */
    jobTemplateUrl: pulumi.Input<string>;
    /**
     * The ID of these settings when referred to from resources requiring the REST API V1 keys
     */
    legacyId?: pulumi.Input<string>;
    /**
     * The display name within the Dynatrace WebUI.
     */
    name?: pulumi.Input<string>;
    /**
     * The password for the Ansible Tower account
     */
    password?: pulumi.Input<string>;
    /**
     * The ID of the associated alerting profile.
     */
    profile: pulumi.Input<string>;
    /**
     * The username of the Ansible Tower account
     */
    username: pulumi.Input<string>;
}
