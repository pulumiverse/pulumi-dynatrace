// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * > This resource requires the API token scopes **Read entities** (`entities.read`) and **Write entities** (`entities.write`)
 *
 * ## Dynatrace Documentation
 *
 * - Monitored entities API - https://www.dynatrace.com/support/help/dynatrace-api/environment-api/entity-v2
 *
 * ## Resource Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dynatrace from "@pulumiverse/dynatrace";
 *
 * const _name_ = new dynatrace.CustomDevice("#name#", {
 *     customDeviceId: "customDeviceId",
 *     displayName: "customDevicename",
 * });
 * ```
 */
export class CustomDevice extends pulumi.CustomResource {
    /**
     * Get an existing CustomDevice resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CustomDeviceState, opts?: pulumi.CustomResourceOptions): CustomDevice {
        return new CustomDevice(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/customDevice:CustomDevice';

    /**
     * Returns true if the given object is an instance of CustomDevice.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CustomDevice {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomDevice.__pulumiType;
    }

    /**
     * The URL of a configuration web page for the custom device, such as a login page for a firewall or router.
     */
    declare public readonly configUrl: pulumi.Output<string | undefined>;
    declare public readonly customDeviceId: pulumi.Output<string>;
    /**
     * The name of the custom device, displayed in the UI.
     */
    declare public readonly displayName: pulumi.Output<string>;
    /**
     * The list of DNS names related to the custom device.
     */
    declare public readonly dnsNames: pulumi.Output<string[] | undefined>;
    /**
     * The Dynatrace EntityID of this resource. If you need to refer to this custom device within other resources you want to use this ID
     */
    declare public /*out*/ readonly entityId: pulumi.Output<string>;
    /**
     * The icon to be displayed for your custom component within Smartscape. Provide the full URL of the icon file.
     */
    declare public readonly faviconUrl: pulumi.Output<string | undefined>;
    /**
     * User defined group of entity. Changing the group requires a new custom device to be created.
     */
    declare public readonly group: pulumi.Output<string>;
    /**
     * The list of IP addresses that belong to the custom device.
     */
    declare public readonly ipAddresses: pulumi.Output<string[] | undefined>;
    /**
     * The list of ports the custom devices listens to.
     */
    declare public readonly listenPorts: pulumi.Output<number[] | undefined>;
    /**
     * The list of key-value pair properties that will be shown beneath the infographics of your custom device.
     *
     * @deprecated Please use the attribute `props` instead
     */
    declare public readonly properties: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The list of key-value pair properties that will be shown beneath the infographics of your custom device.
     */
    declare public readonly props: pulumi.Output<string | undefined>;
    /**
     * The technology type definition of the custom device.
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * If `true` the custom device will be handled as if it was created via UI. It will be refreshed automatically and won't age out. This attribute is taken into consideration when creating the custom device. Changing it afterwards won't have an effect.
     */
    declare public readonly uiBased: pulumi.Output<boolean | undefined>;

    /**
     * Create a CustomDevice resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CustomDeviceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CustomDeviceArgs | CustomDeviceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CustomDeviceState | undefined;
            resourceInputs["configUrl"] = state?.configUrl;
            resourceInputs["customDeviceId"] = state?.customDeviceId;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["dnsNames"] = state?.dnsNames;
            resourceInputs["entityId"] = state?.entityId;
            resourceInputs["faviconUrl"] = state?.faviconUrl;
            resourceInputs["group"] = state?.group;
            resourceInputs["ipAddresses"] = state?.ipAddresses;
            resourceInputs["listenPorts"] = state?.listenPorts;
            resourceInputs["properties"] = state?.properties;
            resourceInputs["props"] = state?.props;
            resourceInputs["type"] = state?.type;
            resourceInputs["uiBased"] = state?.uiBased;
        } else {
            const args = argsOrState as CustomDeviceArgs | undefined;
            if (args?.displayName === undefined && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            resourceInputs["configUrl"] = args?.configUrl;
            resourceInputs["customDeviceId"] = args?.customDeviceId;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["dnsNames"] = args?.dnsNames;
            resourceInputs["faviconUrl"] = args?.faviconUrl;
            resourceInputs["group"] = args?.group;
            resourceInputs["ipAddresses"] = args?.ipAddresses;
            resourceInputs["listenPorts"] = args?.listenPorts;
            resourceInputs["properties"] = args?.properties;
            resourceInputs["props"] = args?.props;
            resourceInputs["type"] = args?.type;
            resourceInputs["uiBased"] = args?.uiBased;
            resourceInputs["entityId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CustomDevice.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CustomDevice resources.
 */
export interface CustomDeviceState {
    /**
     * The URL of a configuration web page for the custom device, such as a login page for a firewall or router.
     */
    configUrl?: pulumi.Input<string>;
    customDeviceId?: pulumi.Input<string>;
    /**
     * The name of the custom device, displayed in the UI.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The list of DNS names related to the custom device.
     */
    dnsNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Dynatrace EntityID of this resource. If you need to refer to this custom device within other resources you want to use this ID
     */
    entityId?: pulumi.Input<string>;
    /**
     * The icon to be displayed for your custom component within Smartscape. Provide the full URL of the icon file.
     */
    faviconUrl?: pulumi.Input<string>;
    /**
     * User defined group of entity. Changing the group requires a new custom device to be created.
     */
    group?: pulumi.Input<string>;
    /**
     * The list of IP addresses that belong to the custom device.
     */
    ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of ports the custom devices listens to.
     */
    listenPorts?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The list of key-value pair properties that will be shown beneath the infographics of your custom device.
     *
     * @deprecated Please use the attribute `props` instead
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The list of key-value pair properties that will be shown beneath the infographics of your custom device.
     */
    props?: pulumi.Input<string>;
    /**
     * The technology type definition of the custom device.
     */
    type?: pulumi.Input<string>;
    /**
     * If `true` the custom device will be handled as if it was created via UI. It will be refreshed automatically and won't age out. This attribute is taken into consideration when creating the custom device. Changing it afterwards won't have an effect.
     */
    uiBased?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a CustomDevice resource.
 */
export interface CustomDeviceArgs {
    /**
     * The URL of a configuration web page for the custom device, such as a login page for a firewall or router.
     */
    configUrl?: pulumi.Input<string>;
    customDeviceId?: pulumi.Input<string>;
    /**
     * The name of the custom device, displayed in the UI.
     */
    displayName: pulumi.Input<string>;
    /**
     * The list of DNS names related to the custom device.
     */
    dnsNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The icon to be displayed for your custom component within Smartscape. Provide the full URL of the icon file.
     */
    faviconUrl?: pulumi.Input<string>;
    /**
     * User defined group of entity. Changing the group requires a new custom device to be created.
     */
    group?: pulumi.Input<string>;
    /**
     * The list of IP addresses that belong to the custom device.
     */
    ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of ports the custom devices listens to.
     */
    listenPorts?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The list of key-value pair properties that will be shown beneath the infographics of your custom device.
     *
     * @deprecated Please use the attribute `props` instead
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The list of key-value pair properties that will be shown beneath the infographics of your custom device.
     */
    props?: pulumi.Input<string>;
    /**
     * The technology type definition of the custom device.
     */
    type?: pulumi.Input<string>;
    /**
     * If `true` the custom device will be handled as if it was created via UI. It will be refreshed automatically and won't age out. This attribute is taken into consideration when creating the custom device. Changing it afterwards won't have an effect.
     */
    uiBased?: pulumi.Input<boolean>;
}
