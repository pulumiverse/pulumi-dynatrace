// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class GitlabConnection extends pulumi.CustomResource {
    /**
     * Get an existing GitlabConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GitlabConnectionState, opts?: pulumi.CustomResourceOptions): GitlabConnection {
        return new GitlabConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/gitlabConnection:GitlabConnection';

    /**
     * Returns true if the given object is an instance of GitlabConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GitlabConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GitlabConnection.__pulumiType;
    }

    /**
     * A unique and clearly identifiable connection name to your GitLab instance.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The GitLab token to use for authentication. Please note that this token is not refreshed and can expire.
     */
    declare public readonly token: pulumi.Output<string>;
    /**
     * The GitLab URL instance you want to connect. For example, https://gitlab.com
     */
    declare public readonly url: pulumi.Output<string>;

    /**
     * Create a GitlabConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GitlabConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GitlabConnectionArgs | GitlabConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GitlabConnectionState | undefined;
            resourceInputs["name"] = state?.name;
            resourceInputs["token"] = state?.token;
            resourceInputs["url"] = state?.url;
        } else {
            const args = argsOrState as GitlabConnectionArgs | undefined;
            if (args?.token === undefined && !opts.urn) {
                throw new Error("Missing required property 'token'");
            }
            if (args?.url === undefined && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["name"] = args?.name;
            resourceInputs["token"] = args?.token ? pulumi.secret(args.token) : undefined;
            resourceInputs["url"] = args?.url;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["token"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(GitlabConnection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GitlabConnection resources.
 */
export interface GitlabConnectionState {
    /**
     * A unique and clearly identifiable connection name to your GitLab instance.
     */
    name?: pulumi.Input<string>;
    /**
     * The GitLab token to use for authentication. Please note that this token is not refreshed and can expire.
     */
    token?: pulumi.Input<string>;
    /**
     * The GitLab URL instance you want to connect. For example, https://gitlab.com
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GitlabConnection resource.
 */
export interface GitlabConnectionArgs {
    /**
     * A unique and clearly identifiable connection name to your GitLab instance.
     */
    name?: pulumi.Input<string>;
    /**
     * The GitLab token to use for authentication. Please note that this token is not refreshed and can expire.
     */
    token: pulumi.Input<string>;
    /**
     * The GitLab URL instance you want to connect. For example, https://gitlab.com
     */
    url: pulumi.Input<string>;
}
