// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * > This resource requires the API token scopes **Read settings** (`settings.read`) and **Write settings** (`settings.write`)
 *
 * ## Dynatrace Documentation
 *
 * - Trace sampling - https://docs.dynatrace.com/docs/shortlink/url-sampling
 *
 * - Settings API - https://www.dynatrace.com/support/help/dynatrace-api/environment-api/settings (schemaId: `builtin:rpc-based-sampling`)
 *
 * ## Resource Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dynatrace from "@pulumiverse/dynatrace";
 *
 * const _name_ = new dynatrace.RpcBasedSampling("#name#", {
 *     enabled: false,
 *     endpointName: "#name#-endpoint",
 *     endpointNameComparisonType: "DOES_NOT_END_WITH",
 *     ignore: true,
 *     remoteOperationName: "#name#-operation",
 *     remoteOperationNameComparisonType: "CONTAINS",
 *     remoteServiceName: "#name#-service",
 *     remoteServiceNameComparisonType: "STARTS_WITH",
 *     scope: "environment",
 *     wireProtocolType: "8",
 * });
 * ```
 */
export class RpcBasedSampling extends pulumi.CustomResource {
    /**
     * Get an existing RpcBasedSampling resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RpcBasedSamplingState, opts?: pulumi.CustomResourceOptions): RpcBasedSampling {
        return new RpcBasedSampling(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/rpcBasedSampling:RpcBasedSampling';

    /**
     * Returns true if the given object is an instance of RpcBasedSampling.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RpcBasedSampling {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RpcBasedSampling.__pulumiType;
    }

    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Specify the RPC endpoint name. If the endpoint name is empty, either remote operation name or remote service name must
     * be specified that can be used for RPC matching.
     */
    public readonly endpointName!: pulumi.Output<string | undefined>;
    /**
     * Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_END_WITH`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`,
     * `ENDS_WITH`, `EQUALS`, `STARTS_WITH`
     */
    public readonly endpointNameComparisonType!: pulumi.Output<string>;
    /**
     * Possible Values: `0`, `1`, `2`, `3`, `4`, `5`, `6`, `8`, `9`, `10`, `11`, `12`, `13`, `14` - `0`: Increase capturing 128
     * times - `1`: Increase capturing 64 times - `2`: Increase capturing 32 times - `3`: Increase capturing 16 times - `4`:
     * Increase capturing 8 times - `5`: Increase capturing 4 times - `6`: Increase capturing 2 times - `8`: Reduce capturing
     * by factor 2 - `9`: Reduce capturing by factor 4 - `10`: Reduce capturing by factor 8 - `11`: Reduce capturing by factor
     * 16 - `12`: Reduce capturing by factor 32 - `13`: Reduce capturing by factor 64 - `14`: Reduce capturing by factor 128
     */
    public readonly factor!: pulumi.Output<string | undefined>;
    /**
     * No Traces will be captured for matching RPC requests. This applies always, even if Adaptive Traffic Management is
     * inactive.
     */
    public readonly ignore!: pulumi.Output<boolean>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this
     * instance regarding order. If not specified when creating the setting will be added to the end of the list. If not
     * specified during update the order will remain untouched
     */
    public readonly insertAfter!: pulumi.Output<string>;
    /**
     * Specify the RPC operation name. If the remote operation name is empty, either remote service name or endpoint name must
     * be specified that can be used for RPC matching.
     */
    public readonly remoteOperationName!: pulumi.Output<string | undefined>;
    /**
     * Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_END_WITH`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`,
     * `ENDS_WITH`, `EQUALS`, `STARTS_WITH`
     */
    public readonly remoteOperationNameComparisonType!: pulumi.Output<string>;
    /**
     * Specify the RPC remote service name. If the remote service name is empty, either remote operation name or endpoint name
     * must be specified that can be used for RPC matching.
     */
    public readonly remoteServiceName!: pulumi.Output<string | undefined>;
    /**
     * Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_END_WITH`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`,
     * `ENDS_WITH`, `EQUALS`, `STARTS_WITH`
     */
    public readonly remoteServiceNameComparisonType!: pulumi.Output<string>;
    /**
     * The scope of this setting (PROCESS_GROUP_INSTANCE, PROCESS_GROUP, CLOUD_APPLICATION, CLOUD_APPLICATION_NAMESPACE,
     * KUBERNETES_CLUSTER, HOST_GROUP). Omit this property if you want to cover the whole environment.
     */
    public readonly scope!: pulumi.Output<string | undefined>;
    /**
     * Possible Values: `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10` - `1`: ADK - `2`: DOTNET_REMOTING - `3`:
     * DOTNET_REMOTING_TCP - `4`: DOTNET_REMOTING_HTTP - `5`: DOTNET_REMOTING_XMLRPC - `6`: GRPC - `7`: GRPC_BIDI - `8`:
     * GRPC_UNARY - `9`: GRPC_SERVERSTREAM - `10`: GRPC_CLIENTSTREAM
     */
    public readonly wireProtocolType!: pulumi.Output<string>;

    /**
     * Create a RpcBasedSampling resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RpcBasedSamplingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RpcBasedSamplingArgs | RpcBasedSamplingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RpcBasedSamplingState | undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["endpointName"] = state ? state.endpointName : undefined;
            resourceInputs["endpointNameComparisonType"] = state ? state.endpointNameComparisonType : undefined;
            resourceInputs["factor"] = state ? state.factor : undefined;
            resourceInputs["ignore"] = state ? state.ignore : undefined;
            resourceInputs["insertAfter"] = state ? state.insertAfter : undefined;
            resourceInputs["remoteOperationName"] = state ? state.remoteOperationName : undefined;
            resourceInputs["remoteOperationNameComparisonType"] = state ? state.remoteOperationNameComparisonType : undefined;
            resourceInputs["remoteServiceName"] = state ? state.remoteServiceName : undefined;
            resourceInputs["remoteServiceNameComparisonType"] = state ? state.remoteServiceNameComparisonType : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["wireProtocolType"] = state ? state.wireProtocolType : undefined;
        } else {
            const args = argsOrState as RpcBasedSamplingArgs | undefined;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.endpointNameComparisonType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpointNameComparisonType'");
            }
            if ((!args || args.ignore === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ignore'");
            }
            if ((!args || args.remoteOperationNameComparisonType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remoteOperationNameComparisonType'");
            }
            if ((!args || args.remoteServiceNameComparisonType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remoteServiceNameComparisonType'");
            }
            if ((!args || args.wireProtocolType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'wireProtocolType'");
            }
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["endpointName"] = args ? args.endpointName : undefined;
            resourceInputs["endpointNameComparisonType"] = args ? args.endpointNameComparisonType : undefined;
            resourceInputs["factor"] = args ? args.factor : undefined;
            resourceInputs["ignore"] = args ? args.ignore : undefined;
            resourceInputs["insertAfter"] = args ? args.insertAfter : undefined;
            resourceInputs["remoteOperationName"] = args ? args.remoteOperationName : undefined;
            resourceInputs["remoteOperationNameComparisonType"] = args ? args.remoteOperationNameComparisonType : undefined;
            resourceInputs["remoteServiceName"] = args ? args.remoteServiceName : undefined;
            resourceInputs["remoteServiceNameComparisonType"] = args ? args.remoteServiceNameComparisonType : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["wireProtocolType"] = args ? args.wireProtocolType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RpcBasedSampling.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RpcBasedSampling resources.
 */
export interface RpcBasedSamplingState {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Specify the RPC endpoint name. If the endpoint name is empty, either remote operation name or remote service name must
     * be specified that can be used for RPC matching.
     */
    endpointName?: pulumi.Input<string>;
    /**
     * Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_END_WITH`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`,
     * `ENDS_WITH`, `EQUALS`, `STARTS_WITH`
     */
    endpointNameComparisonType?: pulumi.Input<string>;
    /**
     * Possible Values: `0`, `1`, `2`, `3`, `4`, `5`, `6`, `8`, `9`, `10`, `11`, `12`, `13`, `14` - `0`: Increase capturing 128
     * times - `1`: Increase capturing 64 times - `2`: Increase capturing 32 times - `3`: Increase capturing 16 times - `4`:
     * Increase capturing 8 times - `5`: Increase capturing 4 times - `6`: Increase capturing 2 times - `8`: Reduce capturing
     * by factor 2 - `9`: Reduce capturing by factor 4 - `10`: Reduce capturing by factor 8 - `11`: Reduce capturing by factor
     * 16 - `12`: Reduce capturing by factor 32 - `13`: Reduce capturing by factor 64 - `14`: Reduce capturing by factor 128
     */
    factor?: pulumi.Input<string>;
    /**
     * No Traces will be captured for matching RPC requests. This applies always, even if Adaptive Traffic Management is
     * inactive.
     */
    ignore?: pulumi.Input<boolean>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this
     * instance regarding order. If not specified when creating the setting will be added to the end of the list. If not
     * specified during update the order will remain untouched
     */
    insertAfter?: pulumi.Input<string>;
    /**
     * Specify the RPC operation name. If the remote operation name is empty, either remote service name or endpoint name must
     * be specified that can be used for RPC matching.
     */
    remoteOperationName?: pulumi.Input<string>;
    /**
     * Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_END_WITH`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`,
     * `ENDS_WITH`, `EQUALS`, `STARTS_WITH`
     */
    remoteOperationNameComparisonType?: pulumi.Input<string>;
    /**
     * Specify the RPC remote service name. If the remote service name is empty, either remote operation name or endpoint name
     * must be specified that can be used for RPC matching.
     */
    remoteServiceName?: pulumi.Input<string>;
    /**
     * Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_END_WITH`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`,
     * `ENDS_WITH`, `EQUALS`, `STARTS_WITH`
     */
    remoteServiceNameComparisonType?: pulumi.Input<string>;
    /**
     * The scope of this setting (PROCESS_GROUP_INSTANCE, PROCESS_GROUP, CLOUD_APPLICATION, CLOUD_APPLICATION_NAMESPACE,
     * KUBERNETES_CLUSTER, HOST_GROUP). Omit this property if you want to cover the whole environment.
     */
    scope?: pulumi.Input<string>;
    /**
     * Possible Values: `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10` - `1`: ADK - `2`: DOTNET_REMOTING - `3`:
     * DOTNET_REMOTING_TCP - `4`: DOTNET_REMOTING_HTTP - `5`: DOTNET_REMOTING_XMLRPC - `6`: GRPC - `7`: GRPC_BIDI - `8`:
     * GRPC_UNARY - `9`: GRPC_SERVERSTREAM - `10`: GRPC_CLIENTSTREAM
     */
    wireProtocolType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RpcBasedSampling resource.
 */
export interface RpcBasedSamplingArgs {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Specify the RPC endpoint name. If the endpoint name is empty, either remote operation name or remote service name must
     * be specified that can be used for RPC matching.
     */
    endpointName?: pulumi.Input<string>;
    /**
     * Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_END_WITH`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`,
     * `ENDS_WITH`, `EQUALS`, `STARTS_WITH`
     */
    endpointNameComparisonType: pulumi.Input<string>;
    /**
     * Possible Values: `0`, `1`, `2`, `3`, `4`, `5`, `6`, `8`, `9`, `10`, `11`, `12`, `13`, `14` - `0`: Increase capturing 128
     * times - `1`: Increase capturing 64 times - `2`: Increase capturing 32 times - `3`: Increase capturing 16 times - `4`:
     * Increase capturing 8 times - `5`: Increase capturing 4 times - `6`: Increase capturing 2 times - `8`: Reduce capturing
     * by factor 2 - `9`: Reduce capturing by factor 4 - `10`: Reduce capturing by factor 8 - `11`: Reduce capturing by factor
     * 16 - `12`: Reduce capturing by factor 32 - `13`: Reduce capturing by factor 64 - `14`: Reduce capturing by factor 128
     */
    factor?: pulumi.Input<string>;
    /**
     * No Traces will be captured for matching RPC requests. This applies always, even if Adaptive Traffic Management is
     * inactive.
     */
    ignore: pulumi.Input<boolean>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this
     * instance regarding order. If not specified when creating the setting will be added to the end of the list. If not
     * specified during update the order will remain untouched
     */
    insertAfter?: pulumi.Input<string>;
    /**
     * Specify the RPC operation name. If the remote operation name is empty, either remote service name or endpoint name must
     * be specified that can be used for RPC matching.
     */
    remoteOperationName?: pulumi.Input<string>;
    /**
     * Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_END_WITH`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`,
     * `ENDS_WITH`, `EQUALS`, `STARTS_WITH`
     */
    remoteOperationNameComparisonType: pulumi.Input<string>;
    /**
     * Specify the RPC remote service name. If the remote service name is empty, either remote operation name or endpoint name
     * must be specified that can be used for RPC matching.
     */
    remoteServiceName?: pulumi.Input<string>;
    /**
     * Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_END_WITH`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`,
     * `ENDS_WITH`, `EQUALS`, `STARTS_WITH`
     */
    remoteServiceNameComparisonType: pulumi.Input<string>;
    /**
     * The scope of this setting (PROCESS_GROUP_INSTANCE, PROCESS_GROUP, CLOUD_APPLICATION, CLOUD_APPLICATION_NAMESPACE,
     * KUBERNETES_CLUSTER, HOST_GROUP). Omit this property if you want to cover the whole environment.
     */
    scope?: pulumi.Input<string>;
    /**
     * Possible Values: `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10` - `1`: ADK - `2`: DOTNET_REMOTING - `3`:
     * DOTNET_REMOTING_TCP - `4`: DOTNET_REMOTING_HTTP - `5`: DOTNET_REMOTING_XMLRPC - `6`: GRPC - `7`: GRPC_BIDI - `8`:
     * GRPC_UNARY - `9`: GRPC_SERVERSTREAM - `10`: GRPC_CLIENTSTREAM
     */
    wireProtocolType: pulumi.Input<string>;
}
