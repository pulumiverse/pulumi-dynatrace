// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LogEvents extends pulumi.CustomResource {
    /**
     * Get an existing LogEvents resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogEventsState, opts?: pulumi.CustomResourceOptions): LogEvents {
        return new LogEvents(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/logEvents:LogEvents';

    /**
     * Returns true if the given object is an instance of LogEvents.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogEvents {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogEvents.__pulumiType;
    }

    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Event template
     */
    public readonly eventTemplate!: pulumi.Output<outputs.LogEventsEventTemplate>;
    /**
     * Log query
     */
    public readonly query!: pulumi.Output<string>;
    /**
     * The textual summary of the log event entry
     */
    public readonly summary!: pulumi.Output<string>;

    /**
     * Create a LogEvents resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogEventsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogEventsArgs | LogEventsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogEventsState | undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["eventTemplate"] = state ? state.eventTemplate : undefined;
            resourceInputs["query"] = state ? state.query : undefined;
            resourceInputs["summary"] = state ? state.summary : undefined;
        } else {
            const args = argsOrState as LogEventsArgs | undefined;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.eventTemplate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventTemplate'");
            }
            if ((!args || args.query === undefined) && !opts.urn) {
                throw new Error("Missing required property 'query'");
            }
            if ((!args || args.summary === undefined) && !opts.urn) {
                throw new Error("Missing required property 'summary'");
            }
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["eventTemplate"] = args ? args.eventTemplate : undefined;
            resourceInputs["query"] = args ? args.query : undefined;
            resourceInputs["summary"] = args ? args.summary : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogEvents.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LogEvents resources.
 */
export interface LogEventsState {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Event template
     */
    eventTemplate?: pulumi.Input<inputs.LogEventsEventTemplate>;
    /**
     * Log query
     */
    query?: pulumi.Input<string>;
    /**
     * The textual summary of the log event entry
     */
    summary?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LogEvents resource.
 */
export interface LogEventsArgs {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Event template
     */
    eventTemplate: pulumi.Input<inputs.LogEventsEventTemplate>;
    /**
     * Log query
     */
    query: pulumi.Input<string>;
    /**
     * The textual summary of the log event entry
     */
    summary: pulumi.Input<string>;
}
