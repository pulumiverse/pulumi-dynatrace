// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class K8sClusterAnomalies extends pulumi.CustomResource {
    /**
     * Get an existing K8sClusterAnomalies resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: K8sClusterAnomaliesState, opts?: pulumi.CustomResourceOptions): K8sClusterAnomalies {
        return new K8sClusterAnomalies(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/k8sClusterAnomalies:K8sClusterAnomalies';

    /**
     * Returns true if the given object is an instance of K8sClusterAnomalies.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is K8sClusterAnomalies {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === K8sClusterAnomalies.__pulumiType;
    }

    /**
     * no documentation available
     */
    public readonly cpuRequestsSaturation!: pulumi.Output<outputs.K8sClusterAnomaliesCpuRequestsSaturation>;
    /**
     * no documentation available
     */
    public readonly memoryRequestsSaturation!: pulumi.Output<outputs.K8sClusterAnomaliesMemoryRequestsSaturation>;
    /**
     * no documentation available
     */
    public readonly monitoringIssues!: pulumi.Output<outputs.K8sClusterAnomaliesMonitoringIssues>;
    /**
     * no documentation available
     */
    public readonly podsSaturation!: pulumi.Output<outputs.K8sClusterAnomaliesPodsSaturation>;
    /**
     * Alerts if cluster has not been ready for a given amount of time
     */
    public readonly readinessIssues!: pulumi.Output<outputs.K8sClusterAnomaliesReadinessIssues>;
    /**
     * The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
     */
    public readonly scope!: pulumi.Output<string | undefined>;

    /**
     * Create a K8sClusterAnomalies resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: K8sClusterAnomaliesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: K8sClusterAnomaliesArgs | K8sClusterAnomaliesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as K8sClusterAnomaliesState | undefined;
            resourceInputs["cpuRequestsSaturation"] = state ? state.cpuRequestsSaturation : undefined;
            resourceInputs["memoryRequestsSaturation"] = state ? state.memoryRequestsSaturation : undefined;
            resourceInputs["monitoringIssues"] = state ? state.monitoringIssues : undefined;
            resourceInputs["podsSaturation"] = state ? state.podsSaturation : undefined;
            resourceInputs["readinessIssues"] = state ? state.readinessIssues : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
        } else {
            const args = argsOrState as K8sClusterAnomaliesArgs | undefined;
            if ((!args || args.cpuRequestsSaturation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cpuRequestsSaturation'");
            }
            if ((!args || args.memoryRequestsSaturation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'memoryRequestsSaturation'");
            }
            if ((!args || args.monitoringIssues === undefined) && !opts.urn) {
                throw new Error("Missing required property 'monitoringIssues'");
            }
            if ((!args || args.podsSaturation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'podsSaturation'");
            }
            if ((!args || args.readinessIssues === undefined) && !opts.urn) {
                throw new Error("Missing required property 'readinessIssues'");
            }
            resourceInputs["cpuRequestsSaturation"] = args ? args.cpuRequestsSaturation : undefined;
            resourceInputs["memoryRequestsSaturation"] = args ? args.memoryRequestsSaturation : undefined;
            resourceInputs["monitoringIssues"] = args ? args.monitoringIssues : undefined;
            resourceInputs["podsSaturation"] = args ? args.podsSaturation : undefined;
            resourceInputs["readinessIssues"] = args ? args.readinessIssues : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(K8sClusterAnomalies.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering K8sClusterAnomalies resources.
 */
export interface K8sClusterAnomaliesState {
    /**
     * no documentation available
     */
    cpuRequestsSaturation?: pulumi.Input<inputs.K8sClusterAnomaliesCpuRequestsSaturation>;
    /**
     * no documentation available
     */
    memoryRequestsSaturation?: pulumi.Input<inputs.K8sClusterAnomaliesMemoryRequestsSaturation>;
    /**
     * no documentation available
     */
    monitoringIssues?: pulumi.Input<inputs.K8sClusterAnomaliesMonitoringIssues>;
    /**
     * no documentation available
     */
    podsSaturation?: pulumi.Input<inputs.K8sClusterAnomaliesPodsSaturation>;
    /**
     * Alerts if cluster has not been ready for a given amount of time
     */
    readinessIssues?: pulumi.Input<inputs.K8sClusterAnomaliesReadinessIssues>;
    /**
     * The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
     */
    scope?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a K8sClusterAnomalies resource.
 */
export interface K8sClusterAnomaliesArgs {
    /**
     * no documentation available
     */
    cpuRequestsSaturation: pulumi.Input<inputs.K8sClusterAnomaliesCpuRequestsSaturation>;
    /**
     * no documentation available
     */
    memoryRequestsSaturation: pulumi.Input<inputs.K8sClusterAnomaliesMemoryRequestsSaturation>;
    /**
     * no documentation available
     */
    monitoringIssues: pulumi.Input<inputs.K8sClusterAnomaliesMonitoringIssues>;
    /**
     * no documentation available
     */
    podsSaturation: pulumi.Input<inputs.K8sClusterAnomaliesPodsSaturation>;
    /**
     * Alerts if cluster has not been ready for a given amount of time
     */
    readinessIssues: pulumi.Input<inputs.K8sClusterAnomaliesReadinessIssues>;
    /**
     * The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
     */
    scope?: pulumi.Input<string>;
}
