// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OpenpipelineV2UsersessionsIngestsources extends pulumi.CustomResource {
    /**
     * Get an existing OpenpipelineV2UsersessionsIngestsources resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OpenpipelineV2UsersessionsIngestsourcesState, opts?: pulumi.CustomResourceOptions): OpenpipelineV2UsersessionsIngestsources {
        return new OpenpipelineV2UsersessionsIngestsources(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/openpipelineV2UsersessionsIngestsources:OpenpipelineV2UsersessionsIngestsources';

    /**
     * Returns true if the given object is an instance of OpenpipelineV2UsersessionsIngestsources.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OpenpipelineV2UsersessionsIngestsources {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OpenpipelineV2UsersessionsIngestsources.__pulumiType;
    }

    /**
     * Default Bucket
     */
    declare public readonly defaultBucket: pulumi.Output<string | undefined>;
    /**
     * Endpoint display name
     */
    declare public readonly displayName: pulumi.Output<string>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * Endpoint segment
     */
    declare public readonly pathSegment: pulumi.Output<string>;
    /**
     * Processing stage
     */
    declare public readonly processing: pulumi.Output<outputs.OpenpipelineV2UsersessionsIngestsourcesProcessing>;
    /**
     * Static routing of endpoint
     */
    declare public readonly staticRouting: pulumi.Output<outputs.OpenpipelineV2UsersessionsIngestsourcesStaticRouting | undefined>;

    /**
     * Create a OpenpipelineV2UsersessionsIngestsources resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OpenpipelineV2UsersessionsIngestsourcesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OpenpipelineV2UsersessionsIngestsourcesArgs | OpenpipelineV2UsersessionsIngestsourcesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OpenpipelineV2UsersessionsIngestsourcesState | undefined;
            resourceInputs["defaultBucket"] = state?.defaultBucket;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["pathSegment"] = state?.pathSegment;
            resourceInputs["processing"] = state?.processing;
            resourceInputs["staticRouting"] = state?.staticRouting;
        } else {
            const args = argsOrState as OpenpipelineV2UsersessionsIngestsourcesArgs | undefined;
            if (args?.displayName === undefined && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if (args?.enabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if (args?.pathSegment === undefined && !opts.urn) {
                throw new Error("Missing required property 'pathSegment'");
            }
            if (args?.processing === undefined && !opts.urn) {
                throw new Error("Missing required property 'processing'");
            }
            resourceInputs["defaultBucket"] = args?.defaultBucket;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["pathSegment"] = args?.pathSegment;
            resourceInputs["processing"] = args?.processing;
            resourceInputs["staticRouting"] = args?.staticRouting;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OpenpipelineV2UsersessionsIngestsources.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OpenpipelineV2UsersessionsIngestsources resources.
 */
export interface OpenpipelineV2UsersessionsIngestsourcesState {
    /**
     * Default Bucket
     */
    defaultBucket?: pulumi.Input<string>;
    /**
     * Endpoint display name
     */
    displayName?: pulumi.Input<string>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Endpoint segment
     */
    pathSegment?: pulumi.Input<string>;
    /**
     * Processing stage
     */
    processing?: pulumi.Input<inputs.OpenpipelineV2UsersessionsIngestsourcesProcessing>;
    /**
     * Static routing of endpoint
     */
    staticRouting?: pulumi.Input<inputs.OpenpipelineV2UsersessionsIngestsourcesStaticRouting>;
}

/**
 * The set of arguments for constructing a OpenpipelineV2UsersessionsIngestsources resource.
 */
export interface OpenpipelineV2UsersessionsIngestsourcesArgs {
    /**
     * Default Bucket
     */
    defaultBucket?: pulumi.Input<string>;
    /**
     * Endpoint display name
     */
    displayName: pulumi.Input<string>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Endpoint segment
     */
    pathSegment: pulumi.Input<string>;
    /**
     * Processing stage
     */
    processing: pulumi.Input<inputs.OpenpipelineV2UsersessionsIngestsourcesProcessing>;
    /**
     * Static routing of endpoint
     */
    staticRouting?: pulumi.Input<inputs.OpenpipelineV2UsersessionsIngestsourcesStaticRouting>;
}
