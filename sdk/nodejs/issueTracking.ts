// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class IssueTracking extends pulumi.CustomResource {
    /**
     * Get an existing IssueTracking resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IssueTrackingState, opts?: pulumi.CustomResourceOptions): IssueTracking {
        return new IssueTracking(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/issueTracking:IssueTracking';

    /**
     * Returns true if the given object is an instance of IssueTracking.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IssueTracking {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IssueTracking.__pulumiType;
    }

    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
     */
    declare public readonly insertAfter: pulumi.Output<string>;
    /**
     * Set a label to identify these issues, for example, `releaseBlocker` or `non-critical`
     */
    declare public readonly issuelabel: pulumi.Output<string>;
    /**
     * You can use the following placeholders to automatically insert values from the **Release monitoring** page in your query: `{NAME}`, `{VERSION}`, `{STAGE}`, `{PRODUCT}`.
     */
    declare public readonly issuequery: pulumi.Output<string>;
    /**
     * Possible Values: `ERROR`, `INFO`, `RESOLVED`
     */
    declare public readonly issuetheme: pulumi.Output<string>;
    /**
     * Possible Values: `GITHUB`, `GITLAB`, `JIRA`, `JIRA_CLOUD`, `JIRA_ON_PREMISE`, `SERVICENOW`
     */
    declare public readonly issuetrackersystem: pulumi.Output<string>;
    /**
     * Password
     */
    declare public readonly password: pulumi.Output<string | undefined>;
    /**
     * Token
     */
    declare public readonly token: pulumi.Output<string | undefined>;
    /**
     * For Jira, use the base URL (for example, https://jira.yourcompany.com); for GitHub, use the repository URL (for example, https://github.com/org/repo); for GitLab, use the specific project API for a single project (for example, https://gitlab.com/api/v4/projects/:projectId), and the specific group API for a multiple projects (for example, https://gitlab.com/api/v4/groups/:groupId); for ServiceNow, use your company instance URL (for example, https://yourinstance.service-now.com/)
     */
    declare public readonly url: pulumi.Output<string>;
    /**
     * Username
     */
    declare public readonly username: pulumi.Output<string>;

    /**
     * Create a IssueTracking resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IssueTrackingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IssueTrackingArgs | IssueTrackingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IssueTrackingState | undefined;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["insertAfter"] = state?.insertAfter;
            resourceInputs["issuelabel"] = state?.issuelabel;
            resourceInputs["issuequery"] = state?.issuequery;
            resourceInputs["issuetheme"] = state?.issuetheme;
            resourceInputs["issuetrackersystem"] = state?.issuetrackersystem;
            resourceInputs["password"] = state?.password;
            resourceInputs["token"] = state?.token;
            resourceInputs["url"] = state?.url;
            resourceInputs["username"] = state?.username;
        } else {
            const args = argsOrState as IssueTrackingArgs | undefined;
            if (args?.enabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if (args?.issuelabel === undefined && !opts.urn) {
                throw new Error("Missing required property 'issuelabel'");
            }
            if (args?.issuequery === undefined && !opts.urn) {
                throw new Error("Missing required property 'issuequery'");
            }
            if (args?.issuetheme === undefined && !opts.urn) {
                throw new Error("Missing required property 'issuetheme'");
            }
            if (args?.issuetrackersystem === undefined && !opts.urn) {
                throw new Error("Missing required property 'issuetrackersystem'");
            }
            if (args?.url === undefined && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            if (args?.username === undefined && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["insertAfter"] = args?.insertAfter;
            resourceInputs["issuelabel"] = args?.issuelabel;
            resourceInputs["issuequery"] = args?.issuequery;
            resourceInputs["issuetheme"] = args?.issuetheme;
            resourceInputs["issuetrackersystem"] = args?.issuetrackersystem;
            resourceInputs["password"] = args?.password;
            resourceInputs["token"] = args?.token ? pulumi.secret(args.token) : undefined;
            resourceInputs["url"] = args?.url;
            resourceInputs["username"] = args?.username;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["token"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(IssueTracking.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IssueTracking resources.
 */
export interface IssueTrackingState {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
     */
    insertAfter?: pulumi.Input<string>;
    /**
     * Set a label to identify these issues, for example, `releaseBlocker` or `non-critical`
     */
    issuelabel?: pulumi.Input<string>;
    /**
     * You can use the following placeholders to automatically insert values from the **Release monitoring** page in your query: `{NAME}`, `{VERSION}`, `{STAGE}`, `{PRODUCT}`.
     */
    issuequery?: pulumi.Input<string>;
    /**
     * Possible Values: `ERROR`, `INFO`, `RESOLVED`
     */
    issuetheme?: pulumi.Input<string>;
    /**
     * Possible Values: `GITHUB`, `GITLAB`, `JIRA`, `JIRA_CLOUD`, `JIRA_ON_PREMISE`, `SERVICENOW`
     */
    issuetrackersystem?: pulumi.Input<string>;
    /**
     * Password
     */
    password?: pulumi.Input<string>;
    /**
     * Token
     */
    token?: pulumi.Input<string>;
    /**
     * For Jira, use the base URL (for example, https://jira.yourcompany.com); for GitHub, use the repository URL (for example, https://github.com/org/repo); for GitLab, use the specific project API for a single project (for example, https://gitlab.com/api/v4/projects/:projectId), and the specific group API for a multiple projects (for example, https://gitlab.com/api/v4/groups/:groupId); for ServiceNow, use your company instance URL (for example, https://yourinstance.service-now.com/)
     */
    url?: pulumi.Input<string>;
    /**
     * Username
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IssueTracking resource.
 */
export interface IssueTrackingArgs {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
     */
    insertAfter?: pulumi.Input<string>;
    /**
     * Set a label to identify these issues, for example, `releaseBlocker` or `non-critical`
     */
    issuelabel: pulumi.Input<string>;
    /**
     * You can use the following placeholders to automatically insert values from the **Release monitoring** page in your query: `{NAME}`, `{VERSION}`, `{STAGE}`, `{PRODUCT}`.
     */
    issuequery: pulumi.Input<string>;
    /**
     * Possible Values: `ERROR`, `INFO`, `RESOLVED`
     */
    issuetheme: pulumi.Input<string>;
    /**
     * Possible Values: `GITHUB`, `GITLAB`, `JIRA`, `JIRA_CLOUD`, `JIRA_ON_PREMISE`, `SERVICENOW`
     */
    issuetrackersystem: pulumi.Input<string>;
    /**
     * Password
     */
    password?: pulumi.Input<string>;
    /**
     * Token
     */
    token?: pulumi.Input<string>;
    /**
     * For Jira, use the base URL (for example, https://jira.yourcompany.com); for GitHub, use the repository URL (for example, https://github.com/org/repo); for GitLab, use the specific project API for a single project (for example, https://gitlab.com/api/v4/projects/:projectId), and the specific group API for a multiple projects (for example, https://gitlab.com/api/v4/groups/:groupId); for ServiceNow, use your company instance URL (for example, https://yourinstance.service-now.com/)
     */
    url: pulumi.Input<string>;
    /**
     * Username
     */
    username: pulumi.Input<string>;
}
