// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DeclarativeGrouping extends pulumi.CustomResource {
    /**
     * Get an existing DeclarativeGrouping resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeclarativeGroupingState, opts?: pulumi.CustomResourceOptions): DeclarativeGrouping {
        return new DeclarativeGrouping(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/declarativeGrouping:DeclarativeGrouping';

    /**
     * Returns true if the given object is an instance of DeclarativeGrouping.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DeclarativeGrouping {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DeclarativeGrouping.__pulumiType;
    }

    /**
     * Enter a descriptive process group display name and a unique identifier that Dynatrace can use to recognize this process
     * group.
     */
    declare public readonly detection: pulumi.Output<outputs.DeclarativeGroupingDetection>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this
     * instance regarding order. If not specified when creating the setting will be added to the end of the list. If not
     * specified during update the order will remain untouched
     */
    declare public readonly insertAfter: pulumi.Output<string>;
    /**
     * Monitored technology name
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
     */
    declare public readonly scope: pulumi.Output<string | undefined>;

    /**
     * Create a DeclarativeGrouping resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeclarativeGroupingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeclarativeGroupingArgs | DeclarativeGroupingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeclarativeGroupingState | undefined;
            resourceInputs["detection"] = state?.detection;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["insertAfter"] = state?.insertAfter;
            resourceInputs["name"] = state?.name;
            resourceInputs["scope"] = state?.scope;
        } else {
            const args = argsOrState as DeclarativeGroupingArgs | undefined;
            if (args?.detection === undefined && !opts.urn) {
                throw new Error("Missing required property 'detection'");
            }
            if (args?.enabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            resourceInputs["detection"] = args?.detection;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["insertAfter"] = args?.insertAfter;
            resourceInputs["name"] = args?.name;
            resourceInputs["scope"] = args?.scope;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DeclarativeGrouping.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DeclarativeGrouping resources.
 */
export interface DeclarativeGroupingState {
    /**
     * Enter a descriptive process group display name and a unique identifier that Dynatrace can use to recognize this process
     * group.
     */
    detection?: pulumi.Input<inputs.DeclarativeGroupingDetection>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this
     * instance regarding order. If not specified when creating the setting will be added to the end of the list. If not
     * specified during update the order will remain untouched
     */
    insertAfter?: pulumi.Input<string>;
    /**
     * Monitored technology name
     */
    name?: pulumi.Input<string>;
    /**
     * The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
     */
    scope?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DeclarativeGrouping resource.
 */
export interface DeclarativeGroupingArgs {
    /**
     * Enter a descriptive process group display name and a unique identifier that Dynatrace can use to recognize this process
     * group.
     */
    detection: pulumi.Input<inputs.DeclarativeGroupingDetection>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this
     * instance regarding order. If not specified when creating the setting will be added to the end of the list. If not
     * specified during update the order will remain untouched
     */
    insertAfter?: pulumi.Input<string>;
    /**
     * Monitored technology name
     */
    name?: pulumi.Input<string>;
    /**
     * The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
     */
    scope?: pulumi.Input<string>;
}
