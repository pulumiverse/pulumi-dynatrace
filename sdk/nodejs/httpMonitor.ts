// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class HttpMonitor extends pulumi.CustomResource {
    /**
     * Get an existing HttpMonitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HttpMonitorState, opts?: pulumi.CustomResourceOptions): HttpMonitor {
        return new HttpMonitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/httpMonitor:HttpMonitor';

    /**
     * Returns true if the given object is an instance of HttpMonitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HttpMonitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HttpMonitor.__pulumiType;
    }

    /**
     * The anomaly detection configuration.
     */
    declare public readonly anomalyDetections: pulumi.Output<outputs.HttpMonitorAnomalyDetection[] | undefined>;
    /**
     * The monitor is enabled (`true`) or disabled (`false`).
     */
    declare public readonly enabled: pulumi.Output<boolean | undefined>;
    /**
     * The frequency of the monitor, in minutes.
     */
    declare public readonly frequency: pulumi.Output<number>;
    /**
     * A list of locations from which the monitor is executed.
     *
     * To specify a location, use its entity ID.
     */
    declare public readonly locations: pulumi.Output<string[] | undefined>;
    /**
     * A set of manually assigned applications.
     */
    declare public readonly manuallyAssignedApps: pulumi.Output<string[] | undefined>;
    /**
     * The name of the monitor.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * No script block - handle requests via `dynatrace.HttpMonitorScript` resource
     */
    declare public readonly noScript: pulumi.Output<boolean | undefined>;
    /**
     * The HTTP Script
     */
    declare public readonly script: pulumi.Output<outputs.HttpMonitorScript | undefined>;
    /**
     * A set of tags assigned to the monitor.
     *
     * You can specify only the value of the tag here and the `CONTEXTLESS` context and source 'USER' will be added automatically.
     */
    declare public readonly tags: pulumi.Output<outputs.HttpMonitorTag[] | undefined>;

    /**
     * Create a HttpMonitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HttpMonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HttpMonitorArgs | HttpMonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HttpMonitorState | undefined;
            resourceInputs["anomalyDetections"] = state?.anomalyDetections;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["frequency"] = state?.frequency;
            resourceInputs["locations"] = state?.locations;
            resourceInputs["manuallyAssignedApps"] = state?.manuallyAssignedApps;
            resourceInputs["name"] = state?.name;
            resourceInputs["noScript"] = state?.noScript;
            resourceInputs["script"] = state?.script;
            resourceInputs["tags"] = state?.tags;
        } else {
            const args = argsOrState as HttpMonitorArgs | undefined;
            if (args?.frequency === undefined && !opts.urn) {
                throw new Error("Missing required property 'frequency'");
            }
            resourceInputs["anomalyDetections"] = args?.anomalyDetections;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["frequency"] = args?.frequency;
            resourceInputs["locations"] = args?.locations;
            resourceInputs["manuallyAssignedApps"] = args?.manuallyAssignedApps;
            resourceInputs["name"] = args?.name;
            resourceInputs["noScript"] = args?.noScript;
            resourceInputs["script"] = args?.script;
            resourceInputs["tags"] = args?.tags;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HttpMonitor.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering HttpMonitor resources.
 */
export interface HttpMonitorState {
    /**
     * The anomaly detection configuration.
     */
    anomalyDetections?: pulumi.Input<pulumi.Input<inputs.HttpMonitorAnomalyDetection>[]>;
    /**
     * The monitor is enabled (`true`) or disabled (`false`).
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The frequency of the monitor, in minutes.
     */
    frequency?: pulumi.Input<number>;
    /**
     * A list of locations from which the monitor is executed.
     *
     * To specify a location, use its entity ID.
     */
    locations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A set of manually assigned applications.
     */
    manuallyAssignedApps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the monitor.
     */
    name?: pulumi.Input<string>;
    /**
     * No script block - handle requests via `dynatrace.HttpMonitorScript` resource
     */
    noScript?: pulumi.Input<boolean>;
    /**
     * The HTTP Script
     */
    script?: pulumi.Input<inputs.HttpMonitorScript>;
    /**
     * A set of tags assigned to the monitor.
     *
     * You can specify only the value of the tag here and the `CONTEXTLESS` context and source 'USER' will be added automatically.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.HttpMonitorTag>[]>;
}

/**
 * The set of arguments for constructing a HttpMonitor resource.
 */
export interface HttpMonitorArgs {
    /**
     * The anomaly detection configuration.
     */
    anomalyDetections?: pulumi.Input<pulumi.Input<inputs.HttpMonitorAnomalyDetection>[]>;
    /**
     * The monitor is enabled (`true`) or disabled (`false`).
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The frequency of the monitor, in minutes.
     */
    frequency: pulumi.Input<number>;
    /**
     * A list of locations from which the monitor is executed.
     *
     * To specify a location, use its entity ID.
     */
    locations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A set of manually assigned applications.
     */
    manuallyAssignedApps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the monitor.
     */
    name?: pulumi.Input<string>;
    /**
     * No script block - handle requests via `dynatrace.HttpMonitorScript` resource
     */
    noScript?: pulumi.Input<boolean>;
    /**
     * The HTTP Script
     */
    script?: pulumi.Input<inputs.HttpMonitorScript>;
    /**
     * A set of tags assigned to the monitor.
     *
     * You can specify only the value of the tag here and the `CONTEXTLESS` context and source 'USER' will be added automatically.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.HttpMonitorTag>[]>;
}
