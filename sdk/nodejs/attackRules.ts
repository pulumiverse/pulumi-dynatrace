// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AttackRules extends pulumi.CustomResource {
    /**
     * Get an existing AttackRules resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AttackRulesState, opts?: pulumi.CustomResourceOptions): AttackRules {
        return new AttackRules(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/attackRules:AttackRules';

    /**
     * Returns true if the given object is an instance of AttackRules.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AttackRules {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AttackRules.__pulumiType;
    }

    /**
     * Step 1: Select attack protection behavior
     */
    declare public readonly attackHandling: pulumi.Output<outputs.AttackRulesAttackHandling>;
    /**
     * Step 2: Select attack type
     */
    declare public readonly criteria: pulumi.Output<outputs.AttackRulesCriteria>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
     */
    declare public readonly insertAfter: pulumi.Output<string>;
    /**
     * Step 4: Leave comment (optional)
     */
    declare public readonly metadata: pulumi.Output<outputs.AttackRulesMetadata>;
    /**
     * If you add more than one condition, note that all conditions must be true simultaneously for the rule to apply.
     */
    declare public readonly resourceAttributeConditions: pulumi.Output<outputs.AttackRulesResourceAttributeConditions | undefined>;
    /**
     * Rule name
     */
    declare public readonly ruleName: pulumi.Output<string | undefined>;

    /**
     * Create a AttackRules resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AttackRulesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AttackRulesArgs | AttackRulesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AttackRulesState | undefined;
            resourceInputs["attackHandling"] = state?.attackHandling;
            resourceInputs["criteria"] = state?.criteria;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["insertAfter"] = state?.insertAfter;
            resourceInputs["metadata"] = state?.metadata;
            resourceInputs["resourceAttributeConditions"] = state?.resourceAttributeConditions;
            resourceInputs["ruleName"] = state?.ruleName;
        } else {
            const args = argsOrState as AttackRulesArgs | undefined;
            if (args?.attackHandling === undefined && !opts.urn) {
                throw new Error("Missing required property 'attackHandling'");
            }
            if (args?.criteria === undefined && !opts.urn) {
                throw new Error("Missing required property 'criteria'");
            }
            if (args?.enabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if (args?.metadata === undefined && !opts.urn) {
                throw new Error("Missing required property 'metadata'");
            }
            resourceInputs["attackHandling"] = args?.attackHandling;
            resourceInputs["criteria"] = args?.criteria;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["insertAfter"] = args?.insertAfter;
            resourceInputs["metadata"] = args?.metadata;
            resourceInputs["resourceAttributeConditions"] = args?.resourceAttributeConditions;
            resourceInputs["ruleName"] = args?.ruleName;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AttackRules.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AttackRules resources.
 */
export interface AttackRulesState {
    /**
     * Step 1: Select attack protection behavior
     */
    attackHandling?: pulumi.Input<inputs.AttackRulesAttackHandling>;
    /**
     * Step 2: Select attack type
     */
    criteria?: pulumi.Input<inputs.AttackRulesCriteria>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
     */
    insertAfter?: pulumi.Input<string>;
    /**
     * Step 4: Leave comment (optional)
     */
    metadata?: pulumi.Input<inputs.AttackRulesMetadata>;
    /**
     * If you add more than one condition, note that all conditions must be true simultaneously for the rule to apply.
     */
    resourceAttributeConditions?: pulumi.Input<inputs.AttackRulesResourceAttributeConditions>;
    /**
     * Rule name
     */
    ruleName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AttackRules resource.
 */
export interface AttackRulesArgs {
    /**
     * Step 1: Select attack protection behavior
     */
    attackHandling: pulumi.Input<inputs.AttackRulesAttackHandling>;
    /**
     * Step 2: Select attack type
     */
    criteria: pulumi.Input<inputs.AttackRulesCriteria>;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
     */
    insertAfter?: pulumi.Input<string>;
    /**
     * Step 4: Leave comment (optional)
     */
    metadata: pulumi.Input<inputs.AttackRulesMetadata>;
    /**
     * If you add more than one condition, note that all conditions must be true simultaneously for the rule to apply.
     */
    resourceAttributeConditions?: pulumi.Input<inputs.AttackRulesResourceAttributeConditions>;
    /**
     * Rule name
     */
    ruleName?: pulumi.Input<string>;
}
