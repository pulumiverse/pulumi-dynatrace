// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ApplicationDetectionRule extends pulumi.CustomResource {
    /**
     * Get an existing ApplicationDetectionRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationDetectionRuleState, opts?: pulumi.CustomResourceOptions): ApplicationDetectionRule {
        return new ApplicationDetectionRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/applicationDetectionRule:ApplicationDetectionRule';

    /**
     * Returns true if the given object is an instance of ApplicationDetectionRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplicationDetectionRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplicationDetectionRule.__pulumiType;
    }

    /**
     * The Dynatrace entity ID of the application, for example APPLICATION-4A3B43
     */
    declare public readonly applicationIdentifier: pulumi.Output<string>;
    /**
     * The condition of an application detection rule
     */
    declare public readonly filterConfig: pulumi.Output<outputs.ApplicationDetectionRuleFilterConfig>;
    /**
     * The unique name of the Application detection rule
     *
     * @deprecated Dynatrace computes that value automatically. Any attempts to specify that value will are getting ignored.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The order of the rule in the rules list
     */
    declare public readonly order: pulumi.Output<string | undefined>;

    /**
     * Create a ApplicationDetectionRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationDetectionRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationDetectionRuleArgs | ApplicationDetectionRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplicationDetectionRuleState | undefined;
            resourceInputs["applicationIdentifier"] = state?.applicationIdentifier;
            resourceInputs["filterConfig"] = state?.filterConfig;
            resourceInputs["name"] = state?.name;
            resourceInputs["order"] = state?.order;
        } else {
            const args = argsOrState as ApplicationDetectionRuleArgs | undefined;
            if (args?.applicationIdentifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'applicationIdentifier'");
            }
            if (args?.filterConfig === undefined && !opts.urn) {
                throw new Error("Missing required property 'filterConfig'");
            }
            resourceInputs["applicationIdentifier"] = args?.applicationIdentifier;
            resourceInputs["filterConfig"] = args?.filterConfig;
            resourceInputs["name"] = args?.name;
            resourceInputs["order"] = args?.order;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApplicationDetectionRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApplicationDetectionRule resources.
 */
export interface ApplicationDetectionRuleState {
    /**
     * The Dynatrace entity ID of the application, for example APPLICATION-4A3B43
     */
    applicationIdentifier?: pulumi.Input<string>;
    /**
     * The condition of an application detection rule
     */
    filterConfig?: pulumi.Input<inputs.ApplicationDetectionRuleFilterConfig>;
    /**
     * The unique name of the Application detection rule
     *
     * @deprecated Dynatrace computes that value automatically. Any attempts to specify that value will are getting ignored.
     */
    name?: pulumi.Input<string>;
    /**
     * The order of the rule in the rules list
     */
    order?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApplicationDetectionRule resource.
 */
export interface ApplicationDetectionRuleArgs {
    /**
     * The Dynatrace entity ID of the application, for example APPLICATION-4A3B43
     */
    applicationIdentifier: pulumi.Input<string>;
    /**
     * The condition of an application detection rule
     */
    filterConfig: pulumi.Input<inputs.ApplicationDetectionRuleFilterConfig>;
    /**
     * The unique name of the Application detection rule
     *
     * @deprecated Dynatrace computes that value automatically. Any attempts to specify that value will are getting ignored.
     */
    name?: pulumi.Input<string>;
    /**
     * The order of the rule in the rules list
     */
    order?: pulumi.Input<string>;
}
