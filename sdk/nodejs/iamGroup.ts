// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * > **Dynatrace SaaS only**
 *
 * > To utilize this resource, please define the environment variables `DT_CLIENT_ID`, `DT_CLIENT_SECRET`, `DT_ACCOUNT_ID` with an OAuth client including the following permissions: **Allow read access for identity resources (users and groups)** (`account-idm-read`) and **Allow write access for identity resources (users and groups)** (`account-idm-write`).
 *
 * > This resource is excluded by default in the export utility, please explicitly specify the resource to retrieve existing configuration.
 *
 * ## Dynatrace Documentation
 *
 * - Dynatrace IAM - https://www.dynatrace.com/support/help/how-to-use-dynatrace/user-management-and-sso/manage-groups-and-permissions
 *
 * - Settings API - https://www.dynatrace.com/support/help/how-to-use-dynatrace/user-management-and-sso/manage-groups-and-permissions/iam/iam-getting-started
 *
 * ## Resource Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dynatrace from "@pulumiverse/dynatrace";
 *
 * const restricted = new dynatrace.IamGroup("restricted", {permissions: {
 *     permissions: [{
 *         name: "tenant-viewer",
 *         scope: "<environment-id>:<managementzone-id>",
 *         type: "management-zone",
 *     }],
 * }});
 * ```
 */
export class IamGroup extends pulumi.CustomResource {
    /**
     * Get an existing IamGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IamGroupState, opts?: pulumi.CustomResourceOptions): IamGroup {
        return new IamGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/iamGroup:IamGroup';

    /**
     * Returns true if the given object is an instance of IamGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IamGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IamGroup.__pulumiType;
    }

    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly federatedAttributeValues: pulumi.Output<string[] | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly permissions: pulumi.Output<outputs.IamGroupPermissions | undefined>;

    /**
     * Create a IamGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: IamGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IamGroupArgs | IamGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IamGroupState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["federatedAttributeValues"] = state?.federatedAttributeValues;
            resourceInputs["name"] = state?.name;
            resourceInputs["permissions"] = state?.permissions;
        } else {
            const args = argsOrState as IamGroupArgs | undefined;
            resourceInputs["description"] = args?.description;
            resourceInputs["federatedAttributeValues"] = args?.federatedAttributeValues;
            resourceInputs["name"] = args?.name;
            resourceInputs["permissions"] = args?.permissions;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IamGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IamGroup resources.
 */
export interface IamGroupState {
    description?: pulumi.Input<string>;
    federatedAttributeValues?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    permissions?: pulumi.Input<inputs.IamGroupPermissions>;
}

/**
 * The set of arguments for constructing a IamGroup resource.
 */
export interface IamGroupArgs {
    description?: pulumi.Input<string>;
    federatedAttributeValues?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    permissions?: pulumi.Input<inputs.IamGroupPermissions>;
}
