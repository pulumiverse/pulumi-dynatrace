// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PolicyBindings extends pulumi.CustomResource {
    /**
     * Get an existing PolicyBindings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyBindingsState, opts?: pulumi.CustomResourceOptions): PolicyBindings {
        return new PolicyBindings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/policyBindings:PolicyBindings';

    /**
     * Returns true if the given object is an instance of PolicyBindings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PolicyBindings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PolicyBindings.__pulumiType;
    }

    /**
     * The UUID of the cluster. The attribute `policies` must contain ONLY policies defined for that cluster.
     */
    public readonly cluster!: pulumi.Output<string | undefined>;
    /**
     * The ID of the environment (https://<environmentid>.live.dynatrace.com). The attribute `policies` must contain ONLY
     * policies defined for that environment.
     */
    public readonly environment!: pulumi.Output<string | undefined>;
    /**
     * The name of the policy
     */
    public readonly group!: pulumi.Output<string>;
    /**
     * A list of IDs referring to policies bound to that group. It's not possible to mix policies here that are defined for
     * different scopes (different clusters or environments) than specified via attributes `cluster` or `environment`.
     */
    public readonly policies!: pulumi.Output<string[]>;

    /**
     * Create a PolicyBindings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyBindingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyBindingsArgs | PolicyBindingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyBindingsState | undefined;
            resourceInputs["cluster"] = state ? state.cluster : undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["policies"] = state ? state.policies : undefined;
        } else {
            const args = argsOrState as PolicyBindingsArgs | undefined;
            if ((!args || args.group === undefined) && !opts.urn) {
                throw new Error("Missing required property 'group'");
            }
            if ((!args || args.policies === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policies'");
            }
            resourceInputs["cluster"] = args ? args.cluster : undefined;
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["policies"] = args ? args.policies : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PolicyBindings.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PolicyBindings resources.
 */
export interface PolicyBindingsState {
    /**
     * The UUID of the cluster. The attribute `policies` must contain ONLY policies defined for that cluster.
     */
    cluster?: pulumi.Input<string>;
    /**
     * The ID of the environment (https://<environmentid>.live.dynatrace.com). The attribute `policies` must contain ONLY
     * policies defined for that environment.
     */
    environment?: pulumi.Input<string>;
    /**
     * The name of the policy
     */
    group?: pulumi.Input<string>;
    /**
     * A list of IDs referring to policies bound to that group. It's not possible to mix policies here that are defined for
     * different scopes (different clusters or environments) than specified via attributes `cluster` or `environment`.
     */
    policies?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a PolicyBindings resource.
 */
export interface PolicyBindingsArgs {
    /**
     * The UUID of the cluster. The attribute `policies` must contain ONLY policies defined for that cluster.
     */
    cluster?: pulumi.Input<string>;
    /**
     * The ID of the environment (https://<environmentid>.live.dynatrace.com). The attribute `policies` must contain ONLY
     * policies defined for that environment.
     */
    environment?: pulumi.Input<string>;
    /**
     * The name of the policy
     */
    group: pulumi.Input<string>;
    /**
     * A list of IDs referring to policies bound to that group. It's not possible to mix policies here that are defined for
     * different scopes (different clusters or environments) than specified via attributes `cluster` or `environment`.
     */
    policies: pulumi.Input<pulumi.Input<string>[]>;
}
