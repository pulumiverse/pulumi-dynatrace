// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type GrailSecurityContext struct {
	pulumi.CustomResourceState

	// The case-sensitive name of a property of the destination type.
	DestinationProperty pulumi.StringOutput `pulumi:"destinationProperty"`
	// Type of the entity whose security context to override.
	EntityType pulumi.StringOutput `pulumi:"entityType"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringOutput `pulumi:"insertAfter"`
}

// NewGrailSecurityContext registers a new resource with the given unique name, arguments, and options.
func NewGrailSecurityContext(ctx *pulumi.Context,
	name string, args *GrailSecurityContextArgs, opts ...pulumi.ResourceOption) (*GrailSecurityContext, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationProperty == nil {
		return nil, errors.New("invalid value for required argument 'DestinationProperty'")
	}
	if args.EntityType == nil {
		return nil, errors.New("invalid value for required argument 'EntityType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GrailSecurityContext
	err := ctx.RegisterResource("dynatrace:index/grailSecurityContext:GrailSecurityContext", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGrailSecurityContext gets an existing GrailSecurityContext resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGrailSecurityContext(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GrailSecurityContextState, opts ...pulumi.ResourceOption) (*GrailSecurityContext, error) {
	var resource GrailSecurityContext
	err := ctx.ReadResource("dynatrace:index/grailSecurityContext:GrailSecurityContext", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GrailSecurityContext resources.
type grailSecurityContextState struct {
	// The case-sensitive name of a property of the destination type.
	DestinationProperty *string `pulumi:"destinationProperty"`
	// Type of the entity whose security context to override.
	EntityType *string `pulumi:"entityType"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `pulumi:"insertAfter"`
}

type GrailSecurityContextState struct {
	// The case-sensitive name of a property of the destination type.
	DestinationProperty pulumi.StringPtrInput
	// Type of the entity whose security context to override.
	EntityType pulumi.StringPtrInput
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringPtrInput
}

func (GrailSecurityContextState) ElementType() reflect.Type {
	return reflect.TypeOf((*grailSecurityContextState)(nil)).Elem()
}

type grailSecurityContextArgs struct {
	// The case-sensitive name of a property of the destination type.
	DestinationProperty string `pulumi:"destinationProperty"`
	// Type of the entity whose security context to override.
	EntityType string `pulumi:"entityType"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `pulumi:"insertAfter"`
}

// The set of arguments for constructing a GrailSecurityContext resource.
type GrailSecurityContextArgs struct {
	// The case-sensitive name of a property of the destination type.
	DestinationProperty pulumi.StringInput
	// Type of the entity whose security context to override.
	EntityType pulumi.StringInput
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringPtrInput
}

func (GrailSecurityContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*grailSecurityContextArgs)(nil)).Elem()
}

type GrailSecurityContextInput interface {
	pulumi.Input

	ToGrailSecurityContextOutput() GrailSecurityContextOutput
	ToGrailSecurityContextOutputWithContext(ctx context.Context) GrailSecurityContextOutput
}

func (*GrailSecurityContext) ElementType() reflect.Type {
	return reflect.TypeOf((**GrailSecurityContext)(nil)).Elem()
}

func (i *GrailSecurityContext) ToGrailSecurityContextOutput() GrailSecurityContextOutput {
	return i.ToGrailSecurityContextOutputWithContext(context.Background())
}

func (i *GrailSecurityContext) ToGrailSecurityContextOutputWithContext(ctx context.Context) GrailSecurityContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrailSecurityContextOutput)
}

// GrailSecurityContextArrayInput is an input type that accepts GrailSecurityContextArray and GrailSecurityContextArrayOutput values.
// You can construct a concrete instance of `GrailSecurityContextArrayInput` via:
//
//	GrailSecurityContextArray{ GrailSecurityContextArgs{...} }
type GrailSecurityContextArrayInput interface {
	pulumi.Input

	ToGrailSecurityContextArrayOutput() GrailSecurityContextArrayOutput
	ToGrailSecurityContextArrayOutputWithContext(context.Context) GrailSecurityContextArrayOutput
}

type GrailSecurityContextArray []GrailSecurityContextInput

func (GrailSecurityContextArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GrailSecurityContext)(nil)).Elem()
}

func (i GrailSecurityContextArray) ToGrailSecurityContextArrayOutput() GrailSecurityContextArrayOutput {
	return i.ToGrailSecurityContextArrayOutputWithContext(context.Background())
}

func (i GrailSecurityContextArray) ToGrailSecurityContextArrayOutputWithContext(ctx context.Context) GrailSecurityContextArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrailSecurityContextArrayOutput)
}

// GrailSecurityContextMapInput is an input type that accepts GrailSecurityContextMap and GrailSecurityContextMapOutput values.
// You can construct a concrete instance of `GrailSecurityContextMapInput` via:
//
//	GrailSecurityContextMap{ "key": GrailSecurityContextArgs{...} }
type GrailSecurityContextMapInput interface {
	pulumi.Input

	ToGrailSecurityContextMapOutput() GrailSecurityContextMapOutput
	ToGrailSecurityContextMapOutputWithContext(context.Context) GrailSecurityContextMapOutput
}

type GrailSecurityContextMap map[string]GrailSecurityContextInput

func (GrailSecurityContextMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GrailSecurityContext)(nil)).Elem()
}

func (i GrailSecurityContextMap) ToGrailSecurityContextMapOutput() GrailSecurityContextMapOutput {
	return i.ToGrailSecurityContextMapOutputWithContext(context.Background())
}

func (i GrailSecurityContextMap) ToGrailSecurityContextMapOutputWithContext(ctx context.Context) GrailSecurityContextMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrailSecurityContextMapOutput)
}

type GrailSecurityContextOutput struct{ *pulumi.OutputState }

func (GrailSecurityContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrailSecurityContext)(nil)).Elem()
}

func (o GrailSecurityContextOutput) ToGrailSecurityContextOutput() GrailSecurityContextOutput {
	return o
}

func (o GrailSecurityContextOutput) ToGrailSecurityContextOutputWithContext(ctx context.Context) GrailSecurityContextOutput {
	return o
}

// The case-sensitive name of a property of the destination type.
func (o GrailSecurityContextOutput) DestinationProperty() pulumi.StringOutput {
	return o.ApplyT(func(v *GrailSecurityContext) pulumi.StringOutput { return v.DestinationProperty }).(pulumi.StringOutput)
}

// Type of the entity whose security context to override.
func (o GrailSecurityContextOutput) EntityType() pulumi.StringOutput {
	return o.ApplyT(func(v *GrailSecurityContext) pulumi.StringOutput { return v.EntityType }).(pulumi.StringOutput)
}

// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
func (o GrailSecurityContextOutput) InsertAfter() pulumi.StringOutput {
	return o.ApplyT(func(v *GrailSecurityContext) pulumi.StringOutput { return v.InsertAfter }).(pulumi.StringOutput)
}

type GrailSecurityContextArrayOutput struct{ *pulumi.OutputState }

func (GrailSecurityContextArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GrailSecurityContext)(nil)).Elem()
}

func (o GrailSecurityContextArrayOutput) ToGrailSecurityContextArrayOutput() GrailSecurityContextArrayOutput {
	return o
}

func (o GrailSecurityContextArrayOutput) ToGrailSecurityContextArrayOutputWithContext(ctx context.Context) GrailSecurityContextArrayOutput {
	return o
}

func (o GrailSecurityContextArrayOutput) Index(i pulumi.IntInput) GrailSecurityContextOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GrailSecurityContext {
		return vs[0].([]*GrailSecurityContext)[vs[1].(int)]
	}).(GrailSecurityContextOutput)
}

type GrailSecurityContextMapOutput struct{ *pulumi.OutputState }

func (GrailSecurityContextMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GrailSecurityContext)(nil)).Elem()
}

func (o GrailSecurityContextMapOutput) ToGrailSecurityContextMapOutput() GrailSecurityContextMapOutput {
	return o
}

func (o GrailSecurityContextMapOutput) ToGrailSecurityContextMapOutputWithContext(ctx context.Context) GrailSecurityContextMapOutput {
	return o
}

func (o GrailSecurityContextMapOutput) MapIndex(k pulumi.StringInput) GrailSecurityContextOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GrailSecurityContext {
		return vs[0].(map[string]*GrailSecurityContext)[vs[1].(string)]
	}).(GrailSecurityContextOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GrailSecurityContextInput)(nil)).Elem(), &GrailSecurityContext{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrailSecurityContextArrayInput)(nil)).Elem(), GrailSecurityContextArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrailSecurityContextMapInput)(nil)).Elem(), GrailSecurityContextMap{})
	pulumi.RegisterOutputType(GrailSecurityContextOutput{})
	pulumi.RegisterOutputType(GrailSecurityContextArrayOutput{})
	pulumi.RegisterOutputType(GrailSecurityContextMapOutput{})
}
