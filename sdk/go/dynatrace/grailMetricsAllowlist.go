// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type GrailMetricsAllowlist struct {
	pulumi.CustomResourceState

	// Specify rules for forwarding metrics
	AllowRules GrailMetricsAllowlistAllowRulesPtrOutput `pulumi:"allowRules"`
}

// NewGrailMetricsAllowlist registers a new resource with the given unique name, arguments, and options.
func NewGrailMetricsAllowlist(ctx *pulumi.Context,
	name string, args *GrailMetricsAllowlistArgs, opts ...pulumi.ResourceOption) (*GrailMetricsAllowlist, error) {
	if args == nil {
		args = &GrailMetricsAllowlistArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GrailMetricsAllowlist
	err := ctx.RegisterResource("dynatrace:index/grailMetricsAllowlist:GrailMetricsAllowlist", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGrailMetricsAllowlist gets an existing GrailMetricsAllowlist resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGrailMetricsAllowlist(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GrailMetricsAllowlistState, opts ...pulumi.ResourceOption) (*GrailMetricsAllowlist, error) {
	var resource GrailMetricsAllowlist
	err := ctx.ReadResource("dynatrace:index/grailMetricsAllowlist:GrailMetricsAllowlist", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GrailMetricsAllowlist resources.
type grailMetricsAllowlistState struct {
	// Specify rules for forwarding metrics
	AllowRules *GrailMetricsAllowlistAllowRules `pulumi:"allowRules"`
}

type GrailMetricsAllowlistState struct {
	// Specify rules for forwarding metrics
	AllowRules GrailMetricsAllowlistAllowRulesPtrInput
}

func (GrailMetricsAllowlistState) ElementType() reflect.Type {
	return reflect.TypeOf((*grailMetricsAllowlistState)(nil)).Elem()
}

type grailMetricsAllowlistArgs struct {
	// Specify rules for forwarding metrics
	AllowRules *GrailMetricsAllowlistAllowRules `pulumi:"allowRules"`
}

// The set of arguments for constructing a GrailMetricsAllowlist resource.
type GrailMetricsAllowlistArgs struct {
	// Specify rules for forwarding metrics
	AllowRules GrailMetricsAllowlistAllowRulesPtrInput
}

func (GrailMetricsAllowlistArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*grailMetricsAllowlistArgs)(nil)).Elem()
}

type GrailMetricsAllowlistInput interface {
	pulumi.Input

	ToGrailMetricsAllowlistOutput() GrailMetricsAllowlistOutput
	ToGrailMetricsAllowlistOutputWithContext(ctx context.Context) GrailMetricsAllowlistOutput
}

func (*GrailMetricsAllowlist) ElementType() reflect.Type {
	return reflect.TypeOf((**GrailMetricsAllowlist)(nil)).Elem()
}

func (i *GrailMetricsAllowlist) ToGrailMetricsAllowlistOutput() GrailMetricsAllowlistOutput {
	return i.ToGrailMetricsAllowlistOutputWithContext(context.Background())
}

func (i *GrailMetricsAllowlist) ToGrailMetricsAllowlistOutputWithContext(ctx context.Context) GrailMetricsAllowlistOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrailMetricsAllowlistOutput)
}

// GrailMetricsAllowlistArrayInput is an input type that accepts GrailMetricsAllowlistArray and GrailMetricsAllowlistArrayOutput values.
// You can construct a concrete instance of `GrailMetricsAllowlistArrayInput` via:
//
//	GrailMetricsAllowlistArray{ GrailMetricsAllowlistArgs{...} }
type GrailMetricsAllowlistArrayInput interface {
	pulumi.Input

	ToGrailMetricsAllowlistArrayOutput() GrailMetricsAllowlistArrayOutput
	ToGrailMetricsAllowlistArrayOutputWithContext(context.Context) GrailMetricsAllowlistArrayOutput
}

type GrailMetricsAllowlistArray []GrailMetricsAllowlistInput

func (GrailMetricsAllowlistArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GrailMetricsAllowlist)(nil)).Elem()
}

func (i GrailMetricsAllowlistArray) ToGrailMetricsAllowlistArrayOutput() GrailMetricsAllowlistArrayOutput {
	return i.ToGrailMetricsAllowlistArrayOutputWithContext(context.Background())
}

func (i GrailMetricsAllowlistArray) ToGrailMetricsAllowlistArrayOutputWithContext(ctx context.Context) GrailMetricsAllowlistArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrailMetricsAllowlistArrayOutput)
}

// GrailMetricsAllowlistMapInput is an input type that accepts GrailMetricsAllowlistMap and GrailMetricsAllowlistMapOutput values.
// You can construct a concrete instance of `GrailMetricsAllowlistMapInput` via:
//
//	GrailMetricsAllowlistMap{ "key": GrailMetricsAllowlistArgs{...} }
type GrailMetricsAllowlistMapInput interface {
	pulumi.Input

	ToGrailMetricsAllowlistMapOutput() GrailMetricsAllowlistMapOutput
	ToGrailMetricsAllowlistMapOutputWithContext(context.Context) GrailMetricsAllowlistMapOutput
}

type GrailMetricsAllowlistMap map[string]GrailMetricsAllowlistInput

func (GrailMetricsAllowlistMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GrailMetricsAllowlist)(nil)).Elem()
}

func (i GrailMetricsAllowlistMap) ToGrailMetricsAllowlistMapOutput() GrailMetricsAllowlistMapOutput {
	return i.ToGrailMetricsAllowlistMapOutputWithContext(context.Background())
}

func (i GrailMetricsAllowlistMap) ToGrailMetricsAllowlistMapOutputWithContext(ctx context.Context) GrailMetricsAllowlistMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrailMetricsAllowlistMapOutput)
}

type GrailMetricsAllowlistOutput struct{ *pulumi.OutputState }

func (GrailMetricsAllowlistOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrailMetricsAllowlist)(nil)).Elem()
}

func (o GrailMetricsAllowlistOutput) ToGrailMetricsAllowlistOutput() GrailMetricsAllowlistOutput {
	return o
}

func (o GrailMetricsAllowlistOutput) ToGrailMetricsAllowlistOutputWithContext(ctx context.Context) GrailMetricsAllowlistOutput {
	return o
}

// Specify rules for forwarding metrics
func (o GrailMetricsAllowlistOutput) AllowRules() GrailMetricsAllowlistAllowRulesPtrOutput {
	return o.ApplyT(func(v *GrailMetricsAllowlist) GrailMetricsAllowlistAllowRulesPtrOutput { return v.AllowRules }).(GrailMetricsAllowlistAllowRulesPtrOutput)
}

type GrailMetricsAllowlistArrayOutput struct{ *pulumi.OutputState }

func (GrailMetricsAllowlistArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GrailMetricsAllowlist)(nil)).Elem()
}

func (o GrailMetricsAllowlistArrayOutput) ToGrailMetricsAllowlistArrayOutput() GrailMetricsAllowlistArrayOutput {
	return o
}

func (o GrailMetricsAllowlistArrayOutput) ToGrailMetricsAllowlistArrayOutputWithContext(ctx context.Context) GrailMetricsAllowlistArrayOutput {
	return o
}

func (o GrailMetricsAllowlistArrayOutput) Index(i pulumi.IntInput) GrailMetricsAllowlistOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GrailMetricsAllowlist {
		return vs[0].([]*GrailMetricsAllowlist)[vs[1].(int)]
	}).(GrailMetricsAllowlistOutput)
}

type GrailMetricsAllowlistMapOutput struct{ *pulumi.OutputState }

func (GrailMetricsAllowlistMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GrailMetricsAllowlist)(nil)).Elem()
}

func (o GrailMetricsAllowlistMapOutput) ToGrailMetricsAllowlistMapOutput() GrailMetricsAllowlistMapOutput {
	return o
}

func (o GrailMetricsAllowlistMapOutput) ToGrailMetricsAllowlistMapOutputWithContext(ctx context.Context) GrailMetricsAllowlistMapOutput {
	return o
}

func (o GrailMetricsAllowlistMapOutput) MapIndex(k pulumi.StringInput) GrailMetricsAllowlistOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GrailMetricsAllowlist {
		return vs[0].(map[string]*GrailMetricsAllowlist)[vs[1].(string)]
	}).(GrailMetricsAllowlistOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GrailMetricsAllowlistInput)(nil)).Elem(), &GrailMetricsAllowlist{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrailMetricsAllowlistArrayInput)(nil)).Elem(), GrailMetricsAllowlistArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrailMetricsAllowlistMapInput)(nil)).Elem(), GrailMetricsAllowlistMap{})
	pulumi.RegisterOutputType(GrailMetricsAllowlistOutput{})
	pulumi.RegisterOutputType(GrailMetricsAllowlistArrayOutput{})
	pulumi.RegisterOutputType(GrailMetricsAllowlistMapOutput{})
}
