// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type DevobsGitOnprem struct {
	pulumi.CustomResourceState

	// Possible Values: `AzureOnPrem`, `BitbucketOnPrem`, `GithubOnPrem`, `GitlabOnPrem`
	GitProvider pulumi.StringOutput `pulumi:"gitProvider"`
	// If turned on, requests to your Gitlab server will have the `credentials` option set to `include`. Otherwise, it will be set to `omit`.
	IncludeCredentials pulumi.BoolPtrOutput `pulumi:"includeCredentials"`
	// An HTTP/HTTPS URL of your server
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewDevobsGitOnprem registers a new resource with the given unique name, arguments, and options.
func NewDevobsGitOnprem(ctx *pulumi.Context,
	name string, args *DevobsGitOnpremArgs, opts ...pulumi.ResourceOption) (*DevobsGitOnprem, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GitProvider == nil {
		return nil, errors.New("invalid value for required argument 'GitProvider'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DevobsGitOnprem
	err := ctx.RegisterResource("dynatrace:index/devobsGitOnprem:DevobsGitOnprem", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDevobsGitOnprem gets an existing DevobsGitOnprem resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDevobsGitOnprem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DevobsGitOnpremState, opts ...pulumi.ResourceOption) (*DevobsGitOnprem, error) {
	var resource DevobsGitOnprem
	err := ctx.ReadResource("dynatrace:index/devobsGitOnprem:DevobsGitOnprem", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DevobsGitOnprem resources.
type devobsGitOnpremState struct {
	// Possible Values: `AzureOnPrem`, `BitbucketOnPrem`, `GithubOnPrem`, `GitlabOnPrem`
	GitProvider *string `pulumi:"gitProvider"`
	// If turned on, requests to your Gitlab server will have the `credentials` option set to `include`. Otherwise, it will be set to `omit`.
	IncludeCredentials *bool `pulumi:"includeCredentials"`
	// An HTTP/HTTPS URL of your server
	Url *string `pulumi:"url"`
}

type DevobsGitOnpremState struct {
	// Possible Values: `AzureOnPrem`, `BitbucketOnPrem`, `GithubOnPrem`, `GitlabOnPrem`
	GitProvider pulumi.StringPtrInput
	// If turned on, requests to your Gitlab server will have the `credentials` option set to `include`. Otherwise, it will be set to `omit`.
	IncludeCredentials pulumi.BoolPtrInput
	// An HTTP/HTTPS URL of your server
	Url pulumi.StringPtrInput
}

func (DevobsGitOnpremState) ElementType() reflect.Type {
	return reflect.TypeOf((*devobsGitOnpremState)(nil)).Elem()
}

type devobsGitOnpremArgs struct {
	// Possible Values: `AzureOnPrem`, `BitbucketOnPrem`, `GithubOnPrem`, `GitlabOnPrem`
	GitProvider string `pulumi:"gitProvider"`
	// If turned on, requests to your Gitlab server will have the `credentials` option set to `include`. Otherwise, it will be set to `omit`.
	IncludeCredentials *bool `pulumi:"includeCredentials"`
	// An HTTP/HTTPS URL of your server
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a DevobsGitOnprem resource.
type DevobsGitOnpremArgs struct {
	// Possible Values: `AzureOnPrem`, `BitbucketOnPrem`, `GithubOnPrem`, `GitlabOnPrem`
	GitProvider pulumi.StringInput
	// If turned on, requests to your Gitlab server will have the `credentials` option set to `include`. Otherwise, it will be set to `omit`.
	IncludeCredentials pulumi.BoolPtrInput
	// An HTTP/HTTPS URL of your server
	Url pulumi.StringInput
}

func (DevobsGitOnpremArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*devobsGitOnpremArgs)(nil)).Elem()
}

type DevobsGitOnpremInput interface {
	pulumi.Input

	ToDevobsGitOnpremOutput() DevobsGitOnpremOutput
	ToDevobsGitOnpremOutputWithContext(ctx context.Context) DevobsGitOnpremOutput
}

func (*DevobsGitOnprem) ElementType() reflect.Type {
	return reflect.TypeOf((**DevobsGitOnprem)(nil)).Elem()
}

func (i *DevobsGitOnprem) ToDevobsGitOnpremOutput() DevobsGitOnpremOutput {
	return i.ToDevobsGitOnpremOutputWithContext(context.Background())
}

func (i *DevobsGitOnprem) ToDevobsGitOnpremOutputWithContext(ctx context.Context) DevobsGitOnpremOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevobsGitOnpremOutput)
}

// DevobsGitOnpremArrayInput is an input type that accepts DevobsGitOnpremArray and DevobsGitOnpremArrayOutput values.
// You can construct a concrete instance of `DevobsGitOnpremArrayInput` via:
//
//	DevobsGitOnpremArray{ DevobsGitOnpremArgs{...} }
type DevobsGitOnpremArrayInput interface {
	pulumi.Input

	ToDevobsGitOnpremArrayOutput() DevobsGitOnpremArrayOutput
	ToDevobsGitOnpremArrayOutputWithContext(context.Context) DevobsGitOnpremArrayOutput
}

type DevobsGitOnpremArray []DevobsGitOnpremInput

func (DevobsGitOnpremArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DevobsGitOnprem)(nil)).Elem()
}

func (i DevobsGitOnpremArray) ToDevobsGitOnpremArrayOutput() DevobsGitOnpremArrayOutput {
	return i.ToDevobsGitOnpremArrayOutputWithContext(context.Background())
}

func (i DevobsGitOnpremArray) ToDevobsGitOnpremArrayOutputWithContext(ctx context.Context) DevobsGitOnpremArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevobsGitOnpremArrayOutput)
}

// DevobsGitOnpremMapInput is an input type that accepts DevobsGitOnpremMap and DevobsGitOnpremMapOutput values.
// You can construct a concrete instance of `DevobsGitOnpremMapInput` via:
//
//	DevobsGitOnpremMap{ "key": DevobsGitOnpremArgs{...} }
type DevobsGitOnpremMapInput interface {
	pulumi.Input

	ToDevobsGitOnpremMapOutput() DevobsGitOnpremMapOutput
	ToDevobsGitOnpremMapOutputWithContext(context.Context) DevobsGitOnpremMapOutput
}

type DevobsGitOnpremMap map[string]DevobsGitOnpremInput

func (DevobsGitOnpremMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DevobsGitOnprem)(nil)).Elem()
}

func (i DevobsGitOnpremMap) ToDevobsGitOnpremMapOutput() DevobsGitOnpremMapOutput {
	return i.ToDevobsGitOnpremMapOutputWithContext(context.Background())
}

func (i DevobsGitOnpremMap) ToDevobsGitOnpremMapOutputWithContext(ctx context.Context) DevobsGitOnpremMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevobsGitOnpremMapOutput)
}

type DevobsGitOnpremOutput struct{ *pulumi.OutputState }

func (DevobsGitOnpremOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DevobsGitOnprem)(nil)).Elem()
}

func (o DevobsGitOnpremOutput) ToDevobsGitOnpremOutput() DevobsGitOnpremOutput {
	return o
}

func (o DevobsGitOnpremOutput) ToDevobsGitOnpremOutputWithContext(ctx context.Context) DevobsGitOnpremOutput {
	return o
}

// Possible Values: `AzureOnPrem`, `BitbucketOnPrem`, `GithubOnPrem`, `GitlabOnPrem`
func (o DevobsGitOnpremOutput) GitProvider() pulumi.StringOutput {
	return o.ApplyT(func(v *DevobsGitOnprem) pulumi.StringOutput { return v.GitProvider }).(pulumi.StringOutput)
}

// If turned on, requests to your Gitlab server will have the `credentials` option set to `include`. Otherwise, it will be set to `omit`.
func (o DevobsGitOnpremOutput) IncludeCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DevobsGitOnprem) pulumi.BoolPtrOutput { return v.IncludeCredentials }).(pulumi.BoolPtrOutput)
}

// An HTTP/HTTPS URL of your server
func (o DevobsGitOnpremOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *DevobsGitOnprem) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type DevobsGitOnpremArrayOutput struct{ *pulumi.OutputState }

func (DevobsGitOnpremArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DevobsGitOnprem)(nil)).Elem()
}

func (o DevobsGitOnpremArrayOutput) ToDevobsGitOnpremArrayOutput() DevobsGitOnpremArrayOutput {
	return o
}

func (o DevobsGitOnpremArrayOutput) ToDevobsGitOnpremArrayOutputWithContext(ctx context.Context) DevobsGitOnpremArrayOutput {
	return o
}

func (o DevobsGitOnpremArrayOutput) Index(i pulumi.IntInput) DevobsGitOnpremOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DevobsGitOnprem {
		return vs[0].([]*DevobsGitOnprem)[vs[1].(int)]
	}).(DevobsGitOnpremOutput)
}

type DevobsGitOnpremMapOutput struct{ *pulumi.OutputState }

func (DevobsGitOnpremMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DevobsGitOnprem)(nil)).Elem()
}

func (o DevobsGitOnpremMapOutput) ToDevobsGitOnpremMapOutput() DevobsGitOnpremMapOutput {
	return o
}

func (o DevobsGitOnpremMapOutput) ToDevobsGitOnpremMapOutputWithContext(ctx context.Context) DevobsGitOnpremMapOutput {
	return o
}

func (o DevobsGitOnpremMapOutput) MapIndex(k pulumi.StringInput) DevobsGitOnpremOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DevobsGitOnprem {
		return vs[0].(map[string]*DevobsGitOnprem)[vs[1].(string)]
	}).(DevobsGitOnpremOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DevobsGitOnpremInput)(nil)).Elem(), &DevobsGitOnprem{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevobsGitOnpremArrayInput)(nil)).Elem(), DevobsGitOnpremArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevobsGitOnpremMapInput)(nil)).Elem(), DevobsGitOnpremMap{})
	pulumi.RegisterOutputType(DevobsGitOnpremOutput{})
	pulumi.RegisterOutputType(DevobsGitOnpremArrayOutput{})
	pulumi.RegisterOutputType(DevobsGitOnpremMapOutput{})
}
