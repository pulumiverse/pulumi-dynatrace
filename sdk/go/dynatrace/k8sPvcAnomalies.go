// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type K8sPvcAnomalies struct {
	pulumi.CustomResourceState

	// Alerts on low disk space in megabytes for a persistent volume claim.
	LowDiskSpaceCritical K8sPvcAnomaliesLowDiskSpaceCriticalOutput `pulumi:"lowDiskSpaceCritical"`
	// Alerts on low disk space in % for a persistent volume claim.
	LowDiskSpaceCriticalPercentage K8sPvcAnomaliesLowDiskSpaceCriticalPercentageOutput `pulumi:"lowDiskSpaceCriticalPercentage"`
	// The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
}

// NewK8sPvcAnomalies registers a new resource with the given unique name, arguments, and options.
func NewK8sPvcAnomalies(ctx *pulumi.Context,
	name string, args *K8sPvcAnomaliesArgs, opts ...pulumi.ResourceOption) (*K8sPvcAnomalies, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LowDiskSpaceCritical == nil {
		return nil, errors.New("invalid value for required argument 'LowDiskSpaceCritical'")
	}
	if args.LowDiskSpaceCriticalPercentage == nil {
		return nil, errors.New("invalid value for required argument 'LowDiskSpaceCriticalPercentage'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource K8sPvcAnomalies
	err := ctx.RegisterResource("dynatrace:index/k8sPvcAnomalies:K8sPvcAnomalies", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetK8sPvcAnomalies gets an existing K8sPvcAnomalies resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetK8sPvcAnomalies(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *K8sPvcAnomaliesState, opts ...pulumi.ResourceOption) (*K8sPvcAnomalies, error) {
	var resource K8sPvcAnomalies
	err := ctx.ReadResource("dynatrace:index/k8sPvcAnomalies:K8sPvcAnomalies", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering K8sPvcAnomalies resources.
type k8sPvcAnomaliesState struct {
	// Alerts on low disk space in megabytes for a persistent volume claim.
	LowDiskSpaceCritical *K8sPvcAnomaliesLowDiskSpaceCritical `pulumi:"lowDiskSpaceCritical"`
	// Alerts on low disk space in % for a persistent volume claim.
	LowDiskSpaceCriticalPercentage *K8sPvcAnomaliesLowDiskSpaceCriticalPercentage `pulumi:"lowDiskSpaceCriticalPercentage"`
	// The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
}

type K8sPvcAnomaliesState struct {
	// Alerts on low disk space in megabytes for a persistent volume claim.
	LowDiskSpaceCritical K8sPvcAnomaliesLowDiskSpaceCriticalPtrInput
	// Alerts on low disk space in % for a persistent volume claim.
	LowDiskSpaceCriticalPercentage K8sPvcAnomaliesLowDiskSpaceCriticalPercentagePtrInput
	// The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
}

func (K8sPvcAnomaliesState) ElementType() reflect.Type {
	return reflect.TypeOf((*k8sPvcAnomaliesState)(nil)).Elem()
}

type k8sPvcAnomaliesArgs struct {
	// Alerts on low disk space in megabytes for a persistent volume claim.
	LowDiskSpaceCritical K8sPvcAnomaliesLowDiskSpaceCritical `pulumi:"lowDiskSpaceCritical"`
	// Alerts on low disk space in % for a persistent volume claim.
	LowDiskSpaceCriticalPercentage K8sPvcAnomaliesLowDiskSpaceCriticalPercentage `pulumi:"lowDiskSpaceCriticalPercentage"`
	// The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
}

// The set of arguments for constructing a K8sPvcAnomalies resource.
type K8sPvcAnomaliesArgs struct {
	// Alerts on low disk space in megabytes for a persistent volume claim.
	LowDiskSpaceCritical K8sPvcAnomaliesLowDiskSpaceCriticalInput
	// Alerts on low disk space in % for a persistent volume claim.
	LowDiskSpaceCriticalPercentage K8sPvcAnomaliesLowDiskSpaceCriticalPercentageInput
	// The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
}

func (K8sPvcAnomaliesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*k8sPvcAnomaliesArgs)(nil)).Elem()
}

type K8sPvcAnomaliesInput interface {
	pulumi.Input

	ToK8sPvcAnomaliesOutput() K8sPvcAnomaliesOutput
	ToK8sPvcAnomaliesOutputWithContext(ctx context.Context) K8sPvcAnomaliesOutput
}

func (*K8sPvcAnomalies) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sPvcAnomalies)(nil)).Elem()
}

func (i *K8sPvcAnomalies) ToK8sPvcAnomaliesOutput() K8sPvcAnomaliesOutput {
	return i.ToK8sPvcAnomaliesOutputWithContext(context.Background())
}

func (i *K8sPvcAnomalies) ToK8sPvcAnomaliesOutputWithContext(ctx context.Context) K8sPvcAnomaliesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sPvcAnomaliesOutput)
}

// K8sPvcAnomaliesArrayInput is an input type that accepts K8sPvcAnomaliesArray and K8sPvcAnomaliesArrayOutput values.
// You can construct a concrete instance of `K8sPvcAnomaliesArrayInput` via:
//
//	K8sPvcAnomaliesArray{ K8sPvcAnomaliesArgs{...} }
type K8sPvcAnomaliesArrayInput interface {
	pulumi.Input

	ToK8sPvcAnomaliesArrayOutput() K8sPvcAnomaliesArrayOutput
	ToK8sPvcAnomaliesArrayOutputWithContext(context.Context) K8sPvcAnomaliesArrayOutput
}

type K8sPvcAnomaliesArray []K8sPvcAnomaliesInput

func (K8sPvcAnomaliesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*K8sPvcAnomalies)(nil)).Elem()
}

func (i K8sPvcAnomaliesArray) ToK8sPvcAnomaliesArrayOutput() K8sPvcAnomaliesArrayOutput {
	return i.ToK8sPvcAnomaliesArrayOutputWithContext(context.Background())
}

func (i K8sPvcAnomaliesArray) ToK8sPvcAnomaliesArrayOutputWithContext(ctx context.Context) K8sPvcAnomaliesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sPvcAnomaliesArrayOutput)
}

// K8sPvcAnomaliesMapInput is an input type that accepts K8sPvcAnomaliesMap and K8sPvcAnomaliesMapOutput values.
// You can construct a concrete instance of `K8sPvcAnomaliesMapInput` via:
//
//	K8sPvcAnomaliesMap{ "key": K8sPvcAnomaliesArgs{...} }
type K8sPvcAnomaliesMapInput interface {
	pulumi.Input

	ToK8sPvcAnomaliesMapOutput() K8sPvcAnomaliesMapOutput
	ToK8sPvcAnomaliesMapOutputWithContext(context.Context) K8sPvcAnomaliesMapOutput
}

type K8sPvcAnomaliesMap map[string]K8sPvcAnomaliesInput

func (K8sPvcAnomaliesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*K8sPvcAnomalies)(nil)).Elem()
}

func (i K8sPvcAnomaliesMap) ToK8sPvcAnomaliesMapOutput() K8sPvcAnomaliesMapOutput {
	return i.ToK8sPvcAnomaliesMapOutputWithContext(context.Background())
}

func (i K8sPvcAnomaliesMap) ToK8sPvcAnomaliesMapOutputWithContext(ctx context.Context) K8sPvcAnomaliesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sPvcAnomaliesMapOutput)
}

type K8sPvcAnomaliesOutput struct{ *pulumi.OutputState }

func (K8sPvcAnomaliesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sPvcAnomalies)(nil)).Elem()
}

func (o K8sPvcAnomaliesOutput) ToK8sPvcAnomaliesOutput() K8sPvcAnomaliesOutput {
	return o
}

func (o K8sPvcAnomaliesOutput) ToK8sPvcAnomaliesOutputWithContext(ctx context.Context) K8sPvcAnomaliesOutput {
	return o
}

// Alerts on low disk space in megabytes for a persistent volume claim.
func (o K8sPvcAnomaliesOutput) LowDiskSpaceCritical() K8sPvcAnomaliesLowDiskSpaceCriticalOutput {
	return o.ApplyT(func(v *K8sPvcAnomalies) K8sPvcAnomaliesLowDiskSpaceCriticalOutput { return v.LowDiskSpaceCritical }).(K8sPvcAnomaliesLowDiskSpaceCriticalOutput)
}

// Alerts on low disk space in % for a persistent volume claim.
func (o K8sPvcAnomaliesOutput) LowDiskSpaceCriticalPercentage() K8sPvcAnomaliesLowDiskSpaceCriticalPercentageOutput {
	return o.ApplyT(func(v *K8sPvcAnomalies) K8sPvcAnomaliesLowDiskSpaceCriticalPercentageOutput {
		return v.LowDiskSpaceCriticalPercentage
	}).(K8sPvcAnomaliesLowDiskSpaceCriticalPercentageOutput)
}

// The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
func (o K8sPvcAnomaliesOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *K8sPvcAnomalies) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

type K8sPvcAnomaliesArrayOutput struct{ *pulumi.OutputState }

func (K8sPvcAnomaliesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*K8sPvcAnomalies)(nil)).Elem()
}

func (o K8sPvcAnomaliesArrayOutput) ToK8sPvcAnomaliesArrayOutput() K8sPvcAnomaliesArrayOutput {
	return o
}

func (o K8sPvcAnomaliesArrayOutput) ToK8sPvcAnomaliesArrayOutputWithContext(ctx context.Context) K8sPvcAnomaliesArrayOutput {
	return o
}

func (o K8sPvcAnomaliesArrayOutput) Index(i pulumi.IntInput) K8sPvcAnomaliesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *K8sPvcAnomalies {
		return vs[0].([]*K8sPvcAnomalies)[vs[1].(int)]
	}).(K8sPvcAnomaliesOutput)
}

type K8sPvcAnomaliesMapOutput struct{ *pulumi.OutputState }

func (K8sPvcAnomaliesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*K8sPvcAnomalies)(nil)).Elem()
}

func (o K8sPvcAnomaliesMapOutput) ToK8sPvcAnomaliesMapOutput() K8sPvcAnomaliesMapOutput {
	return o
}

func (o K8sPvcAnomaliesMapOutput) ToK8sPvcAnomaliesMapOutputWithContext(ctx context.Context) K8sPvcAnomaliesMapOutput {
	return o
}

func (o K8sPvcAnomaliesMapOutput) MapIndex(k pulumi.StringInput) K8sPvcAnomaliesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *K8sPvcAnomalies {
		return vs[0].(map[string]*K8sPvcAnomalies)[vs[1].(string)]
	}).(K8sPvcAnomaliesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*K8sPvcAnomaliesInput)(nil)).Elem(), &K8sPvcAnomalies{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sPvcAnomaliesArrayInput)(nil)).Elem(), K8sPvcAnomaliesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sPvcAnomaliesMapInput)(nil)).Elem(), K8sPvcAnomaliesMap{})
	pulumi.RegisterOutputType(K8sPvcAnomaliesOutput{})
	pulumi.RegisterOutputType(K8sPvcAnomaliesArrayOutput{})
	pulumi.RegisterOutputType(K8sPvcAnomaliesMapOutput{})
}
