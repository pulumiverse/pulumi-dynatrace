// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type DeclarativeGrouping struct {
	pulumi.CustomResourceState

	// Enter a descriptive process group display name and a unique identifier that Dynatrace can use to recognize this process
	// group.
	Detection DeclarativeGroupingDetectionOutput `pulumi:"detection"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this
	// instance regarding order. If not specified when creating the setting will be added to the end of the list. If not
	// specified during update the order will remain untouched
	InsertAfter pulumi.StringOutput `pulumi:"insertAfter"`
	// Monitored technology name
	Name pulumi.StringOutput `pulumi:"name"`
	// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
}

// NewDeclarativeGrouping registers a new resource with the given unique name, arguments, and options.
func NewDeclarativeGrouping(ctx *pulumi.Context,
	name string, args *DeclarativeGroupingArgs, opts ...pulumi.ResourceOption) (*DeclarativeGrouping, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Detection == nil {
		return nil, errors.New("invalid value for required argument 'Detection'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DeclarativeGrouping
	err := ctx.RegisterResource("dynatrace:index/declarativeGrouping:DeclarativeGrouping", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeclarativeGrouping gets an existing DeclarativeGrouping resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeclarativeGrouping(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeclarativeGroupingState, opts ...pulumi.ResourceOption) (*DeclarativeGrouping, error) {
	var resource DeclarativeGrouping
	err := ctx.ReadResource("dynatrace:index/declarativeGrouping:DeclarativeGrouping", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DeclarativeGrouping resources.
type declarativeGroupingState struct {
	// Enter a descriptive process group display name and a unique identifier that Dynatrace can use to recognize this process
	// group.
	Detection *DeclarativeGroupingDetection `pulumi:"detection"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this
	// instance regarding order. If not specified when creating the setting will be added to the end of the list. If not
	// specified during update the order will remain untouched
	InsertAfter *string `pulumi:"insertAfter"`
	// Monitored technology name
	Name *string `pulumi:"name"`
	// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
}

type DeclarativeGroupingState struct {
	// Enter a descriptive process group display name and a unique identifier that Dynatrace can use to recognize this process
	// group.
	Detection DeclarativeGroupingDetectionPtrInput
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this
	// instance regarding order. If not specified when creating the setting will be added to the end of the list. If not
	// specified during update the order will remain untouched
	InsertAfter pulumi.StringPtrInput
	// Monitored technology name
	Name pulumi.StringPtrInput
	// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
}

func (DeclarativeGroupingState) ElementType() reflect.Type {
	return reflect.TypeOf((*declarativeGroupingState)(nil)).Elem()
}

type declarativeGroupingArgs struct {
	// Enter a descriptive process group display name and a unique identifier that Dynatrace can use to recognize this process
	// group.
	Detection DeclarativeGroupingDetection `pulumi:"detection"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this
	// instance regarding order. If not specified when creating the setting will be added to the end of the list. If not
	// specified during update the order will remain untouched
	InsertAfter *string `pulumi:"insertAfter"`
	// Monitored technology name
	Name *string `pulumi:"name"`
	// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
}

// The set of arguments for constructing a DeclarativeGrouping resource.
type DeclarativeGroupingArgs struct {
	// Enter a descriptive process group display name and a unique identifier that Dynatrace can use to recognize this process
	// group.
	Detection DeclarativeGroupingDetectionInput
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this
	// instance regarding order. If not specified when creating the setting will be added to the end of the list. If not
	// specified during update the order will remain untouched
	InsertAfter pulumi.StringPtrInput
	// Monitored technology name
	Name pulumi.StringPtrInput
	// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
}

func (DeclarativeGroupingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*declarativeGroupingArgs)(nil)).Elem()
}

type DeclarativeGroupingInput interface {
	pulumi.Input

	ToDeclarativeGroupingOutput() DeclarativeGroupingOutput
	ToDeclarativeGroupingOutputWithContext(ctx context.Context) DeclarativeGroupingOutput
}

func (*DeclarativeGrouping) ElementType() reflect.Type {
	return reflect.TypeOf((**DeclarativeGrouping)(nil)).Elem()
}

func (i *DeclarativeGrouping) ToDeclarativeGroupingOutput() DeclarativeGroupingOutput {
	return i.ToDeclarativeGroupingOutputWithContext(context.Background())
}

func (i *DeclarativeGrouping) ToDeclarativeGroupingOutputWithContext(ctx context.Context) DeclarativeGroupingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeclarativeGroupingOutput)
}

// DeclarativeGroupingArrayInput is an input type that accepts DeclarativeGroupingArray and DeclarativeGroupingArrayOutput values.
// You can construct a concrete instance of `DeclarativeGroupingArrayInput` via:
//
//	DeclarativeGroupingArray{ DeclarativeGroupingArgs{...} }
type DeclarativeGroupingArrayInput interface {
	pulumi.Input

	ToDeclarativeGroupingArrayOutput() DeclarativeGroupingArrayOutput
	ToDeclarativeGroupingArrayOutputWithContext(context.Context) DeclarativeGroupingArrayOutput
}

type DeclarativeGroupingArray []DeclarativeGroupingInput

func (DeclarativeGroupingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeclarativeGrouping)(nil)).Elem()
}

func (i DeclarativeGroupingArray) ToDeclarativeGroupingArrayOutput() DeclarativeGroupingArrayOutput {
	return i.ToDeclarativeGroupingArrayOutputWithContext(context.Background())
}

func (i DeclarativeGroupingArray) ToDeclarativeGroupingArrayOutputWithContext(ctx context.Context) DeclarativeGroupingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeclarativeGroupingArrayOutput)
}

// DeclarativeGroupingMapInput is an input type that accepts DeclarativeGroupingMap and DeclarativeGroupingMapOutput values.
// You can construct a concrete instance of `DeclarativeGroupingMapInput` via:
//
//	DeclarativeGroupingMap{ "key": DeclarativeGroupingArgs{...} }
type DeclarativeGroupingMapInput interface {
	pulumi.Input

	ToDeclarativeGroupingMapOutput() DeclarativeGroupingMapOutput
	ToDeclarativeGroupingMapOutputWithContext(context.Context) DeclarativeGroupingMapOutput
}

type DeclarativeGroupingMap map[string]DeclarativeGroupingInput

func (DeclarativeGroupingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeclarativeGrouping)(nil)).Elem()
}

func (i DeclarativeGroupingMap) ToDeclarativeGroupingMapOutput() DeclarativeGroupingMapOutput {
	return i.ToDeclarativeGroupingMapOutputWithContext(context.Background())
}

func (i DeclarativeGroupingMap) ToDeclarativeGroupingMapOutputWithContext(ctx context.Context) DeclarativeGroupingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeclarativeGroupingMapOutput)
}

type DeclarativeGroupingOutput struct{ *pulumi.OutputState }

func (DeclarativeGroupingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeclarativeGrouping)(nil)).Elem()
}

func (o DeclarativeGroupingOutput) ToDeclarativeGroupingOutput() DeclarativeGroupingOutput {
	return o
}

func (o DeclarativeGroupingOutput) ToDeclarativeGroupingOutputWithContext(ctx context.Context) DeclarativeGroupingOutput {
	return o
}

// Enter a descriptive process group display name and a unique identifier that Dynatrace can use to recognize this process
// group.
func (o DeclarativeGroupingOutput) Detection() DeclarativeGroupingDetectionOutput {
	return o.ApplyT(func(v *DeclarativeGrouping) DeclarativeGroupingDetectionOutput { return v.Detection }).(DeclarativeGroupingDetectionOutput)
}

// This setting is enabled (`true`) or disabled (`false`)
func (o DeclarativeGroupingOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *DeclarativeGrouping) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this
// instance regarding order. If not specified when creating the setting will be added to the end of the list. If not
// specified during update the order will remain untouched
func (o DeclarativeGroupingOutput) InsertAfter() pulumi.StringOutput {
	return o.ApplyT(func(v *DeclarativeGrouping) pulumi.StringOutput { return v.InsertAfter }).(pulumi.StringOutput)
}

// Monitored technology name
func (o DeclarativeGroupingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DeclarativeGrouping) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
func (o DeclarativeGroupingOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeclarativeGrouping) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

type DeclarativeGroupingArrayOutput struct{ *pulumi.OutputState }

func (DeclarativeGroupingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeclarativeGrouping)(nil)).Elem()
}

func (o DeclarativeGroupingArrayOutput) ToDeclarativeGroupingArrayOutput() DeclarativeGroupingArrayOutput {
	return o
}

func (o DeclarativeGroupingArrayOutput) ToDeclarativeGroupingArrayOutputWithContext(ctx context.Context) DeclarativeGroupingArrayOutput {
	return o
}

func (o DeclarativeGroupingArrayOutput) Index(i pulumi.IntInput) DeclarativeGroupingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DeclarativeGrouping {
		return vs[0].([]*DeclarativeGrouping)[vs[1].(int)]
	}).(DeclarativeGroupingOutput)
}

type DeclarativeGroupingMapOutput struct{ *pulumi.OutputState }

func (DeclarativeGroupingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeclarativeGrouping)(nil)).Elem()
}

func (o DeclarativeGroupingMapOutput) ToDeclarativeGroupingMapOutput() DeclarativeGroupingMapOutput {
	return o
}

func (o DeclarativeGroupingMapOutput) ToDeclarativeGroupingMapOutputWithContext(ctx context.Context) DeclarativeGroupingMapOutput {
	return o
}

func (o DeclarativeGroupingMapOutput) MapIndex(k pulumi.StringInput) DeclarativeGroupingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DeclarativeGrouping {
		return vs[0].(map[string]*DeclarativeGrouping)[vs[1].(string)]
	}).(DeclarativeGroupingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeclarativeGroupingInput)(nil)).Elem(), &DeclarativeGrouping{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeclarativeGroupingArrayInput)(nil)).Elem(), DeclarativeGroupingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeclarativeGroupingMapInput)(nil)).Elem(), DeclarativeGroupingMap{})
	pulumi.RegisterOutputType(DeclarativeGroupingOutput{})
	pulumi.RegisterOutputType(DeclarativeGroupingArrayOutput{})
	pulumi.RegisterOutputType(DeclarativeGroupingMapOutput{})
}
