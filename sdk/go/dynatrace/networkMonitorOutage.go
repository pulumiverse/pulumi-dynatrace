// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type NetworkMonitorOutage struct {
	pulumi.CustomResourceState

	// Alert if all locations are unable to access my target address
	GlobalConsecutiveOutageCountThreshold pulumi.IntPtrOutput `pulumi:"globalConsecutiveOutageCountThreshold"`
	// Generate a problem and send an alert when the monitor is unavailable at all configured locations.
	GlobalOutages pulumi.BoolOutput `pulumi:"globalOutages"`
	// are unable to access my target address
	LocalConsecutiveOutageCountThreshold pulumi.IntPtrOutput `pulumi:"localConsecutiveOutageCountThreshold"`
	// Alert if at least
	LocalLocationOutageCountThreshold pulumi.IntPtrOutput `pulumi:"localLocationOutageCountThreshold"`
	// Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
	LocalOutages pulumi.BoolOutput `pulumi:"localOutages"`
	// The scope of this setting (MULTIPROTOCOL_MONITOR). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
}

// NewNetworkMonitorOutage registers a new resource with the given unique name, arguments, and options.
func NewNetworkMonitorOutage(ctx *pulumi.Context,
	name string, args *NetworkMonitorOutageArgs, opts ...pulumi.ResourceOption) (*NetworkMonitorOutage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GlobalOutages == nil {
		return nil, errors.New("invalid value for required argument 'GlobalOutages'")
	}
	if args.LocalOutages == nil {
		return nil, errors.New("invalid value for required argument 'LocalOutages'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkMonitorOutage
	err := ctx.RegisterResource("dynatrace:index/networkMonitorOutage:NetworkMonitorOutage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkMonitorOutage gets an existing NetworkMonitorOutage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkMonitorOutage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkMonitorOutageState, opts ...pulumi.ResourceOption) (*NetworkMonitorOutage, error) {
	var resource NetworkMonitorOutage
	err := ctx.ReadResource("dynatrace:index/networkMonitorOutage:NetworkMonitorOutage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkMonitorOutage resources.
type networkMonitorOutageState struct {
	// Alert if all locations are unable to access my target address
	GlobalConsecutiveOutageCountThreshold *int `pulumi:"globalConsecutiveOutageCountThreshold"`
	// Generate a problem and send an alert when the monitor is unavailable at all configured locations.
	GlobalOutages *bool `pulumi:"globalOutages"`
	// are unable to access my target address
	LocalConsecutiveOutageCountThreshold *int `pulumi:"localConsecutiveOutageCountThreshold"`
	// Alert if at least
	LocalLocationOutageCountThreshold *int `pulumi:"localLocationOutageCountThreshold"`
	// Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
	LocalOutages *bool `pulumi:"localOutages"`
	// The scope of this setting (MULTIPROTOCOL_MONITOR). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
}

type NetworkMonitorOutageState struct {
	// Alert if all locations are unable to access my target address
	GlobalConsecutiveOutageCountThreshold pulumi.IntPtrInput
	// Generate a problem and send an alert when the monitor is unavailable at all configured locations.
	GlobalOutages pulumi.BoolPtrInput
	// are unable to access my target address
	LocalConsecutiveOutageCountThreshold pulumi.IntPtrInput
	// Alert if at least
	LocalLocationOutageCountThreshold pulumi.IntPtrInput
	// Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
	LocalOutages pulumi.BoolPtrInput
	// The scope of this setting (MULTIPROTOCOL_MONITOR). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
}

func (NetworkMonitorOutageState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkMonitorOutageState)(nil)).Elem()
}

type networkMonitorOutageArgs struct {
	// Alert if all locations are unable to access my target address
	GlobalConsecutiveOutageCountThreshold *int `pulumi:"globalConsecutiveOutageCountThreshold"`
	// Generate a problem and send an alert when the monitor is unavailable at all configured locations.
	GlobalOutages bool `pulumi:"globalOutages"`
	// are unable to access my target address
	LocalConsecutiveOutageCountThreshold *int `pulumi:"localConsecutiveOutageCountThreshold"`
	// Alert if at least
	LocalLocationOutageCountThreshold *int `pulumi:"localLocationOutageCountThreshold"`
	// Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
	LocalOutages bool `pulumi:"localOutages"`
	// The scope of this setting (MULTIPROTOCOL_MONITOR). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
}

// The set of arguments for constructing a NetworkMonitorOutage resource.
type NetworkMonitorOutageArgs struct {
	// Alert if all locations are unable to access my target address
	GlobalConsecutiveOutageCountThreshold pulumi.IntPtrInput
	// Generate a problem and send an alert when the monitor is unavailable at all configured locations.
	GlobalOutages pulumi.BoolInput
	// are unable to access my target address
	LocalConsecutiveOutageCountThreshold pulumi.IntPtrInput
	// Alert if at least
	LocalLocationOutageCountThreshold pulumi.IntPtrInput
	// Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
	LocalOutages pulumi.BoolInput
	// The scope of this setting (MULTIPROTOCOL_MONITOR). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
}

func (NetworkMonitorOutageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkMonitorOutageArgs)(nil)).Elem()
}

type NetworkMonitorOutageInput interface {
	pulumi.Input

	ToNetworkMonitorOutageOutput() NetworkMonitorOutageOutput
	ToNetworkMonitorOutageOutputWithContext(ctx context.Context) NetworkMonitorOutageOutput
}

func (*NetworkMonitorOutage) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkMonitorOutage)(nil)).Elem()
}

func (i *NetworkMonitorOutage) ToNetworkMonitorOutageOutput() NetworkMonitorOutageOutput {
	return i.ToNetworkMonitorOutageOutputWithContext(context.Background())
}

func (i *NetworkMonitorOutage) ToNetworkMonitorOutageOutputWithContext(ctx context.Context) NetworkMonitorOutageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkMonitorOutageOutput)
}

// NetworkMonitorOutageArrayInput is an input type that accepts NetworkMonitorOutageArray and NetworkMonitorOutageArrayOutput values.
// You can construct a concrete instance of `NetworkMonitorOutageArrayInput` via:
//
//	NetworkMonitorOutageArray{ NetworkMonitorOutageArgs{...} }
type NetworkMonitorOutageArrayInput interface {
	pulumi.Input

	ToNetworkMonitorOutageArrayOutput() NetworkMonitorOutageArrayOutput
	ToNetworkMonitorOutageArrayOutputWithContext(context.Context) NetworkMonitorOutageArrayOutput
}

type NetworkMonitorOutageArray []NetworkMonitorOutageInput

func (NetworkMonitorOutageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkMonitorOutage)(nil)).Elem()
}

func (i NetworkMonitorOutageArray) ToNetworkMonitorOutageArrayOutput() NetworkMonitorOutageArrayOutput {
	return i.ToNetworkMonitorOutageArrayOutputWithContext(context.Background())
}

func (i NetworkMonitorOutageArray) ToNetworkMonitorOutageArrayOutputWithContext(ctx context.Context) NetworkMonitorOutageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkMonitorOutageArrayOutput)
}

// NetworkMonitorOutageMapInput is an input type that accepts NetworkMonitorOutageMap and NetworkMonitorOutageMapOutput values.
// You can construct a concrete instance of `NetworkMonitorOutageMapInput` via:
//
//	NetworkMonitorOutageMap{ "key": NetworkMonitorOutageArgs{...} }
type NetworkMonitorOutageMapInput interface {
	pulumi.Input

	ToNetworkMonitorOutageMapOutput() NetworkMonitorOutageMapOutput
	ToNetworkMonitorOutageMapOutputWithContext(context.Context) NetworkMonitorOutageMapOutput
}

type NetworkMonitorOutageMap map[string]NetworkMonitorOutageInput

func (NetworkMonitorOutageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkMonitorOutage)(nil)).Elem()
}

func (i NetworkMonitorOutageMap) ToNetworkMonitorOutageMapOutput() NetworkMonitorOutageMapOutput {
	return i.ToNetworkMonitorOutageMapOutputWithContext(context.Background())
}

func (i NetworkMonitorOutageMap) ToNetworkMonitorOutageMapOutputWithContext(ctx context.Context) NetworkMonitorOutageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkMonitorOutageMapOutput)
}

type NetworkMonitorOutageOutput struct{ *pulumi.OutputState }

func (NetworkMonitorOutageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkMonitorOutage)(nil)).Elem()
}

func (o NetworkMonitorOutageOutput) ToNetworkMonitorOutageOutput() NetworkMonitorOutageOutput {
	return o
}

func (o NetworkMonitorOutageOutput) ToNetworkMonitorOutageOutputWithContext(ctx context.Context) NetworkMonitorOutageOutput {
	return o
}

// Alert if all locations are unable to access my target address
func (o NetworkMonitorOutageOutput) GlobalConsecutiveOutageCountThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkMonitorOutage) pulumi.IntPtrOutput { return v.GlobalConsecutiveOutageCountThreshold }).(pulumi.IntPtrOutput)
}

// Generate a problem and send an alert when the monitor is unavailable at all configured locations.
func (o NetworkMonitorOutageOutput) GlobalOutages() pulumi.BoolOutput {
	return o.ApplyT(func(v *NetworkMonitorOutage) pulumi.BoolOutput { return v.GlobalOutages }).(pulumi.BoolOutput)
}

// are unable to access my target address
func (o NetworkMonitorOutageOutput) LocalConsecutiveOutageCountThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkMonitorOutage) pulumi.IntPtrOutput { return v.LocalConsecutiveOutageCountThreshold }).(pulumi.IntPtrOutput)
}

// Alert if at least
func (o NetworkMonitorOutageOutput) LocalLocationOutageCountThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkMonitorOutage) pulumi.IntPtrOutput { return v.LocalLocationOutageCountThreshold }).(pulumi.IntPtrOutput)
}

// Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
func (o NetworkMonitorOutageOutput) LocalOutages() pulumi.BoolOutput {
	return o.ApplyT(func(v *NetworkMonitorOutage) pulumi.BoolOutput { return v.LocalOutages }).(pulumi.BoolOutput)
}

// The scope of this setting (MULTIPROTOCOL_MONITOR). Omit this property if you want to cover the whole environment.
func (o NetworkMonitorOutageOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkMonitorOutage) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

type NetworkMonitorOutageArrayOutput struct{ *pulumi.OutputState }

func (NetworkMonitorOutageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkMonitorOutage)(nil)).Elem()
}

func (o NetworkMonitorOutageArrayOutput) ToNetworkMonitorOutageArrayOutput() NetworkMonitorOutageArrayOutput {
	return o
}

func (o NetworkMonitorOutageArrayOutput) ToNetworkMonitorOutageArrayOutputWithContext(ctx context.Context) NetworkMonitorOutageArrayOutput {
	return o
}

func (o NetworkMonitorOutageArrayOutput) Index(i pulumi.IntInput) NetworkMonitorOutageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkMonitorOutage {
		return vs[0].([]*NetworkMonitorOutage)[vs[1].(int)]
	}).(NetworkMonitorOutageOutput)
}

type NetworkMonitorOutageMapOutput struct{ *pulumi.OutputState }

func (NetworkMonitorOutageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkMonitorOutage)(nil)).Elem()
}

func (o NetworkMonitorOutageMapOutput) ToNetworkMonitorOutageMapOutput() NetworkMonitorOutageMapOutput {
	return o
}

func (o NetworkMonitorOutageMapOutput) ToNetworkMonitorOutageMapOutputWithContext(ctx context.Context) NetworkMonitorOutageMapOutput {
	return o
}

func (o NetworkMonitorOutageMapOutput) MapIndex(k pulumi.StringInput) NetworkMonitorOutageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkMonitorOutage {
		return vs[0].(map[string]*NetworkMonitorOutage)[vs[1].(string)]
	}).(NetworkMonitorOutageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkMonitorOutageInput)(nil)).Elem(), &NetworkMonitorOutage{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkMonitorOutageArrayInput)(nil)).Elem(), NetworkMonitorOutageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkMonitorOutageMapInput)(nil)).Elem(), NetworkMonitorOutageMap{})
	pulumi.RegisterOutputType(NetworkMonitorOutageOutput{})
	pulumi.RegisterOutputType(NetworkMonitorOutageArrayOutput{})
	pulumi.RegisterOutputType(NetworkMonitorOutageMapOutput{})
}
