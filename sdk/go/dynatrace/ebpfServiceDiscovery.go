// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type EbpfServiceDiscovery struct {
	pulumi.CustomResourceState

	// When disabled, Dynatrace can only detect services in Full stack mode.
	Ebpf pulumi.BoolOutput `pulumi:"ebpf"`
	// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
}

// NewEbpfServiceDiscovery registers a new resource with the given unique name, arguments, and options.
func NewEbpfServiceDiscovery(ctx *pulumi.Context,
	name string, args *EbpfServiceDiscoveryArgs, opts ...pulumi.ResourceOption) (*EbpfServiceDiscovery, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Ebpf == nil {
		return nil, errors.New("invalid value for required argument 'Ebpf'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EbpfServiceDiscovery
	err := ctx.RegisterResource("dynatrace:index/ebpfServiceDiscovery:EbpfServiceDiscovery", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEbpfServiceDiscovery gets an existing EbpfServiceDiscovery resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEbpfServiceDiscovery(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EbpfServiceDiscoveryState, opts ...pulumi.ResourceOption) (*EbpfServiceDiscovery, error) {
	var resource EbpfServiceDiscovery
	err := ctx.ReadResource("dynatrace:index/ebpfServiceDiscovery:EbpfServiceDiscovery", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EbpfServiceDiscovery resources.
type ebpfServiceDiscoveryState struct {
	// When disabled, Dynatrace can only detect services in Full stack mode.
	Ebpf *bool `pulumi:"ebpf"`
	// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
}

type EbpfServiceDiscoveryState struct {
	// When disabled, Dynatrace can only detect services in Full stack mode.
	Ebpf pulumi.BoolPtrInput
	// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
}

func (EbpfServiceDiscoveryState) ElementType() reflect.Type {
	return reflect.TypeOf((*ebpfServiceDiscoveryState)(nil)).Elem()
}

type ebpfServiceDiscoveryArgs struct {
	// When disabled, Dynatrace can only detect services in Full stack mode.
	Ebpf bool `pulumi:"ebpf"`
	// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
}

// The set of arguments for constructing a EbpfServiceDiscovery resource.
type EbpfServiceDiscoveryArgs struct {
	// When disabled, Dynatrace can only detect services in Full stack mode.
	Ebpf pulumi.BoolInput
	// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
}

func (EbpfServiceDiscoveryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ebpfServiceDiscoveryArgs)(nil)).Elem()
}

type EbpfServiceDiscoveryInput interface {
	pulumi.Input

	ToEbpfServiceDiscoveryOutput() EbpfServiceDiscoveryOutput
	ToEbpfServiceDiscoveryOutputWithContext(ctx context.Context) EbpfServiceDiscoveryOutput
}

func (*EbpfServiceDiscovery) ElementType() reflect.Type {
	return reflect.TypeOf((**EbpfServiceDiscovery)(nil)).Elem()
}

func (i *EbpfServiceDiscovery) ToEbpfServiceDiscoveryOutput() EbpfServiceDiscoveryOutput {
	return i.ToEbpfServiceDiscoveryOutputWithContext(context.Background())
}

func (i *EbpfServiceDiscovery) ToEbpfServiceDiscoveryOutputWithContext(ctx context.Context) EbpfServiceDiscoveryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EbpfServiceDiscoveryOutput)
}

// EbpfServiceDiscoveryArrayInput is an input type that accepts EbpfServiceDiscoveryArray and EbpfServiceDiscoveryArrayOutput values.
// You can construct a concrete instance of `EbpfServiceDiscoveryArrayInput` via:
//
//	EbpfServiceDiscoveryArray{ EbpfServiceDiscoveryArgs{...} }
type EbpfServiceDiscoveryArrayInput interface {
	pulumi.Input

	ToEbpfServiceDiscoveryArrayOutput() EbpfServiceDiscoveryArrayOutput
	ToEbpfServiceDiscoveryArrayOutputWithContext(context.Context) EbpfServiceDiscoveryArrayOutput
}

type EbpfServiceDiscoveryArray []EbpfServiceDiscoveryInput

func (EbpfServiceDiscoveryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EbpfServiceDiscovery)(nil)).Elem()
}

func (i EbpfServiceDiscoveryArray) ToEbpfServiceDiscoveryArrayOutput() EbpfServiceDiscoveryArrayOutput {
	return i.ToEbpfServiceDiscoveryArrayOutputWithContext(context.Background())
}

func (i EbpfServiceDiscoveryArray) ToEbpfServiceDiscoveryArrayOutputWithContext(ctx context.Context) EbpfServiceDiscoveryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EbpfServiceDiscoveryArrayOutput)
}

// EbpfServiceDiscoveryMapInput is an input type that accepts EbpfServiceDiscoveryMap and EbpfServiceDiscoveryMapOutput values.
// You can construct a concrete instance of `EbpfServiceDiscoveryMapInput` via:
//
//	EbpfServiceDiscoveryMap{ "key": EbpfServiceDiscoveryArgs{...} }
type EbpfServiceDiscoveryMapInput interface {
	pulumi.Input

	ToEbpfServiceDiscoveryMapOutput() EbpfServiceDiscoveryMapOutput
	ToEbpfServiceDiscoveryMapOutputWithContext(context.Context) EbpfServiceDiscoveryMapOutput
}

type EbpfServiceDiscoveryMap map[string]EbpfServiceDiscoveryInput

func (EbpfServiceDiscoveryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EbpfServiceDiscovery)(nil)).Elem()
}

func (i EbpfServiceDiscoveryMap) ToEbpfServiceDiscoveryMapOutput() EbpfServiceDiscoveryMapOutput {
	return i.ToEbpfServiceDiscoveryMapOutputWithContext(context.Background())
}

func (i EbpfServiceDiscoveryMap) ToEbpfServiceDiscoveryMapOutputWithContext(ctx context.Context) EbpfServiceDiscoveryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EbpfServiceDiscoveryMapOutput)
}

type EbpfServiceDiscoveryOutput struct{ *pulumi.OutputState }

func (EbpfServiceDiscoveryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EbpfServiceDiscovery)(nil)).Elem()
}

func (o EbpfServiceDiscoveryOutput) ToEbpfServiceDiscoveryOutput() EbpfServiceDiscoveryOutput {
	return o
}

func (o EbpfServiceDiscoveryOutput) ToEbpfServiceDiscoveryOutputWithContext(ctx context.Context) EbpfServiceDiscoveryOutput {
	return o
}

// When disabled, Dynatrace can only detect services in Full stack mode.
func (o EbpfServiceDiscoveryOutput) Ebpf() pulumi.BoolOutput {
	return o.ApplyT(func(v *EbpfServiceDiscovery) pulumi.BoolOutput { return v.Ebpf }).(pulumi.BoolOutput)
}

// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
func (o EbpfServiceDiscoveryOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EbpfServiceDiscovery) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

type EbpfServiceDiscoveryArrayOutput struct{ *pulumi.OutputState }

func (EbpfServiceDiscoveryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EbpfServiceDiscovery)(nil)).Elem()
}

func (o EbpfServiceDiscoveryArrayOutput) ToEbpfServiceDiscoveryArrayOutput() EbpfServiceDiscoveryArrayOutput {
	return o
}

func (o EbpfServiceDiscoveryArrayOutput) ToEbpfServiceDiscoveryArrayOutputWithContext(ctx context.Context) EbpfServiceDiscoveryArrayOutput {
	return o
}

func (o EbpfServiceDiscoveryArrayOutput) Index(i pulumi.IntInput) EbpfServiceDiscoveryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EbpfServiceDiscovery {
		return vs[0].([]*EbpfServiceDiscovery)[vs[1].(int)]
	}).(EbpfServiceDiscoveryOutput)
}

type EbpfServiceDiscoveryMapOutput struct{ *pulumi.OutputState }

func (EbpfServiceDiscoveryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EbpfServiceDiscovery)(nil)).Elem()
}

func (o EbpfServiceDiscoveryMapOutput) ToEbpfServiceDiscoveryMapOutput() EbpfServiceDiscoveryMapOutput {
	return o
}

func (o EbpfServiceDiscoveryMapOutput) ToEbpfServiceDiscoveryMapOutputWithContext(ctx context.Context) EbpfServiceDiscoveryMapOutput {
	return o
}

func (o EbpfServiceDiscoveryMapOutput) MapIndex(k pulumi.StringInput) EbpfServiceDiscoveryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EbpfServiceDiscovery {
		return vs[0].(map[string]*EbpfServiceDiscovery)[vs[1].(string)]
	}).(EbpfServiceDiscoveryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EbpfServiceDiscoveryInput)(nil)).Elem(), &EbpfServiceDiscovery{})
	pulumi.RegisterInputType(reflect.TypeOf((*EbpfServiceDiscoveryArrayInput)(nil)).Elem(), EbpfServiceDiscoveryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EbpfServiceDiscoveryMapInput)(nil)).Elem(), EbpfServiceDiscoveryMap{})
	pulumi.RegisterOutputType(EbpfServiceDiscoveryOutput{})
	pulumi.RegisterOutputType(EbpfServiceDiscoveryArrayOutput{})
	pulumi.RegisterOutputType(EbpfServiceDiscoveryMapOutput{})
}
