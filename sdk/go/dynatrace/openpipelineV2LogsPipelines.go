// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OpenpipelineV2LogsPipelines struct {
	pulumi.CustomResourceState

	// Cost allocation stage
	CostAllocation OpenpipelineV2LogsPipelinesCostAllocationOutput `pulumi:"costAllocation"`
	// Custom pipeline id
	CustomId pulumi.StringOutput `pulumi:"customId"`
	// Data extraction stage
	DataExtraction OpenpipelineV2LogsPipelinesDataExtractionOutput `pulumi:"dataExtraction"`
	// Davis event extraction stage
	Davis OpenpipelineV2LogsPipelinesDavisOutput `pulumi:"davis"`
	// Display name
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Metrics extraction stage
	MetricExtraction OpenpipelineV2LogsPipelinesMetricExtractionOutput `pulumi:"metricExtraction"`
	// Processing stage
	Processing OpenpipelineV2LogsPipelinesProcessingOutput `pulumi:"processing"`
	// Product allocation stage
	ProductAllocation OpenpipelineV2LogsPipelinesProductAllocationOutput `pulumi:"productAllocation"`
	// Security context stage
	SecurityContext OpenpipelineV2LogsPipelinesSecurityContextOutput `pulumi:"securityContext"`
	// Storage stage
	Storage OpenpipelineV2LogsPipelinesStorageOutput `pulumi:"storage"`
}

// NewOpenpipelineV2LogsPipelines registers a new resource with the given unique name, arguments, and options.
func NewOpenpipelineV2LogsPipelines(ctx *pulumi.Context,
	name string, args *OpenpipelineV2LogsPipelinesArgs, opts ...pulumi.ResourceOption) (*OpenpipelineV2LogsPipelines, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CostAllocation == nil {
		return nil, errors.New("invalid value for required argument 'CostAllocation'")
	}
	if args.CustomId == nil {
		return nil, errors.New("invalid value for required argument 'CustomId'")
	}
	if args.DataExtraction == nil {
		return nil, errors.New("invalid value for required argument 'DataExtraction'")
	}
	if args.Davis == nil {
		return nil, errors.New("invalid value for required argument 'Davis'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.MetricExtraction == nil {
		return nil, errors.New("invalid value for required argument 'MetricExtraction'")
	}
	if args.Processing == nil {
		return nil, errors.New("invalid value for required argument 'Processing'")
	}
	if args.ProductAllocation == nil {
		return nil, errors.New("invalid value for required argument 'ProductAllocation'")
	}
	if args.SecurityContext == nil {
		return nil, errors.New("invalid value for required argument 'SecurityContext'")
	}
	if args.Storage == nil {
		return nil, errors.New("invalid value for required argument 'Storage'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenpipelineV2LogsPipelines
	err := ctx.RegisterResource("dynatrace:index/openpipelineV2LogsPipelines:OpenpipelineV2LogsPipelines", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenpipelineV2LogsPipelines gets an existing OpenpipelineV2LogsPipelines resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenpipelineV2LogsPipelines(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenpipelineV2LogsPipelinesState, opts ...pulumi.ResourceOption) (*OpenpipelineV2LogsPipelines, error) {
	var resource OpenpipelineV2LogsPipelines
	err := ctx.ReadResource("dynatrace:index/openpipelineV2LogsPipelines:OpenpipelineV2LogsPipelines", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenpipelineV2LogsPipelines resources.
type openpipelineV2LogsPipelinesState struct {
	// Cost allocation stage
	CostAllocation *OpenpipelineV2LogsPipelinesCostAllocation `pulumi:"costAllocation"`
	// Custom pipeline id
	CustomId *string `pulumi:"customId"`
	// Data extraction stage
	DataExtraction *OpenpipelineV2LogsPipelinesDataExtraction `pulumi:"dataExtraction"`
	// Davis event extraction stage
	Davis *OpenpipelineV2LogsPipelinesDavis `pulumi:"davis"`
	// Display name
	DisplayName *string `pulumi:"displayName"`
	// Metrics extraction stage
	MetricExtraction *OpenpipelineV2LogsPipelinesMetricExtraction `pulumi:"metricExtraction"`
	// Processing stage
	Processing *OpenpipelineV2LogsPipelinesProcessing `pulumi:"processing"`
	// Product allocation stage
	ProductAllocation *OpenpipelineV2LogsPipelinesProductAllocation `pulumi:"productAllocation"`
	// Security context stage
	SecurityContext *OpenpipelineV2LogsPipelinesSecurityContext `pulumi:"securityContext"`
	// Storage stage
	Storage *OpenpipelineV2LogsPipelinesStorage `pulumi:"storage"`
}

type OpenpipelineV2LogsPipelinesState struct {
	// Cost allocation stage
	CostAllocation OpenpipelineV2LogsPipelinesCostAllocationPtrInput
	// Custom pipeline id
	CustomId pulumi.StringPtrInput
	// Data extraction stage
	DataExtraction OpenpipelineV2LogsPipelinesDataExtractionPtrInput
	// Davis event extraction stage
	Davis OpenpipelineV2LogsPipelinesDavisPtrInput
	// Display name
	DisplayName pulumi.StringPtrInput
	// Metrics extraction stage
	MetricExtraction OpenpipelineV2LogsPipelinesMetricExtractionPtrInput
	// Processing stage
	Processing OpenpipelineV2LogsPipelinesProcessingPtrInput
	// Product allocation stage
	ProductAllocation OpenpipelineV2LogsPipelinesProductAllocationPtrInput
	// Security context stage
	SecurityContext OpenpipelineV2LogsPipelinesSecurityContextPtrInput
	// Storage stage
	Storage OpenpipelineV2LogsPipelinesStoragePtrInput
}

func (OpenpipelineV2LogsPipelinesState) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2LogsPipelinesState)(nil)).Elem()
}

type openpipelineV2LogsPipelinesArgs struct {
	// Cost allocation stage
	CostAllocation OpenpipelineV2LogsPipelinesCostAllocation `pulumi:"costAllocation"`
	// Custom pipeline id
	CustomId string `pulumi:"customId"`
	// Data extraction stage
	DataExtraction OpenpipelineV2LogsPipelinesDataExtraction `pulumi:"dataExtraction"`
	// Davis event extraction stage
	Davis OpenpipelineV2LogsPipelinesDavis `pulumi:"davis"`
	// Display name
	DisplayName string `pulumi:"displayName"`
	// Metrics extraction stage
	MetricExtraction OpenpipelineV2LogsPipelinesMetricExtraction `pulumi:"metricExtraction"`
	// Processing stage
	Processing OpenpipelineV2LogsPipelinesProcessing `pulumi:"processing"`
	// Product allocation stage
	ProductAllocation OpenpipelineV2LogsPipelinesProductAllocation `pulumi:"productAllocation"`
	// Security context stage
	SecurityContext OpenpipelineV2LogsPipelinesSecurityContext `pulumi:"securityContext"`
	// Storage stage
	Storage OpenpipelineV2LogsPipelinesStorage `pulumi:"storage"`
}

// The set of arguments for constructing a OpenpipelineV2LogsPipelines resource.
type OpenpipelineV2LogsPipelinesArgs struct {
	// Cost allocation stage
	CostAllocation OpenpipelineV2LogsPipelinesCostAllocationInput
	// Custom pipeline id
	CustomId pulumi.StringInput
	// Data extraction stage
	DataExtraction OpenpipelineV2LogsPipelinesDataExtractionInput
	// Davis event extraction stage
	Davis OpenpipelineV2LogsPipelinesDavisInput
	// Display name
	DisplayName pulumi.StringInput
	// Metrics extraction stage
	MetricExtraction OpenpipelineV2LogsPipelinesMetricExtractionInput
	// Processing stage
	Processing OpenpipelineV2LogsPipelinesProcessingInput
	// Product allocation stage
	ProductAllocation OpenpipelineV2LogsPipelinesProductAllocationInput
	// Security context stage
	SecurityContext OpenpipelineV2LogsPipelinesSecurityContextInput
	// Storage stage
	Storage OpenpipelineV2LogsPipelinesStorageInput
}

func (OpenpipelineV2LogsPipelinesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2LogsPipelinesArgs)(nil)).Elem()
}

type OpenpipelineV2LogsPipelinesInput interface {
	pulumi.Input

	ToOpenpipelineV2LogsPipelinesOutput() OpenpipelineV2LogsPipelinesOutput
	ToOpenpipelineV2LogsPipelinesOutputWithContext(ctx context.Context) OpenpipelineV2LogsPipelinesOutput
}

func (*OpenpipelineV2LogsPipelines) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2LogsPipelines)(nil)).Elem()
}

func (i *OpenpipelineV2LogsPipelines) ToOpenpipelineV2LogsPipelinesOutput() OpenpipelineV2LogsPipelinesOutput {
	return i.ToOpenpipelineV2LogsPipelinesOutputWithContext(context.Background())
}

func (i *OpenpipelineV2LogsPipelines) ToOpenpipelineV2LogsPipelinesOutputWithContext(ctx context.Context) OpenpipelineV2LogsPipelinesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2LogsPipelinesOutput)
}

// OpenpipelineV2LogsPipelinesArrayInput is an input type that accepts OpenpipelineV2LogsPipelinesArray and OpenpipelineV2LogsPipelinesArrayOutput values.
// You can construct a concrete instance of `OpenpipelineV2LogsPipelinesArrayInput` via:
//
//	OpenpipelineV2LogsPipelinesArray{ OpenpipelineV2LogsPipelinesArgs{...} }
type OpenpipelineV2LogsPipelinesArrayInput interface {
	pulumi.Input

	ToOpenpipelineV2LogsPipelinesArrayOutput() OpenpipelineV2LogsPipelinesArrayOutput
	ToOpenpipelineV2LogsPipelinesArrayOutputWithContext(context.Context) OpenpipelineV2LogsPipelinesArrayOutput
}

type OpenpipelineV2LogsPipelinesArray []OpenpipelineV2LogsPipelinesInput

func (OpenpipelineV2LogsPipelinesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2LogsPipelines)(nil)).Elem()
}

func (i OpenpipelineV2LogsPipelinesArray) ToOpenpipelineV2LogsPipelinesArrayOutput() OpenpipelineV2LogsPipelinesArrayOutput {
	return i.ToOpenpipelineV2LogsPipelinesArrayOutputWithContext(context.Background())
}

func (i OpenpipelineV2LogsPipelinesArray) ToOpenpipelineV2LogsPipelinesArrayOutputWithContext(ctx context.Context) OpenpipelineV2LogsPipelinesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2LogsPipelinesArrayOutput)
}

// OpenpipelineV2LogsPipelinesMapInput is an input type that accepts OpenpipelineV2LogsPipelinesMap and OpenpipelineV2LogsPipelinesMapOutput values.
// You can construct a concrete instance of `OpenpipelineV2LogsPipelinesMapInput` via:
//
//	OpenpipelineV2LogsPipelinesMap{ "key": OpenpipelineV2LogsPipelinesArgs{...} }
type OpenpipelineV2LogsPipelinesMapInput interface {
	pulumi.Input

	ToOpenpipelineV2LogsPipelinesMapOutput() OpenpipelineV2LogsPipelinesMapOutput
	ToOpenpipelineV2LogsPipelinesMapOutputWithContext(context.Context) OpenpipelineV2LogsPipelinesMapOutput
}

type OpenpipelineV2LogsPipelinesMap map[string]OpenpipelineV2LogsPipelinesInput

func (OpenpipelineV2LogsPipelinesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2LogsPipelines)(nil)).Elem()
}

func (i OpenpipelineV2LogsPipelinesMap) ToOpenpipelineV2LogsPipelinesMapOutput() OpenpipelineV2LogsPipelinesMapOutput {
	return i.ToOpenpipelineV2LogsPipelinesMapOutputWithContext(context.Background())
}

func (i OpenpipelineV2LogsPipelinesMap) ToOpenpipelineV2LogsPipelinesMapOutputWithContext(ctx context.Context) OpenpipelineV2LogsPipelinesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2LogsPipelinesMapOutput)
}

type OpenpipelineV2LogsPipelinesOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2LogsPipelinesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2LogsPipelines)(nil)).Elem()
}

func (o OpenpipelineV2LogsPipelinesOutput) ToOpenpipelineV2LogsPipelinesOutput() OpenpipelineV2LogsPipelinesOutput {
	return o
}

func (o OpenpipelineV2LogsPipelinesOutput) ToOpenpipelineV2LogsPipelinesOutputWithContext(ctx context.Context) OpenpipelineV2LogsPipelinesOutput {
	return o
}

// Cost allocation stage
func (o OpenpipelineV2LogsPipelinesOutput) CostAllocation() OpenpipelineV2LogsPipelinesCostAllocationOutput {
	return o.ApplyT(func(v *OpenpipelineV2LogsPipelines) OpenpipelineV2LogsPipelinesCostAllocationOutput {
		return v.CostAllocation
	}).(OpenpipelineV2LogsPipelinesCostAllocationOutput)
}

// Custom pipeline id
func (o OpenpipelineV2LogsPipelinesOutput) CustomId() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenpipelineV2LogsPipelines) pulumi.StringOutput { return v.CustomId }).(pulumi.StringOutput)
}

// Data extraction stage
func (o OpenpipelineV2LogsPipelinesOutput) DataExtraction() OpenpipelineV2LogsPipelinesDataExtractionOutput {
	return o.ApplyT(func(v *OpenpipelineV2LogsPipelines) OpenpipelineV2LogsPipelinesDataExtractionOutput {
		return v.DataExtraction
	}).(OpenpipelineV2LogsPipelinesDataExtractionOutput)
}

// Davis event extraction stage
func (o OpenpipelineV2LogsPipelinesOutput) Davis() OpenpipelineV2LogsPipelinesDavisOutput {
	return o.ApplyT(func(v *OpenpipelineV2LogsPipelines) OpenpipelineV2LogsPipelinesDavisOutput { return v.Davis }).(OpenpipelineV2LogsPipelinesDavisOutput)
}

// Display name
func (o OpenpipelineV2LogsPipelinesOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenpipelineV2LogsPipelines) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Metrics extraction stage
func (o OpenpipelineV2LogsPipelinesOutput) MetricExtraction() OpenpipelineV2LogsPipelinesMetricExtractionOutput {
	return o.ApplyT(func(v *OpenpipelineV2LogsPipelines) OpenpipelineV2LogsPipelinesMetricExtractionOutput {
		return v.MetricExtraction
	}).(OpenpipelineV2LogsPipelinesMetricExtractionOutput)
}

// Processing stage
func (o OpenpipelineV2LogsPipelinesOutput) Processing() OpenpipelineV2LogsPipelinesProcessingOutput {
	return o.ApplyT(func(v *OpenpipelineV2LogsPipelines) OpenpipelineV2LogsPipelinesProcessingOutput { return v.Processing }).(OpenpipelineV2LogsPipelinesProcessingOutput)
}

// Product allocation stage
func (o OpenpipelineV2LogsPipelinesOutput) ProductAllocation() OpenpipelineV2LogsPipelinesProductAllocationOutput {
	return o.ApplyT(func(v *OpenpipelineV2LogsPipelines) OpenpipelineV2LogsPipelinesProductAllocationOutput {
		return v.ProductAllocation
	}).(OpenpipelineV2LogsPipelinesProductAllocationOutput)
}

// Security context stage
func (o OpenpipelineV2LogsPipelinesOutput) SecurityContext() OpenpipelineV2LogsPipelinesSecurityContextOutput {
	return o.ApplyT(func(v *OpenpipelineV2LogsPipelines) OpenpipelineV2LogsPipelinesSecurityContextOutput {
		return v.SecurityContext
	}).(OpenpipelineV2LogsPipelinesSecurityContextOutput)
}

// Storage stage
func (o OpenpipelineV2LogsPipelinesOutput) Storage() OpenpipelineV2LogsPipelinesStorageOutput {
	return o.ApplyT(func(v *OpenpipelineV2LogsPipelines) OpenpipelineV2LogsPipelinesStorageOutput { return v.Storage }).(OpenpipelineV2LogsPipelinesStorageOutput)
}

type OpenpipelineV2LogsPipelinesArrayOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2LogsPipelinesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2LogsPipelines)(nil)).Elem()
}

func (o OpenpipelineV2LogsPipelinesArrayOutput) ToOpenpipelineV2LogsPipelinesArrayOutput() OpenpipelineV2LogsPipelinesArrayOutput {
	return o
}

func (o OpenpipelineV2LogsPipelinesArrayOutput) ToOpenpipelineV2LogsPipelinesArrayOutputWithContext(ctx context.Context) OpenpipelineV2LogsPipelinesArrayOutput {
	return o
}

func (o OpenpipelineV2LogsPipelinesArrayOutput) Index(i pulumi.IntInput) OpenpipelineV2LogsPipelinesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenpipelineV2LogsPipelines {
		return vs[0].([]*OpenpipelineV2LogsPipelines)[vs[1].(int)]
	}).(OpenpipelineV2LogsPipelinesOutput)
}

type OpenpipelineV2LogsPipelinesMapOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2LogsPipelinesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2LogsPipelines)(nil)).Elem()
}

func (o OpenpipelineV2LogsPipelinesMapOutput) ToOpenpipelineV2LogsPipelinesMapOutput() OpenpipelineV2LogsPipelinesMapOutput {
	return o
}

func (o OpenpipelineV2LogsPipelinesMapOutput) ToOpenpipelineV2LogsPipelinesMapOutputWithContext(ctx context.Context) OpenpipelineV2LogsPipelinesMapOutput {
	return o
}

func (o OpenpipelineV2LogsPipelinesMapOutput) MapIndex(k pulumi.StringInput) OpenpipelineV2LogsPipelinesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenpipelineV2LogsPipelines {
		return vs[0].(map[string]*OpenpipelineV2LogsPipelines)[vs[1].(string)]
	}).(OpenpipelineV2LogsPipelinesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2LogsPipelinesInput)(nil)).Elem(), &OpenpipelineV2LogsPipelines{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2LogsPipelinesArrayInput)(nil)).Elem(), OpenpipelineV2LogsPipelinesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2LogsPipelinesMapInput)(nil)).Elem(), OpenpipelineV2LogsPipelinesMap{})
	pulumi.RegisterOutputType(OpenpipelineV2LogsPipelinesOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2LogsPipelinesArrayOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2LogsPipelinesMapOutput{})
}
