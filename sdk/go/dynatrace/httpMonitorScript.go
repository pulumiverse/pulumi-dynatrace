// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type HttpMonitorScript struct {
	pulumi.CustomResourceState

	// The ID of the HTTP monitor
	HttpId pulumi.StringOutput `pulumi:"httpId"`
	// The HTTP Script
	Script HttpMonitorScriptScriptOutput `pulumi:"script"`
}

// NewHttpMonitorScript registers a new resource with the given unique name, arguments, and options.
func NewHttpMonitorScript(ctx *pulumi.Context,
	name string, args *HttpMonitorScriptArgs, opts ...pulumi.ResourceOption) (*HttpMonitorScript, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HttpId == nil {
		return nil, errors.New("invalid value for required argument 'HttpId'")
	}
	if args.Script == nil {
		return nil, errors.New("invalid value for required argument 'Script'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HttpMonitorScript
	err := ctx.RegisterResource("dynatrace:index/httpMonitorScript:HttpMonitorScript", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHttpMonitorScript gets an existing HttpMonitorScript resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHttpMonitorScript(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HttpMonitorScriptState, opts ...pulumi.ResourceOption) (*HttpMonitorScript, error) {
	var resource HttpMonitorScript
	err := ctx.ReadResource("dynatrace:index/httpMonitorScript:HttpMonitorScript", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HttpMonitorScript resources.
type httpMonitorScriptState struct {
	// The ID of the HTTP monitor
	HttpId *string `pulumi:"httpId"`
	// The HTTP Script
	Script *HttpMonitorScriptScript `pulumi:"script"`
}

type HttpMonitorScriptState struct {
	// The ID of the HTTP monitor
	HttpId pulumi.StringPtrInput
	// The HTTP Script
	Script HttpMonitorScriptScriptPtrInput
}

func (HttpMonitorScriptState) ElementType() reflect.Type {
	return reflect.TypeOf((*httpMonitorScriptState)(nil)).Elem()
}

type httpMonitorScriptArgs struct {
	// The ID of the HTTP monitor
	HttpId string `pulumi:"httpId"`
	// The HTTP Script
	Script HttpMonitorScriptScript `pulumi:"script"`
}

// The set of arguments for constructing a HttpMonitorScript resource.
type HttpMonitorScriptArgs struct {
	// The ID of the HTTP monitor
	HttpId pulumi.StringInput
	// The HTTP Script
	Script HttpMonitorScriptScriptInput
}

func (HttpMonitorScriptArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*httpMonitorScriptArgs)(nil)).Elem()
}

type HttpMonitorScriptInput interface {
	pulumi.Input

	ToHttpMonitorScriptOutput() HttpMonitorScriptOutput
	ToHttpMonitorScriptOutputWithContext(ctx context.Context) HttpMonitorScriptOutput
}

func (*HttpMonitorScript) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpMonitorScript)(nil)).Elem()
}

func (i *HttpMonitorScript) ToHttpMonitorScriptOutput() HttpMonitorScriptOutput {
	return i.ToHttpMonitorScriptOutputWithContext(context.Background())
}

func (i *HttpMonitorScript) ToHttpMonitorScriptOutputWithContext(ctx context.Context) HttpMonitorScriptOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpMonitorScriptOutput)
}

// HttpMonitorScriptArrayInput is an input type that accepts HttpMonitorScriptArray and HttpMonitorScriptArrayOutput values.
// You can construct a concrete instance of `HttpMonitorScriptArrayInput` via:
//
//	HttpMonitorScriptArray{ HttpMonitorScriptArgs{...} }
type HttpMonitorScriptArrayInput interface {
	pulumi.Input

	ToHttpMonitorScriptArrayOutput() HttpMonitorScriptArrayOutput
	ToHttpMonitorScriptArrayOutputWithContext(context.Context) HttpMonitorScriptArrayOutput
}

type HttpMonitorScriptArray []HttpMonitorScriptInput

func (HttpMonitorScriptArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HttpMonitorScript)(nil)).Elem()
}

func (i HttpMonitorScriptArray) ToHttpMonitorScriptArrayOutput() HttpMonitorScriptArrayOutput {
	return i.ToHttpMonitorScriptArrayOutputWithContext(context.Background())
}

func (i HttpMonitorScriptArray) ToHttpMonitorScriptArrayOutputWithContext(ctx context.Context) HttpMonitorScriptArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpMonitorScriptArrayOutput)
}

// HttpMonitorScriptMapInput is an input type that accepts HttpMonitorScriptMap and HttpMonitorScriptMapOutput values.
// You can construct a concrete instance of `HttpMonitorScriptMapInput` via:
//
//	HttpMonitorScriptMap{ "key": HttpMonitorScriptArgs{...} }
type HttpMonitorScriptMapInput interface {
	pulumi.Input

	ToHttpMonitorScriptMapOutput() HttpMonitorScriptMapOutput
	ToHttpMonitorScriptMapOutputWithContext(context.Context) HttpMonitorScriptMapOutput
}

type HttpMonitorScriptMap map[string]HttpMonitorScriptInput

func (HttpMonitorScriptMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HttpMonitorScript)(nil)).Elem()
}

func (i HttpMonitorScriptMap) ToHttpMonitorScriptMapOutput() HttpMonitorScriptMapOutput {
	return i.ToHttpMonitorScriptMapOutputWithContext(context.Background())
}

func (i HttpMonitorScriptMap) ToHttpMonitorScriptMapOutputWithContext(ctx context.Context) HttpMonitorScriptMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpMonitorScriptMapOutput)
}

type HttpMonitorScriptOutput struct{ *pulumi.OutputState }

func (HttpMonitorScriptOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpMonitorScript)(nil)).Elem()
}

func (o HttpMonitorScriptOutput) ToHttpMonitorScriptOutput() HttpMonitorScriptOutput {
	return o
}

func (o HttpMonitorScriptOutput) ToHttpMonitorScriptOutputWithContext(ctx context.Context) HttpMonitorScriptOutput {
	return o
}

// The ID of the HTTP monitor
func (o HttpMonitorScriptOutput) HttpId() pulumi.StringOutput {
	return o.ApplyT(func(v *HttpMonitorScript) pulumi.StringOutput { return v.HttpId }).(pulumi.StringOutput)
}

// The HTTP Script
func (o HttpMonitorScriptOutput) Script() HttpMonitorScriptScriptOutput {
	return o.ApplyT(func(v *HttpMonitorScript) HttpMonitorScriptScriptOutput { return v.Script }).(HttpMonitorScriptScriptOutput)
}

type HttpMonitorScriptArrayOutput struct{ *pulumi.OutputState }

func (HttpMonitorScriptArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HttpMonitorScript)(nil)).Elem()
}

func (o HttpMonitorScriptArrayOutput) ToHttpMonitorScriptArrayOutput() HttpMonitorScriptArrayOutput {
	return o
}

func (o HttpMonitorScriptArrayOutput) ToHttpMonitorScriptArrayOutputWithContext(ctx context.Context) HttpMonitorScriptArrayOutput {
	return o
}

func (o HttpMonitorScriptArrayOutput) Index(i pulumi.IntInput) HttpMonitorScriptOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HttpMonitorScript {
		return vs[0].([]*HttpMonitorScript)[vs[1].(int)]
	}).(HttpMonitorScriptOutput)
}

type HttpMonitorScriptMapOutput struct{ *pulumi.OutputState }

func (HttpMonitorScriptMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HttpMonitorScript)(nil)).Elem()
}

func (o HttpMonitorScriptMapOutput) ToHttpMonitorScriptMapOutput() HttpMonitorScriptMapOutput {
	return o
}

func (o HttpMonitorScriptMapOutput) ToHttpMonitorScriptMapOutputWithContext(ctx context.Context) HttpMonitorScriptMapOutput {
	return o
}

func (o HttpMonitorScriptMapOutput) MapIndex(k pulumi.StringInput) HttpMonitorScriptOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HttpMonitorScript {
		return vs[0].(map[string]*HttpMonitorScript)[vs[1].(string)]
	}).(HttpMonitorScriptOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HttpMonitorScriptInput)(nil)).Elem(), &HttpMonitorScript{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpMonitorScriptArrayInput)(nil)).Elem(), HttpMonitorScriptArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpMonitorScriptMapInput)(nil)).Elem(), HttpMonitorScriptMap{})
	pulumi.RegisterOutputType(HttpMonitorScriptOutput{})
	pulumi.RegisterOutputType(HttpMonitorScriptArrayOutput{})
	pulumi.RegisterOutputType(HttpMonitorScriptMapOutput{})
}
