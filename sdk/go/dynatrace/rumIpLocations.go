// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type RumIpLocations struct {
	pulumi.CustomResourceState

	// The city name of the location.
	City pulumi.StringPtrOutput `pulumi:"city"`
	// The country code of the location.
	CountryCode pulumi.StringOutput `pulumi:"countryCode"`
	// Single IP or IP range start address
	Ip pulumi.StringOutput `pulumi:"ip"`
	// IP range end
	IpTo pulumi.StringPtrOutput `pulumi:"ipTo"`
	// Latitude
	Latitude pulumi.Float64PtrOutput `pulumi:"latitude"`
	// Longitude
	Longitude pulumi.Float64PtrOutput `pulumi:"longitude"`
	// The region code of the location.
	//
	//  For the [USA](https://dt-url.net/iso3166us) or [Canada](https://dt-url.net/iso3166ca) use ISO 3166-2 state codes without `US-` or `CA-` prefix.
	//
	//  For the rest of the world use [FIPS 10-4 codes](https://dt-url.net/fipscodes) without country prefix.
	RegionCode pulumi.StringPtrOutput `pulumi:"regionCode"`
}

// NewRumIpLocations registers a new resource with the given unique name, arguments, and options.
func NewRumIpLocations(ctx *pulumi.Context,
	name string, args *RumIpLocationsArgs, opts ...pulumi.ResourceOption) (*RumIpLocations, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CountryCode == nil {
		return nil, errors.New("invalid value for required argument 'CountryCode'")
	}
	if args.Ip == nil {
		return nil, errors.New("invalid value for required argument 'Ip'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RumIpLocations
	err := ctx.RegisterResource("dynatrace:index/rumIpLocations:RumIpLocations", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRumIpLocations gets an existing RumIpLocations resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRumIpLocations(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RumIpLocationsState, opts ...pulumi.ResourceOption) (*RumIpLocations, error) {
	var resource RumIpLocations
	err := ctx.ReadResource("dynatrace:index/rumIpLocations:RumIpLocations", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RumIpLocations resources.
type rumIpLocationsState struct {
	// The city name of the location.
	City *string `pulumi:"city"`
	// The country code of the location.
	CountryCode *string `pulumi:"countryCode"`
	// Single IP or IP range start address
	Ip *string `pulumi:"ip"`
	// IP range end
	IpTo *string `pulumi:"ipTo"`
	// Latitude
	Latitude *float64 `pulumi:"latitude"`
	// Longitude
	Longitude *float64 `pulumi:"longitude"`
	// The region code of the location.
	//
	//  For the [USA](https://dt-url.net/iso3166us) or [Canada](https://dt-url.net/iso3166ca) use ISO 3166-2 state codes without `US-` or `CA-` prefix.
	//
	//  For the rest of the world use [FIPS 10-4 codes](https://dt-url.net/fipscodes) without country prefix.
	RegionCode *string `pulumi:"regionCode"`
}

type RumIpLocationsState struct {
	// The city name of the location.
	City pulumi.StringPtrInput
	// The country code of the location.
	CountryCode pulumi.StringPtrInput
	// Single IP or IP range start address
	Ip pulumi.StringPtrInput
	// IP range end
	IpTo pulumi.StringPtrInput
	// Latitude
	Latitude pulumi.Float64PtrInput
	// Longitude
	Longitude pulumi.Float64PtrInput
	// The region code of the location.
	//
	//  For the [USA](https://dt-url.net/iso3166us) or [Canada](https://dt-url.net/iso3166ca) use ISO 3166-2 state codes without `US-` or `CA-` prefix.
	//
	//  For the rest of the world use [FIPS 10-4 codes](https://dt-url.net/fipscodes) without country prefix.
	RegionCode pulumi.StringPtrInput
}

func (RumIpLocationsState) ElementType() reflect.Type {
	return reflect.TypeOf((*rumIpLocationsState)(nil)).Elem()
}

type rumIpLocationsArgs struct {
	// The city name of the location.
	City *string `pulumi:"city"`
	// The country code of the location.
	CountryCode string `pulumi:"countryCode"`
	// Single IP or IP range start address
	Ip string `pulumi:"ip"`
	// IP range end
	IpTo *string `pulumi:"ipTo"`
	// Latitude
	Latitude *float64 `pulumi:"latitude"`
	// Longitude
	Longitude *float64 `pulumi:"longitude"`
	// The region code of the location.
	//
	//  For the [USA](https://dt-url.net/iso3166us) or [Canada](https://dt-url.net/iso3166ca) use ISO 3166-2 state codes without `US-` or `CA-` prefix.
	//
	//  For the rest of the world use [FIPS 10-4 codes](https://dt-url.net/fipscodes) without country prefix.
	RegionCode *string `pulumi:"regionCode"`
}

// The set of arguments for constructing a RumIpLocations resource.
type RumIpLocationsArgs struct {
	// The city name of the location.
	City pulumi.StringPtrInput
	// The country code of the location.
	CountryCode pulumi.StringInput
	// Single IP or IP range start address
	Ip pulumi.StringInput
	// IP range end
	IpTo pulumi.StringPtrInput
	// Latitude
	Latitude pulumi.Float64PtrInput
	// Longitude
	Longitude pulumi.Float64PtrInput
	// The region code of the location.
	//
	//  For the [USA](https://dt-url.net/iso3166us) or [Canada](https://dt-url.net/iso3166ca) use ISO 3166-2 state codes without `US-` or `CA-` prefix.
	//
	//  For the rest of the world use [FIPS 10-4 codes](https://dt-url.net/fipscodes) without country prefix.
	RegionCode pulumi.StringPtrInput
}

func (RumIpLocationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rumIpLocationsArgs)(nil)).Elem()
}

type RumIpLocationsInput interface {
	pulumi.Input

	ToRumIpLocationsOutput() RumIpLocationsOutput
	ToRumIpLocationsOutputWithContext(ctx context.Context) RumIpLocationsOutput
}

func (*RumIpLocations) ElementType() reflect.Type {
	return reflect.TypeOf((**RumIpLocations)(nil)).Elem()
}

func (i *RumIpLocations) ToRumIpLocationsOutput() RumIpLocationsOutput {
	return i.ToRumIpLocationsOutputWithContext(context.Background())
}

func (i *RumIpLocations) ToRumIpLocationsOutputWithContext(ctx context.Context) RumIpLocationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RumIpLocationsOutput)
}

// RumIpLocationsArrayInput is an input type that accepts RumIpLocationsArray and RumIpLocationsArrayOutput values.
// You can construct a concrete instance of `RumIpLocationsArrayInput` via:
//
//	RumIpLocationsArray{ RumIpLocationsArgs{...} }
type RumIpLocationsArrayInput interface {
	pulumi.Input

	ToRumIpLocationsArrayOutput() RumIpLocationsArrayOutput
	ToRumIpLocationsArrayOutputWithContext(context.Context) RumIpLocationsArrayOutput
}

type RumIpLocationsArray []RumIpLocationsInput

func (RumIpLocationsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RumIpLocations)(nil)).Elem()
}

func (i RumIpLocationsArray) ToRumIpLocationsArrayOutput() RumIpLocationsArrayOutput {
	return i.ToRumIpLocationsArrayOutputWithContext(context.Background())
}

func (i RumIpLocationsArray) ToRumIpLocationsArrayOutputWithContext(ctx context.Context) RumIpLocationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RumIpLocationsArrayOutput)
}

// RumIpLocationsMapInput is an input type that accepts RumIpLocationsMap and RumIpLocationsMapOutput values.
// You can construct a concrete instance of `RumIpLocationsMapInput` via:
//
//	RumIpLocationsMap{ "key": RumIpLocationsArgs{...} }
type RumIpLocationsMapInput interface {
	pulumi.Input

	ToRumIpLocationsMapOutput() RumIpLocationsMapOutput
	ToRumIpLocationsMapOutputWithContext(context.Context) RumIpLocationsMapOutput
}

type RumIpLocationsMap map[string]RumIpLocationsInput

func (RumIpLocationsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RumIpLocations)(nil)).Elem()
}

func (i RumIpLocationsMap) ToRumIpLocationsMapOutput() RumIpLocationsMapOutput {
	return i.ToRumIpLocationsMapOutputWithContext(context.Background())
}

func (i RumIpLocationsMap) ToRumIpLocationsMapOutputWithContext(ctx context.Context) RumIpLocationsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RumIpLocationsMapOutput)
}

type RumIpLocationsOutput struct{ *pulumi.OutputState }

func (RumIpLocationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RumIpLocations)(nil)).Elem()
}

func (o RumIpLocationsOutput) ToRumIpLocationsOutput() RumIpLocationsOutput {
	return o
}

func (o RumIpLocationsOutput) ToRumIpLocationsOutputWithContext(ctx context.Context) RumIpLocationsOutput {
	return o
}

// The city name of the location.
func (o RumIpLocationsOutput) City() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RumIpLocations) pulumi.StringPtrOutput { return v.City }).(pulumi.StringPtrOutput)
}

// The country code of the location.
func (o RumIpLocationsOutput) CountryCode() pulumi.StringOutput {
	return o.ApplyT(func(v *RumIpLocations) pulumi.StringOutput { return v.CountryCode }).(pulumi.StringOutput)
}

// Single IP or IP range start address
func (o RumIpLocationsOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *RumIpLocations) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

// IP range end
func (o RumIpLocationsOutput) IpTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RumIpLocations) pulumi.StringPtrOutput { return v.IpTo }).(pulumi.StringPtrOutput)
}

// Latitude
func (o RumIpLocationsOutput) Latitude() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *RumIpLocations) pulumi.Float64PtrOutput { return v.Latitude }).(pulumi.Float64PtrOutput)
}

// Longitude
func (o RumIpLocationsOutput) Longitude() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *RumIpLocations) pulumi.Float64PtrOutput { return v.Longitude }).(pulumi.Float64PtrOutput)
}

// The region code of the location.
//
//	For the [USA](https://dt-url.net/iso3166us) or [Canada](https://dt-url.net/iso3166ca) use ISO 3166-2 state codes without `US-` or `CA-` prefix.
//
//	For the rest of the world use [FIPS 10-4 codes](https://dt-url.net/fipscodes) without country prefix.
func (o RumIpLocationsOutput) RegionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RumIpLocations) pulumi.StringPtrOutput { return v.RegionCode }).(pulumi.StringPtrOutput)
}

type RumIpLocationsArrayOutput struct{ *pulumi.OutputState }

func (RumIpLocationsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RumIpLocations)(nil)).Elem()
}

func (o RumIpLocationsArrayOutput) ToRumIpLocationsArrayOutput() RumIpLocationsArrayOutput {
	return o
}

func (o RumIpLocationsArrayOutput) ToRumIpLocationsArrayOutputWithContext(ctx context.Context) RumIpLocationsArrayOutput {
	return o
}

func (o RumIpLocationsArrayOutput) Index(i pulumi.IntInput) RumIpLocationsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RumIpLocations {
		return vs[0].([]*RumIpLocations)[vs[1].(int)]
	}).(RumIpLocationsOutput)
}

type RumIpLocationsMapOutput struct{ *pulumi.OutputState }

func (RumIpLocationsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RumIpLocations)(nil)).Elem()
}

func (o RumIpLocationsMapOutput) ToRumIpLocationsMapOutput() RumIpLocationsMapOutput {
	return o
}

func (o RumIpLocationsMapOutput) ToRumIpLocationsMapOutputWithContext(ctx context.Context) RumIpLocationsMapOutput {
	return o
}

func (o RumIpLocationsMapOutput) MapIndex(k pulumi.StringInput) RumIpLocationsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RumIpLocations {
		return vs[0].(map[string]*RumIpLocations)[vs[1].(string)]
	}).(RumIpLocationsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RumIpLocationsInput)(nil)).Elem(), &RumIpLocations{})
	pulumi.RegisterInputType(reflect.TypeOf((*RumIpLocationsArrayInput)(nil)).Elem(), RumIpLocationsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RumIpLocationsMapInput)(nil)).Elem(), RumIpLocationsMap{})
	pulumi.RegisterOutputType(RumIpLocationsOutput{})
	pulumi.RegisterOutputType(RumIpLocationsArrayOutput{})
	pulumi.RegisterOutputType(RumIpLocationsMapOutput{})
}
