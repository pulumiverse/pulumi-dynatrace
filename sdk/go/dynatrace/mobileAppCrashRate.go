// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type MobileAppCrashRate struct {
	pulumi.CustomResourceState

	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ApplicationId pulumi.StringPtrOutput `pulumi:"applicationId"`
	// Crash rate increase
	CrashRateIncrease MobileAppCrashRateCrashRateIncreaseOutput `pulumi:"crashRateIncrease"`
}

// NewMobileAppCrashRate registers a new resource with the given unique name, arguments, and options.
func NewMobileAppCrashRate(ctx *pulumi.Context,
	name string, args *MobileAppCrashRateArgs, opts ...pulumi.ResourceOption) (*MobileAppCrashRate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CrashRateIncrease == nil {
		return nil, errors.New("invalid value for required argument 'CrashRateIncrease'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MobileAppCrashRate
	err := ctx.RegisterResource("dynatrace:index/mobileAppCrashRate:MobileAppCrashRate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMobileAppCrashRate gets an existing MobileAppCrashRate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMobileAppCrashRate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MobileAppCrashRateState, opts ...pulumi.ResourceOption) (*MobileAppCrashRate, error) {
	var resource MobileAppCrashRate
	err := ctx.ReadResource("dynatrace:index/mobileAppCrashRate:MobileAppCrashRate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MobileAppCrashRate resources.
type mobileAppCrashRateState struct {
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ApplicationId *string `pulumi:"applicationId"`
	// Crash rate increase
	CrashRateIncrease *MobileAppCrashRateCrashRateIncrease `pulumi:"crashRateIncrease"`
}

type MobileAppCrashRateState struct {
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ApplicationId pulumi.StringPtrInput
	// Crash rate increase
	CrashRateIncrease MobileAppCrashRateCrashRateIncreasePtrInput
}

func (MobileAppCrashRateState) ElementType() reflect.Type {
	return reflect.TypeOf((*mobileAppCrashRateState)(nil)).Elem()
}

type mobileAppCrashRateArgs struct {
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ApplicationId *string `pulumi:"applicationId"`
	// Crash rate increase
	CrashRateIncrease MobileAppCrashRateCrashRateIncrease `pulumi:"crashRateIncrease"`
}

// The set of arguments for constructing a MobileAppCrashRate resource.
type MobileAppCrashRateArgs struct {
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ApplicationId pulumi.StringPtrInput
	// Crash rate increase
	CrashRateIncrease MobileAppCrashRateCrashRateIncreaseInput
}

func (MobileAppCrashRateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mobileAppCrashRateArgs)(nil)).Elem()
}

type MobileAppCrashRateInput interface {
	pulumi.Input

	ToMobileAppCrashRateOutput() MobileAppCrashRateOutput
	ToMobileAppCrashRateOutputWithContext(ctx context.Context) MobileAppCrashRateOutput
}

func (*MobileAppCrashRate) ElementType() reflect.Type {
	return reflect.TypeOf((**MobileAppCrashRate)(nil)).Elem()
}

func (i *MobileAppCrashRate) ToMobileAppCrashRateOutput() MobileAppCrashRateOutput {
	return i.ToMobileAppCrashRateOutputWithContext(context.Background())
}

func (i *MobileAppCrashRate) ToMobileAppCrashRateOutputWithContext(ctx context.Context) MobileAppCrashRateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MobileAppCrashRateOutput)
}

// MobileAppCrashRateArrayInput is an input type that accepts MobileAppCrashRateArray and MobileAppCrashRateArrayOutput values.
// You can construct a concrete instance of `MobileAppCrashRateArrayInput` via:
//
//	MobileAppCrashRateArray{ MobileAppCrashRateArgs{...} }
type MobileAppCrashRateArrayInput interface {
	pulumi.Input

	ToMobileAppCrashRateArrayOutput() MobileAppCrashRateArrayOutput
	ToMobileAppCrashRateArrayOutputWithContext(context.Context) MobileAppCrashRateArrayOutput
}

type MobileAppCrashRateArray []MobileAppCrashRateInput

func (MobileAppCrashRateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MobileAppCrashRate)(nil)).Elem()
}

func (i MobileAppCrashRateArray) ToMobileAppCrashRateArrayOutput() MobileAppCrashRateArrayOutput {
	return i.ToMobileAppCrashRateArrayOutputWithContext(context.Background())
}

func (i MobileAppCrashRateArray) ToMobileAppCrashRateArrayOutputWithContext(ctx context.Context) MobileAppCrashRateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MobileAppCrashRateArrayOutput)
}

// MobileAppCrashRateMapInput is an input type that accepts MobileAppCrashRateMap and MobileAppCrashRateMapOutput values.
// You can construct a concrete instance of `MobileAppCrashRateMapInput` via:
//
//	MobileAppCrashRateMap{ "key": MobileAppCrashRateArgs{...} }
type MobileAppCrashRateMapInput interface {
	pulumi.Input

	ToMobileAppCrashRateMapOutput() MobileAppCrashRateMapOutput
	ToMobileAppCrashRateMapOutputWithContext(context.Context) MobileAppCrashRateMapOutput
}

type MobileAppCrashRateMap map[string]MobileAppCrashRateInput

func (MobileAppCrashRateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MobileAppCrashRate)(nil)).Elem()
}

func (i MobileAppCrashRateMap) ToMobileAppCrashRateMapOutput() MobileAppCrashRateMapOutput {
	return i.ToMobileAppCrashRateMapOutputWithContext(context.Background())
}

func (i MobileAppCrashRateMap) ToMobileAppCrashRateMapOutputWithContext(ctx context.Context) MobileAppCrashRateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MobileAppCrashRateMapOutput)
}

type MobileAppCrashRateOutput struct{ *pulumi.OutputState }

func (MobileAppCrashRateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MobileAppCrashRate)(nil)).Elem()
}

func (o MobileAppCrashRateOutput) ToMobileAppCrashRateOutput() MobileAppCrashRateOutput {
	return o
}

func (o MobileAppCrashRateOutput) ToMobileAppCrashRateOutputWithContext(ctx context.Context) MobileAppCrashRateOutput {
	return o
}

// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
func (o MobileAppCrashRateOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MobileAppCrashRate) pulumi.StringPtrOutput { return v.ApplicationId }).(pulumi.StringPtrOutput)
}

// Crash rate increase
func (o MobileAppCrashRateOutput) CrashRateIncrease() MobileAppCrashRateCrashRateIncreaseOutput {
	return o.ApplyT(func(v *MobileAppCrashRate) MobileAppCrashRateCrashRateIncreaseOutput { return v.CrashRateIncrease }).(MobileAppCrashRateCrashRateIncreaseOutput)
}

type MobileAppCrashRateArrayOutput struct{ *pulumi.OutputState }

func (MobileAppCrashRateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MobileAppCrashRate)(nil)).Elem()
}

func (o MobileAppCrashRateArrayOutput) ToMobileAppCrashRateArrayOutput() MobileAppCrashRateArrayOutput {
	return o
}

func (o MobileAppCrashRateArrayOutput) ToMobileAppCrashRateArrayOutputWithContext(ctx context.Context) MobileAppCrashRateArrayOutput {
	return o
}

func (o MobileAppCrashRateArrayOutput) Index(i pulumi.IntInput) MobileAppCrashRateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MobileAppCrashRate {
		return vs[0].([]*MobileAppCrashRate)[vs[1].(int)]
	}).(MobileAppCrashRateOutput)
}

type MobileAppCrashRateMapOutput struct{ *pulumi.OutputState }

func (MobileAppCrashRateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MobileAppCrashRate)(nil)).Elem()
}

func (o MobileAppCrashRateMapOutput) ToMobileAppCrashRateMapOutput() MobileAppCrashRateMapOutput {
	return o
}

func (o MobileAppCrashRateMapOutput) ToMobileAppCrashRateMapOutputWithContext(ctx context.Context) MobileAppCrashRateMapOutput {
	return o
}

func (o MobileAppCrashRateMapOutput) MapIndex(k pulumi.StringInput) MobileAppCrashRateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MobileAppCrashRate {
		return vs[0].(map[string]*MobileAppCrashRate)[vs[1].(string)]
	}).(MobileAppCrashRateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MobileAppCrashRateInput)(nil)).Elem(), &MobileAppCrashRate{})
	pulumi.RegisterInputType(reflect.TypeOf((*MobileAppCrashRateArrayInput)(nil)).Elem(), MobileAppCrashRateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MobileAppCrashRateMapInput)(nil)).Elem(), MobileAppCrashRateMap{})
	pulumi.RegisterOutputType(MobileAppCrashRateOutput{})
	pulumi.RegisterOutputType(MobileAppCrashRateArrayOutput{})
	pulumi.RegisterOutputType(MobileAppCrashRateMapOutput{})
}
