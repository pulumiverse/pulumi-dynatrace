// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type KeyUserAction struct {
	pulumi.CustomResourceState

	// The ID of the WebApplication
	ApplicationId pulumi.StringOutput `pulumi:"applicationId"`
	// The domain where the action is performed
	Domain pulumi.StringPtrOutput `pulumi:"domain"`
	// The name of the action
	Name pulumi.StringOutput `pulumi:"name"`
	// The type of the action. Possible values are `Custom`, `Load` and `Xhr`
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewKeyUserAction registers a new resource with the given unique name, arguments, and options.
func NewKeyUserAction(ctx *pulumi.Context,
	name string, args *KeyUserActionArgs, opts ...pulumi.ResourceOption) (*KeyUserAction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KeyUserAction
	err := ctx.RegisterResource("dynatrace:index/keyUserAction:KeyUserAction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeyUserAction gets an existing KeyUserAction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeyUserAction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeyUserActionState, opts ...pulumi.ResourceOption) (*KeyUserAction, error) {
	var resource KeyUserAction
	err := ctx.ReadResource("dynatrace:index/keyUserAction:KeyUserAction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KeyUserAction resources.
type keyUserActionState struct {
	// The ID of the WebApplication
	ApplicationId *string `pulumi:"applicationId"`
	// The domain where the action is performed
	Domain *string `pulumi:"domain"`
	// The name of the action
	Name *string `pulumi:"name"`
	// The type of the action. Possible values are `Custom`, `Load` and `Xhr`
	Type *string `pulumi:"type"`
}

type KeyUserActionState struct {
	// The ID of the WebApplication
	ApplicationId pulumi.StringPtrInput
	// The domain where the action is performed
	Domain pulumi.StringPtrInput
	// The name of the action
	Name pulumi.StringPtrInput
	// The type of the action. Possible values are `Custom`, `Load` and `Xhr`
	Type pulumi.StringPtrInput
}

func (KeyUserActionState) ElementType() reflect.Type {
	return reflect.TypeOf((*keyUserActionState)(nil)).Elem()
}

type keyUserActionArgs struct {
	// The ID of the WebApplication
	ApplicationId string `pulumi:"applicationId"`
	// The domain where the action is performed
	Domain *string `pulumi:"domain"`
	// The name of the action
	Name *string `pulumi:"name"`
	// The type of the action. Possible values are `Custom`, `Load` and `Xhr`
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a KeyUserAction resource.
type KeyUserActionArgs struct {
	// The ID of the WebApplication
	ApplicationId pulumi.StringInput
	// The domain where the action is performed
	Domain pulumi.StringPtrInput
	// The name of the action
	Name pulumi.StringPtrInput
	// The type of the action. Possible values are `Custom`, `Load` and `Xhr`
	Type pulumi.StringInput
}

func (KeyUserActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keyUserActionArgs)(nil)).Elem()
}

type KeyUserActionInput interface {
	pulumi.Input

	ToKeyUserActionOutput() KeyUserActionOutput
	ToKeyUserActionOutputWithContext(ctx context.Context) KeyUserActionOutput
}

func (*KeyUserAction) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyUserAction)(nil)).Elem()
}

func (i *KeyUserAction) ToKeyUserActionOutput() KeyUserActionOutput {
	return i.ToKeyUserActionOutputWithContext(context.Background())
}

func (i *KeyUserAction) ToKeyUserActionOutputWithContext(ctx context.Context) KeyUserActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyUserActionOutput)
}

// KeyUserActionArrayInput is an input type that accepts KeyUserActionArray and KeyUserActionArrayOutput values.
// You can construct a concrete instance of `KeyUserActionArrayInput` via:
//
//	KeyUserActionArray{ KeyUserActionArgs{...} }
type KeyUserActionArrayInput interface {
	pulumi.Input

	ToKeyUserActionArrayOutput() KeyUserActionArrayOutput
	ToKeyUserActionArrayOutputWithContext(context.Context) KeyUserActionArrayOutput
}

type KeyUserActionArray []KeyUserActionInput

func (KeyUserActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KeyUserAction)(nil)).Elem()
}

func (i KeyUserActionArray) ToKeyUserActionArrayOutput() KeyUserActionArrayOutput {
	return i.ToKeyUserActionArrayOutputWithContext(context.Background())
}

func (i KeyUserActionArray) ToKeyUserActionArrayOutputWithContext(ctx context.Context) KeyUserActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyUserActionArrayOutput)
}

// KeyUserActionMapInput is an input type that accepts KeyUserActionMap and KeyUserActionMapOutput values.
// You can construct a concrete instance of `KeyUserActionMapInput` via:
//
//	KeyUserActionMap{ "key": KeyUserActionArgs{...} }
type KeyUserActionMapInput interface {
	pulumi.Input

	ToKeyUserActionMapOutput() KeyUserActionMapOutput
	ToKeyUserActionMapOutputWithContext(context.Context) KeyUserActionMapOutput
}

type KeyUserActionMap map[string]KeyUserActionInput

func (KeyUserActionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KeyUserAction)(nil)).Elem()
}

func (i KeyUserActionMap) ToKeyUserActionMapOutput() KeyUserActionMapOutput {
	return i.ToKeyUserActionMapOutputWithContext(context.Background())
}

func (i KeyUserActionMap) ToKeyUserActionMapOutputWithContext(ctx context.Context) KeyUserActionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyUserActionMapOutput)
}

type KeyUserActionOutput struct{ *pulumi.OutputState }

func (KeyUserActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyUserAction)(nil)).Elem()
}

func (o KeyUserActionOutput) ToKeyUserActionOutput() KeyUserActionOutput {
	return o
}

func (o KeyUserActionOutput) ToKeyUserActionOutputWithContext(ctx context.Context) KeyUserActionOutput {
	return o
}

// The ID of the WebApplication
func (o KeyUserActionOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyUserAction) pulumi.StringOutput { return v.ApplicationId }).(pulumi.StringOutput)
}

// The domain where the action is performed
func (o KeyUserActionOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyUserAction) pulumi.StringPtrOutput { return v.Domain }).(pulumi.StringPtrOutput)
}

// The name of the action
func (o KeyUserActionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyUserAction) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The type of the action. Possible values are `Custom`, `Load` and `Xhr`
func (o KeyUserActionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyUserAction) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type KeyUserActionArrayOutput struct{ *pulumi.OutputState }

func (KeyUserActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KeyUserAction)(nil)).Elem()
}

func (o KeyUserActionArrayOutput) ToKeyUserActionArrayOutput() KeyUserActionArrayOutput {
	return o
}

func (o KeyUserActionArrayOutput) ToKeyUserActionArrayOutputWithContext(ctx context.Context) KeyUserActionArrayOutput {
	return o
}

func (o KeyUserActionArrayOutput) Index(i pulumi.IntInput) KeyUserActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KeyUserAction {
		return vs[0].([]*KeyUserAction)[vs[1].(int)]
	}).(KeyUserActionOutput)
}

type KeyUserActionMapOutput struct{ *pulumi.OutputState }

func (KeyUserActionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KeyUserAction)(nil)).Elem()
}

func (o KeyUserActionMapOutput) ToKeyUserActionMapOutput() KeyUserActionMapOutput {
	return o
}

func (o KeyUserActionMapOutput) ToKeyUserActionMapOutputWithContext(ctx context.Context) KeyUserActionMapOutput {
	return o
}

func (o KeyUserActionMapOutput) MapIndex(k pulumi.StringInput) KeyUserActionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KeyUserAction {
		return vs[0].(map[string]*KeyUserAction)[vs[1].(string)]
	}).(KeyUserActionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeyUserActionInput)(nil)).Elem(), &KeyUserAction{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyUserActionArrayInput)(nil)).Elem(), KeyUserActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyUserActionMapInput)(nil)).Elem(), KeyUserActionMap{})
	pulumi.RegisterOutputType(KeyUserActionOutput{})
	pulumi.RegisterOutputType(KeyUserActionArrayOutput{})
	pulumi.RegisterOutputType(KeyUserActionMapOutput{})
}
