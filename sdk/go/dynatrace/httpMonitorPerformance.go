// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type HttpMonitorPerformance struct {
	pulumi.CustomResourceState

	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The scope of this setting (HTTP_CHECK)
	Scope pulumi.StringOutput `pulumi:"scope"`
	// Performance thresholds
	Thresholds HttpMonitorPerformanceThresholdsPtrOutput `pulumi:"thresholds"`
}

// NewHttpMonitorPerformance registers a new resource with the given unique name, arguments, and options.
func NewHttpMonitorPerformance(ctx *pulumi.Context,
	name string, args *HttpMonitorPerformanceArgs, opts ...pulumi.ResourceOption) (*HttpMonitorPerformance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Scope == nil {
		return nil, errors.New("invalid value for required argument 'Scope'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HttpMonitorPerformance
	err := ctx.RegisterResource("dynatrace:index/httpMonitorPerformance:HttpMonitorPerformance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHttpMonitorPerformance gets an existing HttpMonitorPerformance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHttpMonitorPerformance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HttpMonitorPerformanceState, opts ...pulumi.ResourceOption) (*HttpMonitorPerformance, error) {
	var resource HttpMonitorPerformance
	err := ctx.ReadResource("dynatrace:index/httpMonitorPerformance:HttpMonitorPerformance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HttpMonitorPerformance resources.
type httpMonitorPerformanceState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// The scope of this setting (HTTP_CHECK)
	Scope *string `pulumi:"scope"`
	// Performance thresholds
	Thresholds *HttpMonitorPerformanceThresholds `pulumi:"thresholds"`
}

type HttpMonitorPerformanceState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// The scope of this setting (HTTP_CHECK)
	Scope pulumi.StringPtrInput
	// Performance thresholds
	Thresholds HttpMonitorPerformanceThresholdsPtrInput
}

func (HttpMonitorPerformanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*httpMonitorPerformanceState)(nil)).Elem()
}

type httpMonitorPerformanceArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// The scope of this setting (HTTP_CHECK)
	Scope string `pulumi:"scope"`
	// Performance thresholds
	Thresholds *HttpMonitorPerformanceThresholds `pulumi:"thresholds"`
}

// The set of arguments for constructing a HttpMonitorPerformance resource.
type HttpMonitorPerformanceArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// The scope of this setting (HTTP_CHECK)
	Scope pulumi.StringInput
	// Performance thresholds
	Thresholds HttpMonitorPerformanceThresholdsPtrInput
}

func (HttpMonitorPerformanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*httpMonitorPerformanceArgs)(nil)).Elem()
}

type HttpMonitorPerformanceInput interface {
	pulumi.Input

	ToHttpMonitorPerformanceOutput() HttpMonitorPerformanceOutput
	ToHttpMonitorPerformanceOutputWithContext(ctx context.Context) HttpMonitorPerformanceOutput
}

func (*HttpMonitorPerformance) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpMonitorPerformance)(nil)).Elem()
}

func (i *HttpMonitorPerformance) ToHttpMonitorPerformanceOutput() HttpMonitorPerformanceOutput {
	return i.ToHttpMonitorPerformanceOutputWithContext(context.Background())
}

func (i *HttpMonitorPerformance) ToHttpMonitorPerformanceOutputWithContext(ctx context.Context) HttpMonitorPerformanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpMonitorPerformanceOutput)
}

// HttpMonitorPerformanceArrayInput is an input type that accepts HttpMonitorPerformanceArray and HttpMonitorPerformanceArrayOutput values.
// You can construct a concrete instance of `HttpMonitorPerformanceArrayInput` via:
//
//	HttpMonitorPerformanceArray{ HttpMonitorPerformanceArgs{...} }
type HttpMonitorPerformanceArrayInput interface {
	pulumi.Input

	ToHttpMonitorPerformanceArrayOutput() HttpMonitorPerformanceArrayOutput
	ToHttpMonitorPerformanceArrayOutputWithContext(context.Context) HttpMonitorPerformanceArrayOutput
}

type HttpMonitorPerformanceArray []HttpMonitorPerformanceInput

func (HttpMonitorPerformanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HttpMonitorPerformance)(nil)).Elem()
}

func (i HttpMonitorPerformanceArray) ToHttpMonitorPerformanceArrayOutput() HttpMonitorPerformanceArrayOutput {
	return i.ToHttpMonitorPerformanceArrayOutputWithContext(context.Background())
}

func (i HttpMonitorPerformanceArray) ToHttpMonitorPerformanceArrayOutputWithContext(ctx context.Context) HttpMonitorPerformanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpMonitorPerformanceArrayOutput)
}

// HttpMonitorPerformanceMapInput is an input type that accepts HttpMonitorPerformanceMap and HttpMonitorPerformanceMapOutput values.
// You can construct a concrete instance of `HttpMonitorPerformanceMapInput` via:
//
//	HttpMonitorPerformanceMap{ "key": HttpMonitorPerformanceArgs{...} }
type HttpMonitorPerformanceMapInput interface {
	pulumi.Input

	ToHttpMonitorPerformanceMapOutput() HttpMonitorPerformanceMapOutput
	ToHttpMonitorPerformanceMapOutputWithContext(context.Context) HttpMonitorPerformanceMapOutput
}

type HttpMonitorPerformanceMap map[string]HttpMonitorPerformanceInput

func (HttpMonitorPerformanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HttpMonitorPerformance)(nil)).Elem()
}

func (i HttpMonitorPerformanceMap) ToHttpMonitorPerformanceMapOutput() HttpMonitorPerformanceMapOutput {
	return i.ToHttpMonitorPerformanceMapOutputWithContext(context.Background())
}

func (i HttpMonitorPerformanceMap) ToHttpMonitorPerformanceMapOutputWithContext(ctx context.Context) HttpMonitorPerformanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpMonitorPerformanceMapOutput)
}

type HttpMonitorPerformanceOutput struct{ *pulumi.OutputState }

func (HttpMonitorPerformanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpMonitorPerformance)(nil)).Elem()
}

func (o HttpMonitorPerformanceOutput) ToHttpMonitorPerformanceOutput() HttpMonitorPerformanceOutput {
	return o
}

func (o HttpMonitorPerformanceOutput) ToHttpMonitorPerformanceOutputWithContext(ctx context.Context) HttpMonitorPerformanceOutput {
	return o
}

// This setting is enabled (`true`) or disabled (`false`)
func (o HttpMonitorPerformanceOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *HttpMonitorPerformance) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The scope of this setting (HTTP_CHECK)
func (o HttpMonitorPerformanceOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v *HttpMonitorPerformance) pulumi.StringOutput { return v.Scope }).(pulumi.StringOutput)
}

// Performance thresholds
func (o HttpMonitorPerformanceOutput) Thresholds() HttpMonitorPerformanceThresholdsPtrOutput {
	return o.ApplyT(func(v *HttpMonitorPerformance) HttpMonitorPerformanceThresholdsPtrOutput { return v.Thresholds }).(HttpMonitorPerformanceThresholdsPtrOutput)
}

type HttpMonitorPerformanceArrayOutput struct{ *pulumi.OutputState }

func (HttpMonitorPerformanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HttpMonitorPerformance)(nil)).Elem()
}

func (o HttpMonitorPerformanceArrayOutput) ToHttpMonitorPerformanceArrayOutput() HttpMonitorPerformanceArrayOutput {
	return o
}

func (o HttpMonitorPerformanceArrayOutput) ToHttpMonitorPerformanceArrayOutputWithContext(ctx context.Context) HttpMonitorPerformanceArrayOutput {
	return o
}

func (o HttpMonitorPerformanceArrayOutput) Index(i pulumi.IntInput) HttpMonitorPerformanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HttpMonitorPerformance {
		return vs[0].([]*HttpMonitorPerformance)[vs[1].(int)]
	}).(HttpMonitorPerformanceOutput)
}

type HttpMonitorPerformanceMapOutput struct{ *pulumi.OutputState }

func (HttpMonitorPerformanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HttpMonitorPerformance)(nil)).Elem()
}

func (o HttpMonitorPerformanceMapOutput) ToHttpMonitorPerformanceMapOutput() HttpMonitorPerformanceMapOutput {
	return o
}

func (o HttpMonitorPerformanceMapOutput) ToHttpMonitorPerformanceMapOutputWithContext(ctx context.Context) HttpMonitorPerformanceMapOutput {
	return o
}

func (o HttpMonitorPerformanceMapOutput) MapIndex(k pulumi.StringInput) HttpMonitorPerformanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HttpMonitorPerformance {
		return vs[0].(map[string]*HttpMonitorPerformance)[vs[1].(string)]
	}).(HttpMonitorPerformanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HttpMonitorPerformanceInput)(nil)).Elem(), &HttpMonitorPerformance{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpMonitorPerformanceArrayInput)(nil)).Elem(), HttpMonitorPerformanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpMonitorPerformanceMapInput)(nil)).Elem(), HttpMonitorPerformanceMap{})
	pulumi.RegisterOutputType(HttpMonitorPerformanceOutput{})
	pulumi.RegisterOutputType(HttpMonitorPerformanceArrayOutput{})
	pulumi.RegisterOutputType(HttpMonitorPerformanceMapOutput{})
}
