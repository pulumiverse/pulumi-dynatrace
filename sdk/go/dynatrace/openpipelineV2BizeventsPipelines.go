// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OpenpipelineV2BizeventsPipelines struct {
	pulumi.CustomResourceState

	// Cost allocation stage
	CostAllocation OpenpipelineV2BizeventsPipelinesCostAllocationOutput `pulumi:"costAllocation"`
	// Custom pipeline id
	CustomId pulumi.StringOutput `pulumi:"customId"`
	// Data extraction stage
	DataExtraction OpenpipelineV2BizeventsPipelinesDataExtractionOutput `pulumi:"dataExtraction"`
	// Davis event extraction stage
	Davis OpenpipelineV2BizeventsPipelinesDavisOutput `pulumi:"davis"`
	// Display name
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Metrics extraction stage
	MetricExtraction OpenpipelineV2BizeventsPipelinesMetricExtractionOutput `pulumi:"metricExtraction"`
	// Processing stage
	Processing OpenpipelineV2BizeventsPipelinesProcessingOutput `pulumi:"processing"`
	// Product allocation stage
	ProductAllocation OpenpipelineV2BizeventsPipelinesProductAllocationOutput `pulumi:"productAllocation"`
	// Security context stage
	SecurityContext OpenpipelineV2BizeventsPipelinesSecurityContextOutput `pulumi:"securityContext"`
	// Storage stage
	Storage OpenpipelineV2BizeventsPipelinesStorageOutput `pulumi:"storage"`
}

// NewOpenpipelineV2BizeventsPipelines registers a new resource with the given unique name, arguments, and options.
func NewOpenpipelineV2BizeventsPipelines(ctx *pulumi.Context,
	name string, args *OpenpipelineV2BizeventsPipelinesArgs, opts ...pulumi.ResourceOption) (*OpenpipelineV2BizeventsPipelines, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CostAllocation == nil {
		return nil, errors.New("invalid value for required argument 'CostAllocation'")
	}
	if args.CustomId == nil {
		return nil, errors.New("invalid value for required argument 'CustomId'")
	}
	if args.DataExtraction == nil {
		return nil, errors.New("invalid value for required argument 'DataExtraction'")
	}
	if args.Davis == nil {
		return nil, errors.New("invalid value for required argument 'Davis'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.MetricExtraction == nil {
		return nil, errors.New("invalid value for required argument 'MetricExtraction'")
	}
	if args.Processing == nil {
		return nil, errors.New("invalid value for required argument 'Processing'")
	}
	if args.ProductAllocation == nil {
		return nil, errors.New("invalid value for required argument 'ProductAllocation'")
	}
	if args.SecurityContext == nil {
		return nil, errors.New("invalid value for required argument 'SecurityContext'")
	}
	if args.Storage == nil {
		return nil, errors.New("invalid value for required argument 'Storage'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenpipelineV2BizeventsPipelines
	err := ctx.RegisterResource("dynatrace:index/openpipelineV2BizeventsPipelines:OpenpipelineV2BizeventsPipelines", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenpipelineV2BizeventsPipelines gets an existing OpenpipelineV2BizeventsPipelines resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenpipelineV2BizeventsPipelines(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenpipelineV2BizeventsPipelinesState, opts ...pulumi.ResourceOption) (*OpenpipelineV2BizeventsPipelines, error) {
	var resource OpenpipelineV2BizeventsPipelines
	err := ctx.ReadResource("dynatrace:index/openpipelineV2BizeventsPipelines:OpenpipelineV2BizeventsPipelines", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenpipelineV2BizeventsPipelines resources.
type openpipelineV2BizeventsPipelinesState struct {
	// Cost allocation stage
	CostAllocation *OpenpipelineV2BizeventsPipelinesCostAllocation `pulumi:"costAllocation"`
	// Custom pipeline id
	CustomId *string `pulumi:"customId"`
	// Data extraction stage
	DataExtraction *OpenpipelineV2BizeventsPipelinesDataExtraction `pulumi:"dataExtraction"`
	// Davis event extraction stage
	Davis *OpenpipelineV2BizeventsPipelinesDavis `pulumi:"davis"`
	// Display name
	DisplayName *string `pulumi:"displayName"`
	// Metrics extraction stage
	MetricExtraction *OpenpipelineV2BizeventsPipelinesMetricExtraction `pulumi:"metricExtraction"`
	// Processing stage
	Processing *OpenpipelineV2BizeventsPipelinesProcessing `pulumi:"processing"`
	// Product allocation stage
	ProductAllocation *OpenpipelineV2BizeventsPipelinesProductAllocation `pulumi:"productAllocation"`
	// Security context stage
	SecurityContext *OpenpipelineV2BizeventsPipelinesSecurityContext `pulumi:"securityContext"`
	// Storage stage
	Storage *OpenpipelineV2BizeventsPipelinesStorage `pulumi:"storage"`
}

type OpenpipelineV2BizeventsPipelinesState struct {
	// Cost allocation stage
	CostAllocation OpenpipelineV2BizeventsPipelinesCostAllocationPtrInput
	// Custom pipeline id
	CustomId pulumi.StringPtrInput
	// Data extraction stage
	DataExtraction OpenpipelineV2BizeventsPipelinesDataExtractionPtrInput
	// Davis event extraction stage
	Davis OpenpipelineV2BizeventsPipelinesDavisPtrInput
	// Display name
	DisplayName pulumi.StringPtrInput
	// Metrics extraction stage
	MetricExtraction OpenpipelineV2BizeventsPipelinesMetricExtractionPtrInput
	// Processing stage
	Processing OpenpipelineV2BizeventsPipelinesProcessingPtrInput
	// Product allocation stage
	ProductAllocation OpenpipelineV2BizeventsPipelinesProductAllocationPtrInput
	// Security context stage
	SecurityContext OpenpipelineV2BizeventsPipelinesSecurityContextPtrInput
	// Storage stage
	Storage OpenpipelineV2BizeventsPipelinesStoragePtrInput
}

func (OpenpipelineV2BizeventsPipelinesState) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2BizeventsPipelinesState)(nil)).Elem()
}

type openpipelineV2BizeventsPipelinesArgs struct {
	// Cost allocation stage
	CostAllocation OpenpipelineV2BizeventsPipelinesCostAllocation `pulumi:"costAllocation"`
	// Custom pipeline id
	CustomId string `pulumi:"customId"`
	// Data extraction stage
	DataExtraction OpenpipelineV2BizeventsPipelinesDataExtraction `pulumi:"dataExtraction"`
	// Davis event extraction stage
	Davis OpenpipelineV2BizeventsPipelinesDavis `pulumi:"davis"`
	// Display name
	DisplayName string `pulumi:"displayName"`
	// Metrics extraction stage
	MetricExtraction OpenpipelineV2BizeventsPipelinesMetricExtraction `pulumi:"metricExtraction"`
	// Processing stage
	Processing OpenpipelineV2BizeventsPipelinesProcessing `pulumi:"processing"`
	// Product allocation stage
	ProductAllocation OpenpipelineV2BizeventsPipelinesProductAllocation `pulumi:"productAllocation"`
	// Security context stage
	SecurityContext OpenpipelineV2BizeventsPipelinesSecurityContext `pulumi:"securityContext"`
	// Storage stage
	Storage OpenpipelineV2BizeventsPipelinesStorage `pulumi:"storage"`
}

// The set of arguments for constructing a OpenpipelineV2BizeventsPipelines resource.
type OpenpipelineV2BizeventsPipelinesArgs struct {
	// Cost allocation stage
	CostAllocation OpenpipelineV2BizeventsPipelinesCostAllocationInput
	// Custom pipeline id
	CustomId pulumi.StringInput
	// Data extraction stage
	DataExtraction OpenpipelineV2BizeventsPipelinesDataExtractionInput
	// Davis event extraction stage
	Davis OpenpipelineV2BizeventsPipelinesDavisInput
	// Display name
	DisplayName pulumi.StringInput
	// Metrics extraction stage
	MetricExtraction OpenpipelineV2BizeventsPipelinesMetricExtractionInput
	// Processing stage
	Processing OpenpipelineV2BizeventsPipelinesProcessingInput
	// Product allocation stage
	ProductAllocation OpenpipelineV2BizeventsPipelinesProductAllocationInput
	// Security context stage
	SecurityContext OpenpipelineV2BizeventsPipelinesSecurityContextInput
	// Storage stage
	Storage OpenpipelineV2BizeventsPipelinesStorageInput
}

func (OpenpipelineV2BizeventsPipelinesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2BizeventsPipelinesArgs)(nil)).Elem()
}

type OpenpipelineV2BizeventsPipelinesInput interface {
	pulumi.Input

	ToOpenpipelineV2BizeventsPipelinesOutput() OpenpipelineV2BizeventsPipelinesOutput
	ToOpenpipelineV2BizeventsPipelinesOutputWithContext(ctx context.Context) OpenpipelineV2BizeventsPipelinesOutput
}

func (*OpenpipelineV2BizeventsPipelines) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2BizeventsPipelines)(nil)).Elem()
}

func (i *OpenpipelineV2BizeventsPipelines) ToOpenpipelineV2BizeventsPipelinesOutput() OpenpipelineV2BizeventsPipelinesOutput {
	return i.ToOpenpipelineV2BizeventsPipelinesOutputWithContext(context.Background())
}

func (i *OpenpipelineV2BizeventsPipelines) ToOpenpipelineV2BizeventsPipelinesOutputWithContext(ctx context.Context) OpenpipelineV2BizeventsPipelinesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2BizeventsPipelinesOutput)
}

// OpenpipelineV2BizeventsPipelinesArrayInput is an input type that accepts OpenpipelineV2BizeventsPipelinesArray and OpenpipelineV2BizeventsPipelinesArrayOutput values.
// You can construct a concrete instance of `OpenpipelineV2BizeventsPipelinesArrayInput` via:
//
//	OpenpipelineV2BizeventsPipelinesArray{ OpenpipelineV2BizeventsPipelinesArgs{...} }
type OpenpipelineV2BizeventsPipelinesArrayInput interface {
	pulumi.Input

	ToOpenpipelineV2BizeventsPipelinesArrayOutput() OpenpipelineV2BizeventsPipelinesArrayOutput
	ToOpenpipelineV2BizeventsPipelinesArrayOutputWithContext(context.Context) OpenpipelineV2BizeventsPipelinesArrayOutput
}

type OpenpipelineV2BizeventsPipelinesArray []OpenpipelineV2BizeventsPipelinesInput

func (OpenpipelineV2BizeventsPipelinesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2BizeventsPipelines)(nil)).Elem()
}

func (i OpenpipelineV2BizeventsPipelinesArray) ToOpenpipelineV2BizeventsPipelinesArrayOutput() OpenpipelineV2BizeventsPipelinesArrayOutput {
	return i.ToOpenpipelineV2BizeventsPipelinesArrayOutputWithContext(context.Background())
}

func (i OpenpipelineV2BizeventsPipelinesArray) ToOpenpipelineV2BizeventsPipelinesArrayOutputWithContext(ctx context.Context) OpenpipelineV2BizeventsPipelinesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2BizeventsPipelinesArrayOutput)
}

// OpenpipelineV2BizeventsPipelinesMapInput is an input type that accepts OpenpipelineV2BizeventsPipelinesMap and OpenpipelineV2BizeventsPipelinesMapOutput values.
// You can construct a concrete instance of `OpenpipelineV2BizeventsPipelinesMapInput` via:
//
//	OpenpipelineV2BizeventsPipelinesMap{ "key": OpenpipelineV2BizeventsPipelinesArgs{...} }
type OpenpipelineV2BizeventsPipelinesMapInput interface {
	pulumi.Input

	ToOpenpipelineV2BizeventsPipelinesMapOutput() OpenpipelineV2BizeventsPipelinesMapOutput
	ToOpenpipelineV2BizeventsPipelinesMapOutputWithContext(context.Context) OpenpipelineV2BizeventsPipelinesMapOutput
}

type OpenpipelineV2BizeventsPipelinesMap map[string]OpenpipelineV2BizeventsPipelinesInput

func (OpenpipelineV2BizeventsPipelinesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2BizeventsPipelines)(nil)).Elem()
}

func (i OpenpipelineV2BizeventsPipelinesMap) ToOpenpipelineV2BizeventsPipelinesMapOutput() OpenpipelineV2BizeventsPipelinesMapOutput {
	return i.ToOpenpipelineV2BizeventsPipelinesMapOutputWithContext(context.Background())
}

func (i OpenpipelineV2BizeventsPipelinesMap) ToOpenpipelineV2BizeventsPipelinesMapOutputWithContext(ctx context.Context) OpenpipelineV2BizeventsPipelinesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2BizeventsPipelinesMapOutput)
}

type OpenpipelineV2BizeventsPipelinesOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2BizeventsPipelinesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2BizeventsPipelines)(nil)).Elem()
}

func (o OpenpipelineV2BizeventsPipelinesOutput) ToOpenpipelineV2BizeventsPipelinesOutput() OpenpipelineV2BizeventsPipelinesOutput {
	return o
}

func (o OpenpipelineV2BizeventsPipelinesOutput) ToOpenpipelineV2BizeventsPipelinesOutputWithContext(ctx context.Context) OpenpipelineV2BizeventsPipelinesOutput {
	return o
}

// Cost allocation stage
func (o OpenpipelineV2BizeventsPipelinesOutput) CostAllocation() OpenpipelineV2BizeventsPipelinesCostAllocationOutput {
	return o.ApplyT(func(v *OpenpipelineV2BizeventsPipelines) OpenpipelineV2BizeventsPipelinesCostAllocationOutput {
		return v.CostAllocation
	}).(OpenpipelineV2BizeventsPipelinesCostAllocationOutput)
}

// Custom pipeline id
func (o OpenpipelineV2BizeventsPipelinesOutput) CustomId() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenpipelineV2BizeventsPipelines) pulumi.StringOutput { return v.CustomId }).(pulumi.StringOutput)
}

// Data extraction stage
func (o OpenpipelineV2BizeventsPipelinesOutput) DataExtraction() OpenpipelineV2BizeventsPipelinesDataExtractionOutput {
	return o.ApplyT(func(v *OpenpipelineV2BizeventsPipelines) OpenpipelineV2BizeventsPipelinesDataExtractionOutput {
		return v.DataExtraction
	}).(OpenpipelineV2BizeventsPipelinesDataExtractionOutput)
}

// Davis event extraction stage
func (o OpenpipelineV2BizeventsPipelinesOutput) Davis() OpenpipelineV2BizeventsPipelinesDavisOutput {
	return o.ApplyT(func(v *OpenpipelineV2BizeventsPipelines) OpenpipelineV2BizeventsPipelinesDavisOutput { return v.Davis }).(OpenpipelineV2BizeventsPipelinesDavisOutput)
}

// Display name
func (o OpenpipelineV2BizeventsPipelinesOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenpipelineV2BizeventsPipelines) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Metrics extraction stage
func (o OpenpipelineV2BizeventsPipelinesOutput) MetricExtraction() OpenpipelineV2BizeventsPipelinesMetricExtractionOutput {
	return o.ApplyT(func(v *OpenpipelineV2BizeventsPipelines) OpenpipelineV2BizeventsPipelinesMetricExtractionOutput {
		return v.MetricExtraction
	}).(OpenpipelineV2BizeventsPipelinesMetricExtractionOutput)
}

// Processing stage
func (o OpenpipelineV2BizeventsPipelinesOutput) Processing() OpenpipelineV2BizeventsPipelinesProcessingOutput {
	return o.ApplyT(func(v *OpenpipelineV2BizeventsPipelines) OpenpipelineV2BizeventsPipelinesProcessingOutput {
		return v.Processing
	}).(OpenpipelineV2BizeventsPipelinesProcessingOutput)
}

// Product allocation stage
func (o OpenpipelineV2BizeventsPipelinesOutput) ProductAllocation() OpenpipelineV2BizeventsPipelinesProductAllocationOutput {
	return o.ApplyT(func(v *OpenpipelineV2BizeventsPipelines) OpenpipelineV2BizeventsPipelinesProductAllocationOutput {
		return v.ProductAllocation
	}).(OpenpipelineV2BizeventsPipelinesProductAllocationOutput)
}

// Security context stage
func (o OpenpipelineV2BizeventsPipelinesOutput) SecurityContext() OpenpipelineV2BizeventsPipelinesSecurityContextOutput {
	return o.ApplyT(func(v *OpenpipelineV2BizeventsPipelines) OpenpipelineV2BizeventsPipelinesSecurityContextOutput {
		return v.SecurityContext
	}).(OpenpipelineV2BizeventsPipelinesSecurityContextOutput)
}

// Storage stage
func (o OpenpipelineV2BizeventsPipelinesOutput) Storage() OpenpipelineV2BizeventsPipelinesStorageOutput {
	return o.ApplyT(func(v *OpenpipelineV2BizeventsPipelines) OpenpipelineV2BizeventsPipelinesStorageOutput {
		return v.Storage
	}).(OpenpipelineV2BizeventsPipelinesStorageOutput)
}

type OpenpipelineV2BizeventsPipelinesArrayOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2BizeventsPipelinesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2BizeventsPipelines)(nil)).Elem()
}

func (o OpenpipelineV2BizeventsPipelinesArrayOutput) ToOpenpipelineV2BizeventsPipelinesArrayOutput() OpenpipelineV2BizeventsPipelinesArrayOutput {
	return o
}

func (o OpenpipelineV2BizeventsPipelinesArrayOutput) ToOpenpipelineV2BizeventsPipelinesArrayOutputWithContext(ctx context.Context) OpenpipelineV2BizeventsPipelinesArrayOutput {
	return o
}

func (o OpenpipelineV2BizeventsPipelinesArrayOutput) Index(i pulumi.IntInput) OpenpipelineV2BizeventsPipelinesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenpipelineV2BizeventsPipelines {
		return vs[0].([]*OpenpipelineV2BizeventsPipelines)[vs[1].(int)]
	}).(OpenpipelineV2BizeventsPipelinesOutput)
}

type OpenpipelineV2BizeventsPipelinesMapOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2BizeventsPipelinesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2BizeventsPipelines)(nil)).Elem()
}

func (o OpenpipelineV2BizeventsPipelinesMapOutput) ToOpenpipelineV2BizeventsPipelinesMapOutput() OpenpipelineV2BizeventsPipelinesMapOutput {
	return o
}

func (o OpenpipelineV2BizeventsPipelinesMapOutput) ToOpenpipelineV2BizeventsPipelinesMapOutputWithContext(ctx context.Context) OpenpipelineV2BizeventsPipelinesMapOutput {
	return o
}

func (o OpenpipelineV2BizeventsPipelinesMapOutput) MapIndex(k pulumi.StringInput) OpenpipelineV2BizeventsPipelinesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenpipelineV2BizeventsPipelines {
		return vs[0].(map[string]*OpenpipelineV2BizeventsPipelines)[vs[1].(string)]
	}).(OpenpipelineV2BizeventsPipelinesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2BizeventsPipelinesInput)(nil)).Elem(), &OpenpipelineV2BizeventsPipelines{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2BizeventsPipelinesArrayInput)(nil)).Elem(), OpenpipelineV2BizeventsPipelinesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2BizeventsPipelinesMapInput)(nil)).Elem(), OpenpipelineV2BizeventsPipelinesMap{})
	pulumi.RegisterOutputType(OpenpipelineV2BizeventsPipelinesOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2BizeventsPipelinesArrayOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2BizeventsPipelinesMapOutput{})
}
