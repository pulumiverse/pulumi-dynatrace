// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type LogSecurityContext struct {
	pulumi.CustomResourceState

	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringOutput `pulumi:"insertAfter"`
	// no documentation available
	SecurityContextRule LogSecurityContextSecurityContextRuleOutput `pulumi:"securityContextRule"`
}

// NewLogSecurityContext registers a new resource with the given unique name, arguments, and options.
func NewLogSecurityContext(ctx *pulumi.Context,
	name string, args *LogSecurityContextArgs, opts ...pulumi.ResourceOption) (*LogSecurityContext, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SecurityContextRule == nil {
		return nil, errors.New("invalid value for required argument 'SecurityContextRule'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogSecurityContext
	err := ctx.RegisterResource("dynatrace:index/logSecurityContext:LogSecurityContext", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogSecurityContext gets an existing LogSecurityContext resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogSecurityContext(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogSecurityContextState, opts ...pulumi.ResourceOption) (*LogSecurityContext, error) {
	var resource LogSecurityContext
	err := ctx.ReadResource("dynatrace:index/logSecurityContext:LogSecurityContext", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogSecurityContext resources.
type logSecurityContextState struct {
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `pulumi:"insertAfter"`
	// no documentation available
	SecurityContextRule *LogSecurityContextSecurityContextRule `pulumi:"securityContextRule"`
}

type LogSecurityContextState struct {
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringPtrInput
	// no documentation available
	SecurityContextRule LogSecurityContextSecurityContextRulePtrInput
}

func (LogSecurityContextState) ElementType() reflect.Type {
	return reflect.TypeOf((*logSecurityContextState)(nil)).Elem()
}

type logSecurityContextArgs struct {
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `pulumi:"insertAfter"`
	// no documentation available
	SecurityContextRule LogSecurityContextSecurityContextRule `pulumi:"securityContextRule"`
}

// The set of arguments for constructing a LogSecurityContext resource.
type LogSecurityContextArgs struct {
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringPtrInput
	// no documentation available
	SecurityContextRule LogSecurityContextSecurityContextRuleInput
}

func (LogSecurityContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logSecurityContextArgs)(nil)).Elem()
}

type LogSecurityContextInput interface {
	pulumi.Input

	ToLogSecurityContextOutput() LogSecurityContextOutput
	ToLogSecurityContextOutputWithContext(ctx context.Context) LogSecurityContextOutput
}

func (*LogSecurityContext) ElementType() reflect.Type {
	return reflect.TypeOf((**LogSecurityContext)(nil)).Elem()
}

func (i *LogSecurityContext) ToLogSecurityContextOutput() LogSecurityContextOutput {
	return i.ToLogSecurityContextOutputWithContext(context.Background())
}

func (i *LogSecurityContext) ToLogSecurityContextOutputWithContext(ctx context.Context) LogSecurityContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogSecurityContextOutput)
}

// LogSecurityContextArrayInput is an input type that accepts LogSecurityContextArray and LogSecurityContextArrayOutput values.
// You can construct a concrete instance of `LogSecurityContextArrayInput` via:
//
//	LogSecurityContextArray{ LogSecurityContextArgs{...} }
type LogSecurityContextArrayInput interface {
	pulumi.Input

	ToLogSecurityContextArrayOutput() LogSecurityContextArrayOutput
	ToLogSecurityContextArrayOutputWithContext(context.Context) LogSecurityContextArrayOutput
}

type LogSecurityContextArray []LogSecurityContextInput

func (LogSecurityContextArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogSecurityContext)(nil)).Elem()
}

func (i LogSecurityContextArray) ToLogSecurityContextArrayOutput() LogSecurityContextArrayOutput {
	return i.ToLogSecurityContextArrayOutputWithContext(context.Background())
}

func (i LogSecurityContextArray) ToLogSecurityContextArrayOutputWithContext(ctx context.Context) LogSecurityContextArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogSecurityContextArrayOutput)
}

// LogSecurityContextMapInput is an input type that accepts LogSecurityContextMap and LogSecurityContextMapOutput values.
// You can construct a concrete instance of `LogSecurityContextMapInput` via:
//
//	LogSecurityContextMap{ "key": LogSecurityContextArgs{...} }
type LogSecurityContextMapInput interface {
	pulumi.Input

	ToLogSecurityContextMapOutput() LogSecurityContextMapOutput
	ToLogSecurityContextMapOutputWithContext(context.Context) LogSecurityContextMapOutput
}

type LogSecurityContextMap map[string]LogSecurityContextInput

func (LogSecurityContextMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogSecurityContext)(nil)).Elem()
}

func (i LogSecurityContextMap) ToLogSecurityContextMapOutput() LogSecurityContextMapOutput {
	return i.ToLogSecurityContextMapOutputWithContext(context.Background())
}

func (i LogSecurityContextMap) ToLogSecurityContextMapOutputWithContext(ctx context.Context) LogSecurityContextMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogSecurityContextMapOutput)
}

type LogSecurityContextOutput struct{ *pulumi.OutputState }

func (LogSecurityContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogSecurityContext)(nil)).Elem()
}

func (o LogSecurityContextOutput) ToLogSecurityContextOutput() LogSecurityContextOutput {
	return o
}

func (o LogSecurityContextOutput) ToLogSecurityContextOutputWithContext(ctx context.Context) LogSecurityContextOutput {
	return o
}

// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
func (o LogSecurityContextOutput) InsertAfter() pulumi.StringOutput {
	return o.ApplyT(func(v *LogSecurityContext) pulumi.StringOutput { return v.InsertAfter }).(pulumi.StringOutput)
}

// no documentation available
func (o LogSecurityContextOutput) SecurityContextRule() LogSecurityContextSecurityContextRuleOutput {
	return o.ApplyT(func(v *LogSecurityContext) LogSecurityContextSecurityContextRuleOutput { return v.SecurityContextRule }).(LogSecurityContextSecurityContextRuleOutput)
}

type LogSecurityContextArrayOutput struct{ *pulumi.OutputState }

func (LogSecurityContextArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogSecurityContext)(nil)).Elem()
}

func (o LogSecurityContextArrayOutput) ToLogSecurityContextArrayOutput() LogSecurityContextArrayOutput {
	return o
}

func (o LogSecurityContextArrayOutput) ToLogSecurityContextArrayOutputWithContext(ctx context.Context) LogSecurityContextArrayOutput {
	return o
}

func (o LogSecurityContextArrayOutput) Index(i pulumi.IntInput) LogSecurityContextOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogSecurityContext {
		return vs[0].([]*LogSecurityContext)[vs[1].(int)]
	}).(LogSecurityContextOutput)
}

type LogSecurityContextMapOutput struct{ *pulumi.OutputState }

func (LogSecurityContextMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogSecurityContext)(nil)).Elem()
}

func (o LogSecurityContextMapOutput) ToLogSecurityContextMapOutput() LogSecurityContextMapOutput {
	return o
}

func (o LogSecurityContextMapOutput) ToLogSecurityContextMapOutputWithContext(ctx context.Context) LogSecurityContextMapOutput {
	return o
}

func (o LogSecurityContextMapOutput) MapIndex(k pulumi.StringInput) LogSecurityContextOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogSecurityContext {
		return vs[0].(map[string]*LogSecurityContext)[vs[1].(string)]
	}).(LogSecurityContextOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogSecurityContextInput)(nil)).Elem(), &LogSecurityContext{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogSecurityContextArrayInput)(nil)).Elem(), LogSecurityContextArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogSecurityContextMapInput)(nil)).Elem(), LogSecurityContextMap{})
	pulumi.RegisterOutputType(LogSecurityContextOutput{})
	pulumi.RegisterOutputType(LogSecurityContextArrayOutput{})
	pulumi.RegisterOutputType(LogSecurityContextMapOutput{})
}
