// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

// > This resource requires the API token scopes **Read settings** (`settings.read`) and **Write settings** (`settings.write`)
//
// ## Dynatrace Documentation
//
// - Trace sampling - https://docs.dynatrace.com/docs/shortlink/url-sampling
//
// - Settings API - https://www.dynatrace.com/support/help/dynatrace-api/environment-api/settings (schemaId: `builtin:rpc-based-sampling`)
//
// ## Resource Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dynatrace.NewRpcBasedSampling(ctx, "#name#", &dynatrace.RpcBasedSamplingArgs{
//				Enabled:                           pulumi.Bool(false),
//				EndpointName:                      pulumi.String("#name#-endpoint"),
//				EndpointNameComparisonType:        pulumi.String("DOES_NOT_END_WITH"),
//				Ignore:                            pulumi.Bool(true),
//				RemoteOperationName:               pulumi.String("#name#-operation"),
//				RemoteOperationNameComparisonType: pulumi.String("CONTAINS"),
//				RemoteServiceName:                 pulumi.String("#name#-service"),
//				RemoteServiceNameComparisonType:   pulumi.String("STARTS_WITH"),
//				Scope:                             pulumi.String("environment"),
//				WireProtocolType:                  pulumi.String("8"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type RpcBasedSampling struct {
	pulumi.CustomResourceState

	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Specify the RPC endpoint name. If the endpoint name is empty, either remote operation name or remote service name must
	// be specified that can be used for RPC matching.
	EndpointName pulumi.StringPtrOutput `pulumi:"endpointName"`
	// Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_END_WITH`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`,
	// `ENDS_WITH`, `EQUALS`, `STARTS_WITH`
	EndpointNameComparisonType pulumi.StringOutput `pulumi:"endpointNameComparisonType"`
	// Possible Values: `0`, `1`, `2`, `3`, `4`, `5`, `6`, `8`, `9`, `10`, `11`, `12`, `13`, `14` - `0`: Increase capturing 128
	// times - `1`: Increase capturing 64 times - `2`: Increase capturing 32 times - `3`: Increase capturing 16 times - `4`:
	// Increase capturing 8 times - `5`: Increase capturing 4 times - `6`: Increase capturing 2 times - `8`: Reduce capturing
	// by factor 2 - `9`: Reduce capturing by factor 4 - `10`: Reduce capturing by factor 8 - `11`: Reduce capturing by factor
	// 16 - `12`: Reduce capturing by factor 32 - `13`: Reduce capturing by factor 64 - `14`: Reduce capturing by factor 128
	Factor pulumi.StringPtrOutput `pulumi:"factor"`
	// No Traces will be captured for matching RPC requests. This applies always, even if Adaptive Traffic Management is
	// inactive.
	Ignore pulumi.BoolOutput `pulumi:"ignore"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this
	// instance regarding order. If not specified when creating the setting will be added to the end of the list. If not
	// specified during update the order will remain untouched
	InsertAfter pulumi.StringOutput `pulumi:"insertAfter"`
	// Specify the RPC operation name. If the remote operation name is empty, either remote service name or endpoint name must
	// be specified that can be used for RPC matching.
	RemoteOperationName pulumi.StringPtrOutput `pulumi:"remoteOperationName"`
	// Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_END_WITH`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`,
	// `ENDS_WITH`, `EQUALS`, `STARTS_WITH`
	RemoteOperationNameComparisonType pulumi.StringOutput `pulumi:"remoteOperationNameComparisonType"`
	// Specify the RPC remote service name. If the remote service name is empty, either remote operation name or endpoint name
	// must be specified that can be used for RPC matching.
	RemoteServiceName pulumi.StringPtrOutput `pulumi:"remoteServiceName"`
	// Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_END_WITH`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`,
	// `ENDS_WITH`, `EQUALS`, `STARTS_WITH`
	RemoteServiceNameComparisonType pulumi.StringOutput `pulumi:"remoteServiceNameComparisonType"`
	// The scope of this setting (PROCESS_GROUP_INSTANCE, PROCESS_GROUP, CLOUD_APPLICATION, CLOUD_APPLICATION_NAMESPACE,
	// KUBERNETES_CLUSTER, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
	// Possible Values: `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10` - `1`: ADK - `2`: DOTNET_REMOTING - `3`:
	// DOTNET_REMOTING_TCP - `4`: DOTNET_REMOTING_HTTP - `5`: DOTNET_REMOTING_XMLRPC - `6`: GRPC - `7`: GRPC_BIDI - `8`:
	// GRPC_UNARY - `9`: GRPC_SERVERSTREAM - `10`: GRPC_CLIENTSTREAM
	WireProtocolType pulumi.StringOutput `pulumi:"wireProtocolType"`
}

// NewRpcBasedSampling registers a new resource with the given unique name, arguments, and options.
func NewRpcBasedSampling(ctx *pulumi.Context,
	name string, args *RpcBasedSamplingArgs, opts ...pulumi.ResourceOption) (*RpcBasedSampling, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.EndpointNameComparisonType == nil {
		return nil, errors.New("invalid value for required argument 'EndpointNameComparisonType'")
	}
	if args.Ignore == nil {
		return nil, errors.New("invalid value for required argument 'Ignore'")
	}
	if args.RemoteOperationNameComparisonType == nil {
		return nil, errors.New("invalid value for required argument 'RemoteOperationNameComparisonType'")
	}
	if args.RemoteServiceNameComparisonType == nil {
		return nil, errors.New("invalid value for required argument 'RemoteServiceNameComparisonType'")
	}
	if args.WireProtocolType == nil {
		return nil, errors.New("invalid value for required argument 'WireProtocolType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RpcBasedSampling
	err := ctx.RegisterResource("dynatrace:index/rpcBasedSampling:RpcBasedSampling", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRpcBasedSampling gets an existing RpcBasedSampling resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRpcBasedSampling(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RpcBasedSamplingState, opts ...pulumi.ResourceOption) (*RpcBasedSampling, error) {
	var resource RpcBasedSampling
	err := ctx.ReadResource("dynatrace:index/rpcBasedSampling:RpcBasedSampling", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RpcBasedSampling resources.
type rpcBasedSamplingState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// Specify the RPC endpoint name. If the endpoint name is empty, either remote operation name or remote service name must
	// be specified that can be used for RPC matching.
	EndpointName *string `pulumi:"endpointName"`
	// Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_END_WITH`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`,
	// `ENDS_WITH`, `EQUALS`, `STARTS_WITH`
	EndpointNameComparisonType *string `pulumi:"endpointNameComparisonType"`
	// Possible Values: `0`, `1`, `2`, `3`, `4`, `5`, `6`, `8`, `9`, `10`, `11`, `12`, `13`, `14` - `0`: Increase capturing 128
	// times - `1`: Increase capturing 64 times - `2`: Increase capturing 32 times - `3`: Increase capturing 16 times - `4`:
	// Increase capturing 8 times - `5`: Increase capturing 4 times - `6`: Increase capturing 2 times - `8`: Reduce capturing
	// by factor 2 - `9`: Reduce capturing by factor 4 - `10`: Reduce capturing by factor 8 - `11`: Reduce capturing by factor
	// 16 - `12`: Reduce capturing by factor 32 - `13`: Reduce capturing by factor 64 - `14`: Reduce capturing by factor 128
	Factor *string `pulumi:"factor"`
	// No Traces will be captured for matching RPC requests. This applies always, even if Adaptive Traffic Management is
	// inactive.
	Ignore *bool `pulumi:"ignore"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this
	// instance regarding order. If not specified when creating the setting will be added to the end of the list. If not
	// specified during update the order will remain untouched
	InsertAfter *string `pulumi:"insertAfter"`
	// Specify the RPC operation name. If the remote operation name is empty, either remote service name or endpoint name must
	// be specified that can be used for RPC matching.
	RemoteOperationName *string `pulumi:"remoteOperationName"`
	// Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_END_WITH`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`,
	// `ENDS_WITH`, `EQUALS`, `STARTS_WITH`
	RemoteOperationNameComparisonType *string `pulumi:"remoteOperationNameComparisonType"`
	// Specify the RPC remote service name. If the remote service name is empty, either remote operation name or endpoint name
	// must be specified that can be used for RPC matching.
	RemoteServiceName *string `pulumi:"remoteServiceName"`
	// Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_END_WITH`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`,
	// `ENDS_WITH`, `EQUALS`, `STARTS_WITH`
	RemoteServiceNameComparisonType *string `pulumi:"remoteServiceNameComparisonType"`
	// The scope of this setting (PROCESS_GROUP_INSTANCE, PROCESS_GROUP, CLOUD_APPLICATION, CLOUD_APPLICATION_NAMESPACE,
	// KUBERNETES_CLUSTER, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
	// Possible Values: `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10` - `1`: ADK - `2`: DOTNET_REMOTING - `3`:
	// DOTNET_REMOTING_TCP - `4`: DOTNET_REMOTING_HTTP - `5`: DOTNET_REMOTING_XMLRPC - `6`: GRPC - `7`: GRPC_BIDI - `8`:
	// GRPC_UNARY - `9`: GRPC_SERVERSTREAM - `10`: GRPC_CLIENTSTREAM
	WireProtocolType *string `pulumi:"wireProtocolType"`
}

type RpcBasedSamplingState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// Specify the RPC endpoint name. If the endpoint name is empty, either remote operation name or remote service name must
	// be specified that can be used for RPC matching.
	EndpointName pulumi.StringPtrInput
	// Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_END_WITH`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`,
	// `ENDS_WITH`, `EQUALS`, `STARTS_WITH`
	EndpointNameComparisonType pulumi.StringPtrInput
	// Possible Values: `0`, `1`, `2`, `3`, `4`, `5`, `6`, `8`, `9`, `10`, `11`, `12`, `13`, `14` - `0`: Increase capturing 128
	// times - `1`: Increase capturing 64 times - `2`: Increase capturing 32 times - `3`: Increase capturing 16 times - `4`:
	// Increase capturing 8 times - `5`: Increase capturing 4 times - `6`: Increase capturing 2 times - `8`: Reduce capturing
	// by factor 2 - `9`: Reduce capturing by factor 4 - `10`: Reduce capturing by factor 8 - `11`: Reduce capturing by factor
	// 16 - `12`: Reduce capturing by factor 32 - `13`: Reduce capturing by factor 64 - `14`: Reduce capturing by factor 128
	Factor pulumi.StringPtrInput
	// No Traces will be captured for matching RPC requests. This applies always, even if Adaptive Traffic Management is
	// inactive.
	Ignore pulumi.BoolPtrInput
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this
	// instance regarding order. If not specified when creating the setting will be added to the end of the list. If not
	// specified during update the order will remain untouched
	InsertAfter pulumi.StringPtrInput
	// Specify the RPC operation name. If the remote operation name is empty, either remote service name or endpoint name must
	// be specified that can be used for RPC matching.
	RemoteOperationName pulumi.StringPtrInput
	// Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_END_WITH`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`,
	// `ENDS_WITH`, `EQUALS`, `STARTS_WITH`
	RemoteOperationNameComparisonType pulumi.StringPtrInput
	// Specify the RPC remote service name. If the remote service name is empty, either remote operation name or endpoint name
	// must be specified that can be used for RPC matching.
	RemoteServiceName pulumi.StringPtrInput
	// Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_END_WITH`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`,
	// `ENDS_WITH`, `EQUALS`, `STARTS_WITH`
	RemoteServiceNameComparisonType pulumi.StringPtrInput
	// The scope of this setting (PROCESS_GROUP_INSTANCE, PROCESS_GROUP, CLOUD_APPLICATION, CLOUD_APPLICATION_NAMESPACE,
	// KUBERNETES_CLUSTER, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
	// Possible Values: `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10` - `1`: ADK - `2`: DOTNET_REMOTING - `3`:
	// DOTNET_REMOTING_TCP - `4`: DOTNET_REMOTING_HTTP - `5`: DOTNET_REMOTING_XMLRPC - `6`: GRPC - `7`: GRPC_BIDI - `8`:
	// GRPC_UNARY - `9`: GRPC_SERVERSTREAM - `10`: GRPC_CLIENTSTREAM
	WireProtocolType pulumi.StringPtrInput
}

func (RpcBasedSamplingState) ElementType() reflect.Type {
	return reflect.TypeOf((*rpcBasedSamplingState)(nil)).Elem()
}

type rpcBasedSamplingArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// Specify the RPC endpoint name. If the endpoint name is empty, either remote operation name or remote service name must
	// be specified that can be used for RPC matching.
	EndpointName *string `pulumi:"endpointName"`
	// Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_END_WITH`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`,
	// `ENDS_WITH`, `EQUALS`, `STARTS_WITH`
	EndpointNameComparisonType string `pulumi:"endpointNameComparisonType"`
	// Possible Values: `0`, `1`, `2`, `3`, `4`, `5`, `6`, `8`, `9`, `10`, `11`, `12`, `13`, `14` - `0`: Increase capturing 128
	// times - `1`: Increase capturing 64 times - `2`: Increase capturing 32 times - `3`: Increase capturing 16 times - `4`:
	// Increase capturing 8 times - `5`: Increase capturing 4 times - `6`: Increase capturing 2 times - `8`: Reduce capturing
	// by factor 2 - `9`: Reduce capturing by factor 4 - `10`: Reduce capturing by factor 8 - `11`: Reduce capturing by factor
	// 16 - `12`: Reduce capturing by factor 32 - `13`: Reduce capturing by factor 64 - `14`: Reduce capturing by factor 128
	Factor *string `pulumi:"factor"`
	// No Traces will be captured for matching RPC requests. This applies always, even if Adaptive Traffic Management is
	// inactive.
	Ignore bool `pulumi:"ignore"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this
	// instance regarding order. If not specified when creating the setting will be added to the end of the list. If not
	// specified during update the order will remain untouched
	InsertAfter *string `pulumi:"insertAfter"`
	// Specify the RPC operation name. If the remote operation name is empty, either remote service name or endpoint name must
	// be specified that can be used for RPC matching.
	RemoteOperationName *string `pulumi:"remoteOperationName"`
	// Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_END_WITH`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`,
	// `ENDS_WITH`, `EQUALS`, `STARTS_WITH`
	RemoteOperationNameComparisonType string `pulumi:"remoteOperationNameComparisonType"`
	// Specify the RPC remote service name. If the remote service name is empty, either remote operation name or endpoint name
	// must be specified that can be used for RPC matching.
	RemoteServiceName *string `pulumi:"remoteServiceName"`
	// Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_END_WITH`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`,
	// `ENDS_WITH`, `EQUALS`, `STARTS_WITH`
	RemoteServiceNameComparisonType string `pulumi:"remoteServiceNameComparisonType"`
	// The scope of this setting (PROCESS_GROUP_INSTANCE, PROCESS_GROUP, CLOUD_APPLICATION, CLOUD_APPLICATION_NAMESPACE,
	// KUBERNETES_CLUSTER, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
	// Possible Values: `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10` - `1`: ADK - `2`: DOTNET_REMOTING - `3`:
	// DOTNET_REMOTING_TCP - `4`: DOTNET_REMOTING_HTTP - `5`: DOTNET_REMOTING_XMLRPC - `6`: GRPC - `7`: GRPC_BIDI - `8`:
	// GRPC_UNARY - `9`: GRPC_SERVERSTREAM - `10`: GRPC_CLIENTSTREAM
	WireProtocolType string `pulumi:"wireProtocolType"`
}

// The set of arguments for constructing a RpcBasedSampling resource.
type RpcBasedSamplingArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// Specify the RPC endpoint name. If the endpoint name is empty, either remote operation name or remote service name must
	// be specified that can be used for RPC matching.
	EndpointName pulumi.StringPtrInput
	// Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_END_WITH`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`,
	// `ENDS_WITH`, `EQUALS`, `STARTS_WITH`
	EndpointNameComparisonType pulumi.StringInput
	// Possible Values: `0`, `1`, `2`, `3`, `4`, `5`, `6`, `8`, `9`, `10`, `11`, `12`, `13`, `14` - `0`: Increase capturing 128
	// times - `1`: Increase capturing 64 times - `2`: Increase capturing 32 times - `3`: Increase capturing 16 times - `4`:
	// Increase capturing 8 times - `5`: Increase capturing 4 times - `6`: Increase capturing 2 times - `8`: Reduce capturing
	// by factor 2 - `9`: Reduce capturing by factor 4 - `10`: Reduce capturing by factor 8 - `11`: Reduce capturing by factor
	// 16 - `12`: Reduce capturing by factor 32 - `13`: Reduce capturing by factor 64 - `14`: Reduce capturing by factor 128
	Factor pulumi.StringPtrInput
	// No Traces will be captured for matching RPC requests. This applies always, even if Adaptive Traffic Management is
	// inactive.
	Ignore pulumi.BoolInput
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this
	// instance regarding order. If not specified when creating the setting will be added to the end of the list. If not
	// specified during update the order will remain untouched
	InsertAfter pulumi.StringPtrInput
	// Specify the RPC operation name. If the remote operation name is empty, either remote service name or endpoint name must
	// be specified that can be used for RPC matching.
	RemoteOperationName pulumi.StringPtrInput
	// Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_END_WITH`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`,
	// `ENDS_WITH`, `EQUALS`, `STARTS_WITH`
	RemoteOperationNameComparisonType pulumi.StringInput
	// Specify the RPC remote service name. If the remote service name is empty, either remote operation name or endpoint name
	// must be specified that can be used for RPC matching.
	RemoteServiceName pulumi.StringPtrInput
	// Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_END_WITH`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`,
	// `ENDS_WITH`, `EQUALS`, `STARTS_WITH`
	RemoteServiceNameComparisonType pulumi.StringInput
	// The scope of this setting (PROCESS_GROUP_INSTANCE, PROCESS_GROUP, CLOUD_APPLICATION, CLOUD_APPLICATION_NAMESPACE,
	// KUBERNETES_CLUSTER, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
	// Possible Values: `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10` - `1`: ADK - `2`: DOTNET_REMOTING - `3`:
	// DOTNET_REMOTING_TCP - `4`: DOTNET_REMOTING_HTTP - `5`: DOTNET_REMOTING_XMLRPC - `6`: GRPC - `7`: GRPC_BIDI - `8`:
	// GRPC_UNARY - `9`: GRPC_SERVERSTREAM - `10`: GRPC_CLIENTSTREAM
	WireProtocolType pulumi.StringInput
}

func (RpcBasedSamplingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rpcBasedSamplingArgs)(nil)).Elem()
}

type RpcBasedSamplingInput interface {
	pulumi.Input

	ToRpcBasedSamplingOutput() RpcBasedSamplingOutput
	ToRpcBasedSamplingOutputWithContext(ctx context.Context) RpcBasedSamplingOutput
}

func (*RpcBasedSampling) ElementType() reflect.Type {
	return reflect.TypeOf((**RpcBasedSampling)(nil)).Elem()
}

func (i *RpcBasedSampling) ToRpcBasedSamplingOutput() RpcBasedSamplingOutput {
	return i.ToRpcBasedSamplingOutputWithContext(context.Background())
}

func (i *RpcBasedSampling) ToRpcBasedSamplingOutputWithContext(ctx context.Context) RpcBasedSamplingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RpcBasedSamplingOutput)
}

// RpcBasedSamplingArrayInput is an input type that accepts RpcBasedSamplingArray and RpcBasedSamplingArrayOutput values.
// You can construct a concrete instance of `RpcBasedSamplingArrayInput` via:
//
//	RpcBasedSamplingArray{ RpcBasedSamplingArgs{...} }
type RpcBasedSamplingArrayInput interface {
	pulumi.Input

	ToRpcBasedSamplingArrayOutput() RpcBasedSamplingArrayOutput
	ToRpcBasedSamplingArrayOutputWithContext(context.Context) RpcBasedSamplingArrayOutput
}

type RpcBasedSamplingArray []RpcBasedSamplingInput

func (RpcBasedSamplingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RpcBasedSampling)(nil)).Elem()
}

func (i RpcBasedSamplingArray) ToRpcBasedSamplingArrayOutput() RpcBasedSamplingArrayOutput {
	return i.ToRpcBasedSamplingArrayOutputWithContext(context.Background())
}

func (i RpcBasedSamplingArray) ToRpcBasedSamplingArrayOutputWithContext(ctx context.Context) RpcBasedSamplingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RpcBasedSamplingArrayOutput)
}

// RpcBasedSamplingMapInput is an input type that accepts RpcBasedSamplingMap and RpcBasedSamplingMapOutput values.
// You can construct a concrete instance of `RpcBasedSamplingMapInput` via:
//
//	RpcBasedSamplingMap{ "key": RpcBasedSamplingArgs{...} }
type RpcBasedSamplingMapInput interface {
	pulumi.Input

	ToRpcBasedSamplingMapOutput() RpcBasedSamplingMapOutput
	ToRpcBasedSamplingMapOutputWithContext(context.Context) RpcBasedSamplingMapOutput
}

type RpcBasedSamplingMap map[string]RpcBasedSamplingInput

func (RpcBasedSamplingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RpcBasedSampling)(nil)).Elem()
}

func (i RpcBasedSamplingMap) ToRpcBasedSamplingMapOutput() RpcBasedSamplingMapOutput {
	return i.ToRpcBasedSamplingMapOutputWithContext(context.Background())
}

func (i RpcBasedSamplingMap) ToRpcBasedSamplingMapOutputWithContext(ctx context.Context) RpcBasedSamplingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RpcBasedSamplingMapOutput)
}

type RpcBasedSamplingOutput struct{ *pulumi.OutputState }

func (RpcBasedSamplingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RpcBasedSampling)(nil)).Elem()
}

func (o RpcBasedSamplingOutput) ToRpcBasedSamplingOutput() RpcBasedSamplingOutput {
	return o
}

func (o RpcBasedSamplingOutput) ToRpcBasedSamplingOutputWithContext(ctx context.Context) RpcBasedSamplingOutput {
	return o
}

// This setting is enabled (`true`) or disabled (`false`)
func (o RpcBasedSamplingOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *RpcBasedSampling) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Specify the RPC endpoint name. If the endpoint name is empty, either remote operation name or remote service name must
// be specified that can be used for RPC matching.
func (o RpcBasedSamplingOutput) EndpointName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RpcBasedSampling) pulumi.StringPtrOutput { return v.EndpointName }).(pulumi.StringPtrOutput)
}

// Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_END_WITH`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`,
// `ENDS_WITH`, `EQUALS`, `STARTS_WITH`
func (o RpcBasedSamplingOutput) EndpointNameComparisonType() pulumi.StringOutput {
	return o.ApplyT(func(v *RpcBasedSampling) pulumi.StringOutput { return v.EndpointNameComparisonType }).(pulumi.StringOutput)
}

// Possible Values: `0`, `1`, `2`, `3`, `4`, `5`, `6`, `8`, `9`, `10`, `11`, `12`, `13`, `14` - `0`: Increase capturing 128
// times - `1`: Increase capturing 64 times - `2`: Increase capturing 32 times - `3`: Increase capturing 16 times - `4`:
// Increase capturing 8 times - `5`: Increase capturing 4 times - `6`: Increase capturing 2 times - `8`: Reduce capturing
// by factor 2 - `9`: Reduce capturing by factor 4 - `10`: Reduce capturing by factor 8 - `11`: Reduce capturing by factor
// 16 - `12`: Reduce capturing by factor 32 - `13`: Reduce capturing by factor 64 - `14`: Reduce capturing by factor 128
func (o RpcBasedSamplingOutput) Factor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RpcBasedSampling) pulumi.StringPtrOutput { return v.Factor }).(pulumi.StringPtrOutput)
}

// No Traces will be captured for matching RPC requests. This applies always, even if Adaptive Traffic Management is
// inactive.
func (o RpcBasedSamplingOutput) Ignore() pulumi.BoolOutput {
	return o.ApplyT(func(v *RpcBasedSampling) pulumi.BoolOutput { return v.Ignore }).(pulumi.BoolOutput)
}

// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this
// instance regarding order. If not specified when creating the setting will be added to the end of the list. If not
// specified during update the order will remain untouched
func (o RpcBasedSamplingOutput) InsertAfter() pulumi.StringOutput {
	return o.ApplyT(func(v *RpcBasedSampling) pulumi.StringOutput { return v.InsertAfter }).(pulumi.StringOutput)
}

// Specify the RPC operation name. If the remote operation name is empty, either remote service name or endpoint name must
// be specified that can be used for RPC matching.
func (o RpcBasedSamplingOutput) RemoteOperationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RpcBasedSampling) pulumi.StringPtrOutput { return v.RemoteOperationName }).(pulumi.StringPtrOutput)
}

// Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_END_WITH`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`,
// `ENDS_WITH`, `EQUALS`, `STARTS_WITH`
func (o RpcBasedSamplingOutput) RemoteOperationNameComparisonType() pulumi.StringOutput {
	return o.ApplyT(func(v *RpcBasedSampling) pulumi.StringOutput { return v.RemoteOperationNameComparisonType }).(pulumi.StringOutput)
}

// Specify the RPC remote service name. If the remote service name is empty, either remote operation name or endpoint name
// must be specified that can be used for RPC matching.
func (o RpcBasedSamplingOutput) RemoteServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RpcBasedSampling) pulumi.StringPtrOutput { return v.RemoteServiceName }).(pulumi.StringPtrOutput)
}

// Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_END_WITH`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`,
// `ENDS_WITH`, `EQUALS`, `STARTS_WITH`
func (o RpcBasedSamplingOutput) RemoteServiceNameComparisonType() pulumi.StringOutput {
	return o.ApplyT(func(v *RpcBasedSampling) pulumi.StringOutput { return v.RemoteServiceNameComparisonType }).(pulumi.StringOutput)
}

// The scope of this setting (PROCESS_GROUP_INSTANCE, PROCESS_GROUP, CLOUD_APPLICATION, CLOUD_APPLICATION_NAMESPACE,
// KUBERNETES_CLUSTER, HOST_GROUP). Omit this property if you want to cover the whole environment.
func (o RpcBasedSamplingOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RpcBasedSampling) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

// Possible Values: `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10` - `1`: ADK - `2`: DOTNET_REMOTING - `3`:
// DOTNET_REMOTING_TCP - `4`: DOTNET_REMOTING_HTTP - `5`: DOTNET_REMOTING_XMLRPC - `6`: GRPC - `7`: GRPC_BIDI - `8`:
// GRPC_UNARY - `9`: GRPC_SERVERSTREAM - `10`: GRPC_CLIENTSTREAM
func (o RpcBasedSamplingOutput) WireProtocolType() pulumi.StringOutput {
	return o.ApplyT(func(v *RpcBasedSampling) pulumi.StringOutput { return v.WireProtocolType }).(pulumi.StringOutput)
}

type RpcBasedSamplingArrayOutput struct{ *pulumi.OutputState }

func (RpcBasedSamplingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RpcBasedSampling)(nil)).Elem()
}

func (o RpcBasedSamplingArrayOutput) ToRpcBasedSamplingArrayOutput() RpcBasedSamplingArrayOutput {
	return o
}

func (o RpcBasedSamplingArrayOutput) ToRpcBasedSamplingArrayOutputWithContext(ctx context.Context) RpcBasedSamplingArrayOutput {
	return o
}

func (o RpcBasedSamplingArrayOutput) Index(i pulumi.IntInput) RpcBasedSamplingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RpcBasedSampling {
		return vs[0].([]*RpcBasedSampling)[vs[1].(int)]
	}).(RpcBasedSamplingOutput)
}

type RpcBasedSamplingMapOutput struct{ *pulumi.OutputState }

func (RpcBasedSamplingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RpcBasedSampling)(nil)).Elem()
}

func (o RpcBasedSamplingMapOutput) ToRpcBasedSamplingMapOutput() RpcBasedSamplingMapOutput {
	return o
}

func (o RpcBasedSamplingMapOutput) ToRpcBasedSamplingMapOutputWithContext(ctx context.Context) RpcBasedSamplingMapOutput {
	return o
}

func (o RpcBasedSamplingMapOutput) MapIndex(k pulumi.StringInput) RpcBasedSamplingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RpcBasedSampling {
		return vs[0].(map[string]*RpcBasedSampling)[vs[1].(string)]
	}).(RpcBasedSamplingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RpcBasedSamplingInput)(nil)).Elem(), &RpcBasedSampling{})
	pulumi.RegisterInputType(reflect.TypeOf((*RpcBasedSamplingArrayInput)(nil)).Elem(), RpcBasedSamplingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RpcBasedSamplingMapInput)(nil)).Elem(), RpcBasedSamplingMap{})
	pulumi.RegisterOutputType(RpcBasedSamplingOutput{})
	pulumi.RegisterOutputType(RpcBasedSamplingArrayOutput{})
	pulumi.RegisterOutputType(RpcBasedSamplingMapOutput{})
}
