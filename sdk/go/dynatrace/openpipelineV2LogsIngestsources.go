// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OpenpipelineV2LogsIngestsources struct {
	pulumi.CustomResourceState

	// Default Bucket
	DefaultBucket pulumi.StringPtrOutput `pulumi:"defaultBucket"`
	// Endpoint display name
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Endpoint segment
	PathSegment pulumi.StringOutput `pulumi:"pathSegment"`
	// Processing stage
	Processing OpenpipelineV2LogsIngestsourcesProcessingOutput `pulumi:"processing"`
	// Static routing of endpoint
	StaticRouting OpenpipelineV2LogsIngestsourcesStaticRoutingPtrOutput `pulumi:"staticRouting"`
}

// NewOpenpipelineV2LogsIngestsources registers a new resource with the given unique name, arguments, and options.
func NewOpenpipelineV2LogsIngestsources(ctx *pulumi.Context,
	name string, args *OpenpipelineV2LogsIngestsourcesArgs, opts ...pulumi.ResourceOption) (*OpenpipelineV2LogsIngestsources, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.PathSegment == nil {
		return nil, errors.New("invalid value for required argument 'PathSegment'")
	}
	if args.Processing == nil {
		return nil, errors.New("invalid value for required argument 'Processing'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenpipelineV2LogsIngestsources
	err := ctx.RegisterResource("dynatrace:index/openpipelineV2LogsIngestsources:OpenpipelineV2LogsIngestsources", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenpipelineV2LogsIngestsources gets an existing OpenpipelineV2LogsIngestsources resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenpipelineV2LogsIngestsources(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenpipelineV2LogsIngestsourcesState, opts ...pulumi.ResourceOption) (*OpenpipelineV2LogsIngestsources, error) {
	var resource OpenpipelineV2LogsIngestsources
	err := ctx.ReadResource("dynatrace:index/openpipelineV2LogsIngestsources:OpenpipelineV2LogsIngestsources", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenpipelineV2LogsIngestsources resources.
type openpipelineV2LogsIngestsourcesState struct {
	// Default Bucket
	DefaultBucket *string `pulumi:"defaultBucket"`
	// Endpoint display name
	DisplayName *string `pulumi:"displayName"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// Endpoint segment
	PathSegment *string `pulumi:"pathSegment"`
	// Processing stage
	Processing *OpenpipelineV2LogsIngestsourcesProcessing `pulumi:"processing"`
	// Static routing of endpoint
	StaticRouting *OpenpipelineV2LogsIngestsourcesStaticRouting `pulumi:"staticRouting"`
}

type OpenpipelineV2LogsIngestsourcesState struct {
	// Default Bucket
	DefaultBucket pulumi.StringPtrInput
	// Endpoint display name
	DisplayName pulumi.StringPtrInput
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// Endpoint segment
	PathSegment pulumi.StringPtrInput
	// Processing stage
	Processing OpenpipelineV2LogsIngestsourcesProcessingPtrInput
	// Static routing of endpoint
	StaticRouting OpenpipelineV2LogsIngestsourcesStaticRoutingPtrInput
}

func (OpenpipelineV2LogsIngestsourcesState) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2LogsIngestsourcesState)(nil)).Elem()
}

type openpipelineV2LogsIngestsourcesArgs struct {
	// Default Bucket
	DefaultBucket *string `pulumi:"defaultBucket"`
	// Endpoint display name
	DisplayName string `pulumi:"displayName"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// Endpoint segment
	PathSegment string `pulumi:"pathSegment"`
	// Processing stage
	Processing OpenpipelineV2LogsIngestsourcesProcessing `pulumi:"processing"`
	// Static routing of endpoint
	StaticRouting *OpenpipelineV2LogsIngestsourcesStaticRouting `pulumi:"staticRouting"`
}

// The set of arguments for constructing a OpenpipelineV2LogsIngestsources resource.
type OpenpipelineV2LogsIngestsourcesArgs struct {
	// Default Bucket
	DefaultBucket pulumi.StringPtrInput
	// Endpoint display name
	DisplayName pulumi.StringInput
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// Endpoint segment
	PathSegment pulumi.StringInput
	// Processing stage
	Processing OpenpipelineV2LogsIngestsourcesProcessingInput
	// Static routing of endpoint
	StaticRouting OpenpipelineV2LogsIngestsourcesStaticRoutingPtrInput
}

func (OpenpipelineV2LogsIngestsourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2LogsIngestsourcesArgs)(nil)).Elem()
}

type OpenpipelineV2LogsIngestsourcesInput interface {
	pulumi.Input

	ToOpenpipelineV2LogsIngestsourcesOutput() OpenpipelineV2LogsIngestsourcesOutput
	ToOpenpipelineV2LogsIngestsourcesOutputWithContext(ctx context.Context) OpenpipelineV2LogsIngestsourcesOutput
}

func (*OpenpipelineV2LogsIngestsources) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2LogsIngestsources)(nil)).Elem()
}

func (i *OpenpipelineV2LogsIngestsources) ToOpenpipelineV2LogsIngestsourcesOutput() OpenpipelineV2LogsIngestsourcesOutput {
	return i.ToOpenpipelineV2LogsIngestsourcesOutputWithContext(context.Background())
}

func (i *OpenpipelineV2LogsIngestsources) ToOpenpipelineV2LogsIngestsourcesOutputWithContext(ctx context.Context) OpenpipelineV2LogsIngestsourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2LogsIngestsourcesOutput)
}

// OpenpipelineV2LogsIngestsourcesArrayInput is an input type that accepts OpenpipelineV2LogsIngestsourcesArray and OpenpipelineV2LogsIngestsourcesArrayOutput values.
// You can construct a concrete instance of `OpenpipelineV2LogsIngestsourcesArrayInput` via:
//
//	OpenpipelineV2LogsIngestsourcesArray{ OpenpipelineV2LogsIngestsourcesArgs{...} }
type OpenpipelineV2LogsIngestsourcesArrayInput interface {
	pulumi.Input

	ToOpenpipelineV2LogsIngestsourcesArrayOutput() OpenpipelineV2LogsIngestsourcesArrayOutput
	ToOpenpipelineV2LogsIngestsourcesArrayOutputWithContext(context.Context) OpenpipelineV2LogsIngestsourcesArrayOutput
}

type OpenpipelineV2LogsIngestsourcesArray []OpenpipelineV2LogsIngestsourcesInput

func (OpenpipelineV2LogsIngestsourcesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2LogsIngestsources)(nil)).Elem()
}

func (i OpenpipelineV2LogsIngestsourcesArray) ToOpenpipelineV2LogsIngestsourcesArrayOutput() OpenpipelineV2LogsIngestsourcesArrayOutput {
	return i.ToOpenpipelineV2LogsIngestsourcesArrayOutputWithContext(context.Background())
}

func (i OpenpipelineV2LogsIngestsourcesArray) ToOpenpipelineV2LogsIngestsourcesArrayOutputWithContext(ctx context.Context) OpenpipelineV2LogsIngestsourcesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2LogsIngestsourcesArrayOutput)
}

// OpenpipelineV2LogsIngestsourcesMapInput is an input type that accepts OpenpipelineV2LogsIngestsourcesMap and OpenpipelineV2LogsIngestsourcesMapOutput values.
// You can construct a concrete instance of `OpenpipelineV2LogsIngestsourcesMapInput` via:
//
//	OpenpipelineV2LogsIngestsourcesMap{ "key": OpenpipelineV2LogsIngestsourcesArgs{...} }
type OpenpipelineV2LogsIngestsourcesMapInput interface {
	pulumi.Input

	ToOpenpipelineV2LogsIngestsourcesMapOutput() OpenpipelineV2LogsIngestsourcesMapOutput
	ToOpenpipelineV2LogsIngestsourcesMapOutputWithContext(context.Context) OpenpipelineV2LogsIngestsourcesMapOutput
}

type OpenpipelineV2LogsIngestsourcesMap map[string]OpenpipelineV2LogsIngestsourcesInput

func (OpenpipelineV2LogsIngestsourcesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2LogsIngestsources)(nil)).Elem()
}

func (i OpenpipelineV2LogsIngestsourcesMap) ToOpenpipelineV2LogsIngestsourcesMapOutput() OpenpipelineV2LogsIngestsourcesMapOutput {
	return i.ToOpenpipelineV2LogsIngestsourcesMapOutputWithContext(context.Background())
}

func (i OpenpipelineV2LogsIngestsourcesMap) ToOpenpipelineV2LogsIngestsourcesMapOutputWithContext(ctx context.Context) OpenpipelineV2LogsIngestsourcesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2LogsIngestsourcesMapOutput)
}

type OpenpipelineV2LogsIngestsourcesOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2LogsIngestsourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2LogsIngestsources)(nil)).Elem()
}

func (o OpenpipelineV2LogsIngestsourcesOutput) ToOpenpipelineV2LogsIngestsourcesOutput() OpenpipelineV2LogsIngestsourcesOutput {
	return o
}

func (o OpenpipelineV2LogsIngestsourcesOutput) ToOpenpipelineV2LogsIngestsourcesOutputWithContext(ctx context.Context) OpenpipelineV2LogsIngestsourcesOutput {
	return o
}

// Default Bucket
func (o OpenpipelineV2LogsIngestsourcesOutput) DefaultBucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenpipelineV2LogsIngestsources) pulumi.StringPtrOutput { return v.DefaultBucket }).(pulumi.StringPtrOutput)
}

// Endpoint display name
func (o OpenpipelineV2LogsIngestsourcesOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenpipelineV2LogsIngestsources) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// This setting is enabled (`true`) or disabled (`false`)
func (o OpenpipelineV2LogsIngestsourcesOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *OpenpipelineV2LogsIngestsources) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Endpoint segment
func (o OpenpipelineV2LogsIngestsourcesOutput) PathSegment() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenpipelineV2LogsIngestsources) pulumi.StringOutput { return v.PathSegment }).(pulumi.StringOutput)
}

// Processing stage
func (o OpenpipelineV2LogsIngestsourcesOutput) Processing() OpenpipelineV2LogsIngestsourcesProcessingOutput {
	return o.ApplyT(func(v *OpenpipelineV2LogsIngestsources) OpenpipelineV2LogsIngestsourcesProcessingOutput {
		return v.Processing
	}).(OpenpipelineV2LogsIngestsourcesProcessingOutput)
}

// Static routing of endpoint
func (o OpenpipelineV2LogsIngestsourcesOutput) StaticRouting() OpenpipelineV2LogsIngestsourcesStaticRoutingPtrOutput {
	return o.ApplyT(func(v *OpenpipelineV2LogsIngestsources) OpenpipelineV2LogsIngestsourcesStaticRoutingPtrOutput {
		return v.StaticRouting
	}).(OpenpipelineV2LogsIngestsourcesStaticRoutingPtrOutput)
}

type OpenpipelineV2LogsIngestsourcesArrayOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2LogsIngestsourcesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2LogsIngestsources)(nil)).Elem()
}

func (o OpenpipelineV2LogsIngestsourcesArrayOutput) ToOpenpipelineV2LogsIngestsourcesArrayOutput() OpenpipelineV2LogsIngestsourcesArrayOutput {
	return o
}

func (o OpenpipelineV2LogsIngestsourcesArrayOutput) ToOpenpipelineV2LogsIngestsourcesArrayOutputWithContext(ctx context.Context) OpenpipelineV2LogsIngestsourcesArrayOutput {
	return o
}

func (o OpenpipelineV2LogsIngestsourcesArrayOutput) Index(i pulumi.IntInput) OpenpipelineV2LogsIngestsourcesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenpipelineV2LogsIngestsources {
		return vs[0].([]*OpenpipelineV2LogsIngestsources)[vs[1].(int)]
	}).(OpenpipelineV2LogsIngestsourcesOutput)
}

type OpenpipelineV2LogsIngestsourcesMapOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2LogsIngestsourcesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2LogsIngestsources)(nil)).Elem()
}

func (o OpenpipelineV2LogsIngestsourcesMapOutput) ToOpenpipelineV2LogsIngestsourcesMapOutput() OpenpipelineV2LogsIngestsourcesMapOutput {
	return o
}

func (o OpenpipelineV2LogsIngestsourcesMapOutput) ToOpenpipelineV2LogsIngestsourcesMapOutputWithContext(ctx context.Context) OpenpipelineV2LogsIngestsourcesMapOutput {
	return o
}

func (o OpenpipelineV2LogsIngestsourcesMapOutput) MapIndex(k pulumi.StringInput) OpenpipelineV2LogsIngestsourcesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenpipelineV2LogsIngestsources {
		return vs[0].(map[string]*OpenpipelineV2LogsIngestsources)[vs[1].(string)]
	}).(OpenpipelineV2LogsIngestsourcesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2LogsIngestsourcesInput)(nil)).Elem(), &OpenpipelineV2LogsIngestsources{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2LogsIngestsourcesArrayInput)(nil)).Elem(), OpenpipelineV2LogsIngestsourcesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2LogsIngestsourcesMapInput)(nil)).Elem(), OpenpipelineV2LogsIngestsourcesMap{})
	pulumi.RegisterOutputType(OpenpipelineV2LogsIngestsourcesOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2LogsIngestsourcesArrayOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2LogsIngestsourcesMapOutput{})
}
