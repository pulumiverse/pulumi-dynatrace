// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type DiskEdgeAnomalyDetectors struct {
	pulumi.CustomResourceState

	// Alerts
	Alerts DiskEdgeAnomalyDetectorsAlertsPtrOutput `pulumi:"alerts"`
	// Disk will be included in this policy if **any** of the filters match
	DiskNameFilters pulumi.StringArrayOutput `pulumi:"diskNameFilters"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Set of additional key-value properties to be attached to the triggered event.
	EventProperties DiskEdgeAnomalyDetectorsEventPropertiesPtrOutput `pulumi:"eventProperties"`
	// The policy will be enabled if **all** conditions are met
	HostMetadataConditions DiskEdgeAnomalyDetectorsHostMetadataConditionsPtrOutput `pulumi:"hostMetadataConditions"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringOutput `pulumi:"insertAfter"`
	// Select the operating systems on which policy should be applied
	OperatingSystems pulumi.StringArrayOutput `pulumi:"operatingSystems"`
	// Policy name
	PolicyName pulumi.StringOutput `pulumi:"policyName"`
	// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
}

// NewDiskEdgeAnomalyDetectors registers a new resource with the given unique name, arguments, and options.
func NewDiskEdgeAnomalyDetectors(ctx *pulumi.Context,
	name string, args *DiskEdgeAnomalyDetectorsArgs, opts ...pulumi.ResourceOption) (*DiskEdgeAnomalyDetectors, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.PolicyName == nil {
		return nil, errors.New("invalid value for required argument 'PolicyName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DiskEdgeAnomalyDetectors
	err := ctx.RegisterResource("dynatrace:index/diskEdgeAnomalyDetectors:DiskEdgeAnomalyDetectors", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDiskEdgeAnomalyDetectors gets an existing DiskEdgeAnomalyDetectors resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDiskEdgeAnomalyDetectors(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DiskEdgeAnomalyDetectorsState, opts ...pulumi.ResourceOption) (*DiskEdgeAnomalyDetectors, error) {
	var resource DiskEdgeAnomalyDetectors
	err := ctx.ReadResource("dynatrace:index/diskEdgeAnomalyDetectors:DiskEdgeAnomalyDetectors", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DiskEdgeAnomalyDetectors resources.
type diskEdgeAnomalyDetectorsState struct {
	// Alerts
	Alerts *DiskEdgeAnomalyDetectorsAlerts `pulumi:"alerts"`
	// Disk will be included in this policy if **any** of the filters match
	DiskNameFilters []string `pulumi:"diskNameFilters"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// Set of additional key-value properties to be attached to the triggered event.
	EventProperties *DiskEdgeAnomalyDetectorsEventProperties `pulumi:"eventProperties"`
	// The policy will be enabled if **all** conditions are met
	HostMetadataConditions *DiskEdgeAnomalyDetectorsHostMetadataConditions `pulumi:"hostMetadataConditions"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `pulumi:"insertAfter"`
	// Select the operating systems on which policy should be applied
	OperatingSystems []string `pulumi:"operatingSystems"`
	// Policy name
	PolicyName *string `pulumi:"policyName"`
	// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
}

type DiskEdgeAnomalyDetectorsState struct {
	// Alerts
	Alerts DiskEdgeAnomalyDetectorsAlertsPtrInput
	// Disk will be included in this policy if **any** of the filters match
	DiskNameFilters pulumi.StringArrayInput
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// Set of additional key-value properties to be attached to the triggered event.
	EventProperties DiskEdgeAnomalyDetectorsEventPropertiesPtrInput
	// The policy will be enabled if **all** conditions are met
	HostMetadataConditions DiskEdgeAnomalyDetectorsHostMetadataConditionsPtrInput
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringPtrInput
	// Select the operating systems on which policy should be applied
	OperatingSystems pulumi.StringArrayInput
	// Policy name
	PolicyName pulumi.StringPtrInput
	// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
}

func (DiskEdgeAnomalyDetectorsState) ElementType() reflect.Type {
	return reflect.TypeOf((*diskEdgeAnomalyDetectorsState)(nil)).Elem()
}

type diskEdgeAnomalyDetectorsArgs struct {
	// Alerts
	Alerts *DiskEdgeAnomalyDetectorsAlerts `pulumi:"alerts"`
	// Disk will be included in this policy if **any** of the filters match
	DiskNameFilters []string `pulumi:"diskNameFilters"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// Set of additional key-value properties to be attached to the triggered event.
	EventProperties *DiskEdgeAnomalyDetectorsEventProperties `pulumi:"eventProperties"`
	// The policy will be enabled if **all** conditions are met
	HostMetadataConditions *DiskEdgeAnomalyDetectorsHostMetadataConditions `pulumi:"hostMetadataConditions"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `pulumi:"insertAfter"`
	// Select the operating systems on which policy should be applied
	OperatingSystems []string `pulumi:"operatingSystems"`
	// Policy name
	PolicyName string `pulumi:"policyName"`
	// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
}

// The set of arguments for constructing a DiskEdgeAnomalyDetectors resource.
type DiskEdgeAnomalyDetectorsArgs struct {
	// Alerts
	Alerts DiskEdgeAnomalyDetectorsAlertsPtrInput
	// Disk will be included in this policy if **any** of the filters match
	DiskNameFilters pulumi.StringArrayInput
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// Set of additional key-value properties to be attached to the triggered event.
	EventProperties DiskEdgeAnomalyDetectorsEventPropertiesPtrInput
	// The policy will be enabled if **all** conditions are met
	HostMetadataConditions DiskEdgeAnomalyDetectorsHostMetadataConditionsPtrInput
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringPtrInput
	// Select the operating systems on which policy should be applied
	OperatingSystems pulumi.StringArrayInput
	// Policy name
	PolicyName pulumi.StringInput
	// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
}

func (DiskEdgeAnomalyDetectorsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*diskEdgeAnomalyDetectorsArgs)(nil)).Elem()
}

type DiskEdgeAnomalyDetectorsInput interface {
	pulumi.Input

	ToDiskEdgeAnomalyDetectorsOutput() DiskEdgeAnomalyDetectorsOutput
	ToDiskEdgeAnomalyDetectorsOutputWithContext(ctx context.Context) DiskEdgeAnomalyDetectorsOutput
}

func (*DiskEdgeAnomalyDetectors) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskEdgeAnomalyDetectors)(nil)).Elem()
}

func (i *DiskEdgeAnomalyDetectors) ToDiskEdgeAnomalyDetectorsOutput() DiskEdgeAnomalyDetectorsOutput {
	return i.ToDiskEdgeAnomalyDetectorsOutputWithContext(context.Background())
}

func (i *DiskEdgeAnomalyDetectors) ToDiskEdgeAnomalyDetectorsOutputWithContext(ctx context.Context) DiskEdgeAnomalyDetectorsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskEdgeAnomalyDetectorsOutput)
}

// DiskEdgeAnomalyDetectorsArrayInput is an input type that accepts DiskEdgeAnomalyDetectorsArray and DiskEdgeAnomalyDetectorsArrayOutput values.
// You can construct a concrete instance of `DiskEdgeAnomalyDetectorsArrayInput` via:
//
//	DiskEdgeAnomalyDetectorsArray{ DiskEdgeAnomalyDetectorsArgs{...} }
type DiskEdgeAnomalyDetectorsArrayInput interface {
	pulumi.Input

	ToDiskEdgeAnomalyDetectorsArrayOutput() DiskEdgeAnomalyDetectorsArrayOutput
	ToDiskEdgeAnomalyDetectorsArrayOutputWithContext(context.Context) DiskEdgeAnomalyDetectorsArrayOutput
}

type DiskEdgeAnomalyDetectorsArray []DiskEdgeAnomalyDetectorsInput

func (DiskEdgeAnomalyDetectorsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DiskEdgeAnomalyDetectors)(nil)).Elem()
}

func (i DiskEdgeAnomalyDetectorsArray) ToDiskEdgeAnomalyDetectorsArrayOutput() DiskEdgeAnomalyDetectorsArrayOutput {
	return i.ToDiskEdgeAnomalyDetectorsArrayOutputWithContext(context.Background())
}

func (i DiskEdgeAnomalyDetectorsArray) ToDiskEdgeAnomalyDetectorsArrayOutputWithContext(ctx context.Context) DiskEdgeAnomalyDetectorsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskEdgeAnomalyDetectorsArrayOutput)
}

// DiskEdgeAnomalyDetectorsMapInput is an input type that accepts DiskEdgeAnomalyDetectorsMap and DiskEdgeAnomalyDetectorsMapOutput values.
// You can construct a concrete instance of `DiskEdgeAnomalyDetectorsMapInput` via:
//
//	DiskEdgeAnomalyDetectorsMap{ "key": DiskEdgeAnomalyDetectorsArgs{...} }
type DiskEdgeAnomalyDetectorsMapInput interface {
	pulumi.Input

	ToDiskEdgeAnomalyDetectorsMapOutput() DiskEdgeAnomalyDetectorsMapOutput
	ToDiskEdgeAnomalyDetectorsMapOutputWithContext(context.Context) DiskEdgeAnomalyDetectorsMapOutput
}

type DiskEdgeAnomalyDetectorsMap map[string]DiskEdgeAnomalyDetectorsInput

func (DiskEdgeAnomalyDetectorsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DiskEdgeAnomalyDetectors)(nil)).Elem()
}

func (i DiskEdgeAnomalyDetectorsMap) ToDiskEdgeAnomalyDetectorsMapOutput() DiskEdgeAnomalyDetectorsMapOutput {
	return i.ToDiskEdgeAnomalyDetectorsMapOutputWithContext(context.Background())
}

func (i DiskEdgeAnomalyDetectorsMap) ToDiskEdgeAnomalyDetectorsMapOutputWithContext(ctx context.Context) DiskEdgeAnomalyDetectorsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskEdgeAnomalyDetectorsMapOutput)
}

type DiskEdgeAnomalyDetectorsOutput struct{ *pulumi.OutputState }

func (DiskEdgeAnomalyDetectorsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskEdgeAnomalyDetectors)(nil)).Elem()
}

func (o DiskEdgeAnomalyDetectorsOutput) ToDiskEdgeAnomalyDetectorsOutput() DiskEdgeAnomalyDetectorsOutput {
	return o
}

func (o DiskEdgeAnomalyDetectorsOutput) ToDiskEdgeAnomalyDetectorsOutputWithContext(ctx context.Context) DiskEdgeAnomalyDetectorsOutput {
	return o
}

// Alerts
func (o DiskEdgeAnomalyDetectorsOutput) Alerts() DiskEdgeAnomalyDetectorsAlertsPtrOutput {
	return o.ApplyT(func(v *DiskEdgeAnomalyDetectors) DiskEdgeAnomalyDetectorsAlertsPtrOutput { return v.Alerts }).(DiskEdgeAnomalyDetectorsAlertsPtrOutput)
}

// Disk will be included in this policy if **any** of the filters match
func (o DiskEdgeAnomalyDetectorsOutput) DiskNameFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DiskEdgeAnomalyDetectors) pulumi.StringArrayOutput { return v.DiskNameFilters }).(pulumi.StringArrayOutput)
}

// This setting is enabled (`true`) or disabled (`false`)
func (o DiskEdgeAnomalyDetectorsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *DiskEdgeAnomalyDetectors) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Set of additional key-value properties to be attached to the triggered event.
func (o DiskEdgeAnomalyDetectorsOutput) EventProperties() DiskEdgeAnomalyDetectorsEventPropertiesPtrOutput {
	return o.ApplyT(func(v *DiskEdgeAnomalyDetectors) DiskEdgeAnomalyDetectorsEventPropertiesPtrOutput {
		return v.EventProperties
	}).(DiskEdgeAnomalyDetectorsEventPropertiesPtrOutput)
}

// The policy will be enabled if **all** conditions are met
func (o DiskEdgeAnomalyDetectorsOutput) HostMetadataConditions() DiskEdgeAnomalyDetectorsHostMetadataConditionsPtrOutput {
	return o.ApplyT(func(v *DiskEdgeAnomalyDetectors) DiskEdgeAnomalyDetectorsHostMetadataConditionsPtrOutput {
		return v.HostMetadataConditions
	}).(DiskEdgeAnomalyDetectorsHostMetadataConditionsPtrOutput)
}

// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
func (o DiskEdgeAnomalyDetectorsOutput) InsertAfter() pulumi.StringOutput {
	return o.ApplyT(func(v *DiskEdgeAnomalyDetectors) pulumi.StringOutput { return v.InsertAfter }).(pulumi.StringOutput)
}

// Select the operating systems on which policy should be applied
func (o DiskEdgeAnomalyDetectorsOutput) OperatingSystems() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DiskEdgeAnomalyDetectors) pulumi.StringArrayOutput { return v.OperatingSystems }).(pulumi.StringArrayOutput)
}

// Policy name
func (o DiskEdgeAnomalyDetectorsOutput) PolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v *DiskEdgeAnomalyDetectors) pulumi.StringOutput { return v.PolicyName }).(pulumi.StringOutput)
}

// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
func (o DiskEdgeAnomalyDetectorsOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskEdgeAnomalyDetectors) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

type DiskEdgeAnomalyDetectorsArrayOutput struct{ *pulumi.OutputState }

func (DiskEdgeAnomalyDetectorsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DiskEdgeAnomalyDetectors)(nil)).Elem()
}

func (o DiskEdgeAnomalyDetectorsArrayOutput) ToDiskEdgeAnomalyDetectorsArrayOutput() DiskEdgeAnomalyDetectorsArrayOutput {
	return o
}

func (o DiskEdgeAnomalyDetectorsArrayOutput) ToDiskEdgeAnomalyDetectorsArrayOutputWithContext(ctx context.Context) DiskEdgeAnomalyDetectorsArrayOutput {
	return o
}

func (o DiskEdgeAnomalyDetectorsArrayOutput) Index(i pulumi.IntInput) DiskEdgeAnomalyDetectorsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DiskEdgeAnomalyDetectors {
		return vs[0].([]*DiskEdgeAnomalyDetectors)[vs[1].(int)]
	}).(DiskEdgeAnomalyDetectorsOutput)
}

type DiskEdgeAnomalyDetectorsMapOutput struct{ *pulumi.OutputState }

func (DiskEdgeAnomalyDetectorsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DiskEdgeAnomalyDetectors)(nil)).Elem()
}

func (o DiskEdgeAnomalyDetectorsMapOutput) ToDiskEdgeAnomalyDetectorsMapOutput() DiskEdgeAnomalyDetectorsMapOutput {
	return o
}

func (o DiskEdgeAnomalyDetectorsMapOutput) ToDiskEdgeAnomalyDetectorsMapOutputWithContext(ctx context.Context) DiskEdgeAnomalyDetectorsMapOutput {
	return o
}

func (o DiskEdgeAnomalyDetectorsMapOutput) MapIndex(k pulumi.StringInput) DiskEdgeAnomalyDetectorsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DiskEdgeAnomalyDetectors {
		return vs[0].(map[string]*DiskEdgeAnomalyDetectors)[vs[1].(string)]
	}).(DiskEdgeAnomalyDetectorsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DiskEdgeAnomalyDetectorsInput)(nil)).Elem(), &DiskEdgeAnomalyDetectors{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiskEdgeAnomalyDetectorsArrayInput)(nil)).Elem(), DiskEdgeAnomalyDetectorsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiskEdgeAnomalyDetectorsMapInput)(nil)).Elem(), DiskEdgeAnomalyDetectorsMap{})
	pulumi.RegisterOutputType(DiskEdgeAnomalyDetectorsOutput{})
	pulumi.RegisterOutputType(DiskEdgeAnomalyDetectorsArrayOutput{})
	pulumi.RegisterOutputType(DiskEdgeAnomalyDetectorsMapOutput{})
}
