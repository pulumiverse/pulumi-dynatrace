// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OpenpipelineV2BizeventsRouting struct {
	pulumi.CustomResourceState

	// Routing for pipelines
	RoutingEntries OpenpipelineV2BizeventsRoutingRoutingEntriesPtrOutput `pulumi:"routingEntries"`
}

// NewOpenpipelineV2BizeventsRouting registers a new resource with the given unique name, arguments, and options.
func NewOpenpipelineV2BizeventsRouting(ctx *pulumi.Context,
	name string, args *OpenpipelineV2BizeventsRoutingArgs, opts ...pulumi.ResourceOption) (*OpenpipelineV2BizeventsRouting, error) {
	if args == nil {
		args = &OpenpipelineV2BizeventsRoutingArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenpipelineV2BizeventsRouting
	err := ctx.RegisterResource("dynatrace:index/openpipelineV2BizeventsRouting:OpenpipelineV2BizeventsRouting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenpipelineV2BizeventsRouting gets an existing OpenpipelineV2BizeventsRouting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenpipelineV2BizeventsRouting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenpipelineV2BizeventsRoutingState, opts ...pulumi.ResourceOption) (*OpenpipelineV2BizeventsRouting, error) {
	var resource OpenpipelineV2BizeventsRouting
	err := ctx.ReadResource("dynatrace:index/openpipelineV2BizeventsRouting:OpenpipelineV2BizeventsRouting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenpipelineV2BizeventsRouting resources.
type openpipelineV2BizeventsRoutingState struct {
	// Routing for pipelines
	RoutingEntries *OpenpipelineV2BizeventsRoutingRoutingEntries `pulumi:"routingEntries"`
}

type OpenpipelineV2BizeventsRoutingState struct {
	// Routing for pipelines
	RoutingEntries OpenpipelineV2BizeventsRoutingRoutingEntriesPtrInput
}

func (OpenpipelineV2BizeventsRoutingState) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2BizeventsRoutingState)(nil)).Elem()
}

type openpipelineV2BizeventsRoutingArgs struct {
	// Routing for pipelines
	RoutingEntries *OpenpipelineV2BizeventsRoutingRoutingEntries `pulumi:"routingEntries"`
}

// The set of arguments for constructing a OpenpipelineV2BizeventsRouting resource.
type OpenpipelineV2BizeventsRoutingArgs struct {
	// Routing for pipelines
	RoutingEntries OpenpipelineV2BizeventsRoutingRoutingEntriesPtrInput
}

func (OpenpipelineV2BizeventsRoutingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2BizeventsRoutingArgs)(nil)).Elem()
}

type OpenpipelineV2BizeventsRoutingInput interface {
	pulumi.Input

	ToOpenpipelineV2BizeventsRoutingOutput() OpenpipelineV2BizeventsRoutingOutput
	ToOpenpipelineV2BizeventsRoutingOutputWithContext(ctx context.Context) OpenpipelineV2BizeventsRoutingOutput
}

func (*OpenpipelineV2BizeventsRouting) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2BizeventsRouting)(nil)).Elem()
}

func (i *OpenpipelineV2BizeventsRouting) ToOpenpipelineV2BizeventsRoutingOutput() OpenpipelineV2BizeventsRoutingOutput {
	return i.ToOpenpipelineV2BizeventsRoutingOutputWithContext(context.Background())
}

func (i *OpenpipelineV2BizeventsRouting) ToOpenpipelineV2BizeventsRoutingOutputWithContext(ctx context.Context) OpenpipelineV2BizeventsRoutingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2BizeventsRoutingOutput)
}

// OpenpipelineV2BizeventsRoutingArrayInput is an input type that accepts OpenpipelineV2BizeventsRoutingArray and OpenpipelineV2BizeventsRoutingArrayOutput values.
// You can construct a concrete instance of `OpenpipelineV2BizeventsRoutingArrayInput` via:
//
//	OpenpipelineV2BizeventsRoutingArray{ OpenpipelineV2BizeventsRoutingArgs{...} }
type OpenpipelineV2BizeventsRoutingArrayInput interface {
	pulumi.Input

	ToOpenpipelineV2BizeventsRoutingArrayOutput() OpenpipelineV2BizeventsRoutingArrayOutput
	ToOpenpipelineV2BizeventsRoutingArrayOutputWithContext(context.Context) OpenpipelineV2BizeventsRoutingArrayOutput
}

type OpenpipelineV2BizeventsRoutingArray []OpenpipelineV2BizeventsRoutingInput

func (OpenpipelineV2BizeventsRoutingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2BizeventsRouting)(nil)).Elem()
}

func (i OpenpipelineV2BizeventsRoutingArray) ToOpenpipelineV2BizeventsRoutingArrayOutput() OpenpipelineV2BizeventsRoutingArrayOutput {
	return i.ToOpenpipelineV2BizeventsRoutingArrayOutputWithContext(context.Background())
}

func (i OpenpipelineV2BizeventsRoutingArray) ToOpenpipelineV2BizeventsRoutingArrayOutputWithContext(ctx context.Context) OpenpipelineV2BizeventsRoutingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2BizeventsRoutingArrayOutput)
}

// OpenpipelineV2BizeventsRoutingMapInput is an input type that accepts OpenpipelineV2BizeventsRoutingMap and OpenpipelineV2BizeventsRoutingMapOutput values.
// You can construct a concrete instance of `OpenpipelineV2BizeventsRoutingMapInput` via:
//
//	OpenpipelineV2BizeventsRoutingMap{ "key": OpenpipelineV2BizeventsRoutingArgs{...} }
type OpenpipelineV2BizeventsRoutingMapInput interface {
	pulumi.Input

	ToOpenpipelineV2BizeventsRoutingMapOutput() OpenpipelineV2BizeventsRoutingMapOutput
	ToOpenpipelineV2BizeventsRoutingMapOutputWithContext(context.Context) OpenpipelineV2BizeventsRoutingMapOutput
}

type OpenpipelineV2BizeventsRoutingMap map[string]OpenpipelineV2BizeventsRoutingInput

func (OpenpipelineV2BizeventsRoutingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2BizeventsRouting)(nil)).Elem()
}

func (i OpenpipelineV2BizeventsRoutingMap) ToOpenpipelineV2BizeventsRoutingMapOutput() OpenpipelineV2BizeventsRoutingMapOutput {
	return i.ToOpenpipelineV2BizeventsRoutingMapOutputWithContext(context.Background())
}

func (i OpenpipelineV2BizeventsRoutingMap) ToOpenpipelineV2BizeventsRoutingMapOutputWithContext(ctx context.Context) OpenpipelineV2BizeventsRoutingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2BizeventsRoutingMapOutput)
}

type OpenpipelineV2BizeventsRoutingOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2BizeventsRoutingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2BizeventsRouting)(nil)).Elem()
}

func (o OpenpipelineV2BizeventsRoutingOutput) ToOpenpipelineV2BizeventsRoutingOutput() OpenpipelineV2BizeventsRoutingOutput {
	return o
}

func (o OpenpipelineV2BizeventsRoutingOutput) ToOpenpipelineV2BizeventsRoutingOutputWithContext(ctx context.Context) OpenpipelineV2BizeventsRoutingOutput {
	return o
}

// Routing for pipelines
func (o OpenpipelineV2BizeventsRoutingOutput) RoutingEntries() OpenpipelineV2BizeventsRoutingRoutingEntriesPtrOutput {
	return o.ApplyT(func(v *OpenpipelineV2BizeventsRouting) OpenpipelineV2BizeventsRoutingRoutingEntriesPtrOutput {
		return v.RoutingEntries
	}).(OpenpipelineV2BizeventsRoutingRoutingEntriesPtrOutput)
}

type OpenpipelineV2BizeventsRoutingArrayOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2BizeventsRoutingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2BizeventsRouting)(nil)).Elem()
}

func (o OpenpipelineV2BizeventsRoutingArrayOutput) ToOpenpipelineV2BizeventsRoutingArrayOutput() OpenpipelineV2BizeventsRoutingArrayOutput {
	return o
}

func (o OpenpipelineV2BizeventsRoutingArrayOutput) ToOpenpipelineV2BizeventsRoutingArrayOutputWithContext(ctx context.Context) OpenpipelineV2BizeventsRoutingArrayOutput {
	return o
}

func (o OpenpipelineV2BizeventsRoutingArrayOutput) Index(i pulumi.IntInput) OpenpipelineV2BizeventsRoutingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenpipelineV2BizeventsRouting {
		return vs[0].([]*OpenpipelineV2BizeventsRouting)[vs[1].(int)]
	}).(OpenpipelineV2BizeventsRoutingOutput)
}

type OpenpipelineV2BizeventsRoutingMapOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2BizeventsRoutingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2BizeventsRouting)(nil)).Elem()
}

func (o OpenpipelineV2BizeventsRoutingMapOutput) ToOpenpipelineV2BizeventsRoutingMapOutput() OpenpipelineV2BizeventsRoutingMapOutput {
	return o
}

func (o OpenpipelineV2BizeventsRoutingMapOutput) ToOpenpipelineV2BizeventsRoutingMapOutputWithContext(ctx context.Context) OpenpipelineV2BizeventsRoutingMapOutput {
	return o
}

func (o OpenpipelineV2BizeventsRoutingMapOutput) MapIndex(k pulumi.StringInput) OpenpipelineV2BizeventsRoutingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenpipelineV2BizeventsRouting {
		return vs[0].(map[string]*OpenpipelineV2BizeventsRouting)[vs[1].(string)]
	}).(OpenpipelineV2BizeventsRoutingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2BizeventsRoutingInput)(nil)).Elem(), &OpenpipelineV2BizeventsRouting{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2BizeventsRoutingArrayInput)(nil)).Elem(), OpenpipelineV2BizeventsRoutingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2BizeventsRoutingMapInput)(nil)).Elem(), OpenpipelineV2BizeventsRoutingMap{})
	pulumi.RegisterOutputType(OpenpipelineV2BizeventsRoutingOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2BizeventsRoutingArrayOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2BizeventsRoutingMapOutput{})
}
