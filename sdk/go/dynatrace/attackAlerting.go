// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type AttackAlerting struct {
	pulumi.CustomResourceState

	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Attack State
	EnabledAttackMitigations pulumi.StringArrayOutput `pulumi:"enabledAttackMitigations"`
	// Name
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewAttackAlerting registers a new resource with the given unique name, arguments, and options.
func NewAttackAlerting(ctx *pulumi.Context,
	name string, args *AttackAlertingArgs, opts ...pulumi.ResourceOption) (*AttackAlerting, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AttackAlerting
	err := ctx.RegisterResource("dynatrace:index/attackAlerting:AttackAlerting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAttackAlerting gets an existing AttackAlerting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAttackAlerting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AttackAlertingState, opts ...pulumi.ResourceOption) (*AttackAlerting, error) {
	var resource AttackAlerting
	err := ctx.ReadResource("dynatrace:index/attackAlerting:AttackAlerting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AttackAlerting resources.
type attackAlertingState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// Attack State
	EnabledAttackMitigations []string `pulumi:"enabledAttackMitigations"`
	// Name
	Name *string `pulumi:"name"`
}

type AttackAlertingState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// Attack State
	EnabledAttackMitigations pulumi.StringArrayInput
	// Name
	Name pulumi.StringPtrInput
}

func (AttackAlertingState) ElementType() reflect.Type {
	return reflect.TypeOf((*attackAlertingState)(nil)).Elem()
}

type attackAlertingArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// Attack State
	EnabledAttackMitigations []string `pulumi:"enabledAttackMitigations"`
	// Name
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a AttackAlerting resource.
type AttackAlertingArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// Attack State
	EnabledAttackMitigations pulumi.StringArrayInput
	// Name
	Name pulumi.StringPtrInput
}

func (AttackAlertingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*attackAlertingArgs)(nil)).Elem()
}

type AttackAlertingInput interface {
	pulumi.Input

	ToAttackAlertingOutput() AttackAlertingOutput
	ToAttackAlertingOutputWithContext(ctx context.Context) AttackAlertingOutput
}

func (*AttackAlerting) ElementType() reflect.Type {
	return reflect.TypeOf((**AttackAlerting)(nil)).Elem()
}

func (i *AttackAlerting) ToAttackAlertingOutput() AttackAlertingOutput {
	return i.ToAttackAlertingOutputWithContext(context.Background())
}

func (i *AttackAlerting) ToAttackAlertingOutputWithContext(ctx context.Context) AttackAlertingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttackAlertingOutput)
}

// AttackAlertingArrayInput is an input type that accepts AttackAlertingArray and AttackAlertingArrayOutput values.
// You can construct a concrete instance of `AttackAlertingArrayInput` via:
//
//	AttackAlertingArray{ AttackAlertingArgs{...} }
type AttackAlertingArrayInput interface {
	pulumi.Input

	ToAttackAlertingArrayOutput() AttackAlertingArrayOutput
	ToAttackAlertingArrayOutputWithContext(context.Context) AttackAlertingArrayOutput
}

type AttackAlertingArray []AttackAlertingInput

func (AttackAlertingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AttackAlerting)(nil)).Elem()
}

func (i AttackAlertingArray) ToAttackAlertingArrayOutput() AttackAlertingArrayOutput {
	return i.ToAttackAlertingArrayOutputWithContext(context.Background())
}

func (i AttackAlertingArray) ToAttackAlertingArrayOutputWithContext(ctx context.Context) AttackAlertingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttackAlertingArrayOutput)
}

// AttackAlertingMapInput is an input type that accepts AttackAlertingMap and AttackAlertingMapOutput values.
// You can construct a concrete instance of `AttackAlertingMapInput` via:
//
//	AttackAlertingMap{ "key": AttackAlertingArgs{...} }
type AttackAlertingMapInput interface {
	pulumi.Input

	ToAttackAlertingMapOutput() AttackAlertingMapOutput
	ToAttackAlertingMapOutputWithContext(context.Context) AttackAlertingMapOutput
}

type AttackAlertingMap map[string]AttackAlertingInput

func (AttackAlertingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AttackAlerting)(nil)).Elem()
}

func (i AttackAlertingMap) ToAttackAlertingMapOutput() AttackAlertingMapOutput {
	return i.ToAttackAlertingMapOutputWithContext(context.Background())
}

func (i AttackAlertingMap) ToAttackAlertingMapOutputWithContext(ctx context.Context) AttackAlertingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttackAlertingMapOutput)
}

type AttackAlertingOutput struct{ *pulumi.OutputState }

func (AttackAlertingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AttackAlerting)(nil)).Elem()
}

func (o AttackAlertingOutput) ToAttackAlertingOutput() AttackAlertingOutput {
	return o
}

func (o AttackAlertingOutput) ToAttackAlertingOutputWithContext(ctx context.Context) AttackAlertingOutput {
	return o
}

// This setting is enabled (`true`) or disabled (`false`)
func (o AttackAlertingOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *AttackAlerting) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Attack State
func (o AttackAlertingOutput) EnabledAttackMitigations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AttackAlerting) pulumi.StringArrayOutput { return v.EnabledAttackMitigations }).(pulumi.StringArrayOutput)
}

// Name
func (o AttackAlertingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AttackAlerting) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type AttackAlertingArrayOutput struct{ *pulumi.OutputState }

func (AttackAlertingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AttackAlerting)(nil)).Elem()
}

func (o AttackAlertingArrayOutput) ToAttackAlertingArrayOutput() AttackAlertingArrayOutput {
	return o
}

func (o AttackAlertingArrayOutput) ToAttackAlertingArrayOutputWithContext(ctx context.Context) AttackAlertingArrayOutput {
	return o
}

func (o AttackAlertingArrayOutput) Index(i pulumi.IntInput) AttackAlertingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AttackAlerting {
		return vs[0].([]*AttackAlerting)[vs[1].(int)]
	}).(AttackAlertingOutput)
}

type AttackAlertingMapOutput struct{ *pulumi.OutputState }

func (AttackAlertingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AttackAlerting)(nil)).Elem()
}

func (o AttackAlertingMapOutput) ToAttackAlertingMapOutput() AttackAlertingMapOutput {
	return o
}

func (o AttackAlertingMapOutput) ToAttackAlertingMapOutputWithContext(ctx context.Context) AttackAlertingMapOutput {
	return o
}

func (o AttackAlertingMapOutput) MapIndex(k pulumi.StringInput) AttackAlertingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AttackAlerting {
		return vs[0].(map[string]*AttackAlerting)[vs[1].(string)]
	}).(AttackAlertingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AttackAlertingInput)(nil)).Elem(), &AttackAlerting{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttackAlertingArrayInput)(nil)).Elem(), AttackAlertingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttackAlertingMapInput)(nil)).Elem(), AttackAlertingMap{})
	pulumi.RegisterOutputType(AttackAlertingOutput{})
	pulumi.RegisterOutputType(AttackAlertingArrayOutput{})
	pulumi.RegisterOutputType(AttackAlertingMapOutput{})
}
