// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

// The `RequestNaming` data source allows the request naming rule ID to be retrieved by its name.
//
// - `name` (String) - The name to be assigned to matching requests.
//
// If multiple services match the given criteria, the first result will be retrieved.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := dynatrace.LookupRequestNaming(ctx, &dynatrace.LookupRequestNamingArgs{
//				Name: "Terraform Example",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("id", example.Id)
//			return nil
//		})
//	}
//
// ```
func LookupRequestNaming(ctx *pulumi.Context, args *LookupRequestNamingArgs, opts ...pulumi.InvokeOption) (*LookupRequestNamingResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRequestNamingResult
	err := ctx.Invoke("dynatrace:index/getRequestNaming:getRequestNaming", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRequestNaming.
type LookupRequestNamingArgs struct {
	Name string `pulumi:"name"`
}

// A collection of values returned by getRequestNaming.
type LookupRequestNamingResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
}

func LookupRequestNamingOutput(ctx *pulumi.Context, args LookupRequestNamingOutputArgs, opts ...pulumi.InvokeOption) LookupRequestNamingResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupRequestNamingResultOutput, error) {
			args := v.(LookupRequestNamingArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("dynatrace:index/getRequestNaming:getRequestNaming", args, LookupRequestNamingResultOutput{}, options).(LookupRequestNamingResultOutput), nil
		}).(LookupRequestNamingResultOutput)
}

// A collection of arguments for invoking getRequestNaming.
type LookupRequestNamingOutputArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupRequestNamingOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRequestNamingArgs)(nil)).Elem()
}

// A collection of values returned by getRequestNaming.
type LookupRequestNamingResultOutput struct{ *pulumi.OutputState }

func (LookupRequestNamingResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRequestNamingResult)(nil)).Elem()
}

func (o LookupRequestNamingResultOutput) ToLookupRequestNamingResultOutput() LookupRequestNamingResultOutput {
	return o
}

func (o LookupRequestNamingResultOutput) ToLookupRequestNamingResultOutputWithContext(ctx context.Context) LookupRequestNamingResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupRequestNamingResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRequestNamingResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupRequestNamingResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRequestNamingResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRequestNamingResultOutput{})
}
