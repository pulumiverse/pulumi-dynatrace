// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OpenpipelineV2SpansPipelines struct {
	pulumi.CustomResourceState

	// Cost allocation stage
	CostAllocation OpenpipelineV2SpansPipelinesCostAllocationOutput `pulumi:"costAllocation"`
	// Custom pipeline id
	CustomId pulumi.StringOutput `pulumi:"customId"`
	// Data extraction stage
	DataExtraction OpenpipelineV2SpansPipelinesDataExtractionOutput `pulumi:"dataExtraction"`
	// Davis event extraction stage
	Davis OpenpipelineV2SpansPipelinesDavisOutput `pulumi:"davis"`
	// Display name
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Metrics extraction stage
	MetricExtraction OpenpipelineV2SpansPipelinesMetricExtractionOutput `pulumi:"metricExtraction"`
	// Processing stage
	Processing OpenpipelineV2SpansPipelinesProcessingOutput `pulumi:"processing"`
	// Product allocation stage
	ProductAllocation OpenpipelineV2SpansPipelinesProductAllocationOutput `pulumi:"productAllocation"`
	// Security context stage
	SecurityContext OpenpipelineV2SpansPipelinesSecurityContextOutput `pulumi:"securityContext"`
	// Storage stage
	Storage OpenpipelineV2SpansPipelinesStorageOutput `pulumi:"storage"`
}

// NewOpenpipelineV2SpansPipelines registers a new resource with the given unique name, arguments, and options.
func NewOpenpipelineV2SpansPipelines(ctx *pulumi.Context,
	name string, args *OpenpipelineV2SpansPipelinesArgs, opts ...pulumi.ResourceOption) (*OpenpipelineV2SpansPipelines, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CostAllocation == nil {
		return nil, errors.New("invalid value for required argument 'CostAllocation'")
	}
	if args.CustomId == nil {
		return nil, errors.New("invalid value for required argument 'CustomId'")
	}
	if args.DataExtraction == nil {
		return nil, errors.New("invalid value for required argument 'DataExtraction'")
	}
	if args.Davis == nil {
		return nil, errors.New("invalid value for required argument 'Davis'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.MetricExtraction == nil {
		return nil, errors.New("invalid value for required argument 'MetricExtraction'")
	}
	if args.Processing == nil {
		return nil, errors.New("invalid value for required argument 'Processing'")
	}
	if args.ProductAllocation == nil {
		return nil, errors.New("invalid value for required argument 'ProductAllocation'")
	}
	if args.SecurityContext == nil {
		return nil, errors.New("invalid value for required argument 'SecurityContext'")
	}
	if args.Storage == nil {
		return nil, errors.New("invalid value for required argument 'Storage'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenpipelineV2SpansPipelines
	err := ctx.RegisterResource("dynatrace:index/openpipelineV2SpansPipelines:OpenpipelineV2SpansPipelines", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenpipelineV2SpansPipelines gets an existing OpenpipelineV2SpansPipelines resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenpipelineV2SpansPipelines(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenpipelineV2SpansPipelinesState, opts ...pulumi.ResourceOption) (*OpenpipelineV2SpansPipelines, error) {
	var resource OpenpipelineV2SpansPipelines
	err := ctx.ReadResource("dynatrace:index/openpipelineV2SpansPipelines:OpenpipelineV2SpansPipelines", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenpipelineV2SpansPipelines resources.
type openpipelineV2SpansPipelinesState struct {
	// Cost allocation stage
	CostAllocation *OpenpipelineV2SpansPipelinesCostAllocation `pulumi:"costAllocation"`
	// Custom pipeline id
	CustomId *string `pulumi:"customId"`
	// Data extraction stage
	DataExtraction *OpenpipelineV2SpansPipelinesDataExtraction `pulumi:"dataExtraction"`
	// Davis event extraction stage
	Davis *OpenpipelineV2SpansPipelinesDavis `pulumi:"davis"`
	// Display name
	DisplayName *string `pulumi:"displayName"`
	// Metrics extraction stage
	MetricExtraction *OpenpipelineV2SpansPipelinesMetricExtraction `pulumi:"metricExtraction"`
	// Processing stage
	Processing *OpenpipelineV2SpansPipelinesProcessing `pulumi:"processing"`
	// Product allocation stage
	ProductAllocation *OpenpipelineV2SpansPipelinesProductAllocation `pulumi:"productAllocation"`
	// Security context stage
	SecurityContext *OpenpipelineV2SpansPipelinesSecurityContext `pulumi:"securityContext"`
	// Storage stage
	Storage *OpenpipelineV2SpansPipelinesStorage `pulumi:"storage"`
}

type OpenpipelineV2SpansPipelinesState struct {
	// Cost allocation stage
	CostAllocation OpenpipelineV2SpansPipelinesCostAllocationPtrInput
	// Custom pipeline id
	CustomId pulumi.StringPtrInput
	// Data extraction stage
	DataExtraction OpenpipelineV2SpansPipelinesDataExtractionPtrInput
	// Davis event extraction stage
	Davis OpenpipelineV2SpansPipelinesDavisPtrInput
	// Display name
	DisplayName pulumi.StringPtrInput
	// Metrics extraction stage
	MetricExtraction OpenpipelineV2SpansPipelinesMetricExtractionPtrInput
	// Processing stage
	Processing OpenpipelineV2SpansPipelinesProcessingPtrInput
	// Product allocation stage
	ProductAllocation OpenpipelineV2SpansPipelinesProductAllocationPtrInput
	// Security context stage
	SecurityContext OpenpipelineV2SpansPipelinesSecurityContextPtrInput
	// Storage stage
	Storage OpenpipelineV2SpansPipelinesStoragePtrInput
}

func (OpenpipelineV2SpansPipelinesState) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2SpansPipelinesState)(nil)).Elem()
}

type openpipelineV2SpansPipelinesArgs struct {
	// Cost allocation stage
	CostAllocation OpenpipelineV2SpansPipelinesCostAllocation `pulumi:"costAllocation"`
	// Custom pipeline id
	CustomId string `pulumi:"customId"`
	// Data extraction stage
	DataExtraction OpenpipelineV2SpansPipelinesDataExtraction `pulumi:"dataExtraction"`
	// Davis event extraction stage
	Davis OpenpipelineV2SpansPipelinesDavis `pulumi:"davis"`
	// Display name
	DisplayName string `pulumi:"displayName"`
	// Metrics extraction stage
	MetricExtraction OpenpipelineV2SpansPipelinesMetricExtraction `pulumi:"metricExtraction"`
	// Processing stage
	Processing OpenpipelineV2SpansPipelinesProcessing `pulumi:"processing"`
	// Product allocation stage
	ProductAllocation OpenpipelineV2SpansPipelinesProductAllocation `pulumi:"productAllocation"`
	// Security context stage
	SecurityContext OpenpipelineV2SpansPipelinesSecurityContext `pulumi:"securityContext"`
	// Storage stage
	Storage OpenpipelineV2SpansPipelinesStorage `pulumi:"storage"`
}

// The set of arguments for constructing a OpenpipelineV2SpansPipelines resource.
type OpenpipelineV2SpansPipelinesArgs struct {
	// Cost allocation stage
	CostAllocation OpenpipelineV2SpansPipelinesCostAllocationInput
	// Custom pipeline id
	CustomId pulumi.StringInput
	// Data extraction stage
	DataExtraction OpenpipelineV2SpansPipelinesDataExtractionInput
	// Davis event extraction stage
	Davis OpenpipelineV2SpansPipelinesDavisInput
	// Display name
	DisplayName pulumi.StringInput
	// Metrics extraction stage
	MetricExtraction OpenpipelineV2SpansPipelinesMetricExtractionInput
	// Processing stage
	Processing OpenpipelineV2SpansPipelinesProcessingInput
	// Product allocation stage
	ProductAllocation OpenpipelineV2SpansPipelinesProductAllocationInput
	// Security context stage
	SecurityContext OpenpipelineV2SpansPipelinesSecurityContextInput
	// Storage stage
	Storage OpenpipelineV2SpansPipelinesStorageInput
}

func (OpenpipelineV2SpansPipelinesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2SpansPipelinesArgs)(nil)).Elem()
}

type OpenpipelineV2SpansPipelinesInput interface {
	pulumi.Input

	ToOpenpipelineV2SpansPipelinesOutput() OpenpipelineV2SpansPipelinesOutput
	ToOpenpipelineV2SpansPipelinesOutputWithContext(ctx context.Context) OpenpipelineV2SpansPipelinesOutput
}

func (*OpenpipelineV2SpansPipelines) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2SpansPipelines)(nil)).Elem()
}

func (i *OpenpipelineV2SpansPipelines) ToOpenpipelineV2SpansPipelinesOutput() OpenpipelineV2SpansPipelinesOutput {
	return i.ToOpenpipelineV2SpansPipelinesOutputWithContext(context.Background())
}

func (i *OpenpipelineV2SpansPipelines) ToOpenpipelineV2SpansPipelinesOutputWithContext(ctx context.Context) OpenpipelineV2SpansPipelinesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2SpansPipelinesOutput)
}

// OpenpipelineV2SpansPipelinesArrayInput is an input type that accepts OpenpipelineV2SpansPipelinesArray and OpenpipelineV2SpansPipelinesArrayOutput values.
// You can construct a concrete instance of `OpenpipelineV2SpansPipelinesArrayInput` via:
//
//	OpenpipelineV2SpansPipelinesArray{ OpenpipelineV2SpansPipelinesArgs{...} }
type OpenpipelineV2SpansPipelinesArrayInput interface {
	pulumi.Input

	ToOpenpipelineV2SpansPipelinesArrayOutput() OpenpipelineV2SpansPipelinesArrayOutput
	ToOpenpipelineV2SpansPipelinesArrayOutputWithContext(context.Context) OpenpipelineV2SpansPipelinesArrayOutput
}

type OpenpipelineV2SpansPipelinesArray []OpenpipelineV2SpansPipelinesInput

func (OpenpipelineV2SpansPipelinesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2SpansPipelines)(nil)).Elem()
}

func (i OpenpipelineV2SpansPipelinesArray) ToOpenpipelineV2SpansPipelinesArrayOutput() OpenpipelineV2SpansPipelinesArrayOutput {
	return i.ToOpenpipelineV2SpansPipelinesArrayOutputWithContext(context.Background())
}

func (i OpenpipelineV2SpansPipelinesArray) ToOpenpipelineV2SpansPipelinesArrayOutputWithContext(ctx context.Context) OpenpipelineV2SpansPipelinesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2SpansPipelinesArrayOutput)
}

// OpenpipelineV2SpansPipelinesMapInput is an input type that accepts OpenpipelineV2SpansPipelinesMap and OpenpipelineV2SpansPipelinesMapOutput values.
// You can construct a concrete instance of `OpenpipelineV2SpansPipelinesMapInput` via:
//
//	OpenpipelineV2SpansPipelinesMap{ "key": OpenpipelineV2SpansPipelinesArgs{...} }
type OpenpipelineV2SpansPipelinesMapInput interface {
	pulumi.Input

	ToOpenpipelineV2SpansPipelinesMapOutput() OpenpipelineV2SpansPipelinesMapOutput
	ToOpenpipelineV2SpansPipelinesMapOutputWithContext(context.Context) OpenpipelineV2SpansPipelinesMapOutput
}

type OpenpipelineV2SpansPipelinesMap map[string]OpenpipelineV2SpansPipelinesInput

func (OpenpipelineV2SpansPipelinesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2SpansPipelines)(nil)).Elem()
}

func (i OpenpipelineV2SpansPipelinesMap) ToOpenpipelineV2SpansPipelinesMapOutput() OpenpipelineV2SpansPipelinesMapOutput {
	return i.ToOpenpipelineV2SpansPipelinesMapOutputWithContext(context.Background())
}

func (i OpenpipelineV2SpansPipelinesMap) ToOpenpipelineV2SpansPipelinesMapOutputWithContext(ctx context.Context) OpenpipelineV2SpansPipelinesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2SpansPipelinesMapOutput)
}

type OpenpipelineV2SpansPipelinesOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2SpansPipelinesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2SpansPipelines)(nil)).Elem()
}

func (o OpenpipelineV2SpansPipelinesOutput) ToOpenpipelineV2SpansPipelinesOutput() OpenpipelineV2SpansPipelinesOutput {
	return o
}

func (o OpenpipelineV2SpansPipelinesOutput) ToOpenpipelineV2SpansPipelinesOutputWithContext(ctx context.Context) OpenpipelineV2SpansPipelinesOutput {
	return o
}

// Cost allocation stage
func (o OpenpipelineV2SpansPipelinesOutput) CostAllocation() OpenpipelineV2SpansPipelinesCostAllocationOutput {
	return o.ApplyT(func(v *OpenpipelineV2SpansPipelines) OpenpipelineV2SpansPipelinesCostAllocationOutput {
		return v.CostAllocation
	}).(OpenpipelineV2SpansPipelinesCostAllocationOutput)
}

// Custom pipeline id
func (o OpenpipelineV2SpansPipelinesOutput) CustomId() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenpipelineV2SpansPipelines) pulumi.StringOutput { return v.CustomId }).(pulumi.StringOutput)
}

// Data extraction stage
func (o OpenpipelineV2SpansPipelinesOutput) DataExtraction() OpenpipelineV2SpansPipelinesDataExtractionOutput {
	return o.ApplyT(func(v *OpenpipelineV2SpansPipelines) OpenpipelineV2SpansPipelinesDataExtractionOutput {
		return v.DataExtraction
	}).(OpenpipelineV2SpansPipelinesDataExtractionOutput)
}

// Davis event extraction stage
func (o OpenpipelineV2SpansPipelinesOutput) Davis() OpenpipelineV2SpansPipelinesDavisOutput {
	return o.ApplyT(func(v *OpenpipelineV2SpansPipelines) OpenpipelineV2SpansPipelinesDavisOutput { return v.Davis }).(OpenpipelineV2SpansPipelinesDavisOutput)
}

// Display name
func (o OpenpipelineV2SpansPipelinesOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenpipelineV2SpansPipelines) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Metrics extraction stage
func (o OpenpipelineV2SpansPipelinesOutput) MetricExtraction() OpenpipelineV2SpansPipelinesMetricExtractionOutput {
	return o.ApplyT(func(v *OpenpipelineV2SpansPipelines) OpenpipelineV2SpansPipelinesMetricExtractionOutput {
		return v.MetricExtraction
	}).(OpenpipelineV2SpansPipelinesMetricExtractionOutput)
}

// Processing stage
func (o OpenpipelineV2SpansPipelinesOutput) Processing() OpenpipelineV2SpansPipelinesProcessingOutput {
	return o.ApplyT(func(v *OpenpipelineV2SpansPipelines) OpenpipelineV2SpansPipelinesProcessingOutput {
		return v.Processing
	}).(OpenpipelineV2SpansPipelinesProcessingOutput)
}

// Product allocation stage
func (o OpenpipelineV2SpansPipelinesOutput) ProductAllocation() OpenpipelineV2SpansPipelinesProductAllocationOutput {
	return o.ApplyT(func(v *OpenpipelineV2SpansPipelines) OpenpipelineV2SpansPipelinesProductAllocationOutput {
		return v.ProductAllocation
	}).(OpenpipelineV2SpansPipelinesProductAllocationOutput)
}

// Security context stage
func (o OpenpipelineV2SpansPipelinesOutput) SecurityContext() OpenpipelineV2SpansPipelinesSecurityContextOutput {
	return o.ApplyT(func(v *OpenpipelineV2SpansPipelines) OpenpipelineV2SpansPipelinesSecurityContextOutput {
		return v.SecurityContext
	}).(OpenpipelineV2SpansPipelinesSecurityContextOutput)
}

// Storage stage
func (o OpenpipelineV2SpansPipelinesOutput) Storage() OpenpipelineV2SpansPipelinesStorageOutput {
	return o.ApplyT(func(v *OpenpipelineV2SpansPipelines) OpenpipelineV2SpansPipelinesStorageOutput { return v.Storage }).(OpenpipelineV2SpansPipelinesStorageOutput)
}

type OpenpipelineV2SpansPipelinesArrayOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2SpansPipelinesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2SpansPipelines)(nil)).Elem()
}

func (o OpenpipelineV2SpansPipelinesArrayOutput) ToOpenpipelineV2SpansPipelinesArrayOutput() OpenpipelineV2SpansPipelinesArrayOutput {
	return o
}

func (o OpenpipelineV2SpansPipelinesArrayOutput) ToOpenpipelineV2SpansPipelinesArrayOutputWithContext(ctx context.Context) OpenpipelineV2SpansPipelinesArrayOutput {
	return o
}

func (o OpenpipelineV2SpansPipelinesArrayOutput) Index(i pulumi.IntInput) OpenpipelineV2SpansPipelinesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenpipelineV2SpansPipelines {
		return vs[0].([]*OpenpipelineV2SpansPipelines)[vs[1].(int)]
	}).(OpenpipelineV2SpansPipelinesOutput)
}

type OpenpipelineV2SpansPipelinesMapOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2SpansPipelinesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2SpansPipelines)(nil)).Elem()
}

func (o OpenpipelineV2SpansPipelinesMapOutput) ToOpenpipelineV2SpansPipelinesMapOutput() OpenpipelineV2SpansPipelinesMapOutput {
	return o
}

func (o OpenpipelineV2SpansPipelinesMapOutput) ToOpenpipelineV2SpansPipelinesMapOutputWithContext(ctx context.Context) OpenpipelineV2SpansPipelinesMapOutput {
	return o
}

func (o OpenpipelineV2SpansPipelinesMapOutput) MapIndex(k pulumi.StringInput) OpenpipelineV2SpansPipelinesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenpipelineV2SpansPipelines {
		return vs[0].(map[string]*OpenpipelineV2SpansPipelines)[vs[1].(string)]
	}).(OpenpipelineV2SpansPipelinesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2SpansPipelinesInput)(nil)).Elem(), &OpenpipelineV2SpansPipelines{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2SpansPipelinesArrayInput)(nil)).Elem(), OpenpipelineV2SpansPipelinesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2SpansPipelinesMapInput)(nil)).Elem(), OpenpipelineV2SpansPipelinesMap{})
	pulumi.RegisterOutputType(OpenpipelineV2SpansPipelinesOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2SpansPipelinesArrayOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2SpansPipelinesMapOutput{})
}
