// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dynatrace.GetDql(ctx, &dynatrace.GetDqlArgs{
//				Query: "fetch events",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// will produce content for the `results` attribute like this:
//
// You can also use Heredoc syntax for better readability of complex DQL queries.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dynatrace.GetDql(ctx, &dynatrace.GetDqlArgs{
//				Query: `    fetch events |
//	    filter event.type == "davis" AND davis.status != "CLOSED" |
//	    fields timestamp, davis.title, davis.underMaintenance, davis.status |
//	    sort timestamp |
//	    limit 10
//
// `,
//
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// {{ .SchemaMarkdown | trimspace }}
func GetDql(ctx *pulumi.Context, args *GetDqlArgs, opts ...pulumi.InvokeOption) (*GetDqlResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDqlResult
	err := ctx.Invoke("dynatrace:index/getDql:getDql", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDql.
type GetDqlArgs struct {
	DefaultSamplingRatio   *float64 `pulumi:"defaultSamplingRatio"`
	DefaultScanLimitGbytes *int     `pulumi:"defaultScanLimitGbytes"`
	DefaultTimeframeEnd    *string  `pulumi:"defaultTimeframeEnd"`
	DefaultTimeframeStart  *string  `pulumi:"defaultTimeframeStart"`
	FetchTimeoutSeconds    *int     `pulumi:"fetchTimeoutSeconds"`
	Locale                 *string  `pulumi:"locale"`
	MaxResultBytes         *int     `pulumi:"maxResultBytes"`
	MaxResultRecords       *int     `pulumi:"maxResultRecords"`
	Query                  string   `pulumi:"query"`
	Timezone               *string  `pulumi:"timezone"`
}

// A collection of values returned by getDql.
type GetDqlResult struct {
	DefaultSamplingRatio   *float64 `pulumi:"defaultSamplingRatio"`
	DefaultScanLimitGbytes *int     `pulumi:"defaultScanLimitGbytes"`
	DefaultTimeframeEnd    *string  `pulumi:"defaultTimeframeEnd"`
	DefaultTimeframeStart  *string  `pulumi:"defaultTimeframeStart"`
	FetchTimeoutSeconds    *int     `pulumi:"fetchTimeoutSeconds"`
	// The provider-assigned unique ID for this managed resource.
	Id               string  `pulumi:"id"`
	Locale           *string `pulumi:"locale"`
	MaxResultBytes   *int    `pulumi:"maxResultBytes"`
	MaxResultRecords *int    `pulumi:"maxResultRecords"`
	Query            string  `pulumi:"query"`
	Records          string  `pulumi:"records"`
	Timezone         *string `pulumi:"timezone"`
}

func GetDqlOutput(ctx *pulumi.Context, args GetDqlOutputArgs, opts ...pulumi.InvokeOption) GetDqlResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetDqlResultOutput, error) {
			args := v.(GetDqlArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("dynatrace:index/getDql:getDql", args, GetDqlResultOutput{}, options).(GetDqlResultOutput), nil
		}).(GetDqlResultOutput)
}

// A collection of arguments for invoking getDql.
type GetDqlOutputArgs struct {
	DefaultSamplingRatio   pulumi.Float64PtrInput `pulumi:"defaultSamplingRatio"`
	DefaultScanLimitGbytes pulumi.IntPtrInput     `pulumi:"defaultScanLimitGbytes"`
	DefaultTimeframeEnd    pulumi.StringPtrInput  `pulumi:"defaultTimeframeEnd"`
	DefaultTimeframeStart  pulumi.StringPtrInput  `pulumi:"defaultTimeframeStart"`
	FetchTimeoutSeconds    pulumi.IntPtrInput     `pulumi:"fetchTimeoutSeconds"`
	Locale                 pulumi.StringPtrInput  `pulumi:"locale"`
	MaxResultBytes         pulumi.IntPtrInput     `pulumi:"maxResultBytes"`
	MaxResultRecords       pulumi.IntPtrInput     `pulumi:"maxResultRecords"`
	Query                  pulumi.StringInput     `pulumi:"query"`
	Timezone               pulumi.StringPtrInput  `pulumi:"timezone"`
}

func (GetDqlOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDqlArgs)(nil)).Elem()
}

// A collection of values returned by getDql.
type GetDqlResultOutput struct{ *pulumi.OutputState }

func (GetDqlResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDqlResult)(nil)).Elem()
}

func (o GetDqlResultOutput) ToGetDqlResultOutput() GetDqlResultOutput {
	return o
}

func (o GetDqlResultOutput) ToGetDqlResultOutputWithContext(ctx context.Context) GetDqlResultOutput {
	return o
}

func (o GetDqlResultOutput) DefaultSamplingRatio() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v GetDqlResult) *float64 { return v.DefaultSamplingRatio }).(pulumi.Float64PtrOutput)
}

func (o GetDqlResultOutput) DefaultScanLimitGbytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetDqlResult) *int { return v.DefaultScanLimitGbytes }).(pulumi.IntPtrOutput)
}

func (o GetDqlResultOutput) DefaultTimeframeEnd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDqlResult) *string { return v.DefaultTimeframeEnd }).(pulumi.StringPtrOutput)
}

func (o GetDqlResultOutput) DefaultTimeframeStart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDqlResult) *string { return v.DefaultTimeframeStart }).(pulumi.StringPtrOutput)
}

func (o GetDqlResultOutput) FetchTimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetDqlResult) *int { return v.FetchTimeoutSeconds }).(pulumi.IntPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetDqlResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDqlResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetDqlResultOutput) Locale() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDqlResult) *string { return v.Locale }).(pulumi.StringPtrOutput)
}

func (o GetDqlResultOutput) MaxResultBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetDqlResult) *int { return v.MaxResultBytes }).(pulumi.IntPtrOutput)
}

func (o GetDqlResultOutput) MaxResultRecords() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetDqlResult) *int { return v.MaxResultRecords }).(pulumi.IntPtrOutput)
}

func (o GetDqlResultOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v GetDqlResult) string { return v.Query }).(pulumi.StringOutput)
}

func (o GetDqlResultOutput) Records() pulumi.StringOutput {
	return o.ApplyT(func(v GetDqlResult) string { return v.Records }).(pulumi.StringOutput)
}

func (o GetDqlResultOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDqlResult) *string { return v.Timezone }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDqlResultOutput{})
}
