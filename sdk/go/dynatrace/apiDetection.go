// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type ApiDetection struct {
	pulumi.CustomResourceState

	// This color will be used to highlight APIs when viewing code level data, such as distributed traces or method hotspots.
	ApiColor pulumi.StringOutput `pulumi:"apiColor"`
	// API name
	ApiName pulumi.StringOutput `pulumi:"apiName"`
	// List of conditions
	Conditions ApiDetectionConditionsPtrOutput `pulumi:"conditions"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringOutput `pulumi:"insertAfter"`
	// Restrict this rule to a specific technology.
	Technology pulumi.StringPtrOutput `pulumi:"technology"`
	// This API defines a third party library
	ThirdPartyApi pulumi.BoolOutput `pulumi:"thirdPartyApi"`
}

// NewApiDetection registers a new resource with the given unique name, arguments, and options.
func NewApiDetection(ctx *pulumi.Context,
	name string, args *ApiDetectionArgs, opts ...pulumi.ResourceOption) (*ApiDetection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiColor == nil {
		return nil, errors.New("invalid value for required argument 'ApiColor'")
	}
	if args.ApiName == nil {
		return nil, errors.New("invalid value for required argument 'ApiName'")
	}
	if args.ThirdPartyApi == nil {
		return nil, errors.New("invalid value for required argument 'ThirdPartyApi'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApiDetection
	err := ctx.RegisterResource("dynatrace:index/apiDetection:ApiDetection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApiDetection gets an existing ApiDetection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApiDetection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApiDetectionState, opts ...pulumi.ResourceOption) (*ApiDetection, error) {
	var resource ApiDetection
	err := ctx.ReadResource("dynatrace:index/apiDetection:ApiDetection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApiDetection resources.
type apiDetectionState struct {
	// This color will be used to highlight APIs when viewing code level data, such as distributed traces or method hotspots.
	ApiColor *string `pulumi:"apiColor"`
	// API name
	ApiName *string `pulumi:"apiName"`
	// List of conditions
	Conditions *ApiDetectionConditions `pulumi:"conditions"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `pulumi:"insertAfter"`
	// Restrict this rule to a specific technology.
	Technology *string `pulumi:"technology"`
	// This API defines a third party library
	ThirdPartyApi *bool `pulumi:"thirdPartyApi"`
}

type ApiDetectionState struct {
	// This color will be used to highlight APIs when viewing code level data, such as distributed traces or method hotspots.
	ApiColor pulumi.StringPtrInput
	// API name
	ApiName pulumi.StringPtrInput
	// List of conditions
	Conditions ApiDetectionConditionsPtrInput
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringPtrInput
	// Restrict this rule to a specific technology.
	Technology pulumi.StringPtrInput
	// This API defines a third party library
	ThirdPartyApi pulumi.BoolPtrInput
}

func (ApiDetectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*apiDetectionState)(nil)).Elem()
}

type apiDetectionArgs struct {
	// This color will be used to highlight APIs when viewing code level data, such as distributed traces or method hotspots.
	ApiColor string `pulumi:"apiColor"`
	// API name
	ApiName string `pulumi:"apiName"`
	// List of conditions
	Conditions *ApiDetectionConditions `pulumi:"conditions"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `pulumi:"insertAfter"`
	// Restrict this rule to a specific technology.
	Technology *string `pulumi:"technology"`
	// This API defines a third party library
	ThirdPartyApi bool `pulumi:"thirdPartyApi"`
}

// The set of arguments for constructing a ApiDetection resource.
type ApiDetectionArgs struct {
	// This color will be used to highlight APIs when viewing code level data, such as distributed traces or method hotspots.
	ApiColor pulumi.StringInput
	// API name
	ApiName pulumi.StringInput
	// List of conditions
	Conditions ApiDetectionConditionsPtrInput
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringPtrInput
	// Restrict this rule to a specific technology.
	Technology pulumi.StringPtrInput
	// This API defines a third party library
	ThirdPartyApi pulumi.BoolInput
}

func (ApiDetectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apiDetectionArgs)(nil)).Elem()
}

type ApiDetectionInput interface {
	pulumi.Input

	ToApiDetectionOutput() ApiDetectionOutput
	ToApiDetectionOutputWithContext(ctx context.Context) ApiDetectionOutput
}

func (*ApiDetection) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiDetection)(nil)).Elem()
}

func (i *ApiDetection) ToApiDetectionOutput() ApiDetectionOutput {
	return i.ToApiDetectionOutputWithContext(context.Background())
}

func (i *ApiDetection) ToApiDetectionOutputWithContext(ctx context.Context) ApiDetectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiDetectionOutput)
}

// ApiDetectionArrayInput is an input type that accepts ApiDetectionArray and ApiDetectionArrayOutput values.
// You can construct a concrete instance of `ApiDetectionArrayInput` via:
//
//	ApiDetectionArray{ ApiDetectionArgs{...} }
type ApiDetectionArrayInput interface {
	pulumi.Input

	ToApiDetectionArrayOutput() ApiDetectionArrayOutput
	ToApiDetectionArrayOutputWithContext(context.Context) ApiDetectionArrayOutput
}

type ApiDetectionArray []ApiDetectionInput

func (ApiDetectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApiDetection)(nil)).Elem()
}

func (i ApiDetectionArray) ToApiDetectionArrayOutput() ApiDetectionArrayOutput {
	return i.ToApiDetectionArrayOutputWithContext(context.Background())
}

func (i ApiDetectionArray) ToApiDetectionArrayOutputWithContext(ctx context.Context) ApiDetectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiDetectionArrayOutput)
}

// ApiDetectionMapInput is an input type that accepts ApiDetectionMap and ApiDetectionMapOutput values.
// You can construct a concrete instance of `ApiDetectionMapInput` via:
//
//	ApiDetectionMap{ "key": ApiDetectionArgs{...} }
type ApiDetectionMapInput interface {
	pulumi.Input

	ToApiDetectionMapOutput() ApiDetectionMapOutput
	ToApiDetectionMapOutputWithContext(context.Context) ApiDetectionMapOutput
}

type ApiDetectionMap map[string]ApiDetectionInput

func (ApiDetectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApiDetection)(nil)).Elem()
}

func (i ApiDetectionMap) ToApiDetectionMapOutput() ApiDetectionMapOutput {
	return i.ToApiDetectionMapOutputWithContext(context.Background())
}

func (i ApiDetectionMap) ToApiDetectionMapOutputWithContext(ctx context.Context) ApiDetectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiDetectionMapOutput)
}

type ApiDetectionOutput struct{ *pulumi.OutputState }

func (ApiDetectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiDetection)(nil)).Elem()
}

func (o ApiDetectionOutput) ToApiDetectionOutput() ApiDetectionOutput {
	return o
}

func (o ApiDetectionOutput) ToApiDetectionOutputWithContext(ctx context.Context) ApiDetectionOutput {
	return o
}

// This color will be used to highlight APIs when viewing code level data, such as distributed traces or method hotspots.
func (o ApiDetectionOutput) ApiColor() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiDetection) pulumi.StringOutput { return v.ApiColor }).(pulumi.StringOutput)
}

// API name
func (o ApiDetectionOutput) ApiName() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiDetection) pulumi.StringOutput { return v.ApiName }).(pulumi.StringOutput)
}

// List of conditions
func (o ApiDetectionOutput) Conditions() ApiDetectionConditionsPtrOutput {
	return o.ApplyT(func(v *ApiDetection) ApiDetectionConditionsPtrOutput { return v.Conditions }).(ApiDetectionConditionsPtrOutput)
}

// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
func (o ApiDetectionOutput) InsertAfter() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiDetection) pulumi.StringOutput { return v.InsertAfter }).(pulumi.StringOutput)
}

// Restrict this rule to a specific technology.
func (o ApiDetectionOutput) Technology() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiDetection) pulumi.StringPtrOutput { return v.Technology }).(pulumi.StringPtrOutput)
}

// This API defines a third party library
func (o ApiDetectionOutput) ThirdPartyApi() pulumi.BoolOutput {
	return o.ApplyT(func(v *ApiDetection) pulumi.BoolOutput { return v.ThirdPartyApi }).(pulumi.BoolOutput)
}

type ApiDetectionArrayOutput struct{ *pulumi.OutputState }

func (ApiDetectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApiDetection)(nil)).Elem()
}

func (o ApiDetectionArrayOutput) ToApiDetectionArrayOutput() ApiDetectionArrayOutput {
	return o
}

func (o ApiDetectionArrayOutput) ToApiDetectionArrayOutputWithContext(ctx context.Context) ApiDetectionArrayOutput {
	return o
}

func (o ApiDetectionArrayOutput) Index(i pulumi.IntInput) ApiDetectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApiDetection {
		return vs[0].([]*ApiDetection)[vs[1].(int)]
	}).(ApiDetectionOutput)
}

type ApiDetectionMapOutput struct{ *pulumi.OutputState }

func (ApiDetectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApiDetection)(nil)).Elem()
}

func (o ApiDetectionMapOutput) ToApiDetectionMapOutput() ApiDetectionMapOutput {
	return o
}

func (o ApiDetectionMapOutput) ToApiDetectionMapOutputWithContext(ctx context.Context) ApiDetectionMapOutput {
	return o
}

func (o ApiDetectionMapOutput) MapIndex(k pulumi.StringInput) ApiDetectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApiDetection {
		return vs[0].(map[string]*ApiDetection)[vs[1].(string)]
	}).(ApiDetectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApiDetectionInput)(nil)).Elem(), &ApiDetection{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiDetectionArrayInput)(nil)).Elem(), ApiDetectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiDetectionMapInput)(nil)).Elem(), ApiDetectionMap{})
	pulumi.RegisterOutputType(ApiDetectionOutput{})
	pulumi.RegisterOutputType(ApiDetectionArrayOutput{})
	pulumi.RegisterOutputType(ApiDetectionMapOutput{})
}
