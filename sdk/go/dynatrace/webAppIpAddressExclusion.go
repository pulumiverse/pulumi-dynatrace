// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

// > Configuration overlaps with dynatrace_web_application.
//
// > This resource requires the API token scopes **Read settings** (`settings.read`) and **Write settings** (`settings.write`)
//
// ## Dynatrace Documentation
//
// - Exclude IP addresses, browsers, bots, and spiders from monitoring for web applications - https://docs.dynatrace.com/docs/shortlink/rum-exclude-bots
//
// - Settings API - https://www.dynatrace.com/support/help/dynatrace-api/environment-api/settings (schemaId: `builtin:rum.web.ipaddress-exclusion`)
//
// ## Resource Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dynatrace.NewWebAppIpAddressExclusion(ctx, "#name#", &dynatrace.WebAppIpAddressExclusionArgs{
//				ApplicationId:             pulumi.String("APPLICATION-1234567890000000"),
//				IpAddressExclusionInclude: pulumi.Bool(false),
//				IpExclusionList: &dynatrace.WebAppIpAddressExclusionIpExclusionListArgs{
//					IpExclusions: dynatrace.WebAppIpAddressExclusionIpExclusionListIpExclusionArray{
//						&dynatrace.WebAppIpAddressExclusionIpExclusionListIpExclusionArgs{
//							Ip: pulumi.String("192.168.1.5"),
//						},
//						&dynatrace.WebAppIpAddressExclusionIpExclusionListIpExclusionArgs{
//							Ip:   pulumi.String("10.0.0.1"),
//							IpTo: pulumi.String("10.0.0.5"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type WebAppIpAddressExclusion struct {
	pulumi.CustomResourceState

	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ApplicationId pulumi.StringOutput `pulumi:"applicationId"`
	// These are the only IP addresses that should be monitored
	IpAddressExclusionInclude pulumi.BoolOutput `pulumi:"ipAddressExclusionInclude"`
	// **Examples:**
	//
	//    - 84.112.10.5
	//    - fe80::10a1:c6b2:5f68:785d
	IpExclusionList WebAppIpAddressExclusionIpExclusionListPtrOutput `pulumi:"ipExclusionList"`
}

// NewWebAppIpAddressExclusion registers a new resource with the given unique name, arguments, and options.
func NewWebAppIpAddressExclusion(ctx *pulumi.Context,
	name string, args *WebAppIpAddressExclusionArgs, opts ...pulumi.ResourceOption) (*WebAppIpAddressExclusion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationId'")
	}
	if args.IpAddressExclusionInclude == nil {
		return nil, errors.New("invalid value for required argument 'IpAddressExclusionInclude'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WebAppIpAddressExclusion
	err := ctx.RegisterResource("dynatrace:index/webAppIpAddressExclusion:WebAppIpAddressExclusion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebAppIpAddressExclusion gets an existing WebAppIpAddressExclusion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebAppIpAddressExclusion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebAppIpAddressExclusionState, opts ...pulumi.ResourceOption) (*WebAppIpAddressExclusion, error) {
	var resource WebAppIpAddressExclusion
	err := ctx.ReadResource("dynatrace:index/webAppIpAddressExclusion:WebAppIpAddressExclusion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WebAppIpAddressExclusion resources.
type webAppIpAddressExclusionState struct {
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ApplicationId *string `pulumi:"applicationId"`
	// These are the only IP addresses that should be monitored
	IpAddressExclusionInclude *bool `pulumi:"ipAddressExclusionInclude"`
	// **Examples:**
	//
	//    - 84.112.10.5
	//    - fe80::10a1:c6b2:5f68:785d
	IpExclusionList *WebAppIpAddressExclusionIpExclusionList `pulumi:"ipExclusionList"`
}

type WebAppIpAddressExclusionState struct {
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ApplicationId pulumi.StringPtrInput
	// These are the only IP addresses that should be monitored
	IpAddressExclusionInclude pulumi.BoolPtrInput
	// **Examples:**
	//
	//    - 84.112.10.5
	//    - fe80::10a1:c6b2:5f68:785d
	IpExclusionList WebAppIpAddressExclusionIpExclusionListPtrInput
}

func (WebAppIpAddressExclusionState) ElementType() reflect.Type {
	return reflect.TypeOf((*webAppIpAddressExclusionState)(nil)).Elem()
}

type webAppIpAddressExclusionArgs struct {
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ApplicationId string `pulumi:"applicationId"`
	// These are the only IP addresses that should be monitored
	IpAddressExclusionInclude bool `pulumi:"ipAddressExclusionInclude"`
	// **Examples:**
	//
	//    - 84.112.10.5
	//    - fe80::10a1:c6b2:5f68:785d
	IpExclusionList *WebAppIpAddressExclusionIpExclusionList `pulumi:"ipExclusionList"`
}

// The set of arguments for constructing a WebAppIpAddressExclusion resource.
type WebAppIpAddressExclusionArgs struct {
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ApplicationId pulumi.StringInput
	// These are the only IP addresses that should be monitored
	IpAddressExclusionInclude pulumi.BoolInput
	// **Examples:**
	//
	//    - 84.112.10.5
	//    - fe80::10a1:c6b2:5f68:785d
	IpExclusionList WebAppIpAddressExclusionIpExclusionListPtrInput
}

func (WebAppIpAddressExclusionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webAppIpAddressExclusionArgs)(nil)).Elem()
}

type WebAppIpAddressExclusionInput interface {
	pulumi.Input

	ToWebAppIpAddressExclusionOutput() WebAppIpAddressExclusionOutput
	ToWebAppIpAddressExclusionOutputWithContext(ctx context.Context) WebAppIpAddressExclusionOutput
}

func (*WebAppIpAddressExclusion) ElementType() reflect.Type {
	return reflect.TypeOf((**WebAppIpAddressExclusion)(nil)).Elem()
}

func (i *WebAppIpAddressExclusion) ToWebAppIpAddressExclusionOutput() WebAppIpAddressExclusionOutput {
	return i.ToWebAppIpAddressExclusionOutputWithContext(context.Background())
}

func (i *WebAppIpAddressExclusion) ToWebAppIpAddressExclusionOutputWithContext(ctx context.Context) WebAppIpAddressExclusionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAppIpAddressExclusionOutput)
}

// WebAppIpAddressExclusionArrayInput is an input type that accepts WebAppIpAddressExclusionArray and WebAppIpAddressExclusionArrayOutput values.
// You can construct a concrete instance of `WebAppIpAddressExclusionArrayInput` via:
//
//	WebAppIpAddressExclusionArray{ WebAppIpAddressExclusionArgs{...} }
type WebAppIpAddressExclusionArrayInput interface {
	pulumi.Input

	ToWebAppIpAddressExclusionArrayOutput() WebAppIpAddressExclusionArrayOutput
	ToWebAppIpAddressExclusionArrayOutputWithContext(context.Context) WebAppIpAddressExclusionArrayOutput
}

type WebAppIpAddressExclusionArray []WebAppIpAddressExclusionInput

func (WebAppIpAddressExclusionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebAppIpAddressExclusion)(nil)).Elem()
}

func (i WebAppIpAddressExclusionArray) ToWebAppIpAddressExclusionArrayOutput() WebAppIpAddressExclusionArrayOutput {
	return i.ToWebAppIpAddressExclusionArrayOutputWithContext(context.Background())
}

func (i WebAppIpAddressExclusionArray) ToWebAppIpAddressExclusionArrayOutputWithContext(ctx context.Context) WebAppIpAddressExclusionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAppIpAddressExclusionArrayOutput)
}

// WebAppIpAddressExclusionMapInput is an input type that accepts WebAppIpAddressExclusionMap and WebAppIpAddressExclusionMapOutput values.
// You can construct a concrete instance of `WebAppIpAddressExclusionMapInput` via:
//
//	WebAppIpAddressExclusionMap{ "key": WebAppIpAddressExclusionArgs{...} }
type WebAppIpAddressExclusionMapInput interface {
	pulumi.Input

	ToWebAppIpAddressExclusionMapOutput() WebAppIpAddressExclusionMapOutput
	ToWebAppIpAddressExclusionMapOutputWithContext(context.Context) WebAppIpAddressExclusionMapOutput
}

type WebAppIpAddressExclusionMap map[string]WebAppIpAddressExclusionInput

func (WebAppIpAddressExclusionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebAppIpAddressExclusion)(nil)).Elem()
}

func (i WebAppIpAddressExclusionMap) ToWebAppIpAddressExclusionMapOutput() WebAppIpAddressExclusionMapOutput {
	return i.ToWebAppIpAddressExclusionMapOutputWithContext(context.Background())
}

func (i WebAppIpAddressExclusionMap) ToWebAppIpAddressExclusionMapOutputWithContext(ctx context.Context) WebAppIpAddressExclusionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAppIpAddressExclusionMapOutput)
}

type WebAppIpAddressExclusionOutput struct{ *pulumi.OutputState }

func (WebAppIpAddressExclusionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebAppIpAddressExclusion)(nil)).Elem()
}

func (o WebAppIpAddressExclusionOutput) ToWebAppIpAddressExclusionOutput() WebAppIpAddressExclusionOutput {
	return o
}

func (o WebAppIpAddressExclusionOutput) ToWebAppIpAddressExclusionOutputWithContext(ctx context.Context) WebAppIpAddressExclusionOutput {
	return o
}

// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
func (o WebAppIpAddressExclusionOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *WebAppIpAddressExclusion) pulumi.StringOutput { return v.ApplicationId }).(pulumi.StringOutput)
}

// These are the only IP addresses that should be monitored
func (o WebAppIpAddressExclusionOutput) IpAddressExclusionInclude() pulumi.BoolOutput {
	return o.ApplyT(func(v *WebAppIpAddressExclusion) pulumi.BoolOutput { return v.IpAddressExclusionInclude }).(pulumi.BoolOutput)
}

// **Examples:**
//
//   - 84.112.10.5
//   - fe80::10a1:c6b2:5f68:785d
func (o WebAppIpAddressExclusionOutput) IpExclusionList() WebAppIpAddressExclusionIpExclusionListPtrOutput {
	return o.ApplyT(func(v *WebAppIpAddressExclusion) WebAppIpAddressExclusionIpExclusionListPtrOutput {
		return v.IpExclusionList
	}).(WebAppIpAddressExclusionIpExclusionListPtrOutput)
}

type WebAppIpAddressExclusionArrayOutput struct{ *pulumi.OutputState }

func (WebAppIpAddressExclusionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebAppIpAddressExclusion)(nil)).Elem()
}

func (o WebAppIpAddressExclusionArrayOutput) ToWebAppIpAddressExclusionArrayOutput() WebAppIpAddressExclusionArrayOutput {
	return o
}

func (o WebAppIpAddressExclusionArrayOutput) ToWebAppIpAddressExclusionArrayOutputWithContext(ctx context.Context) WebAppIpAddressExclusionArrayOutput {
	return o
}

func (o WebAppIpAddressExclusionArrayOutput) Index(i pulumi.IntInput) WebAppIpAddressExclusionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WebAppIpAddressExclusion {
		return vs[0].([]*WebAppIpAddressExclusion)[vs[1].(int)]
	}).(WebAppIpAddressExclusionOutput)
}

type WebAppIpAddressExclusionMapOutput struct{ *pulumi.OutputState }

func (WebAppIpAddressExclusionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebAppIpAddressExclusion)(nil)).Elem()
}

func (o WebAppIpAddressExclusionMapOutput) ToWebAppIpAddressExclusionMapOutput() WebAppIpAddressExclusionMapOutput {
	return o
}

func (o WebAppIpAddressExclusionMapOutput) ToWebAppIpAddressExclusionMapOutputWithContext(ctx context.Context) WebAppIpAddressExclusionMapOutput {
	return o
}

func (o WebAppIpAddressExclusionMapOutput) MapIndex(k pulumi.StringInput) WebAppIpAddressExclusionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WebAppIpAddressExclusion {
		return vs[0].(map[string]*WebAppIpAddressExclusion)[vs[1].(string)]
	}).(WebAppIpAddressExclusionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WebAppIpAddressExclusionInput)(nil)).Elem(), &WebAppIpAddressExclusion{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebAppIpAddressExclusionArrayInput)(nil)).Elem(), WebAppIpAddressExclusionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebAppIpAddressExclusionMapInput)(nil)).Elem(), WebAppIpAddressExclusionMap{})
	pulumi.RegisterOutputType(WebAppIpAddressExclusionOutput{})
	pulumi.RegisterOutputType(WebAppIpAddressExclusionArrayOutput{})
	pulumi.RegisterOutputType(WebAppIpAddressExclusionMapOutput{})
}
