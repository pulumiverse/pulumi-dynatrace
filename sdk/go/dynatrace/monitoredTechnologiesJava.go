// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type MonitoredTechnologiesJava struct {
	pulumi.CustomResourceState

	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId pulumi.StringPtrOutput `pulumi:"hostId"`
}

// NewMonitoredTechnologiesJava registers a new resource with the given unique name, arguments, and options.
func NewMonitoredTechnologiesJava(ctx *pulumi.Context,
	name string, args *MonitoredTechnologiesJavaArgs, opts ...pulumi.ResourceOption) (*MonitoredTechnologiesJava, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MonitoredTechnologiesJava
	err := ctx.RegisterResource("dynatrace:index/monitoredTechnologiesJava:MonitoredTechnologiesJava", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMonitoredTechnologiesJava gets an existing MonitoredTechnologiesJava resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMonitoredTechnologiesJava(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MonitoredTechnologiesJavaState, opts ...pulumi.ResourceOption) (*MonitoredTechnologiesJava, error) {
	var resource MonitoredTechnologiesJava
	err := ctx.ReadResource("dynatrace:index/monitoredTechnologiesJava:MonitoredTechnologiesJava", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MonitoredTechnologiesJava resources.
type monitoredTechnologiesJavaState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId *string `pulumi:"hostId"`
}

type MonitoredTechnologiesJavaState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId pulumi.StringPtrInput
}

func (MonitoredTechnologiesJavaState) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoredTechnologiesJavaState)(nil)).Elem()
}

type monitoredTechnologiesJavaArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId *string `pulumi:"hostId"`
}

// The set of arguments for constructing a MonitoredTechnologiesJava resource.
type MonitoredTechnologiesJavaArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId pulumi.StringPtrInput
}

func (MonitoredTechnologiesJavaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoredTechnologiesJavaArgs)(nil)).Elem()
}

type MonitoredTechnologiesJavaInput interface {
	pulumi.Input

	ToMonitoredTechnologiesJavaOutput() MonitoredTechnologiesJavaOutput
	ToMonitoredTechnologiesJavaOutputWithContext(ctx context.Context) MonitoredTechnologiesJavaOutput
}

func (*MonitoredTechnologiesJava) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoredTechnologiesJava)(nil)).Elem()
}

func (i *MonitoredTechnologiesJava) ToMonitoredTechnologiesJavaOutput() MonitoredTechnologiesJavaOutput {
	return i.ToMonitoredTechnologiesJavaOutputWithContext(context.Background())
}

func (i *MonitoredTechnologiesJava) ToMonitoredTechnologiesJavaOutputWithContext(ctx context.Context) MonitoredTechnologiesJavaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoredTechnologiesJavaOutput)
}

// MonitoredTechnologiesJavaArrayInput is an input type that accepts MonitoredTechnologiesJavaArray and MonitoredTechnologiesJavaArrayOutput values.
// You can construct a concrete instance of `MonitoredTechnologiesJavaArrayInput` via:
//
//	MonitoredTechnologiesJavaArray{ MonitoredTechnologiesJavaArgs{...} }
type MonitoredTechnologiesJavaArrayInput interface {
	pulumi.Input

	ToMonitoredTechnologiesJavaArrayOutput() MonitoredTechnologiesJavaArrayOutput
	ToMonitoredTechnologiesJavaArrayOutputWithContext(context.Context) MonitoredTechnologiesJavaArrayOutput
}

type MonitoredTechnologiesJavaArray []MonitoredTechnologiesJavaInput

func (MonitoredTechnologiesJavaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MonitoredTechnologiesJava)(nil)).Elem()
}

func (i MonitoredTechnologiesJavaArray) ToMonitoredTechnologiesJavaArrayOutput() MonitoredTechnologiesJavaArrayOutput {
	return i.ToMonitoredTechnologiesJavaArrayOutputWithContext(context.Background())
}

func (i MonitoredTechnologiesJavaArray) ToMonitoredTechnologiesJavaArrayOutputWithContext(ctx context.Context) MonitoredTechnologiesJavaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoredTechnologiesJavaArrayOutput)
}

// MonitoredTechnologiesJavaMapInput is an input type that accepts MonitoredTechnologiesJavaMap and MonitoredTechnologiesJavaMapOutput values.
// You can construct a concrete instance of `MonitoredTechnologiesJavaMapInput` via:
//
//	MonitoredTechnologiesJavaMap{ "key": MonitoredTechnologiesJavaArgs{...} }
type MonitoredTechnologiesJavaMapInput interface {
	pulumi.Input

	ToMonitoredTechnologiesJavaMapOutput() MonitoredTechnologiesJavaMapOutput
	ToMonitoredTechnologiesJavaMapOutputWithContext(context.Context) MonitoredTechnologiesJavaMapOutput
}

type MonitoredTechnologiesJavaMap map[string]MonitoredTechnologiesJavaInput

func (MonitoredTechnologiesJavaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MonitoredTechnologiesJava)(nil)).Elem()
}

func (i MonitoredTechnologiesJavaMap) ToMonitoredTechnologiesJavaMapOutput() MonitoredTechnologiesJavaMapOutput {
	return i.ToMonitoredTechnologiesJavaMapOutputWithContext(context.Background())
}

func (i MonitoredTechnologiesJavaMap) ToMonitoredTechnologiesJavaMapOutputWithContext(ctx context.Context) MonitoredTechnologiesJavaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoredTechnologiesJavaMapOutput)
}

type MonitoredTechnologiesJavaOutput struct{ *pulumi.OutputState }

func (MonitoredTechnologiesJavaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoredTechnologiesJava)(nil)).Elem()
}

func (o MonitoredTechnologiesJavaOutput) ToMonitoredTechnologiesJavaOutput() MonitoredTechnologiesJavaOutput {
	return o
}

func (o MonitoredTechnologiesJavaOutput) ToMonitoredTechnologiesJavaOutputWithContext(ctx context.Context) MonitoredTechnologiesJavaOutput {
	return o
}

// This setting is enabled (`true`) or disabled (`false`)
func (o MonitoredTechnologiesJavaOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *MonitoredTechnologiesJava) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
func (o MonitoredTechnologiesJavaOutput) HostId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitoredTechnologiesJava) pulumi.StringPtrOutput { return v.HostId }).(pulumi.StringPtrOutput)
}

type MonitoredTechnologiesJavaArrayOutput struct{ *pulumi.OutputState }

func (MonitoredTechnologiesJavaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MonitoredTechnologiesJava)(nil)).Elem()
}

func (o MonitoredTechnologiesJavaArrayOutput) ToMonitoredTechnologiesJavaArrayOutput() MonitoredTechnologiesJavaArrayOutput {
	return o
}

func (o MonitoredTechnologiesJavaArrayOutput) ToMonitoredTechnologiesJavaArrayOutputWithContext(ctx context.Context) MonitoredTechnologiesJavaArrayOutput {
	return o
}

func (o MonitoredTechnologiesJavaArrayOutput) Index(i pulumi.IntInput) MonitoredTechnologiesJavaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MonitoredTechnologiesJava {
		return vs[0].([]*MonitoredTechnologiesJava)[vs[1].(int)]
	}).(MonitoredTechnologiesJavaOutput)
}

type MonitoredTechnologiesJavaMapOutput struct{ *pulumi.OutputState }

func (MonitoredTechnologiesJavaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MonitoredTechnologiesJava)(nil)).Elem()
}

func (o MonitoredTechnologiesJavaMapOutput) ToMonitoredTechnologiesJavaMapOutput() MonitoredTechnologiesJavaMapOutput {
	return o
}

func (o MonitoredTechnologiesJavaMapOutput) ToMonitoredTechnologiesJavaMapOutputWithContext(ctx context.Context) MonitoredTechnologiesJavaMapOutput {
	return o
}

func (o MonitoredTechnologiesJavaMapOutput) MapIndex(k pulumi.StringInput) MonitoredTechnologiesJavaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MonitoredTechnologiesJava {
		return vs[0].(map[string]*MonitoredTechnologiesJava)[vs[1].(string)]
	}).(MonitoredTechnologiesJavaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoredTechnologiesJavaInput)(nil)).Elem(), &MonitoredTechnologiesJava{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoredTechnologiesJavaArrayInput)(nil)).Elem(), MonitoredTechnologiesJavaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoredTechnologiesJavaMapInput)(nil)).Elem(), MonitoredTechnologiesJavaMap{})
	pulumi.RegisterOutputType(MonitoredTechnologiesJavaOutput{})
	pulumi.RegisterOutputType(MonitoredTechnologiesJavaArrayOutput{})
	pulumi.RegisterOutputType(MonitoredTechnologiesJavaMapOutput{})
}
