// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type ApiToken struct {
	pulumi.CustomResourceState

	// Token creation date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z')
	CreationDate pulumi.StringOutput `pulumi:"creationDate"`
	// The token is enabled (true) or disabled (false), default disabled (false).
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The expiration date of the token.
	ExpirationDate pulumi.StringPtrOutput `pulumi:"expirationDate"`
	// Token last used date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z')
	LastUsedDate pulumi.StringOutput `pulumi:"lastUsedDate"`
	// Token last used IP address.
	LastUsedIpAddress pulumi.StringOutput `pulumi:"lastUsedIpAddress"`
	// Token last modified date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z').
	ModifiedDate pulumi.StringOutput `pulumi:"modifiedDate"`
	// The name of the token.
	Name pulumi.StringOutput `pulumi:"name"`
	// The owner of the token
	Owner pulumi.StringOutput `pulumi:"owner"`
	// The token is a personal access token (true) or an API token (false).
	PersonalAccessToken pulumi.BoolPtrOutput `pulumi:"personalAccessToken"`
	// A list of the scopes to be assigned to the token.
	Scopes pulumi.StringArrayOutput `pulumi:"scopes"`
	// The secret of the token.
	Token pulumi.StringOutput `pulumi:"token"`
}

// NewApiToken registers a new resource with the given unique name, arguments, and options.
func NewApiToken(ctx *pulumi.Context,
	name string, args *ApiTokenArgs, opts ...pulumi.ResourceOption) (*ApiToken, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Scopes == nil {
		return nil, errors.New("invalid value for required argument 'Scopes'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"token",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApiToken
	err := ctx.RegisterResource("dynatrace:index/apiToken:ApiToken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApiToken gets an existing ApiToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApiToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApiTokenState, opts ...pulumi.ResourceOption) (*ApiToken, error) {
	var resource ApiToken
	err := ctx.ReadResource("dynatrace:index/apiToken:ApiToken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApiToken resources.
type apiTokenState struct {
	// Token creation date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z')
	CreationDate *string `pulumi:"creationDate"`
	// The token is enabled (true) or disabled (false), default disabled (false).
	Enabled *bool `pulumi:"enabled"`
	// The expiration date of the token.
	ExpirationDate *string `pulumi:"expirationDate"`
	// Token last used date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z')
	LastUsedDate *string `pulumi:"lastUsedDate"`
	// Token last used IP address.
	LastUsedIpAddress *string `pulumi:"lastUsedIpAddress"`
	// Token last modified date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z').
	ModifiedDate *string `pulumi:"modifiedDate"`
	// The name of the token.
	Name *string `pulumi:"name"`
	// The owner of the token
	Owner *string `pulumi:"owner"`
	// The token is a personal access token (true) or an API token (false).
	PersonalAccessToken *bool `pulumi:"personalAccessToken"`
	// A list of the scopes to be assigned to the token.
	Scopes []string `pulumi:"scopes"`
	// The secret of the token.
	Token *string `pulumi:"token"`
}

type ApiTokenState struct {
	// Token creation date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z')
	CreationDate pulumi.StringPtrInput
	// The token is enabled (true) or disabled (false), default disabled (false).
	Enabled pulumi.BoolPtrInput
	// The expiration date of the token.
	ExpirationDate pulumi.StringPtrInput
	// Token last used date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z')
	LastUsedDate pulumi.StringPtrInput
	// Token last used IP address.
	LastUsedIpAddress pulumi.StringPtrInput
	// Token last modified date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z').
	ModifiedDate pulumi.StringPtrInput
	// The name of the token.
	Name pulumi.StringPtrInput
	// The owner of the token
	Owner pulumi.StringPtrInput
	// The token is a personal access token (true) or an API token (false).
	PersonalAccessToken pulumi.BoolPtrInput
	// A list of the scopes to be assigned to the token.
	Scopes pulumi.StringArrayInput
	// The secret of the token.
	Token pulumi.StringPtrInput
}

func (ApiTokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*apiTokenState)(nil)).Elem()
}

type apiTokenArgs struct {
	// Token creation date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z')
	CreationDate *string `pulumi:"creationDate"`
	// The token is enabled (true) or disabled (false), default disabled (false).
	Enabled *bool `pulumi:"enabled"`
	// The expiration date of the token.
	ExpirationDate *string `pulumi:"expirationDate"`
	// Token last used date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z')
	LastUsedDate *string `pulumi:"lastUsedDate"`
	// Token last used IP address.
	LastUsedIpAddress *string `pulumi:"lastUsedIpAddress"`
	// Token last modified date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z').
	ModifiedDate *string `pulumi:"modifiedDate"`
	// The name of the token.
	Name *string `pulumi:"name"`
	// The owner of the token
	Owner *string `pulumi:"owner"`
	// The token is a personal access token (true) or an API token (false).
	PersonalAccessToken *bool `pulumi:"personalAccessToken"`
	// A list of the scopes to be assigned to the token.
	Scopes []string `pulumi:"scopes"`
}

// The set of arguments for constructing a ApiToken resource.
type ApiTokenArgs struct {
	// Token creation date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z')
	CreationDate pulumi.StringPtrInput
	// The token is enabled (true) or disabled (false), default disabled (false).
	Enabled pulumi.BoolPtrInput
	// The expiration date of the token.
	ExpirationDate pulumi.StringPtrInput
	// Token last used date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z')
	LastUsedDate pulumi.StringPtrInput
	// Token last used IP address.
	LastUsedIpAddress pulumi.StringPtrInput
	// Token last modified date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z').
	ModifiedDate pulumi.StringPtrInput
	// The name of the token.
	Name pulumi.StringPtrInput
	// The owner of the token
	Owner pulumi.StringPtrInput
	// The token is a personal access token (true) or an API token (false).
	PersonalAccessToken pulumi.BoolPtrInput
	// A list of the scopes to be assigned to the token.
	Scopes pulumi.StringArrayInput
}

func (ApiTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apiTokenArgs)(nil)).Elem()
}

type ApiTokenInput interface {
	pulumi.Input

	ToApiTokenOutput() ApiTokenOutput
	ToApiTokenOutputWithContext(ctx context.Context) ApiTokenOutput
}

func (*ApiToken) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiToken)(nil)).Elem()
}

func (i *ApiToken) ToApiTokenOutput() ApiTokenOutput {
	return i.ToApiTokenOutputWithContext(context.Background())
}

func (i *ApiToken) ToApiTokenOutputWithContext(ctx context.Context) ApiTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiTokenOutput)
}

// ApiTokenArrayInput is an input type that accepts ApiTokenArray and ApiTokenArrayOutput values.
// You can construct a concrete instance of `ApiTokenArrayInput` via:
//
//	ApiTokenArray{ ApiTokenArgs{...} }
type ApiTokenArrayInput interface {
	pulumi.Input

	ToApiTokenArrayOutput() ApiTokenArrayOutput
	ToApiTokenArrayOutputWithContext(context.Context) ApiTokenArrayOutput
}

type ApiTokenArray []ApiTokenInput

func (ApiTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApiToken)(nil)).Elem()
}

func (i ApiTokenArray) ToApiTokenArrayOutput() ApiTokenArrayOutput {
	return i.ToApiTokenArrayOutputWithContext(context.Background())
}

func (i ApiTokenArray) ToApiTokenArrayOutputWithContext(ctx context.Context) ApiTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiTokenArrayOutput)
}

// ApiTokenMapInput is an input type that accepts ApiTokenMap and ApiTokenMapOutput values.
// You can construct a concrete instance of `ApiTokenMapInput` via:
//
//	ApiTokenMap{ "key": ApiTokenArgs{...} }
type ApiTokenMapInput interface {
	pulumi.Input

	ToApiTokenMapOutput() ApiTokenMapOutput
	ToApiTokenMapOutputWithContext(context.Context) ApiTokenMapOutput
}

type ApiTokenMap map[string]ApiTokenInput

func (ApiTokenMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApiToken)(nil)).Elem()
}

func (i ApiTokenMap) ToApiTokenMapOutput() ApiTokenMapOutput {
	return i.ToApiTokenMapOutputWithContext(context.Background())
}

func (i ApiTokenMap) ToApiTokenMapOutputWithContext(ctx context.Context) ApiTokenMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiTokenMapOutput)
}

type ApiTokenOutput struct{ *pulumi.OutputState }

func (ApiTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiToken)(nil)).Elem()
}

func (o ApiTokenOutput) ToApiTokenOutput() ApiTokenOutput {
	return o
}

func (o ApiTokenOutput) ToApiTokenOutputWithContext(ctx context.Context) ApiTokenOutput {
	return o
}

// Token creation date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z')
func (o ApiTokenOutput) CreationDate() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiToken) pulumi.StringOutput { return v.CreationDate }).(pulumi.StringOutput)
}

// The token is enabled (true) or disabled (false), default disabled (false).
func (o ApiTokenOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApiToken) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The expiration date of the token.
func (o ApiTokenOutput) ExpirationDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiToken) pulumi.StringPtrOutput { return v.ExpirationDate }).(pulumi.StringPtrOutput)
}

// Token last used date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z')
func (o ApiTokenOutput) LastUsedDate() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiToken) pulumi.StringOutput { return v.LastUsedDate }).(pulumi.StringOutput)
}

// Token last used IP address.
func (o ApiTokenOutput) LastUsedIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiToken) pulumi.StringOutput { return v.LastUsedIpAddress }).(pulumi.StringOutput)
}

// Token last modified date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z').
func (o ApiTokenOutput) ModifiedDate() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiToken) pulumi.StringOutput { return v.ModifiedDate }).(pulumi.StringOutput)
}

// The name of the token.
func (o ApiTokenOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiToken) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The owner of the token
func (o ApiTokenOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiToken) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// The token is a personal access token (true) or an API token (false).
func (o ApiTokenOutput) PersonalAccessToken() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApiToken) pulumi.BoolPtrOutput { return v.PersonalAccessToken }).(pulumi.BoolPtrOutput)
}

// A list of the scopes to be assigned to the token.
func (o ApiTokenOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApiToken) pulumi.StringArrayOutput { return v.Scopes }).(pulumi.StringArrayOutput)
}

// The secret of the token.
func (o ApiTokenOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiToken) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

type ApiTokenArrayOutput struct{ *pulumi.OutputState }

func (ApiTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApiToken)(nil)).Elem()
}

func (o ApiTokenArrayOutput) ToApiTokenArrayOutput() ApiTokenArrayOutput {
	return o
}

func (o ApiTokenArrayOutput) ToApiTokenArrayOutputWithContext(ctx context.Context) ApiTokenArrayOutput {
	return o
}

func (o ApiTokenArrayOutput) Index(i pulumi.IntInput) ApiTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApiToken {
		return vs[0].([]*ApiToken)[vs[1].(int)]
	}).(ApiTokenOutput)
}

type ApiTokenMapOutput struct{ *pulumi.OutputState }

func (ApiTokenMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApiToken)(nil)).Elem()
}

func (o ApiTokenMapOutput) ToApiTokenMapOutput() ApiTokenMapOutput {
	return o
}

func (o ApiTokenMapOutput) ToApiTokenMapOutputWithContext(ctx context.Context) ApiTokenMapOutput {
	return o
}

func (o ApiTokenMapOutput) MapIndex(k pulumi.StringInput) ApiTokenOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApiToken {
		return vs[0].(map[string]*ApiToken)[vs[1].(string)]
	}).(ApiTokenOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApiTokenInput)(nil)).Elem(), &ApiToken{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiTokenArrayInput)(nil)).Elem(), ApiTokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiTokenMapInput)(nil)).Elem(), ApiTokenMap{})
	pulumi.RegisterOutputType(ApiTokenOutput{})
	pulumi.RegisterOutputType(ApiTokenArrayOutput{})
	pulumi.RegisterOutputType(ApiTokenMapOutput{})
}
