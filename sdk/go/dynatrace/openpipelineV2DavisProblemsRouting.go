// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OpenpipelineV2DavisProblemsRouting struct {
	pulumi.CustomResourceState

	// Routing for pipelines
	RoutingEntries OpenpipelineV2DavisProblemsRoutingRoutingEntriesPtrOutput `pulumi:"routingEntries"`
}

// NewOpenpipelineV2DavisProblemsRouting registers a new resource with the given unique name, arguments, and options.
func NewOpenpipelineV2DavisProblemsRouting(ctx *pulumi.Context,
	name string, args *OpenpipelineV2DavisProblemsRoutingArgs, opts ...pulumi.ResourceOption) (*OpenpipelineV2DavisProblemsRouting, error) {
	if args == nil {
		args = &OpenpipelineV2DavisProblemsRoutingArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenpipelineV2DavisProblemsRouting
	err := ctx.RegisterResource("dynatrace:index/openpipelineV2DavisProblemsRouting:OpenpipelineV2DavisProblemsRouting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenpipelineV2DavisProblemsRouting gets an existing OpenpipelineV2DavisProblemsRouting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenpipelineV2DavisProblemsRouting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenpipelineV2DavisProblemsRoutingState, opts ...pulumi.ResourceOption) (*OpenpipelineV2DavisProblemsRouting, error) {
	var resource OpenpipelineV2DavisProblemsRouting
	err := ctx.ReadResource("dynatrace:index/openpipelineV2DavisProblemsRouting:OpenpipelineV2DavisProblemsRouting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenpipelineV2DavisProblemsRouting resources.
type openpipelineV2DavisProblemsRoutingState struct {
	// Routing for pipelines
	RoutingEntries *OpenpipelineV2DavisProblemsRoutingRoutingEntries `pulumi:"routingEntries"`
}

type OpenpipelineV2DavisProblemsRoutingState struct {
	// Routing for pipelines
	RoutingEntries OpenpipelineV2DavisProblemsRoutingRoutingEntriesPtrInput
}

func (OpenpipelineV2DavisProblemsRoutingState) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2DavisProblemsRoutingState)(nil)).Elem()
}

type openpipelineV2DavisProblemsRoutingArgs struct {
	// Routing for pipelines
	RoutingEntries *OpenpipelineV2DavisProblemsRoutingRoutingEntries `pulumi:"routingEntries"`
}

// The set of arguments for constructing a OpenpipelineV2DavisProblemsRouting resource.
type OpenpipelineV2DavisProblemsRoutingArgs struct {
	// Routing for pipelines
	RoutingEntries OpenpipelineV2DavisProblemsRoutingRoutingEntriesPtrInput
}

func (OpenpipelineV2DavisProblemsRoutingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2DavisProblemsRoutingArgs)(nil)).Elem()
}

type OpenpipelineV2DavisProblemsRoutingInput interface {
	pulumi.Input

	ToOpenpipelineV2DavisProblemsRoutingOutput() OpenpipelineV2DavisProblemsRoutingOutput
	ToOpenpipelineV2DavisProblemsRoutingOutputWithContext(ctx context.Context) OpenpipelineV2DavisProblemsRoutingOutput
}

func (*OpenpipelineV2DavisProblemsRouting) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2DavisProblemsRouting)(nil)).Elem()
}

func (i *OpenpipelineV2DavisProblemsRouting) ToOpenpipelineV2DavisProblemsRoutingOutput() OpenpipelineV2DavisProblemsRoutingOutput {
	return i.ToOpenpipelineV2DavisProblemsRoutingOutputWithContext(context.Background())
}

func (i *OpenpipelineV2DavisProblemsRouting) ToOpenpipelineV2DavisProblemsRoutingOutputWithContext(ctx context.Context) OpenpipelineV2DavisProblemsRoutingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2DavisProblemsRoutingOutput)
}

// OpenpipelineV2DavisProblemsRoutingArrayInput is an input type that accepts OpenpipelineV2DavisProblemsRoutingArray and OpenpipelineV2DavisProblemsRoutingArrayOutput values.
// You can construct a concrete instance of `OpenpipelineV2DavisProblemsRoutingArrayInput` via:
//
//	OpenpipelineV2DavisProblemsRoutingArray{ OpenpipelineV2DavisProblemsRoutingArgs{...} }
type OpenpipelineV2DavisProblemsRoutingArrayInput interface {
	pulumi.Input

	ToOpenpipelineV2DavisProblemsRoutingArrayOutput() OpenpipelineV2DavisProblemsRoutingArrayOutput
	ToOpenpipelineV2DavisProblemsRoutingArrayOutputWithContext(context.Context) OpenpipelineV2DavisProblemsRoutingArrayOutput
}

type OpenpipelineV2DavisProblemsRoutingArray []OpenpipelineV2DavisProblemsRoutingInput

func (OpenpipelineV2DavisProblemsRoutingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2DavisProblemsRouting)(nil)).Elem()
}

func (i OpenpipelineV2DavisProblemsRoutingArray) ToOpenpipelineV2DavisProblemsRoutingArrayOutput() OpenpipelineV2DavisProblemsRoutingArrayOutput {
	return i.ToOpenpipelineV2DavisProblemsRoutingArrayOutputWithContext(context.Background())
}

func (i OpenpipelineV2DavisProblemsRoutingArray) ToOpenpipelineV2DavisProblemsRoutingArrayOutputWithContext(ctx context.Context) OpenpipelineV2DavisProblemsRoutingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2DavisProblemsRoutingArrayOutput)
}

// OpenpipelineV2DavisProblemsRoutingMapInput is an input type that accepts OpenpipelineV2DavisProblemsRoutingMap and OpenpipelineV2DavisProblemsRoutingMapOutput values.
// You can construct a concrete instance of `OpenpipelineV2DavisProblemsRoutingMapInput` via:
//
//	OpenpipelineV2DavisProblemsRoutingMap{ "key": OpenpipelineV2DavisProblemsRoutingArgs{...} }
type OpenpipelineV2DavisProblemsRoutingMapInput interface {
	pulumi.Input

	ToOpenpipelineV2DavisProblemsRoutingMapOutput() OpenpipelineV2DavisProblemsRoutingMapOutput
	ToOpenpipelineV2DavisProblemsRoutingMapOutputWithContext(context.Context) OpenpipelineV2DavisProblemsRoutingMapOutput
}

type OpenpipelineV2DavisProblemsRoutingMap map[string]OpenpipelineV2DavisProblemsRoutingInput

func (OpenpipelineV2DavisProblemsRoutingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2DavisProblemsRouting)(nil)).Elem()
}

func (i OpenpipelineV2DavisProblemsRoutingMap) ToOpenpipelineV2DavisProblemsRoutingMapOutput() OpenpipelineV2DavisProblemsRoutingMapOutput {
	return i.ToOpenpipelineV2DavisProblemsRoutingMapOutputWithContext(context.Background())
}

func (i OpenpipelineV2DavisProblemsRoutingMap) ToOpenpipelineV2DavisProblemsRoutingMapOutputWithContext(ctx context.Context) OpenpipelineV2DavisProblemsRoutingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2DavisProblemsRoutingMapOutput)
}

type OpenpipelineV2DavisProblemsRoutingOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2DavisProblemsRoutingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2DavisProblemsRouting)(nil)).Elem()
}

func (o OpenpipelineV2DavisProblemsRoutingOutput) ToOpenpipelineV2DavisProblemsRoutingOutput() OpenpipelineV2DavisProblemsRoutingOutput {
	return o
}

func (o OpenpipelineV2DavisProblemsRoutingOutput) ToOpenpipelineV2DavisProblemsRoutingOutputWithContext(ctx context.Context) OpenpipelineV2DavisProblemsRoutingOutput {
	return o
}

// Routing for pipelines
func (o OpenpipelineV2DavisProblemsRoutingOutput) RoutingEntries() OpenpipelineV2DavisProblemsRoutingRoutingEntriesPtrOutput {
	return o.ApplyT(func(v *OpenpipelineV2DavisProblemsRouting) OpenpipelineV2DavisProblemsRoutingRoutingEntriesPtrOutput {
		return v.RoutingEntries
	}).(OpenpipelineV2DavisProblemsRoutingRoutingEntriesPtrOutput)
}

type OpenpipelineV2DavisProblemsRoutingArrayOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2DavisProblemsRoutingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2DavisProblemsRouting)(nil)).Elem()
}

func (o OpenpipelineV2DavisProblemsRoutingArrayOutput) ToOpenpipelineV2DavisProblemsRoutingArrayOutput() OpenpipelineV2DavisProblemsRoutingArrayOutput {
	return o
}

func (o OpenpipelineV2DavisProblemsRoutingArrayOutput) ToOpenpipelineV2DavisProblemsRoutingArrayOutputWithContext(ctx context.Context) OpenpipelineV2DavisProblemsRoutingArrayOutput {
	return o
}

func (o OpenpipelineV2DavisProblemsRoutingArrayOutput) Index(i pulumi.IntInput) OpenpipelineV2DavisProblemsRoutingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenpipelineV2DavisProblemsRouting {
		return vs[0].([]*OpenpipelineV2DavisProblemsRouting)[vs[1].(int)]
	}).(OpenpipelineV2DavisProblemsRoutingOutput)
}

type OpenpipelineV2DavisProblemsRoutingMapOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2DavisProblemsRoutingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2DavisProblemsRouting)(nil)).Elem()
}

func (o OpenpipelineV2DavisProblemsRoutingMapOutput) ToOpenpipelineV2DavisProblemsRoutingMapOutput() OpenpipelineV2DavisProblemsRoutingMapOutput {
	return o
}

func (o OpenpipelineV2DavisProblemsRoutingMapOutput) ToOpenpipelineV2DavisProblemsRoutingMapOutputWithContext(ctx context.Context) OpenpipelineV2DavisProblemsRoutingMapOutput {
	return o
}

func (o OpenpipelineV2DavisProblemsRoutingMapOutput) MapIndex(k pulumi.StringInput) OpenpipelineV2DavisProblemsRoutingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenpipelineV2DavisProblemsRouting {
		return vs[0].(map[string]*OpenpipelineV2DavisProblemsRouting)[vs[1].(string)]
	}).(OpenpipelineV2DavisProblemsRoutingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2DavisProblemsRoutingInput)(nil)).Elem(), &OpenpipelineV2DavisProblemsRouting{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2DavisProblemsRoutingArrayInput)(nil)).Elem(), OpenpipelineV2DavisProblemsRoutingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2DavisProblemsRoutingMapInput)(nil)).Elem(), OpenpipelineV2DavisProblemsRoutingMap{})
	pulumi.RegisterOutputType(OpenpipelineV2DavisProblemsRoutingOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2DavisProblemsRoutingArrayOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2DavisProblemsRoutingMapOutput{})
}
