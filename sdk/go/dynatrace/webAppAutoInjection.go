// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type WebAppAutoInjection struct {
	pulumi.CustomResourceState

	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ApplicationId pulumi.StringOutput `pulumi:"applicationId"`
	// Cache control headers
	CacheControlHeaders WebAppAutoInjectionCacheControlHeadersOutput `pulumi:"cacheControlHeaders"`
	// Real User Monitoring code source
	MonitoringCodeSourceSection WebAppAutoInjectionMonitoringCodeSourceSectionOutput `pulumi:"monitoringCodeSourceSection"`
	// *Code Snippet:* OneAgent injects an inline script that initializes Dynatrace and dynamically downloads the monitoring code into your application. Use when you want to inject the monitoring code in deferred mode.
	SnippetFormat WebAppAutoInjectionSnippetFormatOutput `pulumi:"snippetFormat"`
}

// NewWebAppAutoInjection registers a new resource with the given unique name, arguments, and options.
func NewWebAppAutoInjection(ctx *pulumi.Context,
	name string, args *WebAppAutoInjectionArgs, opts ...pulumi.ResourceOption) (*WebAppAutoInjection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationId'")
	}
	if args.CacheControlHeaders == nil {
		return nil, errors.New("invalid value for required argument 'CacheControlHeaders'")
	}
	if args.MonitoringCodeSourceSection == nil {
		return nil, errors.New("invalid value for required argument 'MonitoringCodeSourceSection'")
	}
	if args.SnippetFormat == nil {
		return nil, errors.New("invalid value for required argument 'SnippetFormat'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WebAppAutoInjection
	err := ctx.RegisterResource("dynatrace:index/webAppAutoInjection:WebAppAutoInjection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebAppAutoInjection gets an existing WebAppAutoInjection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebAppAutoInjection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebAppAutoInjectionState, opts ...pulumi.ResourceOption) (*WebAppAutoInjection, error) {
	var resource WebAppAutoInjection
	err := ctx.ReadResource("dynatrace:index/webAppAutoInjection:WebAppAutoInjection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WebAppAutoInjection resources.
type webAppAutoInjectionState struct {
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ApplicationId *string `pulumi:"applicationId"`
	// Cache control headers
	CacheControlHeaders *WebAppAutoInjectionCacheControlHeaders `pulumi:"cacheControlHeaders"`
	// Real User Monitoring code source
	MonitoringCodeSourceSection *WebAppAutoInjectionMonitoringCodeSourceSection `pulumi:"monitoringCodeSourceSection"`
	// *Code Snippet:* OneAgent injects an inline script that initializes Dynatrace and dynamically downloads the monitoring code into your application. Use when you want to inject the monitoring code in deferred mode.
	SnippetFormat *WebAppAutoInjectionSnippetFormat `pulumi:"snippetFormat"`
}

type WebAppAutoInjectionState struct {
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ApplicationId pulumi.StringPtrInput
	// Cache control headers
	CacheControlHeaders WebAppAutoInjectionCacheControlHeadersPtrInput
	// Real User Monitoring code source
	MonitoringCodeSourceSection WebAppAutoInjectionMonitoringCodeSourceSectionPtrInput
	// *Code Snippet:* OneAgent injects an inline script that initializes Dynatrace and dynamically downloads the monitoring code into your application. Use when you want to inject the monitoring code in deferred mode.
	SnippetFormat WebAppAutoInjectionSnippetFormatPtrInput
}

func (WebAppAutoInjectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*webAppAutoInjectionState)(nil)).Elem()
}

type webAppAutoInjectionArgs struct {
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ApplicationId string `pulumi:"applicationId"`
	// Cache control headers
	CacheControlHeaders WebAppAutoInjectionCacheControlHeaders `pulumi:"cacheControlHeaders"`
	// Real User Monitoring code source
	MonitoringCodeSourceSection WebAppAutoInjectionMonitoringCodeSourceSection `pulumi:"monitoringCodeSourceSection"`
	// *Code Snippet:* OneAgent injects an inline script that initializes Dynatrace and dynamically downloads the monitoring code into your application. Use when you want to inject the monitoring code in deferred mode.
	SnippetFormat WebAppAutoInjectionSnippetFormat `pulumi:"snippetFormat"`
}

// The set of arguments for constructing a WebAppAutoInjection resource.
type WebAppAutoInjectionArgs struct {
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ApplicationId pulumi.StringInput
	// Cache control headers
	CacheControlHeaders WebAppAutoInjectionCacheControlHeadersInput
	// Real User Monitoring code source
	MonitoringCodeSourceSection WebAppAutoInjectionMonitoringCodeSourceSectionInput
	// *Code Snippet:* OneAgent injects an inline script that initializes Dynatrace and dynamically downloads the monitoring code into your application. Use when you want to inject the monitoring code in deferred mode.
	SnippetFormat WebAppAutoInjectionSnippetFormatInput
}

func (WebAppAutoInjectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webAppAutoInjectionArgs)(nil)).Elem()
}

type WebAppAutoInjectionInput interface {
	pulumi.Input

	ToWebAppAutoInjectionOutput() WebAppAutoInjectionOutput
	ToWebAppAutoInjectionOutputWithContext(ctx context.Context) WebAppAutoInjectionOutput
}

func (*WebAppAutoInjection) ElementType() reflect.Type {
	return reflect.TypeOf((**WebAppAutoInjection)(nil)).Elem()
}

func (i *WebAppAutoInjection) ToWebAppAutoInjectionOutput() WebAppAutoInjectionOutput {
	return i.ToWebAppAutoInjectionOutputWithContext(context.Background())
}

func (i *WebAppAutoInjection) ToWebAppAutoInjectionOutputWithContext(ctx context.Context) WebAppAutoInjectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAppAutoInjectionOutput)
}

// WebAppAutoInjectionArrayInput is an input type that accepts WebAppAutoInjectionArray and WebAppAutoInjectionArrayOutput values.
// You can construct a concrete instance of `WebAppAutoInjectionArrayInput` via:
//
//	WebAppAutoInjectionArray{ WebAppAutoInjectionArgs{...} }
type WebAppAutoInjectionArrayInput interface {
	pulumi.Input

	ToWebAppAutoInjectionArrayOutput() WebAppAutoInjectionArrayOutput
	ToWebAppAutoInjectionArrayOutputWithContext(context.Context) WebAppAutoInjectionArrayOutput
}

type WebAppAutoInjectionArray []WebAppAutoInjectionInput

func (WebAppAutoInjectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebAppAutoInjection)(nil)).Elem()
}

func (i WebAppAutoInjectionArray) ToWebAppAutoInjectionArrayOutput() WebAppAutoInjectionArrayOutput {
	return i.ToWebAppAutoInjectionArrayOutputWithContext(context.Background())
}

func (i WebAppAutoInjectionArray) ToWebAppAutoInjectionArrayOutputWithContext(ctx context.Context) WebAppAutoInjectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAppAutoInjectionArrayOutput)
}

// WebAppAutoInjectionMapInput is an input type that accepts WebAppAutoInjectionMap and WebAppAutoInjectionMapOutput values.
// You can construct a concrete instance of `WebAppAutoInjectionMapInput` via:
//
//	WebAppAutoInjectionMap{ "key": WebAppAutoInjectionArgs{...} }
type WebAppAutoInjectionMapInput interface {
	pulumi.Input

	ToWebAppAutoInjectionMapOutput() WebAppAutoInjectionMapOutput
	ToWebAppAutoInjectionMapOutputWithContext(context.Context) WebAppAutoInjectionMapOutput
}

type WebAppAutoInjectionMap map[string]WebAppAutoInjectionInput

func (WebAppAutoInjectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebAppAutoInjection)(nil)).Elem()
}

func (i WebAppAutoInjectionMap) ToWebAppAutoInjectionMapOutput() WebAppAutoInjectionMapOutput {
	return i.ToWebAppAutoInjectionMapOutputWithContext(context.Background())
}

func (i WebAppAutoInjectionMap) ToWebAppAutoInjectionMapOutputWithContext(ctx context.Context) WebAppAutoInjectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAppAutoInjectionMapOutput)
}

type WebAppAutoInjectionOutput struct{ *pulumi.OutputState }

func (WebAppAutoInjectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebAppAutoInjection)(nil)).Elem()
}

func (o WebAppAutoInjectionOutput) ToWebAppAutoInjectionOutput() WebAppAutoInjectionOutput {
	return o
}

func (o WebAppAutoInjectionOutput) ToWebAppAutoInjectionOutputWithContext(ctx context.Context) WebAppAutoInjectionOutput {
	return o
}

// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
func (o WebAppAutoInjectionOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *WebAppAutoInjection) pulumi.StringOutput { return v.ApplicationId }).(pulumi.StringOutput)
}

// Cache control headers
func (o WebAppAutoInjectionOutput) CacheControlHeaders() WebAppAutoInjectionCacheControlHeadersOutput {
	return o.ApplyT(func(v *WebAppAutoInjection) WebAppAutoInjectionCacheControlHeadersOutput {
		return v.CacheControlHeaders
	}).(WebAppAutoInjectionCacheControlHeadersOutput)
}

// Real User Monitoring code source
func (o WebAppAutoInjectionOutput) MonitoringCodeSourceSection() WebAppAutoInjectionMonitoringCodeSourceSectionOutput {
	return o.ApplyT(func(v *WebAppAutoInjection) WebAppAutoInjectionMonitoringCodeSourceSectionOutput {
		return v.MonitoringCodeSourceSection
	}).(WebAppAutoInjectionMonitoringCodeSourceSectionOutput)
}

// *Code Snippet:* OneAgent injects an inline script that initializes Dynatrace and dynamically downloads the monitoring code into your application. Use when you want to inject the monitoring code in deferred mode.
func (o WebAppAutoInjectionOutput) SnippetFormat() WebAppAutoInjectionSnippetFormatOutput {
	return o.ApplyT(func(v *WebAppAutoInjection) WebAppAutoInjectionSnippetFormatOutput { return v.SnippetFormat }).(WebAppAutoInjectionSnippetFormatOutput)
}

type WebAppAutoInjectionArrayOutput struct{ *pulumi.OutputState }

func (WebAppAutoInjectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebAppAutoInjection)(nil)).Elem()
}

func (o WebAppAutoInjectionArrayOutput) ToWebAppAutoInjectionArrayOutput() WebAppAutoInjectionArrayOutput {
	return o
}

func (o WebAppAutoInjectionArrayOutput) ToWebAppAutoInjectionArrayOutputWithContext(ctx context.Context) WebAppAutoInjectionArrayOutput {
	return o
}

func (o WebAppAutoInjectionArrayOutput) Index(i pulumi.IntInput) WebAppAutoInjectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WebAppAutoInjection {
		return vs[0].([]*WebAppAutoInjection)[vs[1].(int)]
	}).(WebAppAutoInjectionOutput)
}

type WebAppAutoInjectionMapOutput struct{ *pulumi.OutputState }

func (WebAppAutoInjectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebAppAutoInjection)(nil)).Elem()
}

func (o WebAppAutoInjectionMapOutput) ToWebAppAutoInjectionMapOutput() WebAppAutoInjectionMapOutput {
	return o
}

func (o WebAppAutoInjectionMapOutput) ToWebAppAutoInjectionMapOutputWithContext(ctx context.Context) WebAppAutoInjectionMapOutput {
	return o
}

func (o WebAppAutoInjectionMapOutput) MapIndex(k pulumi.StringInput) WebAppAutoInjectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WebAppAutoInjection {
		return vs[0].(map[string]*WebAppAutoInjection)[vs[1].(string)]
	}).(WebAppAutoInjectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WebAppAutoInjectionInput)(nil)).Elem(), &WebAppAutoInjection{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebAppAutoInjectionArrayInput)(nil)).Elem(), WebAppAutoInjectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebAppAutoInjectionMapInput)(nil)).Elem(), WebAppAutoInjectionMap{})
	pulumi.RegisterOutputType(WebAppAutoInjectionOutput{})
	pulumi.RegisterOutputType(WebAppAutoInjectionArrayOutput{})
	pulumi.RegisterOutputType(WebAppAutoInjectionMapOutput{})
}
