// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type AttackSettings struct {
	pulumi.CustomResourceState

	// Define global incoming attack control
	DefaultAttackHandling AttackSettingsDefaultAttackHandlingOutput `pulumi:"defaultAttackHandling"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
}

// NewAttackSettings registers a new resource with the given unique name, arguments, and options.
func NewAttackSettings(ctx *pulumi.Context,
	name string, args *AttackSettingsArgs, opts ...pulumi.ResourceOption) (*AttackSettings, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultAttackHandling == nil {
		return nil, errors.New("invalid value for required argument 'DefaultAttackHandling'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AttackSettings
	err := ctx.RegisterResource("dynatrace:index/attackSettings:AttackSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAttackSettings gets an existing AttackSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAttackSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AttackSettingsState, opts ...pulumi.ResourceOption) (*AttackSettings, error) {
	var resource AttackSettings
	err := ctx.ReadResource("dynatrace:index/attackSettings:AttackSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AttackSettings resources.
type attackSettingsState struct {
	// Define global incoming attack control
	DefaultAttackHandling *AttackSettingsDefaultAttackHandling `pulumi:"defaultAttackHandling"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
}

type AttackSettingsState struct {
	// Define global incoming attack control
	DefaultAttackHandling AttackSettingsDefaultAttackHandlingPtrInput
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
}

func (AttackSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*attackSettingsState)(nil)).Elem()
}

type attackSettingsArgs struct {
	// Define global incoming attack control
	DefaultAttackHandling AttackSettingsDefaultAttackHandling `pulumi:"defaultAttackHandling"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
}

// The set of arguments for constructing a AttackSettings resource.
type AttackSettingsArgs struct {
	// Define global incoming attack control
	DefaultAttackHandling AttackSettingsDefaultAttackHandlingInput
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
}

func (AttackSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*attackSettingsArgs)(nil)).Elem()
}

type AttackSettingsInput interface {
	pulumi.Input

	ToAttackSettingsOutput() AttackSettingsOutput
	ToAttackSettingsOutputWithContext(ctx context.Context) AttackSettingsOutput
}

func (*AttackSettings) ElementType() reflect.Type {
	return reflect.TypeOf((**AttackSettings)(nil)).Elem()
}

func (i *AttackSettings) ToAttackSettingsOutput() AttackSettingsOutput {
	return i.ToAttackSettingsOutputWithContext(context.Background())
}

func (i *AttackSettings) ToAttackSettingsOutputWithContext(ctx context.Context) AttackSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttackSettingsOutput)
}

// AttackSettingsArrayInput is an input type that accepts AttackSettingsArray and AttackSettingsArrayOutput values.
// You can construct a concrete instance of `AttackSettingsArrayInput` via:
//
//	AttackSettingsArray{ AttackSettingsArgs{...} }
type AttackSettingsArrayInput interface {
	pulumi.Input

	ToAttackSettingsArrayOutput() AttackSettingsArrayOutput
	ToAttackSettingsArrayOutputWithContext(context.Context) AttackSettingsArrayOutput
}

type AttackSettingsArray []AttackSettingsInput

func (AttackSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AttackSettings)(nil)).Elem()
}

func (i AttackSettingsArray) ToAttackSettingsArrayOutput() AttackSettingsArrayOutput {
	return i.ToAttackSettingsArrayOutputWithContext(context.Background())
}

func (i AttackSettingsArray) ToAttackSettingsArrayOutputWithContext(ctx context.Context) AttackSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttackSettingsArrayOutput)
}

// AttackSettingsMapInput is an input type that accepts AttackSettingsMap and AttackSettingsMapOutput values.
// You can construct a concrete instance of `AttackSettingsMapInput` via:
//
//	AttackSettingsMap{ "key": AttackSettingsArgs{...} }
type AttackSettingsMapInput interface {
	pulumi.Input

	ToAttackSettingsMapOutput() AttackSettingsMapOutput
	ToAttackSettingsMapOutputWithContext(context.Context) AttackSettingsMapOutput
}

type AttackSettingsMap map[string]AttackSettingsInput

func (AttackSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AttackSettings)(nil)).Elem()
}

func (i AttackSettingsMap) ToAttackSettingsMapOutput() AttackSettingsMapOutput {
	return i.ToAttackSettingsMapOutputWithContext(context.Background())
}

func (i AttackSettingsMap) ToAttackSettingsMapOutputWithContext(ctx context.Context) AttackSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttackSettingsMapOutput)
}

type AttackSettingsOutput struct{ *pulumi.OutputState }

func (AttackSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AttackSettings)(nil)).Elem()
}

func (o AttackSettingsOutput) ToAttackSettingsOutput() AttackSettingsOutput {
	return o
}

func (o AttackSettingsOutput) ToAttackSettingsOutputWithContext(ctx context.Context) AttackSettingsOutput {
	return o
}

// Define global incoming attack control
func (o AttackSettingsOutput) DefaultAttackHandling() AttackSettingsDefaultAttackHandlingOutput {
	return o.ApplyT(func(v *AttackSettings) AttackSettingsDefaultAttackHandlingOutput { return v.DefaultAttackHandling }).(AttackSettingsDefaultAttackHandlingOutput)
}

// This setting is enabled (`true`) or disabled (`false`)
func (o AttackSettingsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *AttackSettings) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

type AttackSettingsArrayOutput struct{ *pulumi.OutputState }

func (AttackSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AttackSettings)(nil)).Elem()
}

func (o AttackSettingsArrayOutput) ToAttackSettingsArrayOutput() AttackSettingsArrayOutput {
	return o
}

func (o AttackSettingsArrayOutput) ToAttackSettingsArrayOutputWithContext(ctx context.Context) AttackSettingsArrayOutput {
	return o
}

func (o AttackSettingsArrayOutput) Index(i pulumi.IntInput) AttackSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AttackSettings {
		return vs[0].([]*AttackSettings)[vs[1].(int)]
	}).(AttackSettingsOutput)
}

type AttackSettingsMapOutput struct{ *pulumi.OutputState }

func (AttackSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AttackSettings)(nil)).Elem()
}

func (o AttackSettingsMapOutput) ToAttackSettingsMapOutput() AttackSettingsMapOutput {
	return o
}

func (o AttackSettingsMapOutput) ToAttackSettingsMapOutputWithContext(ctx context.Context) AttackSettingsMapOutput {
	return o
}

func (o AttackSettingsMapOutput) MapIndex(k pulumi.StringInput) AttackSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AttackSettings {
		return vs[0].(map[string]*AttackSettings)[vs[1].(string)]
	}).(AttackSettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AttackSettingsInput)(nil)).Elem(), &AttackSettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttackSettingsArrayInput)(nil)).Elem(), AttackSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttackSettingsMapInput)(nil)).Elem(), AttackSettingsMap{})
	pulumi.RegisterOutputType(AttackSettingsOutput{})
	pulumi.RegisterOutputType(AttackSettingsArrayOutput{})
	pulumi.RegisterOutputType(AttackSettingsMapOutput{})
}
