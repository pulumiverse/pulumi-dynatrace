// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type DashboardsGeneral struct {
	pulumi.CustomResourceState

	// Configure home dashboard for selected user group. The selected preset dashboard will be loaded as default landing page for this environment.
	DefaultDashboardList DashboardsGeneralDefaultDashboardListPtrOutput `pulumi:"defaultDashboardList"`
	// Allow users to grant anonymous access to dashboards. No sign-in will be required to view those dashboards read-only.
	EnablePublicSharing pulumi.BoolOutput `pulumi:"enablePublicSharing"`
}

// NewDashboardsGeneral registers a new resource with the given unique name, arguments, and options.
func NewDashboardsGeneral(ctx *pulumi.Context,
	name string, args *DashboardsGeneralArgs, opts ...pulumi.ResourceOption) (*DashboardsGeneral, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnablePublicSharing == nil {
		return nil, errors.New("invalid value for required argument 'EnablePublicSharing'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DashboardsGeneral
	err := ctx.RegisterResource("dynatrace:index/dashboardsGeneral:DashboardsGeneral", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDashboardsGeneral gets an existing DashboardsGeneral resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDashboardsGeneral(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DashboardsGeneralState, opts ...pulumi.ResourceOption) (*DashboardsGeneral, error) {
	var resource DashboardsGeneral
	err := ctx.ReadResource("dynatrace:index/dashboardsGeneral:DashboardsGeneral", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DashboardsGeneral resources.
type dashboardsGeneralState struct {
	// Configure home dashboard for selected user group. The selected preset dashboard will be loaded as default landing page for this environment.
	DefaultDashboardList *DashboardsGeneralDefaultDashboardList `pulumi:"defaultDashboardList"`
	// Allow users to grant anonymous access to dashboards. No sign-in will be required to view those dashboards read-only.
	EnablePublicSharing *bool `pulumi:"enablePublicSharing"`
}

type DashboardsGeneralState struct {
	// Configure home dashboard for selected user group. The selected preset dashboard will be loaded as default landing page for this environment.
	DefaultDashboardList DashboardsGeneralDefaultDashboardListPtrInput
	// Allow users to grant anonymous access to dashboards. No sign-in will be required to view those dashboards read-only.
	EnablePublicSharing pulumi.BoolPtrInput
}

func (DashboardsGeneralState) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardsGeneralState)(nil)).Elem()
}

type dashboardsGeneralArgs struct {
	// Configure home dashboard for selected user group. The selected preset dashboard will be loaded as default landing page for this environment.
	DefaultDashboardList *DashboardsGeneralDefaultDashboardList `pulumi:"defaultDashboardList"`
	// Allow users to grant anonymous access to dashboards. No sign-in will be required to view those dashboards read-only.
	EnablePublicSharing bool `pulumi:"enablePublicSharing"`
}

// The set of arguments for constructing a DashboardsGeneral resource.
type DashboardsGeneralArgs struct {
	// Configure home dashboard for selected user group. The selected preset dashboard will be loaded as default landing page for this environment.
	DefaultDashboardList DashboardsGeneralDefaultDashboardListPtrInput
	// Allow users to grant anonymous access to dashboards. No sign-in will be required to view those dashboards read-only.
	EnablePublicSharing pulumi.BoolInput
}

func (DashboardsGeneralArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardsGeneralArgs)(nil)).Elem()
}

type DashboardsGeneralInput interface {
	pulumi.Input

	ToDashboardsGeneralOutput() DashboardsGeneralOutput
	ToDashboardsGeneralOutputWithContext(ctx context.Context) DashboardsGeneralOutput
}

func (*DashboardsGeneral) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardsGeneral)(nil)).Elem()
}

func (i *DashboardsGeneral) ToDashboardsGeneralOutput() DashboardsGeneralOutput {
	return i.ToDashboardsGeneralOutputWithContext(context.Background())
}

func (i *DashboardsGeneral) ToDashboardsGeneralOutputWithContext(ctx context.Context) DashboardsGeneralOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardsGeneralOutput)
}

// DashboardsGeneralArrayInput is an input type that accepts DashboardsGeneralArray and DashboardsGeneralArrayOutput values.
// You can construct a concrete instance of `DashboardsGeneralArrayInput` via:
//
//	DashboardsGeneralArray{ DashboardsGeneralArgs{...} }
type DashboardsGeneralArrayInput interface {
	pulumi.Input

	ToDashboardsGeneralArrayOutput() DashboardsGeneralArrayOutput
	ToDashboardsGeneralArrayOutputWithContext(context.Context) DashboardsGeneralArrayOutput
}

type DashboardsGeneralArray []DashboardsGeneralInput

func (DashboardsGeneralArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DashboardsGeneral)(nil)).Elem()
}

func (i DashboardsGeneralArray) ToDashboardsGeneralArrayOutput() DashboardsGeneralArrayOutput {
	return i.ToDashboardsGeneralArrayOutputWithContext(context.Background())
}

func (i DashboardsGeneralArray) ToDashboardsGeneralArrayOutputWithContext(ctx context.Context) DashboardsGeneralArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardsGeneralArrayOutput)
}

// DashboardsGeneralMapInput is an input type that accepts DashboardsGeneralMap and DashboardsGeneralMapOutput values.
// You can construct a concrete instance of `DashboardsGeneralMapInput` via:
//
//	DashboardsGeneralMap{ "key": DashboardsGeneralArgs{...} }
type DashboardsGeneralMapInput interface {
	pulumi.Input

	ToDashboardsGeneralMapOutput() DashboardsGeneralMapOutput
	ToDashboardsGeneralMapOutputWithContext(context.Context) DashboardsGeneralMapOutput
}

type DashboardsGeneralMap map[string]DashboardsGeneralInput

func (DashboardsGeneralMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DashboardsGeneral)(nil)).Elem()
}

func (i DashboardsGeneralMap) ToDashboardsGeneralMapOutput() DashboardsGeneralMapOutput {
	return i.ToDashboardsGeneralMapOutputWithContext(context.Background())
}

func (i DashboardsGeneralMap) ToDashboardsGeneralMapOutputWithContext(ctx context.Context) DashboardsGeneralMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardsGeneralMapOutput)
}

type DashboardsGeneralOutput struct{ *pulumi.OutputState }

func (DashboardsGeneralOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardsGeneral)(nil)).Elem()
}

func (o DashboardsGeneralOutput) ToDashboardsGeneralOutput() DashboardsGeneralOutput {
	return o
}

func (o DashboardsGeneralOutput) ToDashboardsGeneralOutputWithContext(ctx context.Context) DashboardsGeneralOutput {
	return o
}

// Configure home dashboard for selected user group. The selected preset dashboard will be loaded as default landing page for this environment.
func (o DashboardsGeneralOutput) DefaultDashboardList() DashboardsGeneralDefaultDashboardListPtrOutput {
	return o.ApplyT(func(v *DashboardsGeneral) DashboardsGeneralDefaultDashboardListPtrOutput {
		return v.DefaultDashboardList
	}).(DashboardsGeneralDefaultDashboardListPtrOutput)
}

// Allow users to grant anonymous access to dashboards. No sign-in will be required to view those dashboards read-only.
func (o DashboardsGeneralOutput) EnablePublicSharing() pulumi.BoolOutput {
	return o.ApplyT(func(v *DashboardsGeneral) pulumi.BoolOutput { return v.EnablePublicSharing }).(pulumi.BoolOutput)
}

type DashboardsGeneralArrayOutput struct{ *pulumi.OutputState }

func (DashboardsGeneralArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DashboardsGeneral)(nil)).Elem()
}

func (o DashboardsGeneralArrayOutput) ToDashboardsGeneralArrayOutput() DashboardsGeneralArrayOutput {
	return o
}

func (o DashboardsGeneralArrayOutput) ToDashboardsGeneralArrayOutputWithContext(ctx context.Context) DashboardsGeneralArrayOutput {
	return o
}

func (o DashboardsGeneralArrayOutput) Index(i pulumi.IntInput) DashboardsGeneralOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DashboardsGeneral {
		return vs[0].([]*DashboardsGeneral)[vs[1].(int)]
	}).(DashboardsGeneralOutput)
}

type DashboardsGeneralMapOutput struct{ *pulumi.OutputState }

func (DashboardsGeneralMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DashboardsGeneral)(nil)).Elem()
}

func (o DashboardsGeneralMapOutput) ToDashboardsGeneralMapOutput() DashboardsGeneralMapOutput {
	return o
}

func (o DashboardsGeneralMapOutput) ToDashboardsGeneralMapOutputWithContext(ctx context.Context) DashboardsGeneralMapOutput {
	return o
}

func (o DashboardsGeneralMapOutput) MapIndex(k pulumi.StringInput) DashboardsGeneralOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DashboardsGeneral {
		return vs[0].(map[string]*DashboardsGeneral)[vs[1].(string)]
	}).(DashboardsGeneralOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardsGeneralInput)(nil)).Elem(), &DashboardsGeneral{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardsGeneralArrayInput)(nil)).Elem(), DashboardsGeneralArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardsGeneralMapInput)(nil)).Elem(), DashboardsGeneralMap{})
	pulumi.RegisterOutputType(DashboardsGeneralOutput{})
	pulumi.RegisterOutputType(DashboardsGeneralArrayOutput{})
	pulumi.RegisterOutputType(DashboardsGeneralMapOutput{})
}
