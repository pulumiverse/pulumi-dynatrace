// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OpenpipelineLogs struct {
	pulumi.CustomResourceState

	// List of all ingest sources of the configuration
	Endpoints OpenpipelineLogsEndpointsPtrOutput `pulumi:"endpoints"`
	// List of all pipelines of the configuration
	Pipelines OpenpipelineLogsPipelinesPtrOutput `pulumi:"pipelines"`
	// Dynamic routing definition
	Routing OpenpipelineLogsRoutingPtrOutput `pulumi:"routing"`
}

// NewOpenpipelineLogs registers a new resource with the given unique name, arguments, and options.
func NewOpenpipelineLogs(ctx *pulumi.Context,
	name string, args *OpenpipelineLogsArgs, opts ...pulumi.ResourceOption) (*OpenpipelineLogs, error) {
	if args == nil {
		args = &OpenpipelineLogsArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenpipelineLogs
	err := ctx.RegisterResource("dynatrace:index/openpipelineLogs:OpenpipelineLogs", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenpipelineLogs gets an existing OpenpipelineLogs resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenpipelineLogs(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenpipelineLogsState, opts ...pulumi.ResourceOption) (*OpenpipelineLogs, error) {
	var resource OpenpipelineLogs
	err := ctx.ReadResource("dynatrace:index/openpipelineLogs:OpenpipelineLogs", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenpipelineLogs resources.
type openpipelineLogsState struct {
	// List of all ingest sources of the configuration
	Endpoints *OpenpipelineLogsEndpoints `pulumi:"endpoints"`
	// List of all pipelines of the configuration
	Pipelines *OpenpipelineLogsPipelines `pulumi:"pipelines"`
	// Dynamic routing definition
	Routing *OpenpipelineLogsRouting `pulumi:"routing"`
}

type OpenpipelineLogsState struct {
	// List of all ingest sources of the configuration
	Endpoints OpenpipelineLogsEndpointsPtrInput
	// List of all pipelines of the configuration
	Pipelines OpenpipelineLogsPipelinesPtrInput
	// Dynamic routing definition
	Routing OpenpipelineLogsRoutingPtrInput
}

func (OpenpipelineLogsState) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineLogsState)(nil)).Elem()
}

type openpipelineLogsArgs struct {
	// List of all ingest sources of the configuration
	Endpoints *OpenpipelineLogsEndpoints `pulumi:"endpoints"`
	// List of all pipelines of the configuration
	Pipelines *OpenpipelineLogsPipelines `pulumi:"pipelines"`
	// Dynamic routing definition
	Routing *OpenpipelineLogsRouting `pulumi:"routing"`
}

// The set of arguments for constructing a OpenpipelineLogs resource.
type OpenpipelineLogsArgs struct {
	// List of all ingest sources of the configuration
	Endpoints OpenpipelineLogsEndpointsPtrInput
	// List of all pipelines of the configuration
	Pipelines OpenpipelineLogsPipelinesPtrInput
	// Dynamic routing definition
	Routing OpenpipelineLogsRoutingPtrInput
}

func (OpenpipelineLogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineLogsArgs)(nil)).Elem()
}

type OpenpipelineLogsInput interface {
	pulumi.Input

	ToOpenpipelineLogsOutput() OpenpipelineLogsOutput
	ToOpenpipelineLogsOutputWithContext(ctx context.Context) OpenpipelineLogsOutput
}

func (*OpenpipelineLogs) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineLogs)(nil)).Elem()
}

func (i *OpenpipelineLogs) ToOpenpipelineLogsOutput() OpenpipelineLogsOutput {
	return i.ToOpenpipelineLogsOutputWithContext(context.Background())
}

func (i *OpenpipelineLogs) ToOpenpipelineLogsOutputWithContext(ctx context.Context) OpenpipelineLogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineLogsOutput)
}

// OpenpipelineLogsArrayInput is an input type that accepts OpenpipelineLogsArray and OpenpipelineLogsArrayOutput values.
// You can construct a concrete instance of `OpenpipelineLogsArrayInput` via:
//
//	OpenpipelineLogsArray{ OpenpipelineLogsArgs{...} }
type OpenpipelineLogsArrayInput interface {
	pulumi.Input

	ToOpenpipelineLogsArrayOutput() OpenpipelineLogsArrayOutput
	ToOpenpipelineLogsArrayOutputWithContext(context.Context) OpenpipelineLogsArrayOutput
}

type OpenpipelineLogsArray []OpenpipelineLogsInput

func (OpenpipelineLogsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineLogs)(nil)).Elem()
}

func (i OpenpipelineLogsArray) ToOpenpipelineLogsArrayOutput() OpenpipelineLogsArrayOutput {
	return i.ToOpenpipelineLogsArrayOutputWithContext(context.Background())
}

func (i OpenpipelineLogsArray) ToOpenpipelineLogsArrayOutputWithContext(ctx context.Context) OpenpipelineLogsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineLogsArrayOutput)
}

// OpenpipelineLogsMapInput is an input type that accepts OpenpipelineLogsMap and OpenpipelineLogsMapOutput values.
// You can construct a concrete instance of `OpenpipelineLogsMapInput` via:
//
//	OpenpipelineLogsMap{ "key": OpenpipelineLogsArgs{...} }
type OpenpipelineLogsMapInput interface {
	pulumi.Input

	ToOpenpipelineLogsMapOutput() OpenpipelineLogsMapOutput
	ToOpenpipelineLogsMapOutputWithContext(context.Context) OpenpipelineLogsMapOutput
}

type OpenpipelineLogsMap map[string]OpenpipelineLogsInput

func (OpenpipelineLogsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineLogs)(nil)).Elem()
}

func (i OpenpipelineLogsMap) ToOpenpipelineLogsMapOutput() OpenpipelineLogsMapOutput {
	return i.ToOpenpipelineLogsMapOutputWithContext(context.Background())
}

func (i OpenpipelineLogsMap) ToOpenpipelineLogsMapOutputWithContext(ctx context.Context) OpenpipelineLogsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineLogsMapOutput)
}

type OpenpipelineLogsOutput struct{ *pulumi.OutputState }

func (OpenpipelineLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineLogs)(nil)).Elem()
}

func (o OpenpipelineLogsOutput) ToOpenpipelineLogsOutput() OpenpipelineLogsOutput {
	return o
}

func (o OpenpipelineLogsOutput) ToOpenpipelineLogsOutputWithContext(ctx context.Context) OpenpipelineLogsOutput {
	return o
}

// List of all ingest sources of the configuration
func (o OpenpipelineLogsOutput) Endpoints() OpenpipelineLogsEndpointsPtrOutput {
	return o.ApplyT(func(v *OpenpipelineLogs) OpenpipelineLogsEndpointsPtrOutput { return v.Endpoints }).(OpenpipelineLogsEndpointsPtrOutput)
}

// List of all pipelines of the configuration
func (o OpenpipelineLogsOutput) Pipelines() OpenpipelineLogsPipelinesPtrOutput {
	return o.ApplyT(func(v *OpenpipelineLogs) OpenpipelineLogsPipelinesPtrOutput { return v.Pipelines }).(OpenpipelineLogsPipelinesPtrOutput)
}

// Dynamic routing definition
func (o OpenpipelineLogsOutput) Routing() OpenpipelineLogsRoutingPtrOutput {
	return o.ApplyT(func(v *OpenpipelineLogs) OpenpipelineLogsRoutingPtrOutput { return v.Routing }).(OpenpipelineLogsRoutingPtrOutput)
}

type OpenpipelineLogsArrayOutput struct{ *pulumi.OutputState }

func (OpenpipelineLogsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineLogs)(nil)).Elem()
}

func (o OpenpipelineLogsArrayOutput) ToOpenpipelineLogsArrayOutput() OpenpipelineLogsArrayOutput {
	return o
}

func (o OpenpipelineLogsArrayOutput) ToOpenpipelineLogsArrayOutputWithContext(ctx context.Context) OpenpipelineLogsArrayOutput {
	return o
}

func (o OpenpipelineLogsArrayOutput) Index(i pulumi.IntInput) OpenpipelineLogsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenpipelineLogs {
		return vs[0].([]*OpenpipelineLogs)[vs[1].(int)]
	}).(OpenpipelineLogsOutput)
}

type OpenpipelineLogsMapOutput struct{ *pulumi.OutputState }

func (OpenpipelineLogsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineLogs)(nil)).Elem()
}

func (o OpenpipelineLogsMapOutput) ToOpenpipelineLogsMapOutput() OpenpipelineLogsMapOutput {
	return o
}

func (o OpenpipelineLogsMapOutput) ToOpenpipelineLogsMapOutputWithContext(ctx context.Context) OpenpipelineLogsMapOutput {
	return o
}

func (o OpenpipelineLogsMapOutput) MapIndex(k pulumi.StringInput) OpenpipelineLogsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenpipelineLogs {
		return vs[0].(map[string]*OpenpipelineLogs)[vs[1].(string)]
	}).(OpenpipelineLogsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineLogsInput)(nil)).Elem(), &OpenpipelineLogs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineLogsArrayInput)(nil)).Elem(), OpenpipelineLogsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineLogsMapInput)(nil)).Elem(), OpenpipelineLogsMap{})
	pulumi.RegisterOutputType(OpenpipelineLogsOutput{})
	pulumi.RegisterOutputType(OpenpipelineLogsArrayOutput{})
	pulumi.RegisterOutputType(OpenpipelineLogsMapOutput{})
}
