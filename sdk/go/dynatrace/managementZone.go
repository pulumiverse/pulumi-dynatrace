// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type ManagementZone struct {
	pulumi.CustomResourceState

	// The description of the management zone
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A list of dimensional data rules for management zone usage. If several rules are specified, the `or` logic applies
	DimensionalRules ManagementZoneDimensionalRuleArrayOutput `pulumi:"dimensionalRules"`
	// A list of entity-selector based rules for management zone usage. If several rules are specified, the `or` logic applies
	EntitySelectorBasedRules ManagementZoneEntitySelectorBasedRuleArrayOutput `pulumi:"entitySelectorBasedRules"`
	// The name of the management zone
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
	Rules ManagementZoneRuleArrayOutput `pulumi:"rules"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns pulumi.StringPtrOutput `pulumi:"unknowns"`
}

// NewManagementZone registers a new resource with the given unique name, arguments, and options.
func NewManagementZone(ctx *pulumi.Context,
	name string, args *ManagementZoneArgs, opts ...pulumi.ResourceOption) (*ManagementZone, error) {
	if args == nil {
		args = &ManagementZoneArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ManagementZone
	err := ctx.RegisterResource("dynatrace:index/managementZone:ManagementZone", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagementZone gets an existing ManagementZone resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagementZone(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagementZoneState, opts ...pulumi.ResourceOption) (*ManagementZone, error) {
	var resource ManagementZone
	err := ctx.ReadResource("dynatrace:index/managementZone:ManagementZone", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagementZone resources.
type managementZoneState struct {
	// The description of the management zone
	Description *string `pulumi:"description"`
	// A list of dimensional data rules for management zone usage. If several rules are specified, the `or` logic applies
	DimensionalRules []ManagementZoneDimensionalRule `pulumi:"dimensionalRules"`
	// A list of entity-selector based rules for management zone usage. If several rules are specified, the `or` logic applies
	EntitySelectorBasedRules []ManagementZoneEntitySelectorBasedRule `pulumi:"entitySelectorBasedRules"`
	// The name of the management zone
	Name *string `pulumi:"name"`
	// A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
	Rules []ManagementZoneRule `pulumi:"rules"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `pulumi:"unknowns"`
}

type ManagementZoneState struct {
	// The description of the management zone
	Description pulumi.StringPtrInput
	// A list of dimensional data rules for management zone usage. If several rules are specified, the `or` logic applies
	DimensionalRules ManagementZoneDimensionalRuleArrayInput
	// A list of entity-selector based rules for management zone usage. If several rules are specified, the `or` logic applies
	EntitySelectorBasedRules ManagementZoneEntitySelectorBasedRuleArrayInput
	// The name of the management zone
	Name pulumi.StringPtrInput
	// A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
	Rules ManagementZoneRuleArrayInput
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns pulumi.StringPtrInput
}

func (ManagementZoneState) ElementType() reflect.Type {
	return reflect.TypeOf((*managementZoneState)(nil)).Elem()
}

type managementZoneArgs struct {
	// The description of the management zone
	Description *string `pulumi:"description"`
	// A list of dimensional data rules for management zone usage. If several rules are specified, the `or` logic applies
	DimensionalRules []ManagementZoneDimensionalRule `pulumi:"dimensionalRules"`
	// A list of entity-selector based rules for management zone usage. If several rules are specified, the `or` logic applies
	EntitySelectorBasedRules []ManagementZoneEntitySelectorBasedRule `pulumi:"entitySelectorBasedRules"`
	// The name of the management zone
	Name *string `pulumi:"name"`
	// A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
	Rules []ManagementZoneRule `pulumi:"rules"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `pulumi:"unknowns"`
}

// The set of arguments for constructing a ManagementZone resource.
type ManagementZoneArgs struct {
	// The description of the management zone
	Description pulumi.StringPtrInput
	// A list of dimensional data rules for management zone usage. If several rules are specified, the `or` logic applies
	DimensionalRules ManagementZoneDimensionalRuleArrayInput
	// A list of entity-selector based rules for management zone usage. If several rules are specified, the `or` logic applies
	EntitySelectorBasedRules ManagementZoneEntitySelectorBasedRuleArrayInput
	// The name of the management zone
	Name pulumi.StringPtrInput
	// A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
	Rules ManagementZoneRuleArrayInput
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns pulumi.StringPtrInput
}

func (ManagementZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managementZoneArgs)(nil)).Elem()
}

type ManagementZoneInput interface {
	pulumi.Input

	ToManagementZoneOutput() ManagementZoneOutput
	ToManagementZoneOutputWithContext(ctx context.Context) ManagementZoneOutput
}

func (*ManagementZone) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagementZone)(nil)).Elem()
}

func (i *ManagementZone) ToManagementZoneOutput() ManagementZoneOutput {
	return i.ToManagementZoneOutputWithContext(context.Background())
}

func (i *ManagementZone) ToManagementZoneOutputWithContext(ctx context.Context) ManagementZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementZoneOutput)
}

// ManagementZoneArrayInput is an input type that accepts ManagementZoneArray and ManagementZoneArrayOutput values.
// You can construct a concrete instance of `ManagementZoneArrayInput` via:
//
//	ManagementZoneArray{ ManagementZoneArgs{...} }
type ManagementZoneArrayInput interface {
	pulumi.Input

	ToManagementZoneArrayOutput() ManagementZoneArrayOutput
	ToManagementZoneArrayOutputWithContext(context.Context) ManagementZoneArrayOutput
}

type ManagementZoneArray []ManagementZoneInput

func (ManagementZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagementZone)(nil)).Elem()
}

func (i ManagementZoneArray) ToManagementZoneArrayOutput() ManagementZoneArrayOutput {
	return i.ToManagementZoneArrayOutputWithContext(context.Background())
}

func (i ManagementZoneArray) ToManagementZoneArrayOutputWithContext(ctx context.Context) ManagementZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementZoneArrayOutput)
}

// ManagementZoneMapInput is an input type that accepts ManagementZoneMap and ManagementZoneMapOutput values.
// You can construct a concrete instance of `ManagementZoneMapInput` via:
//
//	ManagementZoneMap{ "key": ManagementZoneArgs{...} }
type ManagementZoneMapInput interface {
	pulumi.Input

	ToManagementZoneMapOutput() ManagementZoneMapOutput
	ToManagementZoneMapOutputWithContext(context.Context) ManagementZoneMapOutput
}

type ManagementZoneMap map[string]ManagementZoneInput

func (ManagementZoneMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagementZone)(nil)).Elem()
}

func (i ManagementZoneMap) ToManagementZoneMapOutput() ManagementZoneMapOutput {
	return i.ToManagementZoneMapOutputWithContext(context.Background())
}

func (i ManagementZoneMap) ToManagementZoneMapOutputWithContext(ctx context.Context) ManagementZoneMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementZoneMapOutput)
}

type ManagementZoneOutput struct{ *pulumi.OutputState }

func (ManagementZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagementZone)(nil)).Elem()
}

func (o ManagementZoneOutput) ToManagementZoneOutput() ManagementZoneOutput {
	return o
}

func (o ManagementZoneOutput) ToManagementZoneOutputWithContext(ctx context.Context) ManagementZoneOutput {
	return o
}

// The description of the management zone
func (o ManagementZoneOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagementZone) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A list of dimensional data rules for management zone usage. If several rules are specified, the `or` logic applies
func (o ManagementZoneOutput) DimensionalRules() ManagementZoneDimensionalRuleArrayOutput {
	return o.ApplyT(func(v *ManagementZone) ManagementZoneDimensionalRuleArrayOutput { return v.DimensionalRules }).(ManagementZoneDimensionalRuleArrayOutput)
}

// A list of entity-selector based rules for management zone usage. If several rules are specified, the `or` logic applies
func (o ManagementZoneOutput) EntitySelectorBasedRules() ManagementZoneEntitySelectorBasedRuleArrayOutput {
	return o.ApplyT(func(v *ManagementZone) ManagementZoneEntitySelectorBasedRuleArrayOutput {
		return v.EntitySelectorBasedRules
	}).(ManagementZoneEntitySelectorBasedRuleArrayOutput)
}

// The name of the management zone
func (o ManagementZoneOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagementZone) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
func (o ManagementZoneOutput) Rules() ManagementZoneRuleArrayOutput {
	return o.ApplyT(func(v *ManagementZone) ManagementZoneRuleArrayOutput { return v.Rules }).(ManagementZoneRuleArrayOutput)
}

// allows for configuring properties that are not explicitly supported by the current version of this provider
func (o ManagementZoneOutput) Unknowns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagementZone) pulumi.StringPtrOutput { return v.Unknowns }).(pulumi.StringPtrOutput)
}

type ManagementZoneArrayOutput struct{ *pulumi.OutputState }

func (ManagementZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagementZone)(nil)).Elem()
}

func (o ManagementZoneArrayOutput) ToManagementZoneArrayOutput() ManagementZoneArrayOutput {
	return o
}

func (o ManagementZoneArrayOutput) ToManagementZoneArrayOutputWithContext(ctx context.Context) ManagementZoneArrayOutput {
	return o
}

func (o ManagementZoneArrayOutput) Index(i pulumi.IntInput) ManagementZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ManagementZone {
		return vs[0].([]*ManagementZone)[vs[1].(int)]
	}).(ManagementZoneOutput)
}

type ManagementZoneMapOutput struct{ *pulumi.OutputState }

func (ManagementZoneMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagementZone)(nil)).Elem()
}

func (o ManagementZoneMapOutput) ToManagementZoneMapOutput() ManagementZoneMapOutput {
	return o
}

func (o ManagementZoneMapOutput) ToManagementZoneMapOutputWithContext(ctx context.Context) ManagementZoneMapOutput {
	return o
}

func (o ManagementZoneMapOutput) MapIndex(k pulumi.StringInput) ManagementZoneOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ManagementZone {
		return vs[0].(map[string]*ManagementZone)[vs[1].(string)]
	}).(ManagementZoneOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManagementZoneInput)(nil)).Elem(), &ManagementZone{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagementZoneArrayInput)(nil)).Elem(), ManagementZoneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagementZoneMapInput)(nil)).Elem(), ManagementZoneMap{})
	pulumi.RegisterOutputType(ManagementZoneOutput{})
	pulumi.RegisterOutputType(ManagementZoneArrayOutput{})
	pulumi.RegisterOutputType(ManagementZoneMapOutput{})
}
