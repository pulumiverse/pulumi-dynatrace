// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type LogCustomSource struct {
	pulumi.CustomResourceState

	// Define Custom Log Source only within context if provided
	Context LogCustomSourceContextPtrOutput `pulumi:"context"`
	// no documentation available
	CustomLogSource LogCustomSourceCustomLogSourceOutput `pulumi:"customLogSource"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Name
	Name pulumi.StringOutput `pulumi:"name"`
	// The scope of this setting (HOST, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
}

// NewLogCustomSource registers a new resource with the given unique name, arguments, and options.
func NewLogCustomSource(ctx *pulumi.Context,
	name string, args *LogCustomSourceArgs, opts ...pulumi.ResourceOption) (*LogCustomSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CustomLogSource == nil {
		return nil, errors.New("invalid value for required argument 'CustomLogSource'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogCustomSource
	err := ctx.RegisterResource("dynatrace:index/logCustomSource:LogCustomSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogCustomSource gets an existing LogCustomSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogCustomSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogCustomSourceState, opts ...pulumi.ResourceOption) (*LogCustomSource, error) {
	var resource LogCustomSource
	err := ctx.ReadResource("dynatrace:index/logCustomSource:LogCustomSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogCustomSource resources.
type logCustomSourceState struct {
	// Define Custom Log Source only within context if provided
	Context *LogCustomSourceContext `pulumi:"context"`
	// no documentation available
	CustomLogSource *LogCustomSourceCustomLogSource `pulumi:"customLogSource"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// Name
	Name *string `pulumi:"name"`
	// The scope of this setting (HOST, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
}

type LogCustomSourceState struct {
	// Define Custom Log Source only within context if provided
	Context LogCustomSourceContextPtrInput
	// no documentation available
	CustomLogSource LogCustomSourceCustomLogSourcePtrInput
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// Name
	Name pulumi.StringPtrInput
	// The scope of this setting (HOST, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
}

func (LogCustomSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*logCustomSourceState)(nil)).Elem()
}

type logCustomSourceArgs struct {
	// Define Custom Log Source only within context if provided
	Context *LogCustomSourceContext `pulumi:"context"`
	// no documentation available
	CustomLogSource LogCustomSourceCustomLogSource `pulumi:"customLogSource"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// Name
	Name *string `pulumi:"name"`
	// The scope of this setting (HOST, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
}

// The set of arguments for constructing a LogCustomSource resource.
type LogCustomSourceArgs struct {
	// Define Custom Log Source only within context if provided
	Context LogCustomSourceContextPtrInput
	// no documentation available
	CustomLogSource LogCustomSourceCustomLogSourceInput
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// Name
	Name pulumi.StringPtrInput
	// The scope of this setting (HOST, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
}

func (LogCustomSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logCustomSourceArgs)(nil)).Elem()
}

type LogCustomSourceInput interface {
	pulumi.Input

	ToLogCustomSourceOutput() LogCustomSourceOutput
	ToLogCustomSourceOutputWithContext(ctx context.Context) LogCustomSourceOutput
}

func (*LogCustomSource) ElementType() reflect.Type {
	return reflect.TypeOf((**LogCustomSource)(nil)).Elem()
}

func (i *LogCustomSource) ToLogCustomSourceOutput() LogCustomSourceOutput {
	return i.ToLogCustomSourceOutputWithContext(context.Background())
}

func (i *LogCustomSource) ToLogCustomSourceOutputWithContext(ctx context.Context) LogCustomSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogCustomSourceOutput)
}

// LogCustomSourceArrayInput is an input type that accepts LogCustomSourceArray and LogCustomSourceArrayOutput values.
// You can construct a concrete instance of `LogCustomSourceArrayInput` via:
//
//	LogCustomSourceArray{ LogCustomSourceArgs{...} }
type LogCustomSourceArrayInput interface {
	pulumi.Input

	ToLogCustomSourceArrayOutput() LogCustomSourceArrayOutput
	ToLogCustomSourceArrayOutputWithContext(context.Context) LogCustomSourceArrayOutput
}

type LogCustomSourceArray []LogCustomSourceInput

func (LogCustomSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogCustomSource)(nil)).Elem()
}

func (i LogCustomSourceArray) ToLogCustomSourceArrayOutput() LogCustomSourceArrayOutput {
	return i.ToLogCustomSourceArrayOutputWithContext(context.Background())
}

func (i LogCustomSourceArray) ToLogCustomSourceArrayOutputWithContext(ctx context.Context) LogCustomSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogCustomSourceArrayOutput)
}

// LogCustomSourceMapInput is an input type that accepts LogCustomSourceMap and LogCustomSourceMapOutput values.
// You can construct a concrete instance of `LogCustomSourceMapInput` via:
//
//	LogCustomSourceMap{ "key": LogCustomSourceArgs{...} }
type LogCustomSourceMapInput interface {
	pulumi.Input

	ToLogCustomSourceMapOutput() LogCustomSourceMapOutput
	ToLogCustomSourceMapOutputWithContext(context.Context) LogCustomSourceMapOutput
}

type LogCustomSourceMap map[string]LogCustomSourceInput

func (LogCustomSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogCustomSource)(nil)).Elem()
}

func (i LogCustomSourceMap) ToLogCustomSourceMapOutput() LogCustomSourceMapOutput {
	return i.ToLogCustomSourceMapOutputWithContext(context.Background())
}

func (i LogCustomSourceMap) ToLogCustomSourceMapOutputWithContext(ctx context.Context) LogCustomSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogCustomSourceMapOutput)
}

type LogCustomSourceOutput struct{ *pulumi.OutputState }

func (LogCustomSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogCustomSource)(nil)).Elem()
}

func (o LogCustomSourceOutput) ToLogCustomSourceOutput() LogCustomSourceOutput {
	return o
}

func (o LogCustomSourceOutput) ToLogCustomSourceOutputWithContext(ctx context.Context) LogCustomSourceOutput {
	return o
}

// Define Custom Log Source only within context if provided
func (o LogCustomSourceOutput) Context() LogCustomSourceContextPtrOutput {
	return o.ApplyT(func(v *LogCustomSource) LogCustomSourceContextPtrOutput { return v.Context }).(LogCustomSourceContextPtrOutput)
}

// no documentation available
func (o LogCustomSourceOutput) CustomLogSource() LogCustomSourceCustomLogSourceOutput {
	return o.ApplyT(func(v *LogCustomSource) LogCustomSourceCustomLogSourceOutput { return v.CustomLogSource }).(LogCustomSourceCustomLogSourceOutput)
}

// This setting is enabled (`true`) or disabled (`false`)
func (o LogCustomSourceOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *LogCustomSource) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Name
func (o LogCustomSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LogCustomSource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The scope of this setting (HOST, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
func (o LogCustomSourceOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogCustomSource) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

type LogCustomSourceArrayOutput struct{ *pulumi.OutputState }

func (LogCustomSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogCustomSource)(nil)).Elem()
}

func (o LogCustomSourceArrayOutput) ToLogCustomSourceArrayOutput() LogCustomSourceArrayOutput {
	return o
}

func (o LogCustomSourceArrayOutput) ToLogCustomSourceArrayOutputWithContext(ctx context.Context) LogCustomSourceArrayOutput {
	return o
}

func (o LogCustomSourceArrayOutput) Index(i pulumi.IntInput) LogCustomSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogCustomSource {
		return vs[0].([]*LogCustomSource)[vs[1].(int)]
	}).(LogCustomSourceOutput)
}

type LogCustomSourceMapOutput struct{ *pulumi.OutputState }

func (LogCustomSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogCustomSource)(nil)).Elem()
}

func (o LogCustomSourceMapOutput) ToLogCustomSourceMapOutput() LogCustomSourceMapOutput {
	return o
}

func (o LogCustomSourceMapOutput) ToLogCustomSourceMapOutputWithContext(ctx context.Context) LogCustomSourceMapOutput {
	return o
}

func (o LogCustomSourceMapOutput) MapIndex(k pulumi.StringInput) LogCustomSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogCustomSource {
		return vs[0].(map[string]*LogCustomSource)[vs[1].(string)]
	}).(LogCustomSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogCustomSourceInput)(nil)).Elem(), &LogCustomSource{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogCustomSourceArrayInput)(nil)).Elem(), LogCustomSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogCustomSourceMapInput)(nil)).Elem(), LogCustomSourceMap{})
	pulumi.RegisterOutputType(LogCustomSourceOutput{})
	pulumi.RegisterOutputType(LogCustomSourceArrayOutput{})
	pulumi.RegisterOutputType(LogCustomSourceMapOutput{})
}
