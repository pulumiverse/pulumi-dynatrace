// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type GithubConnection struct {
	pulumi.CustomResourceState

	// The name of the GitHub connection
	Name pulumi.StringOutput `pulumi:"name"`
	// Token for the selected authentication type
	Token pulumi.StringPtrOutput `pulumi:"token"`
	// Possible Values: `pat`
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewGithubConnection registers a new resource with the given unique name, arguments, and options.
func NewGithubConnection(ctx *pulumi.Context,
	name string, args *GithubConnectionArgs, opts ...pulumi.ResourceOption) (*GithubConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.Token != nil {
		args.Token = pulumi.ToSecret(args.Token).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"token",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GithubConnection
	err := ctx.RegisterResource("dynatrace:index/githubConnection:GithubConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGithubConnection gets an existing GithubConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGithubConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GithubConnectionState, opts ...pulumi.ResourceOption) (*GithubConnection, error) {
	var resource GithubConnection
	err := ctx.ReadResource("dynatrace:index/githubConnection:GithubConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GithubConnection resources.
type githubConnectionState struct {
	// The name of the GitHub connection
	Name *string `pulumi:"name"`
	// Token for the selected authentication type
	Token *string `pulumi:"token"`
	// Possible Values: `pat`
	Type *string `pulumi:"type"`
}

type GithubConnectionState struct {
	// The name of the GitHub connection
	Name pulumi.StringPtrInput
	// Token for the selected authentication type
	Token pulumi.StringPtrInput
	// Possible Values: `pat`
	Type pulumi.StringPtrInput
}

func (GithubConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*githubConnectionState)(nil)).Elem()
}

type githubConnectionArgs struct {
	// The name of the GitHub connection
	Name *string `pulumi:"name"`
	// Token for the selected authentication type
	Token *string `pulumi:"token"`
	// Possible Values: `pat`
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a GithubConnection resource.
type GithubConnectionArgs struct {
	// The name of the GitHub connection
	Name pulumi.StringPtrInput
	// Token for the selected authentication type
	Token pulumi.StringPtrInput
	// Possible Values: `pat`
	Type pulumi.StringInput
}

func (GithubConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*githubConnectionArgs)(nil)).Elem()
}

type GithubConnectionInput interface {
	pulumi.Input

	ToGithubConnectionOutput() GithubConnectionOutput
	ToGithubConnectionOutputWithContext(ctx context.Context) GithubConnectionOutput
}

func (*GithubConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubConnection)(nil)).Elem()
}

func (i *GithubConnection) ToGithubConnectionOutput() GithubConnectionOutput {
	return i.ToGithubConnectionOutputWithContext(context.Background())
}

func (i *GithubConnection) ToGithubConnectionOutputWithContext(ctx context.Context) GithubConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubConnectionOutput)
}

// GithubConnectionArrayInput is an input type that accepts GithubConnectionArray and GithubConnectionArrayOutput values.
// You can construct a concrete instance of `GithubConnectionArrayInput` via:
//
//	GithubConnectionArray{ GithubConnectionArgs{...} }
type GithubConnectionArrayInput interface {
	pulumi.Input

	ToGithubConnectionArrayOutput() GithubConnectionArrayOutput
	ToGithubConnectionArrayOutputWithContext(context.Context) GithubConnectionArrayOutput
}

type GithubConnectionArray []GithubConnectionInput

func (GithubConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GithubConnection)(nil)).Elem()
}

func (i GithubConnectionArray) ToGithubConnectionArrayOutput() GithubConnectionArrayOutput {
	return i.ToGithubConnectionArrayOutputWithContext(context.Background())
}

func (i GithubConnectionArray) ToGithubConnectionArrayOutputWithContext(ctx context.Context) GithubConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubConnectionArrayOutput)
}

// GithubConnectionMapInput is an input type that accepts GithubConnectionMap and GithubConnectionMapOutput values.
// You can construct a concrete instance of `GithubConnectionMapInput` via:
//
//	GithubConnectionMap{ "key": GithubConnectionArgs{...} }
type GithubConnectionMapInput interface {
	pulumi.Input

	ToGithubConnectionMapOutput() GithubConnectionMapOutput
	ToGithubConnectionMapOutputWithContext(context.Context) GithubConnectionMapOutput
}

type GithubConnectionMap map[string]GithubConnectionInput

func (GithubConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GithubConnection)(nil)).Elem()
}

func (i GithubConnectionMap) ToGithubConnectionMapOutput() GithubConnectionMapOutput {
	return i.ToGithubConnectionMapOutputWithContext(context.Background())
}

func (i GithubConnectionMap) ToGithubConnectionMapOutputWithContext(ctx context.Context) GithubConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubConnectionMapOutput)
}

type GithubConnectionOutput struct{ *pulumi.OutputState }

func (GithubConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubConnection)(nil)).Elem()
}

func (o GithubConnectionOutput) ToGithubConnectionOutput() GithubConnectionOutput {
	return o
}

func (o GithubConnectionOutput) ToGithubConnectionOutputWithContext(ctx context.Context) GithubConnectionOutput {
	return o
}

// The name of the GitHub connection
func (o GithubConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GithubConnection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Token for the selected authentication type
func (o GithubConnectionOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubConnection) pulumi.StringPtrOutput { return v.Token }).(pulumi.StringPtrOutput)
}

// Possible Values: `pat`
func (o GithubConnectionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *GithubConnection) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type GithubConnectionArrayOutput struct{ *pulumi.OutputState }

func (GithubConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GithubConnection)(nil)).Elem()
}

func (o GithubConnectionArrayOutput) ToGithubConnectionArrayOutput() GithubConnectionArrayOutput {
	return o
}

func (o GithubConnectionArrayOutput) ToGithubConnectionArrayOutputWithContext(ctx context.Context) GithubConnectionArrayOutput {
	return o
}

func (o GithubConnectionArrayOutput) Index(i pulumi.IntInput) GithubConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GithubConnection {
		return vs[0].([]*GithubConnection)[vs[1].(int)]
	}).(GithubConnectionOutput)
}

type GithubConnectionMapOutput struct{ *pulumi.OutputState }

func (GithubConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GithubConnection)(nil)).Elem()
}

func (o GithubConnectionMapOutput) ToGithubConnectionMapOutput() GithubConnectionMapOutput {
	return o
}

func (o GithubConnectionMapOutput) ToGithubConnectionMapOutputWithContext(ctx context.Context) GithubConnectionMapOutput {
	return o
}

func (o GithubConnectionMapOutput) MapIndex(k pulumi.StringInput) GithubConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GithubConnection {
		return vs[0].(map[string]*GithubConnection)[vs[1].(string)]
	}).(GithubConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GithubConnectionInput)(nil)).Elem(), &GithubConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*GithubConnectionArrayInput)(nil)).Elem(), GithubConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GithubConnectionMapInput)(nil)).Elem(), GithubConnectionMap{})
	pulumi.RegisterOutputType(GithubConnectionOutput{})
	pulumi.RegisterOutputType(GithubConnectionArrayOutput{})
	pulumi.RegisterOutputType(GithubConnectionMapOutput{})
}
