// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type CustomAnomalies struct {
	pulumi.CustomResourceState

	// How the metric data points are aggregated for the evaluation. The timeseries must support this aggregation
	AggregationType pulumi.StringPtrOutput `pulumi:"aggregationType"`
	// The description of the metric event
	Description pulumi.StringOutput `pulumi:"description"`
	// Defines the dimensions of the metric to alert on. The filters are combined by conjunction
	Dimensions CustomAnomaliesDimensionArrayOutput `pulumi:"dimensions"`
	// The reason of automatic disabling.  The `NONE` means config was not disabled automatically. Possible values are `METRIC_DEFINITION_INCONSISTENCY`, `NONE`, `TOO_MANY_DIMS` and `TOPX_FORCIBLY_DEACTIVATED`
	//
	// Deprecated: This property is not meant to be configured from the outside. It will get removed completely in future versions
	DisabledReason pulumi.StringPtrOutput `pulumi:"disabledReason"`
	// The metric event is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The ID of the metric evaluated by the metric event
	MetricId pulumi.StringPtrOutput `pulumi:"metricId"`
	// The metric selector that should be executed
	MetricSelector pulumi.StringPtrOutput `pulumi:"metricSelector"`
	// The name of the metric event displayed in the UI
	Name pulumi.StringOutput `pulumi:"name"`
	// Defines which dimension key should be used for the **alertingScope**
	PrimaryDimensionKey pulumi.StringPtrOutput `pulumi:"primaryDimensionKey"`
	// Defines the scope of the metric event. Only one filter is allowed per filter type, except for tags, where up to 3 are allowed. The filters are combined by conjunction
	Scopes CustomAnomaliesScopeArrayOutput `pulumi:"scopes"`
	// The type of the event to trigger on the threshold violation.  The `CUSTOM_ALERT` type is not correlated with other alerts. The `INFO` type does not open a problem
	Severity pulumi.StringPtrOutput `pulumi:"severity"`
	// A monitoring strategy for a metric event config. This is the base version of the monitoring strategy, depending on the type,  the actual JSON may contain additional fields
	Strategy CustomAnomaliesStrategyOutput `pulumi:"strategy"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns pulumi.StringPtrOutput `pulumi:"unknowns"`
	// The reason of a warning set on the config. The `NONE` means config has no warnings. The other supported value is `TOO_MANY_DIMS`
	//
	// Deprecated: This property is not meant to be configured from the outside. It will get removed completely in future versions
	WarningReason pulumi.StringPtrOutput `pulumi:"warningReason"`
}

// NewCustomAnomalies registers a new resource with the given unique name, arguments, and options.
func NewCustomAnomalies(ctx *pulumi.Context,
	name string, args *CustomAnomaliesArgs, opts ...pulumi.ResourceOption) (*CustomAnomalies, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Strategy == nil {
		return nil, errors.New("invalid value for required argument 'Strategy'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CustomAnomalies
	err := ctx.RegisterResource("dynatrace:index/customAnomalies:CustomAnomalies", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCustomAnomalies gets an existing CustomAnomalies resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCustomAnomalies(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CustomAnomaliesState, opts ...pulumi.ResourceOption) (*CustomAnomalies, error) {
	var resource CustomAnomalies
	err := ctx.ReadResource("dynatrace:index/customAnomalies:CustomAnomalies", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CustomAnomalies resources.
type customAnomaliesState struct {
	// How the metric data points are aggregated for the evaluation. The timeseries must support this aggregation
	AggregationType *string `pulumi:"aggregationType"`
	// The description of the metric event
	Description *string `pulumi:"description"`
	// Defines the dimensions of the metric to alert on. The filters are combined by conjunction
	Dimensions []CustomAnomaliesDimension `pulumi:"dimensions"`
	// The reason of automatic disabling.  The `NONE` means config was not disabled automatically. Possible values are `METRIC_DEFINITION_INCONSISTENCY`, `NONE`, `TOO_MANY_DIMS` and `TOPX_FORCIBLY_DEACTIVATED`
	//
	// Deprecated: This property is not meant to be configured from the outside. It will get removed completely in future versions
	DisabledReason *string `pulumi:"disabledReason"`
	// The metric event is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// The ID of the metric evaluated by the metric event
	MetricId *string `pulumi:"metricId"`
	// The metric selector that should be executed
	MetricSelector *string `pulumi:"metricSelector"`
	// The name of the metric event displayed in the UI
	Name *string `pulumi:"name"`
	// Defines which dimension key should be used for the **alertingScope**
	PrimaryDimensionKey *string `pulumi:"primaryDimensionKey"`
	// Defines the scope of the metric event. Only one filter is allowed per filter type, except for tags, where up to 3 are allowed. The filters are combined by conjunction
	Scopes []CustomAnomaliesScope `pulumi:"scopes"`
	// The type of the event to trigger on the threshold violation.  The `CUSTOM_ALERT` type is not correlated with other alerts. The `INFO` type does not open a problem
	Severity *string `pulumi:"severity"`
	// A monitoring strategy for a metric event config. This is the base version of the monitoring strategy, depending on the type,  the actual JSON may contain additional fields
	Strategy *CustomAnomaliesStrategy `pulumi:"strategy"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `pulumi:"unknowns"`
	// The reason of a warning set on the config. The `NONE` means config has no warnings. The other supported value is `TOO_MANY_DIMS`
	//
	// Deprecated: This property is not meant to be configured from the outside. It will get removed completely in future versions
	WarningReason *string `pulumi:"warningReason"`
}

type CustomAnomaliesState struct {
	// How the metric data points are aggregated for the evaluation. The timeseries must support this aggregation
	AggregationType pulumi.StringPtrInput
	// The description of the metric event
	Description pulumi.StringPtrInput
	// Defines the dimensions of the metric to alert on. The filters are combined by conjunction
	Dimensions CustomAnomaliesDimensionArrayInput
	// The reason of automatic disabling.  The `NONE` means config was not disabled automatically. Possible values are `METRIC_DEFINITION_INCONSISTENCY`, `NONE`, `TOO_MANY_DIMS` and `TOPX_FORCIBLY_DEACTIVATED`
	//
	// Deprecated: This property is not meant to be configured from the outside. It will get removed completely in future versions
	DisabledReason pulumi.StringPtrInput
	// The metric event is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// The ID of the metric evaluated by the metric event
	MetricId pulumi.StringPtrInput
	// The metric selector that should be executed
	MetricSelector pulumi.StringPtrInput
	// The name of the metric event displayed in the UI
	Name pulumi.StringPtrInput
	// Defines which dimension key should be used for the **alertingScope**
	PrimaryDimensionKey pulumi.StringPtrInput
	// Defines the scope of the metric event. Only one filter is allowed per filter type, except for tags, where up to 3 are allowed. The filters are combined by conjunction
	Scopes CustomAnomaliesScopeArrayInput
	// The type of the event to trigger on the threshold violation.  The `CUSTOM_ALERT` type is not correlated with other alerts. The `INFO` type does not open a problem
	Severity pulumi.StringPtrInput
	// A monitoring strategy for a metric event config. This is the base version of the monitoring strategy, depending on the type,  the actual JSON may contain additional fields
	Strategy CustomAnomaliesStrategyPtrInput
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns pulumi.StringPtrInput
	// The reason of a warning set on the config. The `NONE` means config has no warnings. The other supported value is `TOO_MANY_DIMS`
	//
	// Deprecated: This property is not meant to be configured from the outside. It will get removed completely in future versions
	WarningReason pulumi.StringPtrInput
}

func (CustomAnomaliesState) ElementType() reflect.Type {
	return reflect.TypeOf((*customAnomaliesState)(nil)).Elem()
}

type customAnomaliesArgs struct {
	// How the metric data points are aggregated for the evaluation. The timeseries must support this aggregation
	AggregationType *string `pulumi:"aggregationType"`
	// The description of the metric event
	Description string `pulumi:"description"`
	// Defines the dimensions of the metric to alert on. The filters are combined by conjunction
	Dimensions []CustomAnomaliesDimension `pulumi:"dimensions"`
	// The reason of automatic disabling.  The `NONE` means config was not disabled automatically. Possible values are `METRIC_DEFINITION_INCONSISTENCY`, `NONE`, `TOO_MANY_DIMS` and `TOPX_FORCIBLY_DEACTIVATED`
	//
	// Deprecated: This property is not meant to be configured from the outside. It will get removed completely in future versions
	DisabledReason *string `pulumi:"disabledReason"`
	// The metric event is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// The ID of the metric evaluated by the metric event
	MetricId *string `pulumi:"metricId"`
	// The metric selector that should be executed
	MetricSelector *string `pulumi:"metricSelector"`
	// The name of the metric event displayed in the UI
	Name *string `pulumi:"name"`
	// Defines which dimension key should be used for the **alertingScope**
	PrimaryDimensionKey *string `pulumi:"primaryDimensionKey"`
	// Defines the scope of the metric event. Only one filter is allowed per filter type, except for tags, where up to 3 are allowed. The filters are combined by conjunction
	Scopes []CustomAnomaliesScope `pulumi:"scopes"`
	// The type of the event to trigger on the threshold violation.  The `CUSTOM_ALERT` type is not correlated with other alerts. The `INFO` type does not open a problem
	Severity *string `pulumi:"severity"`
	// A monitoring strategy for a metric event config. This is the base version of the monitoring strategy, depending on the type,  the actual JSON may contain additional fields
	Strategy CustomAnomaliesStrategy `pulumi:"strategy"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `pulumi:"unknowns"`
	// The reason of a warning set on the config. The `NONE` means config has no warnings. The other supported value is `TOO_MANY_DIMS`
	//
	// Deprecated: This property is not meant to be configured from the outside. It will get removed completely in future versions
	WarningReason *string `pulumi:"warningReason"`
}

// The set of arguments for constructing a CustomAnomalies resource.
type CustomAnomaliesArgs struct {
	// How the metric data points are aggregated for the evaluation. The timeseries must support this aggregation
	AggregationType pulumi.StringPtrInput
	// The description of the metric event
	Description pulumi.StringInput
	// Defines the dimensions of the metric to alert on. The filters are combined by conjunction
	Dimensions CustomAnomaliesDimensionArrayInput
	// The reason of automatic disabling.  The `NONE` means config was not disabled automatically. Possible values are `METRIC_DEFINITION_INCONSISTENCY`, `NONE`, `TOO_MANY_DIMS` and `TOPX_FORCIBLY_DEACTIVATED`
	//
	// Deprecated: This property is not meant to be configured from the outside. It will get removed completely in future versions
	DisabledReason pulumi.StringPtrInput
	// The metric event is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// The ID of the metric evaluated by the metric event
	MetricId pulumi.StringPtrInput
	// The metric selector that should be executed
	MetricSelector pulumi.StringPtrInput
	// The name of the metric event displayed in the UI
	Name pulumi.StringPtrInput
	// Defines which dimension key should be used for the **alertingScope**
	PrimaryDimensionKey pulumi.StringPtrInput
	// Defines the scope of the metric event. Only one filter is allowed per filter type, except for tags, where up to 3 are allowed. The filters are combined by conjunction
	Scopes CustomAnomaliesScopeArrayInput
	// The type of the event to trigger on the threshold violation.  The `CUSTOM_ALERT` type is not correlated with other alerts. The `INFO` type does not open a problem
	Severity pulumi.StringPtrInput
	// A monitoring strategy for a metric event config. This is the base version of the monitoring strategy, depending on the type,  the actual JSON may contain additional fields
	Strategy CustomAnomaliesStrategyInput
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns pulumi.StringPtrInput
	// The reason of a warning set on the config. The `NONE` means config has no warnings. The other supported value is `TOO_MANY_DIMS`
	//
	// Deprecated: This property is not meant to be configured from the outside. It will get removed completely in future versions
	WarningReason pulumi.StringPtrInput
}

func (CustomAnomaliesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*customAnomaliesArgs)(nil)).Elem()
}

type CustomAnomaliesInput interface {
	pulumi.Input

	ToCustomAnomaliesOutput() CustomAnomaliesOutput
	ToCustomAnomaliesOutputWithContext(ctx context.Context) CustomAnomaliesOutput
}

func (*CustomAnomalies) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomAnomalies)(nil)).Elem()
}

func (i *CustomAnomalies) ToCustomAnomaliesOutput() CustomAnomaliesOutput {
	return i.ToCustomAnomaliesOutputWithContext(context.Background())
}

func (i *CustomAnomalies) ToCustomAnomaliesOutputWithContext(ctx context.Context) CustomAnomaliesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomAnomaliesOutput)
}

// CustomAnomaliesArrayInput is an input type that accepts CustomAnomaliesArray and CustomAnomaliesArrayOutput values.
// You can construct a concrete instance of `CustomAnomaliesArrayInput` via:
//
//	CustomAnomaliesArray{ CustomAnomaliesArgs{...} }
type CustomAnomaliesArrayInput interface {
	pulumi.Input

	ToCustomAnomaliesArrayOutput() CustomAnomaliesArrayOutput
	ToCustomAnomaliesArrayOutputWithContext(context.Context) CustomAnomaliesArrayOutput
}

type CustomAnomaliesArray []CustomAnomaliesInput

func (CustomAnomaliesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomAnomalies)(nil)).Elem()
}

func (i CustomAnomaliesArray) ToCustomAnomaliesArrayOutput() CustomAnomaliesArrayOutput {
	return i.ToCustomAnomaliesArrayOutputWithContext(context.Background())
}

func (i CustomAnomaliesArray) ToCustomAnomaliesArrayOutputWithContext(ctx context.Context) CustomAnomaliesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomAnomaliesArrayOutput)
}

// CustomAnomaliesMapInput is an input type that accepts CustomAnomaliesMap and CustomAnomaliesMapOutput values.
// You can construct a concrete instance of `CustomAnomaliesMapInput` via:
//
//	CustomAnomaliesMap{ "key": CustomAnomaliesArgs{...} }
type CustomAnomaliesMapInput interface {
	pulumi.Input

	ToCustomAnomaliesMapOutput() CustomAnomaliesMapOutput
	ToCustomAnomaliesMapOutputWithContext(context.Context) CustomAnomaliesMapOutput
}

type CustomAnomaliesMap map[string]CustomAnomaliesInput

func (CustomAnomaliesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomAnomalies)(nil)).Elem()
}

func (i CustomAnomaliesMap) ToCustomAnomaliesMapOutput() CustomAnomaliesMapOutput {
	return i.ToCustomAnomaliesMapOutputWithContext(context.Background())
}

func (i CustomAnomaliesMap) ToCustomAnomaliesMapOutputWithContext(ctx context.Context) CustomAnomaliesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomAnomaliesMapOutput)
}

type CustomAnomaliesOutput struct{ *pulumi.OutputState }

func (CustomAnomaliesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomAnomalies)(nil)).Elem()
}

func (o CustomAnomaliesOutput) ToCustomAnomaliesOutput() CustomAnomaliesOutput {
	return o
}

func (o CustomAnomaliesOutput) ToCustomAnomaliesOutputWithContext(ctx context.Context) CustomAnomaliesOutput {
	return o
}

// How the metric data points are aggregated for the evaluation. The timeseries must support this aggregation
func (o CustomAnomaliesOutput) AggregationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomAnomalies) pulumi.StringPtrOutput { return v.AggregationType }).(pulumi.StringPtrOutput)
}

// The description of the metric event
func (o CustomAnomaliesOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomAnomalies) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Defines the dimensions of the metric to alert on. The filters are combined by conjunction
func (o CustomAnomaliesOutput) Dimensions() CustomAnomaliesDimensionArrayOutput {
	return o.ApplyT(func(v *CustomAnomalies) CustomAnomaliesDimensionArrayOutput { return v.Dimensions }).(CustomAnomaliesDimensionArrayOutput)
}

// The reason of automatic disabling.  The `NONE` means config was not disabled automatically. Possible values are `METRIC_DEFINITION_INCONSISTENCY`, `NONE`, `TOO_MANY_DIMS` and `TOPX_FORCIBLY_DEACTIVATED`
//
// Deprecated: This property is not meant to be configured from the outside. It will get removed completely in future versions
func (o CustomAnomaliesOutput) DisabledReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomAnomalies) pulumi.StringPtrOutput { return v.DisabledReason }).(pulumi.StringPtrOutput)
}

// The metric event is enabled (`true`) or disabled (`false`)
func (o CustomAnomaliesOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *CustomAnomalies) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The ID of the metric evaluated by the metric event
func (o CustomAnomaliesOutput) MetricId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomAnomalies) pulumi.StringPtrOutput { return v.MetricId }).(pulumi.StringPtrOutput)
}

// The metric selector that should be executed
func (o CustomAnomaliesOutput) MetricSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomAnomalies) pulumi.StringPtrOutput { return v.MetricSelector }).(pulumi.StringPtrOutput)
}

// The name of the metric event displayed in the UI
func (o CustomAnomaliesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomAnomalies) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Defines which dimension key should be used for the **alertingScope**
func (o CustomAnomaliesOutput) PrimaryDimensionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomAnomalies) pulumi.StringPtrOutput { return v.PrimaryDimensionKey }).(pulumi.StringPtrOutput)
}

// Defines the scope of the metric event. Only one filter is allowed per filter type, except for tags, where up to 3 are allowed. The filters are combined by conjunction
func (o CustomAnomaliesOutput) Scopes() CustomAnomaliesScopeArrayOutput {
	return o.ApplyT(func(v *CustomAnomalies) CustomAnomaliesScopeArrayOutput { return v.Scopes }).(CustomAnomaliesScopeArrayOutput)
}

// The type of the event to trigger on the threshold violation.  The `CUSTOM_ALERT` type is not correlated with other alerts. The `INFO` type does not open a problem
func (o CustomAnomaliesOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomAnomalies) pulumi.StringPtrOutput { return v.Severity }).(pulumi.StringPtrOutput)
}

// A monitoring strategy for a metric event config. This is the base version of the monitoring strategy, depending on the type,  the actual JSON may contain additional fields
func (o CustomAnomaliesOutput) Strategy() CustomAnomaliesStrategyOutput {
	return o.ApplyT(func(v *CustomAnomalies) CustomAnomaliesStrategyOutput { return v.Strategy }).(CustomAnomaliesStrategyOutput)
}

// allows for configuring properties that are not explicitly supported by the current version of this provider
func (o CustomAnomaliesOutput) Unknowns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomAnomalies) pulumi.StringPtrOutput { return v.Unknowns }).(pulumi.StringPtrOutput)
}

// The reason of a warning set on the config. The `NONE` means config has no warnings. The other supported value is `TOO_MANY_DIMS`
//
// Deprecated: This property is not meant to be configured from the outside. It will get removed completely in future versions
func (o CustomAnomaliesOutput) WarningReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomAnomalies) pulumi.StringPtrOutput { return v.WarningReason }).(pulumi.StringPtrOutput)
}

type CustomAnomaliesArrayOutput struct{ *pulumi.OutputState }

func (CustomAnomaliesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomAnomalies)(nil)).Elem()
}

func (o CustomAnomaliesArrayOutput) ToCustomAnomaliesArrayOutput() CustomAnomaliesArrayOutput {
	return o
}

func (o CustomAnomaliesArrayOutput) ToCustomAnomaliesArrayOutputWithContext(ctx context.Context) CustomAnomaliesArrayOutput {
	return o
}

func (o CustomAnomaliesArrayOutput) Index(i pulumi.IntInput) CustomAnomaliesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CustomAnomalies {
		return vs[0].([]*CustomAnomalies)[vs[1].(int)]
	}).(CustomAnomaliesOutput)
}

type CustomAnomaliesMapOutput struct{ *pulumi.OutputState }

func (CustomAnomaliesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomAnomalies)(nil)).Elem()
}

func (o CustomAnomaliesMapOutput) ToCustomAnomaliesMapOutput() CustomAnomaliesMapOutput {
	return o
}

func (o CustomAnomaliesMapOutput) ToCustomAnomaliesMapOutputWithContext(ctx context.Context) CustomAnomaliesMapOutput {
	return o
}

func (o CustomAnomaliesMapOutput) MapIndex(k pulumi.StringInput) CustomAnomaliesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CustomAnomalies {
		return vs[0].(map[string]*CustomAnomalies)[vs[1].(string)]
	}).(CustomAnomaliesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CustomAnomaliesInput)(nil)).Elem(), &CustomAnomalies{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomAnomaliesArrayInput)(nil)).Elem(), CustomAnomaliesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomAnomaliesMapInput)(nil)).Elem(), CustomAnomaliesMap{})
	pulumi.RegisterOutputType(CustomAnomaliesOutput{})
	pulumi.RegisterOutputType(CustomAnomaliesArrayOutput{})
	pulumi.RegisterOutputType(CustomAnomaliesMapOutput{})
}
