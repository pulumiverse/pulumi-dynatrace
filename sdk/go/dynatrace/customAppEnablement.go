// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type CustomAppEnablement struct {
	pulumi.CustomResourceState

	// Capture and analyze all user actions within your application. Enable [Real User Monitoring (RUM)](https://dt-url.net/1n2b0prq) to monitor and improve your application's performance, identify errors, and gain insight into your user's behavior and experience.
	Rum CustomAppEnablementRumOutput `pulumi:"rum"`
	// The scope of this setting (CUSTOM_APPLICATION). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
}

// NewCustomAppEnablement registers a new resource with the given unique name, arguments, and options.
func NewCustomAppEnablement(ctx *pulumi.Context,
	name string, args *CustomAppEnablementArgs, opts ...pulumi.ResourceOption) (*CustomAppEnablement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Rum == nil {
		return nil, errors.New("invalid value for required argument 'Rum'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CustomAppEnablement
	err := ctx.RegisterResource("dynatrace:index/customAppEnablement:CustomAppEnablement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCustomAppEnablement gets an existing CustomAppEnablement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCustomAppEnablement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CustomAppEnablementState, opts ...pulumi.ResourceOption) (*CustomAppEnablement, error) {
	var resource CustomAppEnablement
	err := ctx.ReadResource("dynatrace:index/customAppEnablement:CustomAppEnablement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CustomAppEnablement resources.
type customAppEnablementState struct {
	// Capture and analyze all user actions within your application. Enable [Real User Monitoring (RUM)](https://dt-url.net/1n2b0prq) to monitor and improve your application's performance, identify errors, and gain insight into your user's behavior and experience.
	Rum *CustomAppEnablementRum `pulumi:"rum"`
	// The scope of this setting (CUSTOM_APPLICATION). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
}

type CustomAppEnablementState struct {
	// Capture and analyze all user actions within your application. Enable [Real User Monitoring (RUM)](https://dt-url.net/1n2b0prq) to monitor and improve your application's performance, identify errors, and gain insight into your user's behavior and experience.
	Rum CustomAppEnablementRumPtrInput
	// The scope of this setting (CUSTOM_APPLICATION). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
}

func (CustomAppEnablementState) ElementType() reflect.Type {
	return reflect.TypeOf((*customAppEnablementState)(nil)).Elem()
}

type customAppEnablementArgs struct {
	// Capture and analyze all user actions within your application. Enable [Real User Monitoring (RUM)](https://dt-url.net/1n2b0prq) to monitor and improve your application's performance, identify errors, and gain insight into your user's behavior and experience.
	Rum CustomAppEnablementRum `pulumi:"rum"`
	// The scope of this setting (CUSTOM_APPLICATION). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
}

// The set of arguments for constructing a CustomAppEnablement resource.
type CustomAppEnablementArgs struct {
	// Capture and analyze all user actions within your application. Enable [Real User Monitoring (RUM)](https://dt-url.net/1n2b0prq) to monitor and improve your application's performance, identify errors, and gain insight into your user's behavior and experience.
	Rum CustomAppEnablementRumInput
	// The scope of this setting (CUSTOM_APPLICATION). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
}

func (CustomAppEnablementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*customAppEnablementArgs)(nil)).Elem()
}

type CustomAppEnablementInput interface {
	pulumi.Input

	ToCustomAppEnablementOutput() CustomAppEnablementOutput
	ToCustomAppEnablementOutputWithContext(ctx context.Context) CustomAppEnablementOutput
}

func (*CustomAppEnablement) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomAppEnablement)(nil)).Elem()
}

func (i *CustomAppEnablement) ToCustomAppEnablementOutput() CustomAppEnablementOutput {
	return i.ToCustomAppEnablementOutputWithContext(context.Background())
}

func (i *CustomAppEnablement) ToCustomAppEnablementOutputWithContext(ctx context.Context) CustomAppEnablementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomAppEnablementOutput)
}

// CustomAppEnablementArrayInput is an input type that accepts CustomAppEnablementArray and CustomAppEnablementArrayOutput values.
// You can construct a concrete instance of `CustomAppEnablementArrayInput` via:
//
//	CustomAppEnablementArray{ CustomAppEnablementArgs{...} }
type CustomAppEnablementArrayInput interface {
	pulumi.Input

	ToCustomAppEnablementArrayOutput() CustomAppEnablementArrayOutput
	ToCustomAppEnablementArrayOutputWithContext(context.Context) CustomAppEnablementArrayOutput
}

type CustomAppEnablementArray []CustomAppEnablementInput

func (CustomAppEnablementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomAppEnablement)(nil)).Elem()
}

func (i CustomAppEnablementArray) ToCustomAppEnablementArrayOutput() CustomAppEnablementArrayOutput {
	return i.ToCustomAppEnablementArrayOutputWithContext(context.Background())
}

func (i CustomAppEnablementArray) ToCustomAppEnablementArrayOutputWithContext(ctx context.Context) CustomAppEnablementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomAppEnablementArrayOutput)
}

// CustomAppEnablementMapInput is an input type that accepts CustomAppEnablementMap and CustomAppEnablementMapOutput values.
// You can construct a concrete instance of `CustomAppEnablementMapInput` via:
//
//	CustomAppEnablementMap{ "key": CustomAppEnablementArgs{...} }
type CustomAppEnablementMapInput interface {
	pulumi.Input

	ToCustomAppEnablementMapOutput() CustomAppEnablementMapOutput
	ToCustomAppEnablementMapOutputWithContext(context.Context) CustomAppEnablementMapOutput
}

type CustomAppEnablementMap map[string]CustomAppEnablementInput

func (CustomAppEnablementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomAppEnablement)(nil)).Elem()
}

func (i CustomAppEnablementMap) ToCustomAppEnablementMapOutput() CustomAppEnablementMapOutput {
	return i.ToCustomAppEnablementMapOutputWithContext(context.Background())
}

func (i CustomAppEnablementMap) ToCustomAppEnablementMapOutputWithContext(ctx context.Context) CustomAppEnablementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomAppEnablementMapOutput)
}

type CustomAppEnablementOutput struct{ *pulumi.OutputState }

func (CustomAppEnablementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomAppEnablement)(nil)).Elem()
}

func (o CustomAppEnablementOutput) ToCustomAppEnablementOutput() CustomAppEnablementOutput {
	return o
}

func (o CustomAppEnablementOutput) ToCustomAppEnablementOutputWithContext(ctx context.Context) CustomAppEnablementOutput {
	return o
}

// Capture and analyze all user actions within your application. Enable [Real User Monitoring (RUM)](https://dt-url.net/1n2b0prq) to monitor and improve your application's performance, identify errors, and gain insight into your user's behavior and experience.
func (o CustomAppEnablementOutput) Rum() CustomAppEnablementRumOutput {
	return o.ApplyT(func(v *CustomAppEnablement) CustomAppEnablementRumOutput { return v.Rum }).(CustomAppEnablementRumOutput)
}

// The scope of this setting (CUSTOM_APPLICATION). Omit this property if you want to cover the whole environment.
func (o CustomAppEnablementOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomAppEnablement) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

type CustomAppEnablementArrayOutput struct{ *pulumi.OutputState }

func (CustomAppEnablementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomAppEnablement)(nil)).Elem()
}

func (o CustomAppEnablementArrayOutput) ToCustomAppEnablementArrayOutput() CustomAppEnablementArrayOutput {
	return o
}

func (o CustomAppEnablementArrayOutput) ToCustomAppEnablementArrayOutputWithContext(ctx context.Context) CustomAppEnablementArrayOutput {
	return o
}

func (o CustomAppEnablementArrayOutput) Index(i pulumi.IntInput) CustomAppEnablementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CustomAppEnablement {
		return vs[0].([]*CustomAppEnablement)[vs[1].(int)]
	}).(CustomAppEnablementOutput)
}

type CustomAppEnablementMapOutput struct{ *pulumi.OutputState }

func (CustomAppEnablementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomAppEnablement)(nil)).Elem()
}

func (o CustomAppEnablementMapOutput) ToCustomAppEnablementMapOutput() CustomAppEnablementMapOutput {
	return o
}

func (o CustomAppEnablementMapOutput) ToCustomAppEnablementMapOutputWithContext(ctx context.Context) CustomAppEnablementMapOutput {
	return o
}

func (o CustomAppEnablementMapOutput) MapIndex(k pulumi.StringInput) CustomAppEnablementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CustomAppEnablement {
		return vs[0].(map[string]*CustomAppEnablement)[vs[1].(string)]
	}).(CustomAppEnablementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CustomAppEnablementInput)(nil)).Elem(), &CustomAppEnablement{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomAppEnablementArrayInput)(nil)).Elem(), CustomAppEnablementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomAppEnablementMapInput)(nil)).Elem(), CustomAppEnablementMap{})
	pulumi.RegisterOutputType(CustomAppEnablementOutput{})
	pulumi.RegisterOutputType(CustomAppEnablementArrayOutput{})
	pulumi.RegisterOutputType(CustomAppEnablementMapOutput{})
}
