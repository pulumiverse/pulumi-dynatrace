// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type HostNamingOrder struct {
	pulumi.CustomResourceState

	// The IDs of the naming rules to define the order for
	NamingRuleIds pulumi.StringArrayOutput `pulumi:"namingRuleIds"`
}

// NewHostNamingOrder registers a new resource with the given unique name, arguments, and options.
func NewHostNamingOrder(ctx *pulumi.Context,
	name string, args *HostNamingOrderArgs, opts ...pulumi.ResourceOption) (*HostNamingOrder, error) {
	if args == nil {
		args = &HostNamingOrderArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HostNamingOrder
	err := ctx.RegisterResource("dynatrace:index/hostNamingOrder:HostNamingOrder", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHostNamingOrder gets an existing HostNamingOrder resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHostNamingOrder(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HostNamingOrderState, opts ...pulumi.ResourceOption) (*HostNamingOrder, error) {
	var resource HostNamingOrder
	err := ctx.ReadResource("dynatrace:index/hostNamingOrder:HostNamingOrder", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HostNamingOrder resources.
type hostNamingOrderState struct {
	// The IDs of the naming rules to define the order for
	NamingRuleIds []string `pulumi:"namingRuleIds"`
}

type HostNamingOrderState struct {
	// The IDs of the naming rules to define the order for
	NamingRuleIds pulumi.StringArrayInput
}

func (HostNamingOrderState) ElementType() reflect.Type {
	return reflect.TypeOf((*hostNamingOrderState)(nil)).Elem()
}

type hostNamingOrderArgs struct {
	// The IDs of the naming rules to define the order for
	NamingRuleIds []string `pulumi:"namingRuleIds"`
}

// The set of arguments for constructing a HostNamingOrder resource.
type HostNamingOrderArgs struct {
	// The IDs of the naming rules to define the order for
	NamingRuleIds pulumi.StringArrayInput
}

func (HostNamingOrderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hostNamingOrderArgs)(nil)).Elem()
}

type HostNamingOrderInput interface {
	pulumi.Input

	ToHostNamingOrderOutput() HostNamingOrderOutput
	ToHostNamingOrderOutputWithContext(ctx context.Context) HostNamingOrderOutput
}

func (*HostNamingOrder) ElementType() reflect.Type {
	return reflect.TypeOf((**HostNamingOrder)(nil)).Elem()
}

func (i *HostNamingOrder) ToHostNamingOrderOutput() HostNamingOrderOutput {
	return i.ToHostNamingOrderOutputWithContext(context.Background())
}

func (i *HostNamingOrder) ToHostNamingOrderOutputWithContext(ctx context.Context) HostNamingOrderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostNamingOrderOutput)
}

// HostNamingOrderArrayInput is an input type that accepts HostNamingOrderArray and HostNamingOrderArrayOutput values.
// You can construct a concrete instance of `HostNamingOrderArrayInput` via:
//
//	HostNamingOrderArray{ HostNamingOrderArgs{...} }
type HostNamingOrderArrayInput interface {
	pulumi.Input

	ToHostNamingOrderArrayOutput() HostNamingOrderArrayOutput
	ToHostNamingOrderArrayOutputWithContext(context.Context) HostNamingOrderArrayOutput
}

type HostNamingOrderArray []HostNamingOrderInput

func (HostNamingOrderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HostNamingOrder)(nil)).Elem()
}

func (i HostNamingOrderArray) ToHostNamingOrderArrayOutput() HostNamingOrderArrayOutput {
	return i.ToHostNamingOrderArrayOutputWithContext(context.Background())
}

func (i HostNamingOrderArray) ToHostNamingOrderArrayOutputWithContext(ctx context.Context) HostNamingOrderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostNamingOrderArrayOutput)
}

// HostNamingOrderMapInput is an input type that accepts HostNamingOrderMap and HostNamingOrderMapOutput values.
// You can construct a concrete instance of `HostNamingOrderMapInput` via:
//
//	HostNamingOrderMap{ "key": HostNamingOrderArgs{...} }
type HostNamingOrderMapInput interface {
	pulumi.Input

	ToHostNamingOrderMapOutput() HostNamingOrderMapOutput
	ToHostNamingOrderMapOutputWithContext(context.Context) HostNamingOrderMapOutput
}

type HostNamingOrderMap map[string]HostNamingOrderInput

func (HostNamingOrderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HostNamingOrder)(nil)).Elem()
}

func (i HostNamingOrderMap) ToHostNamingOrderMapOutput() HostNamingOrderMapOutput {
	return i.ToHostNamingOrderMapOutputWithContext(context.Background())
}

func (i HostNamingOrderMap) ToHostNamingOrderMapOutputWithContext(ctx context.Context) HostNamingOrderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostNamingOrderMapOutput)
}

type HostNamingOrderOutput struct{ *pulumi.OutputState }

func (HostNamingOrderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostNamingOrder)(nil)).Elem()
}

func (o HostNamingOrderOutput) ToHostNamingOrderOutput() HostNamingOrderOutput {
	return o
}

func (o HostNamingOrderOutput) ToHostNamingOrderOutputWithContext(ctx context.Context) HostNamingOrderOutput {
	return o
}

// The IDs of the naming rules to define the order for
func (o HostNamingOrderOutput) NamingRuleIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostNamingOrder) pulumi.StringArrayOutput { return v.NamingRuleIds }).(pulumi.StringArrayOutput)
}

type HostNamingOrderArrayOutput struct{ *pulumi.OutputState }

func (HostNamingOrderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HostNamingOrder)(nil)).Elem()
}

func (o HostNamingOrderArrayOutput) ToHostNamingOrderArrayOutput() HostNamingOrderArrayOutput {
	return o
}

func (o HostNamingOrderArrayOutput) ToHostNamingOrderArrayOutputWithContext(ctx context.Context) HostNamingOrderArrayOutput {
	return o
}

func (o HostNamingOrderArrayOutput) Index(i pulumi.IntInput) HostNamingOrderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HostNamingOrder {
		return vs[0].([]*HostNamingOrder)[vs[1].(int)]
	}).(HostNamingOrderOutput)
}

type HostNamingOrderMapOutput struct{ *pulumi.OutputState }

func (HostNamingOrderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HostNamingOrder)(nil)).Elem()
}

func (o HostNamingOrderMapOutput) ToHostNamingOrderMapOutput() HostNamingOrderMapOutput {
	return o
}

func (o HostNamingOrderMapOutput) ToHostNamingOrderMapOutputWithContext(ctx context.Context) HostNamingOrderMapOutput {
	return o
}

func (o HostNamingOrderMapOutput) MapIndex(k pulumi.StringInput) HostNamingOrderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HostNamingOrder {
		return vs[0].(map[string]*HostNamingOrder)[vs[1].(string)]
	}).(HostNamingOrderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HostNamingOrderInput)(nil)).Elem(), &HostNamingOrder{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostNamingOrderArrayInput)(nil)).Elem(), HostNamingOrderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostNamingOrderMapInput)(nil)).Elem(), HostNamingOrderMap{})
	pulumi.RegisterOutputType(HostNamingOrderOutput{})
	pulumi.RegisterOutputType(HostNamingOrderArrayOutput{})
	pulumi.RegisterOutputType(HostNamingOrderMapOutput{})
}
