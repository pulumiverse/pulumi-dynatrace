// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type InfraopsAppFeatureFlags struct {
	pulumi.CustomResourceState

	// State of boolean feature
	BooleanValue pulumi.BoolPtrOutput `pulumi:"booleanValue"`
	// Name of the feature
	Name pulumi.StringOutput `pulumi:"name"`
	// State of numeric feature
	NumberValue pulumi.IntPtrOutput `pulumi:"numberValue"`
	// State of textual feature
	StringValue pulumi.StringPtrOutput `pulumi:"stringValue"`
	// Possible Values: `Boolean`, `Number`, `String`
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewInfraopsAppFeatureFlags registers a new resource with the given unique name, arguments, and options.
func NewInfraopsAppFeatureFlags(ctx *pulumi.Context,
	name string, args *InfraopsAppFeatureFlagsArgs, opts ...pulumi.ResourceOption) (*InfraopsAppFeatureFlags, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InfraopsAppFeatureFlags
	err := ctx.RegisterResource("dynatrace:index/infraopsAppFeatureFlags:InfraopsAppFeatureFlags", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInfraopsAppFeatureFlags gets an existing InfraopsAppFeatureFlags resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInfraopsAppFeatureFlags(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InfraopsAppFeatureFlagsState, opts ...pulumi.ResourceOption) (*InfraopsAppFeatureFlags, error) {
	var resource InfraopsAppFeatureFlags
	err := ctx.ReadResource("dynatrace:index/infraopsAppFeatureFlags:InfraopsAppFeatureFlags", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InfraopsAppFeatureFlags resources.
type infraopsAppFeatureFlagsState struct {
	// State of boolean feature
	BooleanValue *bool `pulumi:"booleanValue"`
	// Name of the feature
	Name *string `pulumi:"name"`
	// State of numeric feature
	NumberValue *int `pulumi:"numberValue"`
	// State of textual feature
	StringValue *string `pulumi:"stringValue"`
	// Possible Values: `Boolean`, `Number`, `String`
	Type *string `pulumi:"type"`
}

type InfraopsAppFeatureFlagsState struct {
	// State of boolean feature
	BooleanValue pulumi.BoolPtrInput
	// Name of the feature
	Name pulumi.StringPtrInput
	// State of numeric feature
	NumberValue pulumi.IntPtrInput
	// State of textual feature
	StringValue pulumi.StringPtrInput
	// Possible Values: `Boolean`, `Number`, `String`
	Type pulumi.StringPtrInput
}

func (InfraopsAppFeatureFlagsState) ElementType() reflect.Type {
	return reflect.TypeOf((*infraopsAppFeatureFlagsState)(nil)).Elem()
}

type infraopsAppFeatureFlagsArgs struct {
	// State of boolean feature
	BooleanValue *bool `pulumi:"booleanValue"`
	// Name of the feature
	Name *string `pulumi:"name"`
	// State of numeric feature
	NumberValue *int `pulumi:"numberValue"`
	// State of textual feature
	StringValue *string `pulumi:"stringValue"`
	// Possible Values: `Boolean`, `Number`, `String`
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a InfraopsAppFeatureFlags resource.
type InfraopsAppFeatureFlagsArgs struct {
	// State of boolean feature
	BooleanValue pulumi.BoolPtrInput
	// Name of the feature
	Name pulumi.StringPtrInput
	// State of numeric feature
	NumberValue pulumi.IntPtrInput
	// State of textual feature
	StringValue pulumi.StringPtrInput
	// Possible Values: `Boolean`, `Number`, `String`
	Type pulumi.StringInput
}

func (InfraopsAppFeatureFlagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*infraopsAppFeatureFlagsArgs)(nil)).Elem()
}

type InfraopsAppFeatureFlagsInput interface {
	pulumi.Input

	ToInfraopsAppFeatureFlagsOutput() InfraopsAppFeatureFlagsOutput
	ToInfraopsAppFeatureFlagsOutputWithContext(ctx context.Context) InfraopsAppFeatureFlagsOutput
}

func (*InfraopsAppFeatureFlags) ElementType() reflect.Type {
	return reflect.TypeOf((**InfraopsAppFeatureFlags)(nil)).Elem()
}

func (i *InfraopsAppFeatureFlags) ToInfraopsAppFeatureFlagsOutput() InfraopsAppFeatureFlagsOutput {
	return i.ToInfraopsAppFeatureFlagsOutputWithContext(context.Background())
}

func (i *InfraopsAppFeatureFlags) ToInfraopsAppFeatureFlagsOutputWithContext(ctx context.Context) InfraopsAppFeatureFlagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfraopsAppFeatureFlagsOutput)
}

// InfraopsAppFeatureFlagsArrayInput is an input type that accepts InfraopsAppFeatureFlagsArray and InfraopsAppFeatureFlagsArrayOutput values.
// You can construct a concrete instance of `InfraopsAppFeatureFlagsArrayInput` via:
//
//	InfraopsAppFeatureFlagsArray{ InfraopsAppFeatureFlagsArgs{...} }
type InfraopsAppFeatureFlagsArrayInput interface {
	pulumi.Input

	ToInfraopsAppFeatureFlagsArrayOutput() InfraopsAppFeatureFlagsArrayOutput
	ToInfraopsAppFeatureFlagsArrayOutputWithContext(context.Context) InfraopsAppFeatureFlagsArrayOutput
}

type InfraopsAppFeatureFlagsArray []InfraopsAppFeatureFlagsInput

func (InfraopsAppFeatureFlagsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InfraopsAppFeatureFlags)(nil)).Elem()
}

func (i InfraopsAppFeatureFlagsArray) ToInfraopsAppFeatureFlagsArrayOutput() InfraopsAppFeatureFlagsArrayOutput {
	return i.ToInfraopsAppFeatureFlagsArrayOutputWithContext(context.Background())
}

func (i InfraopsAppFeatureFlagsArray) ToInfraopsAppFeatureFlagsArrayOutputWithContext(ctx context.Context) InfraopsAppFeatureFlagsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfraopsAppFeatureFlagsArrayOutput)
}

// InfraopsAppFeatureFlagsMapInput is an input type that accepts InfraopsAppFeatureFlagsMap and InfraopsAppFeatureFlagsMapOutput values.
// You can construct a concrete instance of `InfraopsAppFeatureFlagsMapInput` via:
//
//	InfraopsAppFeatureFlagsMap{ "key": InfraopsAppFeatureFlagsArgs{...} }
type InfraopsAppFeatureFlagsMapInput interface {
	pulumi.Input

	ToInfraopsAppFeatureFlagsMapOutput() InfraopsAppFeatureFlagsMapOutput
	ToInfraopsAppFeatureFlagsMapOutputWithContext(context.Context) InfraopsAppFeatureFlagsMapOutput
}

type InfraopsAppFeatureFlagsMap map[string]InfraopsAppFeatureFlagsInput

func (InfraopsAppFeatureFlagsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InfraopsAppFeatureFlags)(nil)).Elem()
}

func (i InfraopsAppFeatureFlagsMap) ToInfraopsAppFeatureFlagsMapOutput() InfraopsAppFeatureFlagsMapOutput {
	return i.ToInfraopsAppFeatureFlagsMapOutputWithContext(context.Background())
}

func (i InfraopsAppFeatureFlagsMap) ToInfraopsAppFeatureFlagsMapOutputWithContext(ctx context.Context) InfraopsAppFeatureFlagsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfraopsAppFeatureFlagsMapOutput)
}

type InfraopsAppFeatureFlagsOutput struct{ *pulumi.OutputState }

func (InfraopsAppFeatureFlagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InfraopsAppFeatureFlags)(nil)).Elem()
}

func (o InfraopsAppFeatureFlagsOutput) ToInfraopsAppFeatureFlagsOutput() InfraopsAppFeatureFlagsOutput {
	return o
}

func (o InfraopsAppFeatureFlagsOutput) ToInfraopsAppFeatureFlagsOutputWithContext(ctx context.Context) InfraopsAppFeatureFlagsOutput {
	return o
}

// State of boolean feature
func (o InfraopsAppFeatureFlagsOutput) BooleanValue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InfraopsAppFeatureFlags) pulumi.BoolPtrOutput { return v.BooleanValue }).(pulumi.BoolPtrOutput)
}

// Name of the feature
func (o InfraopsAppFeatureFlagsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *InfraopsAppFeatureFlags) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// State of numeric feature
func (o InfraopsAppFeatureFlagsOutput) NumberValue() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InfraopsAppFeatureFlags) pulumi.IntPtrOutput { return v.NumberValue }).(pulumi.IntPtrOutput)
}

// State of textual feature
func (o InfraopsAppFeatureFlagsOutput) StringValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InfraopsAppFeatureFlags) pulumi.StringPtrOutput { return v.StringValue }).(pulumi.StringPtrOutput)
}

// Possible Values: `Boolean`, `Number`, `String`
func (o InfraopsAppFeatureFlagsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *InfraopsAppFeatureFlags) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type InfraopsAppFeatureFlagsArrayOutput struct{ *pulumi.OutputState }

func (InfraopsAppFeatureFlagsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InfraopsAppFeatureFlags)(nil)).Elem()
}

func (o InfraopsAppFeatureFlagsArrayOutput) ToInfraopsAppFeatureFlagsArrayOutput() InfraopsAppFeatureFlagsArrayOutput {
	return o
}

func (o InfraopsAppFeatureFlagsArrayOutput) ToInfraopsAppFeatureFlagsArrayOutputWithContext(ctx context.Context) InfraopsAppFeatureFlagsArrayOutput {
	return o
}

func (o InfraopsAppFeatureFlagsArrayOutput) Index(i pulumi.IntInput) InfraopsAppFeatureFlagsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InfraopsAppFeatureFlags {
		return vs[0].([]*InfraopsAppFeatureFlags)[vs[1].(int)]
	}).(InfraopsAppFeatureFlagsOutput)
}

type InfraopsAppFeatureFlagsMapOutput struct{ *pulumi.OutputState }

func (InfraopsAppFeatureFlagsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InfraopsAppFeatureFlags)(nil)).Elem()
}

func (o InfraopsAppFeatureFlagsMapOutput) ToInfraopsAppFeatureFlagsMapOutput() InfraopsAppFeatureFlagsMapOutput {
	return o
}

func (o InfraopsAppFeatureFlagsMapOutput) ToInfraopsAppFeatureFlagsMapOutputWithContext(ctx context.Context) InfraopsAppFeatureFlagsMapOutput {
	return o
}

func (o InfraopsAppFeatureFlagsMapOutput) MapIndex(k pulumi.StringInput) InfraopsAppFeatureFlagsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InfraopsAppFeatureFlags {
		return vs[0].(map[string]*InfraopsAppFeatureFlags)[vs[1].(string)]
	}).(InfraopsAppFeatureFlagsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InfraopsAppFeatureFlagsInput)(nil)).Elem(), &InfraopsAppFeatureFlags{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfraopsAppFeatureFlagsArrayInput)(nil)).Elem(), InfraopsAppFeatureFlagsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfraopsAppFeatureFlagsMapInput)(nil)).Elem(), InfraopsAppFeatureFlagsMap{})
	pulumi.RegisterOutputType(InfraopsAppFeatureFlagsOutput{})
	pulumi.RegisterOutputType(InfraopsAppFeatureFlagsArrayOutput{})
	pulumi.RegisterOutputType(InfraopsAppFeatureFlagsMapOutput{})
}
