// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type HttpMonitorCookies struct {
	pulumi.CustomResourceState

	// no documentation available
	Cookies HttpMonitorCookiesCookiesPtrOutput `pulumi:"cookies"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The scope of this setting (HTTP_CHECK)
	Scope pulumi.StringOutput `pulumi:"scope"`
}

// NewHttpMonitorCookies registers a new resource with the given unique name, arguments, and options.
func NewHttpMonitorCookies(ctx *pulumi.Context,
	name string, args *HttpMonitorCookiesArgs, opts ...pulumi.ResourceOption) (*HttpMonitorCookies, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Scope == nil {
		return nil, errors.New("invalid value for required argument 'Scope'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HttpMonitorCookies
	err := ctx.RegisterResource("dynatrace:index/httpMonitorCookies:HttpMonitorCookies", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHttpMonitorCookies gets an existing HttpMonitorCookies resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHttpMonitorCookies(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HttpMonitorCookiesState, opts ...pulumi.ResourceOption) (*HttpMonitorCookies, error) {
	var resource HttpMonitorCookies
	err := ctx.ReadResource("dynatrace:index/httpMonitorCookies:HttpMonitorCookies", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HttpMonitorCookies resources.
type httpMonitorCookiesState struct {
	// no documentation available
	Cookies *HttpMonitorCookiesCookies `pulumi:"cookies"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// The scope of this setting (HTTP_CHECK)
	Scope *string `pulumi:"scope"`
}

type HttpMonitorCookiesState struct {
	// no documentation available
	Cookies HttpMonitorCookiesCookiesPtrInput
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// The scope of this setting (HTTP_CHECK)
	Scope pulumi.StringPtrInput
}

func (HttpMonitorCookiesState) ElementType() reflect.Type {
	return reflect.TypeOf((*httpMonitorCookiesState)(nil)).Elem()
}

type httpMonitorCookiesArgs struct {
	// no documentation available
	Cookies *HttpMonitorCookiesCookies `pulumi:"cookies"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// The scope of this setting (HTTP_CHECK)
	Scope string `pulumi:"scope"`
}

// The set of arguments for constructing a HttpMonitorCookies resource.
type HttpMonitorCookiesArgs struct {
	// no documentation available
	Cookies HttpMonitorCookiesCookiesPtrInput
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// The scope of this setting (HTTP_CHECK)
	Scope pulumi.StringInput
}

func (HttpMonitorCookiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*httpMonitorCookiesArgs)(nil)).Elem()
}

type HttpMonitorCookiesInput interface {
	pulumi.Input

	ToHttpMonitorCookiesOutput() HttpMonitorCookiesOutput
	ToHttpMonitorCookiesOutputWithContext(ctx context.Context) HttpMonitorCookiesOutput
}

func (*HttpMonitorCookies) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpMonitorCookies)(nil)).Elem()
}

func (i *HttpMonitorCookies) ToHttpMonitorCookiesOutput() HttpMonitorCookiesOutput {
	return i.ToHttpMonitorCookiesOutputWithContext(context.Background())
}

func (i *HttpMonitorCookies) ToHttpMonitorCookiesOutputWithContext(ctx context.Context) HttpMonitorCookiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpMonitorCookiesOutput)
}

// HttpMonitorCookiesArrayInput is an input type that accepts HttpMonitorCookiesArray and HttpMonitorCookiesArrayOutput values.
// You can construct a concrete instance of `HttpMonitorCookiesArrayInput` via:
//
//	HttpMonitorCookiesArray{ HttpMonitorCookiesArgs{...} }
type HttpMonitorCookiesArrayInput interface {
	pulumi.Input

	ToHttpMonitorCookiesArrayOutput() HttpMonitorCookiesArrayOutput
	ToHttpMonitorCookiesArrayOutputWithContext(context.Context) HttpMonitorCookiesArrayOutput
}

type HttpMonitorCookiesArray []HttpMonitorCookiesInput

func (HttpMonitorCookiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HttpMonitorCookies)(nil)).Elem()
}

func (i HttpMonitorCookiesArray) ToHttpMonitorCookiesArrayOutput() HttpMonitorCookiesArrayOutput {
	return i.ToHttpMonitorCookiesArrayOutputWithContext(context.Background())
}

func (i HttpMonitorCookiesArray) ToHttpMonitorCookiesArrayOutputWithContext(ctx context.Context) HttpMonitorCookiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpMonitorCookiesArrayOutput)
}

// HttpMonitorCookiesMapInput is an input type that accepts HttpMonitorCookiesMap and HttpMonitorCookiesMapOutput values.
// You can construct a concrete instance of `HttpMonitorCookiesMapInput` via:
//
//	HttpMonitorCookiesMap{ "key": HttpMonitorCookiesArgs{...} }
type HttpMonitorCookiesMapInput interface {
	pulumi.Input

	ToHttpMonitorCookiesMapOutput() HttpMonitorCookiesMapOutput
	ToHttpMonitorCookiesMapOutputWithContext(context.Context) HttpMonitorCookiesMapOutput
}

type HttpMonitorCookiesMap map[string]HttpMonitorCookiesInput

func (HttpMonitorCookiesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HttpMonitorCookies)(nil)).Elem()
}

func (i HttpMonitorCookiesMap) ToHttpMonitorCookiesMapOutput() HttpMonitorCookiesMapOutput {
	return i.ToHttpMonitorCookiesMapOutputWithContext(context.Background())
}

func (i HttpMonitorCookiesMap) ToHttpMonitorCookiesMapOutputWithContext(ctx context.Context) HttpMonitorCookiesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpMonitorCookiesMapOutput)
}

type HttpMonitorCookiesOutput struct{ *pulumi.OutputState }

func (HttpMonitorCookiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpMonitorCookies)(nil)).Elem()
}

func (o HttpMonitorCookiesOutput) ToHttpMonitorCookiesOutput() HttpMonitorCookiesOutput {
	return o
}

func (o HttpMonitorCookiesOutput) ToHttpMonitorCookiesOutputWithContext(ctx context.Context) HttpMonitorCookiesOutput {
	return o
}

// no documentation available
func (o HttpMonitorCookiesOutput) Cookies() HttpMonitorCookiesCookiesPtrOutput {
	return o.ApplyT(func(v *HttpMonitorCookies) HttpMonitorCookiesCookiesPtrOutput { return v.Cookies }).(HttpMonitorCookiesCookiesPtrOutput)
}

// This setting is enabled (`true`) or disabled (`false`)
func (o HttpMonitorCookiesOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *HttpMonitorCookies) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The scope of this setting (HTTP_CHECK)
func (o HttpMonitorCookiesOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v *HttpMonitorCookies) pulumi.StringOutput { return v.Scope }).(pulumi.StringOutput)
}

type HttpMonitorCookiesArrayOutput struct{ *pulumi.OutputState }

func (HttpMonitorCookiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HttpMonitorCookies)(nil)).Elem()
}

func (o HttpMonitorCookiesArrayOutput) ToHttpMonitorCookiesArrayOutput() HttpMonitorCookiesArrayOutput {
	return o
}

func (o HttpMonitorCookiesArrayOutput) ToHttpMonitorCookiesArrayOutputWithContext(ctx context.Context) HttpMonitorCookiesArrayOutput {
	return o
}

func (o HttpMonitorCookiesArrayOutput) Index(i pulumi.IntInput) HttpMonitorCookiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HttpMonitorCookies {
		return vs[0].([]*HttpMonitorCookies)[vs[1].(int)]
	}).(HttpMonitorCookiesOutput)
}

type HttpMonitorCookiesMapOutput struct{ *pulumi.OutputState }

func (HttpMonitorCookiesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HttpMonitorCookies)(nil)).Elem()
}

func (o HttpMonitorCookiesMapOutput) ToHttpMonitorCookiesMapOutput() HttpMonitorCookiesMapOutput {
	return o
}

func (o HttpMonitorCookiesMapOutput) ToHttpMonitorCookiesMapOutputWithContext(ctx context.Context) HttpMonitorCookiesMapOutput {
	return o
}

func (o HttpMonitorCookiesMapOutput) MapIndex(k pulumi.StringInput) HttpMonitorCookiesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HttpMonitorCookies {
		return vs[0].(map[string]*HttpMonitorCookies)[vs[1].(string)]
	}).(HttpMonitorCookiesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HttpMonitorCookiesInput)(nil)).Elem(), &HttpMonitorCookies{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpMonitorCookiesArrayInput)(nil)).Elem(), HttpMonitorCookiesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpMonitorCookiesMapInput)(nil)).Elem(), HttpMonitorCookiesMap{})
	pulumi.RegisterOutputType(HttpMonitorCookiesOutput{})
	pulumi.RegisterOutputType(HttpMonitorCookiesArrayOutput{})
	pulumi.RegisterOutputType(HttpMonitorCookiesMapOutput{})
}
