// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

// > This resource requires one of the cluster API token scopes **Control Management** (`ControlManagement`), **Service Provider API** (`ServiceProviderAPI`), or **Unattended Install** (`UnattendedInstall`)
//
// ## Dynatrace Documentation
//
// - Can I use a proxy for internet access? - https://www.dynatrace.com/support/help/managed-cluster/configuration/can-i-use-a-proxy-for-internet-access
//
// - Cluster API v1 - https://www.dynatrace.com/support/help/managed-cluster/cluster-api/cluster-api-v1
//
// ## Resource Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dynatrace.NewManagedInternetProxy(ctx, "test", &dynatrace.ManagedInternetProxyArgs{
//				NonProxyHosts: pulumi.StringArray{
//					pulumi.String("string"),
//				},
//				Password: pulumi.String("string"),
//				Port:     pulumi.Int(65535),
//				Scheme:   pulumi.String("http"),
//				Server:   pulumi.String("zAOE-GV81/65oVgaIlPYTCADGSPFJ9ZqXYNGbxn97dbq:flAI2E8e8bfOvlmaGu"),
//				User:     pulumi.String("string"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ManagedInternetProxy struct {
	pulumi.CustomResourceState

	// Definition of hosts for which proxy won't be used. You can define multiple hosts. Each host can start or end with wildcard '*' for instance to match whole domain.
	NonProxyHosts pulumi.StringArrayOutput `pulumi:"nonProxyHosts"`
	// Password of proxy server, null means do not change previous value
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Port of proxy server
	Port pulumi.IntOutput `pulumi:"port"`
	// Protocol which proxy server uses
	Scheme pulumi.StringOutput `pulumi:"scheme"`
	// Address (either IP or Hostname) of proxy server
	Server pulumi.StringOutput `pulumi:"server"`
	// User of proxy server, null means do not change previous value
	User pulumi.StringPtrOutput `pulumi:"user"`
}

// NewManagedInternetProxy registers a new resource with the given unique name, arguments, and options.
func NewManagedInternetProxy(ctx *pulumi.Context,
	name string, args *ManagedInternetProxyArgs, opts ...pulumi.ResourceOption) (*ManagedInternetProxy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Port == nil {
		return nil, errors.New("invalid value for required argument 'Port'")
	}
	if args.Scheme == nil {
		return nil, errors.New("invalid value for required argument 'Scheme'")
	}
	if args.Server == nil {
		return nil, errors.New("invalid value for required argument 'Server'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ManagedInternetProxy
	err := ctx.RegisterResource("dynatrace:index/managedInternetProxy:ManagedInternetProxy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedInternetProxy gets an existing ManagedInternetProxy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedInternetProxy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedInternetProxyState, opts ...pulumi.ResourceOption) (*ManagedInternetProxy, error) {
	var resource ManagedInternetProxy
	err := ctx.ReadResource("dynatrace:index/managedInternetProxy:ManagedInternetProxy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedInternetProxy resources.
type managedInternetProxyState struct {
	// Definition of hosts for which proxy won't be used. You can define multiple hosts. Each host can start or end with wildcard '*' for instance to match whole domain.
	NonProxyHosts []string `pulumi:"nonProxyHosts"`
	// Password of proxy server, null means do not change previous value
	Password *string `pulumi:"password"`
	// Port of proxy server
	Port *int `pulumi:"port"`
	// Protocol which proxy server uses
	Scheme *string `pulumi:"scheme"`
	// Address (either IP or Hostname) of proxy server
	Server *string `pulumi:"server"`
	// User of proxy server, null means do not change previous value
	User *string `pulumi:"user"`
}

type ManagedInternetProxyState struct {
	// Definition of hosts for which proxy won't be used. You can define multiple hosts. Each host can start or end with wildcard '*' for instance to match whole domain.
	NonProxyHosts pulumi.StringArrayInput
	// Password of proxy server, null means do not change previous value
	Password pulumi.StringPtrInput
	// Port of proxy server
	Port pulumi.IntPtrInput
	// Protocol which proxy server uses
	Scheme pulumi.StringPtrInput
	// Address (either IP or Hostname) of proxy server
	Server pulumi.StringPtrInput
	// User of proxy server, null means do not change previous value
	User pulumi.StringPtrInput
}

func (ManagedInternetProxyState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedInternetProxyState)(nil)).Elem()
}

type managedInternetProxyArgs struct {
	// Definition of hosts for which proxy won't be used. You can define multiple hosts. Each host can start or end with wildcard '*' for instance to match whole domain.
	NonProxyHosts []string `pulumi:"nonProxyHosts"`
	// Password of proxy server, null means do not change previous value
	Password *string `pulumi:"password"`
	// Port of proxy server
	Port int `pulumi:"port"`
	// Protocol which proxy server uses
	Scheme string `pulumi:"scheme"`
	// Address (either IP or Hostname) of proxy server
	Server string `pulumi:"server"`
	// User of proxy server, null means do not change previous value
	User *string `pulumi:"user"`
}

// The set of arguments for constructing a ManagedInternetProxy resource.
type ManagedInternetProxyArgs struct {
	// Definition of hosts for which proxy won't be used. You can define multiple hosts. Each host can start or end with wildcard '*' for instance to match whole domain.
	NonProxyHosts pulumi.StringArrayInput
	// Password of proxy server, null means do not change previous value
	Password pulumi.StringPtrInput
	// Port of proxy server
	Port pulumi.IntInput
	// Protocol which proxy server uses
	Scheme pulumi.StringInput
	// Address (either IP or Hostname) of proxy server
	Server pulumi.StringInput
	// User of proxy server, null means do not change previous value
	User pulumi.StringPtrInput
}

func (ManagedInternetProxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedInternetProxyArgs)(nil)).Elem()
}

type ManagedInternetProxyInput interface {
	pulumi.Input

	ToManagedInternetProxyOutput() ManagedInternetProxyOutput
	ToManagedInternetProxyOutputWithContext(ctx context.Context) ManagedInternetProxyOutput
}

func (*ManagedInternetProxy) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedInternetProxy)(nil)).Elem()
}

func (i *ManagedInternetProxy) ToManagedInternetProxyOutput() ManagedInternetProxyOutput {
	return i.ToManagedInternetProxyOutputWithContext(context.Background())
}

func (i *ManagedInternetProxy) ToManagedInternetProxyOutputWithContext(ctx context.Context) ManagedInternetProxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedInternetProxyOutput)
}

// ManagedInternetProxyArrayInput is an input type that accepts ManagedInternetProxyArray and ManagedInternetProxyArrayOutput values.
// You can construct a concrete instance of `ManagedInternetProxyArrayInput` via:
//
//	ManagedInternetProxyArray{ ManagedInternetProxyArgs{...} }
type ManagedInternetProxyArrayInput interface {
	pulumi.Input

	ToManagedInternetProxyArrayOutput() ManagedInternetProxyArrayOutput
	ToManagedInternetProxyArrayOutputWithContext(context.Context) ManagedInternetProxyArrayOutput
}

type ManagedInternetProxyArray []ManagedInternetProxyInput

func (ManagedInternetProxyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedInternetProxy)(nil)).Elem()
}

func (i ManagedInternetProxyArray) ToManagedInternetProxyArrayOutput() ManagedInternetProxyArrayOutput {
	return i.ToManagedInternetProxyArrayOutputWithContext(context.Background())
}

func (i ManagedInternetProxyArray) ToManagedInternetProxyArrayOutputWithContext(ctx context.Context) ManagedInternetProxyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedInternetProxyArrayOutput)
}

// ManagedInternetProxyMapInput is an input type that accepts ManagedInternetProxyMap and ManagedInternetProxyMapOutput values.
// You can construct a concrete instance of `ManagedInternetProxyMapInput` via:
//
//	ManagedInternetProxyMap{ "key": ManagedInternetProxyArgs{...} }
type ManagedInternetProxyMapInput interface {
	pulumi.Input

	ToManagedInternetProxyMapOutput() ManagedInternetProxyMapOutput
	ToManagedInternetProxyMapOutputWithContext(context.Context) ManagedInternetProxyMapOutput
}

type ManagedInternetProxyMap map[string]ManagedInternetProxyInput

func (ManagedInternetProxyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedInternetProxy)(nil)).Elem()
}

func (i ManagedInternetProxyMap) ToManagedInternetProxyMapOutput() ManagedInternetProxyMapOutput {
	return i.ToManagedInternetProxyMapOutputWithContext(context.Background())
}

func (i ManagedInternetProxyMap) ToManagedInternetProxyMapOutputWithContext(ctx context.Context) ManagedInternetProxyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedInternetProxyMapOutput)
}

type ManagedInternetProxyOutput struct{ *pulumi.OutputState }

func (ManagedInternetProxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedInternetProxy)(nil)).Elem()
}

func (o ManagedInternetProxyOutput) ToManagedInternetProxyOutput() ManagedInternetProxyOutput {
	return o
}

func (o ManagedInternetProxyOutput) ToManagedInternetProxyOutputWithContext(ctx context.Context) ManagedInternetProxyOutput {
	return o
}

// Definition of hosts for which proxy won't be used. You can define multiple hosts. Each host can start or end with wildcard '*' for instance to match whole domain.
func (o ManagedInternetProxyOutput) NonProxyHosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedInternetProxy) pulumi.StringArrayOutput { return v.NonProxyHosts }).(pulumi.StringArrayOutput)
}

// Password of proxy server, null means do not change previous value
func (o ManagedInternetProxyOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedInternetProxy) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Port of proxy server
func (o ManagedInternetProxyOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *ManagedInternetProxy) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// Protocol which proxy server uses
func (o ManagedInternetProxyOutput) Scheme() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedInternetProxy) pulumi.StringOutput { return v.Scheme }).(pulumi.StringOutput)
}

// Address (either IP or Hostname) of proxy server
func (o ManagedInternetProxyOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedInternetProxy) pulumi.StringOutput { return v.Server }).(pulumi.StringOutput)
}

// User of proxy server, null means do not change previous value
func (o ManagedInternetProxyOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedInternetProxy) pulumi.StringPtrOutput { return v.User }).(pulumi.StringPtrOutput)
}

type ManagedInternetProxyArrayOutput struct{ *pulumi.OutputState }

func (ManagedInternetProxyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedInternetProxy)(nil)).Elem()
}

func (o ManagedInternetProxyArrayOutput) ToManagedInternetProxyArrayOutput() ManagedInternetProxyArrayOutput {
	return o
}

func (o ManagedInternetProxyArrayOutput) ToManagedInternetProxyArrayOutputWithContext(ctx context.Context) ManagedInternetProxyArrayOutput {
	return o
}

func (o ManagedInternetProxyArrayOutput) Index(i pulumi.IntInput) ManagedInternetProxyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ManagedInternetProxy {
		return vs[0].([]*ManagedInternetProxy)[vs[1].(int)]
	}).(ManagedInternetProxyOutput)
}

type ManagedInternetProxyMapOutput struct{ *pulumi.OutputState }

func (ManagedInternetProxyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedInternetProxy)(nil)).Elem()
}

func (o ManagedInternetProxyMapOutput) ToManagedInternetProxyMapOutput() ManagedInternetProxyMapOutput {
	return o
}

func (o ManagedInternetProxyMapOutput) ToManagedInternetProxyMapOutputWithContext(ctx context.Context) ManagedInternetProxyMapOutput {
	return o
}

func (o ManagedInternetProxyMapOutput) MapIndex(k pulumi.StringInput) ManagedInternetProxyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ManagedInternetProxy {
		return vs[0].(map[string]*ManagedInternetProxy)[vs[1].(string)]
	}).(ManagedInternetProxyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedInternetProxyInput)(nil)).Elem(), &ManagedInternetProxy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedInternetProxyArrayInput)(nil)).Elem(), ManagedInternetProxyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedInternetProxyMapInput)(nil)).Elem(), ManagedInternetProxyMap{})
	pulumi.RegisterOutputType(ManagedInternetProxyOutput{})
	pulumi.RegisterOutputType(ManagedInternetProxyArrayOutput{})
	pulumi.RegisterOutputType(ManagedInternetProxyMapOutput{})
}
