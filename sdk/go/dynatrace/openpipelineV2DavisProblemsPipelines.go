// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OpenpipelineV2DavisProblemsPipelines struct {
	pulumi.CustomResourceState

	// Cost allocation stage
	CostAllocation OpenpipelineV2DavisProblemsPipelinesCostAllocationOutput `pulumi:"costAllocation"`
	// Custom pipeline id
	CustomId pulumi.StringOutput `pulumi:"customId"`
	// Data extraction stage
	DataExtraction OpenpipelineV2DavisProblemsPipelinesDataExtractionOutput `pulumi:"dataExtraction"`
	// Davis event extraction stage
	Davis OpenpipelineV2DavisProblemsPipelinesDavisOutput `pulumi:"davis"`
	// Display name
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Metrics extraction stage
	MetricExtraction OpenpipelineV2DavisProblemsPipelinesMetricExtractionOutput `pulumi:"metricExtraction"`
	// Processing stage
	Processing OpenpipelineV2DavisProblemsPipelinesProcessingOutput `pulumi:"processing"`
	// Product allocation stage
	ProductAllocation OpenpipelineV2DavisProblemsPipelinesProductAllocationOutput `pulumi:"productAllocation"`
	// Security context stage
	SecurityContext OpenpipelineV2DavisProblemsPipelinesSecurityContextOutput `pulumi:"securityContext"`
	// Storage stage
	Storage OpenpipelineV2DavisProblemsPipelinesStorageOutput `pulumi:"storage"`
}

// NewOpenpipelineV2DavisProblemsPipelines registers a new resource with the given unique name, arguments, and options.
func NewOpenpipelineV2DavisProblemsPipelines(ctx *pulumi.Context,
	name string, args *OpenpipelineV2DavisProblemsPipelinesArgs, opts ...pulumi.ResourceOption) (*OpenpipelineV2DavisProblemsPipelines, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CostAllocation == nil {
		return nil, errors.New("invalid value for required argument 'CostAllocation'")
	}
	if args.CustomId == nil {
		return nil, errors.New("invalid value for required argument 'CustomId'")
	}
	if args.DataExtraction == nil {
		return nil, errors.New("invalid value for required argument 'DataExtraction'")
	}
	if args.Davis == nil {
		return nil, errors.New("invalid value for required argument 'Davis'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.MetricExtraction == nil {
		return nil, errors.New("invalid value for required argument 'MetricExtraction'")
	}
	if args.Processing == nil {
		return nil, errors.New("invalid value for required argument 'Processing'")
	}
	if args.ProductAllocation == nil {
		return nil, errors.New("invalid value for required argument 'ProductAllocation'")
	}
	if args.SecurityContext == nil {
		return nil, errors.New("invalid value for required argument 'SecurityContext'")
	}
	if args.Storage == nil {
		return nil, errors.New("invalid value for required argument 'Storage'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenpipelineV2DavisProblemsPipelines
	err := ctx.RegisterResource("dynatrace:index/openpipelineV2DavisProblemsPipelines:OpenpipelineV2DavisProblemsPipelines", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenpipelineV2DavisProblemsPipelines gets an existing OpenpipelineV2DavisProblemsPipelines resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenpipelineV2DavisProblemsPipelines(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenpipelineV2DavisProblemsPipelinesState, opts ...pulumi.ResourceOption) (*OpenpipelineV2DavisProblemsPipelines, error) {
	var resource OpenpipelineV2DavisProblemsPipelines
	err := ctx.ReadResource("dynatrace:index/openpipelineV2DavisProblemsPipelines:OpenpipelineV2DavisProblemsPipelines", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenpipelineV2DavisProblemsPipelines resources.
type openpipelineV2DavisProblemsPipelinesState struct {
	// Cost allocation stage
	CostAllocation *OpenpipelineV2DavisProblemsPipelinesCostAllocation `pulumi:"costAllocation"`
	// Custom pipeline id
	CustomId *string `pulumi:"customId"`
	// Data extraction stage
	DataExtraction *OpenpipelineV2DavisProblemsPipelinesDataExtraction `pulumi:"dataExtraction"`
	// Davis event extraction stage
	Davis *OpenpipelineV2DavisProblemsPipelinesDavis `pulumi:"davis"`
	// Display name
	DisplayName *string `pulumi:"displayName"`
	// Metrics extraction stage
	MetricExtraction *OpenpipelineV2DavisProblemsPipelinesMetricExtraction `pulumi:"metricExtraction"`
	// Processing stage
	Processing *OpenpipelineV2DavisProblemsPipelinesProcessing `pulumi:"processing"`
	// Product allocation stage
	ProductAllocation *OpenpipelineV2DavisProblemsPipelinesProductAllocation `pulumi:"productAllocation"`
	// Security context stage
	SecurityContext *OpenpipelineV2DavisProblemsPipelinesSecurityContext `pulumi:"securityContext"`
	// Storage stage
	Storage *OpenpipelineV2DavisProblemsPipelinesStorage `pulumi:"storage"`
}

type OpenpipelineV2DavisProblemsPipelinesState struct {
	// Cost allocation stage
	CostAllocation OpenpipelineV2DavisProblemsPipelinesCostAllocationPtrInput
	// Custom pipeline id
	CustomId pulumi.StringPtrInput
	// Data extraction stage
	DataExtraction OpenpipelineV2DavisProblemsPipelinesDataExtractionPtrInput
	// Davis event extraction stage
	Davis OpenpipelineV2DavisProblemsPipelinesDavisPtrInput
	// Display name
	DisplayName pulumi.StringPtrInput
	// Metrics extraction stage
	MetricExtraction OpenpipelineV2DavisProblemsPipelinesMetricExtractionPtrInput
	// Processing stage
	Processing OpenpipelineV2DavisProblemsPipelinesProcessingPtrInput
	// Product allocation stage
	ProductAllocation OpenpipelineV2DavisProblemsPipelinesProductAllocationPtrInput
	// Security context stage
	SecurityContext OpenpipelineV2DavisProblemsPipelinesSecurityContextPtrInput
	// Storage stage
	Storage OpenpipelineV2DavisProblemsPipelinesStoragePtrInput
}

func (OpenpipelineV2DavisProblemsPipelinesState) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2DavisProblemsPipelinesState)(nil)).Elem()
}

type openpipelineV2DavisProblemsPipelinesArgs struct {
	// Cost allocation stage
	CostAllocation OpenpipelineV2DavisProblemsPipelinesCostAllocation `pulumi:"costAllocation"`
	// Custom pipeline id
	CustomId string `pulumi:"customId"`
	// Data extraction stage
	DataExtraction OpenpipelineV2DavisProblemsPipelinesDataExtraction `pulumi:"dataExtraction"`
	// Davis event extraction stage
	Davis OpenpipelineV2DavisProblemsPipelinesDavis `pulumi:"davis"`
	// Display name
	DisplayName string `pulumi:"displayName"`
	// Metrics extraction stage
	MetricExtraction OpenpipelineV2DavisProblemsPipelinesMetricExtraction `pulumi:"metricExtraction"`
	// Processing stage
	Processing OpenpipelineV2DavisProblemsPipelinesProcessing `pulumi:"processing"`
	// Product allocation stage
	ProductAllocation OpenpipelineV2DavisProblemsPipelinesProductAllocation `pulumi:"productAllocation"`
	// Security context stage
	SecurityContext OpenpipelineV2DavisProblemsPipelinesSecurityContext `pulumi:"securityContext"`
	// Storage stage
	Storage OpenpipelineV2DavisProblemsPipelinesStorage `pulumi:"storage"`
}

// The set of arguments for constructing a OpenpipelineV2DavisProblemsPipelines resource.
type OpenpipelineV2DavisProblemsPipelinesArgs struct {
	// Cost allocation stage
	CostAllocation OpenpipelineV2DavisProblemsPipelinesCostAllocationInput
	// Custom pipeline id
	CustomId pulumi.StringInput
	// Data extraction stage
	DataExtraction OpenpipelineV2DavisProblemsPipelinesDataExtractionInput
	// Davis event extraction stage
	Davis OpenpipelineV2DavisProblemsPipelinesDavisInput
	// Display name
	DisplayName pulumi.StringInput
	// Metrics extraction stage
	MetricExtraction OpenpipelineV2DavisProblemsPipelinesMetricExtractionInput
	// Processing stage
	Processing OpenpipelineV2DavisProblemsPipelinesProcessingInput
	// Product allocation stage
	ProductAllocation OpenpipelineV2DavisProblemsPipelinesProductAllocationInput
	// Security context stage
	SecurityContext OpenpipelineV2DavisProblemsPipelinesSecurityContextInput
	// Storage stage
	Storage OpenpipelineV2DavisProblemsPipelinesStorageInput
}

func (OpenpipelineV2DavisProblemsPipelinesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2DavisProblemsPipelinesArgs)(nil)).Elem()
}

type OpenpipelineV2DavisProblemsPipelinesInput interface {
	pulumi.Input

	ToOpenpipelineV2DavisProblemsPipelinesOutput() OpenpipelineV2DavisProblemsPipelinesOutput
	ToOpenpipelineV2DavisProblemsPipelinesOutputWithContext(ctx context.Context) OpenpipelineV2DavisProblemsPipelinesOutput
}

func (*OpenpipelineV2DavisProblemsPipelines) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2DavisProblemsPipelines)(nil)).Elem()
}

func (i *OpenpipelineV2DavisProblemsPipelines) ToOpenpipelineV2DavisProblemsPipelinesOutput() OpenpipelineV2DavisProblemsPipelinesOutput {
	return i.ToOpenpipelineV2DavisProblemsPipelinesOutputWithContext(context.Background())
}

func (i *OpenpipelineV2DavisProblemsPipelines) ToOpenpipelineV2DavisProblemsPipelinesOutputWithContext(ctx context.Context) OpenpipelineV2DavisProblemsPipelinesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2DavisProblemsPipelinesOutput)
}

// OpenpipelineV2DavisProblemsPipelinesArrayInput is an input type that accepts OpenpipelineV2DavisProblemsPipelinesArray and OpenpipelineV2DavisProblemsPipelinesArrayOutput values.
// You can construct a concrete instance of `OpenpipelineV2DavisProblemsPipelinesArrayInput` via:
//
//	OpenpipelineV2DavisProblemsPipelinesArray{ OpenpipelineV2DavisProblemsPipelinesArgs{...} }
type OpenpipelineV2DavisProblemsPipelinesArrayInput interface {
	pulumi.Input

	ToOpenpipelineV2DavisProblemsPipelinesArrayOutput() OpenpipelineV2DavisProblemsPipelinesArrayOutput
	ToOpenpipelineV2DavisProblemsPipelinesArrayOutputWithContext(context.Context) OpenpipelineV2DavisProblemsPipelinesArrayOutput
}

type OpenpipelineV2DavisProblemsPipelinesArray []OpenpipelineV2DavisProblemsPipelinesInput

func (OpenpipelineV2DavisProblemsPipelinesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2DavisProblemsPipelines)(nil)).Elem()
}

func (i OpenpipelineV2DavisProblemsPipelinesArray) ToOpenpipelineV2DavisProblemsPipelinesArrayOutput() OpenpipelineV2DavisProblemsPipelinesArrayOutput {
	return i.ToOpenpipelineV2DavisProblemsPipelinesArrayOutputWithContext(context.Background())
}

func (i OpenpipelineV2DavisProblemsPipelinesArray) ToOpenpipelineV2DavisProblemsPipelinesArrayOutputWithContext(ctx context.Context) OpenpipelineV2DavisProblemsPipelinesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2DavisProblemsPipelinesArrayOutput)
}

// OpenpipelineV2DavisProblemsPipelinesMapInput is an input type that accepts OpenpipelineV2DavisProblemsPipelinesMap and OpenpipelineV2DavisProblemsPipelinesMapOutput values.
// You can construct a concrete instance of `OpenpipelineV2DavisProblemsPipelinesMapInput` via:
//
//	OpenpipelineV2DavisProblemsPipelinesMap{ "key": OpenpipelineV2DavisProblemsPipelinesArgs{...} }
type OpenpipelineV2DavisProblemsPipelinesMapInput interface {
	pulumi.Input

	ToOpenpipelineV2DavisProblemsPipelinesMapOutput() OpenpipelineV2DavisProblemsPipelinesMapOutput
	ToOpenpipelineV2DavisProblemsPipelinesMapOutputWithContext(context.Context) OpenpipelineV2DavisProblemsPipelinesMapOutput
}

type OpenpipelineV2DavisProblemsPipelinesMap map[string]OpenpipelineV2DavisProblemsPipelinesInput

func (OpenpipelineV2DavisProblemsPipelinesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2DavisProblemsPipelines)(nil)).Elem()
}

func (i OpenpipelineV2DavisProblemsPipelinesMap) ToOpenpipelineV2DavisProblemsPipelinesMapOutput() OpenpipelineV2DavisProblemsPipelinesMapOutput {
	return i.ToOpenpipelineV2DavisProblemsPipelinesMapOutputWithContext(context.Background())
}

func (i OpenpipelineV2DavisProblemsPipelinesMap) ToOpenpipelineV2DavisProblemsPipelinesMapOutputWithContext(ctx context.Context) OpenpipelineV2DavisProblemsPipelinesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2DavisProblemsPipelinesMapOutput)
}

type OpenpipelineV2DavisProblemsPipelinesOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2DavisProblemsPipelinesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2DavisProblemsPipelines)(nil)).Elem()
}

func (o OpenpipelineV2DavisProblemsPipelinesOutput) ToOpenpipelineV2DavisProblemsPipelinesOutput() OpenpipelineV2DavisProblemsPipelinesOutput {
	return o
}

func (o OpenpipelineV2DavisProblemsPipelinesOutput) ToOpenpipelineV2DavisProblemsPipelinesOutputWithContext(ctx context.Context) OpenpipelineV2DavisProblemsPipelinesOutput {
	return o
}

// Cost allocation stage
func (o OpenpipelineV2DavisProblemsPipelinesOutput) CostAllocation() OpenpipelineV2DavisProblemsPipelinesCostAllocationOutput {
	return o.ApplyT(func(v *OpenpipelineV2DavisProblemsPipelines) OpenpipelineV2DavisProblemsPipelinesCostAllocationOutput {
		return v.CostAllocation
	}).(OpenpipelineV2DavisProblemsPipelinesCostAllocationOutput)
}

// Custom pipeline id
func (o OpenpipelineV2DavisProblemsPipelinesOutput) CustomId() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenpipelineV2DavisProblemsPipelines) pulumi.StringOutput { return v.CustomId }).(pulumi.StringOutput)
}

// Data extraction stage
func (o OpenpipelineV2DavisProblemsPipelinesOutput) DataExtraction() OpenpipelineV2DavisProblemsPipelinesDataExtractionOutput {
	return o.ApplyT(func(v *OpenpipelineV2DavisProblemsPipelines) OpenpipelineV2DavisProblemsPipelinesDataExtractionOutput {
		return v.DataExtraction
	}).(OpenpipelineV2DavisProblemsPipelinesDataExtractionOutput)
}

// Davis event extraction stage
func (o OpenpipelineV2DavisProblemsPipelinesOutput) Davis() OpenpipelineV2DavisProblemsPipelinesDavisOutput {
	return o.ApplyT(func(v *OpenpipelineV2DavisProblemsPipelines) OpenpipelineV2DavisProblemsPipelinesDavisOutput {
		return v.Davis
	}).(OpenpipelineV2DavisProblemsPipelinesDavisOutput)
}

// Display name
func (o OpenpipelineV2DavisProblemsPipelinesOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenpipelineV2DavisProblemsPipelines) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Metrics extraction stage
func (o OpenpipelineV2DavisProblemsPipelinesOutput) MetricExtraction() OpenpipelineV2DavisProblemsPipelinesMetricExtractionOutput {
	return o.ApplyT(func(v *OpenpipelineV2DavisProblemsPipelines) OpenpipelineV2DavisProblemsPipelinesMetricExtractionOutput {
		return v.MetricExtraction
	}).(OpenpipelineV2DavisProblemsPipelinesMetricExtractionOutput)
}

// Processing stage
func (o OpenpipelineV2DavisProblemsPipelinesOutput) Processing() OpenpipelineV2DavisProblemsPipelinesProcessingOutput {
	return o.ApplyT(func(v *OpenpipelineV2DavisProblemsPipelines) OpenpipelineV2DavisProblemsPipelinesProcessingOutput {
		return v.Processing
	}).(OpenpipelineV2DavisProblemsPipelinesProcessingOutput)
}

// Product allocation stage
func (o OpenpipelineV2DavisProblemsPipelinesOutput) ProductAllocation() OpenpipelineV2DavisProblemsPipelinesProductAllocationOutput {
	return o.ApplyT(func(v *OpenpipelineV2DavisProblemsPipelines) OpenpipelineV2DavisProblemsPipelinesProductAllocationOutput {
		return v.ProductAllocation
	}).(OpenpipelineV2DavisProblemsPipelinesProductAllocationOutput)
}

// Security context stage
func (o OpenpipelineV2DavisProblemsPipelinesOutput) SecurityContext() OpenpipelineV2DavisProblemsPipelinesSecurityContextOutput {
	return o.ApplyT(func(v *OpenpipelineV2DavisProblemsPipelines) OpenpipelineV2DavisProblemsPipelinesSecurityContextOutput {
		return v.SecurityContext
	}).(OpenpipelineV2DavisProblemsPipelinesSecurityContextOutput)
}

// Storage stage
func (o OpenpipelineV2DavisProblemsPipelinesOutput) Storage() OpenpipelineV2DavisProblemsPipelinesStorageOutput {
	return o.ApplyT(func(v *OpenpipelineV2DavisProblemsPipelines) OpenpipelineV2DavisProblemsPipelinesStorageOutput {
		return v.Storage
	}).(OpenpipelineV2DavisProblemsPipelinesStorageOutput)
}

type OpenpipelineV2DavisProblemsPipelinesArrayOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2DavisProblemsPipelinesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2DavisProblemsPipelines)(nil)).Elem()
}

func (o OpenpipelineV2DavisProblemsPipelinesArrayOutput) ToOpenpipelineV2DavisProblemsPipelinesArrayOutput() OpenpipelineV2DavisProblemsPipelinesArrayOutput {
	return o
}

func (o OpenpipelineV2DavisProblemsPipelinesArrayOutput) ToOpenpipelineV2DavisProblemsPipelinesArrayOutputWithContext(ctx context.Context) OpenpipelineV2DavisProblemsPipelinesArrayOutput {
	return o
}

func (o OpenpipelineV2DavisProblemsPipelinesArrayOutput) Index(i pulumi.IntInput) OpenpipelineV2DavisProblemsPipelinesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenpipelineV2DavisProblemsPipelines {
		return vs[0].([]*OpenpipelineV2DavisProblemsPipelines)[vs[1].(int)]
	}).(OpenpipelineV2DavisProblemsPipelinesOutput)
}

type OpenpipelineV2DavisProblemsPipelinesMapOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2DavisProblemsPipelinesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2DavisProblemsPipelines)(nil)).Elem()
}

func (o OpenpipelineV2DavisProblemsPipelinesMapOutput) ToOpenpipelineV2DavisProblemsPipelinesMapOutput() OpenpipelineV2DavisProblemsPipelinesMapOutput {
	return o
}

func (o OpenpipelineV2DavisProblemsPipelinesMapOutput) ToOpenpipelineV2DavisProblemsPipelinesMapOutputWithContext(ctx context.Context) OpenpipelineV2DavisProblemsPipelinesMapOutput {
	return o
}

func (o OpenpipelineV2DavisProblemsPipelinesMapOutput) MapIndex(k pulumi.StringInput) OpenpipelineV2DavisProblemsPipelinesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenpipelineV2DavisProblemsPipelines {
		return vs[0].(map[string]*OpenpipelineV2DavisProblemsPipelines)[vs[1].(string)]
	}).(OpenpipelineV2DavisProblemsPipelinesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2DavisProblemsPipelinesInput)(nil)).Elem(), &OpenpipelineV2DavisProblemsPipelines{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2DavisProblemsPipelinesArrayInput)(nil)).Elem(), OpenpipelineV2DavisProblemsPipelinesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2DavisProblemsPipelinesMapInput)(nil)).Elem(), OpenpipelineV2DavisProblemsPipelinesMap{})
	pulumi.RegisterOutputType(OpenpipelineV2DavisProblemsPipelinesOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2DavisProblemsPipelinesArrayOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2DavisProblemsPipelinesMapOutput{})
}
