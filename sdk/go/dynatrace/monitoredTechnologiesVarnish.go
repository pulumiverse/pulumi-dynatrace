// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type MonitoredTechnologiesVarnish struct {
	pulumi.CustomResourceState

	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId pulumi.StringPtrOutput `pulumi:"hostId"`
}

// NewMonitoredTechnologiesVarnish registers a new resource with the given unique name, arguments, and options.
func NewMonitoredTechnologiesVarnish(ctx *pulumi.Context,
	name string, args *MonitoredTechnologiesVarnishArgs, opts ...pulumi.ResourceOption) (*MonitoredTechnologiesVarnish, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MonitoredTechnologiesVarnish
	err := ctx.RegisterResource("dynatrace:index/monitoredTechnologiesVarnish:MonitoredTechnologiesVarnish", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMonitoredTechnologiesVarnish gets an existing MonitoredTechnologiesVarnish resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMonitoredTechnologiesVarnish(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MonitoredTechnologiesVarnishState, opts ...pulumi.ResourceOption) (*MonitoredTechnologiesVarnish, error) {
	var resource MonitoredTechnologiesVarnish
	err := ctx.ReadResource("dynatrace:index/monitoredTechnologiesVarnish:MonitoredTechnologiesVarnish", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MonitoredTechnologiesVarnish resources.
type monitoredTechnologiesVarnishState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId *string `pulumi:"hostId"`
}

type MonitoredTechnologiesVarnishState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId pulumi.StringPtrInput
}

func (MonitoredTechnologiesVarnishState) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoredTechnologiesVarnishState)(nil)).Elem()
}

type monitoredTechnologiesVarnishArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId *string `pulumi:"hostId"`
}

// The set of arguments for constructing a MonitoredTechnologiesVarnish resource.
type MonitoredTechnologiesVarnishArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId pulumi.StringPtrInput
}

func (MonitoredTechnologiesVarnishArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoredTechnologiesVarnishArgs)(nil)).Elem()
}

type MonitoredTechnologiesVarnishInput interface {
	pulumi.Input

	ToMonitoredTechnologiesVarnishOutput() MonitoredTechnologiesVarnishOutput
	ToMonitoredTechnologiesVarnishOutputWithContext(ctx context.Context) MonitoredTechnologiesVarnishOutput
}

func (*MonitoredTechnologiesVarnish) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoredTechnologiesVarnish)(nil)).Elem()
}

func (i *MonitoredTechnologiesVarnish) ToMonitoredTechnologiesVarnishOutput() MonitoredTechnologiesVarnishOutput {
	return i.ToMonitoredTechnologiesVarnishOutputWithContext(context.Background())
}

func (i *MonitoredTechnologiesVarnish) ToMonitoredTechnologiesVarnishOutputWithContext(ctx context.Context) MonitoredTechnologiesVarnishOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoredTechnologiesVarnishOutput)
}

// MonitoredTechnologiesVarnishArrayInput is an input type that accepts MonitoredTechnologiesVarnishArray and MonitoredTechnologiesVarnishArrayOutput values.
// You can construct a concrete instance of `MonitoredTechnologiesVarnishArrayInput` via:
//
//	MonitoredTechnologiesVarnishArray{ MonitoredTechnologiesVarnishArgs{...} }
type MonitoredTechnologiesVarnishArrayInput interface {
	pulumi.Input

	ToMonitoredTechnologiesVarnishArrayOutput() MonitoredTechnologiesVarnishArrayOutput
	ToMonitoredTechnologiesVarnishArrayOutputWithContext(context.Context) MonitoredTechnologiesVarnishArrayOutput
}

type MonitoredTechnologiesVarnishArray []MonitoredTechnologiesVarnishInput

func (MonitoredTechnologiesVarnishArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MonitoredTechnologiesVarnish)(nil)).Elem()
}

func (i MonitoredTechnologiesVarnishArray) ToMonitoredTechnologiesVarnishArrayOutput() MonitoredTechnologiesVarnishArrayOutput {
	return i.ToMonitoredTechnologiesVarnishArrayOutputWithContext(context.Background())
}

func (i MonitoredTechnologiesVarnishArray) ToMonitoredTechnologiesVarnishArrayOutputWithContext(ctx context.Context) MonitoredTechnologiesVarnishArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoredTechnologiesVarnishArrayOutput)
}

// MonitoredTechnologiesVarnishMapInput is an input type that accepts MonitoredTechnologiesVarnishMap and MonitoredTechnologiesVarnishMapOutput values.
// You can construct a concrete instance of `MonitoredTechnologiesVarnishMapInput` via:
//
//	MonitoredTechnologiesVarnishMap{ "key": MonitoredTechnologiesVarnishArgs{...} }
type MonitoredTechnologiesVarnishMapInput interface {
	pulumi.Input

	ToMonitoredTechnologiesVarnishMapOutput() MonitoredTechnologiesVarnishMapOutput
	ToMonitoredTechnologiesVarnishMapOutputWithContext(context.Context) MonitoredTechnologiesVarnishMapOutput
}

type MonitoredTechnologiesVarnishMap map[string]MonitoredTechnologiesVarnishInput

func (MonitoredTechnologiesVarnishMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MonitoredTechnologiesVarnish)(nil)).Elem()
}

func (i MonitoredTechnologiesVarnishMap) ToMonitoredTechnologiesVarnishMapOutput() MonitoredTechnologiesVarnishMapOutput {
	return i.ToMonitoredTechnologiesVarnishMapOutputWithContext(context.Background())
}

func (i MonitoredTechnologiesVarnishMap) ToMonitoredTechnologiesVarnishMapOutputWithContext(ctx context.Context) MonitoredTechnologiesVarnishMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoredTechnologiesVarnishMapOutput)
}

type MonitoredTechnologiesVarnishOutput struct{ *pulumi.OutputState }

func (MonitoredTechnologiesVarnishOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoredTechnologiesVarnish)(nil)).Elem()
}

func (o MonitoredTechnologiesVarnishOutput) ToMonitoredTechnologiesVarnishOutput() MonitoredTechnologiesVarnishOutput {
	return o
}

func (o MonitoredTechnologiesVarnishOutput) ToMonitoredTechnologiesVarnishOutputWithContext(ctx context.Context) MonitoredTechnologiesVarnishOutput {
	return o
}

// This setting is enabled (`true`) or disabled (`false`)
func (o MonitoredTechnologiesVarnishOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *MonitoredTechnologiesVarnish) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
func (o MonitoredTechnologiesVarnishOutput) HostId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitoredTechnologiesVarnish) pulumi.StringPtrOutput { return v.HostId }).(pulumi.StringPtrOutput)
}

type MonitoredTechnologiesVarnishArrayOutput struct{ *pulumi.OutputState }

func (MonitoredTechnologiesVarnishArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MonitoredTechnologiesVarnish)(nil)).Elem()
}

func (o MonitoredTechnologiesVarnishArrayOutput) ToMonitoredTechnologiesVarnishArrayOutput() MonitoredTechnologiesVarnishArrayOutput {
	return o
}

func (o MonitoredTechnologiesVarnishArrayOutput) ToMonitoredTechnologiesVarnishArrayOutputWithContext(ctx context.Context) MonitoredTechnologiesVarnishArrayOutput {
	return o
}

func (o MonitoredTechnologiesVarnishArrayOutput) Index(i pulumi.IntInput) MonitoredTechnologiesVarnishOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MonitoredTechnologiesVarnish {
		return vs[0].([]*MonitoredTechnologiesVarnish)[vs[1].(int)]
	}).(MonitoredTechnologiesVarnishOutput)
}

type MonitoredTechnologiesVarnishMapOutput struct{ *pulumi.OutputState }

func (MonitoredTechnologiesVarnishMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MonitoredTechnologiesVarnish)(nil)).Elem()
}

func (o MonitoredTechnologiesVarnishMapOutput) ToMonitoredTechnologiesVarnishMapOutput() MonitoredTechnologiesVarnishMapOutput {
	return o
}

func (o MonitoredTechnologiesVarnishMapOutput) ToMonitoredTechnologiesVarnishMapOutputWithContext(ctx context.Context) MonitoredTechnologiesVarnishMapOutput {
	return o
}

func (o MonitoredTechnologiesVarnishMapOutput) MapIndex(k pulumi.StringInput) MonitoredTechnologiesVarnishOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MonitoredTechnologiesVarnish {
		return vs[0].(map[string]*MonitoredTechnologiesVarnish)[vs[1].(string)]
	}).(MonitoredTechnologiesVarnishOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoredTechnologiesVarnishInput)(nil)).Elem(), &MonitoredTechnologiesVarnish{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoredTechnologiesVarnishArrayInput)(nil)).Elem(), MonitoredTechnologiesVarnishArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoredTechnologiesVarnishMapInput)(nil)).Elem(), MonitoredTechnologiesVarnishMap{})
	pulumi.RegisterOutputType(MonitoredTechnologiesVarnishOutput{})
	pulumi.RegisterOutputType(MonitoredTechnologiesVarnishArrayOutput{})
	pulumi.RegisterOutputType(MonitoredTechnologiesVarnishMapOutput{})
}
