// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

// The management zone data source allows the management zone ID to be retrieved by its name.
//
// > This data source requires the API token scope **Read configuration** (`ReadConfig`)
//
// !> This data source is utilizing an older API endpoint, please use ManagementZoneV2 instead.
//
// - `name` queries for all management zones with the specified name
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := dynatrace.LookupManagementZone(ctx, &dynatrace.LookupManagementZoneArgs{
//				Name: "Example",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = dynatrace.NewCalculatedServiceMetric(ctx, "#name#", &dynatrace.CalculatedServiceMetricArgs{
//				Conditions: dynatrace.CalculatedServiceMetricConditionArray{
//					&dynatrace.CalculatedServiceMetricConditionArgs{
//						Conditions: dynatrace.CalculatedServiceMetricConditionConditionArray{
//							&dynatrace.CalculatedServiceMetricConditionConditionArgs{
//								Attribute: pulumi.String("HTTP_REQUEST_METHOD"),
//								Comparison: &dynatrace.CalculatedServiceMetricConditionConditionComparisonArgs{
//									HttpMethod: &dynatrace.CalculatedServiceMetricConditionConditionComparisonHttpMethodArgs{
//										Operator: pulumi.String("EQUALS_ANY_OF"),
//										Values: pulumi.StringArray{
//											pulumi.String("POST"),
//											pulumi.String("GET"),
//										},
//									},
//									Negate: pulumi.Bool(false),
//								},
//							},
//						},
//					},
//				},
//				Enabled: pulumi.Bool(true),
//				ManagementZones: pulumi.StringArray{
//					pulumi.String(test.Id),
//				},
//				MetricDefinition: &dynatrace.CalculatedServiceMetricMetricDefinitionArgs{
//					Metric:           pulumi.String("REQUEST_ATTRIBUTE"),
//					RequestAttribute: pulumi.String("foo"),
//				},
//				MetricKey: pulumi.String("calc:service.#name#"),
//				Unit:      pulumi.String("MILLI_SECOND_PER_MINUTE"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupManagementZone(ctx *pulumi.Context, args *LookupManagementZoneArgs, opts ...pulumi.InvokeOption) (*LookupManagementZoneResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupManagementZoneResult
	err := ctx.Invoke("dynatrace:index/getManagementZone:getManagementZone", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getManagementZone.
type LookupManagementZoneArgs struct {
	Name string `pulumi:"name"`
}

// A collection of values returned by getManagementZone.
type LookupManagementZoneResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id           string `pulumi:"id"`
	LegacyId     string `pulumi:"legacyId"`
	Name         string `pulumi:"name"`
	Settings20Id string `pulumi:"settings20Id"`
}

func LookupManagementZoneOutput(ctx *pulumi.Context, args LookupManagementZoneOutputArgs, opts ...pulumi.InvokeOption) LookupManagementZoneResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupManagementZoneResultOutput, error) {
			args := v.(LookupManagementZoneArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupManagementZoneResult
			secret, err := ctx.InvokePackageRaw("dynatrace:index/getManagementZone:getManagementZone", args, &rv, "", opts...)
			if err != nil {
				return LookupManagementZoneResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupManagementZoneResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupManagementZoneResultOutput), nil
			}
			return output, nil
		}).(LookupManagementZoneResultOutput)
}

// A collection of arguments for invoking getManagementZone.
type LookupManagementZoneOutputArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupManagementZoneOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupManagementZoneArgs)(nil)).Elem()
}

// A collection of values returned by getManagementZone.
type LookupManagementZoneResultOutput struct{ *pulumi.OutputState }

func (LookupManagementZoneResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupManagementZoneResult)(nil)).Elem()
}

func (o LookupManagementZoneResultOutput) ToLookupManagementZoneResultOutput() LookupManagementZoneResultOutput {
	return o
}

func (o LookupManagementZoneResultOutput) ToLookupManagementZoneResultOutputWithContext(ctx context.Context) LookupManagementZoneResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupManagementZoneResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagementZoneResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupManagementZoneResultOutput) LegacyId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagementZoneResult) string { return v.LegacyId }).(pulumi.StringOutput)
}

func (o LookupManagementZoneResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagementZoneResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupManagementZoneResultOutput) Settings20Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagementZoneResult) string { return v.Settings20Id }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupManagementZoneResultOutput{})
}
