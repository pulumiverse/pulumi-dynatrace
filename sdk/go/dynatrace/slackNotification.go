// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type SlackNotification struct {
	pulumi.CustomResourceState

	// The configuration is enabled (`true`) or disabled (`false`)
	Active pulumi.BoolOutput `pulumi:"active"`
	// The channel (for example, `#general`) or the user (for example, `@john.smith`) to send the message to
	Channel pulumi.StringOutput `pulumi:"channel"`
	// The ID of these settings when referred to from resources requiring the REST API V1 keys
	LegacyId pulumi.StringOutput `pulumi:"legacyId"`
	// The content of the message.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	Message pulumi.StringOutput `pulumi:"message"`
	// The name of the notification configuration
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the associated alerting profile
	Profile pulumi.StringOutput `pulumi:"profile"`
	// The URL of the Slack WebHook. This is confidential information, therefore GET requests return this field with the `null` value, and it is optional for PUT requests
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewSlackNotification registers a new resource with the given unique name, arguments, and options.
func NewSlackNotification(ctx *pulumi.Context,
	name string, args *SlackNotificationArgs, opts ...pulumi.ResourceOption) (*SlackNotification, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Active == nil {
		return nil, errors.New("invalid value for required argument 'Active'")
	}
	if args.Channel == nil {
		return nil, errors.New("invalid value for required argument 'Channel'")
	}
	if args.Message == nil {
		return nil, errors.New("invalid value for required argument 'Message'")
	}
	if args.Profile == nil {
		return nil, errors.New("invalid value for required argument 'Profile'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	if args.Url != nil {
		args.Url = pulumi.ToSecret(args.Url).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"url",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SlackNotification
	err := ctx.RegisterResource("dynatrace:index/slackNotification:SlackNotification", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSlackNotification gets an existing SlackNotification resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSlackNotification(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SlackNotificationState, opts ...pulumi.ResourceOption) (*SlackNotification, error) {
	var resource SlackNotification
	err := ctx.ReadResource("dynatrace:index/slackNotification:SlackNotification", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SlackNotification resources.
type slackNotificationState struct {
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `pulumi:"active"`
	// The channel (for example, `#general`) or the user (for example, `@john.smith`) to send the message to
	Channel *string `pulumi:"channel"`
	// The ID of these settings when referred to from resources requiring the REST API V1 keys
	LegacyId *string `pulumi:"legacyId"`
	// The content of the message.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	Message *string `pulumi:"message"`
	// The name of the notification configuration
	Name *string `pulumi:"name"`
	// The ID of the associated alerting profile
	Profile *string `pulumi:"profile"`
	// The URL of the Slack WebHook. This is confidential information, therefore GET requests return this field with the `null` value, and it is optional for PUT requests
	Url *string `pulumi:"url"`
}

type SlackNotificationState struct {
	// The configuration is enabled (`true`) or disabled (`false`)
	Active pulumi.BoolPtrInput
	// The channel (for example, `#general`) or the user (for example, `@john.smith`) to send the message to
	Channel pulumi.StringPtrInput
	// The ID of these settings when referred to from resources requiring the REST API V1 keys
	LegacyId pulumi.StringPtrInput
	// The content of the message.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	Message pulumi.StringPtrInput
	// The name of the notification configuration
	Name pulumi.StringPtrInput
	// The ID of the associated alerting profile
	Profile pulumi.StringPtrInput
	// The URL of the Slack WebHook. This is confidential information, therefore GET requests return this field with the `null` value, and it is optional for PUT requests
	Url pulumi.StringPtrInput
}

func (SlackNotificationState) ElementType() reflect.Type {
	return reflect.TypeOf((*slackNotificationState)(nil)).Elem()
}

type slackNotificationArgs struct {
	// The configuration is enabled (`true`) or disabled (`false`)
	Active bool `pulumi:"active"`
	// The channel (for example, `#general`) or the user (for example, `@john.smith`) to send the message to
	Channel string `pulumi:"channel"`
	// The ID of these settings when referred to from resources requiring the REST API V1 keys
	LegacyId *string `pulumi:"legacyId"`
	// The content of the message.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	Message string `pulumi:"message"`
	// The name of the notification configuration
	Name *string `pulumi:"name"`
	// The ID of the associated alerting profile
	Profile string `pulumi:"profile"`
	// The URL of the Slack WebHook. This is confidential information, therefore GET requests return this field with the `null` value, and it is optional for PUT requests
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a SlackNotification resource.
type SlackNotificationArgs struct {
	// The configuration is enabled (`true`) or disabled (`false`)
	Active pulumi.BoolInput
	// The channel (for example, `#general`) or the user (for example, `@john.smith`) to send the message to
	Channel pulumi.StringInput
	// The ID of these settings when referred to from resources requiring the REST API V1 keys
	LegacyId pulumi.StringPtrInput
	// The content of the message.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	Message pulumi.StringInput
	// The name of the notification configuration
	Name pulumi.StringPtrInput
	// The ID of the associated alerting profile
	Profile pulumi.StringInput
	// The URL of the Slack WebHook. This is confidential information, therefore GET requests return this field with the `null` value, and it is optional for PUT requests
	Url pulumi.StringInput
}

func (SlackNotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*slackNotificationArgs)(nil)).Elem()
}

type SlackNotificationInput interface {
	pulumi.Input

	ToSlackNotificationOutput() SlackNotificationOutput
	ToSlackNotificationOutputWithContext(ctx context.Context) SlackNotificationOutput
}

func (*SlackNotification) ElementType() reflect.Type {
	return reflect.TypeOf((**SlackNotification)(nil)).Elem()
}

func (i *SlackNotification) ToSlackNotificationOutput() SlackNotificationOutput {
	return i.ToSlackNotificationOutputWithContext(context.Background())
}

func (i *SlackNotification) ToSlackNotificationOutputWithContext(ctx context.Context) SlackNotificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlackNotificationOutput)
}

// SlackNotificationArrayInput is an input type that accepts SlackNotificationArray and SlackNotificationArrayOutput values.
// You can construct a concrete instance of `SlackNotificationArrayInput` via:
//
//	SlackNotificationArray{ SlackNotificationArgs{...} }
type SlackNotificationArrayInput interface {
	pulumi.Input

	ToSlackNotificationArrayOutput() SlackNotificationArrayOutput
	ToSlackNotificationArrayOutputWithContext(context.Context) SlackNotificationArrayOutput
}

type SlackNotificationArray []SlackNotificationInput

func (SlackNotificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SlackNotification)(nil)).Elem()
}

func (i SlackNotificationArray) ToSlackNotificationArrayOutput() SlackNotificationArrayOutput {
	return i.ToSlackNotificationArrayOutputWithContext(context.Background())
}

func (i SlackNotificationArray) ToSlackNotificationArrayOutputWithContext(ctx context.Context) SlackNotificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlackNotificationArrayOutput)
}

// SlackNotificationMapInput is an input type that accepts SlackNotificationMap and SlackNotificationMapOutput values.
// You can construct a concrete instance of `SlackNotificationMapInput` via:
//
//	SlackNotificationMap{ "key": SlackNotificationArgs{...} }
type SlackNotificationMapInput interface {
	pulumi.Input

	ToSlackNotificationMapOutput() SlackNotificationMapOutput
	ToSlackNotificationMapOutputWithContext(context.Context) SlackNotificationMapOutput
}

type SlackNotificationMap map[string]SlackNotificationInput

func (SlackNotificationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SlackNotification)(nil)).Elem()
}

func (i SlackNotificationMap) ToSlackNotificationMapOutput() SlackNotificationMapOutput {
	return i.ToSlackNotificationMapOutputWithContext(context.Background())
}

func (i SlackNotificationMap) ToSlackNotificationMapOutputWithContext(ctx context.Context) SlackNotificationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SlackNotificationMapOutput)
}

type SlackNotificationOutput struct{ *pulumi.OutputState }

func (SlackNotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SlackNotification)(nil)).Elem()
}

func (o SlackNotificationOutput) ToSlackNotificationOutput() SlackNotificationOutput {
	return o
}

func (o SlackNotificationOutput) ToSlackNotificationOutputWithContext(ctx context.Context) SlackNotificationOutput {
	return o
}

// The configuration is enabled (`true`) or disabled (`false`)
func (o SlackNotificationOutput) Active() pulumi.BoolOutput {
	return o.ApplyT(func(v *SlackNotification) pulumi.BoolOutput { return v.Active }).(pulumi.BoolOutput)
}

// The channel (for example, `#general`) or the user (for example, `@john.smith`) to send the message to
func (o SlackNotificationOutput) Channel() pulumi.StringOutput {
	return o.ApplyT(func(v *SlackNotification) pulumi.StringOutput { return v.Channel }).(pulumi.StringOutput)
}

// The ID of these settings when referred to from resources requiring the REST API V1 keys
func (o SlackNotificationOutput) LegacyId() pulumi.StringOutput {
	return o.ApplyT(func(v *SlackNotification) pulumi.StringOutput { return v.LegacyId }).(pulumi.StringOutput)
}

// The content of the message.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
func (o SlackNotificationOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v *SlackNotification) pulumi.StringOutput { return v.Message }).(pulumi.StringOutput)
}

// The name of the notification configuration
func (o SlackNotificationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SlackNotification) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the associated alerting profile
func (o SlackNotificationOutput) Profile() pulumi.StringOutput {
	return o.ApplyT(func(v *SlackNotification) pulumi.StringOutput { return v.Profile }).(pulumi.StringOutput)
}

// The URL of the Slack WebHook. This is confidential information, therefore GET requests return this field with the `null` value, and it is optional for PUT requests
func (o SlackNotificationOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *SlackNotification) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type SlackNotificationArrayOutput struct{ *pulumi.OutputState }

func (SlackNotificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SlackNotification)(nil)).Elem()
}

func (o SlackNotificationArrayOutput) ToSlackNotificationArrayOutput() SlackNotificationArrayOutput {
	return o
}

func (o SlackNotificationArrayOutput) ToSlackNotificationArrayOutputWithContext(ctx context.Context) SlackNotificationArrayOutput {
	return o
}

func (o SlackNotificationArrayOutput) Index(i pulumi.IntInput) SlackNotificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SlackNotification {
		return vs[0].([]*SlackNotification)[vs[1].(int)]
	}).(SlackNotificationOutput)
}

type SlackNotificationMapOutput struct{ *pulumi.OutputState }

func (SlackNotificationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SlackNotification)(nil)).Elem()
}

func (o SlackNotificationMapOutput) ToSlackNotificationMapOutput() SlackNotificationMapOutput {
	return o
}

func (o SlackNotificationMapOutput) ToSlackNotificationMapOutputWithContext(ctx context.Context) SlackNotificationMapOutput {
	return o
}

func (o SlackNotificationMapOutput) MapIndex(k pulumi.StringInput) SlackNotificationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SlackNotification {
		return vs[0].(map[string]*SlackNotification)[vs[1].(string)]
	}).(SlackNotificationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SlackNotificationInput)(nil)).Elem(), &SlackNotification{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlackNotificationArrayInput)(nil)).Elem(), SlackNotificationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SlackNotificationMapInput)(nil)).Elem(), SlackNotificationMap{})
	pulumi.RegisterOutputType(SlackNotificationOutput{})
	pulumi.RegisterOutputType(SlackNotificationArrayOutput{})
	pulumi.RegisterOutputType(SlackNotificationMapOutput{})
}
