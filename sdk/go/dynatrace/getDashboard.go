// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

// The `Dashboard` data source allows the dashboard ID to be retrieved by its name and owner.
//
// - `name` (String) - The name of the dashboard
// - `owner` (String) - The owner of the dashboard
//
// If multiple services match the given criteria, the first result will be retrieved.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := dynatrace.LookupDashboard(ctx, &dynatrace.LookupDashboardArgs{
//				Name:  "Terraform",
//				Owner: "Hashicorp",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("id", example.Id)
//			return nil
//		})
//	}
//
// ```
func LookupDashboard(ctx *pulumi.Context, args *LookupDashboardArgs, opts ...pulumi.InvokeOption) (*LookupDashboardResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDashboardResult
	err := ctx.Invoke("dynatrace:index/getDashboard:getDashboard", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDashboard.
type LookupDashboardArgs struct {
	Name  string `pulumi:"name"`
	Owner string `pulumi:"owner"`
}

// A collection of values returned by getDashboard.
type LookupDashboardResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id    string `pulumi:"id"`
	Name  string `pulumi:"name"`
	Owner string `pulumi:"owner"`
}

func LookupDashboardOutput(ctx *pulumi.Context, args LookupDashboardOutputArgs, opts ...pulumi.InvokeOption) LookupDashboardResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupDashboardResultOutput, error) {
			args := v.(LookupDashboardArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("dynatrace:index/getDashboard:getDashboard", args, LookupDashboardResultOutput{}, options).(LookupDashboardResultOutput), nil
		}).(LookupDashboardResultOutput)
}

// A collection of arguments for invoking getDashboard.
type LookupDashboardOutputArgs struct {
	Name  pulumi.StringInput `pulumi:"name"`
	Owner pulumi.StringInput `pulumi:"owner"`
}

func (LookupDashboardOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDashboardArgs)(nil)).Elem()
}

// A collection of values returned by getDashboard.
type LookupDashboardResultOutput struct{ *pulumi.OutputState }

func (LookupDashboardResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDashboardResult)(nil)).Elem()
}

func (o LookupDashboardResultOutput) ToLookupDashboardResultOutput() LookupDashboardResultOutput {
	return o
}

func (o LookupDashboardResultOutput) ToLookupDashboardResultOutputWithContext(ctx context.Context) LookupDashboardResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDashboardResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDashboardResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupDashboardResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDashboardResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupDashboardResultOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDashboardResult) string { return v.Owner }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDashboardResultOutput{})
}
