// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type QueueSharingGroups struct {
	pulumi.CustomResourceState

	// Queue sharing group name
	Name pulumi.StringOutput `pulumi:"name"`
	// Queue managers
	QueueManagers pulumi.StringArrayOutput `pulumi:"queueManagers"`
	// Shared queues
	SharedQueues pulumi.StringArrayOutput `pulumi:"sharedQueues"`
}

// NewQueueSharingGroups registers a new resource with the given unique name, arguments, and options.
func NewQueueSharingGroups(ctx *pulumi.Context,
	name string, args *QueueSharingGroupsArgs, opts ...pulumi.ResourceOption) (*QueueSharingGroups, error) {
	if args == nil {
		args = &QueueSharingGroupsArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource QueueSharingGroups
	err := ctx.RegisterResource("dynatrace:index/queueSharingGroups:QueueSharingGroups", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQueueSharingGroups gets an existing QueueSharingGroups resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQueueSharingGroups(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QueueSharingGroupsState, opts ...pulumi.ResourceOption) (*QueueSharingGroups, error) {
	var resource QueueSharingGroups
	err := ctx.ReadResource("dynatrace:index/queueSharingGroups:QueueSharingGroups", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering QueueSharingGroups resources.
type queueSharingGroupsState struct {
	// Queue sharing group name
	Name *string `pulumi:"name"`
	// Queue managers
	QueueManagers []string `pulumi:"queueManagers"`
	// Shared queues
	SharedQueues []string `pulumi:"sharedQueues"`
}

type QueueSharingGroupsState struct {
	// Queue sharing group name
	Name pulumi.StringPtrInput
	// Queue managers
	QueueManagers pulumi.StringArrayInput
	// Shared queues
	SharedQueues pulumi.StringArrayInput
}

func (QueueSharingGroupsState) ElementType() reflect.Type {
	return reflect.TypeOf((*queueSharingGroupsState)(nil)).Elem()
}

type queueSharingGroupsArgs struct {
	// Queue sharing group name
	Name *string `pulumi:"name"`
	// Queue managers
	QueueManagers []string `pulumi:"queueManagers"`
	// Shared queues
	SharedQueues []string `pulumi:"sharedQueues"`
}

// The set of arguments for constructing a QueueSharingGroups resource.
type QueueSharingGroupsArgs struct {
	// Queue sharing group name
	Name pulumi.StringPtrInput
	// Queue managers
	QueueManagers pulumi.StringArrayInput
	// Shared queues
	SharedQueues pulumi.StringArrayInput
}

func (QueueSharingGroupsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*queueSharingGroupsArgs)(nil)).Elem()
}

type QueueSharingGroupsInput interface {
	pulumi.Input

	ToQueueSharingGroupsOutput() QueueSharingGroupsOutput
	ToQueueSharingGroupsOutputWithContext(ctx context.Context) QueueSharingGroupsOutput
}

func (*QueueSharingGroups) ElementType() reflect.Type {
	return reflect.TypeOf((**QueueSharingGroups)(nil)).Elem()
}

func (i *QueueSharingGroups) ToQueueSharingGroupsOutput() QueueSharingGroupsOutput {
	return i.ToQueueSharingGroupsOutputWithContext(context.Background())
}

func (i *QueueSharingGroups) ToQueueSharingGroupsOutputWithContext(ctx context.Context) QueueSharingGroupsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueSharingGroupsOutput)
}

// QueueSharingGroupsArrayInput is an input type that accepts QueueSharingGroupsArray and QueueSharingGroupsArrayOutput values.
// You can construct a concrete instance of `QueueSharingGroupsArrayInput` via:
//
//	QueueSharingGroupsArray{ QueueSharingGroupsArgs{...} }
type QueueSharingGroupsArrayInput interface {
	pulumi.Input

	ToQueueSharingGroupsArrayOutput() QueueSharingGroupsArrayOutput
	ToQueueSharingGroupsArrayOutputWithContext(context.Context) QueueSharingGroupsArrayOutput
}

type QueueSharingGroupsArray []QueueSharingGroupsInput

func (QueueSharingGroupsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QueueSharingGroups)(nil)).Elem()
}

func (i QueueSharingGroupsArray) ToQueueSharingGroupsArrayOutput() QueueSharingGroupsArrayOutput {
	return i.ToQueueSharingGroupsArrayOutputWithContext(context.Background())
}

func (i QueueSharingGroupsArray) ToQueueSharingGroupsArrayOutputWithContext(ctx context.Context) QueueSharingGroupsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueSharingGroupsArrayOutput)
}

// QueueSharingGroupsMapInput is an input type that accepts QueueSharingGroupsMap and QueueSharingGroupsMapOutput values.
// You can construct a concrete instance of `QueueSharingGroupsMapInput` via:
//
//	QueueSharingGroupsMap{ "key": QueueSharingGroupsArgs{...} }
type QueueSharingGroupsMapInput interface {
	pulumi.Input

	ToQueueSharingGroupsMapOutput() QueueSharingGroupsMapOutput
	ToQueueSharingGroupsMapOutputWithContext(context.Context) QueueSharingGroupsMapOutput
}

type QueueSharingGroupsMap map[string]QueueSharingGroupsInput

func (QueueSharingGroupsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QueueSharingGroups)(nil)).Elem()
}

func (i QueueSharingGroupsMap) ToQueueSharingGroupsMapOutput() QueueSharingGroupsMapOutput {
	return i.ToQueueSharingGroupsMapOutputWithContext(context.Background())
}

func (i QueueSharingGroupsMap) ToQueueSharingGroupsMapOutputWithContext(ctx context.Context) QueueSharingGroupsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueSharingGroupsMapOutput)
}

type QueueSharingGroupsOutput struct{ *pulumi.OutputState }

func (QueueSharingGroupsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueueSharingGroups)(nil)).Elem()
}

func (o QueueSharingGroupsOutput) ToQueueSharingGroupsOutput() QueueSharingGroupsOutput {
	return o
}

func (o QueueSharingGroupsOutput) ToQueueSharingGroupsOutputWithContext(ctx context.Context) QueueSharingGroupsOutput {
	return o
}

// Queue sharing group name
func (o QueueSharingGroupsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *QueueSharingGroups) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Queue managers
func (o QueueSharingGroupsOutput) QueueManagers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *QueueSharingGroups) pulumi.StringArrayOutput { return v.QueueManagers }).(pulumi.StringArrayOutput)
}

// Shared queues
func (o QueueSharingGroupsOutput) SharedQueues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *QueueSharingGroups) pulumi.StringArrayOutput { return v.SharedQueues }).(pulumi.StringArrayOutput)
}

type QueueSharingGroupsArrayOutput struct{ *pulumi.OutputState }

func (QueueSharingGroupsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QueueSharingGroups)(nil)).Elem()
}

func (o QueueSharingGroupsArrayOutput) ToQueueSharingGroupsArrayOutput() QueueSharingGroupsArrayOutput {
	return o
}

func (o QueueSharingGroupsArrayOutput) ToQueueSharingGroupsArrayOutputWithContext(ctx context.Context) QueueSharingGroupsArrayOutput {
	return o
}

func (o QueueSharingGroupsArrayOutput) Index(i pulumi.IntInput) QueueSharingGroupsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *QueueSharingGroups {
		return vs[0].([]*QueueSharingGroups)[vs[1].(int)]
	}).(QueueSharingGroupsOutput)
}

type QueueSharingGroupsMapOutput struct{ *pulumi.OutputState }

func (QueueSharingGroupsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QueueSharingGroups)(nil)).Elem()
}

func (o QueueSharingGroupsMapOutput) ToQueueSharingGroupsMapOutput() QueueSharingGroupsMapOutput {
	return o
}

func (o QueueSharingGroupsMapOutput) ToQueueSharingGroupsMapOutputWithContext(ctx context.Context) QueueSharingGroupsMapOutput {
	return o
}

func (o QueueSharingGroupsMapOutput) MapIndex(k pulumi.StringInput) QueueSharingGroupsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *QueueSharingGroups {
		return vs[0].(map[string]*QueueSharingGroups)[vs[1].(string)]
	}).(QueueSharingGroupsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*QueueSharingGroupsInput)(nil)).Elem(), &QueueSharingGroups{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueueSharingGroupsArrayInput)(nil)).Elem(), QueueSharingGroupsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueueSharingGroupsMapInput)(nil)).Elem(), QueueSharingGroupsMap{})
	pulumi.RegisterOutputType(QueueSharingGroupsOutput{})
	pulumi.RegisterOutputType(QueueSharingGroupsArrayOutput{})
	pulumi.RegisterOutputType(QueueSharingGroupsMapOutput{})
}
