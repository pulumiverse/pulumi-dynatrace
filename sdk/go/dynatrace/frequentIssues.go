// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type FrequentIssues struct {
	pulumi.CustomResourceState

	// Detect frequent issues within applications, enabled (`true`) or disabled (`false`)
	DetectApps pulumi.BoolOutput `pulumi:"detectApps"`
	// Events raised at this level typically occur when no specific topological entity is applicable, often based on data such as logs and metrics. This does not impact the detection of issues within applications, transactions, services, or infrastructure.
	DetectEnv pulumi.BoolPtrOutput `pulumi:"detectEnv"`
	// Detect frequent issues within infrastructure, enabled (`true`) or disabled (`false`)
	DetectInfra pulumi.BoolOutput `pulumi:"detectInfra"`
	// Detect frequent issues within transactions and services, enabled (`true`) or disabled (`false`)
	DetectTxn pulumi.BoolOutput `pulumi:"detectTxn"`
}

// NewFrequentIssues registers a new resource with the given unique name, arguments, and options.
func NewFrequentIssues(ctx *pulumi.Context,
	name string, args *FrequentIssuesArgs, opts ...pulumi.ResourceOption) (*FrequentIssues, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DetectApps == nil {
		return nil, errors.New("invalid value for required argument 'DetectApps'")
	}
	if args.DetectInfra == nil {
		return nil, errors.New("invalid value for required argument 'DetectInfra'")
	}
	if args.DetectTxn == nil {
		return nil, errors.New("invalid value for required argument 'DetectTxn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FrequentIssues
	err := ctx.RegisterResource("dynatrace:index/frequentIssues:FrequentIssues", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFrequentIssues gets an existing FrequentIssues resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFrequentIssues(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FrequentIssuesState, opts ...pulumi.ResourceOption) (*FrequentIssues, error) {
	var resource FrequentIssues
	err := ctx.ReadResource("dynatrace:index/frequentIssues:FrequentIssues", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FrequentIssues resources.
type frequentIssuesState struct {
	// Detect frequent issues within applications, enabled (`true`) or disabled (`false`)
	DetectApps *bool `pulumi:"detectApps"`
	// Events raised at this level typically occur when no specific topological entity is applicable, often based on data such as logs and metrics. This does not impact the detection of issues within applications, transactions, services, or infrastructure.
	DetectEnv *bool `pulumi:"detectEnv"`
	// Detect frequent issues within infrastructure, enabled (`true`) or disabled (`false`)
	DetectInfra *bool `pulumi:"detectInfra"`
	// Detect frequent issues within transactions and services, enabled (`true`) or disabled (`false`)
	DetectTxn *bool `pulumi:"detectTxn"`
}

type FrequentIssuesState struct {
	// Detect frequent issues within applications, enabled (`true`) or disabled (`false`)
	DetectApps pulumi.BoolPtrInput
	// Events raised at this level typically occur when no specific topological entity is applicable, often based on data such as logs and metrics. This does not impact the detection of issues within applications, transactions, services, or infrastructure.
	DetectEnv pulumi.BoolPtrInput
	// Detect frequent issues within infrastructure, enabled (`true`) or disabled (`false`)
	DetectInfra pulumi.BoolPtrInput
	// Detect frequent issues within transactions and services, enabled (`true`) or disabled (`false`)
	DetectTxn pulumi.BoolPtrInput
}

func (FrequentIssuesState) ElementType() reflect.Type {
	return reflect.TypeOf((*frequentIssuesState)(nil)).Elem()
}

type frequentIssuesArgs struct {
	// Detect frequent issues within applications, enabled (`true`) or disabled (`false`)
	DetectApps bool `pulumi:"detectApps"`
	// Events raised at this level typically occur when no specific topological entity is applicable, often based on data such as logs and metrics. This does not impact the detection of issues within applications, transactions, services, or infrastructure.
	DetectEnv *bool `pulumi:"detectEnv"`
	// Detect frequent issues within infrastructure, enabled (`true`) or disabled (`false`)
	DetectInfra bool `pulumi:"detectInfra"`
	// Detect frequent issues within transactions and services, enabled (`true`) or disabled (`false`)
	DetectTxn bool `pulumi:"detectTxn"`
}

// The set of arguments for constructing a FrequentIssues resource.
type FrequentIssuesArgs struct {
	// Detect frequent issues within applications, enabled (`true`) or disabled (`false`)
	DetectApps pulumi.BoolInput
	// Events raised at this level typically occur when no specific topological entity is applicable, often based on data such as logs and metrics. This does not impact the detection of issues within applications, transactions, services, or infrastructure.
	DetectEnv pulumi.BoolPtrInput
	// Detect frequent issues within infrastructure, enabled (`true`) or disabled (`false`)
	DetectInfra pulumi.BoolInput
	// Detect frequent issues within transactions and services, enabled (`true`) or disabled (`false`)
	DetectTxn pulumi.BoolInput
}

func (FrequentIssuesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*frequentIssuesArgs)(nil)).Elem()
}

type FrequentIssuesInput interface {
	pulumi.Input

	ToFrequentIssuesOutput() FrequentIssuesOutput
	ToFrequentIssuesOutputWithContext(ctx context.Context) FrequentIssuesOutput
}

func (*FrequentIssues) ElementType() reflect.Type {
	return reflect.TypeOf((**FrequentIssues)(nil)).Elem()
}

func (i *FrequentIssues) ToFrequentIssuesOutput() FrequentIssuesOutput {
	return i.ToFrequentIssuesOutputWithContext(context.Background())
}

func (i *FrequentIssues) ToFrequentIssuesOutputWithContext(ctx context.Context) FrequentIssuesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrequentIssuesOutput)
}

// FrequentIssuesArrayInput is an input type that accepts FrequentIssuesArray and FrequentIssuesArrayOutput values.
// You can construct a concrete instance of `FrequentIssuesArrayInput` via:
//
//	FrequentIssuesArray{ FrequentIssuesArgs{...} }
type FrequentIssuesArrayInput interface {
	pulumi.Input

	ToFrequentIssuesArrayOutput() FrequentIssuesArrayOutput
	ToFrequentIssuesArrayOutputWithContext(context.Context) FrequentIssuesArrayOutput
}

type FrequentIssuesArray []FrequentIssuesInput

func (FrequentIssuesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FrequentIssues)(nil)).Elem()
}

func (i FrequentIssuesArray) ToFrequentIssuesArrayOutput() FrequentIssuesArrayOutput {
	return i.ToFrequentIssuesArrayOutputWithContext(context.Background())
}

func (i FrequentIssuesArray) ToFrequentIssuesArrayOutputWithContext(ctx context.Context) FrequentIssuesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrequentIssuesArrayOutput)
}

// FrequentIssuesMapInput is an input type that accepts FrequentIssuesMap and FrequentIssuesMapOutput values.
// You can construct a concrete instance of `FrequentIssuesMapInput` via:
//
//	FrequentIssuesMap{ "key": FrequentIssuesArgs{...} }
type FrequentIssuesMapInput interface {
	pulumi.Input

	ToFrequentIssuesMapOutput() FrequentIssuesMapOutput
	ToFrequentIssuesMapOutputWithContext(context.Context) FrequentIssuesMapOutput
}

type FrequentIssuesMap map[string]FrequentIssuesInput

func (FrequentIssuesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FrequentIssues)(nil)).Elem()
}

func (i FrequentIssuesMap) ToFrequentIssuesMapOutput() FrequentIssuesMapOutput {
	return i.ToFrequentIssuesMapOutputWithContext(context.Background())
}

func (i FrequentIssuesMap) ToFrequentIssuesMapOutputWithContext(ctx context.Context) FrequentIssuesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrequentIssuesMapOutput)
}

type FrequentIssuesOutput struct{ *pulumi.OutputState }

func (FrequentIssuesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FrequentIssues)(nil)).Elem()
}

func (o FrequentIssuesOutput) ToFrequentIssuesOutput() FrequentIssuesOutput {
	return o
}

func (o FrequentIssuesOutput) ToFrequentIssuesOutputWithContext(ctx context.Context) FrequentIssuesOutput {
	return o
}

// Detect frequent issues within applications, enabled (`true`) or disabled (`false`)
func (o FrequentIssuesOutput) DetectApps() pulumi.BoolOutput {
	return o.ApplyT(func(v *FrequentIssues) pulumi.BoolOutput { return v.DetectApps }).(pulumi.BoolOutput)
}

// Events raised at this level typically occur when no specific topological entity is applicable, often based on data such as logs and metrics. This does not impact the detection of issues within applications, transactions, services, or infrastructure.
func (o FrequentIssuesOutput) DetectEnv() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FrequentIssues) pulumi.BoolPtrOutput { return v.DetectEnv }).(pulumi.BoolPtrOutput)
}

// Detect frequent issues within infrastructure, enabled (`true`) or disabled (`false`)
func (o FrequentIssuesOutput) DetectInfra() pulumi.BoolOutput {
	return o.ApplyT(func(v *FrequentIssues) pulumi.BoolOutput { return v.DetectInfra }).(pulumi.BoolOutput)
}

// Detect frequent issues within transactions and services, enabled (`true`) or disabled (`false`)
func (o FrequentIssuesOutput) DetectTxn() pulumi.BoolOutput {
	return o.ApplyT(func(v *FrequentIssues) pulumi.BoolOutput { return v.DetectTxn }).(pulumi.BoolOutput)
}

type FrequentIssuesArrayOutput struct{ *pulumi.OutputState }

func (FrequentIssuesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FrequentIssues)(nil)).Elem()
}

func (o FrequentIssuesArrayOutput) ToFrequentIssuesArrayOutput() FrequentIssuesArrayOutput {
	return o
}

func (o FrequentIssuesArrayOutput) ToFrequentIssuesArrayOutputWithContext(ctx context.Context) FrequentIssuesArrayOutput {
	return o
}

func (o FrequentIssuesArrayOutput) Index(i pulumi.IntInput) FrequentIssuesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FrequentIssues {
		return vs[0].([]*FrequentIssues)[vs[1].(int)]
	}).(FrequentIssuesOutput)
}

type FrequentIssuesMapOutput struct{ *pulumi.OutputState }

func (FrequentIssuesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FrequentIssues)(nil)).Elem()
}

func (o FrequentIssuesMapOutput) ToFrequentIssuesMapOutput() FrequentIssuesMapOutput {
	return o
}

func (o FrequentIssuesMapOutput) ToFrequentIssuesMapOutputWithContext(ctx context.Context) FrequentIssuesMapOutput {
	return o
}

func (o FrequentIssuesMapOutput) MapIndex(k pulumi.StringInput) FrequentIssuesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FrequentIssues {
		return vs[0].(map[string]*FrequentIssues)[vs[1].(string)]
	}).(FrequentIssuesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FrequentIssuesInput)(nil)).Elem(), &FrequentIssues{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrequentIssuesArrayInput)(nil)).Elem(), FrequentIssuesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrequentIssuesMapInput)(nil)).Elem(), FrequentIssuesMap{})
	pulumi.RegisterOutputType(FrequentIssuesOutput{})
	pulumi.RegisterOutputType(FrequentIssuesArrayOutput{})
	pulumi.RegisterOutputType(FrequentIssuesMapOutput{})
}
