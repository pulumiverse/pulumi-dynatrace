// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type RequestNaming struct {
	pulumi.CustomResourceState

	// The set of conditions for the request naming rule usage. You can specify several conditions. The request has to match
	// **all** the specified conditions for the rule to trigger
	Conditions RequestNamingConditionsOutput `pulumi:"conditions"`
	// The rule is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Specifies the management zones for which this rule should be applied
	ManagementZones pulumi.StringArrayOutput `pulumi:"managementZones"`
	// The name to be assigned to matching requests
	NamingPattern pulumi.StringOutput `pulumi:"namingPattern"`
	// The list of custom placeholders to be used in the naming pattern. It enables you to extract a request attribute value or
	// other request attribute and use it in the request naming pattern.
	Placeholders RequestNamingPlaceholdersPtrOutput `pulumi:"placeholders"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns pulumi.StringPtrOutput `pulumi:"unknowns"`
}

// NewRequestNaming registers a new resource with the given unique name, arguments, and options.
func NewRequestNaming(ctx *pulumi.Context,
	name string, args *RequestNamingArgs, opts ...pulumi.ResourceOption) (*RequestNaming, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Conditions == nil {
		return nil, errors.New("invalid value for required argument 'Conditions'")
	}
	if args.NamingPattern == nil {
		return nil, errors.New("invalid value for required argument 'NamingPattern'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RequestNaming
	err := ctx.RegisterResource("dynatrace:index/requestNaming:RequestNaming", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRequestNaming gets an existing RequestNaming resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRequestNaming(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RequestNamingState, opts ...pulumi.ResourceOption) (*RequestNaming, error) {
	var resource RequestNaming
	err := ctx.ReadResource("dynatrace:index/requestNaming:RequestNaming", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RequestNaming resources.
type requestNamingState struct {
	// The set of conditions for the request naming rule usage. You can specify several conditions. The request has to match
	// **all** the specified conditions for the rule to trigger
	Conditions *RequestNamingConditions `pulumi:"conditions"`
	// The rule is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// Specifies the management zones for which this rule should be applied
	ManagementZones []string `pulumi:"managementZones"`
	// The name to be assigned to matching requests
	NamingPattern *string `pulumi:"namingPattern"`
	// The list of custom placeholders to be used in the naming pattern. It enables you to extract a request attribute value or
	// other request attribute and use it in the request naming pattern.
	Placeholders *RequestNamingPlaceholders `pulumi:"placeholders"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `pulumi:"unknowns"`
}

type RequestNamingState struct {
	// The set of conditions for the request naming rule usage. You can specify several conditions. The request has to match
	// **all** the specified conditions for the rule to trigger
	Conditions RequestNamingConditionsPtrInput
	// The rule is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// Specifies the management zones for which this rule should be applied
	ManagementZones pulumi.StringArrayInput
	// The name to be assigned to matching requests
	NamingPattern pulumi.StringPtrInput
	// The list of custom placeholders to be used in the naming pattern. It enables you to extract a request attribute value or
	// other request attribute and use it in the request naming pattern.
	Placeholders RequestNamingPlaceholdersPtrInput
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns pulumi.StringPtrInput
}

func (RequestNamingState) ElementType() reflect.Type {
	return reflect.TypeOf((*requestNamingState)(nil)).Elem()
}

type requestNamingArgs struct {
	// The set of conditions for the request naming rule usage. You can specify several conditions. The request has to match
	// **all** the specified conditions for the rule to trigger
	Conditions RequestNamingConditions `pulumi:"conditions"`
	// The rule is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// Specifies the management zones for which this rule should be applied
	ManagementZones []string `pulumi:"managementZones"`
	// The name to be assigned to matching requests
	NamingPattern string `pulumi:"namingPattern"`
	// The list of custom placeholders to be used in the naming pattern. It enables you to extract a request attribute value or
	// other request attribute and use it in the request naming pattern.
	Placeholders *RequestNamingPlaceholders `pulumi:"placeholders"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `pulumi:"unknowns"`
}

// The set of arguments for constructing a RequestNaming resource.
type RequestNamingArgs struct {
	// The set of conditions for the request naming rule usage. You can specify several conditions. The request has to match
	// **all** the specified conditions for the rule to trigger
	Conditions RequestNamingConditionsInput
	// The rule is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// Specifies the management zones for which this rule should be applied
	ManagementZones pulumi.StringArrayInput
	// The name to be assigned to matching requests
	NamingPattern pulumi.StringInput
	// The list of custom placeholders to be used in the naming pattern. It enables you to extract a request attribute value or
	// other request attribute and use it in the request naming pattern.
	Placeholders RequestNamingPlaceholdersPtrInput
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns pulumi.StringPtrInput
}

func (RequestNamingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*requestNamingArgs)(nil)).Elem()
}

type RequestNamingInput interface {
	pulumi.Input

	ToRequestNamingOutput() RequestNamingOutput
	ToRequestNamingOutputWithContext(ctx context.Context) RequestNamingOutput
}

func (*RequestNaming) ElementType() reflect.Type {
	return reflect.TypeOf((**RequestNaming)(nil)).Elem()
}

func (i *RequestNaming) ToRequestNamingOutput() RequestNamingOutput {
	return i.ToRequestNamingOutputWithContext(context.Background())
}

func (i *RequestNaming) ToRequestNamingOutputWithContext(ctx context.Context) RequestNamingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RequestNamingOutput)
}

// RequestNamingArrayInput is an input type that accepts RequestNamingArray and RequestNamingArrayOutput values.
// You can construct a concrete instance of `RequestNamingArrayInput` via:
//
//	RequestNamingArray{ RequestNamingArgs{...} }
type RequestNamingArrayInput interface {
	pulumi.Input

	ToRequestNamingArrayOutput() RequestNamingArrayOutput
	ToRequestNamingArrayOutputWithContext(context.Context) RequestNamingArrayOutput
}

type RequestNamingArray []RequestNamingInput

func (RequestNamingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RequestNaming)(nil)).Elem()
}

func (i RequestNamingArray) ToRequestNamingArrayOutput() RequestNamingArrayOutput {
	return i.ToRequestNamingArrayOutputWithContext(context.Background())
}

func (i RequestNamingArray) ToRequestNamingArrayOutputWithContext(ctx context.Context) RequestNamingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RequestNamingArrayOutput)
}

// RequestNamingMapInput is an input type that accepts RequestNamingMap and RequestNamingMapOutput values.
// You can construct a concrete instance of `RequestNamingMapInput` via:
//
//	RequestNamingMap{ "key": RequestNamingArgs{...} }
type RequestNamingMapInput interface {
	pulumi.Input

	ToRequestNamingMapOutput() RequestNamingMapOutput
	ToRequestNamingMapOutputWithContext(context.Context) RequestNamingMapOutput
}

type RequestNamingMap map[string]RequestNamingInput

func (RequestNamingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RequestNaming)(nil)).Elem()
}

func (i RequestNamingMap) ToRequestNamingMapOutput() RequestNamingMapOutput {
	return i.ToRequestNamingMapOutputWithContext(context.Background())
}

func (i RequestNamingMap) ToRequestNamingMapOutputWithContext(ctx context.Context) RequestNamingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RequestNamingMapOutput)
}

type RequestNamingOutput struct{ *pulumi.OutputState }

func (RequestNamingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RequestNaming)(nil)).Elem()
}

func (o RequestNamingOutput) ToRequestNamingOutput() RequestNamingOutput {
	return o
}

func (o RequestNamingOutput) ToRequestNamingOutputWithContext(ctx context.Context) RequestNamingOutput {
	return o
}

// The set of conditions for the request naming rule usage. You can specify several conditions. The request has to match
// **all** the specified conditions for the rule to trigger
func (o RequestNamingOutput) Conditions() RequestNamingConditionsOutput {
	return o.ApplyT(func(v *RequestNaming) RequestNamingConditionsOutput { return v.Conditions }).(RequestNamingConditionsOutput)
}

// The rule is enabled (`true`) or disabled (`false`)
func (o RequestNamingOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RequestNaming) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Specifies the management zones for which this rule should be applied
func (o RequestNamingOutput) ManagementZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RequestNaming) pulumi.StringArrayOutput { return v.ManagementZones }).(pulumi.StringArrayOutput)
}

// The name to be assigned to matching requests
func (o RequestNamingOutput) NamingPattern() pulumi.StringOutput {
	return o.ApplyT(func(v *RequestNaming) pulumi.StringOutput { return v.NamingPattern }).(pulumi.StringOutput)
}

// The list of custom placeholders to be used in the naming pattern. It enables you to extract a request attribute value or
// other request attribute and use it in the request naming pattern.
func (o RequestNamingOutput) Placeholders() RequestNamingPlaceholdersPtrOutput {
	return o.ApplyT(func(v *RequestNaming) RequestNamingPlaceholdersPtrOutput { return v.Placeholders }).(RequestNamingPlaceholdersPtrOutput)
}

// allows for configuring properties that are not explicitly supported by the current version of this provider
func (o RequestNamingOutput) Unknowns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RequestNaming) pulumi.StringPtrOutput { return v.Unknowns }).(pulumi.StringPtrOutput)
}

type RequestNamingArrayOutput struct{ *pulumi.OutputState }

func (RequestNamingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RequestNaming)(nil)).Elem()
}

func (o RequestNamingArrayOutput) ToRequestNamingArrayOutput() RequestNamingArrayOutput {
	return o
}

func (o RequestNamingArrayOutput) ToRequestNamingArrayOutputWithContext(ctx context.Context) RequestNamingArrayOutput {
	return o
}

func (o RequestNamingArrayOutput) Index(i pulumi.IntInput) RequestNamingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RequestNaming {
		return vs[0].([]*RequestNaming)[vs[1].(int)]
	}).(RequestNamingOutput)
}

type RequestNamingMapOutput struct{ *pulumi.OutputState }

func (RequestNamingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RequestNaming)(nil)).Elem()
}

func (o RequestNamingMapOutput) ToRequestNamingMapOutput() RequestNamingMapOutput {
	return o
}

func (o RequestNamingMapOutput) ToRequestNamingMapOutputWithContext(ctx context.Context) RequestNamingMapOutput {
	return o
}

func (o RequestNamingMapOutput) MapIndex(k pulumi.StringInput) RequestNamingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RequestNaming {
		return vs[0].(map[string]*RequestNaming)[vs[1].(string)]
	}).(RequestNamingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RequestNamingInput)(nil)).Elem(), &RequestNaming{})
	pulumi.RegisterInputType(reflect.TypeOf((*RequestNamingArrayInput)(nil)).Elem(), RequestNamingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RequestNamingMapInput)(nil)).Elem(), RequestNamingMap{})
	pulumi.RegisterOutputType(RequestNamingOutput{})
	pulumi.RegisterOutputType(RequestNamingArrayOutput{})
	pulumi.RegisterOutputType(RequestNamingMapOutput{})
}
