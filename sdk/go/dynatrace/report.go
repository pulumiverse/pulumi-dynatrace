// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

// > This resource requires the API token scopes **Read configuration** (`ReadConfig`) and **Write configuration** (`WriteConfig`)
//
// ## Dynatrace Documentation
//
// - Subscribe to Dynatrace dashboard reports - https://docs.dynatrace.com/docs/observe-and-explore/dashboards-classic/dashboards/subscribe-to-dashboard-reports
//
// - Reports API - https://docs.dynatrace.com/docs/dynatrace-api/configuration-api/reports-api
type Report struct {
	pulumi.CustomResourceState

	// The ID of the associated dashboard
	DashboardId pulumi.StringOutput `pulumi:"dashboardId"`
	// The email notifications for the dashboard report are enabled (true) or disabled (false).
	EmailNotifications pulumi.BoolPtrOutput `pulumi:"emailNotifications"`
	// A list of the report subscribers
	Subscriptions ReportSubscriptionsPtrOutput `pulumi:"subscriptions"`
	// The type of report
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewReport registers a new resource with the given unique name, arguments, and options.
func NewReport(ctx *pulumi.Context,
	name string, args *ReportArgs, opts ...pulumi.ResourceOption) (*Report, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DashboardId == nil {
		return nil, errors.New("invalid value for required argument 'DashboardId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Report
	err := ctx.RegisterResource("dynatrace:index/report:Report", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReport gets an existing Report resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReport(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReportState, opts ...pulumi.ResourceOption) (*Report, error) {
	var resource Report
	err := ctx.ReadResource("dynatrace:index/report:Report", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Report resources.
type reportState struct {
	// The ID of the associated dashboard
	DashboardId *string `pulumi:"dashboardId"`
	// The email notifications for the dashboard report are enabled (true) or disabled (false).
	EmailNotifications *bool `pulumi:"emailNotifications"`
	// A list of the report subscribers
	Subscriptions *ReportSubscriptions `pulumi:"subscriptions"`
	// The type of report
	Type *string `pulumi:"type"`
}

type ReportState struct {
	// The ID of the associated dashboard
	DashboardId pulumi.StringPtrInput
	// The email notifications for the dashboard report are enabled (true) or disabled (false).
	EmailNotifications pulumi.BoolPtrInput
	// A list of the report subscribers
	Subscriptions ReportSubscriptionsPtrInput
	// The type of report
	Type pulumi.StringPtrInput
}

func (ReportState) ElementType() reflect.Type {
	return reflect.TypeOf((*reportState)(nil)).Elem()
}

type reportArgs struct {
	// The ID of the associated dashboard
	DashboardId string `pulumi:"dashboardId"`
	// The email notifications for the dashboard report are enabled (true) or disabled (false).
	EmailNotifications *bool `pulumi:"emailNotifications"`
	// A list of the report subscribers
	Subscriptions *ReportSubscriptions `pulumi:"subscriptions"`
	// The type of report
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Report resource.
type ReportArgs struct {
	// The ID of the associated dashboard
	DashboardId pulumi.StringInput
	// The email notifications for the dashboard report are enabled (true) or disabled (false).
	EmailNotifications pulumi.BoolPtrInput
	// A list of the report subscribers
	Subscriptions ReportSubscriptionsPtrInput
	// The type of report
	Type pulumi.StringInput
}

func (ReportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*reportArgs)(nil)).Elem()
}

type ReportInput interface {
	pulumi.Input

	ToReportOutput() ReportOutput
	ToReportOutputWithContext(ctx context.Context) ReportOutput
}

func (*Report) ElementType() reflect.Type {
	return reflect.TypeOf((**Report)(nil)).Elem()
}

func (i *Report) ToReportOutput() ReportOutput {
	return i.ToReportOutputWithContext(context.Background())
}

func (i *Report) ToReportOutputWithContext(ctx context.Context) ReportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportOutput)
}

// ReportArrayInput is an input type that accepts ReportArray and ReportArrayOutput values.
// You can construct a concrete instance of `ReportArrayInput` via:
//
//	ReportArray{ ReportArgs{...} }
type ReportArrayInput interface {
	pulumi.Input

	ToReportArrayOutput() ReportArrayOutput
	ToReportArrayOutputWithContext(context.Context) ReportArrayOutput
}

type ReportArray []ReportInput

func (ReportArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Report)(nil)).Elem()
}

func (i ReportArray) ToReportArrayOutput() ReportArrayOutput {
	return i.ToReportArrayOutputWithContext(context.Background())
}

func (i ReportArray) ToReportArrayOutputWithContext(ctx context.Context) ReportArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportArrayOutput)
}

// ReportMapInput is an input type that accepts ReportMap and ReportMapOutput values.
// You can construct a concrete instance of `ReportMapInput` via:
//
//	ReportMap{ "key": ReportArgs{...} }
type ReportMapInput interface {
	pulumi.Input

	ToReportMapOutput() ReportMapOutput
	ToReportMapOutputWithContext(context.Context) ReportMapOutput
}

type ReportMap map[string]ReportInput

func (ReportMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Report)(nil)).Elem()
}

func (i ReportMap) ToReportMapOutput() ReportMapOutput {
	return i.ToReportMapOutputWithContext(context.Background())
}

func (i ReportMap) ToReportMapOutputWithContext(ctx context.Context) ReportMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportMapOutput)
}

type ReportOutput struct{ *pulumi.OutputState }

func (ReportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Report)(nil)).Elem()
}

func (o ReportOutput) ToReportOutput() ReportOutput {
	return o
}

func (o ReportOutput) ToReportOutputWithContext(ctx context.Context) ReportOutput {
	return o
}

// The ID of the associated dashboard
func (o ReportOutput) DashboardId() pulumi.StringOutput {
	return o.ApplyT(func(v *Report) pulumi.StringOutput { return v.DashboardId }).(pulumi.StringOutput)
}

// The email notifications for the dashboard report are enabled (true) or disabled (false).
func (o ReportOutput) EmailNotifications() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Report) pulumi.BoolPtrOutput { return v.EmailNotifications }).(pulumi.BoolPtrOutput)
}

// A list of the report subscribers
func (o ReportOutput) Subscriptions() ReportSubscriptionsPtrOutput {
	return o.ApplyT(func(v *Report) ReportSubscriptionsPtrOutput { return v.Subscriptions }).(ReportSubscriptionsPtrOutput)
}

// The type of report
func (o ReportOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Report) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type ReportArrayOutput struct{ *pulumi.OutputState }

func (ReportArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Report)(nil)).Elem()
}

func (o ReportArrayOutput) ToReportArrayOutput() ReportArrayOutput {
	return o
}

func (o ReportArrayOutput) ToReportArrayOutputWithContext(ctx context.Context) ReportArrayOutput {
	return o
}

func (o ReportArrayOutput) Index(i pulumi.IntInput) ReportOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Report {
		return vs[0].([]*Report)[vs[1].(int)]
	}).(ReportOutput)
}

type ReportMapOutput struct{ *pulumi.OutputState }

func (ReportMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Report)(nil)).Elem()
}

func (o ReportMapOutput) ToReportMapOutput() ReportMapOutput {
	return o
}

func (o ReportMapOutput) ToReportMapOutputWithContext(ctx context.Context) ReportMapOutput {
	return o
}

func (o ReportMapOutput) MapIndex(k pulumi.StringInput) ReportOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Report {
		return vs[0].(map[string]*Report)[vs[1].(string)]
	}).(ReportOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReportInput)(nil)).Elem(), &Report{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReportArrayInput)(nil)).Elem(), ReportArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReportMapInput)(nil)).Elem(), ReportMap{})
	pulumi.RegisterOutputType(ReportOutput{})
	pulumi.RegisterOutputType(ReportArrayOutput{})
	pulumi.RegisterOutputType(ReportMapOutput{})
}
