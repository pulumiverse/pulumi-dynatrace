// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type HubSubscriptions struct {
	pulumi.CustomResourceState

	// Subscriptions
	TokenSubscriptions HubSubscriptionsTokenSubscriptionsPtrOutput `pulumi:"tokenSubscriptions"`
}

// NewHubSubscriptions registers a new resource with the given unique name, arguments, and options.
func NewHubSubscriptions(ctx *pulumi.Context,
	name string, args *HubSubscriptionsArgs, opts ...pulumi.ResourceOption) (*HubSubscriptions, error) {
	if args == nil {
		args = &HubSubscriptionsArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HubSubscriptions
	err := ctx.RegisterResource("dynatrace:index/hubSubscriptions:HubSubscriptions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHubSubscriptions gets an existing HubSubscriptions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHubSubscriptions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HubSubscriptionsState, opts ...pulumi.ResourceOption) (*HubSubscriptions, error) {
	var resource HubSubscriptions
	err := ctx.ReadResource("dynatrace:index/hubSubscriptions:HubSubscriptions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HubSubscriptions resources.
type hubSubscriptionsState struct {
	// Subscriptions
	TokenSubscriptions *HubSubscriptionsTokenSubscriptions `pulumi:"tokenSubscriptions"`
}

type HubSubscriptionsState struct {
	// Subscriptions
	TokenSubscriptions HubSubscriptionsTokenSubscriptionsPtrInput
}

func (HubSubscriptionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*hubSubscriptionsState)(nil)).Elem()
}

type hubSubscriptionsArgs struct {
	// Subscriptions
	TokenSubscriptions *HubSubscriptionsTokenSubscriptions `pulumi:"tokenSubscriptions"`
}

// The set of arguments for constructing a HubSubscriptions resource.
type HubSubscriptionsArgs struct {
	// Subscriptions
	TokenSubscriptions HubSubscriptionsTokenSubscriptionsPtrInput
}

func (HubSubscriptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hubSubscriptionsArgs)(nil)).Elem()
}

type HubSubscriptionsInput interface {
	pulumi.Input

	ToHubSubscriptionsOutput() HubSubscriptionsOutput
	ToHubSubscriptionsOutputWithContext(ctx context.Context) HubSubscriptionsOutput
}

func (*HubSubscriptions) ElementType() reflect.Type {
	return reflect.TypeOf((**HubSubscriptions)(nil)).Elem()
}

func (i *HubSubscriptions) ToHubSubscriptionsOutput() HubSubscriptionsOutput {
	return i.ToHubSubscriptionsOutputWithContext(context.Background())
}

func (i *HubSubscriptions) ToHubSubscriptionsOutputWithContext(ctx context.Context) HubSubscriptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubSubscriptionsOutput)
}

// HubSubscriptionsArrayInput is an input type that accepts HubSubscriptionsArray and HubSubscriptionsArrayOutput values.
// You can construct a concrete instance of `HubSubscriptionsArrayInput` via:
//
//	HubSubscriptionsArray{ HubSubscriptionsArgs{...} }
type HubSubscriptionsArrayInput interface {
	pulumi.Input

	ToHubSubscriptionsArrayOutput() HubSubscriptionsArrayOutput
	ToHubSubscriptionsArrayOutputWithContext(context.Context) HubSubscriptionsArrayOutput
}

type HubSubscriptionsArray []HubSubscriptionsInput

func (HubSubscriptionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HubSubscriptions)(nil)).Elem()
}

func (i HubSubscriptionsArray) ToHubSubscriptionsArrayOutput() HubSubscriptionsArrayOutput {
	return i.ToHubSubscriptionsArrayOutputWithContext(context.Background())
}

func (i HubSubscriptionsArray) ToHubSubscriptionsArrayOutputWithContext(ctx context.Context) HubSubscriptionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubSubscriptionsArrayOutput)
}

// HubSubscriptionsMapInput is an input type that accepts HubSubscriptionsMap and HubSubscriptionsMapOutput values.
// You can construct a concrete instance of `HubSubscriptionsMapInput` via:
//
//	HubSubscriptionsMap{ "key": HubSubscriptionsArgs{...} }
type HubSubscriptionsMapInput interface {
	pulumi.Input

	ToHubSubscriptionsMapOutput() HubSubscriptionsMapOutput
	ToHubSubscriptionsMapOutputWithContext(context.Context) HubSubscriptionsMapOutput
}

type HubSubscriptionsMap map[string]HubSubscriptionsInput

func (HubSubscriptionsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HubSubscriptions)(nil)).Elem()
}

func (i HubSubscriptionsMap) ToHubSubscriptionsMapOutput() HubSubscriptionsMapOutput {
	return i.ToHubSubscriptionsMapOutputWithContext(context.Background())
}

func (i HubSubscriptionsMap) ToHubSubscriptionsMapOutputWithContext(ctx context.Context) HubSubscriptionsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubSubscriptionsMapOutput)
}

type HubSubscriptionsOutput struct{ *pulumi.OutputState }

func (HubSubscriptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HubSubscriptions)(nil)).Elem()
}

func (o HubSubscriptionsOutput) ToHubSubscriptionsOutput() HubSubscriptionsOutput {
	return o
}

func (o HubSubscriptionsOutput) ToHubSubscriptionsOutputWithContext(ctx context.Context) HubSubscriptionsOutput {
	return o
}

// Subscriptions
func (o HubSubscriptionsOutput) TokenSubscriptions() HubSubscriptionsTokenSubscriptionsPtrOutput {
	return o.ApplyT(func(v *HubSubscriptions) HubSubscriptionsTokenSubscriptionsPtrOutput { return v.TokenSubscriptions }).(HubSubscriptionsTokenSubscriptionsPtrOutput)
}

type HubSubscriptionsArrayOutput struct{ *pulumi.OutputState }

func (HubSubscriptionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HubSubscriptions)(nil)).Elem()
}

func (o HubSubscriptionsArrayOutput) ToHubSubscriptionsArrayOutput() HubSubscriptionsArrayOutput {
	return o
}

func (o HubSubscriptionsArrayOutput) ToHubSubscriptionsArrayOutputWithContext(ctx context.Context) HubSubscriptionsArrayOutput {
	return o
}

func (o HubSubscriptionsArrayOutput) Index(i pulumi.IntInput) HubSubscriptionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HubSubscriptions {
		return vs[0].([]*HubSubscriptions)[vs[1].(int)]
	}).(HubSubscriptionsOutput)
}

type HubSubscriptionsMapOutput struct{ *pulumi.OutputState }

func (HubSubscriptionsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HubSubscriptions)(nil)).Elem()
}

func (o HubSubscriptionsMapOutput) ToHubSubscriptionsMapOutput() HubSubscriptionsMapOutput {
	return o
}

func (o HubSubscriptionsMapOutput) ToHubSubscriptionsMapOutputWithContext(ctx context.Context) HubSubscriptionsMapOutput {
	return o
}

func (o HubSubscriptionsMapOutput) MapIndex(k pulumi.StringInput) HubSubscriptionsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HubSubscriptions {
		return vs[0].(map[string]*HubSubscriptions)[vs[1].(string)]
	}).(HubSubscriptionsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HubSubscriptionsInput)(nil)).Elem(), &HubSubscriptions{})
	pulumi.RegisterInputType(reflect.TypeOf((*HubSubscriptionsArrayInput)(nil)).Elem(), HubSubscriptionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HubSubscriptionsMapInput)(nil)).Elem(), HubSubscriptionsMap{})
	pulumi.RegisterOutputType(HubSubscriptionsOutput{})
	pulumi.RegisterOutputType(HubSubscriptionsArrayOutput{})
	pulumi.RegisterOutputType(HubSubscriptionsMapOutput{})
}
