// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type MonitoredTechnologiesPython struct {
	pulumi.CustomResourceState

	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId pulumi.StringPtrOutput `pulumi:"hostId"`
}

// NewMonitoredTechnologiesPython registers a new resource with the given unique name, arguments, and options.
func NewMonitoredTechnologiesPython(ctx *pulumi.Context,
	name string, args *MonitoredTechnologiesPythonArgs, opts ...pulumi.ResourceOption) (*MonitoredTechnologiesPython, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MonitoredTechnologiesPython
	err := ctx.RegisterResource("dynatrace:index/monitoredTechnologiesPython:MonitoredTechnologiesPython", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMonitoredTechnologiesPython gets an existing MonitoredTechnologiesPython resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMonitoredTechnologiesPython(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MonitoredTechnologiesPythonState, opts ...pulumi.ResourceOption) (*MonitoredTechnologiesPython, error) {
	var resource MonitoredTechnologiesPython
	err := ctx.ReadResource("dynatrace:index/monitoredTechnologiesPython:MonitoredTechnologiesPython", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MonitoredTechnologiesPython resources.
type monitoredTechnologiesPythonState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId *string `pulumi:"hostId"`
}

type MonitoredTechnologiesPythonState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId pulumi.StringPtrInput
}

func (MonitoredTechnologiesPythonState) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoredTechnologiesPythonState)(nil)).Elem()
}

type monitoredTechnologiesPythonArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId *string `pulumi:"hostId"`
}

// The set of arguments for constructing a MonitoredTechnologiesPython resource.
type MonitoredTechnologiesPythonArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId pulumi.StringPtrInput
}

func (MonitoredTechnologiesPythonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoredTechnologiesPythonArgs)(nil)).Elem()
}

type MonitoredTechnologiesPythonInput interface {
	pulumi.Input

	ToMonitoredTechnologiesPythonOutput() MonitoredTechnologiesPythonOutput
	ToMonitoredTechnologiesPythonOutputWithContext(ctx context.Context) MonitoredTechnologiesPythonOutput
}

func (*MonitoredTechnologiesPython) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoredTechnologiesPython)(nil)).Elem()
}

func (i *MonitoredTechnologiesPython) ToMonitoredTechnologiesPythonOutput() MonitoredTechnologiesPythonOutput {
	return i.ToMonitoredTechnologiesPythonOutputWithContext(context.Background())
}

func (i *MonitoredTechnologiesPython) ToMonitoredTechnologiesPythonOutputWithContext(ctx context.Context) MonitoredTechnologiesPythonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoredTechnologiesPythonOutput)
}

// MonitoredTechnologiesPythonArrayInput is an input type that accepts MonitoredTechnologiesPythonArray and MonitoredTechnologiesPythonArrayOutput values.
// You can construct a concrete instance of `MonitoredTechnologiesPythonArrayInput` via:
//
//	MonitoredTechnologiesPythonArray{ MonitoredTechnologiesPythonArgs{...} }
type MonitoredTechnologiesPythonArrayInput interface {
	pulumi.Input

	ToMonitoredTechnologiesPythonArrayOutput() MonitoredTechnologiesPythonArrayOutput
	ToMonitoredTechnologiesPythonArrayOutputWithContext(context.Context) MonitoredTechnologiesPythonArrayOutput
}

type MonitoredTechnologiesPythonArray []MonitoredTechnologiesPythonInput

func (MonitoredTechnologiesPythonArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MonitoredTechnologiesPython)(nil)).Elem()
}

func (i MonitoredTechnologiesPythonArray) ToMonitoredTechnologiesPythonArrayOutput() MonitoredTechnologiesPythonArrayOutput {
	return i.ToMonitoredTechnologiesPythonArrayOutputWithContext(context.Background())
}

func (i MonitoredTechnologiesPythonArray) ToMonitoredTechnologiesPythonArrayOutputWithContext(ctx context.Context) MonitoredTechnologiesPythonArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoredTechnologiesPythonArrayOutput)
}

// MonitoredTechnologiesPythonMapInput is an input type that accepts MonitoredTechnologiesPythonMap and MonitoredTechnologiesPythonMapOutput values.
// You can construct a concrete instance of `MonitoredTechnologiesPythonMapInput` via:
//
//	MonitoredTechnologiesPythonMap{ "key": MonitoredTechnologiesPythonArgs{...} }
type MonitoredTechnologiesPythonMapInput interface {
	pulumi.Input

	ToMonitoredTechnologiesPythonMapOutput() MonitoredTechnologiesPythonMapOutput
	ToMonitoredTechnologiesPythonMapOutputWithContext(context.Context) MonitoredTechnologiesPythonMapOutput
}

type MonitoredTechnologiesPythonMap map[string]MonitoredTechnologiesPythonInput

func (MonitoredTechnologiesPythonMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MonitoredTechnologiesPython)(nil)).Elem()
}

func (i MonitoredTechnologiesPythonMap) ToMonitoredTechnologiesPythonMapOutput() MonitoredTechnologiesPythonMapOutput {
	return i.ToMonitoredTechnologiesPythonMapOutputWithContext(context.Background())
}

func (i MonitoredTechnologiesPythonMap) ToMonitoredTechnologiesPythonMapOutputWithContext(ctx context.Context) MonitoredTechnologiesPythonMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoredTechnologiesPythonMapOutput)
}

type MonitoredTechnologiesPythonOutput struct{ *pulumi.OutputState }

func (MonitoredTechnologiesPythonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoredTechnologiesPython)(nil)).Elem()
}

func (o MonitoredTechnologiesPythonOutput) ToMonitoredTechnologiesPythonOutput() MonitoredTechnologiesPythonOutput {
	return o
}

func (o MonitoredTechnologiesPythonOutput) ToMonitoredTechnologiesPythonOutputWithContext(ctx context.Context) MonitoredTechnologiesPythonOutput {
	return o
}

// This setting is enabled (`true`) or disabled (`false`)
func (o MonitoredTechnologiesPythonOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *MonitoredTechnologiesPython) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
func (o MonitoredTechnologiesPythonOutput) HostId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitoredTechnologiesPython) pulumi.StringPtrOutput { return v.HostId }).(pulumi.StringPtrOutput)
}

type MonitoredTechnologiesPythonArrayOutput struct{ *pulumi.OutputState }

func (MonitoredTechnologiesPythonArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MonitoredTechnologiesPython)(nil)).Elem()
}

func (o MonitoredTechnologiesPythonArrayOutput) ToMonitoredTechnologiesPythonArrayOutput() MonitoredTechnologiesPythonArrayOutput {
	return o
}

func (o MonitoredTechnologiesPythonArrayOutput) ToMonitoredTechnologiesPythonArrayOutputWithContext(ctx context.Context) MonitoredTechnologiesPythonArrayOutput {
	return o
}

func (o MonitoredTechnologiesPythonArrayOutput) Index(i pulumi.IntInput) MonitoredTechnologiesPythonOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MonitoredTechnologiesPython {
		return vs[0].([]*MonitoredTechnologiesPython)[vs[1].(int)]
	}).(MonitoredTechnologiesPythonOutput)
}

type MonitoredTechnologiesPythonMapOutput struct{ *pulumi.OutputState }

func (MonitoredTechnologiesPythonMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MonitoredTechnologiesPython)(nil)).Elem()
}

func (o MonitoredTechnologiesPythonMapOutput) ToMonitoredTechnologiesPythonMapOutput() MonitoredTechnologiesPythonMapOutput {
	return o
}

func (o MonitoredTechnologiesPythonMapOutput) ToMonitoredTechnologiesPythonMapOutputWithContext(ctx context.Context) MonitoredTechnologiesPythonMapOutput {
	return o
}

func (o MonitoredTechnologiesPythonMapOutput) MapIndex(k pulumi.StringInput) MonitoredTechnologiesPythonOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MonitoredTechnologiesPython {
		return vs[0].(map[string]*MonitoredTechnologiesPython)[vs[1].(string)]
	}).(MonitoredTechnologiesPythonOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoredTechnologiesPythonInput)(nil)).Elem(), &MonitoredTechnologiesPython{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoredTechnologiesPythonArrayInput)(nil)).Elem(), MonitoredTechnologiesPythonArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoredTechnologiesPythonMapInput)(nil)).Elem(), MonitoredTechnologiesPythonMap{})
	pulumi.RegisterOutputType(MonitoredTechnologiesPythonOutput{})
	pulumi.RegisterOutputType(MonitoredTechnologiesPythonArrayOutput{})
	pulumi.RegisterOutputType(MonitoredTechnologiesPythonMapOutput{})
}
