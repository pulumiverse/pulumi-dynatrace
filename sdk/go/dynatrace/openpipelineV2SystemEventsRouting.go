// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OpenpipelineV2SystemEventsRouting struct {
	pulumi.CustomResourceState

	// Routing for pipelines
	RoutingEntries OpenpipelineV2SystemEventsRoutingRoutingEntriesPtrOutput `pulumi:"routingEntries"`
}

// NewOpenpipelineV2SystemEventsRouting registers a new resource with the given unique name, arguments, and options.
func NewOpenpipelineV2SystemEventsRouting(ctx *pulumi.Context,
	name string, args *OpenpipelineV2SystemEventsRoutingArgs, opts ...pulumi.ResourceOption) (*OpenpipelineV2SystemEventsRouting, error) {
	if args == nil {
		args = &OpenpipelineV2SystemEventsRoutingArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenpipelineV2SystemEventsRouting
	err := ctx.RegisterResource("dynatrace:index/openpipelineV2SystemEventsRouting:OpenpipelineV2SystemEventsRouting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenpipelineV2SystemEventsRouting gets an existing OpenpipelineV2SystemEventsRouting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenpipelineV2SystemEventsRouting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenpipelineV2SystemEventsRoutingState, opts ...pulumi.ResourceOption) (*OpenpipelineV2SystemEventsRouting, error) {
	var resource OpenpipelineV2SystemEventsRouting
	err := ctx.ReadResource("dynatrace:index/openpipelineV2SystemEventsRouting:OpenpipelineV2SystemEventsRouting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenpipelineV2SystemEventsRouting resources.
type openpipelineV2SystemEventsRoutingState struct {
	// Routing for pipelines
	RoutingEntries *OpenpipelineV2SystemEventsRoutingRoutingEntries `pulumi:"routingEntries"`
}

type OpenpipelineV2SystemEventsRoutingState struct {
	// Routing for pipelines
	RoutingEntries OpenpipelineV2SystemEventsRoutingRoutingEntriesPtrInput
}

func (OpenpipelineV2SystemEventsRoutingState) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2SystemEventsRoutingState)(nil)).Elem()
}

type openpipelineV2SystemEventsRoutingArgs struct {
	// Routing for pipelines
	RoutingEntries *OpenpipelineV2SystemEventsRoutingRoutingEntries `pulumi:"routingEntries"`
}

// The set of arguments for constructing a OpenpipelineV2SystemEventsRouting resource.
type OpenpipelineV2SystemEventsRoutingArgs struct {
	// Routing for pipelines
	RoutingEntries OpenpipelineV2SystemEventsRoutingRoutingEntriesPtrInput
}

func (OpenpipelineV2SystemEventsRoutingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2SystemEventsRoutingArgs)(nil)).Elem()
}

type OpenpipelineV2SystemEventsRoutingInput interface {
	pulumi.Input

	ToOpenpipelineV2SystemEventsRoutingOutput() OpenpipelineV2SystemEventsRoutingOutput
	ToOpenpipelineV2SystemEventsRoutingOutputWithContext(ctx context.Context) OpenpipelineV2SystemEventsRoutingOutput
}

func (*OpenpipelineV2SystemEventsRouting) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2SystemEventsRouting)(nil)).Elem()
}

func (i *OpenpipelineV2SystemEventsRouting) ToOpenpipelineV2SystemEventsRoutingOutput() OpenpipelineV2SystemEventsRoutingOutput {
	return i.ToOpenpipelineV2SystemEventsRoutingOutputWithContext(context.Background())
}

func (i *OpenpipelineV2SystemEventsRouting) ToOpenpipelineV2SystemEventsRoutingOutputWithContext(ctx context.Context) OpenpipelineV2SystemEventsRoutingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2SystemEventsRoutingOutput)
}

// OpenpipelineV2SystemEventsRoutingArrayInput is an input type that accepts OpenpipelineV2SystemEventsRoutingArray and OpenpipelineV2SystemEventsRoutingArrayOutput values.
// You can construct a concrete instance of `OpenpipelineV2SystemEventsRoutingArrayInput` via:
//
//	OpenpipelineV2SystemEventsRoutingArray{ OpenpipelineV2SystemEventsRoutingArgs{...} }
type OpenpipelineV2SystemEventsRoutingArrayInput interface {
	pulumi.Input

	ToOpenpipelineV2SystemEventsRoutingArrayOutput() OpenpipelineV2SystemEventsRoutingArrayOutput
	ToOpenpipelineV2SystemEventsRoutingArrayOutputWithContext(context.Context) OpenpipelineV2SystemEventsRoutingArrayOutput
}

type OpenpipelineV2SystemEventsRoutingArray []OpenpipelineV2SystemEventsRoutingInput

func (OpenpipelineV2SystemEventsRoutingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2SystemEventsRouting)(nil)).Elem()
}

func (i OpenpipelineV2SystemEventsRoutingArray) ToOpenpipelineV2SystemEventsRoutingArrayOutput() OpenpipelineV2SystemEventsRoutingArrayOutput {
	return i.ToOpenpipelineV2SystemEventsRoutingArrayOutputWithContext(context.Background())
}

func (i OpenpipelineV2SystemEventsRoutingArray) ToOpenpipelineV2SystemEventsRoutingArrayOutputWithContext(ctx context.Context) OpenpipelineV2SystemEventsRoutingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2SystemEventsRoutingArrayOutput)
}

// OpenpipelineV2SystemEventsRoutingMapInput is an input type that accepts OpenpipelineV2SystemEventsRoutingMap and OpenpipelineV2SystemEventsRoutingMapOutput values.
// You can construct a concrete instance of `OpenpipelineV2SystemEventsRoutingMapInput` via:
//
//	OpenpipelineV2SystemEventsRoutingMap{ "key": OpenpipelineV2SystemEventsRoutingArgs{...} }
type OpenpipelineV2SystemEventsRoutingMapInput interface {
	pulumi.Input

	ToOpenpipelineV2SystemEventsRoutingMapOutput() OpenpipelineV2SystemEventsRoutingMapOutput
	ToOpenpipelineV2SystemEventsRoutingMapOutputWithContext(context.Context) OpenpipelineV2SystemEventsRoutingMapOutput
}

type OpenpipelineV2SystemEventsRoutingMap map[string]OpenpipelineV2SystemEventsRoutingInput

func (OpenpipelineV2SystemEventsRoutingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2SystemEventsRouting)(nil)).Elem()
}

func (i OpenpipelineV2SystemEventsRoutingMap) ToOpenpipelineV2SystemEventsRoutingMapOutput() OpenpipelineV2SystemEventsRoutingMapOutput {
	return i.ToOpenpipelineV2SystemEventsRoutingMapOutputWithContext(context.Background())
}

func (i OpenpipelineV2SystemEventsRoutingMap) ToOpenpipelineV2SystemEventsRoutingMapOutputWithContext(ctx context.Context) OpenpipelineV2SystemEventsRoutingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2SystemEventsRoutingMapOutput)
}

type OpenpipelineV2SystemEventsRoutingOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2SystemEventsRoutingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2SystemEventsRouting)(nil)).Elem()
}

func (o OpenpipelineV2SystemEventsRoutingOutput) ToOpenpipelineV2SystemEventsRoutingOutput() OpenpipelineV2SystemEventsRoutingOutput {
	return o
}

func (o OpenpipelineV2SystemEventsRoutingOutput) ToOpenpipelineV2SystemEventsRoutingOutputWithContext(ctx context.Context) OpenpipelineV2SystemEventsRoutingOutput {
	return o
}

// Routing for pipelines
func (o OpenpipelineV2SystemEventsRoutingOutput) RoutingEntries() OpenpipelineV2SystemEventsRoutingRoutingEntriesPtrOutput {
	return o.ApplyT(func(v *OpenpipelineV2SystemEventsRouting) OpenpipelineV2SystemEventsRoutingRoutingEntriesPtrOutput {
		return v.RoutingEntries
	}).(OpenpipelineV2SystemEventsRoutingRoutingEntriesPtrOutput)
}

type OpenpipelineV2SystemEventsRoutingArrayOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2SystemEventsRoutingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2SystemEventsRouting)(nil)).Elem()
}

func (o OpenpipelineV2SystemEventsRoutingArrayOutput) ToOpenpipelineV2SystemEventsRoutingArrayOutput() OpenpipelineV2SystemEventsRoutingArrayOutput {
	return o
}

func (o OpenpipelineV2SystemEventsRoutingArrayOutput) ToOpenpipelineV2SystemEventsRoutingArrayOutputWithContext(ctx context.Context) OpenpipelineV2SystemEventsRoutingArrayOutput {
	return o
}

func (o OpenpipelineV2SystemEventsRoutingArrayOutput) Index(i pulumi.IntInput) OpenpipelineV2SystemEventsRoutingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenpipelineV2SystemEventsRouting {
		return vs[0].([]*OpenpipelineV2SystemEventsRouting)[vs[1].(int)]
	}).(OpenpipelineV2SystemEventsRoutingOutput)
}

type OpenpipelineV2SystemEventsRoutingMapOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2SystemEventsRoutingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2SystemEventsRouting)(nil)).Elem()
}

func (o OpenpipelineV2SystemEventsRoutingMapOutput) ToOpenpipelineV2SystemEventsRoutingMapOutput() OpenpipelineV2SystemEventsRoutingMapOutput {
	return o
}

func (o OpenpipelineV2SystemEventsRoutingMapOutput) ToOpenpipelineV2SystemEventsRoutingMapOutputWithContext(ctx context.Context) OpenpipelineV2SystemEventsRoutingMapOutput {
	return o
}

func (o OpenpipelineV2SystemEventsRoutingMapOutput) MapIndex(k pulumi.StringInput) OpenpipelineV2SystemEventsRoutingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenpipelineV2SystemEventsRouting {
		return vs[0].(map[string]*OpenpipelineV2SystemEventsRouting)[vs[1].(string)]
	}).(OpenpipelineV2SystemEventsRoutingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2SystemEventsRoutingInput)(nil)).Elem(), &OpenpipelineV2SystemEventsRouting{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2SystemEventsRoutingArrayInput)(nil)).Elem(), OpenpipelineV2SystemEventsRoutingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2SystemEventsRoutingMapInput)(nil)).Elem(), OpenpipelineV2SystemEventsRoutingMap{})
	pulumi.RegisterOutputType(OpenpipelineV2SystemEventsRoutingOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2SystemEventsRoutingArrayOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2SystemEventsRoutingMapOutput{})
}
