// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type NetworkZone struct {
	pulumi.CustomResourceState

	// A list of alternative network zones.
	AlternativeZones pulumi.StringArrayOutput `pulumi:"alternativeZones"`
	// A short description of the network zone
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The fallback mode of the network zone. Possible values: `ANY_ACTIVE_GATE`, `NONE`, `ONLY_DEFAULT_ZONE`
	FallbackMode pulumi.StringPtrOutput `pulumi:"fallbackMode"`
	// Name of the network zone cannot be modified once created. Dynatrace stores the field in lowercase, allowed characters: alphanumeric, hyphen, underscore, dot
	Name pulumi.StringOutput `pulumi:"name"`
	// The number of ActiveGates in the network zone.
	NumOfConfiguredActivegates pulumi.IntPtrOutput `pulumi:"numOfConfiguredActivegates"`
	// The number of OneAgents that are configured to use the network zone as primary.
	NumOfConfiguredOneagents pulumi.IntPtrOutput `pulumi:"numOfConfiguredOneagents"`
	// The number of OneAgents from other network zones that are using ActiveGates in the network zone.
	NumOfOneagentsFromOtherZones pulumi.IntPtrOutput `pulumi:"numOfOneagentsFromOtherZones"`
	// The number of OneAgents that are using ActiveGates in the network zone.
	NumOfOneagentsUsing pulumi.IntPtrOutput `pulumi:"numOfOneagentsUsing"`
}

// NewNetworkZone registers a new resource with the given unique name, arguments, and options.
func NewNetworkZone(ctx *pulumi.Context,
	name string, args *NetworkZoneArgs, opts ...pulumi.ResourceOption) (*NetworkZone, error) {
	if args == nil {
		args = &NetworkZoneArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkZone
	err := ctx.RegisterResource("dynatrace:index/networkZone:NetworkZone", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkZone gets an existing NetworkZone resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkZone(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkZoneState, opts ...pulumi.ResourceOption) (*NetworkZone, error) {
	var resource NetworkZone
	err := ctx.ReadResource("dynatrace:index/networkZone:NetworkZone", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkZone resources.
type networkZoneState struct {
	// A list of alternative network zones.
	AlternativeZones []string `pulumi:"alternativeZones"`
	// A short description of the network zone
	Description *string `pulumi:"description"`
	// The fallback mode of the network zone. Possible values: `ANY_ACTIVE_GATE`, `NONE`, `ONLY_DEFAULT_ZONE`
	FallbackMode *string `pulumi:"fallbackMode"`
	// Name of the network zone cannot be modified once created. Dynatrace stores the field in lowercase, allowed characters: alphanumeric, hyphen, underscore, dot
	Name *string `pulumi:"name"`
	// The number of ActiveGates in the network zone.
	NumOfConfiguredActivegates *int `pulumi:"numOfConfiguredActivegates"`
	// The number of OneAgents that are configured to use the network zone as primary.
	NumOfConfiguredOneagents *int `pulumi:"numOfConfiguredOneagents"`
	// The number of OneAgents from other network zones that are using ActiveGates in the network zone.
	NumOfOneagentsFromOtherZones *int `pulumi:"numOfOneagentsFromOtherZones"`
	// The number of OneAgents that are using ActiveGates in the network zone.
	NumOfOneagentsUsing *int `pulumi:"numOfOneagentsUsing"`
}

type NetworkZoneState struct {
	// A list of alternative network zones.
	AlternativeZones pulumi.StringArrayInput
	// A short description of the network zone
	Description pulumi.StringPtrInput
	// The fallback mode of the network zone. Possible values: `ANY_ACTIVE_GATE`, `NONE`, `ONLY_DEFAULT_ZONE`
	FallbackMode pulumi.StringPtrInput
	// Name of the network zone cannot be modified once created. Dynatrace stores the field in lowercase, allowed characters: alphanumeric, hyphen, underscore, dot
	Name pulumi.StringPtrInput
	// The number of ActiveGates in the network zone.
	NumOfConfiguredActivegates pulumi.IntPtrInput
	// The number of OneAgents that are configured to use the network zone as primary.
	NumOfConfiguredOneagents pulumi.IntPtrInput
	// The number of OneAgents from other network zones that are using ActiveGates in the network zone.
	NumOfOneagentsFromOtherZones pulumi.IntPtrInput
	// The number of OneAgents that are using ActiveGates in the network zone.
	NumOfOneagentsUsing pulumi.IntPtrInput
}

func (NetworkZoneState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkZoneState)(nil)).Elem()
}

type networkZoneArgs struct {
	// A list of alternative network zones.
	AlternativeZones []string `pulumi:"alternativeZones"`
	// A short description of the network zone
	Description *string `pulumi:"description"`
	// The fallback mode of the network zone. Possible values: `ANY_ACTIVE_GATE`, `NONE`, `ONLY_DEFAULT_ZONE`
	FallbackMode *string `pulumi:"fallbackMode"`
	// Name of the network zone cannot be modified once created. Dynatrace stores the field in lowercase, allowed characters: alphanumeric, hyphen, underscore, dot
	Name *string `pulumi:"name"`
	// The number of ActiveGates in the network zone.
	NumOfConfiguredActivegates *int `pulumi:"numOfConfiguredActivegates"`
	// The number of OneAgents that are configured to use the network zone as primary.
	NumOfConfiguredOneagents *int `pulumi:"numOfConfiguredOneagents"`
	// The number of OneAgents from other network zones that are using ActiveGates in the network zone.
	NumOfOneagentsFromOtherZones *int `pulumi:"numOfOneagentsFromOtherZones"`
	// The number of OneAgents that are using ActiveGates in the network zone.
	NumOfOneagentsUsing *int `pulumi:"numOfOneagentsUsing"`
}

// The set of arguments for constructing a NetworkZone resource.
type NetworkZoneArgs struct {
	// A list of alternative network zones.
	AlternativeZones pulumi.StringArrayInput
	// A short description of the network zone
	Description pulumi.StringPtrInput
	// The fallback mode of the network zone. Possible values: `ANY_ACTIVE_GATE`, `NONE`, `ONLY_DEFAULT_ZONE`
	FallbackMode pulumi.StringPtrInput
	// Name of the network zone cannot be modified once created. Dynatrace stores the field in lowercase, allowed characters: alphanumeric, hyphen, underscore, dot
	Name pulumi.StringPtrInput
	// The number of ActiveGates in the network zone.
	NumOfConfiguredActivegates pulumi.IntPtrInput
	// The number of OneAgents that are configured to use the network zone as primary.
	NumOfConfiguredOneagents pulumi.IntPtrInput
	// The number of OneAgents from other network zones that are using ActiveGates in the network zone.
	NumOfOneagentsFromOtherZones pulumi.IntPtrInput
	// The number of OneAgents that are using ActiveGates in the network zone.
	NumOfOneagentsUsing pulumi.IntPtrInput
}

func (NetworkZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkZoneArgs)(nil)).Elem()
}

type NetworkZoneInput interface {
	pulumi.Input

	ToNetworkZoneOutput() NetworkZoneOutput
	ToNetworkZoneOutputWithContext(ctx context.Context) NetworkZoneOutput
}

func (*NetworkZone) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkZone)(nil)).Elem()
}

func (i *NetworkZone) ToNetworkZoneOutput() NetworkZoneOutput {
	return i.ToNetworkZoneOutputWithContext(context.Background())
}

func (i *NetworkZone) ToNetworkZoneOutputWithContext(ctx context.Context) NetworkZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkZoneOutput)
}

// NetworkZoneArrayInput is an input type that accepts NetworkZoneArray and NetworkZoneArrayOutput values.
// You can construct a concrete instance of `NetworkZoneArrayInput` via:
//
//	NetworkZoneArray{ NetworkZoneArgs{...} }
type NetworkZoneArrayInput interface {
	pulumi.Input

	ToNetworkZoneArrayOutput() NetworkZoneArrayOutput
	ToNetworkZoneArrayOutputWithContext(context.Context) NetworkZoneArrayOutput
}

type NetworkZoneArray []NetworkZoneInput

func (NetworkZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkZone)(nil)).Elem()
}

func (i NetworkZoneArray) ToNetworkZoneArrayOutput() NetworkZoneArrayOutput {
	return i.ToNetworkZoneArrayOutputWithContext(context.Background())
}

func (i NetworkZoneArray) ToNetworkZoneArrayOutputWithContext(ctx context.Context) NetworkZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkZoneArrayOutput)
}

// NetworkZoneMapInput is an input type that accepts NetworkZoneMap and NetworkZoneMapOutput values.
// You can construct a concrete instance of `NetworkZoneMapInput` via:
//
//	NetworkZoneMap{ "key": NetworkZoneArgs{...} }
type NetworkZoneMapInput interface {
	pulumi.Input

	ToNetworkZoneMapOutput() NetworkZoneMapOutput
	ToNetworkZoneMapOutputWithContext(context.Context) NetworkZoneMapOutput
}

type NetworkZoneMap map[string]NetworkZoneInput

func (NetworkZoneMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkZone)(nil)).Elem()
}

func (i NetworkZoneMap) ToNetworkZoneMapOutput() NetworkZoneMapOutput {
	return i.ToNetworkZoneMapOutputWithContext(context.Background())
}

func (i NetworkZoneMap) ToNetworkZoneMapOutputWithContext(ctx context.Context) NetworkZoneMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkZoneMapOutput)
}

type NetworkZoneOutput struct{ *pulumi.OutputState }

func (NetworkZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkZone)(nil)).Elem()
}

func (o NetworkZoneOutput) ToNetworkZoneOutput() NetworkZoneOutput {
	return o
}

func (o NetworkZoneOutput) ToNetworkZoneOutputWithContext(ctx context.Context) NetworkZoneOutput {
	return o
}

// A list of alternative network zones.
func (o NetworkZoneOutput) AlternativeZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkZone) pulumi.StringArrayOutput { return v.AlternativeZones }).(pulumi.StringArrayOutput)
}

// A short description of the network zone
func (o NetworkZoneOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkZone) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The fallback mode of the network zone. Possible values: `ANY_ACTIVE_GATE`, `NONE`, `ONLY_DEFAULT_ZONE`
func (o NetworkZoneOutput) FallbackMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkZone) pulumi.StringPtrOutput { return v.FallbackMode }).(pulumi.StringPtrOutput)
}

// Name of the network zone cannot be modified once created. Dynatrace stores the field in lowercase, allowed characters: alphanumeric, hyphen, underscore, dot
func (o NetworkZoneOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkZone) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The number of ActiveGates in the network zone.
func (o NetworkZoneOutput) NumOfConfiguredActivegates() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkZone) pulumi.IntPtrOutput { return v.NumOfConfiguredActivegates }).(pulumi.IntPtrOutput)
}

// The number of OneAgents that are configured to use the network zone as primary.
func (o NetworkZoneOutput) NumOfConfiguredOneagents() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkZone) pulumi.IntPtrOutput { return v.NumOfConfiguredOneagents }).(pulumi.IntPtrOutput)
}

// The number of OneAgents from other network zones that are using ActiveGates in the network zone.
func (o NetworkZoneOutput) NumOfOneagentsFromOtherZones() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkZone) pulumi.IntPtrOutput { return v.NumOfOneagentsFromOtherZones }).(pulumi.IntPtrOutput)
}

// The number of OneAgents that are using ActiveGates in the network zone.
func (o NetworkZoneOutput) NumOfOneagentsUsing() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkZone) pulumi.IntPtrOutput { return v.NumOfOneagentsUsing }).(pulumi.IntPtrOutput)
}

type NetworkZoneArrayOutput struct{ *pulumi.OutputState }

func (NetworkZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkZone)(nil)).Elem()
}

func (o NetworkZoneArrayOutput) ToNetworkZoneArrayOutput() NetworkZoneArrayOutput {
	return o
}

func (o NetworkZoneArrayOutput) ToNetworkZoneArrayOutputWithContext(ctx context.Context) NetworkZoneArrayOutput {
	return o
}

func (o NetworkZoneArrayOutput) Index(i pulumi.IntInput) NetworkZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkZone {
		return vs[0].([]*NetworkZone)[vs[1].(int)]
	}).(NetworkZoneOutput)
}

type NetworkZoneMapOutput struct{ *pulumi.OutputState }

func (NetworkZoneMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkZone)(nil)).Elem()
}

func (o NetworkZoneMapOutput) ToNetworkZoneMapOutput() NetworkZoneMapOutput {
	return o
}

func (o NetworkZoneMapOutput) ToNetworkZoneMapOutputWithContext(ctx context.Context) NetworkZoneMapOutput {
	return o
}

func (o NetworkZoneMapOutput) MapIndex(k pulumi.StringInput) NetworkZoneOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkZone {
		return vs[0].(map[string]*NetworkZone)[vs[1].(string)]
	}).(NetworkZoneOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkZoneInput)(nil)).Elem(), &NetworkZone{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkZoneArrayInput)(nil)).Elem(), NetworkZoneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkZoneMapInput)(nil)).Elem(), NetworkZoneMap{})
	pulumi.RegisterOutputType(NetworkZoneOutput{})
	pulumi.RegisterOutputType(NetworkZoneArrayOutput{})
	pulumi.RegisterOutputType(NetworkZoneMapOutput{})
}
