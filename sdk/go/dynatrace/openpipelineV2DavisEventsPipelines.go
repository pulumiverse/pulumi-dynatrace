// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OpenpipelineV2DavisEventsPipelines struct {
	pulumi.CustomResourceState

	// Cost allocation stage
	CostAllocation OpenpipelineV2DavisEventsPipelinesCostAllocationOutput `pulumi:"costAllocation"`
	// Custom pipeline id
	CustomId pulumi.StringOutput `pulumi:"customId"`
	// Data extraction stage
	DataExtraction OpenpipelineV2DavisEventsPipelinesDataExtractionOutput `pulumi:"dataExtraction"`
	// Davis event extraction stage
	Davis OpenpipelineV2DavisEventsPipelinesDavisOutput `pulumi:"davis"`
	// Display name
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Metrics extraction stage
	MetricExtraction OpenpipelineV2DavisEventsPipelinesMetricExtractionOutput `pulumi:"metricExtraction"`
	// Processing stage
	Processing OpenpipelineV2DavisEventsPipelinesProcessingOutput `pulumi:"processing"`
	// Product allocation stage
	ProductAllocation OpenpipelineV2DavisEventsPipelinesProductAllocationOutput `pulumi:"productAllocation"`
	// Security context stage
	SecurityContext OpenpipelineV2DavisEventsPipelinesSecurityContextOutput `pulumi:"securityContext"`
	// Storage stage
	Storage OpenpipelineV2DavisEventsPipelinesStorageOutput `pulumi:"storage"`
}

// NewOpenpipelineV2DavisEventsPipelines registers a new resource with the given unique name, arguments, and options.
func NewOpenpipelineV2DavisEventsPipelines(ctx *pulumi.Context,
	name string, args *OpenpipelineV2DavisEventsPipelinesArgs, opts ...pulumi.ResourceOption) (*OpenpipelineV2DavisEventsPipelines, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CostAllocation == nil {
		return nil, errors.New("invalid value for required argument 'CostAllocation'")
	}
	if args.CustomId == nil {
		return nil, errors.New("invalid value for required argument 'CustomId'")
	}
	if args.DataExtraction == nil {
		return nil, errors.New("invalid value for required argument 'DataExtraction'")
	}
	if args.Davis == nil {
		return nil, errors.New("invalid value for required argument 'Davis'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.MetricExtraction == nil {
		return nil, errors.New("invalid value for required argument 'MetricExtraction'")
	}
	if args.Processing == nil {
		return nil, errors.New("invalid value for required argument 'Processing'")
	}
	if args.ProductAllocation == nil {
		return nil, errors.New("invalid value for required argument 'ProductAllocation'")
	}
	if args.SecurityContext == nil {
		return nil, errors.New("invalid value for required argument 'SecurityContext'")
	}
	if args.Storage == nil {
		return nil, errors.New("invalid value for required argument 'Storage'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenpipelineV2DavisEventsPipelines
	err := ctx.RegisterResource("dynatrace:index/openpipelineV2DavisEventsPipelines:OpenpipelineV2DavisEventsPipelines", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenpipelineV2DavisEventsPipelines gets an existing OpenpipelineV2DavisEventsPipelines resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenpipelineV2DavisEventsPipelines(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenpipelineV2DavisEventsPipelinesState, opts ...pulumi.ResourceOption) (*OpenpipelineV2DavisEventsPipelines, error) {
	var resource OpenpipelineV2DavisEventsPipelines
	err := ctx.ReadResource("dynatrace:index/openpipelineV2DavisEventsPipelines:OpenpipelineV2DavisEventsPipelines", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenpipelineV2DavisEventsPipelines resources.
type openpipelineV2DavisEventsPipelinesState struct {
	// Cost allocation stage
	CostAllocation *OpenpipelineV2DavisEventsPipelinesCostAllocation `pulumi:"costAllocation"`
	// Custom pipeline id
	CustomId *string `pulumi:"customId"`
	// Data extraction stage
	DataExtraction *OpenpipelineV2DavisEventsPipelinesDataExtraction `pulumi:"dataExtraction"`
	// Davis event extraction stage
	Davis *OpenpipelineV2DavisEventsPipelinesDavis `pulumi:"davis"`
	// Display name
	DisplayName *string `pulumi:"displayName"`
	// Metrics extraction stage
	MetricExtraction *OpenpipelineV2DavisEventsPipelinesMetricExtraction `pulumi:"metricExtraction"`
	// Processing stage
	Processing *OpenpipelineV2DavisEventsPipelinesProcessing `pulumi:"processing"`
	// Product allocation stage
	ProductAllocation *OpenpipelineV2DavisEventsPipelinesProductAllocation `pulumi:"productAllocation"`
	// Security context stage
	SecurityContext *OpenpipelineV2DavisEventsPipelinesSecurityContext `pulumi:"securityContext"`
	// Storage stage
	Storage *OpenpipelineV2DavisEventsPipelinesStorage `pulumi:"storage"`
}

type OpenpipelineV2DavisEventsPipelinesState struct {
	// Cost allocation stage
	CostAllocation OpenpipelineV2DavisEventsPipelinesCostAllocationPtrInput
	// Custom pipeline id
	CustomId pulumi.StringPtrInput
	// Data extraction stage
	DataExtraction OpenpipelineV2DavisEventsPipelinesDataExtractionPtrInput
	// Davis event extraction stage
	Davis OpenpipelineV2DavisEventsPipelinesDavisPtrInput
	// Display name
	DisplayName pulumi.StringPtrInput
	// Metrics extraction stage
	MetricExtraction OpenpipelineV2DavisEventsPipelinesMetricExtractionPtrInput
	// Processing stage
	Processing OpenpipelineV2DavisEventsPipelinesProcessingPtrInput
	// Product allocation stage
	ProductAllocation OpenpipelineV2DavisEventsPipelinesProductAllocationPtrInput
	// Security context stage
	SecurityContext OpenpipelineV2DavisEventsPipelinesSecurityContextPtrInput
	// Storage stage
	Storage OpenpipelineV2DavisEventsPipelinesStoragePtrInput
}

func (OpenpipelineV2DavisEventsPipelinesState) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2DavisEventsPipelinesState)(nil)).Elem()
}

type openpipelineV2DavisEventsPipelinesArgs struct {
	// Cost allocation stage
	CostAllocation OpenpipelineV2DavisEventsPipelinesCostAllocation `pulumi:"costAllocation"`
	// Custom pipeline id
	CustomId string `pulumi:"customId"`
	// Data extraction stage
	DataExtraction OpenpipelineV2DavisEventsPipelinesDataExtraction `pulumi:"dataExtraction"`
	// Davis event extraction stage
	Davis OpenpipelineV2DavisEventsPipelinesDavis `pulumi:"davis"`
	// Display name
	DisplayName string `pulumi:"displayName"`
	// Metrics extraction stage
	MetricExtraction OpenpipelineV2DavisEventsPipelinesMetricExtraction `pulumi:"metricExtraction"`
	// Processing stage
	Processing OpenpipelineV2DavisEventsPipelinesProcessing `pulumi:"processing"`
	// Product allocation stage
	ProductAllocation OpenpipelineV2DavisEventsPipelinesProductAllocation `pulumi:"productAllocation"`
	// Security context stage
	SecurityContext OpenpipelineV2DavisEventsPipelinesSecurityContext `pulumi:"securityContext"`
	// Storage stage
	Storage OpenpipelineV2DavisEventsPipelinesStorage `pulumi:"storage"`
}

// The set of arguments for constructing a OpenpipelineV2DavisEventsPipelines resource.
type OpenpipelineV2DavisEventsPipelinesArgs struct {
	// Cost allocation stage
	CostAllocation OpenpipelineV2DavisEventsPipelinesCostAllocationInput
	// Custom pipeline id
	CustomId pulumi.StringInput
	// Data extraction stage
	DataExtraction OpenpipelineV2DavisEventsPipelinesDataExtractionInput
	// Davis event extraction stage
	Davis OpenpipelineV2DavisEventsPipelinesDavisInput
	// Display name
	DisplayName pulumi.StringInput
	// Metrics extraction stage
	MetricExtraction OpenpipelineV2DavisEventsPipelinesMetricExtractionInput
	// Processing stage
	Processing OpenpipelineV2DavisEventsPipelinesProcessingInput
	// Product allocation stage
	ProductAllocation OpenpipelineV2DavisEventsPipelinesProductAllocationInput
	// Security context stage
	SecurityContext OpenpipelineV2DavisEventsPipelinesSecurityContextInput
	// Storage stage
	Storage OpenpipelineV2DavisEventsPipelinesStorageInput
}

func (OpenpipelineV2DavisEventsPipelinesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2DavisEventsPipelinesArgs)(nil)).Elem()
}

type OpenpipelineV2DavisEventsPipelinesInput interface {
	pulumi.Input

	ToOpenpipelineV2DavisEventsPipelinesOutput() OpenpipelineV2DavisEventsPipelinesOutput
	ToOpenpipelineV2DavisEventsPipelinesOutputWithContext(ctx context.Context) OpenpipelineV2DavisEventsPipelinesOutput
}

func (*OpenpipelineV2DavisEventsPipelines) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2DavisEventsPipelines)(nil)).Elem()
}

func (i *OpenpipelineV2DavisEventsPipelines) ToOpenpipelineV2DavisEventsPipelinesOutput() OpenpipelineV2DavisEventsPipelinesOutput {
	return i.ToOpenpipelineV2DavisEventsPipelinesOutputWithContext(context.Background())
}

func (i *OpenpipelineV2DavisEventsPipelines) ToOpenpipelineV2DavisEventsPipelinesOutputWithContext(ctx context.Context) OpenpipelineV2DavisEventsPipelinesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2DavisEventsPipelinesOutput)
}

// OpenpipelineV2DavisEventsPipelinesArrayInput is an input type that accepts OpenpipelineV2DavisEventsPipelinesArray and OpenpipelineV2DavisEventsPipelinesArrayOutput values.
// You can construct a concrete instance of `OpenpipelineV2DavisEventsPipelinesArrayInput` via:
//
//	OpenpipelineV2DavisEventsPipelinesArray{ OpenpipelineV2DavisEventsPipelinesArgs{...} }
type OpenpipelineV2DavisEventsPipelinesArrayInput interface {
	pulumi.Input

	ToOpenpipelineV2DavisEventsPipelinesArrayOutput() OpenpipelineV2DavisEventsPipelinesArrayOutput
	ToOpenpipelineV2DavisEventsPipelinesArrayOutputWithContext(context.Context) OpenpipelineV2DavisEventsPipelinesArrayOutput
}

type OpenpipelineV2DavisEventsPipelinesArray []OpenpipelineV2DavisEventsPipelinesInput

func (OpenpipelineV2DavisEventsPipelinesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2DavisEventsPipelines)(nil)).Elem()
}

func (i OpenpipelineV2DavisEventsPipelinesArray) ToOpenpipelineV2DavisEventsPipelinesArrayOutput() OpenpipelineV2DavisEventsPipelinesArrayOutput {
	return i.ToOpenpipelineV2DavisEventsPipelinesArrayOutputWithContext(context.Background())
}

func (i OpenpipelineV2DavisEventsPipelinesArray) ToOpenpipelineV2DavisEventsPipelinesArrayOutputWithContext(ctx context.Context) OpenpipelineV2DavisEventsPipelinesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2DavisEventsPipelinesArrayOutput)
}

// OpenpipelineV2DavisEventsPipelinesMapInput is an input type that accepts OpenpipelineV2DavisEventsPipelinesMap and OpenpipelineV2DavisEventsPipelinesMapOutput values.
// You can construct a concrete instance of `OpenpipelineV2DavisEventsPipelinesMapInput` via:
//
//	OpenpipelineV2DavisEventsPipelinesMap{ "key": OpenpipelineV2DavisEventsPipelinesArgs{...} }
type OpenpipelineV2DavisEventsPipelinesMapInput interface {
	pulumi.Input

	ToOpenpipelineV2DavisEventsPipelinesMapOutput() OpenpipelineV2DavisEventsPipelinesMapOutput
	ToOpenpipelineV2DavisEventsPipelinesMapOutputWithContext(context.Context) OpenpipelineV2DavisEventsPipelinesMapOutput
}

type OpenpipelineV2DavisEventsPipelinesMap map[string]OpenpipelineV2DavisEventsPipelinesInput

func (OpenpipelineV2DavisEventsPipelinesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2DavisEventsPipelines)(nil)).Elem()
}

func (i OpenpipelineV2DavisEventsPipelinesMap) ToOpenpipelineV2DavisEventsPipelinesMapOutput() OpenpipelineV2DavisEventsPipelinesMapOutput {
	return i.ToOpenpipelineV2DavisEventsPipelinesMapOutputWithContext(context.Background())
}

func (i OpenpipelineV2DavisEventsPipelinesMap) ToOpenpipelineV2DavisEventsPipelinesMapOutputWithContext(ctx context.Context) OpenpipelineV2DavisEventsPipelinesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2DavisEventsPipelinesMapOutput)
}

type OpenpipelineV2DavisEventsPipelinesOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2DavisEventsPipelinesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2DavisEventsPipelines)(nil)).Elem()
}

func (o OpenpipelineV2DavisEventsPipelinesOutput) ToOpenpipelineV2DavisEventsPipelinesOutput() OpenpipelineV2DavisEventsPipelinesOutput {
	return o
}

func (o OpenpipelineV2DavisEventsPipelinesOutput) ToOpenpipelineV2DavisEventsPipelinesOutputWithContext(ctx context.Context) OpenpipelineV2DavisEventsPipelinesOutput {
	return o
}

// Cost allocation stage
func (o OpenpipelineV2DavisEventsPipelinesOutput) CostAllocation() OpenpipelineV2DavisEventsPipelinesCostAllocationOutput {
	return o.ApplyT(func(v *OpenpipelineV2DavisEventsPipelines) OpenpipelineV2DavisEventsPipelinesCostAllocationOutput {
		return v.CostAllocation
	}).(OpenpipelineV2DavisEventsPipelinesCostAllocationOutput)
}

// Custom pipeline id
func (o OpenpipelineV2DavisEventsPipelinesOutput) CustomId() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenpipelineV2DavisEventsPipelines) pulumi.StringOutput { return v.CustomId }).(pulumi.StringOutput)
}

// Data extraction stage
func (o OpenpipelineV2DavisEventsPipelinesOutput) DataExtraction() OpenpipelineV2DavisEventsPipelinesDataExtractionOutput {
	return o.ApplyT(func(v *OpenpipelineV2DavisEventsPipelines) OpenpipelineV2DavisEventsPipelinesDataExtractionOutput {
		return v.DataExtraction
	}).(OpenpipelineV2DavisEventsPipelinesDataExtractionOutput)
}

// Davis event extraction stage
func (o OpenpipelineV2DavisEventsPipelinesOutput) Davis() OpenpipelineV2DavisEventsPipelinesDavisOutput {
	return o.ApplyT(func(v *OpenpipelineV2DavisEventsPipelines) OpenpipelineV2DavisEventsPipelinesDavisOutput {
		return v.Davis
	}).(OpenpipelineV2DavisEventsPipelinesDavisOutput)
}

// Display name
func (o OpenpipelineV2DavisEventsPipelinesOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenpipelineV2DavisEventsPipelines) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Metrics extraction stage
func (o OpenpipelineV2DavisEventsPipelinesOutput) MetricExtraction() OpenpipelineV2DavisEventsPipelinesMetricExtractionOutput {
	return o.ApplyT(func(v *OpenpipelineV2DavisEventsPipelines) OpenpipelineV2DavisEventsPipelinesMetricExtractionOutput {
		return v.MetricExtraction
	}).(OpenpipelineV2DavisEventsPipelinesMetricExtractionOutput)
}

// Processing stage
func (o OpenpipelineV2DavisEventsPipelinesOutput) Processing() OpenpipelineV2DavisEventsPipelinesProcessingOutput {
	return o.ApplyT(func(v *OpenpipelineV2DavisEventsPipelines) OpenpipelineV2DavisEventsPipelinesProcessingOutput {
		return v.Processing
	}).(OpenpipelineV2DavisEventsPipelinesProcessingOutput)
}

// Product allocation stage
func (o OpenpipelineV2DavisEventsPipelinesOutput) ProductAllocation() OpenpipelineV2DavisEventsPipelinesProductAllocationOutput {
	return o.ApplyT(func(v *OpenpipelineV2DavisEventsPipelines) OpenpipelineV2DavisEventsPipelinesProductAllocationOutput {
		return v.ProductAllocation
	}).(OpenpipelineV2DavisEventsPipelinesProductAllocationOutput)
}

// Security context stage
func (o OpenpipelineV2DavisEventsPipelinesOutput) SecurityContext() OpenpipelineV2DavisEventsPipelinesSecurityContextOutput {
	return o.ApplyT(func(v *OpenpipelineV2DavisEventsPipelines) OpenpipelineV2DavisEventsPipelinesSecurityContextOutput {
		return v.SecurityContext
	}).(OpenpipelineV2DavisEventsPipelinesSecurityContextOutput)
}

// Storage stage
func (o OpenpipelineV2DavisEventsPipelinesOutput) Storage() OpenpipelineV2DavisEventsPipelinesStorageOutput {
	return o.ApplyT(func(v *OpenpipelineV2DavisEventsPipelines) OpenpipelineV2DavisEventsPipelinesStorageOutput {
		return v.Storage
	}).(OpenpipelineV2DavisEventsPipelinesStorageOutput)
}

type OpenpipelineV2DavisEventsPipelinesArrayOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2DavisEventsPipelinesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2DavisEventsPipelines)(nil)).Elem()
}

func (o OpenpipelineV2DavisEventsPipelinesArrayOutput) ToOpenpipelineV2DavisEventsPipelinesArrayOutput() OpenpipelineV2DavisEventsPipelinesArrayOutput {
	return o
}

func (o OpenpipelineV2DavisEventsPipelinesArrayOutput) ToOpenpipelineV2DavisEventsPipelinesArrayOutputWithContext(ctx context.Context) OpenpipelineV2DavisEventsPipelinesArrayOutput {
	return o
}

func (o OpenpipelineV2DavisEventsPipelinesArrayOutput) Index(i pulumi.IntInput) OpenpipelineV2DavisEventsPipelinesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenpipelineV2DavisEventsPipelines {
		return vs[0].([]*OpenpipelineV2DavisEventsPipelines)[vs[1].(int)]
	}).(OpenpipelineV2DavisEventsPipelinesOutput)
}

type OpenpipelineV2DavisEventsPipelinesMapOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2DavisEventsPipelinesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2DavisEventsPipelines)(nil)).Elem()
}

func (o OpenpipelineV2DavisEventsPipelinesMapOutput) ToOpenpipelineV2DavisEventsPipelinesMapOutput() OpenpipelineV2DavisEventsPipelinesMapOutput {
	return o
}

func (o OpenpipelineV2DavisEventsPipelinesMapOutput) ToOpenpipelineV2DavisEventsPipelinesMapOutputWithContext(ctx context.Context) OpenpipelineV2DavisEventsPipelinesMapOutput {
	return o
}

func (o OpenpipelineV2DavisEventsPipelinesMapOutput) MapIndex(k pulumi.StringInput) OpenpipelineV2DavisEventsPipelinesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenpipelineV2DavisEventsPipelines {
		return vs[0].(map[string]*OpenpipelineV2DavisEventsPipelines)[vs[1].(string)]
	}).(OpenpipelineV2DavisEventsPipelinesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2DavisEventsPipelinesInput)(nil)).Elem(), &OpenpipelineV2DavisEventsPipelines{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2DavisEventsPipelinesArrayInput)(nil)).Elem(), OpenpipelineV2DavisEventsPipelinesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2DavisEventsPipelinesMapInput)(nil)).Elem(), OpenpipelineV2DavisEventsPipelinesMap{})
	pulumi.RegisterOutputType(OpenpipelineV2DavisEventsPipelinesOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2DavisEventsPipelinesArrayOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2DavisEventsPipelinesMapOutput{})
}
