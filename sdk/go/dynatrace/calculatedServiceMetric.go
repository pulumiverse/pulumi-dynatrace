// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type CalculatedServiceMetric struct {
	pulumi.CustomResourceState

	// The set of conditions for the metric usage. **All** the specified conditions must be fulfilled to use the metric
	Conditions CalculatedServiceMetricConditionArrayOutput `pulumi:"conditions"`
	// The displayed description of the metric
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Parameters of a definition of a calculated service metric
	DimensionDefinition CalculatedServiceMetricDimensionDefinitionPtrOutput `pulumi:"dimensionDefinition"`
	// The metric is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Restricts the metric usage to the specified service. This field is mutually exclusive with the `managementZones` field
	EntityId pulumi.StringPtrOutput `pulumi:"entityId"`
	// Metric should (true) or not (false) ignore muted requests.
	IgnoreMutedRequests pulumi.BoolPtrOutput `pulumi:"ignoreMutedRequests"`
	// Restricts the metric usage to specified management zones. This field is mutually exclusive with the `entityId` field
	ManagementZones pulumi.StringArrayOutput `pulumi:"managementZones"`
	// The definition of a calculated service metric
	MetricDefinition CalculatedServiceMetricMetricDefinitionPtrOutput `pulumi:"metricDefinition"`
	// The key of the calculated service metric
	MetricKey pulumi.StringOutput `pulumi:"metricKey"`
	// The displayed name of the metric
	Name pulumi.StringOutput `pulumi:"name"`
	// The unit of the metric. Possible values are `BIT`, `BIT_PER_HOUR`, `BIT_PER_MINUTE`, `BIT_PER_SECOND`, `BYTE`, `BYTE_PER_HOUR`, `BYTE_PER_MINUTE`, `BYTE_PER_SECOND`, `CORES`, `COUNT`, `DAY`, `DECIBEL_MILLI_WATT`, `GIBI_BYTE`, `GIGA`, `GIGA_BYTE`, `HOUR`, `KIBI_BYTE`, `KIBI_BYTE_PER_HOUR`, `KIBI_BYTE_PER_MINUTE`, `KIBI_BYTE_PER_SECOND`, `KILO`, `KILO_BYTE`, `KILO_BYTE_PER_HOUR`, `KILO_BYTE_PER_MINUTE`, `KILO_BYTE_PER_SECOND`, `MEBI_BYTE`, `MEBI_BYTE_PER_HOUR`, `MEBI_BYTE_PER_MINUTE`, `MEBI_BYTE_PER_SECOND`, `MEGA`, `MEGA_BYTE`, `MEGA_BYTE_PER_HOUR`, `MEGA_BYTE_PER_MINUTE`, `MEGA_BYTE_PER_SECOND`, `MICRO_SECOND`, `MILLI_CORES`, `MILLI_SECOND`, `MILLI_SECOND_PER_MINUTE`, `MINUTE`, `MONTH`, `MSU`, `NANO_SECOND`, `NANO_SECOND_PER_MINUTE`, `NOT_APPLICABLE`, `PERCENT`, `PER_HOUR`, `PER_MINUTE`, `PER_SECOND`, `PIXEL`, `PROMILLE`, `RATIO`, `SECOND`, `STATE`, `UNSPECIFIED`, `WEEK` and `YEAR`
	Unit pulumi.StringOutput `pulumi:"unit"`
	// The display name of the metric's unit. Only applicable when the **unit** parameter is set to `UNSPECIFIED`
	UnitDisplayName pulumi.StringPtrOutput `pulumi:"unitDisplayName"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns pulumi.StringPtrOutput `pulumi:"unknowns"`
}

// NewCalculatedServiceMetric registers a new resource with the given unique name, arguments, and options.
func NewCalculatedServiceMetric(ctx *pulumi.Context,
	name string, args *CalculatedServiceMetricArgs, opts ...pulumi.ResourceOption) (*CalculatedServiceMetric, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MetricKey == nil {
		return nil, errors.New("invalid value for required argument 'MetricKey'")
	}
	if args.Unit == nil {
		return nil, errors.New("invalid value for required argument 'Unit'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CalculatedServiceMetric
	err := ctx.RegisterResource("dynatrace:index/calculatedServiceMetric:CalculatedServiceMetric", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCalculatedServiceMetric gets an existing CalculatedServiceMetric resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCalculatedServiceMetric(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CalculatedServiceMetricState, opts ...pulumi.ResourceOption) (*CalculatedServiceMetric, error) {
	var resource CalculatedServiceMetric
	err := ctx.ReadResource("dynatrace:index/calculatedServiceMetric:CalculatedServiceMetric", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CalculatedServiceMetric resources.
type calculatedServiceMetricState struct {
	// The set of conditions for the metric usage. **All** the specified conditions must be fulfilled to use the metric
	Conditions []CalculatedServiceMetricCondition `pulumi:"conditions"`
	// The displayed description of the metric
	Description *string `pulumi:"description"`
	// Parameters of a definition of a calculated service metric
	DimensionDefinition *CalculatedServiceMetricDimensionDefinition `pulumi:"dimensionDefinition"`
	// The metric is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// Restricts the metric usage to the specified service. This field is mutually exclusive with the `managementZones` field
	EntityId *string `pulumi:"entityId"`
	// Metric should (true) or not (false) ignore muted requests.
	IgnoreMutedRequests *bool `pulumi:"ignoreMutedRequests"`
	// Restricts the metric usage to specified management zones. This field is mutually exclusive with the `entityId` field
	ManagementZones []string `pulumi:"managementZones"`
	// The definition of a calculated service metric
	MetricDefinition *CalculatedServiceMetricMetricDefinition `pulumi:"metricDefinition"`
	// The key of the calculated service metric
	MetricKey *string `pulumi:"metricKey"`
	// The displayed name of the metric
	Name *string `pulumi:"name"`
	// The unit of the metric. Possible values are `BIT`, `BIT_PER_HOUR`, `BIT_PER_MINUTE`, `BIT_PER_SECOND`, `BYTE`, `BYTE_PER_HOUR`, `BYTE_PER_MINUTE`, `BYTE_PER_SECOND`, `CORES`, `COUNT`, `DAY`, `DECIBEL_MILLI_WATT`, `GIBI_BYTE`, `GIGA`, `GIGA_BYTE`, `HOUR`, `KIBI_BYTE`, `KIBI_BYTE_PER_HOUR`, `KIBI_BYTE_PER_MINUTE`, `KIBI_BYTE_PER_SECOND`, `KILO`, `KILO_BYTE`, `KILO_BYTE_PER_HOUR`, `KILO_BYTE_PER_MINUTE`, `KILO_BYTE_PER_SECOND`, `MEBI_BYTE`, `MEBI_BYTE_PER_HOUR`, `MEBI_BYTE_PER_MINUTE`, `MEBI_BYTE_PER_SECOND`, `MEGA`, `MEGA_BYTE`, `MEGA_BYTE_PER_HOUR`, `MEGA_BYTE_PER_MINUTE`, `MEGA_BYTE_PER_SECOND`, `MICRO_SECOND`, `MILLI_CORES`, `MILLI_SECOND`, `MILLI_SECOND_PER_MINUTE`, `MINUTE`, `MONTH`, `MSU`, `NANO_SECOND`, `NANO_SECOND_PER_MINUTE`, `NOT_APPLICABLE`, `PERCENT`, `PER_HOUR`, `PER_MINUTE`, `PER_SECOND`, `PIXEL`, `PROMILLE`, `RATIO`, `SECOND`, `STATE`, `UNSPECIFIED`, `WEEK` and `YEAR`
	Unit *string `pulumi:"unit"`
	// The display name of the metric's unit. Only applicable when the **unit** parameter is set to `UNSPECIFIED`
	UnitDisplayName *string `pulumi:"unitDisplayName"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `pulumi:"unknowns"`
}

type CalculatedServiceMetricState struct {
	// The set of conditions for the metric usage. **All** the specified conditions must be fulfilled to use the metric
	Conditions CalculatedServiceMetricConditionArrayInput
	// The displayed description of the metric
	Description pulumi.StringPtrInput
	// Parameters of a definition of a calculated service metric
	DimensionDefinition CalculatedServiceMetricDimensionDefinitionPtrInput
	// The metric is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// Restricts the metric usage to the specified service. This field is mutually exclusive with the `managementZones` field
	EntityId pulumi.StringPtrInput
	// Metric should (true) or not (false) ignore muted requests.
	IgnoreMutedRequests pulumi.BoolPtrInput
	// Restricts the metric usage to specified management zones. This field is mutually exclusive with the `entityId` field
	ManagementZones pulumi.StringArrayInput
	// The definition of a calculated service metric
	MetricDefinition CalculatedServiceMetricMetricDefinitionPtrInput
	// The key of the calculated service metric
	MetricKey pulumi.StringPtrInput
	// The displayed name of the metric
	Name pulumi.StringPtrInput
	// The unit of the metric. Possible values are `BIT`, `BIT_PER_HOUR`, `BIT_PER_MINUTE`, `BIT_PER_SECOND`, `BYTE`, `BYTE_PER_HOUR`, `BYTE_PER_MINUTE`, `BYTE_PER_SECOND`, `CORES`, `COUNT`, `DAY`, `DECIBEL_MILLI_WATT`, `GIBI_BYTE`, `GIGA`, `GIGA_BYTE`, `HOUR`, `KIBI_BYTE`, `KIBI_BYTE_PER_HOUR`, `KIBI_BYTE_PER_MINUTE`, `KIBI_BYTE_PER_SECOND`, `KILO`, `KILO_BYTE`, `KILO_BYTE_PER_HOUR`, `KILO_BYTE_PER_MINUTE`, `KILO_BYTE_PER_SECOND`, `MEBI_BYTE`, `MEBI_BYTE_PER_HOUR`, `MEBI_BYTE_PER_MINUTE`, `MEBI_BYTE_PER_SECOND`, `MEGA`, `MEGA_BYTE`, `MEGA_BYTE_PER_HOUR`, `MEGA_BYTE_PER_MINUTE`, `MEGA_BYTE_PER_SECOND`, `MICRO_SECOND`, `MILLI_CORES`, `MILLI_SECOND`, `MILLI_SECOND_PER_MINUTE`, `MINUTE`, `MONTH`, `MSU`, `NANO_SECOND`, `NANO_SECOND_PER_MINUTE`, `NOT_APPLICABLE`, `PERCENT`, `PER_HOUR`, `PER_MINUTE`, `PER_SECOND`, `PIXEL`, `PROMILLE`, `RATIO`, `SECOND`, `STATE`, `UNSPECIFIED`, `WEEK` and `YEAR`
	Unit pulumi.StringPtrInput
	// The display name of the metric's unit. Only applicable when the **unit** parameter is set to `UNSPECIFIED`
	UnitDisplayName pulumi.StringPtrInput
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns pulumi.StringPtrInput
}

func (CalculatedServiceMetricState) ElementType() reflect.Type {
	return reflect.TypeOf((*calculatedServiceMetricState)(nil)).Elem()
}

type calculatedServiceMetricArgs struct {
	// The set of conditions for the metric usage. **All** the specified conditions must be fulfilled to use the metric
	Conditions []CalculatedServiceMetricCondition `pulumi:"conditions"`
	// The displayed description of the metric
	Description *string `pulumi:"description"`
	// Parameters of a definition of a calculated service metric
	DimensionDefinition *CalculatedServiceMetricDimensionDefinition `pulumi:"dimensionDefinition"`
	// The metric is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// Restricts the metric usage to the specified service. This field is mutually exclusive with the `managementZones` field
	EntityId *string `pulumi:"entityId"`
	// Metric should (true) or not (false) ignore muted requests.
	IgnoreMutedRequests *bool `pulumi:"ignoreMutedRequests"`
	// Restricts the metric usage to specified management zones. This field is mutually exclusive with the `entityId` field
	ManagementZones []string `pulumi:"managementZones"`
	// The definition of a calculated service metric
	MetricDefinition *CalculatedServiceMetricMetricDefinition `pulumi:"metricDefinition"`
	// The key of the calculated service metric
	MetricKey string `pulumi:"metricKey"`
	// The displayed name of the metric
	Name *string `pulumi:"name"`
	// The unit of the metric. Possible values are `BIT`, `BIT_PER_HOUR`, `BIT_PER_MINUTE`, `BIT_PER_SECOND`, `BYTE`, `BYTE_PER_HOUR`, `BYTE_PER_MINUTE`, `BYTE_PER_SECOND`, `CORES`, `COUNT`, `DAY`, `DECIBEL_MILLI_WATT`, `GIBI_BYTE`, `GIGA`, `GIGA_BYTE`, `HOUR`, `KIBI_BYTE`, `KIBI_BYTE_PER_HOUR`, `KIBI_BYTE_PER_MINUTE`, `KIBI_BYTE_PER_SECOND`, `KILO`, `KILO_BYTE`, `KILO_BYTE_PER_HOUR`, `KILO_BYTE_PER_MINUTE`, `KILO_BYTE_PER_SECOND`, `MEBI_BYTE`, `MEBI_BYTE_PER_HOUR`, `MEBI_BYTE_PER_MINUTE`, `MEBI_BYTE_PER_SECOND`, `MEGA`, `MEGA_BYTE`, `MEGA_BYTE_PER_HOUR`, `MEGA_BYTE_PER_MINUTE`, `MEGA_BYTE_PER_SECOND`, `MICRO_SECOND`, `MILLI_CORES`, `MILLI_SECOND`, `MILLI_SECOND_PER_MINUTE`, `MINUTE`, `MONTH`, `MSU`, `NANO_SECOND`, `NANO_SECOND_PER_MINUTE`, `NOT_APPLICABLE`, `PERCENT`, `PER_HOUR`, `PER_MINUTE`, `PER_SECOND`, `PIXEL`, `PROMILLE`, `RATIO`, `SECOND`, `STATE`, `UNSPECIFIED`, `WEEK` and `YEAR`
	Unit string `pulumi:"unit"`
	// The display name of the metric's unit. Only applicable when the **unit** parameter is set to `UNSPECIFIED`
	UnitDisplayName *string `pulumi:"unitDisplayName"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `pulumi:"unknowns"`
}

// The set of arguments for constructing a CalculatedServiceMetric resource.
type CalculatedServiceMetricArgs struct {
	// The set of conditions for the metric usage. **All** the specified conditions must be fulfilled to use the metric
	Conditions CalculatedServiceMetricConditionArrayInput
	// The displayed description of the metric
	Description pulumi.StringPtrInput
	// Parameters of a definition of a calculated service metric
	DimensionDefinition CalculatedServiceMetricDimensionDefinitionPtrInput
	// The metric is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// Restricts the metric usage to the specified service. This field is mutually exclusive with the `managementZones` field
	EntityId pulumi.StringPtrInput
	// Metric should (true) or not (false) ignore muted requests.
	IgnoreMutedRequests pulumi.BoolPtrInput
	// Restricts the metric usage to specified management zones. This field is mutually exclusive with the `entityId` field
	ManagementZones pulumi.StringArrayInput
	// The definition of a calculated service metric
	MetricDefinition CalculatedServiceMetricMetricDefinitionPtrInput
	// The key of the calculated service metric
	MetricKey pulumi.StringInput
	// The displayed name of the metric
	Name pulumi.StringPtrInput
	// The unit of the metric. Possible values are `BIT`, `BIT_PER_HOUR`, `BIT_PER_MINUTE`, `BIT_PER_SECOND`, `BYTE`, `BYTE_PER_HOUR`, `BYTE_PER_MINUTE`, `BYTE_PER_SECOND`, `CORES`, `COUNT`, `DAY`, `DECIBEL_MILLI_WATT`, `GIBI_BYTE`, `GIGA`, `GIGA_BYTE`, `HOUR`, `KIBI_BYTE`, `KIBI_BYTE_PER_HOUR`, `KIBI_BYTE_PER_MINUTE`, `KIBI_BYTE_PER_SECOND`, `KILO`, `KILO_BYTE`, `KILO_BYTE_PER_HOUR`, `KILO_BYTE_PER_MINUTE`, `KILO_BYTE_PER_SECOND`, `MEBI_BYTE`, `MEBI_BYTE_PER_HOUR`, `MEBI_BYTE_PER_MINUTE`, `MEBI_BYTE_PER_SECOND`, `MEGA`, `MEGA_BYTE`, `MEGA_BYTE_PER_HOUR`, `MEGA_BYTE_PER_MINUTE`, `MEGA_BYTE_PER_SECOND`, `MICRO_SECOND`, `MILLI_CORES`, `MILLI_SECOND`, `MILLI_SECOND_PER_MINUTE`, `MINUTE`, `MONTH`, `MSU`, `NANO_SECOND`, `NANO_SECOND_PER_MINUTE`, `NOT_APPLICABLE`, `PERCENT`, `PER_HOUR`, `PER_MINUTE`, `PER_SECOND`, `PIXEL`, `PROMILLE`, `RATIO`, `SECOND`, `STATE`, `UNSPECIFIED`, `WEEK` and `YEAR`
	Unit pulumi.StringInput
	// The display name of the metric's unit. Only applicable when the **unit** parameter is set to `UNSPECIFIED`
	UnitDisplayName pulumi.StringPtrInput
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns pulumi.StringPtrInput
}

func (CalculatedServiceMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*calculatedServiceMetricArgs)(nil)).Elem()
}

type CalculatedServiceMetricInput interface {
	pulumi.Input

	ToCalculatedServiceMetricOutput() CalculatedServiceMetricOutput
	ToCalculatedServiceMetricOutputWithContext(ctx context.Context) CalculatedServiceMetricOutput
}

func (*CalculatedServiceMetric) ElementType() reflect.Type {
	return reflect.TypeOf((**CalculatedServiceMetric)(nil)).Elem()
}

func (i *CalculatedServiceMetric) ToCalculatedServiceMetricOutput() CalculatedServiceMetricOutput {
	return i.ToCalculatedServiceMetricOutputWithContext(context.Background())
}

func (i *CalculatedServiceMetric) ToCalculatedServiceMetricOutputWithContext(ctx context.Context) CalculatedServiceMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CalculatedServiceMetricOutput)
}

// CalculatedServiceMetricArrayInput is an input type that accepts CalculatedServiceMetricArray and CalculatedServiceMetricArrayOutput values.
// You can construct a concrete instance of `CalculatedServiceMetricArrayInput` via:
//
//	CalculatedServiceMetricArray{ CalculatedServiceMetricArgs{...} }
type CalculatedServiceMetricArrayInput interface {
	pulumi.Input

	ToCalculatedServiceMetricArrayOutput() CalculatedServiceMetricArrayOutput
	ToCalculatedServiceMetricArrayOutputWithContext(context.Context) CalculatedServiceMetricArrayOutput
}

type CalculatedServiceMetricArray []CalculatedServiceMetricInput

func (CalculatedServiceMetricArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CalculatedServiceMetric)(nil)).Elem()
}

func (i CalculatedServiceMetricArray) ToCalculatedServiceMetricArrayOutput() CalculatedServiceMetricArrayOutput {
	return i.ToCalculatedServiceMetricArrayOutputWithContext(context.Background())
}

func (i CalculatedServiceMetricArray) ToCalculatedServiceMetricArrayOutputWithContext(ctx context.Context) CalculatedServiceMetricArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CalculatedServiceMetricArrayOutput)
}

// CalculatedServiceMetricMapInput is an input type that accepts CalculatedServiceMetricMap and CalculatedServiceMetricMapOutput values.
// You can construct a concrete instance of `CalculatedServiceMetricMapInput` via:
//
//	CalculatedServiceMetricMap{ "key": CalculatedServiceMetricArgs{...} }
type CalculatedServiceMetricMapInput interface {
	pulumi.Input

	ToCalculatedServiceMetricMapOutput() CalculatedServiceMetricMapOutput
	ToCalculatedServiceMetricMapOutputWithContext(context.Context) CalculatedServiceMetricMapOutput
}

type CalculatedServiceMetricMap map[string]CalculatedServiceMetricInput

func (CalculatedServiceMetricMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CalculatedServiceMetric)(nil)).Elem()
}

func (i CalculatedServiceMetricMap) ToCalculatedServiceMetricMapOutput() CalculatedServiceMetricMapOutput {
	return i.ToCalculatedServiceMetricMapOutputWithContext(context.Background())
}

func (i CalculatedServiceMetricMap) ToCalculatedServiceMetricMapOutputWithContext(ctx context.Context) CalculatedServiceMetricMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CalculatedServiceMetricMapOutput)
}

type CalculatedServiceMetricOutput struct{ *pulumi.OutputState }

func (CalculatedServiceMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CalculatedServiceMetric)(nil)).Elem()
}

func (o CalculatedServiceMetricOutput) ToCalculatedServiceMetricOutput() CalculatedServiceMetricOutput {
	return o
}

func (o CalculatedServiceMetricOutput) ToCalculatedServiceMetricOutputWithContext(ctx context.Context) CalculatedServiceMetricOutput {
	return o
}

// The set of conditions for the metric usage. **All** the specified conditions must be fulfilled to use the metric
func (o CalculatedServiceMetricOutput) Conditions() CalculatedServiceMetricConditionArrayOutput {
	return o.ApplyT(func(v *CalculatedServiceMetric) CalculatedServiceMetricConditionArrayOutput { return v.Conditions }).(CalculatedServiceMetricConditionArrayOutput)
}

// The displayed description of the metric
func (o CalculatedServiceMetricOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CalculatedServiceMetric) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Parameters of a definition of a calculated service metric
func (o CalculatedServiceMetricOutput) DimensionDefinition() CalculatedServiceMetricDimensionDefinitionPtrOutput {
	return o.ApplyT(func(v *CalculatedServiceMetric) CalculatedServiceMetricDimensionDefinitionPtrOutput {
		return v.DimensionDefinition
	}).(CalculatedServiceMetricDimensionDefinitionPtrOutput)
}

// The metric is enabled (`true`) or disabled (`false`)
func (o CalculatedServiceMetricOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CalculatedServiceMetric) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Restricts the metric usage to the specified service. This field is mutually exclusive with the `managementZones` field
func (o CalculatedServiceMetricOutput) EntityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CalculatedServiceMetric) pulumi.StringPtrOutput { return v.EntityId }).(pulumi.StringPtrOutput)
}

// Metric should (true) or not (false) ignore muted requests.
func (o CalculatedServiceMetricOutput) IgnoreMutedRequests() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CalculatedServiceMetric) pulumi.BoolPtrOutput { return v.IgnoreMutedRequests }).(pulumi.BoolPtrOutput)
}

// Restricts the metric usage to specified management zones. This field is mutually exclusive with the `entityId` field
func (o CalculatedServiceMetricOutput) ManagementZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CalculatedServiceMetric) pulumi.StringArrayOutput { return v.ManagementZones }).(pulumi.StringArrayOutput)
}

// The definition of a calculated service metric
func (o CalculatedServiceMetricOutput) MetricDefinition() CalculatedServiceMetricMetricDefinitionPtrOutput {
	return o.ApplyT(func(v *CalculatedServiceMetric) CalculatedServiceMetricMetricDefinitionPtrOutput {
		return v.MetricDefinition
	}).(CalculatedServiceMetricMetricDefinitionPtrOutput)
}

// The key of the calculated service metric
func (o CalculatedServiceMetricOutput) MetricKey() pulumi.StringOutput {
	return o.ApplyT(func(v *CalculatedServiceMetric) pulumi.StringOutput { return v.MetricKey }).(pulumi.StringOutput)
}

// The displayed name of the metric
func (o CalculatedServiceMetricOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CalculatedServiceMetric) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The unit of the metric. Possible values are `BIT`, `BIT_PER_HOUR`, `BIT_PER_MINUTE`, `BIT_PER_SECOND`, `BYTE`, `BYTE_PER_HOUR`, `BYTE_PER_MINUTE`, `BYTE_PER_SECOND`, `CORES`, `COUNT`, `DAY`, `DECIBEL_MILLI_WATT`, `GIBI_BYTE`, `GIGA`, `GIGA_BYTE`, `HOUR`, `KIBI_BYTE`, `KIBI_BYTE_PER_HOUR`, `KIBI_BYTE_PER_MINUTE`, `KIBI_BYTE_PER_SECOND`, `KILO`, `KILO_BYTE`, `KILO_BYTE_PER_HOUR`, `KILO_BYTE_PER_MINUTE`, `KILO_BYTE_PER_SECOND`, `MEBI_BYTE`, `MEBI_BYTE_PER_HOUR`, `MEBI_BYTE_PER_MINUTE`, `MEBI_BYTE_PER_SECOND`, `MEGA`, `MEGA_BYTE`, `MEGA_BYTE_PER_HOUR`, `MEGA_BYTE_PER_MINUTE`, `MEGA_BYTE_PER_SECOND`, `MICRO_SECOND`, `MILLI_CORES`, `MILLI_SECOND`, `MILLI_SECOND_PER_MINUTE`, `MINUTE`, `MONTH`, `MSU`, `NANO_SECOND`, `NANO_SECOND_PER_MINUTE`, `NOT_APPLICABLE`, `PERCENT`, `PER_HOUR`, `PER_MINUTE`, `PER_SECOND`, `PIXEL`, `PROMILLE`, `RATIO`, `SECOND`, `STATE`, `UNSPECIFIED`, `WEEK` and `YEAR`
func (o CalculatedServiceMetricOutput) Unit() pulumi.StringOutput {
	return o.ApplyT(func(v *CalculatedServiceMetric) pulumi.StringOutput { return v.Unit }).(pulumi.StringOutput)
}

// The display name of the metric's unit. Only applicable when the **unit** parameter is set to `UNSPECIFIED`
func (o CalculatedServiceMetricOutput) UnitDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CalculatedServiceMetric) pulumi.StringPtrOutput { return v.UnitDisplayName }).(pulumi.StringPtrOutput)
}

// allows for configuring properties that are not explicitly supported by the current version of this provider
func (o CalculatedServiceMetricOutput) Unknowns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CalculatedServiceMetric) pulumi.StringPtrOutput { return v.Unknowns }).(pulumi.StringPtrOutput)
}

type CalculatedServiceMetricArrayOutput struct{ *pulumi.OutputState }

func (CalculatedServiceMetricArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CalculatedServiceMetric)(nil)).Elem()
}

func (o CalculatedServiceMetricArrayOutput) ToCalculatedServiceMetricArrayOutput() CalculatedServiceMetricArrayOutput {
	return o
}

func (o CalculatedServiceMetricArrayOutput) ToCalculatedServiceMetricArrayOutputWithContext(ctx context.Context) CalculatedServiceMetricArrayOutput {
	return o
}

func (o CalculatedServiceMetricArrayOutput) Index(i pulumi.IntInput) CalculatedServiceMetricOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CalculatedServiceMetric {
		return vs[0].([]*CalculatedServiceMetric)[vs[1].(int)]
	}).(CalculatedServiceMetricOutput)
}

type CalculatedServiceMetricMapOutput struct{ *pulumi.OutputState }

func (CalculatedServiceMetricMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CalculatedServiceMetric)(nil)).Elem()
}

func (o CalculatedServiceMetricMapOutput) ToCalculatedServiceMetricMapOutput() CalculatedServiceMetricMapOutput {
	return o
}

func (o CalculatedServiceMetricMapOutput) ToCalculatedServiceMetricMapOutputWithContext(ctx context.Context) CalculatedServiceMetricMapOutput {
	return o
}

func (o CalculatedServiceMetricMapOutput) MapIndex(k pulumi.StringInput) CalculatedServiceMetricOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CalculatedServiceMetric {
		return vs[0].(map[string]*CalculatedServiceMetric)[vs[1].(string)]
	}).(CalculatedServiceMetricOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CalculatedServiceMetricInput)(nil)).Elem(), &CalculatedServiceMetric{})
	pulumi.RegisterInputType(reflect.TypeOf((*CalculatedServiceMetricArrayInput)(nil)).Elem(), CalculatedServiceMetricArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CalculatedServiceMetricMapInput)(nil)).Elem(), CalculatedServiceMetricMap{})
	pulumi.RegisterOutputType(CalculatedServiceMetricOutput{})
	pulumi.RegisterOutputType(CalculatedServiceMetricArrayOutput{})
	pulumi.RegisterOutputType(CalculatedServiceMetricMapOutput{})
}
