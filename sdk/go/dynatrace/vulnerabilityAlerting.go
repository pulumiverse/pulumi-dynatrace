// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type VulnerabilityAlerting struct {
	pulumi.CustomResourceState

	// Alerting profile is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// List of risk levels to alert
	EnabledRiskLevels pulumi.StringArrayOutput `pulumi:"enabledRiskLevels"`
	// List of events to alert
	EnabledTriggerEvents pulumi.StringArrayOutput `pulumi:"enabledTriggerEvents"`
	// Alert only if the following management zone is affected (optional)
	ManagementZone pulumi.StringPtrOutput `pulumi:"managementZone"`
	// Alerting profile name
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewVulnerabilityAlerting registers a new resource with the given unique name, arguments, and options.
func NewVulnerabilityAlerting(ctx *pulumi.Context,
	name string, args *VulnerabilityAlertingArgs, opts ...pulumi.ResourceOption) (*VulnerabilityAlerting, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VulnerabilityAlerting
	err := ctx.RegisterResource("dynatrace:index/vulnerabilityAlerting:VulnerabilityAlerting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVulnerabilityAlerting gets an existing VulnerabilityAlerting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVulnerabilityAlerting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VulnerabilityAlertingState, opts ...pulumi.ResourceOption) (*VulnerabilityAlerting, error) {
	var resource VulnerabilityAlerting
	err := ctx.ReadResource("dynatrace:index/vulnerabilityAlerting:VulnerabilityAlerting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VulnerabilityAlerting resources.
type vulnerabilityAlertingState struct {
	// Alerting profile is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// List of risk levels to alert
	EnabledRiskLevels []string `pulumi:"enabledRiskLevels"`
	// List of events to alert
	EnabledTriggerEvents []string `pulumi:"enabledTriggerEvents"`
	// Alert only if the following management zone is affected (optional)
	ManagementZone *string `pulumi:"managementZone"`
	// Alerting profile name
	Name *string `pulumi:"name"`
}

type VulnerabilityAlertingState struct {
	// Alerting profile is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// List of risk levels to alert
	EnabledRiskLevels pulumi.StringArrayInput
	// List of events to alert
	EnabledTriggerEvents pulumi.StringArrayInput
	// Alert only if the following management zone is affected (optional)
	ManagementZone pulumi.StringPtrInput
	// Alerting profile name
	Name pulumi.StringPtrInput
}

func (VulnerabilityAlertingState) ElementType() reflect.Type {
	return reflect.TypeOf((*vulnerabilityAlertingState)(nil)).Elem()
}

type vulnerabilityAlertingArgs struct {
	// Alerting profile is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// List of risk levels to alert
	EnabledRiskLevels []string `pulumi:"enabledRiskLevels"`
	// List of events to alert
	EnabledTriggerEvents []string `pulumi:"enabledTriggerEvents"`
	// Alert only if the following management zone is affected (optional)
	ManagementZone *string `pulumi:"managementZone"`
	// Alerting profile name
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a VulnerabilityAlerting resource.
type VulnerabilityAlertingArgs struct {
	// Alerting profile is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// List of risk levels to alert
	EnabledRiskLevels pulumi.StringArrayInput
	// List of events to alert
	EnabledTriggerEvents pulumi.StringArrayInput
	// Alert only if the following management zone is affected (optional)
	ManagementZone pulumi.StringPtrInput
	// Alerting profile name
	Name pulumi.StringPtrInput
}

func (VulnerabilityAlertingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vulnerabilityAlertingArgs)(nil)).Elem()
}

type VulnerabilityAlertingInput interface {
	pulumi.Input

	ToVulnerabilityAlertingOutput() VulnerabilityAlertingOutput
	ToVulnerabilityAlertingOutputWithContext(ctx context.Context) VulnerabilityAlertingOutput
}

func (*VulnerabilityAlerting) ElementType() reflect.Type {
	return reflect.TypeOf((**VulnerabilityAlerting)(nil)).Elem()
}

func (i *VulnerabilityAlerting) ToVulnerabilityAlertingOutput() VulnerabilityAlertingOutput {
	return i.ToVulnerabilityAlertingOutputWithContext(context.Background())
}

func (i *VulnerabilityAlerting) ToVulnerabilityAlertingOutputWithContext(ctx context.Context) VulnerabilityAlertingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityAlertingOutput)
}

// VulnerabilityAlertingArrayInput is an input type that accepts VulnerabilityAlertingArray and VulnerabilityAlertingArrayOutput values.
// You can construct a concrete instance of `VulnerabilityAlertingArrayInput` via:
//
//	VulnerabilityAlertingArray{ VulnerabilityAlertingArgs{...} }
type VulnerabilityAlertingArrayInput interface {
	pulumi.Input

	ToVulnerabilityAlertingArrayOutput() VulnerabilityAlertingArrayOutput
	ToVulnerabilityAlertingArrayOutputWithContext(context.Context) VulnerabilityAlertingArrayOutput
}

type VulnerabilityAlertingArray []VulnerabilityAlertingInput

func (VulnerabilityAlertingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VulnerabilityAlerting)(nil)).Elem()
}

func (i VulnerabilityAlertingArray) ToVulnerabilityAlertingArrayOutput() VulnerabilityAlertingArrayOutput {
	return i.ToVulnerabilityAlertingArrayOutputWithContext(context.Background())
}

func (i VulnerabilityAlertingArray) ToVulnerabilityAlertingArrayOutputWithContext(ctx context.Context) VulnerabilityAlertingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityAlertingArrayOutput)
}

// VulnerabilityAlertingMapInput is an input type that accepts VulnerabilityAlertingMap and VulnerabilityAlertingMapOutput values.
// You can construct a concrete instance of `VulnerabilityAlertingMapInput` via:
//
//	VulnerabilityAlertingMap{ "key": VulnerabilityAlertingArgs{...} }
type VulnerabilityAlertingMapInput interface {
	pulumi.Input

	ToVulnerabilityAlertingMapOutput() VulnerabilityAlertingMapOutput
	ToVulnerabilityAlertingMapOutputWithContext(context.Context) VulnerabilityAlertingMapOutput
}

type VulnerabilityAlertingMap map[string]VulnerabilityAlertingInput

func (VulnerabilityAlertingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VulnerabilityAlerting)(nil)).Elem()
}

func (i VulnerabilityAlertingMap) ToVulnerabilityAlertingMapOutput() VulnerabilityAlertingMapOutput {
	return i.ToVulnerabilityAlertingMapOutputWithContext(context.Background())
}

func (i VulnerabilityAlertingMap) ToVulnerabilityAlertingMapOutputWithContext(ctx context.Context) VulnerabilityAlertingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityAlertingMapOutput)
}

type VulnerabilityAlertingOutput struct{ *pulumi.OutputState }

func (VulnerabilityAlertingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VulnerabilityAlerting)(nil)).Elem()
}

func (o VulnerabilityAlertingOutput) ToVulnerabilityAlertingOutput() VulnerabilityAlertingOutput {
	return o
}

func (o VulnerabilityAlertingOutput) ToVulnerabilityAlertingOutputWithContext(ctx context.Context) VulnerabilityAlertingOutput {
	return o
}

// Alerting profile is enabled (`true`) or disabled (`false`)
func (o VulnerabilityAlertingOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *VulnerabilityAlerting) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// List of risk levels to alert
func (o VulnerabilityAlertingOutput) EnabledRiskLevels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VulnerabilityAlerting) pulumi.StringArrayOutput { return v.EnabledRiskLevels }).(pulumi.StringArrayOutput)
}

// List of events to alert
func (o VulnerabilityAlertingOutput) EnabledTriggerEvents() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VulnerabilityAlerting) pulumi.StringArrayOutput { return v.EnabledTriggerEvents }).(pulumi.StringArrayOutput)
}

// Alert only if the following management zone is affected (optional)
func (o VulnerabilityAlertingOutput) ManagementZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VulnerabilityAlerting) pulumi.StringPtrOutput { return v.ManagementZone }).(pulumi.StringPtrOutput)
}

// Alerting profile name
func (o VulnerabilityAlertingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VulnerabilityAlerting) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type VulnerabilityAlertingArrayOutput struct{ *pulumi.OutputState }

func (VulnerabilityAlertingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VulnerabilityAlerting)(nil)).Elem()
}

func (o VulnerabilityAlertingArrayOutput) ToVulnerabilityAlertingArrayOutput() VulnerabilityAlertingArrayOutput {
	return o
}

func (o VulnerabilityAlertingArrayOutput) ToVulnerabilityAlertingArrayOutputWithContext(ctx context.Context) VulnerabilityAlertingArrayOutput {
	return o
}

func (o VulnerabilityAlertingArrayOutput) Index(i pulumi.IntInput) VulnerabilityAlertingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VulnerabilityAlerting {
		return vs[0].([]*VulnerabilityAlerting)[vs[1].(int)]
	}).(VulnerabilityAlertingOutput)
}

type VulnerabilityAlertingMapOutput struct{ *pulumi.OutputState }

func (VulnerabilityAlertingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VulnerabilityAlerting)(nil)).Elem()
}

func (o VulnerabilityAlertingMapOutput) ToVulnerabilityAlertingMapOutput() VulnerabilityAlertingMapOutput {
	return o
}

func (o VulnerabilityAlertingMapOutput) ToVulnerabilityAlertingMapOutputWithContext(ctx context.Context) VulnerabilityAlertingMapOutput {
	return o
}

func (o VulnerabilityAlertingMapOutput) MapIndex(k pulumi.StringInput) VulnerabilityAlertingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VulnerabilityAlerting {
		return vs[0].(map[string]*VulnerabilityAlerting)[vs[1].(string)]
	}).(VulnerabilityAlertingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VulnerabilityAlertingInput)(nil)).Elem(), &VulnerabilityAlerting{})
	pulumi.RegisterInputType(reflect.TypeOf((*VulnerabilityAlertingArrayInput)(nil)).Elem(), VulnerabilityAlertingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VulnerabilityAlertingMapInput)(nil)).Elem(), VulnerabilityAlertingMap{})
	pulumi.RegisterOutputType(VulnerabilityAlertingOutput{})
	pulumi.RegisterOutputType(VulnerabilityAlertingArrayOutput{})
	pulumi.RegisterOutputType(VulnerabilityAlertingMapOutput{})
}
