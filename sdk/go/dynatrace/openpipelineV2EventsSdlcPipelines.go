// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OpenpipelineV2EventsSdlcPipelines struct {
	pulumi.CustomResourceState

	// Cost allocation stage
	CostAllocation OpenpipelineV2EventsSdlcPipelinesCostAllocationOutput `pulumi:"costAllocation"`
	// Custom pipeline id
	CustomId pulumi.StringOutput `pulumi:"customId"`
	// Data extraction stage
	DataExtraction OpenpipelineV2EventsSdlcPipelinesDataExtractionOutput `pulumi:"dataExtraction"`
	// Davis event extraction stage
	Davis OpenpipelineV2EventsSdlcPipelinesDavisOutput `pulumi:"davis"`
	// Display name
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Metrics extraction stage
	MetricExtraction OpenpipelineV2EventsSdlcPipelinesMetricExtractionOutput `pulumi:"metricExtraction"`
	// Processing stage
	Processing OpenpipelineV2EventsSdlcPipelinesProcessingOutput `pulumi:"processing"`
	// Product allocation stage
	ProductAllocation OpenpipelineV2EventsSdlcPipelinesProductAllocationOutput `pulumi:"productAllocation"`
	// Security context stage
	SecurityContext OpenpipelineV2EventsSdlcPipelinesSecurityContextOutput `pulumi:"securityContext"`
	// Storage stage
	Storage OpenpipelineV2EventsSdlcPipelinesStorageOutput `pulumi:"storage"`
}

// NewOpenpipelineV2EventsSdlcPipelines registers a new resource with the given unique name, arguments, and options.
func NewOpenpipelineV2EventsSdlcPipelines(ctx *pulumi.Context,
	name string, args *OpenpipelineV2EventsSdlcPipelinesArgs, opts ...pulumi.ResourceOption) (*OpenpipelineV2EventsSdlcPipelines, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CostAllocation == nil {
		return nil, errors.New("invalid value for required argument 'CostAllocation'")
	}
	if args.CustomId == nil {
		return nil, errors.New("invalid value for required argument 'CustomId'")
	}
	if args.DataExtraction == nil {
		return nil, errors.New("invalid value for required argument 'DataExtraction'")
	}
	if args.Davis == nil {
		return nil, errors.New("invalid value for required argument 'Davis'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.MetricExtraction == nil {
		return nil, errors.New("invalid value for required argument 'MetricExtraction'")
	}
	if args.Processing == nil {
		return nil, errors.New("invalid value for required argument 'Processing'")
	}
	if args.ProductAllocation == nil {
		return nil, errors.New("invalid value for required argument 'ProductAllocation'")
	}
	if args.SecurityContext == nil {
		return nil, errors.New("invalid value for required argument 'SecurityContext'")
	}
	if args.Storage == nil {
		return nil, errors.New("invalid value for required argument 'Storage'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenpipelineV2EventsSdlcPipelines
	err := ctx.RegisterResource("dynatrace:index/openpipelineV2EventsSdlcPipelines:OpenpipelineV2EventsSdlcPipelines", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenpipelineV2EventsSdlcPipelines gets an existing OpenpipelineV2EventsSdlcPipelines resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenpipelineV2EventsSdlcPipelines(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenpipelineV2EventsSdlcPipelinesState, opts ...pulumi.ResourceOption) (*OpenpipelineV2EventsSdlcPipelines, error) {
	var resource OpenpipelineV2EventsSdlcPipelines
	err := ctx.ReadResource("dynatrace:index/openpipelineV2EventsSdlcPipelines:OpenpipelineV2EventsSdlcPipelines", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenpipelineV2EventsSdlcPipelines resources.
type openpipelineV2EventsSdlcPipelinesState struct {
	// Cost allocation stage
	CostAllocation *OpenpipelineV2EventsSdlcPipelinesCostAllocation `pulumi:"costAllocation"`
	// Custom pipeline id
	CustomId *string `pulumi:"customId"`
	// Data extraction stage
	DataExtraction *OpenpipelineV2EventsSdlcPipelinesDataExtraction `pulumi:"dataExtraction"`
	// Davis event extraction stage
	Davis *OpenpipelineV2EventsSdlcPipelinesDavis `pulumi:"davis"`
	// Display name
	DisplayName *string `pulumi:"displayName"`
	// Metrics extraction stage
	MetricExtraction *OpenpipelineV2EventsSdlcPipelinesMetricExtraction `pulumi:"metricExtraction"`
	// Processing stage
	Processing *OpenpipelineV2EventsSdlcPipelinesProcessing `pulumi:"processing"`
	// Product allocation stage
	ProductAllocation *OpenpipelineV2EventsSdlcPipelinesProductAllocation `pulumi:"productAllocation"`
	// Security context stage
	SecurityContext *OpenpipelineV2EventsSdlcPipelinesSecurityContext `pulumi:"securityContext"`
	// Storage stage
	Storage *OpenpipelineV2EventsSdlcPipelinesStorage `pulumi:"storage"`
}

type OpenpipelineV2EventsSdlcPipelinesState struct {
	// Cost allocation stage
	CostAllocation OpenpipelineV2EventsSdlcPipelinesCostAllocationPtrInput
	// Custom pipeline id
	CustomId pulumi.StringPtrInput
	// Data extraction stage
	DataExtraction OpenpipelineV2EventsSdlcPipelinesDataExtractionPtrInput
	// Davis event extraction stage
	Davis OpenpipelineV2EventsSdlcPipelinesDavisPtrInput
	// Display name
	DisplayName pulumi.StringPtrInput
	// Metrics extraction stage
	MetricExtraction OpenpipelineV2EventsSdlcPipelinesMetricExtractionPtrInput
	// Processing stage
	Processing OpenpipelineV2EventsSdlcPipelinesProcessingPtrInput
	// Product allocation stage
	ProductAllocation OpenpipelineV2EventsSdlcPipelinesProductAllocationPtrInput
	// Security context stage
	SecurityContext OpenpipelineV2EventsSdlcPipelinesSecurityContextPtrInput
	// Storage stage
	Storage OpenpipelineV2EventsSdlcPipelinesStoragePtrInput
}

func (OpenpipelineV2EventsSdlcPipelinesState) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2EventsSdlcPipelinesState)(nil)).Elem()
}

type openpipelineV2EventsSdlcPipelinesArgs struct {
	// Cost allocation stage
	CostAllocation OpenpipelineV2EventsSdlcPipelinesCostAllocation `pulumi:"costAllocation"`
	// Custom pipeline id
	CustomId string `pulumi:"customId"`
	// Data extraction stage
	DataExtraction OpenpipelineV2EventsSdlcPipelinesDataExtraction `pulumi:"dataExtraction"`
	// Davis event extraction stage
	Davis OpenpipelineV2EventsSdlcPipelinesDavis `pulumi:"davis"`
	// Display name
	DisplayName string `pulumi:"displayName"`
	// Metrics extraction stage
	MetricExtraction OpenpipelineV2EventsSdlcPipelinesMetricExtraction `pulumi:"metricExtraction"`
	// Processing stage
	Processing OpenpipelineV2EventsSdlcPipelinesProcessing `pulumi:"processing"`
	// Product allocation stage
	ProductAllocation OpenpipelineV2EventsSdlcPipelinesProductAllocation `pulumi:"productAllocation"`
	// Security context stage
	SecurityContext OpenpipelineV2EventsSdlcPipelinesSecurityContext `pulumi:"securityContext"`
	// Storage stage
	Storage OpenpipelineV2EventsSdlcPipelinesStorage `pulumi:"storage"`
}

// The set of arguments for constructing a OpenpipelineV2EventsSdlcPipelines resource.
type OpenpipelineV2EventsSdlcPipelinesArgs struct {
	// Cost allocation stage
	CostAllocation OpenpipelineV2EventsSdlcPipelinesCostAllocationInput
	// Custom pipeline id
	CustomId pulumi.StringInput
	// Data extraction stage
	DataExtraction OpenpipelineV2EventsSdlcPipelinesDataExtractionInput
	// Davis event extraction stage
	Davis OpenpipelineV2EventsSdlcPipelinesDavisInput
	// Display name
	DisplayName pulumi.StringInput
	// Metrics extraction stage
	MetricExtraction OpenpipelineV2EventsSdlcPipelinesMetricExtractionInput
	// Processing stage
	Processing OpenpipelineV2EventsSdlcPipelinesProcessingInput
	// Product allocation stage
	ProductAllocation OpenpipelineV2EventsSdlcPipelinesProductAllocationInput
	// Security context stage
	SecurityContext OpenpipelineV2EventsSdlcPipelinesSecurityContextInput
	// Storage stage
	Storage OpenpipelineV2EventsSdlcPipelinesStorageInput
}

func (OpenpipelineV2EventsSdlcPipelinesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2EventsSdlcPipelinesArgs)(nil)).Elem()
}

type OpenpipelineV2EventsSdlcPipelinesInput interface {
	pulumi.Input

	ToOpenpipelineV2EventsSdlcPipelinesOutput() OpenpipelineV2EventsSdlcPipelinesOutput
	ToOpenpipelineV2EventsSdlcPipelinesOutputWithContext(ctx context.Context) OpenpipelineV2EventsSdlcPipelinesOutput
}

func (*OpenpipelineV2EventsSdlcPipelines) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2EventsSdlcPipelines)(nil)).Elem()
}

func (i *OpenpipelineV2EventsSdlcPipelines) ToOpenpipelineV2EventsSdlcPipelinesOutput() OpenpipelineV2EventsSdlcPipelinesOutput {
	return i.ToOpenpipelineV2EventsSdlcPipelinesOutputWithContext(context.Background())
}

func (i *OpenpipelineV2EventsSdlcPipelines) ToOpenpipelineV2EventsSdlcPipelinesOutputWithContext(ctx context.Context) OpenpipelineV2EventsSdlcPipelinesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2EventsSdlcPipelinesOutput)
}

// OpenpipelineV2EventsSdlcPipelinesArrayInput is an input type that accepts OpenpipelineV2EventsSdlcPipelinesArray and OpenpipelineV2EventsSdlcPipelinesArrayOutput values.
// You can construct a concrete instance of `OpenpipelineV2EventsSdlcPipelinesArrayInput` via:
//
//	OpenpipelineV2EventsSdlcPipelinesArray{ OpenpipelineV2EventsSdlcPipelinesArgs{...} }
type OpenpipelineV2EventsSdlcPipelinesArrayInput interface {
	pulumi.Input

	ToOpenpipelineV2EventsSdlcPipelinesArrayOutput() OpenpipelineV2EventsSdlcPipelinesArrayOutput
	ToOpenpipelineV2EventsSdlcPipelinesArrayOutputWithContext(context.Context) OpenpipelineV2EventsSdlcPipelinesArrayOutput
}

type OpenpipelineV2EventsSdlcPipelinesArray []OpenpipelineV2EventsSdlcPipelinesInput

func (OpenpipelineV2EventsSdlcPipelinesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2EventsSdlcPipelines)(nil)).Elem()
}

func (i OpenpipelineV2EventsSdlcPipelinesArray) ToOpenpipelineV2EventsSdlcPipelinesArrayOutput() OpenpipelineV2EventsSdlcPipelinesArrayOutput {
	return i.ToOpenpipelineV2EventsSdlcPipelinesArrayOutputWithContext(context.Background())
}

func (i OpenpipelineV2EventsSdlcPipelinesArray) ToOpenpipelineV2EventsSdlcPipelinesArrayOutputWithContext(ctx context.Context) OpenpipelineV2EventsSdlcPipelinesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2EventsSdlcPipelinesArrayOutput)
}

// OpenpipelineV2EventsSdlcPipelinesMapInput is an input type that accepts OpenpipelineV2EventsSdlcPipelinesMap and OpenpipelineV2EventsSdlcPipelinesMapOutput values.
// You can construct a concrete instance of `OpenpipelineV2EventsSdlcPipelinesMapInput` via:
//
//	OpenpipelineV2EventsSdlcPipelinesMap{ "key": OpenpipelineV2EventsSdlcPipelinesArgs{...} }
type OpenpipelineV2EventsSdlcPipelinesMapInput interface {
	pulumi.Input

	ToOpenpipelineV2EventsSdlcPipelinesMapOutput() OpenpipelineV2EventsSdlcPipelinesMapOutput
	ToOpenpipelineV2EventsSdlcPipelinesMapOutputWithContext(context.Context) OpenpipelineV2EventsSdlcPipelinesMapOutput
}

type OpenpipelineV2EventsSdlcPipelinesMap map[string]OpenpipelineV2EventsSdlcPipelinesInput

func (OpenpipelineV2EventsSdlcPipelinesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2EventsSdlcPipelines)(nil)).Elem()
}

func (i OpenpipelineV2EventsSdlcPipelinesMap) ToOpenpipelineV2EventsSdlcPipelinesMapOutput() OpenpipelineV2EventsSdlcPipelinesMapOutput {
	return i.ToOpenpipelineV2EventsSdlcPipelinesMapOutputWithContext(context.Background())
}

func (i OpenpipelineV2EventsSdlcPipelinesMap) ToOpenpipelineV2EventsSdlcPipelinesMapOutputWithContext(ctx context.Context) OpenpipelineV2EventsSdlcPipelinesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2EventsSdlcPipelinesMapOutput)
}

type OpenpipelineV2EventsSdlcPipelinesOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2EventsSdlcPipelinesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2EventsSdlcPipelines)(nil)).Elem()
}

func (o OpenpipelineV2EventsSdlcPipelinesOutput) ToOpenpipelineV2EventsSdlcPipelinesOutput() OpenpipelineV2EventsSdlcPipelinesOutput {
	return o
}

func (o OpenpipelineV2EventsSdlcPipelinesOutput) ToOpenpipelineV2EventsSdlcPipelinesOutputWithContext(ctx context.Context) OpenpipelineV2EventsSdlcPipelinesOutput {
	return o
}

// Cost allocation stage
func (o OpenpipelineV2EventsSdlcPipelinesOutput) CostAllocation() OpenpipelineV2EventsSdlcPipelinesCostAllocationOutput {
	return o.ApplyT(func(v *OpenpipelineV2EventsSdlcPipelines) OpenpipelineV2EventsSdlcPipelinesCostAllocationOutput {
		return v.CostAllocation
	}).(OpenpipelineV2EventsSdlcPipelinesCostAllocationOutput)
}

// Custom pipeline id
func (o OpenpipelineV2EventsSdlcPipelinesOutput) CustomId() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenpipelineV2EventsSdlcPipelines) pulumi.StringOutput { return v.CustomId }).(pulumi.StringOutput)
}

// Data extraction stage
func (o OpenpipelineV2EventsSdlcPipelinesOutput) DataExtraction() OpenpipelineV2EventsSdlcPipelinesDataExtractionOutput {
	return o.ApplyT(func(v *OpenpipelineV2EventsSdlcPipelines) OpenpipelineV2EventsSdlcPipelinesDataExtractionOutput {
		return v.DataExtraction
	}).(OpenpipelineV2EventsSdlcPipelinesDataExtractionOutput)
}

// Davis event extraction stage
func (o OpenpipelineV2EventsSdlcPipelinesOutput) Davis() OpenpipelineV2EventsSdlcPipelinesDavisOutput {
	return o.ApplyT(func(v *OpenpipelineV2EventsSdlcPipelines) OpenpipelineV2EventsSdlcPipelinesDavisOutput {
		return v.Davis
	}).(OpenpipelineV2EventsSdlcPipelinesDavisOutput)
}

// Display name
func (o OpenpipelineV2EventsSdlcPipelinesOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenpipelineV2EventsSdlcPipelines) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Metrics extraction stage
func (o OpenpipelineV2EventsSdlcPipelinesOutput) MetricExtraction() OpenpipelineV2EventsSdlcPipelinesMetricExtractionOutput {
	return o.ApplyT(func(v *OpenpipelineV2EventsSdlcPipelines) OpenpipelineV2EventsSdlcPipelinesMetricExtractionOutput {
		return v.MetricExtraction
	}).(OpenpipelineV2EventsSdlcPipelinesMetricExtractionOutput)
}

// Processing stage
func (o OpenpipelineV2EventsSdlcPipelinesOutput) Processing() OpenpipelineV2EventsSdlcPipelinesProcessingOutput {
	return o.ApplyT(func(v *OpenpipelineV2EventsSdlcPipelines) OpenpipelineV2EventsSdlcPipelinesProcessingOutput {
		return v.Processing
	}).(OpenpipelineV2EventsSdlcPipelinesProcessingOutput)
}

// Product allocation stage
func (o OpenpipelineV2EventsSdlcPipelinesOutput) ProductAllocation() OpenpipelineV2EventsSdlcPipelinesProductAllocationOutput {
	return o.ApplyT(func(v *OpenpipelineV2EventsSdlcPipelines) OpenpipelineV2EventsSdlcPipelinesProductAllocationOutput {
		return v.ProductAllocation
	}).(OpenpipelineV2EventsSdlcPipelinesProductAllocationOutput)
}

// Security context stage
func (o OpenpipelineV2EventsSdlcPipelinesOutput) SecurityContext() OpenpipelineV2EventsSdlcPipelinesSecurityContextOutput {
	return o.ApplyT(func(v *OpenpipelineV2EventsSdlcPipelines) OpenpipelineV2EventsSdlcPipelinesSecurityContextOutput {
		return v.SecurityContext
	}).(OpenpipelineV2EventsSdlcPipelinesSecurityContextOutput)
}

// Storage stage
func (o OpenpipelineV2EventsSdlcPipelinesOutput) Storage() OpenpipelineV2EventsSdlcPipelinesStorageOutput {
	return o.ApplyT(func(v *OpenpipelineV2EventsSdlcPipelines) OpenpipelineV2EventsSdlcPipelinesStorageOutput {
		return v.Storage
	}).(OpenpipelineV2EventsSdlcPipelinesStorageOutput)
}

type OpenpipelineV2EventsSdlcPipelinesArrayOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2EventsSdlcPipelinesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2EventsSdlcPipelines)(nil)).Elem()
}

func (o OpenpipelineV2EventsSdlcPipelinesArrayOutput) ToOpenpipelineV2EventsSdlcPipelinesArrayOutput() OpenpipelineV2EventsSdlcPipelinesArrayOutput {
	return o
}

func (o OpenpipelineV2EventsSdlcPipelinesArrayOutput) ToOpenpipelineV2EventsSdlcPipelinesArrayOutputWithContext(ctx context.Context) OpenpipelineV2EventsSdlcPipelinesArrayOutput {
	return o
}

func (o OpenpipelineV2EventsSdlcPipelinesArrayOutput) Index(i pulumi.IntInput) OpenpipelineV2EventsSdlcPipelinesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenpipelineV2EventsSdlcPipelines {
		return vs[0].([]*OpenpipelineV2EventsSdlcPipelines)[vs[1].(int)]
	}).(OpenpipelineV2EventsSdlcPipelinesOutput)
}

type OpenpipelineV2EventsSdlcPipelinesMapOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2EventsSdlcPipelinesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2EventsSdlcPipelines)(nil)).Elem()
}

func (o OpenpipelineV2EventsSdlcPipelinesMapOutput) ToOpenpipelineV2EventsSdlcPipelinesMapOutput() OpenpipelineV2EventsSdlcPipelinesMapOutput {
	return o
}

func (o OpenpipelineV2EventsSdlcPipelinesMapOutput) ToOpenpipelineV2EventsSdlcPipelinesMapOutputWithContext(ctx context.Context) OpenpipelineV2EventsSdlcPipelinesMapOutput {
	return o
}

func (o OpenpipelineV2EventsSdlcPipelinesMapOutput) MapIndex(k pulumi.StringInput) OpenpipelineV2EventsSdlcPipelinesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenpipelineV2EventsSdlcPipelines {
		return vs[0].(map[string]*OpenpipelineV2EventsSdlcPipelines)[vs[1].(string)]
	}).(OpenpipelineV2EventsSdlcPipelinesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2EventsSdlcPipelinesInput)(nil)).Elem(), &OpenpipelineV2EventsSdlcPipelines{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2EventsSdlcPipelinesArrayInput)(nil)).Elem(), OpenpipelineV2EventsSdlcPipelinesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2EventsSdlcPipelinesMapInput)(nil)).Elem(), OpenpipelineV2EventsSdlcPipelinesMap{})
	pulumi.RegisterOutputType(OpenpipelineV2EventsSdlcPipelinesOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2EventsSdlcPipelinesArrayOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2EventsSdlcPipelinesMapOutput{})
}
