// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OpenpipelineV2DavisEventsRouting struct {
	pulumi.CustomResourceState

	// Routing for pipelines
	RoutingEntries OpenpipelineV2DavisEventsRoutingRoutingEntriesPtrOutput `pulumi:"routingEntries"`
}

// NewOpenpipelineV2DavisEventsRouting registers a new resource with the given unique name, arguments, and options.
func NewOpenpipelineV2DavisEventsRouting(ctx *pulumi.Context,
	name string, args *OpenpipelineV2DavisEventsRoutingArgs, opts ...pulumi.ResourceOption) (*OpenpipelineV2DavisEventsRouting, error) {
	if args == nil {
		args = &OpenpipelineV2DavisEventsRoutingArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenpipelineV2DavisEventsRouting
	err := ctx.RegisterResource("dynatrace:index/openpipelineV2DavisEventsRouting:OpenpipelineV2DavisEventsRouting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenpipelineV2DavisEventsRouting gets an existing OpenpipelineV2DavisEventsRouting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenpipelineV2DavisEventsRouting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenpipelineV2DavisEventsRoutingState, opts ...pulumi.ResourceOption) (*OpenpipelineV2DavisEventsRouting, error) {
	var resource OpenpipelineV2DavisEventsRouting
	err := ctx.ReadResource("dynatrace:index/openpipelineV2DavisEventsRouting:OpenpipelineV2DavisEventsRouting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenpipelineV2DavisEventsRouting resources.
type openpipelineV2DavisEventsRoutingState struct {
	// Routing for pipelines
	RoutingEntries *OpenpipelineV2DavisEventsRoutingRoutingEntries `pulumi:"routingEntries"`
}

type OpenpipelineV2DavisEventsRoutingState struct {
	// Routing for pipelines
	RoutingEntries OpenpipelineV2DavisEventsRoutingRoutingEntriesPtrInput
}

func (OpenpipelineV2DavisEventsRoutingState) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2DavisEventsRoutingState)(nil)).Elem()
}

type openpipelineV2DavisEventsRoutingArgs struct {
	// Routing for pipelines
	RoutingEntries *OpenpipelineV2DavisEventsRoutingRoutingEntries `pulumi:"routingEntries"`
}

// The set of arguments for constructing a OpenpipelineV2DavisEventsRouting resource.
type OpenpipelineV2DavisEventsRoutingArgs struct {
	// Routing for pipelines
	RoutingEntries OpenpipelineV2DavisEventsRoutingRoutingEntriesPtrInput
}

func (OpenpipelineV2DavisEventsRoutingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2DavisEventsRoutingArgs)(nil)).Elem()
}

type OpenpipelineV2DavisEventsRoutingInput interface {
	pulumi.Input

	ToOpenpipelineV2DavisEventsRoutingOutput() OpenpipelineV2DavisEventsRoutingOutput
	ToOpenpipelineV2DavisEventsRoutingOutputWithContext(ctx context.Context) OpenpipelineV2DavisEventsRoutingOutput
}

func (*OpenpipelineV2DavisEventsRouting) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2DavisEventsRouting)(nil)).Elem()
}

func (i *OpenpipelineV2DavisEventsRouting) ToOpenpipelineV2DavisEventsRoutingOutput() OpenpipelineV2DavisEventsRoutingOutput {
	return i.ToOpenpipelineV2DavisEventsRoutingOutputWithContext(context.Background())
}

func (i *OpenpipelineV2DavisEventsRouting) ToOpenpipelineV2DavisEventsRoutingOutputWithContext(ctx context.Context) OpenpipelineV2DavisEventsRoutingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2DavisEventsRoutingOutput)
}

// OpenpipelineV2DavisEventsRoutingArrayInput is an input type that accepts OpenpipelineV2DavisEventsRoutingArray and OpenpipelineV2DavisEventsRoutingArrayOutput values.
// You can construct a concrete instance of `OpenpipelineV2DavisEventsRoutingArrayInput` via:
//
//	OpenpipelineV2DavisEventsRoutingArray{ OpenpipelineV2DavisEventsRoutingArgs{...} }
type OpenpipelineV2DavisEventsRoutingArrayInput interface {
	pulumi.Input

	ToOpenpipelineV2DavisEventsRoutingArrayOutput() OpenpipelineV2DavisEventsRoutingArrayOutput
	ToOpenpipelineV2DavisEventsRoutingArrayOutputWithContext(context.Context) OpenpipelineV2DavisEventsRoutingArrayOutput
}

type OpenpipelineV2DavisEventsRoutingArray []OpenpipelineV2DavisEventsRoutingInput

func (OpenpipelineV2DavisEventsRoutingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2DavisEventsRouting)(nil)).Elem()
}

func (i OpenpipelineV2DavisEventsRoutingArray) ToOpenpipelineV2DavisEventsRoutingArrayOutput() OpenpipelineV2DavisEventsRoutingArrayOutput {
	return i.ToOpenpipelineV2DavisEventsRoutingArrayOutputWithContext(context.Background())
}

func (i OpenpipelineV2DavisEventsRoutingArray) ToOpenpipelineV2DavisEventsRoutingArrayOutputWithContext(ctx context.Context) OpenpipelineV2DavisEventsRoutingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2DavisEventsRoutingArrayOutput)
}

// OpenpipelineV2DavisEventsRoutingMapInput is an input type that accepts OpenpipelineV2DavisEventsRoutingMap and OpenpipelineV2DavisEventsRoutingMapOutput values.
// You can construct a concrete instance of `OpenpipelineV2DavisEventsRoutingMapInput` via:
//
//	OpenpipelineV2DavisEventsRoutingMap{ "key": OpenpipelineV2DavisEventsRoutingArgs{...} }
type OpenpipelineV2DavisEventsRoutingMapInput interface {
	pulumi.Input

	ToOpenpipelineV2DavisEventsRoutingMapOutput() OpenpipelineV2DavisEventsRoutingMapOutput
	ToOpenpipelineV2DavisEventsRoutingMapOutputWithContext(context.Context) OpenpipelineV2DavisEventsRoutingMapOutput
}

type OpenpipelineV2DavisEventsRoutingMap map[string]OpenpipelineV2DavisEventsRoutingInput

func (OpenpipelineV2DavisEventsRoutingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2DavisEventsRouting)(nil)).Elem()
}

func (i OpenpipelineV2DavisEventsRoutingMap) ToOpenpipelineV2DavisEventsRoutingMapOutput() OpenpipelineV2DavisEventsRoutingMapOutput {
	return i.ToOpenpipelineV2DavisEventsRoutingMapOutputWithContext(context.Background())
}

func (i OpenpipelineV2DavisEventsRoutingMap) ToOpenpipelineV2DavisEventsRoutingMapOutputWithContext(ctx context.Context) OpenpipelineV2DavisEventsRoutingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2DavisEventsRoutingMapOutput)
}

type OpenpipelineV2DavisEventsRoutingOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2DavisEventsRoutingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2DavisEventsRouting)(nil)).Elem()
}

func (o OpenpipelineV2DavisEventsRoutingOutput) ToOpenpipelineV2DavisEventsRoutingOutput() OpenpipelineV2DavisEventsRoutingOutput {
	return o
}

func (o OpenpipelineV2DavisEventsRoutingOutput) ToOpenpipelineV2DavisEventsRoutingOutputWithContext(ctx context.Context) OpenpipelineV2DavisEventsRoutingOutput {
	return o
}

// Routing for pipelines
func (o OpenpipelineV2DavisEventsRoutingOutput) RoutingEntries() OpenpipelineV2DavisEventsRoutingRoutingEntriesPtrOutput {
	return o.ApplyT(func(v *OpenpipelineV2DavisEventsRouting) OpenpipelineV2DavisEventsRoutingRoutingEntriesPtrOutput {
		return v.RoutingEntries
	}).(OpenpipelineV2DavisEventsRoutingRoutingEntriesPtrOutput)
}

type OpenpipelineV2DavisEventsRoutingArrayOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2DavisEventsRoutingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2DavisEventsRouting)(nil)).Elem()
}

func (o OpenpipelineV2DavisEventsRoutingArrayOutput) ToOpenpipelineV2DavisEventsRoutingArrayOutput() OpenpipelineV2DavisEventsRoutingArrayOutput {
	return o
}

func (o OpenpipelineV2DavisEventsRoutingArrayOutput) ToOpenpipelineV2DavisEventsRoutingArrayOutputWithContext(ctx context.Context) OpenpipelineV2DavisEventsRoutingArrayOutput {
	return o
}

func (o OpenpipelineV2DavisEventsRoutingArrayOutput) Index(i pulumi.IntInput) OpenpipelineV2DavisEventsRoutingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenpipelineV2DavisEventsRouting {
		return vs[0].([]*OpenpipelineV2DavisEventsRouting)[vs[1].(int)]
	}).(OpenpipelineV2DavisEventsRoutingOutput)
}

type OpenpipelineV2DavisEventsRoutingMapOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2DavisEventsRoutingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2DavisEventsRouting)(nil)).Elem()
}

func (o OpenpipelineV2DavisEventsRoutingMapOutput) ToOpenpipelineV2DavisEventsRoutingMapOutput() OpenpipelineV2DavisEventsRoutingMapOutput {
	return o
}

func (o OpenpipelineV2DavisEventsRoutingMapOutput) ToOpenpipelineV2DavisEventsRoutingMapOutputWithContext(ctx context.Context) OpenpipelineV2DavisEventsRoutingMapOutput {
	return o
}

func (o OpenpipelineV2DavisEventsRoutingMapOutput) MapIndex(k pulumi.StringInput) OpenpipelineV2DavisEventsRoutingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenpipelineV2DavisEventsRouting {
		return vs[0].(map[string]*OpenpipelineV2DavisEventsRouting)[vs[1].(string)]
	}).(OpenpipelineV2DavisEventsRoutingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2DavisEventsRoutingInput)(nil)).Elem(), &OpenpipelineV2DavisEventsRouting{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2DavisEventsRoutingArrayInput)(nil)).Elem(), OpenpipelineV2DavisEventsRoutingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2DavisEventsRoutingMapInput)(nil)).Elem(), OpenpipelineV2DavisEventsRoutingMap{})
	pulumi.RegisterOutputType(OpenpipelineV2DavisEventsRoutingOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2DavisEventsRoutingArrayOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2DavisEventsRoutingMapOutput{})
}
