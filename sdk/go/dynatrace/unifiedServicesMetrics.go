// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type UnifiedServicesMetrics struct {
	pulumi.CustomResourceState

	// Should metrics be written for endpoints? Please be aware that this setting has billing implications. Check out this [documentation](https://dt-url.net/td23cgh) for further details.
	EnableEndpointMetrics pulumi.BoolOutput `pulumi:"enableEndpointMetrics"`
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ServiceId pulumi.StringPtrOutput `pulumi:"serviceId"`
}

// NewUnifiedServicesMetrics registers a new resource with the given unique name, arguments, and options.
func NewUnifiedServicesMetrics(ctx *pulumi.Context,
	name string, args *UnifiedServicesMetricsArgs, opts ...pulumi.ResourceOption) (*UnifiedServicesMetrics, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnableEndpointMetrics == nil {
		return nil, errors.New("invalid value for required argument 'EnableEndpointMetrics'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UnifiedServicesMetrics
	err := ctx.RegisterResource("dynatrace:index/unifiedServicesMetrics:UnifiedServicesMetrics", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUnifiedServicesMetrics gets an existing UnifiedServicesMetrics resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUnifiedServicesMetrics(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UnifiedServicesMetricsState, opts ...pulumi.ResourceOption) (*UnifiedServicesMetrics, error) {
	var resource UnifiedServicesMetrics
	err := ctx.ReadResource("dynatrace:index/unifiedServicesMetrics:UnifiedServicesMetrics", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UnifiedServicesMetrics resources.
type unifiedServicesMetricsState struct {
	// Should metrics be written for endpoints? Please be aware that this setting has billing implications. Check out this [documentation](https://dt-url.net/td23cgh) for further details.
	EnableEndpointMetrics *bool `pulumi:"enableEndpointMetrics"`
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ServiceId *string `pulumi:"serviceId"`
}

type UnifiedServicesMetricsState struct {
	// Should metrics be written for endpoints? Please be aware that this setting has billing implications. Check out this [documentation](https://dt-url.net/td23cgh) for further details.
	EnableEndpointMetrics pulumi.BoolPtrInput
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ServiceId pulumi.StringPtrInput
}

func (UnifiedServicesMetricsState) ElementType() reflect.Type {
	return reflect.TypeOf((*unifiedServicesMetricsState)(nil)).Elem()
}

type unifiedServicesMetricsArgs struct {
	// Should metrics be written for endpoints? Please be aware that this setting has billing implications. Check out this [documentation](https://dt-url.net/td23cgh) for further details.
	EnableEndpointMetrics bool `pulumi:"enableEndpointMetrics"`
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ServiceId *string `pulumi:"serviceId"`
}

// The set of arguments for constructing a UnifiedServicesMetrics resource.
type UnifiedServicesMetricsArgs struct {
	// Should metrics be written for endpoints? Please be aware that this setting has billing implications. Check out this [documentation](https://dt-url.net/td23cgh) for further details.
	EnableEndpointMetrics pulumi.BoolInput
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ServiceId pulumi.StringPtrInput
}

func (UnifiedServicesMetricsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*unifiedServicesMetricsArgs)(nil)).Elem()
}

type UnifiedServicesMetricsInput interface {
	pulumi.Input

	ToUnifiedServicesMetricsOutput() UnifiedServicesMetricsOutput
	ToUnifiedServicesMetricsOutputWithContext(ctx context.Context) UnifiedServicesMetricsOutput
}

func (*UnifiedServicesMetrics) ElementType() reflect.Type {
	return reflect.TypeOf((**UnifiedServicesMetrics)(nil)).Elem()
}

func (i *UnifiedServicesMetrics) ToUnifiedServicesMetricsOutput() UnifiedServicesMetricsOutput {
	return i.ToUnifiedServicesMetricsOutputWithContext(context.Background())
}

func (i *UnifiedServicesMetrics) ToUnifiedServicesMetricsOutputWithContext(ctx context.Context) UnifiedServicesMetricsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnifiedServicesMetricsOutput)
}

// UnifiedServicesMetricsArrayInput is an input type that accepts UnifiedServicesMetricsArray and UnifiedServicesMetricsArrayOutput values.
// You can construct a concrete instance of `UnifiedServicesMetricsArrayInput` via:
//
//	UnifiedServicesMetricsArray{ UnifiedServicesMetricsArgs{...} }
type UnifiedServicesMetricsArrayInput interface {
	pulumi.Input

	ToUnifiedServicesMetricsArrayOutput() UnifiedServicesMetricsArrayOutput
	ToUnifiedServicesMetricsArrayOutputWithContext(context.Context) UnifiedServicesMetricsArrayOutput
}

type UnifiedServicesMetricsArray []UnifiedServicesMetricsInput

func (UnifiedServicesMetricsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UnifiedServicesMetrics)(nil)).Elem()
}

func (i UnifiedServicesMetricsArray) ToUnifiedServicesMetricsArrayOutput() UnifiedServicesMetricsArrayOutput {
	return i.ToUnifiedServicesMetricsArrayOutputWithContext(context.Background())
}

func (i UnifiedServicesMetricsArray) ToUnifiedServicesMetricsArrayOutputWithContext(ctx context.Context) UnifiedServicesMetricsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnifiedServicesMetricsArrayOutput)
}

// UnifiedServicesMetricsMapInput is an input type that accepts UnifiedServicesMetricsMap and UnifiedServicesMetricsMapOutput values.
// You can construct a concrete instance of `UnifiedServicesMetricsMapInput` via:
//
//	UnifiedServicesMetricsMap{ "key": UnifiedServicesMetricsArgs{...} }
type UnifiedServicesMetricsMapInput interface {
	pulumi.Input

	ToUnifiedServicesMetricsMapOutput() UnifiedServicesMetricsMapOutput
	ToUnifiedServicesMetricsMapOutputWithContext(context.Context) UnifiedServicesMetricsMapOutput
}

type UnifiedServicesMetricsMap map[string]UnifiedServicesMetricsInput

func (UnifiedServicesMetricsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UnifiedServicesMetrics)(nil)).Elem()
}

func (i UnifiedServicesMetricsMap) ToUnifiedServicesMetricsMapOutput() UnifiedServicesMetricsMapOutput {
	return i.ToUnifiedServicesMetricsMapOutputWithContext(context.Background())
}

func (i UnifiedServicesMetricsMap) ToUnifiedServicesMetricsMapOutputWithContext(ctx context.Context) UnifiedServicesMetricsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnifiedServicesMetricsMapOutput)
}

type UnifiedServicesMetricsOutput struct{ *pulumi.OutputState }

func (UnifiedServicesMetricsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UnifiedServicesMetrics)(nil)).Elem()
}

func (o UnifiedServicesMetricsOutput) ToUnifiedServicesMetricsOutput() UnifiedServicesMetricsOutput {
	return o
}

func (o UnifiedServicesMetricsOutput) ToUnifiedServicesMetricsOutputWithContext(ctx context.Context) UnifiedServicesMetricsOutput {
	return o
}

// Should metrics be written for endpoints? Please be aware that this setting has billing implications. Check out this [documentation](https://dt-url.net/td23cgh) for further details.
func (o UnifiedServicesMetricsOutput) EnableEndpointMetrics() pulumi.BoolOutput {
	return o.ApplyT(func(v *UnifiedServicesMetrics) pulumi.BoolOutput { return v.EnableEndpointMetrics }).(pulumi.BoolOutput)
}

// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
func (o UnifiedServicesMetricsOutput) ServiceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UnifiedServicesMetrics) pulumi.StringPtrOutput { return v.ServiceId }).(pulumi.StringPtrOutput)
}

type UnifiedServicesMetricsArrayOutput struct{ *pulumi.OutputState }

func (UnifiedServicesMetricsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UnifiedServicesMetrics)(nil)).Elem()
}

func (o UnifiedServicesMetricsArrayOutput) ToUnifiedServicesMetricsArrayOutput() UnifiedServicesMetricsArrayOutput {
	return o
}

func (o UnifiedServicesMetricsArrayOutput) ToUnifiedServicesMetricsArrayOutputWithContext(ctx context.Context) UnifiedServicesMetricsArrayOutput {
	return o
}

func (o UnifiedServicesMetricsArrayOutput) Index(i pulumi.IntInput) UnifiedServicesMetricsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UnifiedServicesMetrics {
		return vs[0].([]*UnifiedServicesMetrics)[vs[1].(int)]
	}).(UnifiedServicesMetricsOutput)
}

type UnifiedServicesMetricsMapOutput struct{ *pulumi.OutputState }

func (UnifiedServicesMetricsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UnifiedServicesMetrics)(nil)).Elem()
}

func (o UnifiedServicesMetricsMapOutput) ToUnifiedServicesMetricsMapOutput() UnifiedServicesMetricsMapOutput {
	return o
}

func (o UnifiedServicesMetricsMapOutput) ToUnifiedServicesMetricsMapOutputWithContext(ctx context.Context) UnifiedServicesMetricsMapOutput {
	return o
}

func (o UnifiedServicesMetricsMapOutput) MapIndex(k pulumi.StringInput) UnifiedServicesMetricsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UnifiedServicesMetrics {
		return vs[0].(map[string]*UnifiedServicesMetrics)[vs[1].(string)]
	}).(UnifiedServicesMetricsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UnifiedServicesMetricsInput)(nil)).Elem(), &UnifiedServicesMetrics{})
	pulumi.RegisterInputType(reflect.TypeOf((*UnifiedServicesMetricsArrayInput)(nil)).Elem(), UnifiedServicesMetricsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UnifiedServicesMetricsMapInput)(nil)).Elem(), UnifiedServicesMetricsMap{})
	pulumi.RegisterOutputType(UnifiedServicesMetricsOutput{})
	pulumi.RegisterOutputType(UnifiedServicesMetricsArrayOutput{})
	pulumi.RegisterOutputType(UnifiedServicesMetricsMapOutput{})
}
