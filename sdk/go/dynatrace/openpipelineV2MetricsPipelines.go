// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OpenpipelineV2MetricsPipelines struct {
	pulumi.CustomResourceState

	// Cost allocation stage
	CostAllocation OpenpipelineV2MetricsPipelinesCostAllocationOutput `pulumi:"costAllocation"`
	// Custom pipeline id
	CustomId pulumi.StringOutput `pulumi:"customId"`
	// Data extraction stage
	DataExtraction OpenpipelineV2MetricsPipelinesDataExtractionOutput `pulumi:"dataExtraction"`
	// Davis event extraction stage
	Davis OpenpipelineV2MetricsPipelinesDavisOutput `pulumi:"davis"`
	// Display name
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Metrics extraction stage
	MetricExtraction OpenpipelineV2MetricsPipelinesMetricExtractionOutput `pulumi:"metricExtraction"`
	// Processing stage
	Processing OpenpipelineV2MetricsPipelinesProcessingOutput `pulumi:"processing"`
	// Product allocation stage
	ProductAllocation OpenpipelineV2MetricsPipelinesProductAllocationOutput `pulumi:"productAllocation"`
	// Security context stage
	SecurityContext OpenpipelineV2MetricsPipelinesSecurityContextOutput `pulumi:"securityContext"`
	// Storage stage
	Storage OpenpipelineV2MetricsPipelinesStorageOutput `pulumi:"storage"`
}

// NewOpenpipelineV2MetricsPipelines registers a new resource with the given unique name, arguments, and options.
func NewOpenpipelineV2MetricsPipelines(ctx *pulumi.Context,
	name string, args *OpenpipelineV2MetricsPipelinesArgs, opts ...pulumi.ResourceOption) (*OpenpipelineV2MetricsPipelines, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CostAllocation == nil {
		return nil, errors.New("invalid value for required argument 'CostAllocation'")
	}
	if args.CustomId == nil {
		return nil, errors.New("invalid value for required argument 'CustomId'")
	}
	if args.DataExtraction == nil {
		return nil, errors.New("invalid value for required argument 'DataExtraction'")
	}
	if args.Davis == nil {
		return nil, errors.New("invalid value for required argument 'Davis'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.MetricExtraction == nil {
		return nil, errors.New("invalid value for required argument 'MetricExtraction'")
	}
	if args.Processing == nil {
		return nil, errors.New("invalid value for required argument 'Processing'")
	}
	if args.ProductAllocation == nil {
		return nil, errors.New("invalid value for required argument 'ProductAllocation'")
	}
	if args.SecurityContext == nil {
		return nil, errors.New("invalid value for required argument 'SecurityContext'")
	}
	if args.Storage == nil {
		return nil, errors.New("invalid value for required argument 'Storage'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenpipelineV2MetricsPipelines
	err := ctx.RegisterResource("dynatrace:index/openpipelineV2MetricsPipelines:OpenpipelineV2MetricsPipelines", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenpipelineV2MetricsPipelines gets an existing OpenpipelineV2MetricsPipelines resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenpipelineV2MetricsPipelines(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenpipelineV2MetricsPipelinesState, opts ...pulumi.ResourceOption) (*OpenpipelineV2MetricsPipelines, error) {
	var resource OpenpipelineV2MetricsPipelines
	err := ctx.ReadResource("dynatrace:index/openpipelineV2MetricsPipelines:OpenpipelineV2MetricsPipelines", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenpipelineV2MetricsPipelines resources.
type openpipelineV2MetricsPipelinesState struct {
	// Cost allocation stage
	CostAllocation *OpenpipelineV2MetricsPipelinesCostAllocation `pulumi:"costAllocation"`
	// Custom pipeline id
	CustomId *string `pulumi:"customId"`
	// Data extraction stage
	DataExtraction *OpenpipelineV2MetricsPipelinesDataExtraction `pulumi:"dataExtraction"`
	// Davis event extraction stage
	Davis *OpenpipelineV2MetricsPipelinesDavis `pulumi:"davis"`
	// Display name
	DisplayName *string `pulumi:"displayName"`
	// Metrics extraction stage
	MetricExtraction *OpenpipelineV2MetricsPipelinesMetricExtraction `pulumi:"metricExtraction"`
	// Processing stage
	Processing *OpenpipelineV2MetricsPipelinesProcessing `pulumi:"processing"`
	// Product allocation stage
	ProductAllocation *OpenpipelineV2MetricsPipelinesProductAllocation `pulumi:"productAllocation"`
	// Security context stage
	SecurityContext *OpenpipelineV2MetricsPipelinesSecurityContext `pulumi:"securityContext"`
	// Storage stage
	Storage *OpenpipelineV2MetricsPipelinesStorage `pulumi:"storage"`
}

type OpenpipelineV2MetricsPipelinesState struct {
	// Cost allocation stage
	CostAllocation OpenpipelineV2MetricsPipelinesCostAllocationPtrInput
	// Custom pipeline id
	CustomId pulumi.StringPtrInput
	// Data extraction stage
	DataExtraction OpenpipelineV2MetricsPipelinesDataExtractionPtrInput
	// Davis event extraction stage
	Davis OpenpipelineV2MetricsPipelinesDavisPtrInput
	// Display name
	DisplayName pulumi.StringPtrInput
	// Metrics extraction stage
	MetricExtraction OpenpipelineV2MetricsPipelinesMetricExtractionPtrInput
	// Processing stage
	Processing OpenpipelineV2MetricsPipelinesProcessingPtrInput
	// Product allocation stage
	ProductAllocation OpenpipelineV2MetricsPipelinesProductAllocationPtrInput
	// Security context stage
	SecurityContext OpenpipelineV2MetricsPipelinesSecurityContextPtrInput
	// Storage stage
	Storage OpenpipelineV2MetricsPipelinesStoragePtrInput
}

func (OpenpipelineV2MetricsPipelinesState) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2MetricsPipelinesState)(nil)).Elem()
}

type openpipelineV2MetricsPipelinesArgs struct {
	// Cost allocation stage
	CostAllocation OpenpipelineV2MetricsPipelinesCostAllocation `pulumi:"costAllocation"`
	// Custom pipeline id
	CustomId string `pulumi:"customId"`
	// Data extraction stage
	DataExtraction OpenpipelineV2MetricsPipelinesDataExtraction `pulumi:"dataExtraction"`
	// Davis event extraction stage
	Davis OpenpipelineV2MetricsPipelinesDavis `pulumi:"davis"`
	// Display name
	DisplayName string `pulumi:"displayName"`
	// Metrics extraction stage
	MetricExtraction OpenpipelineV2MetricsPipelinesMetricExtraction `pulumi:"metricExtraction"`
	// Processing stage
	Processing OpenpipelineV2MetricsPipelinesProcessing `pulumi:"processing"`
	// Product allocation stage
	ProductAllocation OpenpipelineV2MetricsPipelinesProductAllocation `pulumi:"productAllocation"`
	// Security context stage
	SecurityContext OpenpipelineV2MetricsPipelinesSecurityContext `pulumi:"securityContext"`
	// Storage stage
	Storage OpenpipelineV2MetricsPipelinesStorage `pulumi:"storage"`
}

// The set of arguments for constructing a OpenpipelineV2MetricsPipelines resource.
type OpenpipelineV2MetricsPipelinesArgs struct {
	// Cost allocation stage
	CostAllocation OpenpipelineV2MetricsPipelinesCostAllocationInput
	// Custom pipeline id
	CustomId pulumi.StringInput
	// Data extraction stage
	DataExtraction OpenpipelineV2MetricsPipelinesDataExtractionInput
	// Davis event extraction stage
	Davis OpenpipelineV2MetricsPipelinesDavisInput
	// Display name
	DisplayName pulumi.StringInput
	// Metrics extraction stage
	MetricExtraction OpenpipelineV2MetricsPipelinesMetricExtractionInput
	// Processing stage
	Processing OpenpipelineV2MetricsPipelinesProcessingInput
	// Product allocation stage
	ProductAllocation OpenpipelineV2MetricsPipelinesProductAllocationInput
	// Security context stage
	SecurityContext OpenpipelineV2MetricsPipelinesSecurityContextInput
	// Storage stage
	Storage OpenpipelineV2MetricsPipelinesStorageInput
}

func (OpenpipelineV2MetricsPipelinesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2MetricsPipelinesArgs)(nil)).Elem()
}

type OpenpipelineV2MetricsPipelinesInput interface {
	pulumi.Input

	ToOpenpipelineV2MetricsPipelinesOutput() OpenpipelineV2MetricsPipelinesOutput
	ToOpenpipelineV2MetricsPipelinesOutputWithContext(ctx context.Context) OpenpipelineV2MetricsPipelinesOutput
}

func (*OpenpipelineV2MetricsPipelines) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2MetricsPipelines)(nil)).Elem()
}

func (i *OpenpipelineV2MetricsPipelines) ToOpenpipelineV2MetricsPipelinesOutput() OpenpipelineV2MetricsPipelinesOutput {
	return i.ToOpenpipelineV2MetricsPipelinesOutputWithContext(context.Background())
}

func (i *OpenpipelineV2MetricsPipelines) ToOpenpipelineV2MetricsPipelinesOutputWithContext(ctx context.Context) OpenpipelineV2MetricsPipelinesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2MetricsPipelinesOutput)
}

// OpenpipelineV2MetricsPipelinesArrayInput is an input type that accepts OpenpipelineV2MetricsPipelinesArray and OpenpipelineV2MetricsPipelinesArrayOutput values.
// You can construct a concrete instance of `OpenpipelineV2MetricsPipelinesArrayInput` via:
//
//	OpenpipelineV2MetricsPipelinesArray{ OpenpipelineV2MetricsPipelinesArgs{...} }
type OpenpipelineV2MetricsPipelinesArrayInput interface {
	pulumi.Input

	ToOpenpipelineV2MetricsPipelinesArrayOutput() OpenpipelineV2MetricsPipelinesArrayOutput
	ToOpenpipelineV2MetricsPipelinesArrayOutputWithContext(context.Context) OpenpipelineV2MetricsPipelinesArrayOutput
}

type OpenpipelineV2MetricsPipelinesArray []OpenpipelineV2MetricsPipelinesInput

func (OpenpipelineV2MetricsPipelinesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2MetricsPipelines)(nil)).Elem()
}

func (i OpenpipelineV2MetricsPipelinesArray) ToOpenpipelineV2MetricsPipelinesArrayOutput() OpenpipelineV2MetricsPipelinesArrayOutput {
	return i.ToOpenpipelineV2MetricsPipelinesArrayOutputWithContext(context.Background())
}

func (i OpenpipelineV2MetricsPipelinesArray) ToOpenpipelineV2MetricsPipelinesArrayOutputWithContext(ctx context.Context) OpenpipelineV2MetricsPipelinesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2MetricsPipelinesArrayOutput)
}

// OpenpipelineV2MetricsPipelinesMapInput is an input type that accepts OpenpipelineV2MetricsPipelinesMap and OpenpipelineV2MetricsPipelinesMapOutput values.
// You can construct a concrete instance of `OpenpipelineV2MetricsPipelinesMapInput` via:
//
//	OpenpipelineV2MetricsPipelinesMap{ "key": OpenpipelineV2MetricsPipelinesArgs{...} }
type OpenpipelineV2MetricsPipelinesMapInput interface {
	pulumi.Input

	ToOpenpipelineV2MetricsPipelinesMapOutput() OpenpipelineV2MetricsPipelinesMapOutput
	ToOpenpipelineV2MetricsPipelinesMapOutputWithContext(context.Context) OpenpipelineV2MetricsPipelinesMapOutput
}

type OpenpipelineV2MetricsPipelinesMap map[string]OpenpipelineV2MetricsPipelinesInput

func (OpenpipelineV2MetricsPipelinesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2MetricsPipelines)(nil)).Elem()
}

func (i OpenpipelineV2MetricsPipelinesMap) ToOpenpipelineV2MetricsPipelinesMapOutput() OpenpipelineV2MetricsPipelinesMapOutput {
	return i.ToOpenpipelineV2MetricsPipelinesMapOutputWithContext(context.Background())
}

func (i OpenpipelineV2MetricsPipelinesMap) ToOpenpipelineV2MetricsPipelinesMapOutputWithContext(ctx context.Context) OpenpipelineV2MetricsPipelinesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2MetricsPipelinesMapOutput)
}

type OpenpipelineV2MetricsPipelinesOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2MetricsPipelinesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2MetricsPipelines)(nil)).Elem()
}

func (o OpenpipelineV2MetricsPipelinesOutput) ToOpenpipelineV2MetricsPipelinesOutput() OpenpipelineV2MetricsPipelinesOutput {
	return o
}

func (o OpenpipelineV2MetricsPipelinesOutput) ToOpenpipelineV2MetricsPipelinesOutputWithContext(ctx context.Context) OpenpipelineV2MetricsPipelinesOutput {
	return o
}

// Cost allocation stage
func (o OpenpipelineV2MetricsPipelinesOutput) CostAllocation() OpenpipelineV2MetricsPipelinesCostAllocationOutput {
	return o.ApplyT(func(v *OpenpipelineV2MetricsPipelines) OpenpipelineV2MetricsPipelinesCostAllocationOutput {
		return v.CostAllocation
	}).(OpenpipelineV2MetricsPipelinesCostAllocationOutput)
}

// Custom pipeline id
func (o OpenpipelineV2MetricsPipelinesOutput) CustomId() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenpipelineV2MetricsPipelines) pulumi.StringOutput { return v.CustomId }).(pulumi.StringOutput)
}

// Data extraction stage
func (o OpenpipelineV2MetricsPipelinesOutput) DataExtraction() OpenpipelineV2MetricsPipelinesDataExtractionOutput {
	return o.ApplyT(func(v *OpenpipelineV2MetricsPipelines) OpenpipelineV2MetricsPipelinesDataExtractionOutput {
		return v.DataExtraction
	}).(OpenpipelineV2MetricsPipelinesDataExtractionOutput)
}

// Davis event extraction stage
func (o OpenpipelineV2MetricsPipelinesOutput) Davis() OpenpipelineV2MetricsPipelinesDavisOutput {
	return o.ApplyT(func(v *OpenpipelineV2MetricsPipelines) OpenpipelineV2MetricsPipelinesDavisOutput { return v.Davis }).(OpenpipelineV2MetricsPipelinesDavisOutput)
}

// Display name
func (o OpenpipelineV2MetricsPipelinesOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenpipelineV2MetricsPipelines) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Metrics extraction stage
func (o OpenpipelineV2MetricsPipelinesOutput) MetricExtraction() OpenpipelineV2MetricsPipelinesMetricExtractionOutput {
	return o.ApplyT(func(v *OpenpipelineV2MetricsPipelines) OpenpipelineV2MetricsPipelinesMetricExtractionOutput {
		return v.MetricExtraction
	}).(OpenpipelineV2MetricsPipelinesMetricExtractionOutput)
}

// Processing stage
func (o OpenpipelineV2MetricsPipelinesOutput) Processing() OpenpipelineV2MetricsPipelinesProcessingOutput {
	return o.ApplyT(func(v *OpenpipelineV2MetricsPipelines) OpenpipelineV2MetricsPipelinesProcessingOutput {
		return v.Processing
	}).(OpenpipelineV2MetricsPipelinesProcessingOutput)
}

// Product allocation stage
func (o OpenpipelineV2MetricsPipelinesOutput) ProductAllocation() OpenpipelineV2MetricsPipelinesProductAllocationOutput {
	return o.ApplyT(func(v *OpenpipelineV2MetricsPipelines) OpenpipelineV2MetricsPipelinesProductAllocationOutput {
		return v.ProductAllocation
	}).(OpenpipelineV2MetricsPipelinesProductAllocationOutput)
}

// Security context stage
func (o OpenpipelineV2MetricsPipelinesOutput) SecurityContext() OpenpipelineV2MetricsPipelinesSecurityContextOutput {
	return o.ApplyT(func(v *OpenpipelineV2MetricsPipelines) OpenpipelineV2MetricsPipelinesSecurityContextOutput {
		return v.SecurityContext
	}).(OpenpipelineV2MetricsPipelinesSecurityContextOutput)
}

// Storage stage
func (o OpenpipelineV2MetricsPipelinesOutput) Storage() OpenpipelineV2MetricsPipelinesStorageOutput {
	return o.ApplyT(func(v *OpenpipelineV2MetricsPipelines) OpenpipelineV2MetricsPipelinesStorageOutput { return v.Storage }).(OpenpipelineV2MetricsPipelinesStorageOutput)
}

type OpenpipelineV2MetricsPipelinesArrayOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2MetricsPipelinesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2MetricsPipelines)(nil)).Elem()
}

func (o OpenpipelineV2MetricsPipelinesArrayOutput) ToOpenpipelineV2MetricsPipelinesArrayOutput() OpenpipelineV2MetricsPipelinesArrayOutput {
	return o
}

func (o OpenpipelineV2MetricsPipelinesArrayOutput) ToOpenpipelineV2MetricsPipelinesArrayOutputWithContext(ctx context.Context) OpenpipelineV2MetricsPipelinesArrayOutput {
	return o
}

func (o OpenpipelineV2MetricsPipelinesArrayOutput) Index(i pulumi.IntInput) OpenpipelineV2MetricsPipelinesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenpipelineV2MetricsPipelines {
		return vs[0].([]*OpenpipelineV2MetricsPipelines)[vs[1].(int)]
	}).(OpenpipelineV2MetricsPipelinesOutput)
}

type OpenpipelineV2MetricsPipelinesMapOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2MetricsPipelinesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2MetricsPipelines)(nil)).Elem()
}

func (o OpenpipelineV2MetricsPipelinesMapOutput) ToOpenpipelineV2MetricsPipelinesMapOutput() OpenpipelineV2MetricsPipelinesMapOutput {
	return o
}

func (o OpenpipelineV2MetricsPipelinesMapOutput) ToOpenpipelineV2MetricsPipelinesMapOutputWithContext(ctx context.Context) OpenpipelineV2MetricsPipelinesMapOutput {
	return o
}

func (o OpenpipelineV2MetricsPipelinesMapOutput) MapIndex(k pulumi.StringInput) OpenpipelineV2MetricsPipelinesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenpipelineV2MetricsPipelines {
		return vs[0].(map[string]*OpenpipelineV2MetricsPipelines)[vs[1].(string)]
	}).(OpenpipelineV2MetricsPipelinesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2MetricsPipelinesInput)(nil)).Elem(), &OpenpipelineV2MetricsPipelines{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2MetricsPipelinesArrayInput)(nil)).Elem(), OpenpipelineV2MetricsPipelinesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2MetricsPipelinesMapInput)(nil)).Elem(), OpenpipelineV2MetricsPipelinesMap{})
	pulumi.RegisterOutputType(OpenpipelineV2MetricsPipelinesOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2MetricsPipelinesArrayOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2MetricsPipelinesMapOutput{})
}
