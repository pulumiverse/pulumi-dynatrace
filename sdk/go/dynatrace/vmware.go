// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type Vmware struct {
	pulumi.CustomResourceState

	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// This string should have one of the following formats: - $prefix(parameter) - property value starting with 'parameter' -
	// $eq(parameter) - property value exactly matching 'parameter' - $suffix(parameter) - property value ends with 'parameter'
	// - $contains(parameter) - property value contains 'parameter'
	Filter pulumi.StringPtrOutput `pulumi:"filter"`
	// Specify the IP address or name of the vCenter or standalone ESXi host:
	Ipaddress pulumi.StringOutput `pulumi:"ipaddress"`
	// Name this connection
	Label pulumi.StringOutput `pulumi:"label"`
	// no documentation available
	Password pulumi.StringOutput `pulumi:"password"`
	// Provide user credentials for the vCenter or standalone ESXi host:
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewVmware registers a new resource with the given unique name, arguments, and options.
func NewVmware(ctx *pulumi.Context,
	name string, args *VmwareArgs, opts ...pulumi.ResourceOption) (*Vmware, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Ipaddress == nil {
		return nil, errors.New("invalid value for required argument 'Ipaddress'")
	}
	if args.Label == nil {
		return nil, errors.New("invalid value for required argument 'Label'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Vmware
	err := ctx.RegisterResource("dynatrace:index/vmware:Vmware", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVmware gets an existing Vmware resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVmware(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VmwareState, opts ...pulumi.ResourceOption) (*Vmware, error) {
	var resource Vmware
	err := ctx.ReadResource("dynatrace:index/vmware:Vmware", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vmware resources.
type vmwareState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// This string should have one of the following formats: - $prefix(parameter) - property value starting with 'parameter' -
	// $eq(parameter) - property value exactly matching 'parameter' - $suffix(parameter) - property value ends with 'parameter'
	// - $contains(parameter) - property value contains 'parameter'
	Filter *string `pulumi:"filter"`
	// Specify the IP address or name of the vCenter or standalone ESXi host:
	Ipaddress *string `pulumi:"ipaddress"`
	// Name this connection
	Label *string `pulumi:"label"`
	// no documentation available
	Password *string `pulumi:"password"`
	// Provide user credentials for the vCenter or standalone ESXi host:
	Username *string `pulumi:"username"`
}

type VmwareState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// This string should have one of the following formats: - $prefix(parameter) - property value starting with 'parameter' -
	// $eq(parameter) - property value exactly matching 'parameter' - $suffix(parameter) - property value ends with 'parameter'
	// - $contains(parameter) - property value contains 'parameter'
	Filter pulumi.StringPtrInput
	// Specify the IP address or name of the vCenter or standalone ESXi host:
	Ipaddress pulumi.StringPtrInput
	// Name this connection
	Label pulumi.StringPtrInput
	// no documentation available
	Password pulumi.StringPtrInput
	// Provide user credentials for the vCenter or standalone ESXi host:
	Username pulumi.StringPtrInput
}

func (VmwareState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmwareState)(nil)).Elem()
}

type vmwareArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// This string should have one of the following formats: - $prefix(parameter) - property value starting with 'parameter' -
	// $eq(parameter) - property value exactly matching 'parameter' - $suffix(parameter) - property value ends with 'parameter'
	// - $contains(parameter) - property value contains 'parameter'
	Filter *string `pulumi:"filter"`
	// Specify the IP address or name of the vCenter or standalone ESXi host:
	Ipaddress string `pulumi:"ipaddress"`
	// Name this connection
	Label string `pulumi:"label"`
	// no documentation available
	Password string `pulumi:"password"`
	// Provide user credentials for the vCenter or standalone ESXi host:
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a Vmware resource.
type VmwareArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// This string should have one of the following formats: - $prefix(parameter) - property value starting with 'parameter' -
	// $eq(parameter) - property value exactly matching 'parameter' - $suffix(parameter) - property value ends with 'parameter'
	// - $contains(parameter) - property value contains 'parameter'
	Filter pulumi.StringPtrInput
	// Specify the IP address or name of the vCenter or standalone ESXi host:
	Ipaddress pulumi.StringInput
	// Name this connection
	Label pulumi.StringInput
	// no documentation available
	Password pulumi.StringInput
	// Provide user credentials for the vCenter or standalone ESXi host:
	Username pulumi.StringInput
}

func (VmwareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmwareArgs)(nil)).Elem()
}

type VmwareInput interface {
	pulumi.Input

	ToVmwareOutput() VmwareOutput
	ToVmwareOutputWithContext(ctx context.Context) VmwareOutput
}

func (*Vmware) ElementType() reflect.Type {
	return reflect.TypeOf((**Vmware)(nil)).Elem()
}

func (i *Vmware) ToVmwareOutput() VmwareOutput {
	return i.ToVmwareOutputWithContext(context.Background())
}

func (i *Vmware) ToVmwareOutputWithContext(ctx context.Context) VmwareOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareOutput)
}

// VmwareArrayInput is an input type that accepts VmwareArray and VmwareArrayOutput values.
// You can construct a concrete instance of `VmwareArrayInput` via:
//
//	VmwareArray{ VmwareArgs{...} }
type VmwareArrayInput interface {
	pulumi.Input

	ToVmwareArrayOutput() VmwareArrayOutput
	ToVmwareArrayOutputWithContext(context.Context) VmwareArrayOutput
}

type VmwareArray []VmwareInput

func (VmwareArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vmware)(nil)).Elem()
}

func (i VmwareArray) ToVmwareArrayOutput() VmwareArrayOutput {
	return i.ToVmwareArrayOutputWithContext(context.Background())
}

func (i VmwareArray) ToVmwareArrayOutputWithContext(ctx context.Context) VmwareArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareArrayOutput)
}

// VmwareMapInput is an input type that accepts VmwareMap and VmwareMapOutput values.
// You can construct a concrete instance of `VmwareMapInput` via:
//
//	VmwareMap{ "key": VmwareArgs{...} }
type VmwareMapInput interface {
	pulumi.Input

	ToVmwareMapOutput() VmwareMapOutput
	ToVmwareMapOutputWithContext(context.Context) VmwareMapOutput
}

type VmwareMap map[string]VmwareInput

func (VmwareMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vmware)(nil)).Elem()
}

func (i VmwareMap) ToVmwareMapOutput() VmwareMapOutput {
	return i.ToVmwareMapOutputWithContext(context.Background())
}

func (i VmwareMap) ToVmwareMapOutputWithContext(ctx context.Context) VmwareMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareMapOutput)
}

type VmwareOutput struct{ *pulumi.OutputState }

func (VmwareOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vmware)(nil)).Elem()
}

func (o VmwareOutput) ToVmwareOutput() VmwareOutput {
	return o
}

func (o VmwareOutput) ToVmwareOutputWithContext(ctx context.Context) VmwareOutput {
	return o
}

// This setting is enabled (`true`) or disabled (`false`)
func (o VmwareOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Vmware) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// This string should have one of the following formats: - $prefix(parameter) - property value starting with 'parameter' -
// $eq(parameter) - property value exactly matching 'parameter' - $suffix(parameter) - property value ends with 'parameter'
// - $contains(parameter) - property value contains 'parameter'
func (o VmwareOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vmware) pulumi.StringPtrOutput { return v.Filter }).(pulumi.StringPtrOutput)
}

// Specify the IP address or name of the vCenter or standalone ESXi host:
func (o VmwareOutput) Ipaddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Vmware) pulumi.StringOutput { return v.Ipaddress }).(pulumi.StringOutput)
}

// Name this connection
func (o VmwareOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v *Vmware) pulumi.StringOutput { return v.Label }).(pulumi.StringOutput)
}

// no documentation available
func (o VmwareOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *Vmware) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// Provide user credentials for the vCenter or standalone ESXi host:
func (o VmwareOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *Vmware) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type VmwareArrayOutput struct{ *pulumi.OutputState }

func (VmwareArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vmware)(nil)).Elem()
}

func (o VmwareArrayOutput) ToVmwareArrayOutput() VmwareArrayOutput {
	return o
}

func (o VmwareArrayOutput) ToVmwareArrayOutputWithContext(ctx context.Context) VmwareArrayOutput {
	return o
}

func (o VmwareArrayOutput) Index(i pulumi.IntInput) VmwareOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vmware {
		return vs[0].([]*Vmware)[vs[1].(int)]
	}).(VmwareOutput)
}

type VmwareMapOutput struct{ *pulumi.OutputState }

func (VmwareMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vmware)(nil)).Elem()
}

func (o VmwareMapOutput) ToVmwareMapOutput() VmwareMapOutput {
	return o
}

func (o VmwareMapOutput) ToVmwareMapOutputWithContext(ctx context.Context) VmwareMapOutput {
	return o
}

func (o VmwareMapOutput) MapIndex(k pulumi.StringInput) VmwareOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vmware {
		return vs[0].(map[string]*Vmware)[vs[1].(string)]
	}).(VmwareOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareInput)(nil)).Elem(), &Vmware{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareArrayInput)(nil)).Elem(), VmwareArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareMapInput)(nil)).Elem(), VmwareMap{})
	pulumi.RegisterOutputType(VmwareOutput{})
	pulumi.RegisterOutputType(VmwareArrayOutput{})
	pulumi.RegisterOutputType(VmwareMapOutput{})
}
