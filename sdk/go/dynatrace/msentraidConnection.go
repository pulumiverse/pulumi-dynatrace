// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type MsentraidConnection struct {
	pulumi.CustomResourceState

	// Application (client) ID of your app registered in Microsoft Azure App registrations
	ApplicationId pulumi.StringOutput `pulumi:"applicationId"`
	// Client secret of your app registered in Microsoft Azure App registrations
	ClientSecret pulumi.StringOutput `pulumi:"clientSecret"`
	// Description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Directory (tenant) ID of Microsoft Entra Identity Developer
	DirectoryId pulumi.StringOutput `pulumi:"directoryId"`
	// The name of the Microsoft Entra Identity Developer connection
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewMsentraidConnection registers a new resource with the given unique name, arguments, and options.
func NewMsentraidConnection(ctx *pulumi.Context,
	name string, args *MsentraidConnectionArgs, opts ...pulumi.ResourceOption) (*MsentraidConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationId'")
	}
	if args.ClientSecret == nil {
		return nil, errors.New("invalid value for required argument 'ClientSecret'")
	}
	if args.DirectoryId == nil {
		return nil, errors.New("invalid value for required argument 'DirectoryId'")
	}
	if args.ApplicationId != nil {
		args.ApplicationId = pulumi.ToSecret(args.ApplicationId).(pulumi.StringInput)
	}
	if args.ClientSecret != nil {
		args.ClientSecret = pulumi.ToSecret(args.ClientSecret).(pulumi.StringInput)
	}
	if args.DirectoryId != nil {
		args.DirectoryId = pulumi.ToSecret(args.DirectoryId).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"applicationId",
		"clientSecret",
		"directoryId",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MsentraidConnection
	err := ctx.RegisterResource("dynatrace:index/msentraidConnection:MsentraidConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMsentraidConnection gets an existing MsentraidConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMsentraidConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MsentraidConnectionState, opts ...pulumi.ResourceOption) (*MsentraidConnection, error) {
	var resource MsentraidConnection
	err := ctx.ReadResource("dynatrace:index/msentraidConnection:MsentraidConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MsentraidConnection resources.
type msentraidConnectionState struct {
	// Application (client) ID of your app registered in Microsoft Azure App registrations
	ApplicationId *string `pulumi:"applicationId"`
	// Client secret of your app registered in Microsoft Azure App registrations
	ClientSecret *string `pulumi:"clientSecret"`
	// Description
	Description *string `pulumi:"description"`
	// Directory (tenant) ID of Microsoft Entra Identity Developer
	DirectoryId *string `pulumi:"directoryId"`
	// The name of the Microsoft Entra Identity Developer connection
	Name *string `pulumi:"name"`
}

type MsentraidConnectionState struct {
	// Application (client) ID of your app registered in Microsoft Azure App registrations
	ApplicationId pulumi.StringPtrInput
	// Client secret of your app registered in Microsoft Azure App registrations
	ClientSecret pulumi.StringPtrInput
	// Description
	Description pulumi.StringPtrInput
	// Directory (tenant) ID of Microsoft Entra Identity Developer
	DirectoryId pulumi.StringPtrInput
	// The name of the Microsoft Entra Identity Developer connection
	Name pulumi.StringPtrInput
}

func (MsentraidConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*msentraidConnectionState)(nil)).Elem()
}

type msentraidConnectionArgs struct {
	// Application (client) ID of your app registered in Microsoft Azure App registrations
	ApplicationId string `pulumi:"applicationId"`
	// Client secret of your app registered in Microsoft Azure App registrations
	ClientSecret string `pulumi:"clientSecret"`
	// Description
	Description *string `pulumi:"description"`
	// Directory (tenant) ID of Microsoft Entra Identity Developer
	DirectoryId string `pulumi:"directoryId"`
	// The name of the Microsoft Entra Identity Developer connection
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a MsentraidConnection resource.
type MsentraidConnectionArgs struct {
	// Application (client) ID of your app registered in Microsoft Azure App registrations
	ApplicationId pulumi.StringInput
	// Client secret of your app registered in Microsoft Azure App registrations
	ClientSecret pulumi.StringInput
	// Description
	Description pulumi.StringPtrInput
	// Directory (tenant) ID of Microsoft Entra Identity Developer
	DirectoryId pulumi.StringInput
	// The name of the Microsoft Entra Identity Developer connection
	Name pulumi.StringPtrInput
}

func (MsentraidConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*msentraidConnectionArgs)(nil)).Elem()
}

type MsentraidConnectionInput interface {
	pulumi.Input

	ToMsentraidConnectionOutput() MsentraidConnectionOutput
	ToMsentraidConnectionOutputWithContext(ctx context.Context) MsentraidConnectionOutput
}

func (*MsentraidConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**MsentraidConnection)(nil)).Elem()
}

func (i *MsentraidConnection) ToMsentraidConnectionOutput() MsentraidConnectionOutput {
	return i.ToMsentraidConnectionOutputWithContext(context.Background())
}

func (i *MsentraidConnection) ToMsentraidConnectionOutputWithContext(ctx context.Context) MsentraidConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsentraidConnectionOutput)
}

// MsentraidConnectionArrayInput is an input type that accepts MsentraidConnectionArray and MsentraidConnectionArrayOutput values.
// You can construct a concrete instance of `MsentraidConnectionArrayInput` via:
//
//	MsentraidConnectionArray{ MsentraidConnectionArgs{...} }
type MsentraidConnectionArrayInput interface {
	pulumi.Input

	ToMsentraidConnectionArrayOutput() MsentraidConnectionArrayOutput
	ToMsentraidConnectionArrayOutputWithContext(context.Context) MsentraidConnectionArrayOutput
}

type MsentraidConnectionArray []MsentraidConnectionInput

func (MsentraidConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MsentraidConnection)(nil)).Elem()
}

func (i MsentraidConnectionArray) ToMsentraidConnectionArrayOutput() MsentraidConnectionArrayOutput {
	return i.ToMsentraidConnectionArrayOutputWithContext(context.Background())
}

func (i MsentraidConnectionArray) ToMsentraidConnectionArrayOutputWithContext(ctx context.Context) MsentraidConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsentraidConnectionArrayOutput)
}

// MsentraidConnectionMapInput is an input type that accepts MsentraidConnectionMap and MsentraidConnectionMapOutput values.
// You can construct a concrete instance of `MsentraidConnectionMapInput` via:
//
//	MsentraidConnectionMap{ "key": MsentraidConnectionArgs{...} }
type MsentraidConnectionMapInput interface {
	pulumi.Input

	ToMsentraidConnectionMapOutput() MsentraidConnectionMapOutput
	ToMsentraidConnectionMapOutputWithContext(context.Context) MsentraidConnectionMapOutput
}

type MsentraidConnectionMap map[string]MsentraidConnectionInput

func (MsentraidConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MsentraidConnection)(nil)).Elem()
}

func (i MsentraidConnectionMap) ToMsentraidConnectionMapOutput() MsentraidConnectionMapOutput {
	return i.ToMsentraidConnectionMapOutputWithContext(context.Background())
}

func (i MsentraidConnectionMap) ToMsentraidConnectionMapOutputWithContext(ctx context.Context) MsentraidConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsentraidConnectionMapOutput)
}

type MsentraidConnectionOutput struct{ *pulumi.OutputState }

func (MsentraidConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MsentraidConnection)(nil)).Elem()
}

func (o MsentraidConnectionOutput) ToMsentraidConnectionOutput() MsentraidConnectionOutput {
	return o
}

func (o MsentraidConnectionOutput) ToMsentraidConnectionOutputWithContext(ctx context.Context) MsentraidConnectionOutput {
	return o
}

// Application (client) ID of your app registered in Microsoft Azure App registrations
func (o MsentraidConnectionOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *MsentraidConnection) pulumi.StringOutput { return v.ApplicationId }).(pulumi.StringOutput)
}

// Client secret of your app registered in Microsoft Azure App registrations
func (o MsentraidConnectionOutput) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v *MsentraidConnection) pulumi.StringOutput { return v.ClientSecret }).(pulumi.StringOutput)
}

// Description
func (o MsentraidConnectionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MsentraidConnection) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Directory (tenant) ID of Microsoft Entra Identity Developer
func (o MsentraidConnectionOutput) DirectoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *MsentraidConnection) pulumi.StringOutput { return v.DirectoryId }).(pulumi.StringOutput)
}

// The name of the Microsoft Entra Identity Developer connection
func (o MsentraidConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MsentraidConnection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type MsentraidConnectionArrayOutput struct{ *pulumi.OutputState }

func (MsentraidConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MsentraidConnection)(nil)).Elem()
}

func (o MsentraidConnectionArrayOutput) ToMsentraidConnectionArrayOutput() MsentraidConnectionArrayOutput {
	return o
}

func (o MsentraidConnectionArrayOutput) ToMsentraidConnectionArrayOutputWithContext(ctx context.Context) MsentraidConnectionArrayOutput {
	return o
}

func (o MsentraidConnectionArrayOutput) Index(i pulumi.IntInput) MsentraidConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MsentraidConnection {
		return vs[0].([]*MsentraidConnection)[vs[1].(int)]
	}).(MsentraidConnectionOutput)
}

type MsentraidConnectionMapOutput struct{ *pulumi.OutputState }

func (MsentraidConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MsentraidConnection)(nil)).Elem()
}

func (o MsentraidConnectionMapOutput) ToMsentraidConnectionMapOutput() MsentraidConnectionMapOutput {
	return o
}

func (o MsentraidConnectionMapOutput) ToMsentraidConnectionMapOutputWithContext(ctx context.Context) MsentraidConnectionMapOutput {
	return o
}

func (o MsentraidConnectionMapOutput) MapIndex(k pulumi.StringInput) MsentraidConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MsentraidConnection {
		return vs[0].(map[string]*MsentraidConnection)[vs[1].(string)]
	}).(MsentraidConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MsentraidConnectionInput)(nil)).Elem(), &MsentraidConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*MsentraidConnectionArrayInput)(nil)).Elem(), MsentraidConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MsentraidConnectionMapInput)(nil)).Elem(), MsentraidConnectionMap{})
	pulumi.RegisterOutputType(MsentraidConnectionOutput{})
	pulumi.RegisterOutputType(MsentraidConnectionArrayOutput{})
	pulumi.RegisterOutputType(MsentraidConnectionMapOutput{})
}
