// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type ProcessGroupDetection struct {
	pulumi.CustomResourceState

	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// You can define the properties that should be used to identify your process groups.
	GroupExtraction ProcessGroupDetectionGroupExtractionOutput `pulumi:"groupExtraction"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringOutput `pulumi:"insertAfter"`
	// You can define the properties that should be used to identify your process instances.
	InstanceExtraction ProcessGroupDetectionInstanceExtractionPtrOutput `pulumi:"instanceExtraction"`
	// Apply this rule to processes where the selected property contains the specified string.
	ProcessDetection ProcessGroupDetectionProcessDetectionOutput `pulumi:"processDetection"`
}

// NewProcessGroupDetection registers a new resource with the given unique name, arguments, and options.
func NewProcessGroupDetection(ctx *pulumi.Context,
	name string, args *ProcessGroupDetectionArgs, opts ...pulumi.ResourceOption) (*ProcessGroupDetection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.GroupExtraction == nil {
		return nil, errors.New("invalid value for required argument 'GroupExtraction'")
	}
	if args.ProcessDetection == nil {
		return nil, errors.New("invalid value for required argument 'ProcessDetection'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProcessGroupDetection
	err := ctx.RegisterResource("dynatrace:index/processGroupDetection:ProcessGroupDetection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProcessGroupDetection gets an existing ProcessGroupDetection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProcessGroupDetection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProcessGroupDetectionState, opts ...pulumi.ResourceOption) (*ProcessGroupDetection, error) {
	var resource ProcessGroupDetection
	err := ctx.ReadResource("dynatrace:index/processGroupDetection:ProcessGroupDetection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProcessGroupDetection resources.
type processGroupDetectionState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// You can define the properties that should be used to identify your process groups.
	GroupExtraction *ProcessGroupDetectionGroupExtraction `pulumi:"groupExtraction"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `pulumi:"insertAfter"`
	// You can define the properties that should be used to identify your process instances.
	InstanceExtraction *ProcessGroupDetectionInstanceExtraction `pulumi:"instanceExtraction"`
	// Apply this rule to processes where the selected property contains the specified string.
	ProcessDetection *ProcessGroupDetectionProcessDetection `pulumi:"processDetection"`
}

type ProcessGroupDetectionState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// You can define the properties that should be used to identify your process groups.
	GroupExtraction ProcessGroupDetectionGroupExtractionPtrInput
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringPtrInput
	// You can define the properties that should be used to identify your process instances.
	InstanceExtraction ProcessGroupDetectionInstanceExtractionPtrInput
	// Apply this rule to processes where the selected property contains the specified string.
	ProcessDetection ProcessGroupDetectionProcessDetectionPtrInput
}

func (ProcessGroupDetectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*processGroupDetectionState)(nil)).Elem()
}

type processGroupDetectionArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// You can define the properties that should be used to identify your process groups.
	GroupExtraction ProcessGroupDetectionGroupExtraction `pulumi:"groupExtraction"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `pulumi:"insertAfter"`
	// You can define the properties that should be used to identify your process instances.
	InstanceExtraction *ProcessGroupDetectionInstanceExtraction `pulumi:"instanceExtraction"`
	// Apply this rule to processes where the selected property contains the specified string.
	ProcessDetection ProcessGroupDetectionProcessDetection `pulumi:"processDetection"`
}

// The set of arguments for constructing a ProcessGroupDetection resource.
type ProcessGroupDetectionArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// You can define the properties that should be used to identify your process groups.
	GroupExtraction ProcessGroupDetectionGroupExtractionInput
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringPtrInput
	// You can define the properties that should be used to identify your process instances.
	InstanceExtraction ProcessGroupDetectionInstanceExtractionPtrInput
	// Apply this rule to processes where the selected property contains the specified string.
	ProcessDetection ProcessGroupDetectionProcessDetectionInput
}

func (ProcessGroupDetectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*processGroupDetectionArgs)(nil)).Elem()
}

type ProcessGroupDetectionInput interface {
	pulumi.Input

	ToProcessGroupDetectionOutput() ProcessGroupDetectionOutput
	ToProcessGroupDetectionOutputWithContext(ctx context.Context) ProcessGroupDetectionOutput
}

func (*ProcessGroupDetection) ElementType() reflect.Type {
	return reflect.TypeOf((**ProcessGroupDetection)(nil)).Elem()
}

func (i *ProcessGroupDetection) ToProcessGroupDetectionOutput() ProcessGroupDetectionOutput {
	return i.ToProcessGroupDetectionOutputWithContext(context.Background())
}

func (i *ProcessGroupDetection) ToProcessGroupDetectionOutputWithContext(ctx context.Context) ProcessGroupDetectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProcessGroupDetectionOutput)
}

// ProcessGroupDetectionArrayInput is an input type that accepts ProcessGroupDetectionArray and ProcessGroupDetectionArrayOutput values.
// You can construct a concrete instance of `ProcessGroupDetectionArrayInput` via:
//
//	ProcessGroupDetectionArray{ ProcessGroupDetectionArgs{...} }
type ProcessGroupDetectionArrayInput interface {
	pulumi.Input

	ToProcessGroupDetectionArrayOutput() ProcessGroupDetectionArrayOutput
	ToProcessGroupDetectionArrayOutputWithContext(context.Context) ProcessGroupDetectionArrayOutput
}

type ProcessGroupDetectionArray []ProcessGroupDetectionInput

func (ProcessGroupDetectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProcessGroupDetection)(nil)).Elem()
}

func (i ProcessGroupDetectionArray) ToProcessGroupDetectionArrayOutput() ProcessGroupDetectionArrayOutput {
	return i.ToProcessGroupDetectionArrayOutputWithContext(context.Background())
}

func (i ProcessGroupDetectionArray) ToProcessGroupDetectionArrayOutputWithContext(ctx context.Context) ProcessGroupDetectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProcessGroupDetectionArrayOutput)
}

// ProcessGroupDetectionMapInput is an input type that accepts ProcessGroupDetectionMap and ProcessGroupDetectionMapOutput values.
// You can construct a concrete instance of `ProcessGroupDetectionMapInput` via:
//
//	ProcessGroupDetectionMap{ "key": ProcessGroupDetectionArgs{...} }
type ProcessGroupDetectionMapInput interface {
	pulumi.Input

	ToProcessGroupDetectionMapOutput() ProcessGroupDetectionMapOutput
	ToProcessGroupDetectionMapOutputWithContext(context.Context) ProcessGroupDetectionMapOutput
}

type ProcessGroupDetectionMap map[string]ProcessGroupDetectionInput

func (ProcessGroupDetectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProcessGroupDetection)(nil)).Elem()
}

func (i ProcessGroupDetectionMap) ToProcessGroupDetectionMapOutput() ProcessGroupDetectionMapOutput {
	return i.ToProcessGroupDetectionMapOutputWithContext(context.Background())
}

func (i ProcessGroupDetectionMap) ToProcessGroupDetectionMapOutputWithContext(ctx context.Context) ProcessGroupDetectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProcessGroupDetectionMapOutput)
}

type ProcessGroupDetectionOutput struct{ *pulumi.OutputState }

func (ProcessGroupDetectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProcessGroupDetection)(nil)).Elem()
}

func (o ProcessGroupDetectionOutput) ToProcessGroupDetectionOutput() ProcessGroupDetectionOutput {
	return o
}

func (o ProcessGroupDetectionOutput) ToProcessGroupDetectionOutputWithContext(ctx context.Context) ProcessGroupDetectionOutput {
	return o
}

// This setting is enabled (`true`) or disabled (`false`)
func (o ProcessGroupDetectionOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProcessGroupDetection) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// You can define the properties that should be used to identify your process groups.
func (o ProcessGroupDetectionOutput) GroupExtraction() ProcessGroupDetectionGroupExtractionOutput {
	return o.ApplyT(func(v *ProcessGroupDetection) ProcessGroupDetectionGroupExtractionOutput { return v.GroupExtraction }).(ProcessGroupDetectionGroupExtractionOutput)
}

// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
func (o ProcessGroupDetectionOutput) InsertAfter() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcessGroupDetection) pulumi.StringOutput { return v.InsertAfter }).(pulumi.StringOutput)
}

// You can define the properties that should be used to identify your process instances.
func (o ProcessGroupDetectionOutput) InstanceExtraction() ProcessGroupDetectionInstanceExtractionPtrOutput {
	return o.ApplyT(func(v *ProcessGroupDetection) ProcessGroupDetectionInstanceExtractionPtrOutput {
		return v.InstanceExtraction
	}).(ProcessGroupDetectionInstanceExtractionPtrOutput)
}

// Apply this rule to processes where the selected property contains the specified string.
func (o ProcessGroupDetectionOutput) ProcessDetection() ProcessGroupDetectionProcessDetectionOutput {
	return o.ApplyT(func(v *ProcessGroupDetection) ProcessGroupDetectionProcessDetectionOutput { return v.ProcessDetection }).(ProcessGroupDetectionProcessDetectionOutput)
}

type ProcessGroupDetectionArrayOutput struct{ *pulumi.OutputState }

func (ProcessGroupDetectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProcessGroupDetection)(nil)).Elem()
}

func (o ProcessGroupDetectionArrayOutput) ToProcessGroupDetectionArrayOutput() ProcessGroupDetectionArrayOutput {
	return o
}

func (o ProcessGroupDetectionArrayOutput) ToProcessGroupDetectionArrayOutputWithContext(ctx context.Context) ProcessGroupDetectionArrayOutput {
	return o
}

func (o ProcessGroupDetectionArrayOutput) Index(i pulumi.IntInput) ProcessGroupDetectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProcessGroupDetection {
		return vs[0].([]*ProcessGroupDetection)[vs[1].(int)]
	}).(ProcessGroupDetectionOutput)
}

type ProcessGroupDetectionMapOutput struct{ *pulumi.OutputState }

func (ProcessGroupDetectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProcessGroupDetection)(nil)).Elem()
}

func (o ProcessGroupDetectionMapOutput) ToProcessGroupDetectionMapOutput() ProcessGroupDetectionMapOutput {
	return o
}

func (o ProcessGroupDetectionMapOutput) ToProcessGroupDetectionMapOutputWithContext(ctx context.Context) ProcessGroupDetectionMapOutput {
	return o
}

func (o ProcessGroupDetectionMapOutput) MapIndex(k pulumi.StringInput) ProcessGroupDetectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProcessGroupDetection {
		return vs[0].(map[string]*ProcessGroupDetection)[vs[1].(string)]
	}).(ProcessGroupDetectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProcessGroupDetectionInput)(nil)).Elem(), &ProcessGroupDetection{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProcessGroupDetectionArrayInput)(nil)).Elem(), ProcessGroupDetectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProcessGroupDetectionMapInput)(nil)).Elem(), ProcessGroupDetectionMap{})
	pulumi.RegisterOutputType(ProcessGroupDetectionOutput{})
	pulumi.RegisterOutputType(ProcessGroupDetectionArrayOutput{})
	pulumi.RegisterOutputType(ProcessGroupDetectionMapOutput{})
}
