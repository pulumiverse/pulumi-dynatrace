// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type K8sClusterAnomalies struct {
	pulumi.CustomResourceState

	// no documentation available
	CpuRequestsSaturation K8sClusterAnomaliesCpuRequestsSaturationOutput `pulumi:"cpuRequestsSaturation"`
	// no documentation available
	MemoryRequestsSaturation K8sClusterAnomaliesMemoryRequestsSaturationOutput `pulumi:"memoryRequestsSaturation"`
	// no documentation available
	MonitoringIssues K8sClusterAnomaliesMonitoringIssuesOutput `pulumi:"monitoringIssues"`
	// no documentation available
	PodsSaturation K8sClusterAnomaliesPodsSaturationOutput `pulumi:"podsSaturation"`
	// Alerts if cluster has not been ready for a given amount of time
	ReadinessIssues K8sClusterAnomaliesReadinessIssuesOutput `pulumi:"readinessIssues"`
	// The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
}

// NewK8sClusterAnomalies registers a new resource with the given unique name, arguments, and options.
func NewK8sClusterAnomalies(ctx *pulumi.Context,
	name string, args *K8sClusterAnomaliesArgs, opts ...pulumi.ResourceOption) (*K8sClusterAnomalies, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CpuRequestsSaturation == nil {
		return nil, errors.New("invalid value for required argument 'CpuRequestsSaturation'")
	}
	if args.MemoryRequestsSaturation == nil {
		return nil, errors.New("invalid value for required argument 'MemoryRequestsSaturation'")
	}
	if args.MonitoringIssues == nil {
		return nil, errors.New("invalid value for required argument 'MonitoringIssues'")
	}
	if args.PodsSaturation == nil {
		return nil, errors.New("invalid value for required argument 'PodsSaturation'")
	}
	if args.ReadinessIssues == nil {
		return nil, errors.New("invalid value for required argument 'ReadinessIssues'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource K8sClusterAnomalies
	err := ctx.RegisterResource("dynatrace:index/k8sClusterAnomalies:K8sClusterAnomalies", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetK8sClusterAnomalies gets an existing K8sClusterAnomalies resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetK8sClusterAnomalies(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *K8sClusterAnomaliesState, opts ...pulumi.ResourceOption) (*K8sClusterAnomalies, error) {
	var resource K8sClusterAnomalies
	err := ctx.ReadResource("dynatrace:index/k8sClusterAnomalies:K8sClusterAnomalies", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering K8sClusterAnomalies resources.
type k8sClusterAnomaliesState struct {
	// no documentation available
	CpuRequestsSaturation *K8sClusterAnomaliesCpuRequestsSaturation `pulumi:"cpuRequestsSaturation"`
	// no documentation available
	MemoryRequestsSaturation *K8sClusterAnomaliesMemoryRequestsSaturation `pulumi:"memoryRequestsSaturation"`
	// no documentation available
	MonitoringIssues *K8sClusterAnomaliesMonitoringIssues `pulumi:"monitoringIssues"`
	// no documentation available
	PodsSaturation *K8sClusterAnomaliesPodsSaturation `pulumi:"podsSaturation"`
	// Alerts if cluster has not been ready for a given amount of time
	ReadinessIssues *K8sClusterAnomaliesReadinessIssues `pulumi:"readinessIssues"`
	// The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
}

type K8sClusterAnomaliesState struct {
	// no documentation available
	CpuRequestsSaturation K8sClusterAnomaliesCpuRequestsSaturationPtrInput
	// no documentation available
	MemoryRequestsSaturation K8sClusterAnomaliesMemoryRequestsSaturationPtrInput
	// no documentation available
	MonitoringIssues K8sClusterAnomaliesMonitoringIssuesPtrInput
	// no documentation available
	PodsSaturation K8sClusterAnomaliesPodsSaturationPtrInput
	// Alerts if cluster has not been ready for a given amount of time
	ReadinessIssues K8sClusterAnomaliesReadinessIssuesPtrInput
	// The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
}

func (K8sClusterAnomaliesState) ElementType() reflect.Type {
	return reflect.TypeOf((*k8sClusterAnomaliesState)(nil)).Elem()
}

type k8sClusterAnomaliesArgs struct {
	// no documentation available
	CpuRequestsSaturation K8sClusterAnomaliesCpuRequestsSaturation `pulumi:"cpuRequestsSaturation"`
	// no documentation available
	MemoryRequestsSaturation K8sClusterAnomaliesMemoryRequestsSaturation `pulumi:"memoryRequestsSaturation"`
	// no documentation available
	MonitoringIssues K8sClusterAnomaliesMonitoringIssues `pulumi:"monitoringIssues"`
	// no documentation available
	PodsSaturation K8sClusterAnomaliesPodsSaturation `pulumi:"podsSaturation"`
	// Alerts if cluster has not been ready for a given amount of time
	ReadinessIssues K8sClusterAnomaliesReadinessIssues `pulumi:"readinessIssues"`
	// The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
}

// The set of arguments for constructing a K8sClusterAnomalies resource.
type K8sClusterAnomaliesArgs struct {
	// no documentation available
	CpuRequestsSaturation K8sClusterAnomaliesCpuRequestsSaturationInput
	// no documentation available
	MemoryRequestsSaturation K8sClusterAnomaliesMemoryRequestsSaturationInput
	// no documentation available
	MonitoringIssues K8sClusterAnomaliesMonitoringIssuesInput
	// no documentation available
	PodsSaturation K8sClusterAnomaliesPodsSaturationInput
	// Alerts if cluster has not been ready for a given amount of time
	ReadinessIssues K8sClusterAnomaliesReadinessIssuesInput
	// The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
}

func (K8sClusterAnomaliesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*k8sClusterAnomaliesArgs)(nil)).Elem()
}

type K8sClusterAnomaliesInput interface {
	pulumi.Input

	ToK8sClusterAnomaliesOutput() K8sClusterAnomaliesOutput
	ToK8sClusterAnomaliesOutputWithContext(ctx context.Context) K8sClusterAnomaliesOutput
}

func (*K8sClusterAnomalies) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sClusterAnomalies)(nil)).Elem()
}

func (i *K8sClusterAnomalies) ToK8sClusterAnomaliesOutput() K8sClusterAnomaliesOutput {
	return i.ToK8sClusterAnomaliesOutputWithContext(context.Background())
}

func (i *K8sClusterAnomalies) ToK8sClusterAnomaliesOutputWithContext(ctx context.Context) K8sClusterAnomaliesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sClusterAnomaliesOutput)
}

// K8sClusterAnomaliesArrayInput is an input type that accepts K8sClusterAnomaliesArray and K8sClusterAnomaliesArrayOutput values.
// You can construct a concrete instance of `K8sClusterAnomaliesArrayInput` via:
//
//	K8sClusterAnomaliesArray{ K8sClusterAnomaliesArgs{...} }
type K8sClusterAnomaliesArrayInput interface {
	pulumi.Input

	ToK8sClusterAnomaliesArrayOutput() K8sClusterAnomaliesArrayOutput
	ToK8sClusterAnomaliesArrayOutputWithContext(context.Context) K8sClusterAnomaliesArrayOutput
}

type K8sClusterAnomaliesArray []K8sClusterAnomaliesInput

func (K8sClusterAnomaliesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*K8sClusterAnomalies)(nil)).Elem()
}

func (i K8sClusterAnomaliesArray) ToK8sClusterAnomaliesArrayOutput() K8sClusterAnomaliesArrayOutput {
	return i.ToK8sClusterAnomaliesArrayOutputWithContext(context.Background())
}

func (i K8sClusterAnomaliesArray) ToK8sClusterAnomaliesArrayOutputWithContext(ctx context.Context) K8sClusterAnomaliesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sClusterAnomaliesArrayOutput)
}

// K8sClusterAnomaliesMapInput is an input type that accepts K8sClusterAnomaliesMap and K8sClusterAnomaliesMapOutput values.
// You can construct a concrete instance of `K8sClusterAnomaliesMapInput` via:
//
//	K8sClusterAnomaliesMap{ "key": K8sClusterAnomaliesArgs{...} }
type K8sClusterAnomaliesMapInput interface {
	pulumi.Input

	ToK8sClusterAnomaliesMapOutput() K8sClusterAnomaliesMapOutput
	ToK8sClusterAnomaliesMapOutputWithContext(context.Context) K8sClusterAnomaliesMapOutput
}

type K8sClusterAnomaliesMap map[string]K8sClusterAnomaliesInput

func (K8sClusterAnomaliesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*K8sClusterAnomalies)(nil)).Elem()
}

func (i K8sClusterAnomaliesMap) ToK8sClusterAnomaliesMapOutput() K8sClusterAnomaliesMapOutput {
	return i.ToK8sClusterAnomaliesMapOutputWithContext(context.Background())
}

func (i K8sClusterAnomaliesMap) ToK8sClusterAnomaliesMapOutputWithContext(ctx context.Context) K8sClusterAnomaliesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sClusterAnomaliesMapOutput)
}

type K8sClusterAnomaliesOutput struct{ *pulumi.OutputState }

func (K8sClusterAnomaliesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sClusterAnomalies)(nil)).Elem()
}

func (o K8sClusterAnomaliesOutput) ToK8sClusterAnomaliesOutput() K8sClusterAnomaliesOutput {
	return o
}

func (o K8sClusterAnomaliesOutput) ToK8sClusterAnomaliesOutputWithContext(ctx context.Context) K8sClusterAnomaliesOutput {
	return o
}

// no documentation available
func (o K8sClusterAnomaliesOutput) CpuRequestsSaturation() K8sClusterAnomaliesCpuRequestsSaturationOutput {
	return o.ApplyT(func(v *K8sClusterAnomalies) K8sClusterAnomaliesCpuRequestsSaturationOutput {
		return v.CpuRequestsSaturation
	}).(K8sClusterAnomaliesCpuRequestsSaturationOutput)
}

// no documentation available
func (o K8sClusterAnomaliesOutput) MemoryRequestsSaturation() K8sClusterAnomaliesMemoryRequestsSaturationOutput {
	return o.ApplyT(func(v *K8sClusterAnomalies) K8sClusterAnomaliesMemoryRequestsSaturationOutput {
		return v.MemoryRequestsSaturation
	}).(K8sClusterAnomaliesMemoryRequestsSaturationOutput)
}

// no documentation available
func (o K8sClusterAnomaliesOutput) MonitoringIssues() K8sClusterAnomaliesMonitoringIssuesOutput {
	return o.ApplyT(func(v *K8sClusterAnomalies) K8sClusterAnomaliesMonitoringIssuesOutput { return v.MonitoringIssues }).(K8sClusterAnomaliesMonitoringIssuesOutput)
}

// no documentation available
func (o K8sClusterAnomaliesOutput) PodsSaturation() K8sClusterAnomaliesPodsSaturationOutput {
	return o.ApplyT(func(v *K8sClusterAnomalies) K8sClusterAnomaliesPodsSaturationOutput { return v.PodsSaturation }).(K8sClusterAnomaliesPodsSaturationOutput)
}

// Alerts if cluster has not been ready for a given amount of time
func (o K8sClusterAnomaliesOutput) ReadinessIssues() K8sClusterAnomaliesReadinessIssuesOutput {
	return o.ApplyT(func(v *K8sClusterAnomalies) K8sClusterAnomaliesReadinessIssuesOutput { return v.ReadinessIssues }).(K8sClusterAnomaliesReadinessIssuesOutput)
}

// The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
func (o K8sClusterAnomaliesOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *K8sClusterAnomalies) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

type K8sClusterAnomaliesArrayOutput struct{ *pulumi.OutputState }

func (K8sClusterAnomaliesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*K8sClusterAnomalies)(nil)).Elem()
}

func (o K8sClusterAnomaliesArrayOutput) ToK8sClusterAnomaliesArrayOutput() K8sClusterAnomaliesArrayOutput {
	return o
}

func (o K8sClusterAnomaliesArrayOutput) ToK8sClusterAnomaliesArrayOutputWithContext(ctx context.Context) K8sClusterAnomaliesArrayOutput {
	return o
}

func (o K8sClusterAnomaliesArrayOutput) Index(i pulumi.IntInput) K8sClusterAnomaliesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *K8sClusterAnomalies {
		return vs[0].([]*K8sClusterAnomalies)[vs[1].(int)]
	}).(K8sClusterAnomaliesOutput)
}

type K8sClusterAnomaliesMapOutput struct{ *pulumi.OutputState }

func (K8sClusterAnomaliesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*K8sClusterAnomalies)(nil)).Elem()
}

func (o K8sClusterAnomaliesMapOutput) ToK8sClusterAnomaliesMapOutput() K8sClusterAnomaliesMapOutput {
	return o
}

func (o K8sClusterAnomaliesMapOutput) ToK8sClusterAnomaliesMapOutputWithContext(ctx context.Context) K8sClusterAnomaliesMapOutput {
	return o
}

func (o K8sClusterAnomaliesMapOutput) MapIndex(k pulumi.StringInput) K8sClusterAnomaliesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *K8sClusterAnomalies {
		return vs[0].(map[string]*K8sClusterAnomalies)[vs[1].(string)]
	}).(K8sClusterAnomaliesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*K8sClusterAnomaliesInput)(nil)).Elem(), &K8sClusterAnomalies{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sClusterAnomaliesArrayInput)(nil)).Elem(), K8sClusterAnomaliesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sClusterAnomaliesMapInput)(nil)).Elem(), K8sClusterAnomaliesMap{})
	pulumi.RegisterOutputType(K8sClusterAnomaliesOutput{})
	pulumi.RegisterOutputType(K8sClusterAnomaliesArrayOutput{})
	pulumi.RegisterOutputType(K8sClusterAnomaliesMapOutput{})
}
