// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type MsteamsConnection struct {
	pulumi.CustomResourceState

	// Optional
	ChannelName pulumi.StringPtrOutput `pulumi:"channelName"`
	// The name of the Microsoft Teams connection
	Name pulumi.StringOutput `pulumi:"name"`
	// Optional
	TeamName pulumi.StringPtrOutput `pulumi:"teamName"`
	// The Webhook URL that links to the channel
	Webhook pulumi.StringOutput `pulumi:"webhook"`
}

// NewMsteamsConnection registers a new resource with the given unique name, arguments, and options.
func NewMsteamsConnection(ctx *pulumi.Context,
	name string, args *MsteamsConnectionArgs, opts ...pulumi.ResourceOption) (*MsteamsConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Webhook == nil {
		return nil, errors.New("invalid value for required argument 'Webhook'")
	}
	if args.Webhook != nil {
		args.Webhook = pulumi.ToSecret(args.Webhook).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"webhook",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MsteamsConnection
	err := ctx.RegisterResource("dynatrace:index/msteamsConnection:MsteamsConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMsteamsConnection gets an existing MsteamsConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMsteamsConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MsteamsConnectionState, opts ...pulumi.ResourceOption) (*MsteamsConnection, error) {
	var resource MsteamsConnection
	err := ctx.ReadResource("dynatrace:index/msteamsConnection:MsteamsConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MsteamsConnection resources.
type msteamsConnectionState struct {
	// Optional
	ChannelName *string `pulumi:"channelName"`
	// The name of the Microsoft Teams connection
	Name *string `pulumi:"name"`
	// Optional
	TeamName *string `pulumi:"teamName"`
	// The Webhook URL that links to the channel
	Webhook *string `pulumi:"webhook"`
}

type MsteamsConnectionState struct {
	// Optional
	ChannelName pulumi.StringPtrInput
	// The name of the Microsoft Teams connection
	Name pulumi.StringPtrInput
	// Optional
	TeamName pulumi.StringPtrInput
	// The Webhook URL that links to the channel
	Webhook pulumi.StringPtrInput
}

func (MsteamsConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*msteamsConnectionState)(nil)).Elem()
}

type msteamsConnectionArgs struct {
	// Optional
	ChannelName *string `pulumi:"channelName"`
	// The name of the Microsoft Teams connection
	Name *string `pulumi:"name"`
	// Optional
	TeamName *string `pulumi:"teamName"`
	// The Webhook URL that links to the channel
	Webhook string `pulumi:"webhook"`
}

// The set of arguments for constructing a MsteamsConnection resource.
type MsteamsConnectionArgs struct {
	// Optional
	ChannelName pulumi.StringPtrInput
	// The name of the Microsoft Teams connection
	Name pulumi.StringPtrInput
	// Optional
	TeamName pulumi.StringPtrInput
	// The Webhook URL that links to the channel
	Webhook pulumi.StringInput
}

func (MsteamsConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*msteamsConnectionArgs)(nil)).Elem()
}

type MsteamsConnectionInput interface {
	pulumi.Input

	ToMsteamsConnectionOutput() MsteamsConnectionOutput
	ToMsteamsConnectionOutputWithContext(ctx context.Context) MsteamsConnectionOutput
}

func (*MsteamsConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**MsteamsConnection)(nil)).Elem()
}

func (i *MsteamsConnection) ToMsteamsConnectionOutput() MsteamsConnectionOutput {
	return i.ToMsteamsConnectionOutputWithContext(context.Background())
}

func (i *MsteamsConnection) ToMsteamsConnectionOutputWithContext(ctx context.Context) MsteamsConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsteamsConnectionOutput)
}

// MsteamsConnectionArrayInput is an input type that accepts MsteamsConnectionArray and MsteamsConnectionArrayOutput values.
// You can construct a concrete instance of `MsteamsConnectionArrayInput` via:
//
//	MsteamsConnectionArray{ MsteamsConnectionArgs{...} }
type MsteamsConnectionArrayInput interface {
	pulumi.Input

	ToMsteamsConnectionArrayOutput() MsteamsConnectionArrayOutput
	ToMsteamsConnectionArrayOutputWithContext(context.Context) MsteamsConnectionArrayOutput
}

type MsteamsConnectionArray []MsteamsConnectionInput

func (MsteamsConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MsteamsConnection)(nil)).Elem()
}

func (i MsteamsConnectionArray) ToMsteamsConnectionArrayOutput() MsteamsConnectionArrayOutput {
	return i.ToMsteamsConnectionArrayOutputWithContext(context.Background())
}

func (i MsteamsConnectionArray) ToMsteamsConnectionArrayOutputWithContext(ctx context.Context) MsteamsConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsteamsConnectionArrayOutput)
}

// MsteamsConnectionMapInput is an input type that accepts MsteamsConnectionMap and MsteamsConnectionMapOutput values.
// You can construct a concrete instance of `MsteamsConnectionMapInput` via:
//
//	MsteamsConnectionMap{ "key": MsteamsConnectionArgs{...} }
type MsteamsConnectionMapInput interface {
	pulumi.Input

	ToMsteamsConnectionMapOutput() MsteamsConnectionMapOutput
	ToMsteamsConnectionMapOutputWithContext(context.Context) MsteamsConnectionMapOutput
}

type MsteamsConnectionMap map[string]MsteamsConnectionInput

func (MsteamsConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MsteamsConnection)(nil)).Elem()
}

func (i MsteamsConnectionMap) ToMsteamsConnectionMapOutput() MsteamsConnectionMapOutput {
	return i.ToMsteamsConnectionMapOutputWithContext(context.Background())
}

func (i MsteamsConnectionMap) ToMsteamsConnectionMapOutputWithContext(ctx context.Context) MsteamsConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsteamsConnectionMapOutput)
}

type MsteamsConnectionOutput struct{ *pulumi.OutputState }

func (MsteamsConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MsteamsConnection)(nil)).Elem()
}

func (o MsteamsConnectionOutput) ToMsteamsConnectionOutput() MsteamsConnectionOutput {
	return o
}

func (o MsteamsConnectionOutput) ToMsteamsConnectionOutputWithContext(ctx context.Context) MsteamsConnectionOutput {
	return o
}

// Optional
func (o MsteamsConnectionOutput) ChannelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MsteamsConnection) pulumi.StringPtrOutput { return v.ChannelName }).(pulumi.StringPtrOutput)
}

// The name of the Microsoft Teams connection
func (o MsteamsConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MsteamsConnection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional
func (o MsteamsConnectionOutput) TeamName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MsteamsConnection) pulumi.StringPtrOutput { return v.TeamName }).(pulumi.StringPtrOutput)
}

// The Webhook URL that links to the channel
func (o MsteamsConnectionOutput) Webhook() pulumi.StringOutput {
	return o.ApplyT(func(v *MsteamsConnection) pulumi.StringOutput { return v.Webhook }).(pulumi.StringOutput)
}

type MsteamsConnectionArrayOutput struct{ *pulumi.OutputState }

func (MsteamsConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MsteamsConnection)(nil)).Elem()
}

func (o MsteamsConnectionArrayOutput) ToMsteamsConnectionArrayOutput() MsteamsConnectionArrayOutput {
	return o
}

func (o MsteamsConnectionArrayOutput) ToMsteamsConnectionArrayOutputWithContext(ctx context.Context) MsteamsConnectionArrayOutput {
	return o
}

func (o MsteamsConnectionArrayOutput) Index(i pulumi.IntInput) MsteamsConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MsteamsConnection {
		return vs[0].([]*MsteamsConnection)[vs[1].(int)]
	}).(MsteamsConnectionOutput)
}

type MsteamsConnectionMapOutput struct{ *pulumi.OutputState }

func (MsteamsConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MsteamsConnection)(nil)).Elem()
}

func (o MsteamsConnectionMapOutput) ToMsteamsConnectionMapOutput() MsteamsConnectionMapOutput {
	return o
}

func (o MsteamsConnectionMapOutput) ToMsteamsConnectionMapOutputWithContext(ctx context.Context) MsteamsConnectionMapOutput {
	return o
}

func (o MsteamsConnectionMapOutput) MapIndex(k pulumi.StringInput) MsteamsConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MsteamsConnection {
		return vs[0].(map[string]*MsteamsConnection)[vs[1].(string)]
	}).(MsteamsConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MsteamsConnectionInput)(nil)).Elem(), &MsteamsConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*MsteamsConnectionArrayInput)(nil)).Elem(), MsteamsConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MsteamsConnectionMapInput)(nil)).Elem(), MsteamsConnectionMap{})
	pulumi.RegisterOutputType(MsteamsConnectionOutput{})
	pulumi.RegisterOutputType(MsteamsConnectionArrayOutput{})
	pulumi.RegisterOutputType(MsteamsConnectionMapOutput{})
}
