// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type MonitoredTechnologiesIis struct {
	pulumi.CustomResourceState

	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId pulumi.StringPtrOutput `pulumi:"hostId"`
}

// NewMonitoredTechnologiesIis registers a new resource with the given unique name, arguments, and options.
func NewMonitoredTechnologiesIis(ctx *pulumi.Context,
	name string, args *MonitoredTechnologiesIisArgs, opts ...pulumi.ResourceOption) (*MonitoredTechnologiesIis, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MonitoredTechnologiesIis
	err := ctx.RegisterResource("dynatrace:index/monitoredTechnologiesIis:MonitoredTechnologiesIis", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMonitoredTechnologiesIis gets an existing MonitoredTechnologiesIis resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMonitoredTechnologiesIis(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MonitoredTechnologiesIisState, opts ...pulumi.ResourceOption) (*MonitoredTechnologiesIis, error) {
	var resource MonitoredTechnologiesIis
	err := ctx.ReadResource("dynatrace:index/monitoredTechnologiesIis:MonitoredTechnologiesIis", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MonitoredTechnologiesIis resources.
type monitoredTechnologiesIisState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId *string `pulumi:"hostId"`
}

type MonitoredTechnologiesIisState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId pulumi.StringPtrInput
}

func (MonitoredTechnologiesIisState) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoredTechnologiesIisState)(nil)).Elem()
}

type monitoredTechnologiesIisArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId *string `pulumi:"hostId"`
}

// The set of arguments for constructing a MonitoredTechnologiesIis resource.
type MonitoredTechnologiesIisArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId pulumi.StringPtrInput
}

func (MonitoredTechnologiesIisArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoredTechnologiesIisArgs)(nil)).Elem()
}

type MonitoredTechnologiesIisInput interface {
	pulumi.Input

	ToMonitoredTechnologiesIisOutput() MonitoredTechnologiesIisOutput
	ToMonitoredTechnologiesIisOutputWithContext(ctx context.Context) MonitoredTechnologiesIisOutput
}

func (*MonitoredTechnologiesIis) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoredTechnologiesIis)(nil)).Elem()
}

func (i *MonitoredTechnologiesIis) ToMonitoredTechnologiesIisOutput() MonitoredTechnologiesIisOutput {
	return i.ToMonitoredTechnologiesIisOutputWithContext(context.Background())
}

func (i *MonitoredTechnologiesIis) ToMonitoredTechnologiesIisOutputWithContext(ctx context.Context) MonitoredTechnologiesIisOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoredTechnologiesIisOutput)
}

// MonitoredTechnologiesIisArrayInput is an input type that accepts MonitoredTechnologiesIisArray and MonitoredTechnologiesIisArrayOutput values.
// You can construct a concrete instance of `MonitoredTechnologiesIisArrayInput` via:
//
//	MonitoredTechnologiesIisArray{ MonitoredTechnologiesIisArgs{...} }
type MonitoredTechnologiesIisArrayInput interface {
	pulumi.Input

	ToMonitoredTechnologiesIisArrayOutput() MonitoredTechnologiesIisArrayOutput
	ToMonitoredTechnologiesIisArrayOutputWithContext(context.Context) MonitoredTechnologiesIisArrayOutput
}

type MonitoredTechnologiesIisArray []MonitoredTechnologiesIisInput

func (MonitoredTechnologiesIisArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MonitoredTechnologiesIis)(nil)).Elem()
}

func (i MonitoredTechnologiesIisArray) ToMonitoredTechnologiesIisArrayOutput() MonitoredTechnologiesIisArrayOutput {
	return i.ToMonitoredTechnologiesIisArrayOutputWithContext(context.Background())
}

func (i MonitoredTechnologiesIisArray) ToMonitoredTechnologiesIisArrayOutputWithContext(ctx context.Context) MonitoredTechnologiesIisArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoredTechnologiesIisArrayOutput)
}

// MonitoredTechnologiesIisMapInput is an input type that accepts MonitoredTechnologiesIisMap and MonitoredTechnologiesIisMapOutput values.
// You can construct a concrete instance of `MonitoredTechnologiesIisMapInput` via:
//
//	MonitoredTechnologiesIisMap{ "key": MonitoredTechnologiesIisArgs{...} }
type MonitoredTechnologiesIisMapInput interface {
	pulumi.Input

	ToMonitoredTechnologiesIisMapOutput() MonitoredTechnologiesIisMapOutput
	ToMonitoredTechnologiesIisMapOutputWithContext(context.Context) MonitoredTechnologiesIisMapOutput
}

type MonitoredTechnologiesIisMap map[string]MonitoredTechnologiesIisInput

func (MonitoredTechnologiesIisMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MonitoredTechnologiesIis)(nil)).Elem()
}

func (i MonitoredTechnologiesIisMap) ToMonitoredTechnologiesIisMapOutput() MonitoredTechnologiesIisMapOutput {
	return i.ToMonitoredTechnologiesIisMapOutputWithContext(context.Background())
}

func (i MonitoredTechnologiesIisMap) ToMonitoredTechnologiesIisMapOutputWithContext(ctx context.Context) MonitoredTechnologiesIisMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoredTechnologiesIisMapOutput)
}

type MonitoredTechnologiesIisOutput struct{ *pulumi.OutputState }

func (MonitoredTechnologiesIisOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoredTechnologiesIis)(nil)).Elem()
}

func (o MonitoredTechnologiesIisOutput) ToMonitoredTechnologiesIisOutput() MonitoredTechnologiesIisOutput {
	return o
}

func (o MonitoredTechnologiesIisOutput) ToMonitoredTechnologiesIisOutputWithContext(ctx context.Context) MonitoredTechnologiesIisOutput {
	return o
}

// This setting is enabled (`true`) or disabled (`false`)
func (o MonitoredTechnologiesIisOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *MonitoredTechnologiesIis) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
func (o MonitoredTechnologiesIisOutput) HostId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitoredTechnologiesIis) pulumi.StringPtrOutput { return v.HostId }).(pulumi.StringPtrOutput)
}

type MonitoredTechnologiesIisArrayOutput struct{ *pulumi.OutputState }

func (MonitoredTechnologiesIisArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MonitoredTechnologiesIis)(nil)).Elem()
}

func (o MonitoredTechnologiesIisArrayOutput) ToMonitoredTechnologiesIisArrayOutput() MonitoredTechnologiesIisArrayOutput {
	return o
}

func (o MonitoredTechnologiesIisArrayOutput) ToMonitoredTechnologiesIisArrayOutputWithContext(ctx context.Context) MonitoredTechnologiesIisArrayOutput {
	return o
}

func (o MonitoredTechnologiesIisArrayOutput) Index(i pulumi.IntInput) MonitoredTechnologiesIisOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MonitoredTechnologiesIis {
		return vs[0].([]*MonitoredTechnologiesIis)[vs[1].(int)]
	}).(MonitoredTechnologiesIisOutput)
}

type MonitoredTechnologiesIisMapOutput struct{ *pulumi.OutputState }

func (MonitoredTechnologiesIisMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MonitoredTechnologiesIis)(nil)).Elem()
}

func (o MonitoredTechnologiesIisMapOutput) ToMonitoredTechnologiesIisMapOutput() MonitoredTechnologiesIisMapOutput {
	return o
}

func (o MonitoredTechnologiesIisMapOutput) ToMonitoredTechnologiesIisMapOutputWithContext(ctx context.Context) MonitoredTechnologiesIisMapOutput {
	return o
}

func (o MonitoredTechnologiesIisMapOutput) MapIndex(k pulumi.StringInput) MonitoredTechnologiesIisOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MonitoredTechnologiesIis {
		return vs[0].(map[string]*MonitoredTechnologiesIis)[vs[1].(string)]
	}).(MonitoredTechnologiesIisOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoredTechnologiesIisInput)(nil)).Elem(), &MonitoredTechnologiesIis{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoredTechnologiesIisArrayInput)(nil)).Elem(), MonitoredTechnologiesIisArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoredTechnologiesIisMapInput)(nil)).Elem(), MonitoredTechnologiesIisMap{})
	pulumi.RegisterOutputType(MonitoredTechnologiesIisOutput{})
	pulumi.RegisterOutputType(MonitoredTechnologiesIisArrayOutput{})
	pulumi.RegisterOutputType(MonitoredTechnologiesIisMapOutput{})
}
