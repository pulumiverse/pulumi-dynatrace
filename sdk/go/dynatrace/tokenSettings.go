// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type TokenSettings struct {
	pulumi.CustomResourceState

	// Check out this [blog post](http://www.dynatrace.com/blog/further-increased-security-of-your-api-tokens-by-automating-token-protection/) to find out more about the new Dynatrace API token format.
	NewTokenFormat pulumi.BoolOutput `pulumi:"newTokenFormat"`
	// Allow users of this environment to generate personal access tokens based on user permissions.
	// Note that existing personal access tokens will become unusable while this setting is disabled.
	PersonalTokens pulumi.BoolOutput `pulumi:"personalTokens"`
}

// NewTokenSettings registers a new resource with the given unique name, arguments, and options.
func NewTokenSettings(ctx *pulumi.Context,
	name string, args *TokenSettingsArgs, opts ...pulumi.ResourceOption) (*TokenSettings, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NewTokenFormat == nil {
		return nil, errors.New("invalid value for required argument 'NewTokenFormat'")
	}
	if args.PersonalTokens == nil {
		return nil, errors.New("invalid value for required argument 'PersonalTokens'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TokenSettings
	err := ctx.RegisterResource("dynatrace:index/tokenSettings:TokenSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTokenSettings gets an existing TokenSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTokenSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TokenSettingsState, opts ...pulumi.ResourceOption) (*TokenSettings, error) {
	var resource TokenSettings
	err := ctx.ReadResource("dynatrace:index/tokenSettings:TokenSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TokenSettings resources.
type tokenSettingsState struct {
	// Check out this [blog post](http://www.dynatrace.com/blog/further-increased-security-of-your-api-tokens-by-automating-token-protection/) to find out more about the new Dynatrace API token format.
	NewTokenFormat *bool `pulumi:"newTokenFormat"`
	// Allow users of this environment to generate personal access tokens based on user permissions.
	// Note that existing personal access tokens will become unusable while this setting is disabled.
	PersonalTokens *bool `pulumi:"personalTokens"`
}

type TokenSettingsState struct {
	// Check out this [blog post](http://www.dynatrace.com/blog/further-increased-security-of-your-api-tokens-by-automating-token-protection/) to find out more about the new Dynatrace API token format.
	NewTokenFormat pulumi.BoolPtrInput
	// Allow users of this environment to generate personal access tokens based on user permissions.
	// Note that existing personal access tokens will become unusable while this setting is disabled.
	PersonalTokens pulumi.BoolPtrInput
}

func (TokenSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*tokenSettingsState)(nil)).Elem()
}

type tokenSettingsArgs struct {
	// Check out this [blog post](http://www.dynatrace.com/blog/further-increased-security-of-your-api-tokens-by-automating-token-protection/) to find out more about the new Dynatrace API token format.
	NewTokenFormat bool `pulumi:"newTokenFormat"`
	// Allow users of this environment to generate personal access tokens based on user permissions.
	// Note that existing personal access tokens will become unusable while this setting is disabled.
	PersonalTokens bool `pulumi:"personalTokens"`
}

// The set of arguments for constructing a TokenSettings resource.
type TokenSettingsArgs struct {
	// Check out this [blog post](http://www.dynatrace.com/blog/further-increased-security-of-your-api-tokens-by-automating-token-protection/) to find out more about the new Dynatrace API token format.
	NewTokenFormat pulumi.BoolInput
	// Allow users of this environment to generate personal access tokens based on user permissions.
	// Note that existing personal access tokens will become unusable while this setting is disabled.
	PersonalTokens pulumi.BoolInput
}

func (TokenSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tokenSettingsArgs)(nil)).Elem()
}

type TokenSettingsInput interface {
	pulumi.Input

	ToTokenSettingsOutput() TokenSettingsOutput
	ToTokenSettingsOutputWithContext(ctx context.Context) TokenSettingsOutput
}

func (*TokenSettings) ElementType() reflect.Type {
	return reflect.TypeOf((**TokenSettings)(nil)).Elem()
}

func (i *TokenSettings) ToTokenSettingsOutput() TokenSettingsOutput {
	return i.ToTokenSettingsOutputWithContext(context.Background())
}

func (i *TokenSettings) ToTokenSettingsOutputWithContext(ctx context.Context) TokenSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenSettingsOutput)
}

// TokenSettingsArrayInput is an input type that accepts TokenSettingsArray and TokenSettingsArrayOutput values.
// You can construct a concrete instance of `TokenSettingsArrayInput` via:
//
//	TokenSettingsArray{ TokenSettingsArgs{...} }
type TokenSettingsArrayInput interface {
	pulumi.Input

	ToTokenSettingsArrayOutput() TokenSettingsArrayOutput
	ToTokenSettingsArrayOutputWithContext(context.Context) TokenSettingsArrayOutput
}

type TokenSettingsArray []TokenSettingsInput

func (TokenSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TokenSettings)(nil)).Elem()
}

func (i TokenSettingsArray) ToTokenSettingsArrayOutput() TokenSettingsArrayOutput {
	return i.ToTokenSettingsArrayOutputWithContext(context.Background())
}

func (i TokenSettingsArray) ToTokenSettingsArrayOutputWithContext(ctx context.Context) TokenSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenSettingsArrayOutput)
}

// TokenSettingsMapInput is an input type that accepts TokenSettingsMap and TokenSettingsMapOutput values.
// You can construct a concrete instance of `TokenSettingsMapInput` via:
//
//	TokenSettingsMap{ "key": TokenSettingsArgs{...} }
type TokenSettingsMapInput interface {
	pulumi.Input

	ToTokenSettingsMapOutput() TokenSettingsMapOutput
	ToTokenSettingsMapOutputWithContext(context.Context) TokenSettingsMapOutput
}

type TokenSettingsMap map[string]TokenSettingsInput

func (TokenSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TokenSettings)(nil)).Elem()
}

func (i TokenSettingsMap) ToTokenSettingsMapOutput() TokenSettingsMapOutput {
	return i.ToTokenSettingsMapOutputWithContext(context.Background())
}

func (i TokenSettingsMap) ToTokenSettingsMapOutputWithContext(ctx context.Context) TokenSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenSettingsMapOutput)
}

type TokenSettingsOutput struct{ *pulumi.OutputState }

func (TokenSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TokenSettings)(nil)).Elem()
}

func (o TokenSettingsOutput) ToTokenSettingsOutput() TokenSettingsOutput {
	return o
}

func (o TokenSettingsOutput) ToTokenSettingsOutputWithContext(ctx context.Context) TokenSettingsOutput {
	return o
}

// Check out this [blog post](http://www.dynatrace.com/blog/further-increased-security-of-your-api-tokens-by-automating-token-protection/) to find out more about the new Dynatrace API token format.
func (o TokenSettingsOutput) NewTokenFormat() pulumi.BoolOutput {
	return o.ApplyT(func(v *TokenSettings) pulumi.BoolOutput { return v.NewTokenFormat }).(pulumi.BoolOutput)
}

// Allow users of this environment to generate personal access tokens based on user permissions.
// Note that existing personal access tokens will become unusable while this setting is disabled.
func (o TokenSettingsOutput) PersonalTokens() pulumi.BoolOutput {
	return o.ApplyT(func(v *TokenSettings) pulumi.BoolOutput { return v.PersonalTokens }).(pulumi.BoolOutput)
}

type TokenSettingsArrayOutput struct{ *pulumi.OutputState }

func (TokenSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TokenSettings)(nil)).Elem()
}

func (o TokenSettingsArrayOutput) ToTokenSettingsArrayOutput() TokenSettingsArrayOutput {
	return o
}

func (o TokenSettingsArrayOutput) ToTokenSettingsArrayOutputWithContext(ctx context.Context) TokenSettingsArrayOutput {
	return o
}

func (o TokenSettingsArrayOutput) Index(i pulumi.IntInput) TokenSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TokenSettings {
		return vs[0].([]*TokenSettings)[vs[1].(int)]
	}).(TokenSettingsOutput)
}

type TokenSettingsMapOutput struct{ *pulumi.OutputState }

func (TokenSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TokenSettings)(nil)).Elem()
}

func (o TokenSettingsMapOutput) ToTokenSettingsMapOutput() TokenSettingsMapOutput {
	return o
}

func (o TokenSettingsMapOutput) ToTokenSettingsMapOutputWithContext(ctx context.Context) TokenSettingsMapOutput {
	return o
}

func (o TokenSettingsMapOutput) MapIndex(k pulumi.StringInput) TokenSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TokenSettings {
		return vs[0].(map[string]*TokenSettings)[vs[1].(string)]
	}).(TokenSettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TokenSettingsInput)(nil)).Elem(), &TokenSettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*TokenSettingsArrayInput)(nil)).Elem(), TokenSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TokenSettingsMapInput)(nil)).Elem(), TokenSettingsMap{})
	pulumi.RegisterOutputType(TokenSettingsOutput{})
	pulumi.RegisterOutputType(TokenSettingsArrayOutput{})
	pulumi.RegisterOutputType(TokenSettingsMapOutput{})
}
