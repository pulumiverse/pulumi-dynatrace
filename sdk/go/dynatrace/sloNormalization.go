// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type SloNormalization struct {
	pulumi.CustomResourceState

	// When set to true, the error budget left will be shown in percent of the total error budget. For more details see [SLO normalization help](https://dt-url.net/slo-normalize-error-budget).
	Normalize pulumi.BoolOutput `pulumi:"normalize"`
}

// NewSloNormalization registers a new resource with the given unique name, arguments, and options.
func NewSloNormalization(ctx *pulumi.Context,
	name string, args *SloNormalizationArgs, opts ...pulumi.ResourceOption) (*SloNormalization, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Normalize == nil {
		return nil, errors.New("invalid value for required argument 'Normalize'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SloNormalization
	err := ctx.RegisterResource("dynatrace:index/sloNormalization:SloNormalization", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSloNormalization gets an existing SloNormalization resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSloNormalization(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SloNormalizationState, opts ...pulumi.ResourceOption) (*SloNormalization, error) {
	var resource SloNormalization
	err := ctx.ReadResource("dynatrace:index/sloNormalization:SloNormalization", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SloNormalization resources.
type sloNormalizationState struct {
	// When set to true, the error budget left will be shown in percent of the total error budget. For more details see [SLO normalization help](https://dt-url.net/slo-normalize-error-budget).
	Normalize *bool `pulumi:"normalize"`
}

type SloNormalizationState struct {
	// When set to true, the error budget left will be shown in percent of the total error budget. For more details see [SLO normalization help](https://dt-url.net/slo-normalize-error-budget).
	Normalize pulumi.BoolPtrInput
}

func (SloNormalizationState) ElementType() reflect.Type {
	return reflect.TypeOf((*sloNormalizationState)(nil)).Elem()
}

type sloNormalizationArgs struct {
	// When set to true, the error budget left will be shown in percent of the total error budget. For more details see [SLO normalization help](https://dt-url.net/slo-normalize-error-budget).
	Normalize bool `pulumi:"normalize"`
}

// The set of arguments for constructing a SloNormalization resource.
type SloNormalizationArgs struct {
	// When set to true, the error budget left will be shown in percent of the total error budget. For more details see [SLO normalization help](https://dt-url.net/slo-normalize-error-budget).
	Normalize pulumi.BoolInput
}

func (SloNormalizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sloNormalizationArgs)(nil)).Elem()
}

type SloNormalizationInput interface {
	pulumi.Input

	ToSloNormalizationOutput() SloNormalizationOutput
	ToSloNormalizationOutputWithContext(ctx context.Context) SloNormalizationOutput
}

func (*SloNormalization) ElementType() reflect.Type {
	return reflect.TypeOf((**SloNormalization)(nil)).Elem()
}

func (i *SloNormalization) ToSloNormalizationOutput() SloNormalizationOutput {
	return i.ToSloNormalizationOutputWithContext(context.Background())
}

func (i *SloNormalization) ToSloNormalizationOutputWithContext(ctx context.Context) SloNormalizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloNormalizationOutput)
}

// SloNormalizationArrayInput is an input type that accepts SloNormalizationArray and SloNormalizationArrayOutput values.
// You can construct a concrete instance of `SloNormalizationArrayInput` via:
//
//	SloNormalizationArray{ SloNormalizationArgs{...} }
type SloNormalizationArrayInput interface {
	pulumi.Input

	ToSloNormalizationArrayOutput() SloNormalizationArrayOutput
	ToSloNormalizationArrayOutputWithContext(context.Context) SloNormalizationArrayOutput
}

type SloNormalizationArray []SloNormalizationInput

func (SloNormalizationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SloNormalization)(nil)).Elem()
}

func (i SloNormalizationArray) ToSloNormalizationArrayOutput() SloNormalizationArrayOutput {
	return i.ToSloNormalizationArrayOutputWithContext(context.Background())
}

func (i SloNormalizationArray) ToSloNormalizationArrayOutputWithContext(ctx context.Context) SloNormalizationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloNormalizationArrayOutput)
}

// SloNormalizationMapInput is an input type that accepts SloNormalizationMap and SloNormalizationMapOutput values.
// You can construct a concrete instance of `SloNormalizationMapInput` via:
//
//	SloNormalizationMap{ "key": SloNormalizationArgs{...} }
type SloNormalizationMapInput interface {
	pulumi.Input

	ToSloNormalizationMapOutput() SloNormalizationMapOutput
	ToSloNormalizationMapOutputWithContext(context.Context) SloNormalizationMapOutput
}

type SloNormalizationMap map[string]SloNormalizationInput

func (SloNormalizationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SloNormalization)(nil)).Elem()
}

func (i SloNormalizationMap) ToSloNormalizationMapOutput() SloNormalizationMapOutput {
	return i.ToSloNormalizationMapOutputWithContext(context.Background())
}

func (i SloNormalizationMap) ToSloNormalizationMapOutputWithContext(ctx context.Context) SloNormalizationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloNormalizationMapOutput)
}

type SloNormalizationOutput struct{ *pulumi.OutputState }

func (SloNormalizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SloNormalization)(nil)).Elem()
}

func (o SloNormalizationOutput) ToSloNormalizationOutput() SloNormalizationOutput {
	return o
}

func (o SloNormalizationOutput) ToSloNormalizationOutputWithContext(ctx context.Context) SloNormalizationOutput {
	return o
}

// When set to true, the error budget left will be shown in percent of the total error budget. For more details see [SLO normalization help](https://dt-url.net/slo-normalize-error-budget).
func (o SloNormalizationOutput) Normalize() pulumi.BoolOutput {
	return o.ApplyT(func(v *SloNormalization) pulumi.BoolOutput { return v.Normalize }).(pulumi.BoolOutput)
}

type SloNormalizationArrayOutput struct{ *pulumi.OutputState }

func (SloNormalizationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SloNormalization)(nil)).Elem()
}

func (o SloNormalizationArrayOutput) ToSloNormalizationArrayOutput() SloNormalizationArrayOutput {
	return o
}

func (o SloNormalizationArrayOutput) ToSloNormalizationArrayOutputWithContext(ctx context.Context) SloNormalizationArrayOutput {
	return o
}

func (o SloNormalizationArrayOutput) Index(i pulumi.IntInput) SloNormalizationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SloNormalization {
		return vs[0].([]*SloNormalization)[vs[1].(int)]
	}).(SloNormalizationOutput)
}

type SloNormalizationMapOutput struct{ *pulumi.OutputState }

func (SloNormalizationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SloNormalization)(nil)).Elem()
}

func (o SloNormalizationMapOutput) ToSloNormalizationMapOutput() SloNormalizationMapOutput {
	return o
}

func (o SloNormalizationMapOutput) ToSloNormalizationMapOutputWithContext(ctx context.Context) SloNormalizationMapOutput {
	return o
}

func (o SloNormalizationMapOutput) MapIndex(k pulumi.StringInput) SloNormalizationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SloNormalization {
		return vs[0].(map[string]*SloNormalization)[vs[1].(string)]
	}).(SloNormalizationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SloNormalizationInput)(nil)).Elem(), &SloNormalization{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloNormalizationArrayInput)(nil)).Elem(), SloNormalizationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloNormalizationMapInput)(nil)).Elem(), SloNormalizationMap{})
	pulumi.RegisterOutputType(SloNormalizationOutput{})
	pulumi.RegisterOutputType(SloNormalizationArrayOutput{})
	pulumi.RegisterOutputType(SloNormalizationMapOutput{})
}
