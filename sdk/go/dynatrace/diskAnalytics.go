// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type DiskAnalytics struct {
	pulumi.CustomResourceState

	// The Disk Analytics feature requires an extension to be added to your environment. The Disk Analytics extension consumes custom metrics and [Davis data units](https://www.dynatrace.com/support/help/shortlink/metric-cost-calculation).
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The scope of this setting (HOST, HOST_GROUP)
	Scope pulumi.StringOutput `pulumi:"scope"`
}

// NewDiskAnalytics registers a new resource with the given unique name, arguments, and options.
func NewDiskAnalytics(ctx *pulumi.Context,
	name string, args *DiskAnalyticsArgs, opts ...pulumi.ResourceOption) (*DiskAnalytics, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Scope == nil {
		return nil, errors.New("invalid value for required argument 'Scope'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DiskAnalytics
	err := ctx.RegisterResource("dynatrace:index/diskAnalytics:DiskAnalytics", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDiskAnalytics gets an existing DiskAnalytics resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDiskAnalytics(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DiskAnalyticsState, opts ...pulumi.ResourceOption) (*DiskAnalytics, error) {
	var resource DiskAnalytics
	err := ctx.ReadResource("dynatrace:index/diskAnalytics:DiskAnalytics", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DiskAnalytics resources.
type diskAnalyticsState struct {
	// The Disk Analytics feature requires an extension to be added to your environment. The Disk Analytics extension consumes custom metrics and [Davis data units](https://www.dynatrace.com/support/help/shortlink/metric-cost-calculation).
	Enabled *bool `pulumi:"enabled"`
	// The scope of this setting (HOST, HOST_GROUP)
	Scope *string `pulumi:"scope"`
}

type DiskAnalyticsState struct {
	// The Disk Analytics feature requires an extension to be added to your environment. The Disk Analytics extension consumes custom metrics and [Davis data units](https://www.dynatrace.com/support/help/shortlink/metric-cost-calculation).
	Enabled pulumi.BoolPtrInput
	// The scope of this setting (HOST, HOST_GROUP)
	Scope pulumi.StringPtrInput
}

func (DiskAnalyticsState) ElementType() reflect.Type {
	return reflect.TypeOf((*diskAnalyticsState)(nil)).Elem()
}

type diskAnalyticsArgs struct {
	// The Disk Analytics feature requires an extension to be added to your environment. The Disk Analytics extension consumes custom metrics and [Davis data units](https://www.dynatrace.com/support/help/shortlink/metric-cost-calculation).
	Enabled bool `pulumi:"enabled"`
	// The scope of this setting (HOST, HOST_GROUP)
	Scope string `pulumi:"scope"`
}

// The set of arguments for constructing a DiskAnalytics resource.
type DiskAnalyticsArgs struct {
	// The Disk Analytics feature requires an extension to be added to your environment. The Disk Analytics extension consumes custom metrics and [Davis data units](https://www.dynatrace.com/support/help/shortlink/metric-cost-calculation).
	Enabled pulumi.BoolInput
	// The scope of this setting (HOST, HOST_GROUP)
	Scope pulumi.StringInput
}

func (DiskAnalyticsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*diskAnalyticsArgs)(nil)).Elem()
}

type DiskAnalyticsInput interface {
	pulumi.Input

	ToDiskAnalyticsOutput() DiskAnalyticsOutput
	ToDiskAnalyticsOutputWithContext(ctx context.Context) DiskAnalyticsOutput
}

func (*DiskAnalytics) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskAnalytics)(nil)).Elem()
}

func (i *DiskAnalytics) ToDiskAnalyticsOutput() DiskAnalyticsOutput {
	return i.ToDiskAnalyticsOutputWithContext(context.Background())
}

func (i *DiskAnalytics) ToDiskAnalyticsOutputWithContext(ctx context.Context) DiskAnalyticsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskAnalyticsOutput)
}

// DiskAnalyticsArrayInput is an input type that accepts DiskAnalyticsArray and DiskAnalyticsArrayOutput values.
// You can construct a concrete instance of `DiskAnalyticsArrayInput` via:
//
//	DiskAnalyticsArray{ DiskAnalyticsArgs{...} }
type DiskAnalyticsArrayInput interface {
	pulumi.Input

	ToDiskAnalyticsArrayOutput() DiskAnalyticsArrayOutput
	ToDiskAnalyticsArrayOutputWithContext(context.Context) DiskAnalyticsArrayOutput
}

type DiskAnalyticsArray []DiskAnalyticsInput

func (DiskAnalyticsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DiskAnalytics)(nil)).Elem()
}

func (i DiskAnalyticsArray) ToDiskAnalyticsArrayOutput() DiskAnalyticsArrayOutput {
	return i.ToDiskAnalyticsArrayOutputWithContext(context.Background())
}

func (i DiskAnalyticsArray) ToDiskAnalyticsArrayOutputWithContext(ctx context.Context) DiskAnalyticsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskAnalyticsArrayOutput)
}

// DiskAnalyticsMapInput is an input type that accepts DiskAnalyticsMap and DiskAnalyticsMapOutput values.
// You can construct a concrete instance of `DiskAnalyticsMapInput` via:
//
//	DiskAnalyticsMap{ "key": DiskAnalyticsArgs{...} }
type DiskAnalyticsMapInput interface {
	pulumi.Input

	ToDiskAnalyticsMapOutput() DiskAnalyticsMapOutput
	ToDiskAnalyticsMapOutputWithContext(context.Context) DiskAnalyticsMapOutput
}

type DiskAnalyticsMap map[string]DiskAnalyticsInput

func (DiskAnalyticsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DiskAnalytics)(nil)).Elem()
}

func (i DiskAnalyticsMap) ToDiskAnalyticsMapOutput() DiskAnalyticsMapOutput {
	return i.ToDiskAnalyticsMapOutputWithContext(context.Background())
}

func (i DiskAnalyticsMap) ToDiskAnalyticsMapOutputWithContext(ctx context.Context) DiskAnalyticsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskAnalyticsMapOutput)
}

type DiskAnalyticsOutput struct{ *pulumi.OutputState }

func (DiskAnalyticsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskAnalytics)(nil)).Elem()
}

func (o DiskAnalyticsOutput) ToDiskAnalyticsOutput() DiskAnalyticsOutput {
	return o
}

func (o DiskAnalyticsOutput) ToDiskAnalyticsOutputWithContext(ctx context.Context) DiskAnalyticsOutput {
	return o
}

// The Disk Analytics feature requires an extension to be added to your environment. The Disk Analytics extension consumes custom metrics and [Davis data units](https://www.dynatrace.com/support/help/shortlink/metric-cost-calculation).
func (o DiskAnalyticsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *DiskAnalytics) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The scope of this setting (HOST, HOST_GROUP)
func (o DiskAnalyticsOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v *DiskAnalytics) pulumi.StringOutput { return v.Scope }).(pulumi.StringOutput)
}

type DiskAnalyticsArrayOutput struct{ *pulumi.OutputState }

func (DiskAnalyticsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DiskAnalytics)(nil)).Elem()
}

func (o DiskAnalyticsArrayOutput) ToDiskAnalyticsArrayOutput() DiskAnalyticsArrayOutput {
	return o
}

func (o DiskAnalyticsArrayOutput) ToDiskAnalyticsArrayOutputWithContext(ctx context.Context) DiskAnalyticsArrayOutput {
	return o
}

func (o DiskAnalyticsArrayOutput) Index(i pulumi.IntInput) DiskAnalyticsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DiskAnalytics {
		return vs[0].([]*DiskAnalytics)[vs[1].(int)]
	}).(DiskAnalyticsOutput)
}

type DiskAnalyticsMapOutput struct{ *pulumi.OutputState }

func (DiskAnalyticsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DiskAnalytics)(nil)).Elem()
}

func (o DiskAnalyticsMapOutput) ToDiskAnalyticsMapOutput() DiskAnalyticsMapOutput {
	return o
}

func (o DiskAnalyticsMapOutput) ToDiskAnalyticsMapOutputWithContext(ctx context.Context) DiskAnalyticsMapOutput {
	return o
}

func (o DiskAnalyticsMapOutput) MapIndex(k pulumi.StringInput) DiskAnalyticsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DiskAnalytics {
		return vs[0].(map[string]*DiskAnalytics)[vs[1].(string)]
	}).(DiskAnalyticsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DiskAnalyticsInput)(nil)).Elem(), &DiskAnalytics{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiskAnalyticsArrayInput)(nil)).Elem(), DiskAnalyticsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiskAnalyticsMapInput)(nil)).Elem(), DiskAnalyticsMap{})
	pulumi.RegisterOutputType(DiskAnalyticsOutput{})
	pulumi.RegisterOutputType(DiskAnalyticsArrayOutput{})
	pulumi.RegisterOutputType(DiskAnalyticsMapOutput{})
}
