// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type BrowserMonitorOutage struct {
	pulumi.CustomResourceState

	// (Field has overlap with `BrowserMonitor`) Alert if all locations are unable to access my web application
	GlobalConsecutiveOutageCountThreshold pulumi.IntPtrOutput `pulumi:"globalConsecutiveOutageCountThreshold"`
	// (Field has overlap with `BrowserMonitor`) Generate a problem and send an alert when the monitor is unavailable at all configured locations.
	GlobalOutages pulumi.BoolOutput `pulumi:"globalOutages"`
	// (Field has overlap with `BrowserMonitor`) are unable to access my web application
	LocalConsecutiveOutageCountThreshold pulumi.IntPtrOutput `pulumi:"localConsecutiveOutageCountThreshold"`
	// (Field has overlap with `BrowserMonitor`) Alert if at least
	LocalLocationOutageCountThreshold pulumi.IntPtrOutput `pulumi:"localLocationOutageCountThreshold"`
	// (Field has overlap with `BrowserMonitor`) Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
	LocalOutages pulumi.BoolOutput `pulumi:"localOutages"`
	// (Field has overlap with `BrowserMonitor`) When enabled, which is the default, failing monitor executions are retried immediately one time to avoid false positives and only the second result is used. When disabled, we use the first result right away.
	// Requires ActiveGate version 1.207+ for private locations.
	RetryOnError pulumi.BoolOutput `pulumi:"retryOnError"`
	// The scope of this setting (SYNTHETIC_TEST). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
}

// NewBrowserMonitorOutage registers a new resource with the given unique name, arguments, and options.
func NewBrowserMonitorOutage(ctx *pulumi.Context,
	name string, args *BrowserMonitorOutageArgs, opts ...pulumi.ResourceOption) (*BrowserMonitorOutage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GlobalOutages == nil {
		return nil, errors.New("invalid value for required argument 'GlobalOutages'")
	}
	if args.LocalOutages == nil {
		return nil, errors.New("invalid value for required argument 'LocalOutages'")
	}
	if args.RetryOnError == nil {
		return nil, errors.New("invalid value for required argument 'RetryOnError'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BrowserMonitorOutage
	err := ctx.RegisterResource("dynatrace:index/browserMonitorOutage:BrowserMonitorOutage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBrowserMonitorOutage gets an existing BrowserMonitorOutage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBrowserMonitorOutage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BrowserMonitorOutageState, opts ...pulumi.ResourceOption) (*BrowserMonitorOutage, error) {
	var resource BrowserMonitorOutage
	err := ctx.ReadResource("dynatrace:index/browserMonitorOutage:BrowserMonitorOutage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BrowserMonitorOutage resources.
type browserMonitorOutageState struct {
	// (Field has overlap with `BrowserMonitor`) Alert if all locations are unable to access my web application
	GlobalConsecutiveOutageCountThreshold *int `pulumi:"globalConsecutiveOutageCountThreshold"`
	// (Field has overlap with `BrowserMonitor`) Generate a problem and send an alert when the monitor is unavailable at all configured locations.
	GlobalOutages *bool `pulumi:"globalOutages"`
	// (Field has overlap with `BrowserMonitor`) are unable to access my web application
	LocalConsecutiveOutageCountThreshold *int `pulumi:"localConsecutiveOutageCountThreshold"`
	// (Field has overlap with `BrowserMonitor`) Alert if at least
	LocalLocationOutageCountThreshold *int `pulumi:"localLocationOutageCountThreshold"`
	// (Field has overlap with `BrowserMonitor`) Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
	LocalOutages *bool `pulumi:"localOutages"`
	// (Field has overlap with `BrowserMonitor`) When enabled, which is the default, failing monitor executions are retried immediately one time to avoid false positives and only the second result is used. When disabled, we use the first result right away.
	// Requires ActiveGate version 1.207+ for private locations.
	RetryOnError *bool `pulumi:"retryOnError"`
	// The scope of this setting (SYNTHETIC_TEST). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
}

type BrowserMonitorOutageState struct {
	// (Field has overlap with `BrowserMonitor`) Alert if all locations are unable to access my web application
	GlobalConsecutiveOutageCountThreshold pulumi.IntPtrInput
	// (Field has overlap with `BrowserMonitor`) Generate a problem and send an alert when the monitor is unavailable at all configured locations.
	GlobalOutages pulumi.BoolPtrInput
	// (Field has overlap with `BrowserMonitor`) are unable to access my web application
	LocalConsecutiveOutageCountThreshold pulumi.IntPtrInput
	// (Field has overlap with `BrowserMonitor`) Alert if at least
	LocalLocationOutageCountThreshold pulumi.IntPtrInput
	// (Field has overlap with `BrowserMonitor`) Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
	LocalOutages pulumi.BoolPtrInput
	// (Field has overlap with `BrowserMonitor`) When enabled, which is the default, failing monitor executions are retried immediately one time to avoid false positives and only the second result is used. When disabled, we use the first result right away.
	// Requires ActiveGate version 1.207+ for private locations.
	RetryOnError pulumi.BoolPtrInput
	// The scope of this setting (SYNTHETIC_TEST). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
}

func (BrowserMonitorOutageState) ElementType() reflect.Type {
	return reflect.TypeOf((*browserMonitorOutageState)(nil)).Elem()
}

type browserMonitorOutageArgs struct {
	// (Field has overlap with `BrowserMonitor`) Alert if all locations are unable to access my web application
	GlobalConsecutiveOutageCountThreshold *int `pulumi:"globalConsecutiveOutageCountThreshold"`
	// (Field has overlap with `BrowserMonitor`) Generate a problem and send an alert when the monitor is unavailable at all configured locations.
	GlobalOutages bool `pulumi:"globalOutages"`
	// (Field has overlap with `BrowserMonitor`) are unable to access my web application
	LocalConsecutiveOutageCountThreshold *int `pulumi:"localConsecutiveOutageCountThreshold"`
	// (Field has overlap with `BrowserMonitor`) Alert if at least
	LocalLocationOutageCountThreshold *int `pulumi:"localLocationOutageCountThreshold"`
	// (Field has overlap with `BrowserMonitor`) Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
	LocalOutages bool `pulumi:"localOutages"`
	// (Field has overlap with `BrowserMonitor`) When enabled, which is the default, failing monitor executions are retried immediately one time to avoid false positives and only the second result is used. When disabled, we use the first result right away.
	// Requires ActiveGate version 1.207+ for private locations.
	RetryOnError bool `pulumi:"retryOnError"`
	// The scope of this setting (SYNTHETIC_TEST). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
}

// The set of arguments for constructing a BrowserMonitorOutage resource.
type BrowserMonitorOutageArgs struct {
	// (Field has overlap with `BrowserMonitor`) Alert if all locations are unable to access my web application
	GlobalConsecutiveOutageCountThreshold pulumi.IntPtrInput
	// (Field has overlap with `BrowserMonitor`) Generate a problem and send an alert when the monitor is unavailable at all configured locations.
	GlobalOutages pulumi.BoolInput
	// (Field has overlap with `BrowserMonitor`) are unable to access my web application
	LocalConsecutiveOutageCountThreshold pulumi.IntPtrInput
	// (Field has overlap with `BrowserMonitor`) Alert if at least
	LocalLocationOutageCountThreshold pulumi.IntPtrInput
	// (Field has overlap with `BrowserMonitor`) Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
	LocalOutages pulumi.BoolInput
	// (Field has overlap with `BrowserMonitor`) When enabled, which is the default, failing monitor executions are retried immediately one time to avoid false positives and only the second result is used. When disabled, we use the first result right away.
	// Requires ActiveGate version 1.207+ for private locations.
	RetryOnError pulumi.BoolInput
	// The scope of this setting (SYNTHETIC_TEST). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
}

func (BrowserMonitorOutageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*browserMonitorOutageArgs)(nil)).Elem()
}

type BrowserMonitorOutageInput interface {
	pulumi.Input

	ToBrowserMonitorOutageOutput() BrowserMonitorOutageOutput
	ToBrowserMonitorOutageOutputWithContext(ctx context.Context) BrowserMonitorOutageOutput
}

func (*BrowserMonitorOutage) ElementType() reflect.Type {
	return reflect.TypeOf((**BrowserMonitorOutage)(nil)).Elem()
}

func (i *BrowserMonitorOutage) ToBrowserMonitorOutageOutput() BrowserMonitorOutageOutput {
	return i.ToBrowserMonitorOutageOutputWithContext(context.Background())
}

func (i *BrowserMonitorOutage) ToBrowserMonitorOutageOutputWithContext(ctx context.Context) BrowserMonitorOutageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrowserMonitorOutageOutput)
}

// BrowserMonitorOutageArrayInput is an input type that accepts BrowserMonitorOutageArray and BrowserMonitorOutageArrayOutput values.
// You can construct a concrete instance of `BrowserMonitorOutageArrayInput` via:
//
//	BrowserMonitorOutageArray{ BrowserMonitorOutageArgs{...} }
type BrowserMonitorOutageArrayInput interface {
	pulumi.Input

	ToBrowserMonitorOutageArrayOutput() BrowserMonitorOutageArrayOutput
	ToBrowserMonitorOutageArrayOutputWithContext(context.Context) BrowserMonitorOutageArrayOutput
}

type BrowserMonitorOutageArray []BrowserMonitorOutageInput

func (BrowserMonitorOutageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BrowserMonitorOutage)(nil)).Elem()
}

func (i BrowserMonitorOutageArray) ToBrowserMonitorOutageArrayOutput() BrowserMonitorOutageArrayOutput {
	return i.ToBrowserMonitorOutageArrayOutputWithContext(context.Background())
}

func (i BrowserMonitorOutageArray) ToBrowserMonitorOutageArrayOutputWithContext(ctx context.Context) BrowserMonitorOutageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrowserMonitorOutageArrayOutput)
}

// BrowserMonitorOutageMapInput is an input type that accepts BrowserMonitorOutageMap and BrowserMonitorOutageMapOutput values.
// You can construct a concrete instance of `BrowserMonitorOutageMapInput` via:
//
//	BrowserMonitorOutageMap{ "key": BrowserMonitorOutageArgs{...} }
type BrowserMonitorOutageMapInput interface {
	pulumi.Input

	ToBrowserMonitorOutageMapOutput() BrowserMonitorOutageMapOutput
	ToBrowserMonitorOutageMapOutputWithContext(context.Context) BrowserMonitorOutageMapOutput
}

type BrowserMonitorOutageMap map[string]BrowserMonitorOutageInput

func (BrowserMonitorOutageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BrowserMonitorOutage)(nil)).Elem()
}

func (i BrowserMonitorOutageMap) ToBrowserMonitorOutageMapOutput() BrowserMonitorOutageMapOutput {
	return i.ToBrowserMonitorOutageMapOutputWithContext(context.Background())
}

func (i BrowserMonitorOutageMap) ToBrowserMonitorOutageMapOutputWithContext(ctx context.Context) BrowserMonitorOutageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrowserMonitorOutageMapOutput)
}

type BrowserMonitorOutageOutput struct{ *pulumi.OutputState }

func (BrowserMonitorOutageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrowserMonitorOutage)(nil)).Elem()
}

func (o BrowserMonitorOutageOutput) ToBrowserMonitorOutageOutput() BrowserMonitorOutageOutput {
	return o
}

func (o BrowserMonitorOutageOutput) ToBrowserMonitorOutageOutputWithContext(ctx context.Context) BrowserMonitorOutageOutput {
	return o
}

// (Field has overlap with `BrowserMonitor`) Alert if all locations are unable to access my web application
func (o BrowserMonitorOutageOutput) GlobalConsecutiveOutageCountThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BrowserMonitorOutage) pulumi.IntPtrOutput { return v.GlobalConsecutiveOutageCountThreshold }).(pulumi.IntPtrOutput)
}

// (Field has overlap with `BrowserMonitor`) Generate a problem and send an alert when the monitor is unavailable at all configured locations.
func (o BrowserMonitorOutageOutput) GlobalOutages() pulumi.BoolOutput {
	return o.ApplyT(func(v *BrowserMonitorOutage) pulumi.BoolOutput { return v.GlobalOutages }).(pulumi.BoolOutput)
}

// (Field has overlap with `BrowserMonitor`) are unable to access my web application
func (o BrowserMonitorOutageOutput) LocalConsecutiveOutageCountThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BrowserMonitorOutage) pulumi.IntPtrOutput { return v.LocalConsecutiveOutageCountThreshold }).(pulumi.IntPtrOutput)
}

// (Field has overlap with `BrowserMonitor`) Alert if at least
func (o BrowserMonitorOutageOutput) LocalLocationOutageCountThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BrowserMonitorOutage) pulumi.IntPtrOutput { return v.LocalLocationOutageCountThreshold }).(pulumi.IntPtrOutput)
}

// (Field has overlap with `BrowserMonitor`) Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
func (o BrowserMonitorOutageOutput) LocalOutages() pulumi.BoolOutput {
	return o.ApplyT(func(v *BrowserMonitorOutage) pulumi.BoolOutput { return v.LocalOutages }).(pulumi.BoolOutput)
}

// (Field has overlap with `BrowserMonitor`) When enabled, which is the default, failing monitor executions are retried immediately one time to avoid false positives and only the second result is used. When disabled, we use the first result right away.
// Requires ActiveGate version 1.207+ for private locations.
func (o BrowserMonitorOutageOutput) RetryOnError() pulumi.BoolOutput {
	return o.ApplyT(func(v *BrowserMonitorOutage) pulumi.BoolOutput { return v.RetryOnError }).(pulumi.BoolOutput)
}

// The scope of this setting (SYNTHETIC_TEST). Omit this property if you want to cover the whole environment.
func (o BrowserMonitorOutageOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrowserMonitorOutage) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

type BrowserMonitorOutageArrayOutput struct{ *pulumi.OutputState }

func (BrowserMonitorOutageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BrowserMonitorOutage)(nil)).Elem()
}

func (o BrowserMonitorOutageArrayOutput) ToBrowserMonitorOutageArrayOutput() BrowserMonitorOutageArrayOutput {
	return o
}

func (o BrowserMonitorOutageArrayOutput) ToBrowserMonitorOutageArrayOutputWithContext(ctx context.Context) BrowserMonitorOutageArrayOutput {
	return o
}

func (o BrowserMonitorOutageArrayOutput) Index(i pulumi.IntInput) BrowserMonitorOutageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BrowserMonitorOutage {
		return vs[0].([]*BrowserMonitorOutage)[vs[1].(int)]
	}).(BrowserMonitorOutageOutput)
}

type BrowserMonitorOutageMapOutput struct{ *pulumi.OutputState }

func (BrowserMonitorOutageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BrowserMonitorOutage)(nil)).Elem()
}

func (o BrowserMonitorOutageMapOutput) ToBrowserMonitorOutageMapOutput() BrowserMonitorOutageMapOutput {
	return o
}

func (o BrowserMonitorOutageMapOutput) ToBrowserMonitorOutageMapOutputWithContext(ctx context.Context) BrowserMonitorOutageMapOutput {
	return o
}

func (o BrowserMonitorOutageMapOutput) MapIndex(k pulumi.StringInput) BrowserMonitorOutageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BrowserMonitorOutage {
		return vs[0].(map[string]*BrowserMonitorOutage)[vs[1].(string)]
	}).(BrowserMonitorOutageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BrowserMonitorOutageInput)(nil)).Elem(), &BrowserMonitorOutage{})
	pulumi.RegisterInputType(reflect.TypeOf((*BrowserMonitorOutageArrayInput)(nil)).Elem(), BrowserMonitorOutageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BrowserMonitorOutageMapInput)(nil)).Elem(), BrowserMonitorOutageMap{})
	pulumi.RegisterOutputType(BrowserMonitorOutageOutput{})
	pulumi.RegisterOutputType(BrowserMonitorOutageArrayOutput{})
	pulumi.RegisterOutputType(BrowserMonitorOutageMapOutput{})
}
