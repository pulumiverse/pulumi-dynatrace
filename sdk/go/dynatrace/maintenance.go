// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type Maintenance struct {
	pulumi.CustomResourceState

	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// ## Filters
	// Add filters to limit the scope of maintenance to only select matching entities. If no filter is defined, the maintenance window is valid for the whole environment. Each filter is evaluated separately (**OR**).
	Filters MaintenanceFiltersPtrOutput `pulumi:"filters"`
	// The general properties of the maintenance window
	GeneralProperties MaintenanceGeneralPropertiesOutput `pulumi:"generalProperties"`
	// The ID of this setting when referred to by the Config REST API V1
	LegacyId pulumi.StringOutput `pulumi:"legacyId"`
	// The schedule of the maintenance window
	Schedule MaintenanceScheduleOutput `pulumi:"schedule"`
}

// NewMaintenance registers a new resource with the given unique name, arguments, and options.
func NewMaintenance(ctx *pulumi.Context,
	name string, args *MaintenanceArgs, opts ...pulumi.ResourceOption) (*Maintenance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.GeneralProperties == nil {
		return nil, errors.New("invalid value for required argument 'GeneralProperties'")
	}
	if args.Schedule == nil {
		return nil, errors.New("invalid value for required argument 'Schedule'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Maintenance
	err := ctx.RegisterResource("dynatrace:index/maintenance:Maintenance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMaintenance gets an existing Maintenance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMaintenance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MaintenanceState, opts ...pulumi.ResourceOption) (*Maintenance, error) {
	var resource Maintenance
	err := ctx.ReadResource("dynatrace:index/maintenance:Maintenance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Maintenance resources.
type maintenanceState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// ## Filters
	// Add filters to limit the scope of maintenance to only select matching entities. If no filter is defined, the maintenance window is valid for the whole environment. Each filter is evaluated separately (**OR**).
	Filters *MaintenanceFilters `pulumi:"filters"`
	// The general properties of the maintenance window
	GeneralProperties *MaintenanceGeneralProperties `pulumi:"generalProperties"`
	// The ID of this setting when referred to by the Config REST API V1
	LegacyId *string `pulumi:"legacyId"`
	// The schedule of the maintenance window
	Schedule *MaintenanceSchedule `pulumi:"schedule"`
}

type MaintenanceState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// ## Filters
	// Add filters to limit the scope of maintenance to only select matching entities. If no filter is defined, the maintenance window is valid for the whole environment. Each filter is evaluated separately (**OR**).
	Filters MaintenanceFiltersPtrInput
	// The general properties of the maintenance window
	GeneralProperties MaintenanceGeneralPropertiesPtrInput
	// The ID of this setting when referred to by the Config REST API V1
	LegacyId pulumi.StringPtrInput
	// The schedule of the maintenance window
	Schedule MaintenanceSchedulePtrInput
}

func (MaintenanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*maintenanceState)(nil)).Elem()
}

type maintenanceArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// ## Filters
	// Add filters to limit the scope of maintenance to only select matching entities. If no filter is defined, the maintenance window is valid for the whole environment. Each filter is evaluated separately (**OR**).
	Filters *MaintenanceFilters `pulumi:"filters"`
	// The general properties of the maintenance window
	GeneralProperties MaintenanceGeneralProperties `pulumi:"generalProperties"`
	// The ID of this setting when referred to by the Config REST API V1
	LegacyId *string `pulumi:"legacyId"`
	// The schedule of the maintenance window
	Schedule MaintenanceSchedule `pulumi:"schedule"`
}

// The set of arguments for constructing a Maintenance resource.
type MaintenanceArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// ## Filters
	// Add filters to limit the scope of maintenance to only select matching entities. If no filter is defined, the maintenance window is valid for the whole environment. Each filter is evaluated separately (**OR**).
	Filters MaintenanceFiltersPtrInput
	// The general properties of the maintenance window
	GeneralProperties MaintenanceGeneralPropertiesInput
	// The ID of this setting when referred to by the Config REST API V1
	LegacyId pulumi.StringPtrInput
	// The schedule of the maintenance window
	Schedule MaintenanceScheduleInput
}

func (MaintenanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*maintenanceArgs)(nil)).Elem()
}

type MaintenanceInput interface {
	pulumi.Input

	ToMaintenanceOutput() MaintenanceOutput
	ToMaintenanceOutputWithContext(ctx context.Context) MaintenanceOutput
}

func (*Maintenance) ElementType() reflect.Type {
	return reflect.TypeOf((**Maintenance)(nil)).Elem()
}

func (i *Maintenance) ToMaintenanceOutput() MaintenanceOutput {
	return i.ToMaintenanceOutputWithContext(context.Background())
}

func (i *Maintenance) ToMaintenanceOutputWithContext(ctx context.Context) MaintenanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceOutput)
}

// MaintenanceArrayInput is an input type that accepts MaintenanceArray and MaintenanceArrayOutput values.
// You can construct a concrete instance of `MaintenanceArrayInput` via:
//
//	MaintenanceArray{ MaintenanceArgs{...} }
type MaintenanceArrayInput interface {
	pulumi.Input

	ToMaintenanceArrayOutput() MaintenanceArrayOutput
	ToMaintenanceArrayOutputWithContext(context.Context) MaintenanceArrayOutput
}

type MaintenanceArray []MaintenanceInput

func (MaintenanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Maintenance)(nil)).Elem()
}

func (i MaintenanceArray) ToMaintenanceArrayOutput() MaintenanceArrayOutput {
	return i.ToMaintenanceArrayOutputWithContext(context.Background())
}

func (i MaintenanceArray) ToMaintenanceArrayOutputWithContext(ctx context.Context) MaintenanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceArrayOutput)
}

// MaintenanceMapInput is an input type that accepts MaintenanceMap and MaintenanceMapOutput values.
// You can construct a concrete instance of `MaintenanceMapInput` via:
//
//	MaintenanceMap{ "key": MaintenanceArgs{...} }
type MaintenanceMapInput interface {
	pulumi.Input

	ToMaintenanceMapOutput() MaintenanceMapOutput
	ToMaintenanceMapOutputWithContext(context.Context) MaintenanceMapOutput
}

type MaintenanceMap map[string]MaintenanceInput

func (MaintenanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Maintenance)(nil)).Elem()
}

func (i MaintenanceMap) ToMaintenanceMapOutput() MaintenanceMapOutput {
	return i.ToMaintenanceMapOutputWithContext(context.Background())
}

func (i MaintenanceMap) ToMaintenanceMapOutputWithContext(ctx context.Context) MaintenanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceMapOutput)
}

type MaintenanceOutput struct{ *pulumi.OutputState }

func (MaintenanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Maintenance)(nil)).Elem()
}

func (o MaintenanceOutput) ToMaintenanceOutput() MaintenanceOutput {
	return o
}

func (o MaintenanceOutput) ToMaintenanceOutputWithContext(ctx context.Context) MaintenanceOutput {
	return o
}

// This setting is enabled (`true`) or disabled (`false`)
func (o MaintenanceOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Maintenance) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// ## Filters
// Add filters to limit the scope of maintenance to only select matching entities. If no filter is defined, the maintenance window is valid for the whole environment. Each filter is evaluated separately (**OR**).
func (o MaintenanceOutput) Filters() MaintenanceFiltersPtrOutput {
	return o.ApplyT(func(v *Maintenance) MaintenanceFiltersPtrOutput { return v.Filters }).(MaintenanceFiltersPtrOutput)
}

// The general properties of the maintenance window
func (o MaintenanceOutput) GeneralProperties() MaintenanceGeneralPropertiesOutput {
	return o.ApplyT(func(v *Maintenance) MaintenanceGeneralPropertiesOutput { return v.GeneralProperties }).(MaintenanceGeneralPropertiesOutput)
}

// The ID of this setting when referred to by the Config REST API V1
func (o MaintenanceOutput) LegacyId() pulumi.StringOutput {
	return o.ApplyT(func(v *Maintenance) pulumi.StringOutput { return v.LegacyId }).(pulumi.StringOutput)
}

// The schedule of the maintenance window
func (o MaintenanceOutput) Schedule() MaintenanceScheduleOutput {
	return o.ApplyT(func(v *Maintenance) MaintenanceScheduleOutput { return v.Schedule }).(MaintenanceScheduleOutput)
}

type MaintenanceArrayOutput struct{ *pulumi.OutputState }

func (MaintenanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Maintenance)(nil)).Elem()
}

func (o MaintenanceArrayOutput) ToMaintenanceArrayOutput() MaintenanceArrayOutput {
	return o
}

func (o MaintenanceArrayOutput) ToMaintenanceArrayOutputWithContext(ctx context.Context) MaintenanceArrayOutput {
	return o
}

func (o MaintenanceArrayOutput) Index(i pulumi.IntInput) MaintenanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Maintenance {
		return vs[0].([]*Maintenance)[vs[1].(int)]
	}).(MaintenanceOutput)
}

type MaintenanceMapOutput struct{ *pulumi.OutputState }

func (MaintenanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Maintenance)(nil)).Elem()
}

func (o MaintenanceMapOutput) ToMaintenanceMapOutput() MaintenanceMapOutput {
	return o
}

func (o MaintenanceMapOutput) ToMaintenanceMapOutputWithContext(ctx context.Context) MaintenanceMapOutput {
	return o
}

func (o MaintenanceMapOutput) MapIndex(k pulumi.StringInput) MaintenanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Maintenance {
		return vs[0].(map[string]*Maintenance)[vs[1].(string)]
	}).(MaintenanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenanceInput)(nil)).Elem(), &Maintenance{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenanceArrayInput)(nil)).Elem(), MaintenanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenanceMapInput)(nil)).Elem(), MaintenanceMap{})
	pulumi.RegisterOutputType(MaintenanceOutput{})
	pulumi.RegisterOutputType(MaintenanceArrayOutput{})
	pulumi.RegisterOutputType(MaintenanceMapOutput{})
}
