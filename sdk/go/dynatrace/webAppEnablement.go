// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type WebAppEnablement struct {
	pulumi.CustomResourceState

	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ApplicationId pulumi.StringPtrOutput `pulumi:"applicationId"`
	// Experience Analytics
	ExperienceAnalytics WebAppEnablementExperienceAnalyticsPtrOutput `pulumi:"experienceAnalytics"`
	// Capture and analyze all user actions within your application. Enable [Real User Monitoring (RUM)](https://dt-url.net/1n2b0prq) to monitor and improve your application's performance, identify errors, and gain insight into your user's behavior and experience.
	Rum WebAppEnablementRumOutput `pulumi:"rum"`
	// [Session Replay](https://dt-url.net/session-replay) captures all user interactions within your application and replays them in a movie-like experience while providing [best-in-class security and data protection](https://dt-url.net/b303zxj).
	SessionReplay WebAppEnablementSessionReplayOutput `pulumi:"sessionReplay"`
}

// NewWebAppEnablement registers a new resource with the given unique name, arguments, and options.
func NewWebAppEnablement(ctx *pulumi.Context,
	name string, args *WebAppEnablementArgs, opts ...pulumi.ResourceOption) (*WebAppEnablement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Rum == nil {
		return nil, errors.New("invalid value for required argument 'Rum'")
	}
	if args.SessionReplay == nil {
		return nil, errors.New("invalid value for required argument 'SessionReplay'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WebAppEnablement
	err := ctx.RegisterResource("dynatrace:index/webAppEnablement:WebAppEnablement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebAppEnablement gets an existing WebAppEnablement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebAppEnablement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebAppEnablementState, opts ...pulumi.ResourceOption) (*WebAppEnablement, error) {
	var resource WebAppEnablement
	err := ctx.ReadResource("dynatrace:index/webAppEnablement:WebAppEnablement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WebAppEnablement resources.
type webAppEnablementState struct {
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ApplicationId *string `pulumi:"applicationId"`
	// Experience Analytics
	ExperienceAnalytics *WebAppEnablementExperienceAnalytics `pulumi:"experienceAnalytics"`
	// Capture and analyze all user actions within your application. Enable [Real User Monitoring (RUM)](https://dt-url.net/1n2b0prq) to monitor and improve your application's performance, identify errors, and gain insight into your user's behavior and experience.
	Rum *WebAppEnablementRum `pulumi:"rum"`
	// [Session Replay](https://dt-url.net/session-replay) captures all user interactions within your application and replays them in a movie-like experience while providing [best-in-class security and data protection](https://dt-url.net/b303zxj).
	SessionReplay *WebAppEnablementSessionReplay `pulumi:"sessionReplay"`
}

type WebAppEnablementState struct {
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ApplicationId pulumi.StringPtrInput
	// Experience Analytics
	ExperienceAnalytics WebAppEnablementExperienceAnalyticsPtrInput
	// Capture and analyze all user actions within your application. Enable [Real User Monitoring (RUM)](https://dt-url.net/1n2b0prq) to monitor and improve your application's performance, identify errors, and gain insight into your user's behavior and experience.
	Rum WebAppEnablementRumPtrInput
	// [Session Replay](https://dt-url.net/session-replay) captures all user interactions within your application and replays them in a movie-like experience while providing [best-in-class security and data protection](https://dt-url.net/b303zxj).
	SessionReplay WebAppEnablementSessionReplayPtrInput
}

func (WebAppEnablementState) ElementType() reflect.Type {
	return reflect.TypeOf((*webAppEnablementState)(nil)).Elem()
}

type webAppEnablementArgs struct {
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ApplicationId *string `pulumi:"applicationId"`
	// Experience Analytics
	ExperienceAnalytics *WebAppEnablementExperienceAnalytics `pulumi:"experienceAnalytics"`
	// Capture and analyze all user actions within your application. Enable [Real User Monitoring (RUM)](https://dt-url.net/1n2b0prq) to monitor and improve your application's performance, identify errors, and gain insight into your user's behavior and experience.
	Rum WebAppEnablementRum `pulumi:"rum"`
	// [Session Replay](https://dt-url.net/session-replay) captures all user interactions within your application and replays them in a movie-like experience while providing [best-in-class security and data protection](https://dt-url.net/b303zxj).
	SessionReplay WebAppEnablementSessionReplay `pulumi:"sessionReplay"`
}

// The set of arguments for constructing a WebAppEnablement resource.
type WebAppEnablementArgs struct {
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ApplicationId pulumi.StringPtrInput
	// Experience Analytics
	ExperienceAnalytics WebAppEnablementExperienceAnalyticsPtrInput
	// Capture and analyze all user actions within your application. Enable [Real User Monitoring (RUM)](https://dt-url.net/1n2b0prq) to monitor and improve your application's performance, identify errors, and gain insight into your user's behavior and experience.
	Rum WebAppEnablementRumInput
	// [Session Replay](https://dt-url.net/session-replay) captures all user interactions within your application and replays them in a movie-like experience while providing [best-in-class security and data protection](https://dt-url.net/b303zxj).
	SessionReplay WebAppEnablementSessionReplayInput
}

func (WebAppEnablementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webAppEnablementArgs)(nil)).Elem()
}

type WebAppEnablementInput interface {
	pulumi.Input

	ToWebAppEnablementOutput() WebAppEnablementOutput
	ToWebAppEnablementOutputWithContext(ctx context.Context) WebAppEnablementOutput
}

func (*WebAppEnablement) ElementType() reflect.Type {
	return reflect.TypeOf((**WebAppEnablement)(nil)).Elem()
}

func (i *WebAppEnablement) ToWebAppEnablementOutput() WebAppEnablementOutput {
	return i.ToWebAppEnablementOutputWithContext(context.Background())
}

func (i *WebAppEnablement) ToWebAppEnablementOutputWithContext(ctx context.Context) WebAppEnablementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAppEnablementOutput)
}

// WebAppEnablementArrayInput is an input type that accepts WebAppEnablementArray and WebAppEnablementArrayOutput values.
// You can construct a concrete instance of `WebAppEnablementArrayInput` via:
//
//	WebAppEnablementArray{ WebAppEnablementArgs{...} }
type WebAppEnablementArrayInput interface {
	pulumi.Input

	ToWebAppEnablementArrayOutput() WebAppEnablementArrayOutput
	ToWebAppEnablementArrayOutputWithContext(context.Context) WebAppEnablementArrayOutput
}

type WebAppEnablementArray []WebAppEnablementInput

func (WebAppEnablementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebAppEnablement)(nil)).Elem()
}

func (i WebAppEnablementArray) ToWebAppEnablementArrayOutput() WebAppEnablementArrayOutput {
	return i.ToWebAppEnablementArrayOutputWithContext(context.Background())
}

func (i WebAppEnablementArray) ToWebAppEnablementArrayOutputWithContext(ctx context.Context) WebAppEnablementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAppEnablementArrayOutput)
}

// WebAppEnablementMapInput is an input type that accepts WebAppEnablementMap and WebAppEnablementMapOutput values.
// You can construct a concrete instance of `WebAppEnablementMapInput` via:
//
//	WebAppEnablementMap{ "key": WebAppEnablementArgs{...} }
type WebAppEnablementMapInput interface {
	pulumi.Input

	ToWebAppEnablementMapOutput() WebAppEnablementMapOutput
	ToWebAppEnablementMapOutputWithContext(context.Context) WebAppEnablementMapOutput
}

type WebAppEnablementMap map[string]WebAppEnablementInput

func (WebAppEnablementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebAppEnablement)(nil)).Elem()
}

func (i WebAppEnablementMap) ToWebAppEnablementMapOutput() WebAppEnablementMapOutput {
	return i.ToWebAppEnablementMapOutputWithContext(context.Background())
}

func (i WebAppEnablementMap) ToWebAppEnablementMapOutputWithContext(ctx context.Context) WebAppEnablementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAppEnablementMapOutput)
}

type WebAppEnablementOutput struct{ *pulumi.OutputState }

func (WebAppEnablementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebAppEnablement)(nil)).Elem()
}

func (o WebAppEnablementOutput) ToWebAppEnablementOutput() WebAppEnablementOutput {
	return o
}

func (o WebAppEnablementOutput) ToWebAppEnablementOutputWithContext(ctx context.Context) WebAppEnablementOutput {
	return o
}

// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
func (o WebAppEnablementOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebAppEnablement) pulumi.StringPtrOutput { return v.ApplicationId }).(pulumi.StringPtrOutput)
}

// Experience Analytics
func (o WebAppEnablementOutput) ExperienceAnalytics() WebAppEnablementExperienceAnalyticsPtrOutput {
	return o.ApplyT(func(v *WebAppEnablement) WebAppEnablementExperienceAnalyticsPtrOutput { return v.ExperienceAnalytics }).(WebAppEnablementExperienceAnalyticsPtrOutput)
}

// Capture and analyze all user actions within your application. Enable [Real User Monitoring (RUM)](https://dt-url.net/1n2b0prq) to monitor and improve your application's performance, identify errors, and gain insight into your user's behavior and experience.
func (o WebAppEnablementOutput) Rum() WebAppEnablementRumOutput {
	return o.ApplyT(func(v *WebAppEnablement) WebAppEnablementRumOutput { return v.Rum }).(WebAppEnablementRumOutput)
}

// [Session Replay](https://dt-url.net/session-replay) captures all user interactions within your application and replays them in a movie-like experience while providing [best-in-class security and data protection](https://dt-url.net/b303zxj).
func (o WebAppEnablementOutput) SessionReplay() WebAppEnablementSessionReplayOutput {
	return o.ApplyT(func(v *WebAppEnablement) WebAppEnablementSessionReplayOutput { return v.SessionReplay }).(WebAppEnablementSessionReplayOutput)
}

type WebAppEnablementArrayOutput struct{ *pulumi.OutputState }

func (WebAppEnablementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebAppEnablement)(nil)).Elem()
}

func (o WebAppEnablementArrayOutput) ToWebAppEnablementArrayOutput() WebAppEnablementArrayOutput {
	return o
}

func (o WebAppEnablementArrayOutput) ToWebAppEnablementArrayOutputWithContext(ctx context.Context) WebAppEnablementArrayOutput {
	return o
}

func (o WebAppEnablementArrayOutput) Index(i pulumi.IntInput) WebAppEnablementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WebAppEnablement {
		return vs[0].([]*WebAppEnablement)[vs[1].(int)]
	}).(WebAppEnablementOutput)
}

type WebAppEnablementMapOutput struct{ *pulumi.OutputState }

func (WebAppEnablementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebAppEnablement)(nil)).Elem()
}

func (o WebAppEnablementMapOutput) ToWebAppEnablementMapOutput() WebAppEnablementMapOutput {
	return o
}

func (o WebAppEnablementMapOutput) ToWebAppEnablementMapOutputWithContext(ctx context.Context) WebAppEnablementMapOutput {
	return o
}

func (o WebAppEnablementMapOutput) MapIndex(k pulumi.StringInput) WebAppEnablementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WebAppEnablement {
		return vs[0].(map[string]*WebAppEnablement)[vs[1].(string)]
	}).(WebAppEnablementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WebAppEnablementInput)(nil)).Elem(), &WebAppEnablement{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebAppEnablementArrayInput)(nil)).Elem(), WebAppEnablementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebAppEnablementMapInput)(nil)).Elem(), WebAppEnablementMap{})
	pulumi.RegisterOutputType(WebAppEnablementOutput{})
	pulumi.RegisterOutputType(WebAppEnablementArrayOutput{})
	pulumi.RegisterOutputType(WebAppEnablementMapOutput{})
}
