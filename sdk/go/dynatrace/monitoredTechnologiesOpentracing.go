// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type MonitoredTechnologiesOpentracing struct {
	pulumi.CustomResourceState

	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId pulumi.StringPtrOutput `pulumi:"hostId"`
}

// NewMonitoredTechnologiesOpentracing registers a new resource with the given unique name, arguments, and options.
func NewMonitoredTechnologiesOpentracing(ctx *pulumi.Context,
	name string, args *MonitoredTechnologiesOpentracingArgs, opts ...pulumi.ResourceOption) (*MonitoredTechnologiesOpentracing, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MonitoredTechnologiesOpentracing
	err := ctx.RegisterResource("dynatrace:index/monitoredTechnologiesOpentracing:MonitoredTechnologiesOpentracing", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMonitoredTechnologiesOpentracing gets an existing MonitoredTechnologiesOpentracing resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMonitoredTechnologiesOpentracing(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MonitoredTechnologiesOpentracingState, opts ...pulumi.ResourceOption) (*MonitoredTechnologiesOpentracing, error) {
	var resource MonitoredTechnologiesOpentracing
	err := ctx.ReadResource("dynatrace:index/monitoredTechnologiesOpentracing:MonitoredTechnologiesOpentracing", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MonitoredTechnologiesOpentracing resources.
type monitoredTechnologiesOpentracingState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId *string `pulumi:"hostId"`
}

type MonitoredTechnologiesOpentracingState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId pulumi.StringPtrInput
}

func (MonitoredTechnologiesOpentracingState) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoredTechnologiesOpentracingState)(nil)).Elem()
}

type monitoredTechnologiesOpentracingArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId *string `pulumi:"hostId"`
}

// The set of arguments for constructing a MonitoredTechnologiesOpentracing resource.
type MonitoredTechnologiesOpentracingArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId pulumi.StringPtrInput
}

func (MonitoredTechnologiesOpentracingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoredTechnologiesOpentracingArgs)(nil)).Elem()
}

type MonitoredTechnologiesOpentracingInput interface {
	pulumi.Input

	ToMonitoredTechnologiesOpentracingOutput() MonitoredTechnologiesOpentracingOutput
	ToMonitoredTechnologiesOpentracingOutputWithContext(ctx context.Context) MonitoredTechnologiesOpentracingOutput
}

func (*MonitoredTechnologiesOpentracing) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoredTechnologiesOpentracing)(nil)).Elem()
}

func (i *MonitoredTechnologiesOpentracing) ToMonitoredTechnologiesOpentracingOutput() MonitoredTechnologiesOpentracingOutput {
	return i.ToMonitoredTechnologiesOpentracingOutputWithContext(context.Background())
}

func (i *MonitoredTechnologiesOpentracing) ToMonitoredTechnologiesOpentracingOutputWithContext(ctx context.Context) MonitoredTechnologiesOpentracingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoredTechnologiesOpentracingOutput)
}

// MonitoredTechnologiesOpentracingArrayInput is an input type that accepts MonitoredTechnologiesOpentracingArray and MonitoredTechnologiesOpentracingArrayOutput values.
// You can construct a concrete instance of `MonitoredTechnologiesOpentracingArrayInput` via:
//
//	MonitoredTechnologiesOpentracingArray{ MonitoredTechnologiesOpentracingArgs{...} }
type MonitoredTechnologiesOpentracingArrayInput interface {
	pulumi.Input

	ToMonitoredTechnologiesOpentracingArrayOutput() MonitoredTechnologiesOpentracingArrayOutput
	ToMonitoredTechnologiesOpentracingArrayOutputWithContext(context.Context) MonitoredTechnologiesOpentracingArrayOutput
}

type MonitoredTechnologiesOpentracingArray []MonitoredTechnologiesOpentracingInput

func (MonitoredTechnologiesOpentracingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MonitoredTechnologiesOpentracing)(nil)).Elem()
}

func (i MonitoredTechnologiesOpentracingArray) ToMonitoredTechnologiesOpentracingArrayOutput() MonitoredTechnologiesOpentracingArrayOutput {
	return i.ToMonitoredTechnologiesOpentracingArrayOutputWithContext(context.Background())
}

func (i MonitoredTechnologiesOpentracingArray) ToMonitoredTechnologiesOpentracingArrayOutputWithContext(ctx context.Context) MonitoredTechnologiesOpentracingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoredTechnologiesOpentracingArrayOutput)
}

// MonitoredTechnologiesOpentracingMapInput is an input type that accepts MonitoredTechnologiesOpentracingMap and MonitoredTechnologiesOpentracingMapOutput values.
// You can construct a concrete instance of `MonitoredTechnologiesOpentracingMapInput` via:
//
//	MonitoredTechnologiesOpentracingMap{ "key": MonitoredTechnologiesOpentracingArgs{...} }
type MonitoredTechnologiesOpentracingMapInput interface {
	pulumi.Input

	ToMonitoredTechnologiesOpentracingMapOutput() MonitoredTechnologiesOpentracingMapOutput
	ToMonitoredTechnologiesOpentracingMapOutputWithContext(context.Context) MonitoredTechnologiesOpentracingMapOutput
}

type MonitoredTechnologiesOpentracingMap map[string]MonitoredTechnologiesOpentracingInput

func (MonitoredTechnologiesOpentracingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MonitoredTechnologiesOpentracing)(nil)).Elem()
}

func (i MonitoredTechnologiesOpentracingMap) ToMonitoredTechnologiesOpentracingMapOutput() MonitoredTechnologiesOpentracingMapOutput {
	return i.ToMonitoredTechnologiesOpentracingMapOutputWithContext(context.Background())
}

func (i MonitoredTechnologiesOpentracingMap) ToMonitoredTechnologiesOpentracingMapOutputWithContext(ctx context.Context) MonitoredTechnologiesOpentracingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoredTechnologiesOpentracingMapOutput)
}

type MonitoredTechnologiesOpentracingOutput struct{ *pulumi.OutputState }

func (MonitoredTechnologiesOpentracingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoredTechnologiesOpentracing)(nil)).Elem()
}

func (o MonitoredTechnologiesOpentracingOutput) ToMonitoredTechnologiesOpentracingOutput() MonitoredTechnologiesOpentracingOutput {
	return o
}

func (o MonitoredTechnologiesOpentracingOutput) ToMonitoredTechnologiesOpentracingOutputWithContext(ctx context.Context) MonitoredTechnologiesOpentracingOutput {
	return o
}

// This setting is enabled (`true`) or disabled (`false`)
func (o MonitoredTechnologiesOpentracingOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *MonitoredTechnologiesOpentracing) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
func (o MonitoredTechnologiesOpentracingOutput) HostId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitoredTechnologiesOpentracing) pulumi.StringPtrOutput { return v.HostId }).(pulumi.StringPtrOutput)
}

type MonitoredTechnologiesOpentracingArrayOutput struct{ *pulumi.OutputState }

func (MonitoredTechnologiesOpentracingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MonitoredTechnologiesOpentracing)(nil)).Elem()
}

func (o MonitoredTechnologiesOpentracingArrayOutput) ToMonitoredTechnologiesOpentracingArrayOutput() MonitoredTechnologiesOpentracingArrayOutput {
	return o
}

func (o MonitoredTechnologiesOpentracingArrayOutput) ToMonitoredTechnologiesOpentracingArrayOutputWithContext(ctx context.Context) MonitoredTechnologiesOpentracingArrayOutput {
	return o
}

func (o MonitoredTechnologiesOpentracingArrayOutput) Index(i pulumi.IntInput) MonitoredTechnologiesOpentracingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MonitoredTechnologiesOpentracing {
		return vs[0].([]*MonitoredTechnologiesOpentracing)[vs[1].(int)]
	}).(MonitoredTechnologiesOpentracingOutput)
}

type MonitoredTechnologiesOpentracingMapOutput struct{ *pulumi.OutputState }

func (MonitoredTechnologiesOpentracingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MonitoredTechnologiesOpentracing)(nil)).Elem()
}

func (o MonitoredTechnologiesOpentracingMapOutput) ToMonitoredTechnologiesOpentracingMapOutput() MonitoredTechnologiesOpentracingMapOutput {
	return o
}

func (o MonitoredTechnologiesOpentracingMapOutput) ToMonitoredTechnologiesOpentracingMapOutputWithContext(ctx context.Context) MonitoredTechnologiesOpentracingMapOutput {
	return o
}

func (o MonitoredTechnologiesOpentracingMapOutput) MapIndex(k pulumi.StringInput) MonitoredTechnologiesOpentracingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MonitoredTechnologiesOpentracing {
		return vs[0].(map[string]*MonitoredTechnologiesOpentracing)[vs[1].(string)]
	}).(MonitoredTechnologiesOpentracingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoredTechnologiesOpentracingInput)(nil)).Elem(), &MonitoredTechnologiesOpentracing{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoredTechnologiesOpentracingArrayInput)(nil)).Elem(), MonitoredTechnologiesOpentracingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoredTechnologiesOpentracingMapInput)(nil)).Elem(), MonitoredTechnologiesOpentracingMap{})
	pulumi.RegisterOutputType(MonitoredTechnologiesOpentracingOutput{})
	pulumi.RegisterOutputType(MonitoredTechnologiesOpentracingArrayOutput{})
	pulumi.RegisterOutputType(MonitoredTechnologiesOpentracingMapOutput{})
}
