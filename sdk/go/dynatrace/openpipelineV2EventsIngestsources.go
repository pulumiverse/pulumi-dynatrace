// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OpenpipelineV2EventsIngestsources struct {
	pulumi.CustomResourceState

	// Default Bucket
	DefaultBucket pulumi.StringPtrOutput `pulumi:"defaultBucket"`
	// Endpoint display name
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Endpoint segment
	PathSegment pulumi.StringOutput `pulumi:"pathSegment"`
	// Processing stage
	Processing OpenpipelineV2EventsIngestsourcesProcessingOutput `pulumi:"processing"`
	// Static routing of endpoint
	StaticRouting OpenpipelineV2EventsIngestsourcesStaticRoutingPtrOutput `pulumi:"staticRouting"`
}

// NewOpenpipelineV2EventsIngestsources registers a new resource with the given unique name, arguments, and options.
func NewOpenpipelineV2EventsIngestsources(ctx *pulumi.Context,
	name string, args *OpenpipelineV2EventsIngestsourcesArgs, opts ...pulumi.ResourceOption) (*OpenpipelineV2EventsIngestsources, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.PathSegment == nil {
		return nil, errors.New("invalid value for required argument 'PathSegment'")
	}
	if args.Processing == nil {
		return nil, errors.New("invalid value for required argument 'Processing'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenpipelineV2EventsIngestsources
	err := ctx.RegisterResource("dynatrace:index/openpipelineV2EventsIngestsources:OpenpipelineV2EventsIngestsources", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenpipelineV2EventsIngestsources gets an existing OpenpipelineV2EventsIngestsources resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenpipelineV2EventsIngestsources(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenpipelineV2EventsIngestsourcesState, opts ...pulumi.ResourceOption) (*OpenpipelineV2EventsIngestsources, error) {
	var resource OpenpipelineV2EventsIngestsources
	err := ctx.ReadResource("dynatrace:index/openpipelineV2EventsIngestsources:OpenpipelineV2EventsIngestsources", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenpipelineV2EventsIngestsources resources.
type openpipelineV2EventsIngestsourcesState struct {
	// Default Bucket
	DefaultBucket *string `pulumi:"defaultBucket"`
	// Endpoint display name
	DisplayName *string `pulumi:"displayName"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// Endpoint segment
	PathSegment *string `pulumi:"pathSegment"`
	// Processing stage
	Processing *OpenpipelineV2EventsIngestsourcesProcessing `pulumi:"processing"`
	// Static routing of endpoint
	StaticRouting *OpenpipelineV2EventsIngestsourcesStaticRouting `pulumi:"staticRouting"`
}

type OpenpipelineV2EventsIngestsourcesState struct {
	// Default Bucket
	DefaultBucket pulumi.StringPtrInput
	// Endpoint display name
	DisplayName pulumi.StringPtrInput
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// Endpoint segment
	PathSegment pulumi.StringPtrInput
	// Processing stage
	Processing OpenpipelineV2EventsIngestsourcesProcessingPtrInput
	// Static routing of endpoint
	StaticRouting OpenpipelineV2EventsIngestsourcesStaticRoutingPtrInput
}

func (OpenpipelineV2EventsIngestsourcesState) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2EventsIngestsourcesState)(nil)).Elem()
}

type openpipelineV2EventsIngestsourcesArgs struct {
	// Default Bucket
	DefaultBucket *string `pulumi:"defaultBucket"`
	// Endpoint display name
	DisplayName string `pulumi:"displayName"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// Endpoint segment
	PathSegment string `pulumi:"pathSegment"`
	// Processing stage
	Processing OpenpipelineV2EventsIngestsourcesProcessing `pulumi:"processing"`
	// Static routing of endpoint
	StaticRouting *OpenpipelineV2EventsIngestsourcesStaticRouting `pulumi:"staticRouting"`
}

// The set of arguments for constructing a OpenpipelineV2EventsIngestsources resource.
type OpenpipelineV2EventsIngestsourcesArgs struct {
	// Default Bucket
	DefaultBucket pulumi.StringPtrInput
	// Endpoint display name
	DisplayName pulumi.StringInput
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// Endpoint segment
	PathSegment pulumi.StringInput
	// Processing stage
	Processing OpenpipelineV2EventsIngestsourcesProcessingInput
	// Static routing of endpoint
	StaticRouting OpenpipelineV2EventsIngestsourcesStaticRoutingPtrInput
}

func (OpenpipelineV2EventsIngestsourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2EventsIngestsourcesArgs)(nil)).Elem()
}

type OpenpipelineV2EventsIngestsourcesInput interface {
	pulumi.Input

	ToOpenpipelineV2EventsIngestsourcesOutput() OpenpipelineV2EventsIngestsourcesOutput
	ToOpenpipelineV2EventsIngestsourcesOutputWithContext(ctx context.Context) OpenpipelineV2EventsIngestsourcesOutput
}

func (*OpenpipelineV2EventsIngestsources) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2EventsIngestsources)(nil)).Elem()
}

func (i *OpenpipelineV2EventsIngestsources) ToOpenpipelineV2EventsIngestsourcesOutput() OpenpipelineV2EventsIngestsourcesOutput {
	return i.ToOpenpipelineV2EventsIngestsourcesOutputWithContext(context.Background())
}

func (i *OpenpipelineV2EventsIngestsources) ToOpenpipelineV2EventsIngestsourcesOutputWithContext(ctx context.Context) OpenpipelineV2EventsIngestsourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2EventsIngestsourcesOutput)
}

// OpenpipelineV2EventsIngestsourcesArrayInput is an input type that accepts OpenpipelineV2EventsIngestsourcesArray and OpenpipelineV2EventsIngestsourcesArrayOutput values.
// You can construct a concrete instance of `OpenpipelineV2EventsIngestsourcesArrayInput` via:
//
//	OpenpipelineV2EventsIngestsourcesArray{ OpenpipelineV2EventsIngestsourcesArgs{...} }
type OpenpipelineV2EventsIngestsourcesArrayInput interface {
	pulumi.Input

	ToOpenpipelineV2EventsIngestsourcesArrayOutput() OpenpipelineV2EventsIngestsourcesArrayOutput
	ToOpenpipelineV2EventsIngestsourcesArrayOutputWithContext(context.Context) OpenpipelineV2EventsIngestsourcesArrayOutput
}

type OpenpipelineV2EventsIngestsourcesArray []OpenpipelineV2EventsIngestsourcesInput

func (OpenpipelineV2EventsIngestsourcesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2EventsIngestsources)(nil)).Elem()
}

func (i OpenpipelineV2EventsIngestsourcesArray) ToOpenpipelineV2EventsIngestsourcesArrayOutput() OpenpipelineV2EventsIngestsourcesArrayOutput {
	return i.ToOpenpipelineV2EventsIngestsourcesArrayOutputWithContext(context.Background())
}

func (i OpenpipelineV2EventsIngestsourcesArray) ToOpenpipelineV2EventsIngestsourcesArrayOutputWithContext(ctx context.Context) OpenpipelineV2EventsIngestsourcesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2EventsIngestsourcesArrayOutput)
}

// OpenpipelineV2EventsIngestsourcesMapInput is an input type that accepts OpenpipelineV2EventsIngestsourcesMap and OpenpipelineV2EventsIngestsourcesMapOutput values.
// You can construct a concrete instance of `OpenpipelineV2EventsIngestsourcesMapInput` via:
//
//	OpenpipelineV2EventsIngestsourcesMap{ "key": OpenpipelineV2EventsIngestsourcesArgs{...} }
type OpenpipelineV2EventsIngestsourcesMapInput interface {
	pulumi.Input

	ToOpenpipelineV2EventsIngestsourcesMapOutput() OpenpipelineV2EventsIngestsourcesMapOutput
	ToOpenpipelineV2EventsIngestsourcesMapOutputWithContext(context.Context) OpenpipelineV2EventsIngestsourcesMapOutput
}

type OpenpipelineV2EventsIngestsourcesMap map[string]OpenpipelineV2EventsIngestsourcesInput

func (OpenpipelineV2EventsIngestsourcesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2EventsIngestsources)(nil)).Elem()
}

func (i OpenpipelineV2EventsIngestsourcesMap) ToOpenpipelineV2EventsIngestsourcesMapOutput() OpenpipelineV2EventsIngestsourcesMapOutput {
	return i.ToOpenpipelineV2EventsIngestsourcesMapOutputWithContext(context.Background())
}

func (i OpenpipelineV2EventsIngestsourcesMap) ToOpenpipelineV2EventsIngestsourcesMapOutputWithContext(ctx context.Context) OpenpipelineV2EventsIngestsourcesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2EventsIngestsourcesMapOutput)
}

type OpenpipelineV2EventsIngestsourcesOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2EventsIngestsourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2EventsIngestsources)(nil)).Elem()
}

func (o OpenpipelineV2EventsIngestsourcesOutput) ToOpenpipelineV2EventsIngestsourcesOutput() OpenpipelineV2EventsIngestsourcesOutput {
	return o
}

func (o OpenpipelineV2EventsIngestsourcesOutput) ToOpenpipelineV2EventsIngestsourcesOutputWithContext(ctx context.Context) OpenpipelineV2EventsIngestsourcesOutput {
	return o
}

// Default Bucket
func (o OpenpipelineV2EventsIngestsourcesOutput) DefaultBucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenpipelineV2EventsIngestsources) pulumi.StringPtrOutput { return v.DefaultBucket }).(pulumi.StringPtrOutput)
}

// Endpoint display name
func (o OpenpipelineV2EventsIngestsourcesOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenpipelineV2EventsIngestsources) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// This setting is enabled (`true`) or disabled (`false`)
func (o OpenpipelineV2EventsIngestsourcesOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *OpenpipelineV2EventsIngestsources) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Endpoint segment
func (o OpenpipelineV2EventsIngestsourcesOutput) PathSegment() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenpipelineV2EventsIngestsources) pulumi.StringOutput { return v.PathSegment }).(pulumi.StringOutput)
}

// Processing stage
func (o OpenpipelineV2EventsIngestsourcesOutput) Processing() OpenpipelineV2EventsIngestsourcesProcessingOutput {
	return o.ApplyT(func(v *OpenpipelineV2EventsIngestsources) OpenpipelineV2EventsIngestsourcesProcessingOutput {
		return v.Processing
	}).(OpenpipelineV2EventsIngestsourcesProcessingOutput)
}

// Static routing of endpoint
func (o OpenpipelineV2EventsIngestsourcesOutput) StaticRouting() OpenpipelineV2EventsIngestsourcesStaticRoutingPtrOutput {
	return o.ApplyT(func(v *OpenpipelineV2EventsIngestsources) OpenpipelineV2EventsIngestsourcesStaticRoutingPtrOutput {
		return v.StaticRouting
	}).(OpenpipelineV2EventsIngestsourcesStaticRoutingPtrOutput)
}

type OpenpipelineV2EventsIngestsourcesArrayOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2EventsIngestsourcesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2EventsIngestsources)(nil)).Elem()
}

func (o OpenpipelineV2EventsIngestsourcesArrayOutput) ToOpenpipelineV2EventsIngestsourcesArrayOutput() OpenpipelineV2EventsIngestsourcesArrayOutput {
	return o
}

func (o OpenpipelineV2EventsIngestsourcesArrayOutput) ToOpenpipelineV2EventsIngestsourcesArrayOutputWithContext(ctx context.Context) OpenpipelineV2EventsIngestsourcesArrayOutput {
	return o
}

func (o OpenpipelineV2EventsIngestsourcesArrayOutput) Index(i pulumi.IntInput) OpenpipelineV2EventsIngestsourcesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenpipelineV2EventsIngestsources {
		return vs[0].([]*OpenpipelineV2EventsIngestsources)[vs[1].(int)]
	}).(OpenpipelineV2EventsIngestsourcesOutput)
}

type OpenpipelineV2EventsIngestsourcesMapOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2EventsIngestsourcesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2EventsIngestsources)(nil)).Elem()
}

func (o OpenpipelineV2EventsIngestsourcesMapOutput) ToOpenpipelineV2EventsIngestsourcesMapOutput() OpenpipelineV2EventsIngestsourcesMapOutput {
	return o
}

func (o OpenpipelineV2EventsIngestsourcesMapOutput) ToOpenpipelineV2EventsIngestsourcesMapOutputWithContext(ctx context.Context) OpenpipelineV2EventsIngestsourcesMapOutput {
	return o
}

func (o OpenpipelineV2EventsIngestsourcesMapOutput) MapIndex(k pulumi.StringInput) OpenpipelineV2EventsIngestsourcesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenpipelineV2EventsIngestsources {
		return vs[0].(map[string]*OpenpipelineV2EventsIngestsources)[vs[1].(string)]
	}).(OpenpipelineV2EventsIngestsourcesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2EventsIngestsourcesInput)(nil)).Elem(), &OpenpipelineV2EventsIngestsources{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2EventsIngestsourcesArrayInput)(nil)).Elem(), OpenpipelineV2EventsIngestsourcesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2EventsIngestsourcesMapInput)(nil)).Elem(), OpenpipelineV2EventsIngestsourcesMap{})
	pulumi.RegisterOutputType(OpenpipelineV2EventsIngestsourcesOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2EventsIngestsourcesArrayOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2EventsIngestsourcesMapOutput{})
}
