// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type ActivegateToken struct {
	pulumi.CustomResourceState

	// Manually enforce ActiveGate token authentication
	AuthTokenEnforcementManuallyEnabled pulumi.BoolOutput `pulumi:"authTokenEnforcementManuallyEnabled"`
	// Note: ActiveGate tokens notifications are sent only when you deployed ActiveGate tokens with expiration dates in your environment and notifications are defined ([see notification settings](https://www.terraform.io/ui/settings/builtin:problem.notifications))
	ExpiringTokenNotificationsEnabled pulumi.BoolOutput `pulumi:"expiringTokenNotificationsEnabled"`
}

// NewActivegateToken registers a new resource with the given unique name, arguments, and options.
func NewActivegateToken(ctx *pulumi.Context,
	name string, args *ActivegateTokenArgs, opts ...pulumi.ResourceOption) (*ActivegateToken, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthTokenEnforcementManuallyEnabled == nil {
		return nil, errors.New("invalid value for required argument 'AuthTokenEnforcementManuallyEnabled'")
	}
	if args.ExpiringTokenNotificationsEnabled == nil {
		return nil, errors.New("invalid value for required argument 'ExpiringTokenNotificationsEnabled'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ActivegateToken
	err := ctx.RegisterResource("dynatrace:index/activegateToken:ActivegateToken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetActivegateToken gets an existing ActivegateToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetActivegateToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ActivegateTokenState, opts ...pulumi.ResourceOption) (*ActivegateToken, error) {
	var resource ActivegateToken
	err := ctx.ReadResource("dynatrace:index/activegateToken:ActivegateToken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ActivegateToken resources.
type activegateTokenState struct {
	// Manually enforce ActiveGate token authentication
	AuthTokenEnforcementManuallyEnabled *bool `pulumi:"authTokenEnforcementManuallyEnabled"`
	// Note: ActiveGate tokens notifications are sent only when you deployed ActiveGate tokens with expiration dates in your environment and notifications are defined ([see notification settings](https://www.terraform.io/ui/settings/builtin:problem.notifications))
	ExpiringTokenNotificationsEnabled *bool `pulumi:"expiringTokenNotificationsEnabled"`
}

type ActivegateTokenState struct {
	// Manually enforce ActiveGate token authentication
	AuthTokenEnforcementManuallyEnabled pulumi.BoolPtrInput
	// Note: ActiveGate tokens notifications are sent only when you deployed ActiveGate tokens with expiration dates in your environment and notifications are defined ([see notification settings](https://www.terraform.io/ui/settings/builtin:problem.notifications))
	ExpiringTokenNotificationsEnabled pulumi.BoolPtrInput
}

func (ActivegateTokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*activegateTokenState)(nil)).Elem()
}

type activegateTokenArgs struct {
	// Manually enforce ActiveGate token authentication
	AuthTokenEnforcementManuallyEnabled bool `pulumi:"authTokenEnforcementManuallyEnabled"`
	// Note: ActiveGate tokens notifications are sent only when you deployed ActiveGate tokens with expiration dates in your environment and notifications are defined ([see notification settings](https://www.terraform.io/ui/settings/builtin:problem.notifications))
	ExpiringTokenNotificationsEnabled bool `pulumi:"expiringTokenNotificationsEnabled"`
}

// The set of arguments for constructing a ActivegateToken resource.
type ActivegateTokenArgs struct {
	// Manually enforce ActiveGate token authentication
	AuthTokenEnforcementManuallyEnabled pulumi.BoolInput
	// Note: ActiveGate tokens notifications are sent only when you deployed ActiveGate tokens with expiration dates in your environment and notifications are defined ([see notification settings](https://www.terraform.io/ui/settings/builtin:problem.notifications))
	ExpiringTokenNotificationsEnabled pulumi.BoolInput
}

func (ActivegateTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*activegateTokenArgs)(nil)).Elem()
}

type ActivegateTokenInput interface {
	pulumi.Input

	ToActivegateTokenOutput() ActivegateTokenOutput
	ToActivegateTokenOutputWithContext(ctx context.Context) ActivegateTokenOutput
}

func (*ActivegateToken) ElementType() reflect.Type {
	return reflect.TypeOf((**ActivegateToken)(nil)).Elem()
}

func (i *ActivegateToken) ToActivegateTokenOutput() ActivegateTokenOutput {
	return i.ToActivegateTokenOutputWithContext(context.Background())
}

func (i *ActivegateToken) ToActivegateTokenOutputWithContext(ctx context.Context) ActivegateTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivegateTokenOutput)
}

// ActivegateTokenArrayInput is an input type that accepts ActivegateTokenArray and ActivegateTokenArrayOutput values.
// You can construct a concrete instance of `ActivegateTokenArrayInput` via:
//
//	ActivegateTokenArray{ ActivegateTokenArgs{...} }
type ActivegateTokenArrayInput interface {
	pulumi.Input

	ToActivegateTokenArrayOutput() ActivegateTokenArrayOutput
	ToActivegateTokenArrayOutputWithContext(context.Context) ActivegateTokenArrayOutput
}

type ActivegateTokenArray []ActivegateTokenInput

func (ActivegateTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ActivegateToken)(nil)).Elem()
}

func (i ActivegateTokenArray) ToActivegateTokenArrayOutput() ActivegateTokenArrayOutput {
	return i.ToActivegateTokenArrayOutputWithContext(context.Background())
}

func (i ActivegateTokenArray) ToActivegateTokenArrayOutputWithContext(ctx context.Context) ActivegateTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivegateTokenArrayOutput)
}

// ActivegateTokenMapInput is an input type that accepts ActivegateTokenMap and ActivegateTokenMapOutput values.
// You can construct a concrete instance of `ActivegateTokenMapInput` via:
//
//	ActivegateTokenMap{ "key": ActivegateTokenArgs{...} }
type ActivegateTokenMapInput interface {
	pulumi.Input

	ToActivegateTokenMapOutput() ActivegateTokenMapOutput
	ToActivegateTokenMapOutputWithContext(context.Context) ActivegateTokenMapOutput
}

type ActivegateTokenMap map[string]ActivegateTokenInput

func (ActivegateTokenMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ActivegateToken)(nil)).Elem()
}

func (i ActivegateTokenMap) ToActivegateTokenMapOutput() ActivegateTokenMapOutput {
	return i.ToActivegateTokenMapOutputWithContext(context.Background())
}

func (i ActivegateTokenMap) ToActivegateTokenMapOutputWithContext(ctx context.Context) ActivegateTokenMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivegateTokenMapOutput)
}

type ActivegateTokenOutput struct{ *pulumi.OutputState }

func (ActivegateTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActivegateToken)(nil)).Elem()
}

func (o ActivegateTokenOutput) ToActivegateTokenOutput() ActivegateTokenOutput {
	return o
}

func (o ActivegateTokenOutput) ToActivegateTokenOutputWithContext(ctx context.Context) ActivegateTokenOutput {
	return o
}

// Manually enforce ActiveGate token authentication
func (o ActivegateTokenOutput) AuthTokenEnforcementManuallyEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ActivegateToken) pulumi.BoolOutput { return v.AuthTokenEnforcementManuallyEnabled }).(pulumi.BoolOutput)
}

// Note: ActiveGate tokens notifications are sent only when you deployed ActiveGate tokens with expiration dates in your environment and notifications are defined ([see notification settings](https://www.terraform.io/ui/settings/builtin:problem.notifications))
func (o ActivegateTokenOutput) ExpiringTokenNotificationsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ActivegateToken) pulumi.BoolOutput { return v.ExpiringTokenNotificationsEnabled }).(pulumi.BoolOutput)
}

type ActivegateTokenArrayOutput struct{ *pulumi.OutputState }

func (ActivegateTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ActivegateToken)(nil)).Elem()
}

func (o ActivegateTokenArrayOutput) ToActivegateTokenArrayOutput() ActivegateTokenArrayOutput {
	return o
}

func (o ActivegateTokenArrayOutput) ToActivegateTokenArrayOutputWithContext(ctx context.Context) ActivegateTokenArrayOutput {
	return o
}

func (o ActivegateTokenArrayOutput) Index(i pulumi.IntInput) ActivegateTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ActivegateToken {
		return vs[0].([]*ActivegateToken)[vs[1].(int)]
	}).(ActivegateTokenOutput)
}

type ActivegateTokenMapOutput struct{ *pulumi.OutputState }

func (ActivegateTokenMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ActivegateToken)(nil)).Elem()
}

func (o ActivegateTokenMapOutput) ToActivegateTokenMapOutput() ActivegateTokenMapOutput {
	return o
}

func (o ActivegateTokenMapOutput) ToActivegateTokenMapOutputWithContext(ctx context.Context) ActivegateTokenMapOutput {
	return o
}

func (o ActivegateTokenMapOutput) MapIndex(k pulumi.StringInput) ActivegateTokenOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ActivegateToken {
		return vs[0].(map[string]*ActivegateToken)[vs[1].(string)]
	}).(ActivegateTokenOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ActivegateTokenInput)(nil)).Elem(), &ActivegateToken{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActivegateTokenArrayInput)(nil)).Elem(), ActivegateTokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActivegateTokenMapInput)(nil)).Elem(), ActivegateTokenMap{})
	pulumi.RegisterOutputType(ActivegateTokenOutput{})
	pulumi.RegisterOutputType(ActivegateTokenArrayOutput{})
	pulumi.RegisterOutputType(ActivegateTokenMapOutput{})
}
