// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OpenpipelineV2DavisProblemsIngestsources struct {
	pulumi.CustomResourceState

	// Default Bucket
	DefaultBucket pulumi.StringPtrOutput `pulumi:"defaultBucket"`
	// Endpoint display name
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Endpoint segment
	PathSegment pulumi.StringOutput `pulumi:"pathSegment"`
	// Processing stage
	Processing OpenpipelineV2DavisProblemsIngestsourcesProcessingOutput `pulumi:"processing"`
	// Static routing of endpoint
	StaticRouting OpenpipelineV2DavisProblemsIngestsourcesStaticRoutingPtrOutput `pulumi:"staticRouting"`
}

// NewOpenpipelineV2DavisProblemsIngestsources registers a new resource with the given unique name, arguments, and options.
func NewOpenpipelineV2DavisProblemsIngestsources(ctx *pulumi.Context,
	name string, args *OpenpipelineV2DavisProblemsIngestsourcesArgs, opts ...pulumi.ResourceOption) (*OpenpipelineV2DavisProblemsIngestsources, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.PathSegment == nil {
		return nil, errors.New("invalid value for required argument 'PathSegment'")
	}
	if args.Processing == nil {
		return nil, errors.New("invalid value for required argument 'Processing'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenpipelineV2DavisProblemsIngestsources
	err := ctx.RegisterResource("dynatrace:index/openpipelineV2DavisProblemsIngestsources:OpenpipelineV2DavisProblemsIngestsources", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenpipelineV2DavisProblemsIngestsources gets an existing OpenpipelineV2DavisProblemsIngestsources resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenpipelineV2DavisProblemsIngestsources(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenpipelineV2DavisProblemsIngestsourcesState, opts ...pulumi.ResourceOption) (*OpenpipelineV2DavisProblemsIngestsources, error) {
	var resource OpenpipelineV2DavisProblemsIngestsources
	err := ctx.ReadResource("dynatrace:index/openpipelineV2DavisProblemsIngestsources:OpenpipelineV2DavisProblemsIngestsources", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenpipelineV2DavisProblemsIngestsources resources.
type openpipelineV2DavisProblemsIngestsourcesState struct {
	// Default Bucket
	DefaultBucket *string `pulumi:"defaultBucket"`
	// Endpoint display name
	DisplayName *string `pulumi:"displayName"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// Endpoint segment
	PathSegment *string `pulumi:"pathSegment"`
	// Processing stage
	Processing *OpenpipelineV2DavisProblemsIngestsourcesProcessing `pulumi:"processing"`
	// Static routing of endpoint
	StaticRouting *OpenpipelineV2DavisProblemsIngestsourcesStaticRouting `pulumi:"staticRouting"`
}

type OpenpipelineV2DavisProblemsIngestsourcesState struct {
	// Default Bucket
	DefaultBucket pulumi.StringPtrInput
	// Endpoint display name
	DisplayName pulumi.StringPtrInput
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// Endpoint segment
	PathSegment pulumi.StringPtrInput
	// Processing stage
	Processing OpenpipelineV2DavisProblemsIngestsourcesProcessingPtrInput
	// Static routing of endpoint
	StaticRouting OpenpipelineV2DavisProblemsIngestsourcesStaticRoutingPtrInput
}

func (OpenpipelineV2DavisProblemsIngestsourcesState) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2DavisProblemsIngestsourcesState)(nil)).Elem()
}

type openpipelineV2DavisProblemsIngestsourcesArgs struct {
	// Default Bucket
	DefaultBucket *string `pulumi:"defaultBucket"`
	// Endpoint display name
	DisplayName string `pulumi:"displayName"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// Endpoint segment
	PathSegment string `pulumi:"pathSegment"`
	// Processing stage
	Processing OpenpipelineV2DavisProblemsIngestsourcesProcessing `pulumi:"processing"`
	// Static routing of endpoint
	StaticRouting *OpenpipelineV2DavisProblemsIngestsourcesStaticRouting `pulumi:"staticRouting"`
}

// The set of arguments for constructing a OpenpipelineV2DavisProblemsIngestsources resource.
type OpenpipelineV2DavisProblemsIngestsourcesArgs struct {
	// Default Bucket
	DefaultBucket pulumi.StringPtrInput
	// Endpoint display name
	DisplayName pulumi.StringInput
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// Endpoint segment
	PathSegment pulumi.StringInput
	// Processing stage
	Processing OpenpipelineV2DavisProblemsIngestsourcesProcessingInput
	// Static routing of endpoint
	StaticRouting OpenpipelineV2DavisProblemsIngestsourcesStaticRoutingPtrInput
}

func (OpenpipelineV2DavisProblemsIngestsourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2DavisProblemsIngestsourcesArgs)(nil)).Elem()
}

type OpenpipelineV2DavisProblemsIngestsourcesInput interface {
	pulumi.Input

	ToOpenpipelineV2DavisProblemsIngestsourcesOutput() OpenpipelineV2DavisProblemsIngestsourcesOutput
	ToOpenpipelineV2DavisProblemsIngestsourcesOutputWithContext(ctx context.Context) OpenpipelineV2DavisProblemsIngestsourcesOutput
}

func (*OpenpipelineV2DavisProblemsIngestsources) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2DavisProblemsIngestsources)(nil)).Elem()
}

func (i *OpenpipelineV2DavisProblemsIngestsources) ToOpenpipelineV2DavisProblemsIngestsourcesOutput() OpenpipelineV2DavisProblemsIngestsourcesOutput {
	return i.ToOpenpipelineV2DavisProblemsIngestsourcesOutputWithContext(context.Background())
}

func (i *OpenpipelineV2DavisProblemsIngestsources) ToOpenpipelineV2DavisProblemsIngestsourcesOutputWithContext(ctx context.Context) OpenpipelineV2DavisProblemsIngestsourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2DavisProblemsIngestsourcesOutput)
}

// OpenpipelineV2DavisProblemsIngestsourcesArrayInput is an input type that accepts OpenpipelineV2DavisProblemsIngestsourcesArray and OpenpipelineV2DavisProblemsIngestsourcesArrayOutput values.
// You can construct a concrete instance of `OpenpipelineV2DavisProblemsIngestsourcesArrayInput` via:
//
//	OpenpipelineV2DavisProblemsIngestsourcesArray{ OpenpipelineV2DavisProblemsIngestsourcesArgs{...} }
type OpenpipelineV2DavisProblemsIngestsourcesArrayInput interface {
	pulumi.Input

	ToOpenpipelineV2DavisProblemsIngestsourcesArrayOutput() OpenpipelineV2DavisProblemsIngestsourcesArrayOutput
	ToOpenpipelineV2DavisProblemsIngestsourcesArrayOutputWithContext(context.Context) OpenpipelineV2DavisProblemsIngestsourcesArrayOutput
}

type OpenpipelineV2DavisProblemsIngestsourcesArray []OpenpipelineV2DavisProblemsIngestsourcesInput

func (OpenpipelineV2DavisProblemsIngestsourcesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2DavisProblemsIngestsources)(nil)).Elem()
}

func (i OpenpipelineV2DavisProblemsIngestsourcesArray) ToOpenpipelineV2DavisProblemsIngestsourcesArrayOutput() OpenpipelineV2DavisProblemsIngestsourcesArrayOutput {
	return i.ToOpenpipelineV2DavisProblemsIngestsourcesArrayOutputWithContext(context.Background())
}

func (i OpenpipelineV2DavisProblemsIngestsourcesArray) ToOpenpipelineV2DavisProblemsIngestsourcesArrayOutputWithContext(ctx context.Context) OpenpipelineV2DavisProblemsIngestsourcesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2DavisProblemsIngestsourcesArrayOutput)
}

// OpenpipelineV2DavisProblemsIngestsourcesMapInput is an input type that accepts OpenpipelineV2DavisProblemsIngestsourcesMap and OpenpipelineV2DavisProblemsIngestsourcesMapOutput values.
// You can construct a concrete instance of `OpenpipelineV2DavisProblemsIngestsourcesMapInput` via:
//
//	OpenpipelineV2DavisProblemsIngestsourcesMap{ "key": OpenpipelineV2DavisProblemsIngestsourcesArgs{...} }
type OpenpipelineV2DavisProblemsIngestsourcesMapInput interface {
	pulumi.Input

	ToOpenpipelineV2DavisProblemsIngestsourcesMapOutput() OpenpipelineV2DavisProblemsIngestsourcesMapOutput
	ToOpenpipelineV2DavisProblemsIngestsourcesMapOutputWithContext(context.Context) OpenpipelineV2DavisProblemsIngestsourcesMapOutput
}

type OpenpipelineV2DavisProblemsIngestsourcesMap map[string]OpenpipelineV2DavisProblemsIngestsourcesInput

func (OpenpipelineV2DavisProblemsIngestsourcesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2DavisProblemsIngestsources)(nil)).Elem()
}

func (i OpenpipelineV2DavisProblemsIngestsourcesMap) ToOpenpipelineV2DavisProblemsIngestsourcesMapOutput() OpenpipelineV2DavisProblemsIngestsourcesMapOutput {
	return i.ToOpenpipelineV2DavisProblemsIngestsourcesMapOutputWithContext(context.Background())
}

func (i OpenpipelineV2DavisProblemsIngestsourcesMap) ToOpenpipelineV2DavisProblemsIngestsourcesMapOutputWithContext(ctx context.Context) OpenpipelineV2DavisProblemsIngestsourcesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2DavisProblemsIngestsourcesMapOutput)
}

type OpenpipelineV2DavisProblemsIngestsourcesOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2DavisProblemsIngestsourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2DavisProblemsIngestsources)(nil)).Elem()
}

func (o OpenpipelineV2DavisProblemsIngestsourcesOutput) ToOpenpipelineV2DavisProblemsIngestsourcesOutput() OpenpipelineV2DavisProblemsIngestsourcesOutput {
	return o
}

func (o OpenpipelineV2DavisProblemsIngestsourcesOutput) ToOpenpipelineV2DavisProblemsIngestsourcesOutputWithContext(ctx context.Context) OpenpipelineV2DavisProblemsIngestsourcesOutput {
	return o
}

// Default Bucket
func (o OpenpipelineV2DavisProblemsIngestsourcesOutput) DefaultBucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenpipelineV2DavisProblemsIngestsources) pulumi.StringPtrOutput { return v.DefaultBucket }).(pulumi.StringPtrOutput)
}

// Endpoint display name
func (o OpenpipelineV2DavisProblemsIngestsourcesOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenpipelineV2DavisProblemsIngestsources) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// This setting is enabled (`true`) or disabled (`false`)
func (o OpenpipelineV2DavisProblemsIngestsourcesOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *OpenpipelineV2DavisProblemsIngestsources) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Endpoint segment
func (o OpenpipelineV2DavisProblemsIngestsourcesOutput) PathSegment() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenpipelineV2DavisProblemsIngestsources) pulumi.StringOutput { return v.PathSegment }).(pulumi.StringOutput)
}

// Processing stage
func (o OpenpipelineV2DavisProblemsIngestsourcesOutput) Processing() OpenpipelineV2DavisProblemsIngestsourcesProcessingOutput {
	return o.ApplyT(func(v *OpenpipelineV2DavisProblemsIngestsources) OpenpipelineV2DavisProblemsIngestsourcesProcessingOutput {
		return v.Processing
	}).(OpenpipelineV2DavisProblemsIngestsourcesProcessingOutput)
}

// Static routing of endpoint
func (o OpenpipelineV2DavisProblemsIngestsourcesOutput) StaticRouting() OpenpipelineV2DavisProblemsIngestsourcesStaticRoutingPtrOutput {
	return o.ApplyT(func(v *OpenpipelineV2DavisProblemsIngestsources) OpenpipelineV2DavisProblemsIngestsourcesStaticRoutingPtrOutput {
		return v.StaticRouting
	}).(OpenpipelineV2DavisProblemsIngestsourcesStaticRoutingPtrOutput)
}

type OpenpipelineV2DavisProblemsIngestsourcesArrayOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2DavisProblemsIngestsourcesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2DavisProblemsIngestsources)(nil)).Elem()
}

func (o OpenpipelineV2DavisProblemsIngestsourcesArrayOutput) ToOpenpipelineV2DavisProblemsIngestsourcesArrayOutput() OpenpipelineV2DavisProblemsIngestsourcesArrayOutput {
	return o
}

func (o OpenpipelineV2DavisProblemsIngestsourcesArrayOutput) ToOpenpipelineV2DavisProblemsIngestsourcesArrayOutputWithContext(ctx context.Context) OpenpipelineV2DavisProblemsIngestsourcesArrayOutput {
	return o
}

func (o OpenpipelineV2DavisProblemsIngestsourcesArrayOutput) Index(i pulumi.IntInput) OpenpipelineV2DavisProblemsIngestsourcesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenpipelineV2DavisProblemsIngestsources {
		return vs[0].([]*OpenpipelineV2DavisProblemsIngestsources)[vs[1].(int)]
	}).(OpenpipelineV2DavisProblemsIngestsourcesOutput)
}

type OpenpipelineV2DavisProblemsIngestsourcesMapOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2DavisProblemsIngestsourcesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2DavisProblemsIngestsources)(nil)).Elem()
}

func (o OpenpipelineV2DavisProblemsIngestsourcesMapOutput) ToOpenpipelineV2DavisProblemsIngestsourcesMapOutput() OpenpipelineV2DavisProblemsIngestsourcesMapOutput {
	return o
}

func (o OpenpipelineV2DavisProblemsIngestsourcesMapOutput) ToOpenpipelineV2DavisProblemsIngestsourcesMapOutputWithContext(ctx context.Context) OpenpipelineV2DavisProblemsIngestsourcesMapOutput {
	return o
}

func (o OpenpipelineV2DavisProblemsIngestsourcesMapOutput) MapIndex(k pulumi.StringInput) OpenpipelineV2DavisProblemsIngestsourcesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenpipelineV2DavisProblemsIngestsources {
		return vs[0].(map[string]*OpenpipelineV2DavisProblemsIngestsources)[vs[1].(string)]
	}).(OpenpipelineV2DavisProblemsIngestsourcesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2DavisProblemsIngestsourcesInput)(nil)).Elem(), &OpenpipelineV2DavisProblemsIngestsources{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2DavisProblemsIngestsourcesArrayInput)(nil)).Elem(), OpenpipelineV2DavisProblemsIngestsourcesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2DavisProblemsIngestsourcesMapInput)(nil)).Elem(), OpenpipelineV2DavisProblemsIngestsourcesMap{})
	pulumi.RegisterOutputType(OpenpipelineV2DavisProblemsIngestsourcesOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2DavisProblemsIngestsourcesArrayOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2DavisProblemsIngestsourcesMapOutput{})
}
