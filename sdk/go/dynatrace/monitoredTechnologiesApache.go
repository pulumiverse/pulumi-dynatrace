// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type MonitoredTechnologiesApache struct {
	pulumi.CustomResourceState

	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId pulumi.StringPtrOutput `pulumi:"hostId"`
}

// NewMonitoredTechnologiesApache registers a new resource with the given unique name, arguments, and options.
func NewMonitoredTechnologiesApache(ctx *pulumi.Context,
	name string, args *MonitoredTechnologiesApacheArgs, opts ...pulumi.ResourceOption) (*MonitoredTechnologiesApache, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MonitoredTechnologiesApache
	err := ctx.RegisterResource("dynatrace:index/monitoredTechnologiesApache:MonitoredTechnologiesApache", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMonitoredTechnologiesApache gets an existing MonitoredTechnologiesApache resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMonitoredTechnologiesApache(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MonitoredTechnologiesApacheState, opts ...pulumi.ResourceOption) (*MonitoredTechnologiesApache, error) {
	var resource MonitoredTechnologiesApache
	err := ctx.ReadResource("dynatrace:index/monitoredTechnologiesApache:MonitoredTechnologiesApache", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MonitoredTechnologiesApache resources.
type monitoredTechnologiesApacheState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId *string `pulumi:"hostId"`
}

type MonitoredTechnologiesApacheState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId pulumi.StringPtrInput
}

func (MonitoredTechnologiesApacheState) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoredTechnologiesApacheState)(nil)).Elem()
}

type monitoredTechnologiesApacheArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId *string `pulumi:"hostId"`
}

// The set of arguments for constructing a MonitoredTechnologiesApache resource.
type MonitoredTechnologiesApacheArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId pulumi.StringPtrInput
}

func (MonitoredTechnologiesApacheArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoredTechnologiesApacheArgs)(nil)).Elem()
}

type MonitoredTechnologiesApacheInput interface {
	pulumi.Input

	ToMonitoredTechnologiesApacheOutput() MonitoredTechnologiesApacheOutput
	ToMonitoredTechnologiesApacheOutputWithContext(ctx context.Context) MonitoredTechnologiesApacheOutput
}

func (*MonitoredTechnologiesApache) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoredTechnologiesApache)(nil)).Elem()
}

func (i *MonitoredTechnologiesApache) ToMonitoredTechnologiesApacheOutput() MonitoredTechnologiesApacheOutput {
	return i.ToMonitoredTechnologiesApacheOutputWithContext(context.Background())
}

func (i *MonitoredTechnologiesApache) ToMonitoredTechnologiesApacheOutputWithContext(ctx context.Context) MonitoredTechnologiesApacheOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoredTechnologiesApacheOutput)
}

// MonitoredTechnologiesApacheArrayInput is an input type that accepts MonitoredTechnologiesApacheArray and MonitoredTechnologiesApacheArrayOutput values.
// You can construct a concrete instance of `MonitoredTechnologiesApacheArrayInput` via:
//
//	MonitoredTechnologiesApacheArray{ MonitoredTechnologiesApacheArgs{...} }
type MonitoredTechnologiesApacheArrayInput interface {
	pulumi.Input

	ToMonitoredTechnologiesApacheArrayOutput() MonitoredTechnologiesApacheArrayOutput
	ToMonitoredTechnologiesApacheArrayOutputWithContext(context.Context) MonitoredTechnologiesApacheArrayOutput
}

type MonitoredTechnologiesApacheArray []MonitoredTechnologiesApacheInput

func (MonitoredTechnologiesApacheArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MonitoredTechnologiesApache)(nil)).Elem()
}

func (i MonitoredTechnologiesApacheArray) ToMonitoredTechnologiesApacheArrayOutput() MonitoredTechnologiesApacheArrayOutput {
	return i.ToMonitoredTechnologiesApacheArrayOutputWithContext(context.Background())
}

func (i MonitoredTechnologiesApacheArray) ToMonitoredTechnologiesApacheArrayOutputWithContext(ctx context.Context) MonitoredTechnologiesApacheArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoredTechnologiesApacheArrayOutput)
}

// MonitoredTechnologiesApacheMapInput is an input type that accepts MonitoredTechnologiesApacheMap and MonitoredTechnologiesApacheMapOutput values.
// You can construct a concrete instance of `MonitoredTechnologiesApacheMapInput` via:
//
//	MonitoredTechnologiesApacheMap{ "key": MonitoredTechnologiesApacheArgs{...} }
type MonitoredTechnologiesApacheMapInput interface {
	pulumi.Input

	ToMonitoredTechnologiesApacheMapOutput() MonitoredTechnologiesApacheMapOutput
	ToMonitoredTechnologiesApacheMapOutputWithContext(context.Context) MonitoredTechnologiesApacheMapOutput
}

type MonitoredTechnologiesApacheMap map[string]MonitoredTechnologiesApacheInput

func (MonitoredTechnologiesApacheMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MonitoredTechnologiesApache)(nil)).Elem()
}

func (i MonitoredTechnologiesApacheMap) ToMonitoredTechnologiesApacheMapOutput() MonitoredTechnologiesApacheMapOutput {
	return i.ToMonitoredTechnologiesApacheMapOutputWithContext(context.Background())
}

func (i MonitoredTechnologiesApacheMap) ToMonitoredTechnologiesApacheMapOutputWithContext(ctx context.Context) MonitoredTechnologiesApacheMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoredTechnologiesApacheMapOutput)
}

type MonitoredTechnologiesApacheOutput struct{ *pulumi.OutputState }

func (MonitoredTechnologiesApacheOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoredTechnologiesApache)(nil)).Elem()
}

func (o MonitoredTechnologiesApacheOutput) ToMonitoredTechnologiesApacheOutput() MonitoredTechnologiesApacheOutput {
	return o
}

func (o MonitoredTechnologiesApacheOutput) ToMonitoredTechnologiesApacheOutputWithContext(ctx context.Context) MonitoredTechnologiesApacheOutput {
	return o
}

// This setting is enabled (`true`) or disabled (`false`)
func (o MonitoredTechnologiesApacheOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *MonitoredTechnologiesApache) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
func (o MonitoredTechnologiesApacheOutput) HostId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitoredTechnologiesApache) pulumi.StringPtrOutput { return v.HostId }).(pulumi.StringPtrOutput)
}

type MonitoredTechnologiesApacheArrayOutput struct{ *pulumi.OutputState }

func (MonitoredTechnologiesApacheArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MonitoredTechnologiesApache)(nil)).Elem()
}

func (o MonitoredTechnologiesApacheArrayOutput) ToMonitoredTechnologiesApacheArrayOutput() MonitoredTechnologiesApacheArrayOutput {
	return o
}

func (o MonitoredTechnologiesApacheArrayOutput) ToMonitoredTechnologiesApacheArrayOutputWithContext(ctx context.Context) MonitoredTechnologiesApacheArrayOutput {
	return o
}

func (o MonitoredTechnologiesApacheArrayOutput) Index(i pulumi.IntInput) MonitoredTechnologiesApacheOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MonitoredTechnologiesApache {
		return vs[0].([]*MonitoredTechnologiesApache)[vs[1].(int)]
	}).(MonitoredTechnologiesApacheOutput)
}

type MonitoredTechnologiesApacheMapOutput struct{ *pulumi.OutputState }

func (MonitoredTechnologiesApacheMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MonitoredTechnologiesApache)(nil)).Elem()
}

func (o MonitoredTechnologiesApacheMapOutput) ToMonitoredTechnologiesApacheMapOutput() MonitoredTechnologiesApacheMapOutput {
	return o
}

func (o MonitoredTechnologiesApacheMapOutput) ToMonitoredTechnologiesApacheMapOutputWithContext(ctx context.Context) MonitoredTechnologiesApacheMapOutput {
	return o
}

func (o MonitoredTechnologiesApacheMapOutput) MapIndex(k pulumi.StringInput) MonitoredTechnologiesApacheOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MonitoredTechnologiesApache {
		return vs[0].(map[string]*MonitoredTechnologiesApache)[vs[1].(string)]
	}).(MonitoredTechnologiesApacheOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoredTechnologiesApacheInput)(nil)).Elem(), &MonitoredTechnologiesApache{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoredTechnologiesApacheArrayInput)(nil)).Elem(), MonitoredTechnologiesApacheArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoredTechnologiesApacheMapInput)(nil)).Elem(), MonitoredTechnologiesApacheMap{})
	pulumi.RegisterOutputType(MonitoredTechnologiesApacheOutput{})
	pulumi.RegisterOutputType(MonitoredTechnologiesApacheArrayOutput{})
	pulumi.RegisterOutputType(MonitoredTechnologiesApacheMapOutput{})
}
