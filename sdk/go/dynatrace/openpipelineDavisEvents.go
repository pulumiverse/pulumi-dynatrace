// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OpenpipelineDavisEvents struct {
	pulumi.CustomResourceState

	// List of all ingest sources of the configuration
	Endpoints OpenpipelineDavisEventsEndpointsPtrOutput `pulumi:"endpoints"`
	// List of all pipelines of the configuration
	Pipelines OpenpipelineDavisEventsPipelinesPtrOutput `pulumi:"pipelines"`
	// Dynamic routing definition
	Routing OpenpipelineDavisEventsRoutingPtrOutput `pulumi:"routing"`
}

// NewOpenpipelineDavisEvents registers a new resource with the given unique name, arguments, and options.
func NewOpenpipelineDavisEvents(ctx *pulumi.Context,
	name string, args *OpenpipelineDavisEventsArgs, opts ...pulumi.ResourceOption) (*OpenpipelineDavisEvents, error) {
	if args == nil {
		args = &OpenpipelineDavisEventsArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenpipelineDavisEvents
	err := ctx.RegisterResource("dynatrace:index/openpipelineDavisEvents:OpenpipelineDavisEvents", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenpipelineDavisEvents gets an existing OpenpipelineDavisEvents resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenpipelineDavisEvents(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenpipelineDavisEventsState, opts ...pulumi.ResourceOption) (*OpenpipelineDavisEvents, error) {
	var resource OpenpipelineDavisEvents
	err := ctx.ReadResource("dynatrace:index/openpipelineDavisEvents:OpenpipelineDavisEvents", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenpipelineDavisEvents resources.
type openpipelineDavisEventsState struct {
	// List of all ingest sources of the configuration
	Endpoints *OpenpipelineDavisEventsEndpoints `pulumi:"endpoints"`
	// List of all pipelines of the configuration
	Pipelines *OpenpipelineDavisEventsPipelines `pulumi:"pipelines"`
	// Dynamic routing definition
	Routing *OpenpipelineDavisEventsRouting `pulumi:"routing"`
}

type OpenpipelineDavisEventsState struct {
	// List of all ingest sources of the configuration
	Endpoints OpenpipelineDavisEventsEndpointsPtrInput
	// List of all pipelines of the configuration
	Pipelines OpenpipelineDavisEventsPipelinesPtrInput
	// Dynamic routing definition
	Routing OpenpipelineDavisEventsRoutingPtrInput
}

func (OpenpipelineDavisEventsState) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineDavisEventsState)(nil)).Elem()
}

type openpipelineDavisEventsArgs struct {
	// List of all ingest sources of the configuration
	Endpoints *OpenpipelineDavisEventsEndpoints `pulumi:"endpoints"`
	// List of all pipelines of the configuration
	Pipelines *OpenpipelineDavisEventsPipelines `pulumi:"pipelines"`
	// Dynamic routing definition
	Routing *OpenpipelineDavisEventsRouting `pulumi:"routing"`
}

// The set of arguments for constructing a OpenpipelineDavisEvents resource.
type OpenpipelineDavisEventsArgs struct {
	// List of all ingest sources of the configuration
	Endpoints OpenpipelineDavisEventsEndpointsPtrInput
	// List of all pipelines of the configuration
	Pipelines OpenpipelineDavisEventsPipelinesPtrInput
	// Dynamic routing definition
	Routing OpenpipelineDavisEventsRoutingPtrInput
}

func (OpenpipelineDavisEventsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineDavisEventsArgs)(nil)).Elem()
}

type OpenpipelineDavisEventsInput interface {
	pulumi.Input

	ToOpenpipelineDavisEventsOutput() OpenpipelineDavisEventsOutput
	ToOpenpipelineDavisEventsOutputWithContext(ctx context.Context) OpenpipelineDavisEventsOutput
}

func (*OpenpipelineDavisEvents) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineDavisEvents)(nil)).Elem()
}

func (i *OpenpipelineDavisEvents) ToOpenpipelineDavisEventsOutput() OpenpipelineDavisEventsOutput {
	return i.ToOpenpipelineDavisEventsOutputWithContext(context.Background())
}

func (i *OpenpipelineDavisEvents) ToOpenpipelineDavisEventsOutputWithContext(ctx context.Context) OpenpipelineDavisEventsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineDavisEventsOutput)
}

// OpenpipelineDavisEventsArrayInput is an input type that accepts OpenpipelineDavisEventsArray and OpenpipelineDavisEventsArrayOutput values.
// You can construct a concrete instance of `OpenpipelineDavisEventsArrayInput` via:
//
//	OpenpipelineDavisEventsArray{ OpenpipelineDavisEventsArgs{...} }
type OpenpipelineDavisEventsArrayInput interface {
	pulumi.Input

	ToOpenpipelineDavisEventsArrayOutput() OpenpipelineDavisEventsArrayOutput
	ToOpenpipelineDavisEventsArrayOutputWithContext(context.Context) OpenpipelineDavisEventsArrayOutput
}

type OpenpipelineDavisEventsArray []OpenpipelineDavisEventsInput

func (OpenpipelineDavisEventsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineDavisEvents)(nil)).Elem()
}

func (i OpenpipelineDavisEventsArray) ToOpenpipelineDavisEventsArrayOutput() OpenpipelineDavisEventsArrayOutput {
	return i.ToOpenpipelineDavisEventsArrayOutputWithContext(context.Background())
}

func (i OpenpipelineDavisEventsArray) ToOpenpipelineDavisEventsArrayOutputWithContext(ctx context.Context) OpenpipelineDavisEventsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineDavisEventsArrayOutput)
}

// OpenpipelineDavisEventsMapInput is an input type that accepts OpenpipelineDavisEventsMap and OpenpipelineDavisEventsMapOutput values.
// You can construct a concrete instance of `OpenpipelineDavisEventsMapInput` via:
//
//	OpenpipelineDavisEventsMap{ "key": OpenpipelineDavisEventsArgs{...} }
type OpenpipelineDavisEventsMapInput interface {
	pulumi.Input

	ToOpenpipelineDavisEventsMapOutput() OpenpipelineDavisEventsMapOutput
	ToOpenpipelineDavisEventsMapOutputWithContext(context.Context) OpenpipelineDavisEventsMapOutput
}

type OpenpipelineDavisEventsMap map[string]OpenpipelineDavisEventsInput

func (OpenpipelineDavisEventsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineDavisEvents)(nil)).Elem()
}

func (i OpenpipelineDavisEventsMap) ToOpenpipelineDavisEventsMapOutput() OpenpipelineDavisEventsMapOutput {
	return i.ToOpenpipelineDavisEventsMapOutputWithContext(context.Background())
}

func (i OpenpipelineDavisEventsMap) ToOpenpipelineDavisEventsMapOutputWithContext(ctx context.Context) OpenpipelineDavisEventsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineDavisEventsMapOutput)
}

type OpenpipelineDavisEventsOutput struct{ *pulumi.OutputState }

func (OpenpipelineDavisEventsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineDavisEvents)(nil)).Elem()
}

func (o OpenpipelineDavisEventsOutput) ToOpenpipelineDavisEventsOutput() OpenpipelineDavisEventsOutput {
	return o
}

func (o OpenpipelineDavisEventsOutput) ToOpenpipelineDavisEventsOutputWithContext(ctx context.Context) OpenpipelineDavisEventsOutput {
	return o
}

// List of all ingest sources of the configuration
func (o OpenpipelineDavisEventsOutput) Endpoints() OpenpipelineDavisEventsEndpointsPtrOutput {
	return o.ApplyT(func(v *OpenpipelineDavisEvents) OpenpipelineDavisEventsEndpointsPtrOutput { return v.Endpoints }).(OpenpipelineDavisEventsEndpointsPtrOutput)
}

// List of all pipelines of the configuration
func (o OpenpipelineDavisEventsOutput) Pipelines() OpenpipelineDavisEventsPipelinesPtrOutput {
	return o.ApplyT(func(v *OpenpipelineDavisEvents) OpenpipelineDavisEventsPipelinesPtrOutput { return v.Pipelines }).(OpenpipelineDavisEventsPipelinesPtrOutput)
}

// Dynamic routing definition
func (o OpenpipelineDavisEventsOutput) Routing() OpenpipelineDavisEventsRoutingPtrOutput {
	return o.ApplyT(func(v *OpenpipelineDavisEvents) OpenpipelineDavisEventsRoutingPtrOutput { return v.Routing }).(OpenpipelineDavisEventsRoutingPtrOutput)
}

type OpenpipelineDavisEventsArrayOutput struct{ *pulumi.OutputState }

func (OpenpipelineDavisEventsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineDavisEvents)(nil)).Elem()
}

func (o OpenpipelineDavisEventsArrayOutput) ToOpenpipelineDavisEventsArrayOutput() OpenpipelineDavisEventsArrayOutput {
	return o
}

func (o OpenpipelineDavisEventsArrayOutput) ToOpenpipelineDavisEventsArrayOutputWithContext(ctx context.Context) OpenpipelineDavisEventsArrayOutput {
	return o
}

func (o OpenpipelineDavisEventsArrayOutput) Index(i pulumi.IntInput) OpenpipelineDavisEventsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenpipelineDavisEvents {
		return vs[0].([]*OpenpipelineDavisEvents)[vs[1].(int)]
	}).(OpenpipelineDavisEventsOutput)
}

type OpenpipelineDavisEventsMapOutput struct{ *pulumi.OutputState }

func (OpenpipelineDavisEventsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineDavisEvents)(nil)).Elem()
}

func (o OpenpipelineDavisEventsMapOutput) ToOpenpipelineDavisEventsMapOutput() OpenpipelineDavisEventsMapOutput {
	return o
}

func (o OpenpipelineDavisEventsMapOutput) ToOpenpipelineDavisEventsMapOutputWithContext(ctx context.Context) OpenpipelineDavisEventsMapOutput {
	return o
}

func (o OpenpipelineDavisEventsMapOutput) MapIndex(k pulumi.StringInput) OpenpipelineDavisEventsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenpipelineDavisEvents {
		return vs[0].(map[string]*OpenpipelineDavisEvents)[vs[1].(string)]
	}).(OpenpipelineDavisEventsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineDavisEventsInput)(nil)).Elem(), &OpenpipelineDavisEvents{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineDavisEventsArrayInput)(nil)).Elem(), OpenpipelineDavisEventsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineDavisEventsMapInput)(nil)).Elem(), OpenpipelineDavisEventsMap{})
	pulumi.RegisterOutputType(OpenpipelineDavisEventsOutput{})
	pulumi.RegisterOutputType(OpenpipelineDavisEventsArrayOutput{})
	pulumi.RegisterOutputType(OpenpipelineDavisEventsMapOutput{})
}
