// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type EulaSettings struct {
	pulumi.CustomResourceState

	// Display end user terms to new users logging in to the environment
	EnableEula pulumi.BoolOutput `pulumi:"enableEula"`
	// The scope of this setting (environment)
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
}

// NewEulaSettings registers a new resource with the given unique name, arguments, and options.
func NewEulaSettings(ctx *pulumi.Context,
	name string, args *EulaSettingsArgs, opts ...pulumi.ResourceOption) (*EulaSettings, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnableEula == nil {
		return nil, errors.New("invalid value for required argument 'EnableEula'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EulaSettings
	err := ctx.RegisterResource("dynatrace:index/eulaSettings:EulaSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEulaSettings gets an existing EulaSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEulaSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EulaSettingsState, opts ...pulumi.ResourceOption) (*EulaSettings, error) {
	var resource EulaSettings
	err := ctx.ReadResource("dynatrace:index/eulaSettings:EulaSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EulaSettings resources.
type eulaSettingsState struct {
	// Display end user terms to new users logging in to the environment
	EnableEula *bool `pulumi:"enableEula"`
	// The scope of this setting (environment)
	Scope *string `pulumi:"scope"`
}

type EulaSettingsState struct {
	// Display end user terms to new users logging in to the environment
	EnableEula pulumi.BoolPtrInput
	// The scope of this setting (environment)
	Scope pulumi.StringPtrInput
}

func (EulaSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*eulaSettingsState)(nil)).Elem()
}

type eulaSettingsArgs struct {
	// Display end user terms to new users logging in to the environment
	EnableEula bool `pulumi:"enableEula"`
	// The scope of this setting (environment)
	Scope *string `pulumi:"scope"`
}

// The set of arguments for constructing a EulaSettings resource.
type EulaSettingsArgs struct {
	// Display end user terms to new users logging in to the environment
	EnableEula pulumi.BoolInput
	// The scope of this setting (environment)
	Scope pulumi.StringPtrInput
}

func (EulaSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eulaSettingsArgs)(nil)).Elem()
}

type EulaSettingsInput interface {
	pulumi.Input

	ToEulaSettingsOutput() EulaSettingsOutput
	ToEulaSettingsOutputWithContext(ctx context.Context) EulaSettingsOutput
}

func (*EulaSettings) ElementType() reflect.Type {
	return reflect.TypeOf((**EulaSettings)(nil)).Elem()
}

func (i *EulaSettings) ToEulaSettingsOutput() EulaSettingsOutput {
	return i.ToEulaSettingsOutputWithContext(context.Background())
}

func (i *EulaSettings) ToEulaSettingsOutputWithContext(ctx context.Context) EulaSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EulaSettingsOutput)
}

// EulaSettingsArrayInput is an input type that accepts EulaSettingsArray and EulaSettingsArrayOutput values.
// You can construct a concrete instance of `EulaSettingsArrayInput` via:
//
//	EulaSettingsArray{ EulaSettingsArgs{...} }
type EulaSettingsArrayInput interface {
	pulumi.Input

	ToEulaSettingsArrayOutput() EulaSettingsArrayOutput
	ToEulaSettingsArrayOutputWithContext(context.Context) EulaSettingsArrayOutput
}

type EulaSettingsArray []EulaSettingsInput

func (EulaSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EulaSettings)(nil)).Elem()
}

func (i EulaSettingsArray) ToEulaSettingsArrayOutput() EulaSettingsArrayOutput {
	return i.ToEulaSettingsArrayOutputWithContext(context.Background())
}

func (i EulaSettingsArray) ToEulaSettingsArrayOutputWithContext(ctx context.Context) EulaSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EulaSettingsArrayOutput)
}

// EulaSettingsMapInput is an input type that accepts EulaSettingsMap and EulaSettingsMapOutput values.
// You can construct a concrete instance of `EulaSettingsMapInput` via:
//
//	EulaSettingsMap{ "key": EulaSettingsArgs{...} }
type EulaSettingsMapInput interface {
	pulumi.Input

	ToEulaSettingsMapOutput() EulaSettingsMapOutput
	ToEulaSettingsMapOutputWithContext(context.Context) EulaSettingsMapOutput
}

type EulaSettingsMap map[string]EulaSettingsInput

func (EulaSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EulaSettings)(nil)).Elem()
}

func (i EulaSettingsMap) ToEulaSettingsMapOutput() EulaSettingsMapOutput {
	return i.ToEulaSettingsMapOutputWithContext(context.Background())
}

func (i EulaSettingsMap) ToEulaSettingsMapOutputWithContext(ctx context.Context) EulaSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EulaSettingsMapOutput)
}

type EulaSettingsOutput struct{ *pulumi.OutputState }

func (EulaSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EulaSettings)(nil)).Elem()
}

func (o EulaSettingsOutput) ToEulaSettingsOutput() EulaSettingsOutput {
	return o
}

func (o EulaSettingsOutput) ToEulaSettingsOutputWithContext(ctx context.Context) EulaSettingsOutput {
	return o
}

// Display end user terms to new users logging in to the environment
func (o EulaSettingsOutput) EnableEula() pulumi.BoolOutput {
	return o.ApplyT(func(v *EulaSettings) pulumi.BoolOutput { return v.EnableEula }).(pulumi.BoolOutput)
}

// The scope of this setting (environment)
func (o EulaSettingsOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EulaSettings) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

type EulaSettingsArrayOutput struct{ *pulumi.OutputState }

func (EulaSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EulaSettings)(nil)).Elem()
}

func (o EulaSettingsArrayOutput) ToEulaSettingsArrayOutput() EulaSettingsArrayOutput {
	return o
}

func (o EulaSettingsArrayOutput) ToEulaSettingsArrayOutputWithContext(ctx context.Context) EulaSettingsArrayOutput {
	return o
}

func (o EulaSettingsArrayOutput) Index(i pulumi.IntInput) EulaSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EulaSettings {
		return vs[0].([]*EulaSettings)[vs[1].(int)]
	}).(EulaSettingsOutput)
}

type EulaSettingsMapOutput struct{ *pulumi.OutputState }

func (EulaSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EulaSettings)(nil)).Elem()
}

func (o EulaSettingsMapOutput) ToEulaSettingsMapOutput() EulaSettingsMapOutput {
	return o
}

func (o EulaSettingsMapOutput) ToEulaSettingsMapOutputWithContext(ctx context.Context) EulaSettingsMapOutput {
	return o
}

func (o EulaSettingsMapOutput) MapIndex(k pulumi.StringInput) EulaSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EulaSettings {
		return vs[0].(map[string]*EulaSettings)[vs[1].(string)]
	}).(EulaSettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EulaSettingsInput)(nil)).Elem(), &EulaSettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*EulaSettingsArrayInput)(nil)).Elem(), EulaSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EulaSettingsMapInput)(nil)).Elem(), EulaSettingsMap{})
	pulumi.RegisterOutputType(EulaSettingsOutput{})
	pulumi.RegisterOutputType(EulaSettingsArrayOutput{})
	pulumi.RegisterOutputType(EulaSettingsMapOutput{})
}
