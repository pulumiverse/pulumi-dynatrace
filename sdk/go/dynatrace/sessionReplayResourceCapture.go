// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type SessionReplayResourceCapture struct {
	pulumi.CustomResourceState

	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ApplicationId pulumi.StringPtrOutput `pulumi:"applicationId"`
	// (Field has overlap with `WebApplication`) When turned on, Dynatrace captures resources for up to 0.1% of user sessions recorded with Session Replay. For details, see [Resource capture](https://dt-url.net/sr-resource-capturing).
	EnableResourceCapturing pulumi.BoolOutput `pulumi:"enableResourceCapturing"`
	// (Field has overlap with `WebApplication`) Add exclusion rules to avoid the capture of resources from certain pages.
	ResourceCaptureUrlExclusionPatternLists pulumi.StringArrayOutput `pulumi:"resourceCaptureUrlExclusionPatternLists"`
}

// NewSessionReplayResourceCapture registers a new resource with the given unique name, arguments, and options.
func NewSessionReplayResourceCapture(ctx *pulumi.Context,
	name string, args *SessionReplayResourceCaptureArgs, opts ...pulumi.ResourceOption) (*SessionReplayResourceCapture, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnableResourceCapturing == nil {
		return nil, errors.New("invalid value for required argument 'EnableResourceCapturing'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SessionReplayResourceCapture
	err := ctx.RegisterResource("dynatrace:index/sessionReplayResourceCapture:SessionReplayResourceCapture", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSessionReplayResourceCapture gets an existing SessionReplayResourceCapture resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSessionReplayResourceCapture(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SessionReplayResourceCaptureState, opts ...pulumi.ResourceOption) (*SessionReplayResourceCapture, error) {
	var resource SessionReplayResourceCapture
	err := ctx.ReadResource("dynatrace:index/sessionReplayResourceCapture:SessionReplayResourceCapture", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SessionReplayResourceCapture resources.
type sessionReplayResourceCaptureState struct {
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ApplicationId *string `pulumi:"applicationId"`
	// (Field has overlap with `WebApplication`) When turned on, Dynatrace captures resources for up to 0.1% of user sessions recorded with Session Replay. For details, see [Resource capture](https://dt-url.net/sr-resource-capturing).
	EnableResourceCapturing *bool `pulumi:"enableResourceCapturing"`
	// (Field has overlap with `WebApplication`) Add exclusion rules to avoid the capture of resources from certain pages.
	ResourceCaptureUrlExclusionPatternLists []string `pulumi:"resourceCaptureUrlExclusionPatternLists"`
}

type SessionReplayResourceCaptureState struct {
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ApplicationId pulumi.StringPtrInput
	// (Field has overlap with `WebApplication`) When turned on, Dynatrace captures resources for up to 0.1% of user sessions recorded with Session Replay. For details, see [Resource capture](https://dt-url.net/sr-resource-capturing).
	EnableResourceCapturing pulumi.BoolPtrInput
	// (Field has overlap with `WebApplication`) Add exclusion rules to avoid the capture of resources from certain pages.
	ResourceCaptureUrlExclusionPatternLists pulumi.StringArrayInput
}

func (SessionReplayResourceCaptureState) ElementType() reflect.Type {
	return reflect.TypeOf((*sessionReplayResourceCaptureState)(nil)).Elem()
}

type sessionReplayResourceCaptureArgs struct {
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ApplicationId *string `pulumi:"applicationId"`
	// (Field has overlap with `WebApplication`) When turned on, Dynatrace captures resources for up to 0.1% of user sessions recorded with Session Replay. For details, see [Resource capture](https://dt-url.net/sr-resource-capturing).
	EnableResourceCapturing bool `pulumi:"enableResourceCapturing"`
	// (Field has overlap with `WebApplication`) Add exclusion rules to avoid the capture of resources from certain pages.
	ResourceCaptureUrlExclusionPatternLists []string `pulumi:"resourceCaptureUrlExclusionPatternLists"`
}

// The set of arguments for constructing a SessionReplayResourceCapture resource.
type SessionReplayResourceCaptureArgs struct {
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ApplicationId pulumi.StringPtrInput
	// (Field has overlap with `WebApplication`) When turned on, Dynatrace captures resources for up to 0.1% of user sessions recorded with Session Replay. For details, see [Resource capture](https://dt-url.net/sr-resource-capturing).
	EnableResourceCapturing pulumi.BoolInput
	// (Field has overlap with `WebApplication`) Add exclusion rules to avoid the capture of resources from certain pages.
	ResourceCaptureUrlExclusionPatternLists pulumi.StringArrayInput
}

func (SessionReplayResourceCaptureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sessionReplayResourceCaptureArgs)(nil)).Elem()
}

type SessionReplayResourceCaptureInput interface {
	pulumi.Input

	ToSessionReplayResourceCaptureOutput() SessionReplayResourceCaptureOutput
	ToSessionReplayResourceCaptureOutputWithContext(ctx context.Context) SessionReplayResourceCaptureOutput
}

func (*SessionReplayResourceCapture) ElementType() reflect.Type {
	return reflect.TypeOf((**SessionReplayResourceCapture)(nil)).Elem()
}

func (i *SessionReplayResourceCapture) ToSessionReplayResourceCaptureOutput() SessionReplayResourceCaptureOutput {
	return i.ToSessionReplayResourceCaptureOutputWithContext(context.Background())
}

func (i *SessionReplayResourceCapture) ToSessionReplayResourceCaptureOutputWithContext(ctx context.Context) SessionReplayResourceCaptureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SessionReplayResourceCaptureOutput)
}

// SessionReplayResourceCaptureArrayInput is an input type that accepts SessionReplayResourceCaptureArray and SessionReplayResourceCaptureArrayOutput values.
// You can construct a concrete instance of `SessionReplayResourceCaptureArrayInput` via:
//
//	SessionReplayResourceCaptureArray{ SessionReplayResourceCaptureArgs{...} }
type SessionReplayResourceCaptureArrayInput interface {
	pulumi.Input

	ToSessionReplayResourceCaptureArrayOutput() SessionReplayResourceCaptureArrayOutput
	ToSessionReplayResourceCaptureArrayOutputWithContext(context.Context) SessionReplayResourceCaptureArrayOutput
}

type SessionReplayResourceCaptureArray []SessionReplayResourceCaptureInput

func (SessionReplayResourceCaptureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SessionReplayResourceCapture)(nil)).Elem()
}

func (i SessionReplayResourceCaptureArray) ToSessionReplayResourceCaptureArrayOutput() SessionReplayResourceCaptureArrayOutput {
	return i.ToSessionReplayResourceCaptureArrayOutputWithContext(context.Background())
}

func (i SessionReplayResourceCaptureArray) ToSessionReplayResourceCaptureArrayOutputWithContext(ctx context.Context) SessionReplayResourceCaptureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SessionReplayResourceCaptureArrayOutput)
}

// SessionReplayResourceCaptureMapInput is an input type that accepts SessionReplayResourceCaptureMap and SessionReplayResourceCaptureMapOutput values.
// You can construct a concrete instance of `SessionReplayResourceCaptureMapInput` via:
//
//	SessionReplayResourceCaptureMap{ "key": SessionReplayResourceCaptureArgs{...} }
type SessionReplayResourceCaptureMapInput interface {
	pulumi.Input

	ToSessionReplayResourceCaptureMapOutput() SessionReplayResourceCaptureMapOutput
	ToSessionReplayResourceCaptureMapOutputWithContext(context.Context) SessionReplayResourceCaptureMapOutput
}

type SessionReplayResourceCaptureMap map[string]SessionReplayResourceCaptureInput

func (SessionReplayResourceCaptureMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SessionReplayResourceCapture)(nil)).Elem()
}

func (i SessionReplayResourceCaptureMap) ToSessionReplayResourceCaptureMapOutput() SessionReplayResourceCaptureMapOutput {
	return i.ToSessionReplayResourceCaptureMapOutputWithContext(context.Background())
}

func (i SessionReplayResourceCaptureMap) ToSessionReplayResourceCaptureMapOutputWithContext(ctx context.Context) SessionReplayResourceCaptureMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SessionReplayResourceCaptureMapOutput)
}

type SessionReplayResourceCaptureOutput struct{ *pulumi.OutputState }

func (SessionReplayResourceCaptureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SessionReplayResourceCapture)(nil)).Elem()
}

func (o SessionReplayResourceCaptureOutput) ToSessionReplayResourceCaptureOutput() SessionReplayResourceCaptureOutput {
	return o
}

func (o SessionReplayResourceCaptureOutput) ToSessionReplayResourceCaptureOutputWithContext(ctx context.Context) SessionReplayResourceCaptureOutput {
	return o
}

// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
func (o SessionReplayResourceCaptureOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SessionReplayResourceCapture) pulumi.StringPtrOutput { return v.ApplicationId }).(pulumi.StringPtrOutput)
}

// (Field has overlap with `WebApplication`) When turned on, Dynatrace captures resources for up to 0.1% of user sessions recorded with Session Replay. For details, see [Resource capture](https://dt-url.net/sr-resource-capturing).
func (o SessionReplayResourceCaptureOutput) EnableResourceCapturing() pulumi.BoolOutput {
	return o.ApplyT(func(v *SessionReplayResourceCapture) pulumi.BoolOutput { return v.EnableResourceCapturing }).(pulumi.BoolOutput)
}

// (Field has overlap with `WebApplication`) Add exclusion rules to avoid the capture of resources from certain pages.
func (o SessionReplayResourceCaptureOutput) ResourceCaptureUrlExclusionPatternLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SessionReplayResourceCapture) pulumi.StringArrayOutput {
		return v.ResourceCaptureUrlExclusionPatternLists
	}).(pulumi.StringArrayOutput)
}

type SessionReplayResourceCaptureArrayOutput struct{ *pulumi.OutputState }

func (SessionReplayResourceCaptureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SessionReplayResourceCapture)(nil)).Elem()
}

func (o SessionReplayResourceCaptureArrayOutput) ToSessionReplayResourceCaptureArrayOutput() SessionReplayResourceCaptureArrayOutput {
	return o
}

func (o SessionReplayResourceCaptureArrayOutput) ToSessionReplayResourceCaptureArrayOutputWithContext(ctx context.Context) SessionReplayResourceCaptureArrayOutput {
	return o
}

func (o SessionReplayResourceCaptureArrayOutput) Index(i pulumi.IntInput) SessionReplayResourceCaptureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SessionReplayResourceCapture {
		return vs[0].([]*SessionReplayResourceCapture)[vs[1].(int)]
	}).(SessionReplayResourceCaptureOutput)
}

type SessionReplayResourceCaptureMapOutput struct{ *pulumi.OutputState }

func (SessionReplayResourceCaptureMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SessionReplayResourceCapture)(nil)).Elem()
}

func (o SessionReplayResourceCaptureMapOutput) ToSessionReplayResourceCaptureMapOutput() SessionReplayResourceCaptureMapOutput {
	return o
}

func (o SessionReplayResourceCaptureMapOutput) ToSessionReplayResourceCaptureMapOutputWithContext(ctx context.Context) SessionReplayResourceCaptureMapOutput {
	return o
}

func (o SessionReplayResourceCaptureMapOutput) MapIndex(k pulumi.StringInput) SessionReplayResourceCaptureOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SessionReplayResourceCapture {
		return vs[0].(map[string]*SessionReplayResourceCapture)[vs[1].(string)]
	}).(SessionReplayResourceCaptureOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SessionReplayResourceCaptureInput)(nil)).Elem(), &SessionReplayResourceCapture{})
	pulumi.RegisterInputType(reflect.TypeOf((*SessionReplayResourceCaptureArrayInput)(nil)).Elem(), SessionReplayResourceCaptureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SessionReplayResourceCaptureMapInput)(nil)).Elem(), SessionReplayResourceCaptureMap{})
	pulumi.RegisterOutputType(SessionReplayResourceCaptureOutput{})
	pulumi.RegisterOutputType(SessionReplayResourceCaptureArrayOutput{})
	pulumi.RegisterOutputType(SessionReplayResourceCaptureMapOutput{})
}
