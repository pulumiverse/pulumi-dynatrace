// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

// > `AutotagV2` is the primary resource to manage auto tags. This particular resource allows you to manage a subset of tags of a given auto tag ID. The benefit of this is that it allows the flexibility of multiple users to manage the same automatically applied tag.
//
// > This resource requires the API token scopes **Read settings** (`settings.read`) and **Write settings** (`settings.write`)
//
// ## Dynatrace Documentation
//
// - Define and apply tags - https://www.dynatrace.com/support/help/how-to-use-dynatrace/tags-and-metadata/setup/how-to-define-tags
//
// - Settings API - https://www.dynatrace.com/support/help/dynatrace-api/environment-api/settings (schemaId: `builtin:tags.auto-tagging`)
//
// The full documentation of the export feature is available [here](https://dt-url.net/h203qmc).
//
// ## Resource Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sampleAutotagV2, err := dynatrace.NewAutotagV2(ctx, "sampleAutotagV2", &dynatrace.AutotagV2Args{
//				RulesMaintainedExternally: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dynatrace.NewAutotagRules(ctx, "sampleAutotagRules", &dynatrace.AutotagRulesArgs{
//				AutoTagId: sampleAutotagV2.ID(),
//				Rules: &dynatrace.AutotagRulesRulesArgs{
//					Rules: dynatrace.AutotagRulesRulesRuleArray{
//						&dynatrace.AutotagRulesRulesRuleArgs{
//							Type:               pulumi.String("SELECTOR"),
//							Enabled:            pulumi.Bool(true),
//							EntitySelector:     pulumi.String("type(SERVICE),tag(sample)"),
//							ValueFormat:        pulumi.String("disabled"),
//							ValueNormalization: pulumi.String("Leave text as-is"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type AutotagRules struct {
	pulumi.CustomResourceState

	// Automatically applied tag ID
	AutoTagId pulumi.StringOutput `pulumi:"autoTagId"`
	// For internal use: current state of rules in JSON format
	CurrentState pulumi.StringOutput `pulumi:"currentState"`
	// Rules
	Rules AutotagRulesRulesPtrOutput `pulumi:"rules"`
}

// NewAutotagRules registers a new resource with the given unique name, arguments, and options.
func NewAutotagRules(ctx *pulumi.Context,
	name string, args *AutotagRulesArgs, opts ...pulumi.ResourceOption) (*AutotagRules, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AutoTagId == nil {
		return nil, errors.New("invalid value for required argument 'AutoTagId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AutotagRules
	err := ctx.RegisterResource("dynatrace:index/autotagRules:AutotagRules", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAutotagRules gets an existing AutotagRules resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAutotagRules(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AutotagRulesState, opts ...pulumi.ResourceOption) (*AutotagRules, error) {
	var resource AutotagRules
	err := ctx.ReadResource("dynatrace:index/autotagRules:AutotagRules", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AutotagRules resources.
type autotagRulesState struct {
	// Automatically applied tag ID
	AutoTagId *string `pulumi:"autoTagId"`
	// For internal use: current state of rules in JSON format
	CurrentState *string `pulumi:"currentState"`
	// Rules
	Rules *AutotagRulesRules `pulumi:"rules"`
}

type AutotagRulesState struct {
	// Automatically applied tag ID
	AutoTagId pulumi.StringPtrInput
	// For internal use: current state of rules in JSON format
	CurrentState pulumi.StringPtrInput
	// Rules
	Rules AutotagRulesRulesPtrInput
}

func (AutotagRulesState) ElementType() reflect.Type {
	return reflect.TypeOf((*autotagRulesState)(nil)).Elem()
}

type autotagRulesArgs struct {
	// Automatically applied tag ID
	AutoTagId string `pulumi:"autoTagId"`
	// For internal use: current state of rules in JSON format
	CurrentState *string `pulumi:"currentState"`
	// Rules
	Rules *AutotagRulesRules `pulumi:"rules"`
}

// The set of arguments for constructing a AutotagRules resource.
type AutotagRulesArgs struct {
	// Automatically applied tag ID
	AutoTagId pulumi.StringInput
	// For internal use: current state of rules in JSON format
	CurrentState pulumi.StringPtrInput
	// Rules
	Rules AutotagRulesRulesPtrInput
}

func (AutotagRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*autotagRulesArgs)(nil)).Elem()
}

type AutotagRulesInput interface {
	pulumi.Input

	ToAutotagRulesOutput() AutotagRulesOutput
	ToAutotagRulesOutputWithContext(ctx context.Context) AutotagRulesOutput
}

func (*AutotagRules) ElementType() reflect.Type {
	return reflect.TypeOf((**AutotagRules)(nil)).Elem()
}

func (i *AutotagRules) ToAutotagRulesOutput() AutotagRulesOutput {
	return i.ToAutotagRulesOutputWithContext(context.Background())
}

func (i *AutotagRules) ToAutotagRulesOutputWithContext(ctx context.Context) AutotagRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutotagRulesOutput)
}

// AutotagRulesArrayInput is an input type that accepts AutotagRulesArray and AutotagRulesArrayOutput values.
// You can construct a concrete instance of `AutotagRulesArrayInput` via:
//
//	AutotagRulesArray{ AutotagRulesArgs{...} }
type AutotagRulesArrayInput interface {
	pulumi.Input

	ToAutotagRulesArrayOutput() AutotagRulesArrayOutput
	ToAutotagRulesArrayOutputWithContext(context.Context) AutotagRulesArrayOutput
}

type AutotagRulesArray []AutotagRulesInput

func (AutotagRulesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AutotagRules)(nil)).Elem()
}

func (i AutotagRulesArray) ToAutotagRulesArrayOutput() AutotagRulesArrayOutput {
	return i.ToAutotagRulesArrayOutputWithContext(context.Background())
}

func (i AutotagRulesArray) ToAutotagRulesArrayOutputWithContext(ctx context.Context) AutotagRulesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutotagRulesArrayOutput)
}

// AutotagRulesMapInput is an input type that accepts AutotagRulesMap and AutotagRulesMapOutput values.
// You can construct a concrete instance of `AutotagRulesMapInput` via:
//
//	AutotagRulesMap{ "key": AutotagRulesArgs{...} }
type AutotagRulesMapInput interface {
	pulumi.Input

	ToAutotagRulesMapOutput() AutotagRulesMapOutput
	ToAutotagRulesMapOutputWithContext(context.Context) AutotagRulesMapOutput
}

type AutotagRulesMap map[string]AutotagRulesInput

func (AutotagRulesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AutotagRules)(nil)).Elem()
}

func (i AutotagRulesMap) ToAutotagRulesMapOutput() AutotagRulesMapOutput {
	return i.ToAutotagRulesMapOutputWithContext(context.Background())
}

func (i AutotagRulesMap) ToAutotagRulesMapOutputWithContext(ctx context.Context) AutotagRulesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutotagRulesMapOutput)
}

type AutotagRulesOutput struct{ *pulumi.OutputState }

func (AutotagRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutotagRules)(nil)).Elem()
}

func (o AutotagRulesOutput) ToAutotagRulesOutput() AutotagRulesOutput {
	return o
}

func (o AutotagRulesOutput) ToAutotagRulesOutputWithContext(ctx context.Context) AutotagRulesOutput {
	return o
}

// Automatically applied tag ID
func (o AutotagRulesOutput) AutoTagId() pulumi.StringOutput {
	return o.ApplyT(func(v *AutotagRules) pulumi.StringOutput { return v.AutoTagId }).(pulumi.StringOutput)
}

// For internal use: current state of rules in JSON format
func (o AutotagRulesOutput) CurrentState() pulumi.StringOutput {
	return o.ApplyT(func(v *AutotagRules) pulumi.StringOutput { return v.CurrentState }).(pulumi.StringOutput)
}

// Rules
func (o AutotagRulesOutput) Rules() AutotagRulesRulesPtrOutput {
	return o.ApplyT(func(v *AutotagRules) AutotagRulesRulesPtrOutput { return v.Rules }).(AutotagRulesRulesPtrOutput)
}

type AutotagRulesArrayOutput struct{ *pulumi.OutputState }

func (AutotagRulesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AutotagRules)(nil)).Elem()
}

func (o AutotagRulesArrayOutput) ToAutotagRulesArrayOutput() AutotagRulesArrayOutput {
	return o
}

func (o AutotagRulesArrayOutput) ToAutotagRulesArrayOutputWithContext(ctx context.Context) AutotagRulesArrayOutput {
	return o
}

func (o AutotagRulesArrayOutput) Index(i pulumi.IntInput) AutotagRulesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AutotagRules {
		return vs[0].([]*AutotagRules)[vs[1].(int)]
	}).(AutotagRulesOutput)
}

type AutotagRulesMapOutput struct{ *pulumi.OutputState }

func (AutotagRulesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AutotagRules)(nil)).Elem()
}

func (o AutotagRulesMapOutput) ToAutotagRulesMapOutput() AutotagRulesMapOutput {
	return o
}

func (o AutotagRulesMapOutput) ToAutotagRulesMapOutputWithContext(ctx context.Context) AutotagRulesMapOutput {
	return o
}

func (o AutotagRulesMapOutput) MapIndex(k pulumi.StringInput) AutotagRulesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AutotagRules {
		return vs[0].(map[string]*AutotagRules)[vs[1].(string)]
	}).(AutotagRulesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AutotagRulesInput)(nil)).Elem(), &AutotagRules{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutotagRulesArrayInput)(nil)).Elem(), AutotagRulesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutotagRulesMapInput)(nil)).Elem(), AutotagRulesMap{})
	pulumi.RegisterOutputType(AutotagRulesOutput{})
	pulumi.RegisterOutputType(AutotagRulesArrayOutput{})
	pulumi.RegisterOutputType(AutotagRulesMapOutput{})
}
