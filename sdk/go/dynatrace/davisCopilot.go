// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type DavisCopilot struct {
	pulumi.CustomResourceState

	// You can exclude specific data buckets and tables from the Davis CoPilot semantic index. Learn more about [configuring data access](https://dt-url.net/lc62i1q).
	BlocklistEntries DavisCopilotBlocklistEntriesPtrOutput `pulumi:"blocklistEntries"`
	// Please note that once enabled, you still need to [assign permissions](https://dt-url.net/rh22idn) to the relevant user groups.
	EnableCopilot pulumi.BoolOutput `pulumi:"enableCopilot"`
	// You can enrich Davis CoPilot with your environment data. This lets you generate more accurate queries that identify and reference relevant entities, events, spans, logs, and metrics from your environment. Once enabled, Davis CoPilot periodically scans your Grail data to create its own semantic index. Please note, it can take up to 24 hours to reflect changes. Learn more about [environment-aware queries](https://dt-url.net/4g42iu7).
	EnableTenantAwareDataMining pulumi.BoolPtrOutput `pulumi:"enableTenantAwareDataMining"`
}

// NewDavisCopilot registers a new resource with the given unique name, arguments, and options.
func NewDavisCopilot(ctx *pulumi.Context,
	name string, args *DavisCopilotArgs, opts ...pulumi.ResourceOption) (*DavisCopilot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnableCopilot == nil {
		return nil, errors.New("invalid value for required argument 'EnableCopilot'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DavisCopilot
	err := ctx.RegisterResource("dynatrace:index/davisCopilot:DavisCopilot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDavisCopilot gets an existing DavisCopilot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDavisCopilot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DavisCopilotState, opts ...pulumi.ResourceOption) (*DavisCopilot, error) {
	var resource DavisCopilot
	err := ctx.ReadResource("dynatrace:index/davisCopilot:DavisCopilot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DavisCopilot resources.
type davisCopilotState struct {
	// You can exclude specific data buckets and tables from the Davis CoPilot semantic index. Learn more about [configuring data access](https://dt-url.net/lc62i1q).
	BlocklistEntries *DavisCopilotBlocklistEntries `pulumi:"blocklistEntries"`
	// Please note that once enabled, you still need to [assign permissions](https://dt-url.net/rh22idn) to the relevant user groups.
	EnableCopilot *bool `pulumi:"enableCopilot"`
	// You can enrich Davis CoPilot with your environment data. This lets you generate more accurate queries that identify and reference relevant entities, events, spans, logs, and metrics from your environment. Once enabled, Davis CoPilot periodically scans your Grail data to create its own semantic index. Please note, it can take up to 24 hours to reflect changes. Learn more about [environment-aware queries](https://dt-url.net/4g42iu7).
	EnableTenantAwareDataMining *bool `pulumi:"enableTenantAwareDataMining"`
}

type DavisCopilotState struct {
	// You can exclude specific data buckets and tables from the Davis CoPilot semantic index. Learn more about [configuring data access](https://dt-url.net/lc62i1q).
	BlocklistEntries DavisCopilotBlocklistEntriesPtrInput
	// Please note that once enabled, you still need to [assign permissions](https://dt-url.net/rh22idn) to the relevant user groups.
	EnableCopilot pulumi.BoolPtrInput
	// You can enrich Davis CoPilot with your environment data. This lets you generate more accurate queries that identify and reference relevant entities, events, spans, logs, and metrics from your environment. Once enabled, Davis CoPilot periodically scans your Grail data to create its own semantic index. Please note, it can take up to 24 hours to reflect changes. Learn more about [environment-aware queries](https://dt-url.net/4g42iu7).
	EnableTenantAwareDataMining pulumi.BoolPtrInput
}

func (DavisCopilotState) ElementType() reflect.Type {
	return reflect.TypeOf((*davisCopilotState)(nil)).Elem()
}

type davisCopilotArgs struct {
	// You can exclude specific data buckets and tables from the Davis CoPilot semantic index. Learn more about [configuring data access](https://dt-url.net/lc62i1q).
	BlocklistEntries *DavisCopilotBlocklistEntries `pulumi:"blocklistEntries"`
	// Please note that once enabled, you still need to [assign permissions](https://dt-url.net/rh22idn) to the relevant user groups.
	EnableCopilot bool `pulumi:"enableCopilot"`
	// You can enrich Davis CoPilot with your environment data. This lets you generate more accurate queries that identify and reference relevant entities, events, spans, logs, and metrics from your environment. Once enabled, Davis CoPilot periodically scans your Grail data to create its own semantic index. Please note, it can take up to 24 hours to reflect changes. Learn more about [environment-aware queries](https://dt-url.net/4g42iu7).
	EnableTenantAwareDataMining *bool `pulumi:"enableTenantAwareDataMining"`
}

// The set of arguments for constructing a DavisCopilot resource.
type DavisCopilotArgs struct {
	// You can exclude specific data buckets and tables from the Davis CoPilot semantic index. Learn more about [configuring data access](https://dt-url.net/lc62i1q).
	BlocklistEntries DavisCopilotBlocklistEntriesPtrInput
	// Please note that once enabled, you still need to [assign permissions](https://dt-url.net/rh22idn) to the relevant user groups.
	EnableCopilot pulumi.BoolInput
	// You can enrich Davis CoPilot with your environment data. This lets you generate more accurate queries that identify and reference relevant entities, events, spans, logs, and metrics from your environment. Once enabled, Davis CoPilot periodically scans your Grail data to create its own semantic index. Please note, it can take up to 24 hours to reflect changes. Learn more about [environment-aware queries](https://dt-url.net/4g42iu7).
	EnableTenantAwareDataMining pulumi.BoolPtrInput
}

func (DavisCopilotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*davisCopilotArgs)(nil)).Elem()
}

type DavisCopilotInput interface {
	pulumi.Input

	ToDavisCopilotOutput() DavisCopilotOutput
	ToDavisCopilotOutputWithContext(ctx context.Context) DavisCopilotOutput
}

func (*DavisCopilot) ElementType() reflect.Type {
	return reflect.TypeOf((**DavisCopilot)(nil)).Elem()
}

func (i *DavisCopilot) ToDavisCopilotOutput() DavisCopilotOutput {
	return i.ToDavisCopilotOutputWithContext(context.Background())
}

func (i *DavisCopilot) ToDavisCopilotOutputWithContext(ctx context.Context) DavisCopilotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DavisCopilotOutput)
}

// DavisCopilotArrayInput is an input type that accepts DavisCopilotArray and DavisCopilotArrayOutput values.
// You can construct a concrete instance of `DavisCopilotArrayInput` via:
//
//	DavisCopilotArray{ DavisCopilotArgs{...} }
type DavisCopilotArrayInput interface {
	pulumi.Input

	ToDavisCopilotArrayOutput() DavisCopilotArrayOutput
	ToDavisCopilotArrayOutputWithContext(context.Context) DavisCopilotArrayOutput
}

type DavisCopilotArray []DavisCopilotInput

func (DavisCopilotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DavisCopilot)(nil)).Elem()
}

func (i DavisCopilotArray) ToDavisCopilotArrayOutput() DavisCopilotArrayOutput {
	return i.ToDavisCopilotArrayOutputWithContext(context.Background())
}

func (i DavisCopilotArray) ToDavisCopilotArrayOutputWithContext(ctx context.Context) DavisCopilotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DavisCopilotArrayOutput)
}

// DavisCopilotMapInput is an input type that accepts DavisCopilotMap and DavisCopilotMapOutput values.
// You can construct a concrete instance of `DavisCopilotMapInput` via:
//
//	DavisCopilotMap{ "key": DavisCopilotArgs{...} }
type DavisCopilotMapInput interface {
	pulumi.Input

	ToDavisCopilotMapOutput() DavisCopilotMapOutput
	ToDavisCopilotMapOutputWithContext(context.Context) DavisCopilotMapOutput
}

type DavisCopilotMap map[string]DavisCopilotInput

func (DavisCopilotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DavisCopilot)(nil)).Elem()
}

func (i DavisCopilotMap) ToDavisCopilotMapOutput() DavisCopilotMapOutput {
	return i.ToDavisCopilotMapOutputWithContext(context.Background())
}

func (i DavisCopilotMap) ToDavisCopilotMapOutputWithContext(ctx context.Context) DavisCopilotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DavisCopilotMapOutput)
}

type DavisCopilotOutput struct{ *pulumi.OutputState }

func (DavisCopilotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DavisCopilot)(nil)).Elem()
}

func (o DavisCopilotOutput) ToDavisCopilotOutput() DavisCopilotOutput {
	return o
}

func (o DavisCopilotOutput) ToDavisCopilotOutputWithContext(ctx context.Context) DavisCopilotOutput {
	return o
}

// You can exclude specific data buckets and tables from the Davis CoPilot semantic index. Learn more about [configuring data access](https://dt-url.net/lc62i1q).
func (o DavisCopilotOutput) BlocklistEntries() DavisCopilotBlocklistEntriesPtrOutput {
	return o.ApplyT(func(v *DavisCopilot) DavisCopilotBlocklistEntriesPtrOutput { return v.BlocklistEntries }).(DavisCopilotBlocklistEntriesPtrOutput)
}

// Please note that once enabled, you still need to [assign permissions](https://dt-url.net/rh22idn) to the relevant user groups.
func (o DavisCopilotOutput) EnableCopilot() pulumi.BoolOutput {
	return o.ApplyT(func(v *DavisCopilot) pulumi.BoolOutput { return v.EnableCopilot }).(pulumi.BoolOutput)
}

// You can enrich Davis CoPilot with your environment data. This lets you generate more accurate queries that identify and reference relevant entities, events, spans, logs, and metrics from your environment. Once enabled, Davis CoPilot periodically scans your Grail data to create its own semantic index. Please note, it can take up to 24 hours to reflect changes. Learn more about [environment-aware queries](https://dt-url.net/4g42iu7).
func (o DavisCopilotOutput) EnableTenantAwareDataMining() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DavisCopilot) pulumi.BoolPtrOutput { return v.EnableTenantAwareDataMining }).(pulumi.BoolPtrOutput)
}

type DavisCopilotArrayOutput struct{ *pulumi.OutputState }

func (DavisCopilotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DavisCopilot)(nil)).Elem()
}

func (o DavisCopilotArrayOutput) ToDavisCopilotArrayOutput() DavisCopilotArrayOutput {
	return o
}

func (o DavisCopilotArrayOutput) ToDavisCopilotArrayOutputWithContext(ctx context.Context) DavisCopilotArrayOutput {
	return o
}

func (o DavisCopilotArrayOutput) Index(i pulumi.IntInput) DavisCopilotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DavisCopilot {
		return vs[0].([]*DavisCopilot)[vs[1].(int)]
	}).(DavisCopilotOutput)
}

type DavisCopilotMapOutput struct{ *pulumi.OutputState }

func (DavisCopilotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DavisCopilot)(nil)).Elem()
}

func (o DavisCopilotMapOutput) ToDavisCopilotMapOutput() DavisCopilotMapOutput {
	return o
}

func (o DavisCopilotMapOutput) ToDavisCopilotMapOutputWithContext(ctx context.Context) DavisCopilotMapOutput {
	return o
}

func (o DavisCopilotMapOutput) MapIndex(k pulumi.StringInput) DavisCopilotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DavisCopilot {
		return vs[0].(map[string]*DavisCopilot)[vs[1].(string)]
	}).(DavisCopilotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DavisCopilotInput)(nil)).Elem(), &DavisCopilot{})
	pulumi.RegisterInputType(reflect.TypeOf((*DavisCopilotArrayInput)(nil)).Elem(), DavisCopilotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DavisCopilotMapInput)(nil)).Elem(), DavisCopilotMap{})
	pulumi.RegisterOutputType(DavisCopilotOutput{})
	pulumi.RegisterOutputType(DavisCopilotArrayOutput{})
	pulumi.RegisterOutputType(DavisCopilotMapOutput{})
}
