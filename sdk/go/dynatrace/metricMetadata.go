// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type MetricMetadata struct {
	pulumi.CustomResourceState

	// Description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Define metadata per metric dimension.
	Dimensions MetricMetadataDimensionsPtrOutput `pulumi:"dimensions"`
	// Display name
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// The scope of this setting (metric)
	MetricId pulumi.StringOutput `pulumi:"metricId"`
	// Metric properties
	MetricProperties MetricMetadataMetricPropertiesPtrOutput `pulumi:"metricProperties"`
	// Specifies which entity dimension should be used as the primary dimension. The property can only be configured for metrics ingested with the Metrics API.
	SourceEntityType pulumi.StringPtrOutput `pulumi:"sourceEntityType"`
	// Tags
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Unit
	Unit pulumi.StringOutput `pulumi:"unit"`
	// The raw value is stored in bits or bytes. The user interface can display it in these numeral systems:
	UnitDisplayFormat pulumi.StringPtrOutput `pulumi:"unitDisplayFormat"`
}

// NewMetricMetadata registers a new resource with the given unique name, arguments, and options.
func NewMetricMetadata(ctx *pulumi.Context,
	name string, args *MetricMetadataArgs, opts ...pulumi.ResourceOption) (*MetricMetadata, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MetricId == nil {
		return nil, errors.New("invalid value for required argument 'MetricId'")
	}
	if args.Unit == nil {
		return nil, errors.New("invalid value for required argument 'Unit'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MetricMetadata
	err := ctx.RegisterResource("dynatrace:index/metricMetadata:MetricMetadata", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetricMetadata gets an existing MetricMetadata resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetricMetadata(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetricMetadataState, opts ...pulumi.ResourceOption) (*MetricMetadata, error) {
	var resource MetricMetadata
	err := ctx.ReadResource("dynatrace:index/metricMetadata:MetricMetadata", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MetricMetadata resources.
type metricMetadataState struct {
	// Description
	Description *string `pulumi:"description"`
	// Define metadata per metric dimension.
	Dimensions *MetricMetadataDimensions `pulumi:"dimensions"`
	// Display name
	DisplayName *string `pulumi:"displayName"`
	// The scope of this setting (metric)
	MetricId *string `pulumi:"metricId"`
	// Metric properties
	MetricProperties *MetricMetadataMetricProperties `pulumi:"metricProperties"`
	// Specifies which entity dimension should be used as the primary dimension. The property can only be configured for metrics ingested with the Metrics API.
	SourceEntityType *string `pulumi:"sourceEntityType"`
	// Tags
	Tags []string `pulumi:"tags"`
	// Unit
	Unit *string `pulumi:"unit"`
	// The raw value is stored in bits or bytes. The user interface can display it in these numeral systems:
	UnitDisplayFormat *string `pulumi:"unitDisplayFormat"`
}

type MetricMetadataState struct {
	// Description
	Description pulumi.StringPtrInput
	// Define metadata per metric dimension.
	Dimensions MetricMetadataDimensionsPtrInput
	// Display name
	DisplayName pulumi.StringPtrInput
	// The scope of this setting (metric)
	MetricId pulumi.StringPtrInput
	// Metric properties
	MetricProperties MetricMetadataMetricPropertiesPtrInput
	// Specifies which entity dimension should be used as the primary dimension. The property can only be configured for metrics ingested with the Metrics API.
	SourceEntityType pulumi.StringPtrInput
	// Tags
	Tags pulumi.StringArrayInput
	// Unit
	Unit pulumi.StringPtrInput
	// The raw value is stored in bits or bytes. The user interface can display it in these numeral systems:
	UnitDisplayFormat pulumi.StringPtrInput
}

func (MetricMetadataState) ElementType() reflect.Type {
	return reflect.TypeOf((*metricMetadataState)(nil)).Elem()
}

type metricMetadataArgs struct {
	// Description
	Description *string `pulumi:"description"`
	// Define metadata per metric dimension.
	Dimensions *MetricMetadataDimensions `pulumi:"dimensions"`
	// Display name
	DisplayName *string `pulumi:"displayName"`
	// The scope of this setting (metric)
	MetricId string `pulumi:"metricId"`
	// Metric properties
	MetricProperties *MetricMetadataMetricProperties `pulumi:"metricProperties"`
	// Specifies which entity dimension should be used as the primary dimension. The property can only be configured for metrics ingested with the Metrics API.
	SourceEntityType *string `pulumi:"sourceEntityType"`
	// Tags
	Tags []string `pulumi:"tags"`
	// Unit
	Unit string `pulumi:"unit"`
	// The raw value is stored in bits or bytes. The user interface can display it in these numeral systems:
	UnitDisplayFormat *string `pulumi:"unitDisplayFormat"`
}

// The set of arguments for constructing a MetricMetadata resource.
type MetricMetadataArgs struct {
	// Description
	Description pulumi.StringPtrInput
	// Define metadata per metric dimension.
	Dimensions MetricMetadataDimensionsPtrInput
	// Display name
	DisplayName pulumi.StringPtrInput
	// The scope of this setting (metric)
	MetricId pulumi.StringInput
	// Metric properties
	MetricProperties MetricMetadataMetricPropertiesPtrInput
	// Specifies which entity dimension should be used as the primary dimension. The property can only be configured for metrics ingested with the Metrics API.
	SourceEntityType pulumi.StringPtrInput
	// Tags
	Tags pulumi.StringArrayInput
	// Unit
	Unit pulumi.StringInput
	// The raw value is stored in bits or bytes. The user interface can display it in these numeral systems:
	UnitDisplayFormat pulumi.StringPtrInput
}

func (MetricMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metricMetadataArgs)(nil)).Elem()
}

type MetricMetadataInput interface {
	pulumi.Input

	ToMetricMetadataOutput() MetricMetadataOutput
	ToMetricMetadataOutputWithContext(ctx context.Context) MetricMetadataOutput
}

func (*MetricMetadata) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricMetadata)(nil)).Elem()
}

func (i *MetricMetadata) ToMetricMetadataOutput() MetricMetadataOutput {
	return i.ToMetricMetadataOutputWithContext(context.Background())
}

func (i *MetricMetadata) ToMetricMetadataOutputWithContext(ctx context.Context) MetricMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricMetadataOutput)
}

// MetricMetadataArrayInput is an input type that accepts MetricMetadataArray and MetricMetadataArrayOutput values.
// You can construct a concrete instance of `MetricMetadataArrayInput` via:
//
//	MetricMetadataArray{ MetricMetadataArgs{...} }
type MetricMetadataArrayInput interface {
	pulumi.Input

	ToMetricMetadataArrayOutput() MetricMetadataArrayOutput
	ToMetricMetadataArrayOutputWithContext(context.Context) MetricMetadataArrayOutput
}

type MetricMetadataArray []MetricMetadataInput

func (MetricMetadataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetricMetadata)(nil)).Elem()
}

func (i MetricMetadataArray) ToMetricMetadataArrayOutput() MetricMetadataArrayOutput {
	return i.ToMetricMetadataArrayOutputWithContext(context.Background())
}

func (i MetricMetadataArray) ToMetricMetadataArrayOutputWithContext(ctx context.Context) MetricMetadataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricMetadataArrayOutput)
}

// MetricMetadataMapInput is an input type that accepts MetricMetadataMap and MetricMetadataMapOutput values.
// You can construct a concrete instance of `MetricMetadataMapInput` via:
//
//	MetricMetadataMap{ "key": MetricMetadataArgs{...} }
type MetricMetadataMapInput interface {
	pulumi.Input

	ToMetricMetadataMapOutput() MetricMetadataMapOutput
	ToMetricMetadataMapOutputWithContext(context.Context) MetricMetadataMapOutput
}

type MetricMetadataMap map[string]MetricMetadataInput

func (MetricMetadataMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetricMetadata)(nil)).Elem()
}

func (i MetricMetadataMap) ToMetricMetadataMapOutput() MetricMetadataMapOutput {
	return i.ToMetricMetadataMapOutputWithContext(context.Background())
}

func (i MetricMetadataMap) ToMetricMetadataMapOutputWithContext(ctx context.Context) MetricMetadataMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricMetadataMapOutput)
}

type MetricMetadataOutput struct{ *pulumi.OutputState }

func (MetricMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricMetadata)(nil)).Elem()
}

func (o MetricMetadataOutput) ToMetricMetadataOutput() MetricMetadataOutput {
	return o
}

func (o MetricMetadataOutput) ToMetricMetadataOutputWithContext(ctx context.Context) MetricMetadataOutput {
	return o
}

// Description
func (o MetricMetadataOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricMetadata) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Define metadata per metric dimension.
func (o MetricMetadataOutput) Dimensions() MetricMetadataDimensionsPtrOutput {
	return o.ApplyT(func(v *MetricMetadata) MetricMetadataDimensionsPtrOutput { return v.Dimensions }).(MetricMetadataDimensionsPtrOutput)
}

// Display name
func (o MetricMetadataOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricMetadata) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The scope of this setting (metric)
func (o MetricMetadataOutput) MetricId() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricMetadata) pulumi.StringOutput { return v.MetricId }).(pulumi.StringOutput)
}

// Metric properties
func (o MetricMetadataOutput) MetricProperties() MetricMetadataMetricPropertiesPtrOutput {
	return o.ApplyT(func(v *MetricMetadata) MetricMetadataMetricPropertiesPtrOutput { return v.MetricProperties }).(MetricMetadataMetricPropertiesPtrOutput)
}

// Specifies which entity dimension should be used as the primary dimension. The property can only be configured for metrics ingested with the Metrics API.
func (o MetricMetadataOutput) SourceEntityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricMetadata) pulumi.StringPtrOutput { return v.SourceEntityType }).(pulumi.StringPtrOutput)
}

// Tags
func (o MetricMetadataOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MetricMetadata) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Unit
func (o MetricMetadataOutput) Unit() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricMetadata) pulumi.StringOutput { return v.Unit }).(pulumi.StringOutput)
}

// The raw value is stored in bits or bytes. The user interface can display it in these numeral systems:
func (o MetricMetadataOutput) UnitDisplayFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricMetadata) pulumi.StringPtrOutput { return v.UnitDisplayFormat }).(pulumi.StringPtrOutput)
}

type MetricMetadataArrayOutput struct{ *pulumi.OutputState }

func (MetricMetadataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetricMetadata)(nil)).Elem()
}

func (o MetricMetadataArrayOutput) ToMetricMetadataArrayOutput() MetricMetadataArrayOutput {
	return o
}

func (o MetricMetadataArrayOutput) ToMetricMetadataArrayOutputWithContext(ctx context.Context) MetricMetadataArrayOutput {
	return o
}

func (o MetricMetadataArrayOutput) Index(i pulumi.IntInput) MetricMetadataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MetricMetadata {
		return vs[0].([]*MetricMetadata)[vs[1].(int)]
	}).(MetricMetadataOutput)
}

type MetricMetadataMapOutput struct{ *pulumi.OutputState }

func (MetricMetadataMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetricMetadata)(nil)).Elem()
}

func (o MetricMetadataMapOutput) ToMetricMetadataMapOutput() MetricMetadataMapOutput {
	return o
}

func (o MetricMetadataMapOutput) ToMetricMetadataMapOutputWithContext(ctx context.Context) MetricMetadataMapOutput {
	return o
}

func (o MetricMetadataMapOutput) MapIndex(k pulumi.StringInput) MetricMetadataOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MetricMetadata {
		return vs[0].(map[string]*MetricMetadata)[vs[1].(string)]
	}).(MetricMetadataOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MetricMetadataInput)(nil)).Elem(), &MetricMetadata{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricMetadataArrayInput)(nil)).Elem(), MetricMetadataArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricMetadataMapInput)(nil)).Elem(), MetricMetadataMap{})
	pulumi.RegisterOutputType(MetricMetadataOutput{})
	pulumi.RegisterOutputType(MetricMetadataArrayOutput{})
	pulumi.RegisterOutputType(MetricMetadataMapOutput{})
}
