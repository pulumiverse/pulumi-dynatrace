// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type AppMonitoring struct {
	pulumi.CustomResourceState

	// You can override the default monitoring setting for each app separately
	AppMonitoring AppMonitoringAppMonitoringPtrOutput `pulumi:"appMonitoring"`
	// Possible Values: `Debug`, `Error`, `Info`, `Off`, `Warn`
	DefaultLogLevel pulumi.StringOutput `pulumi:"defaultLogLevel"`
}

// NewAppMonitoring registers a new resource with the given unique name, arguments, and options.
func NewAppMonitoring(ctx *pulumi.Context,
	name string, args *AppMonitoringArgs, opts ...pulumi.ResourceOption) (*AppMonitoring, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultLogLevel == nil {
		return nil, errors.New("invalid value for required argument 'DefaultLogLevel'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppMonitoring
	err := ctx.RegisterResource("dynatrace:index/appMonitoring:AppMonitoring", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppMonitoring gets an existing AppMonitoring resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppMonitoring(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppMonitoringState, opts ...pulumi.ResourceOption) (*AppMonitoring, error) {
	var resource AppMonitoring
	err := ctx.ReadResource("dynatrace:index/appMonitoring:AppMonitoring", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppMonitoring resources.
type appMonitoringState struct {
	// You can override the default monitoring setting for each app separately
	AppMonitoring *AppMonitoringAppMonitoring `pulumi:"appMonitoring"`
	// Possible Values: `Debug`, `Error`, `Info`, `Off`, `Warn`
	DefaultLogLevel *string `pulumi:"defaultLogLevel"`
}

type AppMonitoringState struct {
	// You can override the default monitoring setting for each app separately
	AppMonitoring AppMonitoringAppMonitoringPtrInput
	// Possible Values: `Debug`, `Error`, `Info`, `Off`, `Warn`
	DefaultLogLevel pulumi.StringPtrInput
}

func (AppMonitoringState) ElementType() reflect.Type {
	return reflect.TypeOf((*appMonitoringState)(nil)).Elem()
}

type appMonitoringArgs struct {
	// You can override the default monitoring setting for each app separately
	AppMonitoring *AppMonitoringAppMonitoring `pulumi:"appMonitoring"`
	// Possible Values: `Debug`, `Error`, `Info`, `Off`, `Warn`
	DefaultLogLevel string `pulumi:"defaultLogLevel"`
}

// The set of arguments for constructing a AppMonitoring resource.
type AppMonitoringArgs struct {
	// You can override the default monitoring setting for each app separately
	AppMonitoring AppMonitoringAppMonitoringPtrInput
	// Possible Values: `Debug`, `Error`, `Info`, `Off`, `Warn`
	DefaultLogLevel pulumi.StringInput
}

func (AppMonitoringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appMonitoringArgs)(nil)).Elem()
}

type AppMonitoringInput interface {
	pulumi.Input

	ToAppMonitoringOutput() AppMonitoringOutput
	ToAppMonitoringOutputWithContext(ctx context.Context) AppMonitoringOutput
}

func (*AppMonitoring) ElementType() reflect.Type {
	return reflect.TypeOf((**AppMonitoring)(nil)).Elem()
}

func (i *AppMonitoring) ToAppMonitoringOutput() AppMonitoringOutput {
	return i.ToAppMonitoringOutputWithContext(context.Background())
}

func (i *AppMonitoring) ToAppMonitoringOutputWithContext(ctx context.Context) AppMonitoringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppMonitoringOutput)
}

// AppMonitoringArrayInput is an input type that accepts AppMonitoringArray and AppMonitoringArrayOutput values.
// You can construct a concrete instance of `AppMonitoringArrayInput` via:
//
//	AppMonitoringArray{ AppMonitoringArgs{...} }
type AppMonitoringArrayInput interface {
	pulumi.Input

	ToAppMonitoringArrayOutput() AppMonitoringArrayOutput
	ToAppMonitoringArrayOutputWithContext(context.Context) AppMonitoringArrayOutput
}

type AppMonitoringArray []AppMonitoringInput

func (AppMonitoringArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppMonitoring)(nil)).Elem()
}

func (i AppMonitoringArray) ToAppMonitoringArrayOutput() AppMonitoringArrayOutput {
	return i.ToAppMonitoringArrayOutputWithContext(context.Background())
}

func (i AppMonitoringArray) ToAppMonitoringArrayOutputWithContext(ctx context.Context) AppMonitoringArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppMonitoringArrayOutput)
}

// AppMonitoringMapInput is an input type that accepts AppMonitoringMap and AppMonitoringMapOutput values.
// You can construct a concrete instance of `AppMonitoringMapInput` via:
//
//	AppMonitoringMap{ "key": AppMonitoringArgs{...} }
type AppMonitoringMapInput interface {
	pulumi.Input

	ToAppMonitoringMapOutput() AppMonitoringMapOutput
	ToAppMonitoringMapOutputWithContext(context.Context) AppMonitoringMapOutput
}

type AppMonitoringMap map[string]AppMonitoringInput

func (AppMonitoringMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppMonitoring)(nil)).Elem()
}

func (i AppMonitoringMap) ToAppMonitoringMapOutput() AppMonitoringMapOutput {
	return i.ToAppMonitoringMapOutputWithContext(context.Background())
}

func (i AppMonitoringMap) ToAppMonitoringMapOutputWithContext(ctx context.Context) AppMonitoringMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppMonitoringMapOutput)
}

type AppMonitoringOutput struct{ *pulumi.OutputState }

func (AppMonitoringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppMonitoring)(nil)).Elem()
}

func (o AppMonitoringOutput) ToAppMonitoringOutput() AppMonitoringOutput {
	return o
}

func (o AppMonitoringOutput) ToAppMonitoringOutputWithContext(ctx context.Context) AppMonitoringOutput {
	return o
}

// You can override the default monitoring setting for each app separately
func (o AppMonitoringOutput) AppMonitoring() AppMonitoringAppMonitoringPtrOutput {
	return o.ApplyT(func(v *AppMonitoring) AppMonitoringAppMonitoringPtrOutput { return v.AppMonitoring }).(AppMonitoringAppMonitoringPtrOutput)
}

// Possible Values: `Debug`, `Error`, `Info`, `Off`, `Warn`
func (o AppMonitoringOutput) DefaultLogLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *AppMonitoring) pulumi.StringOutput { return v.DefaultLogLevel }).(pulumi.StringOutput)
}

type AppMonitoringArrayOutput struct{ *pulumi.OutputState }

func (AppMonitoringArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppMonitoring)(nil)).Elem()
}

func (o AppMonitoringArrayOutput) ToAppMonitoringArrayOutput() AppMonitoringArrayOutput {
	return o
}

func (o AppMonitoringArrayOutput) ToAppMonitoringArrayOutputWithContext(ctx context.Context) AppMonitoringArrayOutput {
	return o
}

func (o AppMonitoringArrayOutput) Index(i pulumi.IntInput) AppMonitoringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppMonitoring {
		return vs[0].([]*AppMonitoring)[vs[1].(int)]
	}).(AppMonitoringOutput)
}

type AppMonitoringMapOutput struct{ *pulumi.OutputState }

func (AppMonitoringMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppMonitoring)(nil)).Elem()
}

func (o AppMonitoringMapOutput) ToAppMonitoringMapOutput() AppMonitoringMapOutput {
	return o
}

func (o AppMonitoringMapOutput) ToAppMonitoringMapOutputWithContext(ctx context.Context) AppMonitoringMapOutput {
	return o
}

func (o AppMonitoringMapOutput) MapIndex(k pulumi.StringInput) AppMonitoringOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppMonitoring {
		return vs[0].(map[string]*AppMonitoring)[vs[1].(string)]
	}).(AppMonitoringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppMonitoringInput)(nil)).Elem(), &AppMonitoring{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppMonitoringArrayInput)(nil)).Elem(), AppMonitoringArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppMonitoringMapInput)(nil)).Elem(), AppMonitoringMap{})
	pulumi.RegisterOutputType(AppMonitoringOutput{})
	pulumi.RegisterOutputType(AppMonitoringArrayOutput{})
	pulumi.RegisterOutputType(AppMonitoringMapOutput{})
}
