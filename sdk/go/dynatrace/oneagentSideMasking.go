// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OneagentSideMasking struct {
	pulumi.CustomResourceState

	// Exclude email addresses from URLs
	IsEmailMaskingEnabled pulumi.BoolOutput `pulumi:"isEmailMaskingEnabled"`
	// Exclude IBANs and payment card numbers from URLs
	IsFinancialMaskingEnabled pulumi.BoolOutput `pulumi:"isFinancialMaskingEnabled"`
	// Exclude hexadecimal IDs and consecutive numbers above 5 digits from URLs
	IsNumbersMaskingEnabled pulumi.BoolOutput `pulumi:"isNumbersMaskingEnabled"`
	// Exclude query parameters from URLs and web requests
	IsQueryMaskingEnabled pulumi.BoolOutput `pulumi:"isQueryMaskingEnabled"`
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ProcessGroupId pulumi.StringPtrOutput `pulumi:"processGroupId"`
}

// NewOneagentSideMasking registers a new resource with the given unique name, arguments, and options.
func NewOneagentSideMasking(ctx *pulumi.Context,
	name string, args *OneagentSideMaskingArgs, opts ...pulumi.ResourceOption) (*OneagentSideMasking, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IsEmailMaskingEnabled == nil {
		return nil, errors.New("invalid value for required argument 'IsEmailMaskingEnabled'")
	}
	if args.IsFinancialMaskingEnabled == nil {
		return nil, errors.New("invalid value for required argument 'IsFinancialMaskingEnabled'")
	}
	if args.IsNumbersMaskingEnabled == nil {
		return nil, errors.New("invalid value for required argument 'IsNumbersMaskingEnabled'")
	}
	if args.IsQueryMaskingEnabled == nil {
		return nil, errors.New("invalid value for required argument 'IsQueryMaskingEnabled'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OneagentSideMasking
	err := ctx.RegisterResource("dynatrace:index/oneagentSideMasking:OneagentSideMasking", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOneagentSideMasking gets an existing OneagentSideMasking resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOneagentSideMasking(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OneagentSideMaskingState, opts ...pulumi.ResourceOption) (*OneagentSideMasking, error) {
	var resource OneagentSideMasking
	err := ctx.ReadResource("dynatrace:index/oneagentSideMasking:OneagentSideMasking", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OneagentSideMasking resources.
type oneagentSideMaskingState struct {
	// Exclude email addresses from URLs
	IsEmailMaskingEnabled *bool `pulumi:"isEmailMaskingEnabled"`
	// Exclude IBANs and payment card numbers from URLs
	IsFinancialMaskingEnabled *bool `pulumi:"isFinancialMaskingEnabled"`
	// Exclude hexadecimal IDs and consecutive numbers above 5 digits from URLs
	IsNumbersMaskingEnabled *bool `pulumi:"isNumbersMaskingEnabled"`
	// Exclude query parameters from URLs and web requests
	IsQueryMaskingEnabled *bool `pulumi:"isQueryMaskingEnabled"`
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ProcessGroupId *string `pulumi:"processGroupId"`
}

type OneagentSideMaskingState struct {
	// Exclude email addresses from URLs
	IsEmailMaskingEnabled pulumi.BoolPtrInput
	// Exclude IBANs and payment card numbers from URLs
	IsFinancialMaskingEnabled pulumi.BoolPtrInput
	// Exclude hexadecimal IDs and consecutive numbers above 5 digits from URLs
	IsNumbersMaskingEnabled pulumi.BoolPtrInput
	// Exclude query parameters from URLs and web requests
	IsQueryMaskingEnabled pulumi.BoolPtrInput
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ProcessGroupId pulumi.StringPtrInput
}

func (OneagentSideMaskingState) ElementType() reflect.Type {
	return reflect.TypeOf((*oneagentSideMaskingState)(nil)).Elem()
}

type oneagentSideMaskingArgs struct {
	// Exclude email addresses from URLs
	IsEmailMaskingEnabled bool `pulumi:"isEmailMaskingEnabled"`
	// Exclude IBANs and payment card numbers from URLs
	IsFinancialMaskingEnabled bool `pulumi:"isFinancialMaskingEnabled"`
	// Exclude hexadecimal IDs and consecutive numbers above 5 digits from URLs
	IsNumbersMaskingEnabled bool `pulumi:"isNumbersMaskingEnabled"`
	// Exclude query parameters from URLs and web requests
	IsQueryMaskingEnabled bool `pulumi:"isQueryMaskingEnabled"`
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ProcessGroupId *string `pulumi:"processGroupId"`
}

// The set of arguments for constructing a OneagentSideMasking resource.
type OneagentSideMaskingArgs struct {
	// Exclude email addresses from URLs
	IsEmailMaskingEnabled pulumi.BoolInput
	// Exclude IBANs and payment card numbers from URLs
	IsFinancialMaskingEnabled pulumi.BoolInput
	// Exclude hexadecimal IDs and consecutive numbers above 5 digits from URLs
	IsNumbersMaskingEnabled pulumi.BoolInput
	// Exclude query parameters from URLs and web requests
	IsQueryMaskingEnabled pulumi.BoolInput
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ProcessGroupId pulumi.StringPtrInput
}

func (OneagentSideMaskingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*oneagentSideMaskingArgs)(nil)).Elem()
}

type OneagentSideMaskingInput interface {
	pulumi.Input

	ToOneagentSideMaskingOutput() OneagentSideMaskingOutput
	ToOneagentSideMaskingOutputWithContext(ctx context.Context) OneagentSideMaskingOutput
}

func (*OneagentSideMasking) ElementType() reflect.Type {
	return reflect.TypeOf((**OneagentSideMasking)(nil)).Elem()
}

func (i *OneagentSideMasking) ToOneagentSideMaskingOutput() OneagentSideMaskingOutput {
	return i.ToOneagentSideMaskingOutputWithContext(context.Background())
}

func (i *OneagentSideMasking) ToOneagentSideMaskingOutputWithContext(ctx context.Context) OneagentSideMaskingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneagentSideMaskingOutput)
}

// OneagentSideMaskingArrayInput is an input type that accepts OneagentSideMaskingArray and OneagentSideMaskingArrayOutput values.
// You can construct a concrete instance of `OneagentSideMaskingArrayInput` via:
//
//	OneagentSideMaskingArray{ OneagentSideMaskingArgs{...} }
type OneagentSideMaskingArrayInput interface {
	pulumi.Input

	ToOneagentSideMaskingArrayOutput() OneagentSideMaskingArrayOutput
	ToOneagentSideMaskingArrayOutputWithContext(context.Context) OneagentSideMaskingArrayOutput
}

type OneagentSideMaskingArray []OneagentSideMaskingInput

func (OneagentSideMaskingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OneagentSideMasking)(nil)).Elem()
}

func (i OneagentSideMaskingArray) ToOneagentSideMaskingArrayOutput() OneagentSideMaskingArrayOutput {
	return i.ToOneagentSideMaskingArrayOutputWithContext(context.Background())
}

func (i OneagentSideMaskingArray) ToOneagentSideMaskingArrayOutputWithContext(ctx context.Context) OneagentSideMaskingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneagentSideMaskingArrayOutput)
}

// OneagentSideMaskingMapInput is an input type that accepts OneagentSideMaskingMap and OneagentSideMaskingMapOutput values.
// You can construct a concrete instance of `OneagentSideMaskingMapInput` via:
//
//	OneagentSideMaskingMap{ "key": OneagentSideMaskingArgs{...} }
type OneagentSideMaskingMapInput interface {
	pulumi.Input

	ToOneagentSideMaskingMapOutput() OneagentSideMaskingMapOutput
	ToOneagentSideMaskingMapOutputWithContext(context.Context) OneagentSideMaskingMapOutput
}

type OneagentSideMaskingMap map[string]OneagentSideMaskingInput

func (OneagentSideMaskingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OneagentSideMasking)(nil)).Elem()
}

func (i OneagentSideMaskingMap) ToOneagentSideMaskingMapOutput() OneagentSideMaskingMapOutput {
	return i.ToOneagentSideMaskingMapOutputWithContext(context.Background())
}

func (i OneagentSideMaskingMap) ToOneagentSideMaskingMapOutputWithContext(ctx context.Context) OneagentSideMaskingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneagentSideMaskingMapOutput)
}

type OneagentSideMaskingOutput struct{ *pulumi.OutputState }

func (OneagentSideMaskingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OneagentSideMasking)(nil)).Elem()
}

func (o OneagentSideMaskingOutput) ToOneagentSideMaskingOutput() OneagentSideMaskingOutput {
	return o
}

func (o OneagentSideMaskingOutput) ToOneagentSideMaskingOutputWithContext(ctx context.Context) OneagentSideMaskingOutput {
	return o
}

// Exclude email addresses from URLs
func (o OneagentSideMaskingOutput) IsEmailMaskingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *OneagentSideMasking) pulumi.BoolOutput { return v.IsEmailMaskingEnabled }).(pulumi.BoolOutput)
}

// Exclude IBANs and payment card numbers from URLs
func (o OneagentSideMaskingOutput) IsFinancialMaskingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *OneagentSideMasking) pulumi.BoolOutput { return v.IsFinancialMaskingEnabled }).(pulumi.BoolOutput)
}

// Exclude hexadecimal IDs and consecutive numbers above 5 digits from URLs
func (o OneagentSideMaskingOutput) IsNumbersMaskingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *OneagentSideMasking) pulumi.BoolOutput { return v.IsNumbersMaskingEnabled }).(pulumi.BoolOutput)
}

// Exclude query parameters from URLs and web requests
func (o OneagentSideMaskingOutput) IsQueryMaskingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *OneagentSideMasking) pulumi.BoolOutput { return v.IsQueryMaskingEnabled }).(pulumi.BoolOutput)
}

// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
func (o OneagentSideMaskingOutput) ProcessGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OneagentSideMasking) pulumi.StringPtrOutput { return v.ProcessGroupId }).(pulumi.StringPtrOutput)
}

type OneagentSideMaskingArrayOutput struct{ *pulumi.OutputState }

func (OneagentSideMaskingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OneagentSideMasking)(nil)).Elem()
}

func (o OneagentSideMaskingArrayOutput) ToOneagentSideMaskingArrayOutput() OneagentSideMaskingArrayOutput {
	return o
}

func (o OneagentSideMaskingArrayOutput) ToOneagentSideMaskingArrayOutputWithContext(ctx context.Context) OneagentSideMaskingArrayOutput {
	return o
}

func (o OneagentSideMaskingArrayOutput) Index(i pulumi.IntInput) OneagentSideMaskingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OneagentSideMasking {
		return vs[0].([]*OneagentSideMasking)[vs[1].(int)]
	}).(OneagentSideMaskingOutput)
}

type OneagentSideMaskingMapOutput struct{ *pulumi.OutputState }

func (OneagentSideMaskingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OneagentSideMasking)(nil)).Elem()
}

func (o OneagentSideMaskingMapOutput) ToOneagentSideMaskingMapOutput() OneagentSideMaskingMapOutput {
	return o
}

func (o OneagentSideMaskingMapOutput) ToOneagentSideMaskingMapOutputWithContext(ctx context.Context) OneagentSideMaskingMapOutput {
	return o
}

func (o OneagentSideMaskingMapOutput) MapIndex(k pulumi.StringInput) OneagentSideMaskingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OneagentSideMasking {
		return vs[0].(map[string]*OneagentSideMasking)[vs[1].(string)]
	}).(OneagentSideMaskingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OneagentSideMaskingInput)(nil)).Elem(), &OneagentSideMasking{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneagentSideMaskingArrayInput)(nil)).Elem(), OneagentSideMaskingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneagentSideMaskingMapInput)(nil)).Elem(), OneagentSideMaskingMap{})
	pulumi.RegisterOutputType(OneagentSideMaskingOutput{})
	pulumi.RegisterOutputType(OneagentSideMaskingArrayOutput{})
	pulumi.RegisterOutputType(OneagentSideMaskingMapOutput{})
}
