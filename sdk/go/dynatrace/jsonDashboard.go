// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type JsonDashboard struct {
	pulumi.CustomResourceState

	// Contains the JSON Code of the Dashboard
	Contents pulumi.StringOutput `pulumi:"contents"`
	// ID of the dashboard, used with the json*dashboard*base resource and variables to create circular dependencies between dashboards for hyperlinks. See the documentation for `JsonDashboardBase` for a concrete example.
	LinkId pulumi.StringOutput `pulumi:"linkId"`
}

// NewJsonDashboard registers a new resource with the given unique name, arguments, and options.
func NewJsonDashboard(ctx *pulumi.Context,
	name string, args *JsonDashboardArgs, opts ...pulumi.ResourceOption) (*JsonDashboard, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Contents == nil {
		return nil, errors.New("invalid value for required argument 'Contents'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource JsonDashboard
	err := ctx.RegisterResource("dynatrace:index/jsonDashboard:JsonDashboard", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetJsonDashboard gets an existing JsonDashboard resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetJsonDashboard(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *JsonDashboardState, opts ...pulumi.ResourceOption) (*JsonDashboard, error) {
	var resource JsonDashboard
	err := ctx.ReadResource("dynatrace:index/jsonDashboard:JsonDashboard", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering JsonDashboard resources.
type jsonDashboardState struct {
	// Contains the JSON Code of the Dashboard
	Contents *string `pulumi:"contents"`
	// ID of the dashboard, used with the json*dashboard*base resource and variables to create circular dependencies between dashboards for hyperlinks. See the documentation for `JsonDashboardBase` for a concrete example.
	LinkId *string `pulumi:"linkId"`
}

type JsonDashboardState struct {
	// Contains the JSON Code of the Dashboard
	Contents pulumi.StringPtrInput
	// ID of the dashboard, used with the json*dashboard*base resource and variables to create circular dependencies between dashboards for hyperlinks. See the documentation for `JsonDashboardBase` for a concrete example.
	LinkId pulumi.StringPtrInput
}

func (JsonDashboardState) ElementType() reflect.Type {
	return reflect.TypeOf((*jsonDashboardState)(nil)).Elem()
}

type jsonDashboardArgs struct {
	// Contains the JSON Code of the Dashboard
	Contents string `pulumi:"contents"`
	// ID of the dashboard, used with the json*dashboard*base resource and variables to create circular dependencies between dashboards for hyperlinks. See the documentation for `JsonDashboardBase` for a concrete example.
	LinkId *string `pulumi:"linkId"`
}

// The set of arguments for constructing a JsonDashboard resource.
type JsonDashboardArgs struct {
	// Contains the JSON Code of the Dashboard
	Contents pulumi.StringInput
	// ID of the dashboard, used with the json*dashboard*base resource and variables to create circular dependencies between dashboards for hyperlinks. See the documentation for `JsonDashboardBase` for a concrete example.
	LinkId pulumi.StringPtrInput
}

func (JsonDashboardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*jsonDashboardArgs)(nil)).Elem()
}

type JsonDashboardInput interface {
	pulumi.Input

	ToJsonDashboardOutput() JsonDashboardOutput
	ToJsonDashboardOutputWithContext(ctx context.Context) JsonDashboardOutput
}

func (*JsonDashboard) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonDashboard)(nil)).Elem()
}

func (i *JsonDashboard) ToJsonDashboardOutput() JsonDashboardOutput {
	return i.ToJsonDashboardOutputWithContext(context.Background())
}

func (i *JsonDashboard) ToJsonDashboardOutputWithContext(ctx context.Context) JsonDashboardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonDashboardOutput)
}

// JsonDashboardArrayInput is an input type that accepts JsonDashboardArray and JsonDashboardArrayOutput values.
// You can construct a concrete instance of `JsonDashboardArrayInput` via:
//
//	JsonDashboardArray{ JsonDashboardArgs{...} }
type JsonDashboardArrayInput interface {
	pulumi.Input

	ToJsonDashboardArrayOutput() JsonDashboardArrayOutput
	ToJsonDashboardArrayOutputWithContext(context.Context) JsonDashboardArrayOutput
}

type JsonDashboardArray []JsonDashboardInput

func (JsonDashboardArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*JsonDashboard)(nil)).Elem()
}

func (i JsonDashboardArray) ToJsonDashboardArrayOutput() JsonDashboardArrayOutput {
	return i.ToJsonDashboardArrayOutputWithContext(context.Background())
}

func (i JsonDashboardArray) ToJsonDashboardArrayOutputWithContext(ctx context.Context) JsonDashboardArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonDashboardArrayOutput)
}

// JsonDashboardMapInput is an input type that accepts JsonDashboardMap and JsonDashboardMapOutput values.
// You can construct a concrete instance of `JsonDashboardMapInput` via:
//
//	JsonDashboardMap{ "key": JsonDashboardArgs{...} }
type JsonDashboardMapInput interface {
	pulumi.Input

	ToJsonDashboardMapOutput() JsonDashboardMapOutput
	ToJsonDashboardMapOutputWithContext(context.Context) JsonDashboardMapOutput
}

type JsonDashboardMap map[string]JsonDashboardInput

func (JsonDashboardMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*JsonDashboard)(nil)).Elem()
}

func (i JsonDashboardMap) ToJsonDashboardMapOutput() JsonDashboardMapOutput {
	return i.ToJsonDashboardMapOutputWithContext(context.Background())
}

func (i JsonDashboardMap) ToJsonDashboardMapOutputWithContext(ctx context.Context) JsonDashboardMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonDashboardMapOutput)
}

type JsonDashboardOutput struct{ *pulumi.OutputState }

func (JsonDashboardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonDashboard)(nil)).Elem()
}

func (o JsonDashboardOutput) ToJsonDashboardOutput() JsonDashboardOutput {
	return o
}

func (o JsonDashboardOutput) ToJsonDashboardOutputWithContext(ctx context.Context) JsonDashboardOutput {
	return o
}

// Contains the JSON Code of the Dashboard
func (o JsonDashboardOutput) Contents() pulumi.StringOutput {
	return o.ApplyT(func(v *JsonDashboard) pulumi.StringOutput { return v.Contents }).(pulumi.StringOutput)
}

// ID of the dashboard, used with the json*dashboard*base resource and variables to create circular dependencies between dashboards for hyperlinks. See the documentation for `JsonDashboardBase` for a concrete example.
func (o JsonDashboardOutput) LinkId() pulumi.StringOutput {
	return o.ApplyT(func(v *JsonDashboard) pulumi.StringOutput { return v.LinkId }).(pulumi.StringOutput)
}

type JsonDashboardArrayOutput struct{ *pulumi.OutputState }

func (JsonDashboardArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*JsonDashboard)(nil)).Elem()
}

func (o JsonDashboardArrayOutput) ToJsonDashboardArrayOutput() JsonDashboardArrayOutput {
	return o
}

func (o JsonDashboardArrayOutput) ToJsonDashboardArrayOutputWithContext(ctx context.Context) JsonDashboardArrayOutput {
	return o
}

func (o JsonDashboardArrayOutput) Index(i pulumi.IntInput) JsonDashboardOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *JsonDashboard {
		return vs[0].([]*JsonDashboard)[vs[1].(int)]
	}).(JsonDashboardOutput)
}

type JsonDashboardMapOutput struct{ *pulumi.OutputState }

func (JsonDashboardMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*JsonDashboard)(nil)).Elem()
}

func (o JsonDashboardMapOutput) ToJsonDashboardMapOutput() JsonDashboardMapOutput {
	return o
}

func (o JsonDashboardMapOutput) ToJsonDashboardMapOutputWithContext(ctx context.Context) JsonDashboardMapOutput {
	return o
}

func (o JsonDashboardMapOutput) MapIndex(k pulumi.StringInput) JsonDashboardOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *JsonDashboard {
		return vs[0].(map[string]*JsonDashboard)[vs[1].(string)]
	}).(JsonDashboardOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*JsonDashboardInput)(nil)).Elem(), &JsonDashboard{})
	pulumi.RegisterInputType(reflect.TypeOf((*JsonDashboardArrayInput)(nil)).Elem(), JsonDashboardArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JsonDashboardMapInput)(nil)).Elem(), JsonDashboardMap{})
	pulumi.RegisterOutputType(JsonDashboardOutput{})
	pulumi.RegisterOutputType(JsonDashboardArrayOutput{})
	pulumi.RegisterOutputType(JsonDashboardMapOutput{})
}
