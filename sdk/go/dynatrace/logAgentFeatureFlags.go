// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type LogAgentFeatureFlags struct {
	pulumi.CustomResourceState

	// Enable Log Agent to use new container log detector. Please do not turn it off once enabled. For more details, check our [documentation](https://dt-url.net/jn02ey0).
	NewContainerLogDetector pulumi.BoolOutput `pulumi:"newContainerLogDetector"`
	// The scope of this setting (HOST, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
}

// NewLogAgentFeatureFlags registers a new resource with the given unique name, arguments, and options.
func NewLogAgentFeatureFlags(ctx *pulumi.Context,
	name string, args *LogAgentFeatureFlagsArgs, opts ...pulumi.ResourceOption) (*LogAgentFeatureFlags, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NewContainerLogDetector == nil {
		return nil, errors.New("invalid value for required argument 'NewContainerLogDetector'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogAgentFeatureFlags
	err := ctx.RegisterResource("dynatrace:index/logAgentFeatureFlags:LogAgentFeatureFlags", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogAgentFeatureFlags gets an existing LogAgentFeatureFlags resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogAgentFeatureFlags(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogAgentFeatureFlagsState, opts ...pulumi.ResourceOption) (*LogAgentFeatureFlags, error) {
	var resource LogAgentFeatureFlags
	err := ctx.ReadResource("dynatrace:index/logAgentFeatureFlags:LogAgentFeatureFlags", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogAgentFeatureFlags resources.
type logAgentFeatureFlagsState struct {
	// Enable Log Agent to use new container log detector. Please do not turn it off once enabled. For more details, check our [documentation](https://dt-url.net/jn02ey0).
	NewContainerLogDetector *bool `pulumi:"newContainerLogDetector"`
	// The scope of this setting (HOST, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
}

type LogAgentFeatureFlagsState struct {
	// Enable Log Agent to use new container log detector. Please do not turn it off once enabled. For more details, check our [documentation](https://dt-url.net/jn02ey0).
	NewContainerLogDetector pulumi.BoolPtrInput
	// The scope of this setting (HOST, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
}

func (LogAgentFeatureFlagsState) ElementType() reflect.Type {
	return reflect.TypeOf((*logAgentFeatureFlagsState)(nil)).Elem()
}

type logAgentFeatureFlagsArgs struct {
	// Enable Log Agent to use new container log detector. Please do not turn it off once enabled. For more details, check our [documentation](https://dt-url.net/jn02ey0).
	NewContainerLogDetector bool `pulumi:"newContainerLogDetector"`
	// The scope of this setting (HOST, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
}

// The set of arguments for constructing a LogAgentFeatureFlags resource.
type LogAgentFeatureFlagsArgs struct {
	// Enable Log Agent to use new container log detector. Please do not turn it off once enabled. For more details, check our [documentation](https://dt-url.net/jn02ey0).
	NewContainerLogDetector pulumi.BoolInput
	// The scope of this setting (HOST, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
}

func (LogAgentFeatureFlagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logAgentFeatureFlagsArgs)(nil)).Elem()
}

type LogAgentFeatureFlagsInput interface {
	pulumi.Input

	ToLogAgentFeatureFlagsOutput() LogAgentFeatureFlagsOutput
	ToLogAgentFeatureFlagsOutputWithContext(ctx context.Context) LogAgentFeatureFlagsOutput
}

func (*LogAgentFeatureFlags) ElementType() reflect.Type {
	return reflect.TypeOf((**LogAgentFeatureFlags)(nil)).Elem()
}

func (i *LogAgentFeatureFlags) ToLogAgentFeatureFlagsOutput() LogAgentFeatureFlagsOutput {
	return i.ToLogAgentFeatureFlagsOutputWithContext(context.Background())
}

func (i *LogAgentFeatureFlags) ToLogAgentFeatureFlagsOutputWithContext(ctx context.Context) LogAgentFeatureFlagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAgentFeatureFlagsOutput)
}

// LogAgentFeatureFlagsArrayInput is an input type that accepts LogAgentFeatureFlagsArray and LogAgentFeatureFlagsArrayOutput values.
// You can construct a concrete instance of `LogAgentFeatureFlagsArrayInput` via:
//
//	LogAgentFeatureFlagsArray{ LogAgentFeatureFlagsArgs{...} }
type LogAgentFeatureFlagsArrayInput interface {
	pulumi.Input

	ToLogAgentFeatureFlagsArrayOutput() LogAgentFeatureFlagsArrayOutput
	ToLogAgentFeatureFlagsArrayOutputWithContext(context.Context) LogAgentFeatureFlagsArrayOutput
}

type LogAgentFeatureFlagsArray []LogAgentFeatureFlagsInput

func (LogAgentFeatureFlagsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogAgentFeatureFlags)(nil)).Elem()
}

func (i LogAgentFeatureFlagsArray) ToLogAgentFeatureFlagsArrayOutput() LogAgentFeatureFlagsArrayOutput {
	return i.ToLogAgentFeatureFlagsArrayOutputWithContext(context.Background())
}

func (i LogAgentFeatureFlagsArray) ToLogAgentFeatureFlagsArrayOutputWithContext(ctx context.Context) LogAgentFeatureFlagsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAgentFeatureFlagsArrayOutput)
}

// LogAgentFeatureFlagsMapInput is an input type that accepts LogAgentFeatureFlagsMap and LogAgentFeatureFlagsMapOutput values.
// You can construct a concrete instance of `LogAgentFeatureFlagsMapInput` via:
//
//	LogAgentFeatureFlagsMap{ "key": LogAgentFeatureFlagsArgs{...} }
type LogAgentFeatureFlagsMapInput interface {
	pulumi.Input

	ToLogAgentFeatureFlagsMapOutput() LogAgentFeatureFlagsMapOutput
	ToLogAgentFeatureFlagsMapOutputWithContext(context.Context) LogAgentFeatureFlagsMapOutput
}

type LogAgentFeatureFlagsMap map[string]LogAgentFeatureFlagsInput

func (LogAgentFeatureFlagsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogAgentFeatureFlags)(nil)).Elem()
}

func (i LogAgentFeatureFlagsMap) ToLogAgentFeatureFlagsMapOutput() LogAgentFeatureFlagsMapOutput {
	return i.ToLogAgentFeatureFlagsMapOutputWithContext(context.Background())
}

func (i LogAgentFeatureFlagsMap) ToLogAgentFeatureFlagsMapOutputWithContext(ctx context.Context) LogAgentFeatureFlagsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAgentFeatureFlagsMapOutput)
}

type LogAgentFeatureFlagsOutput struct{ *pulumi.OutputState }

func (LogAgentFeatureFlagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogAgentFeatureFlags)(nil)).Elem()
}

func (o LogAgentFeatureFlagsOutput) ToLogAgentFeatureFlagsOutput() LogAgentFeatureFlagsOutput {
	return o
}

func (o LogAgentFeatureFlagsOutput) ToLogAgentFeatureFlagsOutputWithContext(ctx context.Context) LogAgentFeatureFlagsOutput {
	return o
}

// Enable Log Agent to use new container log detector. Please do not turn it off once enabled. For more details, check our [documentation](https://dt-url.net/jn02ey0).
func (o LogAgentFeatureFlagsOutput) NewContainerLogDetector() pulumi.BoolOutput {
	return o.ApplyT(func(v *LogAgentFeatureFlags) pulumi.BoolOutput { return v.NewContainerLogDetector }).(pulumi.BoolOutput)
}

// The scope of this setting (HOST, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
func (o LogAgentFeatureFlagsOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAgentFeatureFlags) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

type LogAgentFeatureFlagsArrayOutput struct{ *pulumi.OutputState }

func (LogAgentFeatureFlagsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogAgentFeatureFlags)(nil)).Elem()
}

func (o LogAgentFeatureFlagsArrayOutput) ToLogAgentFeatureFlagsArrayOutput() LogAgentFeatureFlagsArrayOutput {
	return o
}

func (o LogAgentFeatureFlagsArrayOutput) ToLogAgentFeatureFlagsArrayOutputWithContext(ctx context.Context) LogAgentFeatureFlagsArrayOutput {
	return o
}

func (o LogAgentFeatureFlagsArrayOutput) Index(i pulumi.IntInput) LogAgentFeatureFlagsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogAgentFeatureFlags {
		return vs[0].([]*LogAgentFeatureFlags)[vs[1].(int)]
	}).(LogAgentFeatureFlagsOutput)
}

type LogAgentFeatureFlagsMapOutput struct{ *pulumi.OutputState }

func (LogAgentFeatureFlagsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogAgentFeatureFlags)(nil)).Elem()
}

func (o LogAgentFeatureFlagsMapOutput) ToLogAgentFeatureFlagsMapOutput() LogAgentFeatureFlagsMapOutput {
	return o
}

func (o LogAgentFeatureFlagsMapOutput) ToLogAgentFeatureFlagsMapOutputWithContext(ctx context.Context) LogAgentFeatureFlagsMapOutput {
	return o
}

func (o LogAgentFeatureFlagsMapOutput) MapIndex(k pulumi.StringInput) LogAgentFeatureFlagsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogAgentFeatureFlags {
		return vs[0].(map[string]*LogAgentFeatureFlags)[vs[1].(string)]
	}).(LogAgentFeatureFlagsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogAgentFeatureFlagsInput)(nil)).Elem(), &LogAgentFeatureFlags{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogAgentFeatureFlagsArrayInput)(nil)).Elem(), LogAgentFeatureFlagsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogAgentFeatureFlagsMapInput)(nil)).Elem(), LogAgentFeatureFlagsMap{})
	pulumi.RegisterOutputType(LogAgentFeatureFlagsOutput{})
	pulumi.RegisterOutputType(LogAgentFeatureFlagsArrayOutput{})
	pulumi.RegisterOutputType(LogAgentFeatureFlagsMapOutput{})
}
