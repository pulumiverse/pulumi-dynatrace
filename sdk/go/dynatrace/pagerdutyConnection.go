// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type PagerdutyConnection struct {
	pulumi.CustomResourceState

	// The name of the PagerDuty connection
	Name pulumi.StringOutput `pulumi:"name"`
	// Token for the PagerDuty API endpoint
	Token pulumi.StringOutput `pulumi:"token"`
	// URL of the PagerDuty API endpoint
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewPagerdutyConnection registers a new resource with the given unique name, arguments, and options.
func NewPagerdutyConnection(ctx *pulumi.Context,
	name string, args *PagerdutyConnectionArgs, opts ...pulumi.ResourceOption) (*PagerdutyConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Token == nil {
		return nil, errors.New("invalid value for required argument 'Token'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	if args.Token != nil {
		args.Token = pulumi.ToSecret(args.Token).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"token",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PagerdutyConnection
	err := ctx.RegisterResource("dynatrace:index/pagerdutyConnection:PagerdutyConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPagerdutyConnection gets an existing PagerdutyConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPagerdutyConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PagerdutyConnectionState, opts ...pulumi.ResourceOption) (*PagerdutyConnection, error) {
	var resource PagerdutyConnection
	err := ctx.ReadResource("dynatrace:index/pagerdutyConnection:PagerdutyConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PagerdutyConnection resources.
type pagerdutyConnectionState struct {
	// The name of the PagerDuty connection
	Name *string `pulumi:"name"`
	// Token for the PagerDuty API endpoint
	Token *string `pulumi:"token"`
	// URL of the PagerDuty API endpoint
	Url *string `pulumi:"url"`
}

type PagerdutyConnectionState struct {
	// The name of the PagerDuty connection
	Name pulumi.StringPtrInput
	// Token for the PagerDuty API endpoint
	Token pulumi.StringPtrInput
	// URL of the PagerDuty API endpoint
	Url pulumi.StringPtrInput
}

func (PagerdutyConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*pagerdutyConnectionState)(nil)).Elem()
}

type pagerdutyConnectionArgs struct {
	// The name of the PagerDuty connection
	Name *string `pulumi:"name"`
	// Token for the PagerDuty API endpoint
	Token string `pulumi:"token"`
	// URL of the PagerDuty API endpoint
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a PagerdutyConnection resource.
type PagerdutyConnectionArgs struct {
	// The name of the PagerDuty connection
	Name pulumi.StringPtrInput
	// Token for the PagerDuty API endpoint
	Token pulumi.StringInput
	// URL of the PagerDuty API endpoint
	Url pulumi.StringInput
}

func (PagerdutyConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pagerdutyConnectionArgs)(nil)).Elem()
}

type PagerdutyConnectionInput interface {
	pulumi.Input

	ToPagerdutyConnectionOutput() PagerdutyConnectionOutput
	ToPagerdutyConnectionOutputWithContext(ctx context.Context) PagerdutyConnectionOutput
}

func (*PagerdutyConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**PagerdutyConnection)(nil)).Elem()
}

func (i *PagerdutyConnection) ToPagerdutyConnectionOutput() PagerdutyConnectionOutput {
	return i.ToPagerdutyConnectionOutputWithContext(context.Background())
}

func (i *PagerdutyConnection) ToPagerdutyConnectionOutputWithContext(ctx context.Context) PagerdutyConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PagerdutyConnectionOutput)
}

// PagerdutyConnectionArrayInput is an input type that accepts PagerdutyConnectionArray and PagerdutyConnectionArrayOutput values.
// You can construct a concrete instance of `PagerdutyConnectionArrayInput` via:
//
//	PagerdutyConnectionArray{ PagerdutyConnectionArgs{...} }
type PagerdutyConnectionArrayInput interface {
	pulumi.Input

	ToPagerdutyConnectionArrayOutput() PagerdutyConnectionArrayOutput
	ToPagerdutyConnectionArrayOutputWithContext(context.Context) PagerdutyConnectionArrayOutput
}

type PagerdutyConnectionArray []PagerdutyConnectionInput

func (PagerdutyConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PagerdutyConnection)(nil)).Elem()
}

func (i PagerdutyConnectionArray) ToPagerdutyConnectionArrayOutput() PagerdutyConnectionArrayOutput {
	return i.ToPagerdutyConnectionArrayOutputWithContext(context.Background())
}

func (i PagerdutyConnectionArray) ToPagerdutyConnectionArrayOutputWithContext(ctx context.Context) PagerdutyConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PagerdutyConnectionArrayOutput)
}

// PagerdutyConnectionMapInput is an input type that accepts PagerdutyConnectionMap and PagerdutyConnectionMapOutput values.
// You can construct a concrete instance of `PagerdutyConnectionMapInput` via:
//
//	PagerdutyConnectionMap{ "key": PagerdutyConnectionArgs{...} }
type PagerdutyConnectionMapInput interface {
	pulumi.Input

	ToPagerdutyConnectionMapOutput() PagerdutyConnectionMapOutput
	ToPagerdutyConnectionMapOutputWithContext(context.Context) PagerdutyConnectionMapOutput
}

type PagerdutyConnectionMap map[string]PagerdutyConnectionInput

func (PagerdutyConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PagerdutyConnection)(nil)).Elem()
}

func (i PagerdutyConnectionMap) ToPagerdutyConnectionMapOutput() PagerdutyConnectionMapOutput {
	return i.ToPagerdutyConnectionMapOutputWithContext(context.Background())
}

func (i PagerdutyConnectionMap) ToPagerdutyConnectionMapOutputWithContext(ctx context.Context) PagerdutyConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PagerdutyConnectionMapOutput)
}

type PagerdutyConnectionOutput struct{ *pulumi.OutputState }

func (PagerdutyConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PagerdutyConnection)(nil)).Elem()
}

func (o PagerdutyConnectionOutput) ToPagerdutyConnectionOutput() PagerdutyConnectionOutput {
	return o
}

func (o PagerdutyConnectionOutput) ToPagerdutyConnectionOutputWithContext(ctx context.Context) PagerdutyConnectionOutput {
	return o
}

// The name of the PagerDuty connection
func (o PagerdutyConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PagerdutyConnection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Token for the PagerDuty API endpoint
func (o PagerdutyConnectionOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *PagerdutyConnection) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

// URL of the PagerDuty API endpoint
func (o PagerdutyConnectionOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *PagerdutyConnection) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type PagerdutyConnectionArrayOutput struct{ *pulumi.OutputState }

func (PagerdutyConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PagerdutyConnection)(nil)).Elem()
}

func (o PagerdutyConnectionArrayOutput) ToPagerdutyConnectionArrayOutput() PagerdutyConnectionArrayOutput {
	return o
}

func (o PagerdutyConnectionArrayOutput) ToPagerdutyConnectionArrayOutputWithContext(ctx context.Context) PagerdutyConnectionArrayOutput {
	return o
}

func (o PagerdutyConnectionArrayOutput) Index(i pulumi.IntInput) PagerdutyConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PagerdutyConnection {
		return vs[0].([]*PagerdutyConnection)[vs[1].(int)]
	}).(PagerdutyConnectionOutput)
}

type PagerdutyConnectionMapOutput struct{ *pulumi.OutputState }

func (PagerdutyConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PagerdutyConnection)(nil)).Elem()
}

func (o PagerdutyConnectionMapOutput) ToPagerdutyConnectionMapOutput() PagerdutyConnectionMapOutput {
	return o
}

func (o PagerdutyConnectionMapOutput) ToPagerdutyConnectionMapOutputWithContext(ctx context.Context) PagerdutyConnectionMapOutput {
	return o
}

func (o PagerdutyConnectionMapOutput) MapIndex(k pulumi.StringInput) PagerdutyConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PagerdutyConnection {
		return vs[0].(map[string]*PagerdutyConnection)[vs[1].(string)]
	}).(PagerdutyConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PagerdutyConnectionInput)(nil)).Elem(), &PagerdutyConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*PagerdutyConnectionArrayInput)(nil)).Elem(), PagerdutyConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PagerdutyConnectionMapInput)(nil)).Elem(), PagerdutyConnectionMap{})
	pulumi.RegisterOutputType(PagerdutyConnectionOutput{})
	pulumi.RegisterOutputType(PagerdutyConnectionArrayOutput{})
	pulumi.RegisterOutputType(PagerdutyConnectionMapOutput{})
}
