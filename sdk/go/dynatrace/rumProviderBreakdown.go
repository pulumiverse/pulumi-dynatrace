// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type RumProviderBreakdown struct {
	pulumi.CustomResourceState

	// Domain name pattern
	DomainNamePatternList RumProviderBreakdownDomainNamePatternListOutput `pulumi:"domainNamePatternList"`
	// Specify an URL for the provider's brand icon
	IconUrl pulumi.StringPtrOutput `pulumi:"iconUrl"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringOutput `pulumi:"insertAfter"`
	// Send the patterns of this provider to Dynatrace to help us improve 3rd-party detection.
	ReportPublicImprovement pulumi.BoolOutput `pulumi:"reportPublicImprovement"`
	// Resource name
	ResourceName pulumi.StringOutput `pulumi:"resourceName"`
	// Possible Values: `FirstParty`, `ThirdParty`, `Cdn`
	ResourceType pulumi.StringOutput `pulumi:"resourceType"`
}

// NewRumProviderBreakdown registers a new resource with the given unique name, arguments, and options.
func NewRumProviderBreakdown(ctx *pulumi.Context,
	name string, args *RumProviderBreakdownArgs, opts ...pulumi.ResourceOption) (*RumProviderBreakdown, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainNamePatternList == nil {
		return nil, errors.New("invalid value for required argument 'DomainNamePatternList'")
	}
	if args.ReportPublicImprovement == nil {
		return nil, errors.New("invalid value for required argument 'ReportPublicImprovement'")
	}
	if args.ResourceName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceName'")
	}
	if args.ResourceType == nil {
		return nil, errors.New("invalid value for required argument 'ResourceType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RumProviderBreakdown
	err := ctx.RegisterResource("dynatrace:index/rumProviderBreakdown:RumProviderBreakdown", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRumProviderBreakdown gets an existing RumProviderBreakdown resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRumProviderBreakdown(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RumProviderBreakdownState, opts ...pulumi.ResourceOption) (*RumProviderBreakdown, error) {
	var resource RumProviderBreakdown
	err := ctx.ReadResource("dynatrace:index/rumProviderBreakdown:RumProviderBreakdown", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RumProviderBreakdown resources.
type rumProviderBreakdownState struct {
	// Domain name pattern
	DomainNamePatternList *RumProviderBreakdownDomainNamePatternList `pulumi:"domainNamePatternList"`
	// Specify an URL for the provider's brand icon
	IconUrl *string `pulumi:"iconUrl"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `pulumi:"insertAfter"`
	// Send the patterns of this provider to Dynatrace to help us improve 3rd-party detection.
	ReportPublicImprovement *bool `pulumi:"reportPublicImprovement"`
	// Resource name
	ResourceName *string `pulumi:"resourceName"`
	// Possible Values: `FirstParty`, `ThirdParty`, `Cdn`
	ResourceType *string `pulumi:"resourceType"`
}

type RumProviderBreakdownState struct {
	// Domain name pattern
	DomainNamePatternList RumProviderBreakdownDomainNamePatternListPtrInput
	// Specify an URL for the provider's brand icon
	IconUrl pulumi.StringPtrInput
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringPtrInput
	// Send the patterns of this provider to Dynatrace to help us improve 3rd-party detection.
	ReportPublicImprovement pulumi.BoolPtrInput
	// Resource name
	ResourceName pulumi.StringPtrInput
	// Possible Values: `FirstParty`, `ThirdParty`, `Cdn`
	ResourceType pulumi.StringPtrInput
}

func (RumProviderBreakdownState) ElementType() reflect.Type {
	return reflect.TypeOf((*rumProviderBreakdownState)(nil)).Elem()
}

type rumProviderBreakdownArgs struct {
	// Domain name pattern
	DomainNamePatternList RumProviderBreakdownDomainNamePatternList `pulumi:"domainNamePatternList"`
	// Specify an URL for the provider's brand icon
	IconUrl *string `pulumi:"iconUrl"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `pulumi:"insertAfter"`
	// Send the patterns of this provider to Dynatrace to help us improve 3rd-party detection.
	ReportPublicImprovement bool `pulumi:"reportPublicImprovement"`
	// Resource name
	ResourceName string `pulumi:"resourceName"`
	// Possible Values: `FirstParty`, `ThirdParty`, `Cdn`
	ResourceType string `pulumi:"resourceType"`
}

// The set of arguments for constructing a RumProviderBreakdown resource.
type RumProviderBreakdownArgs struct {
	// Domain name pattern
	DomainNamePatternList RumProviderBreakdownDomainNamePatternListInput
	// Specify an URL for the provider's brand icon
	IconUrl pulumi.StringPtrInput
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringPtrInput
	// Send the patterns of this provider to Dynatrace to help us improve 3rd-party detection.
	ReportPublicImprovement pulumi.BoolInput
	// Resource name
	ResourceName pulumi.StringInput
	// Possible Values: `FirstParty`, `ThirdParty`, `Cdn`
	ResourceType pulumi.StringInput
}

func (RumProviderBreakdownArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rumProviderBreakdownArgs)(nil)).Elem()
}

type RumProviderBreakdownInput interface {
	pulumi.Input

	ToRumProviderBreakdownOutput() RumProviderBreakdownOutput
	ToRumProviderBreakdownOutputWithContext(ctx context.Context) RumProviderBreakdownOutput
}

func (*RumProviderBreakdown) ElementType() reflect.Type {
	return reflect.TypeOf((**RumProviderBreakdown)(nil)).Elem()
}

func (i *RumProviderBreakdown) ToRumProviderBreakdownOutput() RumProviderBreakdownOutput {
	return i.ToRumProviderBreakdownOutputWithContext(context.Background())
}

func (i *RumProviderBreakdown) ToRumProviderBreakdownOutputWithContext(ctx context.Context) RumProviderBreakdownOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RumProviderBreakdownOutput)
}

// RumProviderBreakdownArrayInput is an input type that accepts RumProviderBreakdownArray and RumProviderBreakdownArrayOutput values.
// You can construct a concrete instance of `RumProviderBreakdownArrayInput` via:
//
//	RumProviderBreakdownArray{ RumProviderBreakdownArgs{...} }
type RumProviderBreakdownArrayInput interface {
	pulumi.Input

	ToRumProviderBreakdownArrayOutput() RumProviderBreakdownArrayOutput
	ToRumProviderBreakdownArrayOutputWithContext(context.Context) RumProviderBreakdownArrayOutput
}

type RumProviderBreakdownArray []RumProviderBreakdownInput

func (RumProviderBreakdownArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RumProviderBreakdown)(nil)).Elem()
}

func (i RumProviderBreakdownArray) ToRumProviderBreakdownArrayOutput() RumProviderBreakdownArrayOutput {
	return i.ToRumProviderBreakdownArrayOutputWithContext(context.Background())
}

func (i RumProviderBreakdownArray) ToRumProviderBreakdownArrayOutputWithContext(ctx context.Context) RumProviderBreakdownArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RumProviderBreakdownArrayOutput)
}

// RumProviderBreakdownMapInput is an input type that accepts RumProviderBreakdownMap and RumProviderBreakdownMapOutput values.
// You can construct a concrete instance of `RumProviderBreakdownMapInput` via:
//
//	RumProviderBreakdownMap{ "key": RumProviderBreakdownArgs{...} }
type RumProviderBreakdownMapInput interface {
	pulumi.Input

	ToRumProviderBreakdownMapOutput() RumProviderBreakdownMapOutput
	ToRumProviderBreakdownMapOutputWithContext(context.Context) RumProviderBreakdownMapOutput
}

type RumProviderBreakdownMap map[string]RumProviderBreakdownInput

func (RumProviderBreakdownMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RumProviderBreakdown)(nil)).Elem()
}

func (i RumProviderBreakdownMap) ToRumProviderBreakdownMapOutput() RumProviderBreakdownMapOutput {
	return i.ToRumProviderBreakdownMapOutputWithContext(context.Background())
}

func (i RumProviderBreakdownMap) ToRumProviderBreakdownMapOutputWithContext(ctx context.Context) RumProviderBreakdownMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RumProviderBreakdownMapOutput)
}

type RumProviderBreakdownOutput struct{ *pulumi.OutputState }

func (RumProviderBreakdownOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RumProviderBreakdown)(nil)).Elem()
}

func (o RumProviderBreakdownOutput) ToRumProviderBreakdownOutput() RumProviderBreakdownOutput {
	return o
}

func (o RumProviderBreakdownOutput) ToRumProviderBreakdownOutputWithContext(ctx context.Context) RumProviderBreakdownOutput {
	return o
}

// Domain name pattern
func (o RumProviderBreakdownOutput) DomainNamePatternList() RumProviderBreakdownDomainNamePatternListOutput {
	return o.ApplyT(func(v *RumProviderBreakdown) RumProviderBreakdownDomainNamePatternListOutput {
		return v.DomainNamePatternList
	}).(RumProviderBreakdownDomainNamePatternListOutput)
}

// Specify an URL for the provider's brand icon
func (o RumProviderBreakdownOutput) IconUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RumProviderBreakdown) pulumi.StringPtrOutput { return v.IconUrl }).(pulumi.StringPtrOutput)
}

// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
func (o RumProviderBreakdownOutput) InsertAfter() pulumi.StringOutput {
	return o.ApplyT(func(v *RumProviderBreakdown) pulumi.StringOutput { return v.InsertAfter }).(pulumi.StringOutput)
}

// Send the patterns of this provider to Dynatrace to help us improve 3rd-party detection.
func (o RumProviderBreakdownOutput) ReportPublicImprovement() pulumi.BoolOutput {
	return o.ApplyT(func(v *RumProviderBreakdown) pulumi.BoolOutput { return v.ReportPublicImprovement }).(pulumi.BoolOutput)
}

// Resource name
func (o RumProviderBreakdownOutput) ResourceName() pulumi.StringOutput {
	return o.ApplyT(func(v *RumProviderBreakdown) pulumi.StringOutput { return v.ResourceName }).(pulumi.StringOutput)
}

// Possible Values: `FirstParty`, `ThirdParty`, `Cdn`
func (o RumProviderBreakdownOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *RumProviderBreakdown) pulumi.StringOutput { return v.ResourceType }).(pulumi.StringOutput)
}

type RumProviderBreakdownArrayOutput struct{ *pulumi.OutputState }

func (RumProviderBreakdownArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RumProviderBreakdown)(nil)).Elem()
}

func (o RumProviderBreakdownArrayOutput) ToRumProviderBreakdownArrayOutput() RumProviderBreakdownArrayOutput {
	return o
}

func (o RumProviderBreakdownArrayOutput) ToRumProviderBreakdownArrayOutputWithContext(ctx context.Context) RumProviderBreakdownArrayOutput {
	return o
}

func (o RumProviderBreakdownArrayOutput) Index(i pulumi.IntInput) RumProviderBreakdownOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RumProviderBreakdown {
		return vs[0].([]*RumProviderBreakdown)[vs[1].(int)]
	}).(RumProviderBreakdownOutput)
}

type RumProviderBreakdownMapOutput struct{ *pulumi.OutputState }

func (RumProviderBreakdownMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RumProviderBreakdown)(nil)).Elem()
}

func (o RumProviderBreakdownMapOutput) ToRumProviderBreakdownMapOutput() RumProviderBreakdownMapOutput {
	return o
}

func (o RumProviderBreakdownMapOutput) ToRumProviderBreakdownMapOutputWithContext(ctx context.Context) RumProviderBreakdownMapOutput {
	return o
}

func (o RumProviderBreakdownMapOutput) MapIndex(k pulumi.StringInput) RumProviderBreakdownOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RumProviderBreakdown {
		return vs[0].(map[string]*RumProviderBreakdown)[vs[1].(string)]
	}).(RumProviderBreakdownOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RumProviderBreakdownInput)(nil)).Elem(), &RumProviderBreakdown{})
	pulumi.RegisterInputType(reflect.TypeOf((*RumProviderBreakdownArrayInput)(nil)).Elem(), RumProviderBreakdownArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RumProviderBreakdownMapInput)(nil)).Elem(), RumProviderBreakdownMap{})
	pulumi.RegisterOutputType(RumProviderBreakdownOutput{})
	pulumi.RegisterOutputType(RumProviderBreakdownArrayOutput{})
	pulumi.RegisterOutputType(RumProviderBreakdownMapOutput{})
}
