// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type WebAppInjectionCookie struct {
	pulumi.CustomResourceState

	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ApplicationId pulumi.StringOutput `pulumi:"applicationId"`
	// Specify an alternative domain for cookies set by Dynatrace. Keep in mind that your browser may not allow placement of cookies on certain domains (for example, top-level domains). Before typing a domain name here, confirm that the domain will accept cookies from your browser. For details, see the list of [forbidden top-level domains](https://dt-url.net/9n6b0pfz).
	CookiePlacementDomain pulumi.StringPtrOutput `pulumi:"cookiePlacementDomain"`
	// Possible Values: `LAX`, `NONE`, `NOTSET`, `STRICT`
	SameSiteCookieAttribute pulumi.StringOutput `pulumi:"sameSiteCookieAttribute"`
	// If your application is only accessible via SSL, you can add the Secure attribute to all cookies set by Dynatrace. This setting prevents the display of warnings from PCI-compliance security scanners. Be aware that with this setting enabled Dynatrace correlation of user actions with server-side web requests is only possible over SSL connections.
	UseSecureCookieAttribute pulumi.BoolOutput `pulumi:"useSecureCookieAttribute"`
}

// NewWebAppInjectionCookie registers a new resource with the given unique name, arguments, and options.
func NewWebAppInjectionCookie(ctx *pulumi.Context,
	name string, args *WebAppInjectionCookieArgs, opts ...pulumi.ResourceOption) (*WebAppInjectionCookie, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationId'")
	}
	if args.SameSiteCookieAttribute == nil {
		return nil, errors.New("invalid value for required argument 'SameSiteCookieAttribute'")
	}
	if args.UseSecureCookieAttribute == nil {
		return nil, errors.New("invalid value for required argument 'UseSecureCookieAttribute'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WebAppInjectionCookie
	err := ctx.RegisterResource("dynatrace:index/webAppInjectionCookie:WebAppInjectionCookie", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebAppInjectionCookie gets an existing WebAppInjectionCookie resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebAppInjectionCookie(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebAppInjectionCookieState, opts ...pulumi.ResourceOption) (*WebAppInjectionCookie, error) {
	var resource WebAppInjectionCookie
	err := ctx.ReadResource("dynatrace:index/webAppInjectionCookie:WebAppInjectionCookie", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WebAppInjectionCookie resources.
type webAppInjectionCookieState struct {
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ApplicationId *string `pulumi:"applicationId"`
	// Specify an alternative domain for cookies set by Dynatrace. Keep in mind that your browser may not allow placement of cookies on certain domains (for example, top-level domains). Before typing a domain name here, confirm that the domain will accept cookies from your browser. For details, see the list of [forbidden top-level domains](https://dt-url.net/9n6b0pfz).
	CookiePlacementDomain *string `pulumi:"cookiePlacementDomain"`
	// Possible Values: `LAX`, `NONE`, `NOTSET`, `STRICT`
	SameSiteCookieAttribute *string `pulumi:"sameSiteCookieAttribute"`
	// If your application is only accessible via SSL, you can add the Secure attribute to all cookies set by Dynatrace. This setting prevents the display of warnings from PCI-compliance security scanners. Be aware that with this setting enabled Dynatrace correlation of user actions with server-side web requests is only possible over SSL connections.
	UseSecureCookieAttribute *bool `pulumi:"useSecureCookieAttribute"`
}

type WebAppInjectionCookieState struct {
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ApplicationId pulumi.StringPtrInput
	// Specify an alternative domain for cookies set by Dynatrace. Keep in mind that your browser may not allow placement of cookies on certain domains (for example, top-level domains). Before typing a domain name here, confirm that the domain will accept cookies from your browser. For details, see the list of [forbidden top-level domains](https://dt-url.net/9n6b0pfz).
	CookiePlacementDomain pulumi.StringPtrInput
	// Possible Values: `LAX`, `NONE`, `NOTSET`, `STRICT`
	SameSiteCookieAttribute pulumi.StringPtrInput
	// If your application is only accessible via SSL, you can add the Secure attribute to all cookies set by Dynatrace. This setting prevents the display of warnings from PCI-compliance security scanners. Be aware that with this setting enabled Dynatrace correlation of user actions with server-side web requests is only possible over SSL connections.
	UseSecureCookieAttribute pulumi.BoolPtrInput
}

func (WebAppInjectionCookieState) ElementType() reflect.Type {
	return reflect.TypeOf((*webAppInjectionCookieState)(nil)).Elem()
}

type webAppInjectionCookieArgs struct {
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ApplicationId string `pulumi:"applicationId"`
	// Specify an alternative domain for cookies set by Dynatrace. Keep in mind that your browser may not allow placement of cookies on certain domains (for example, top-level domains). Before typing a domain name here, confirm that the domain will accept cookies from your browser. For details, see the list of [forbidden top-level domains](https://dt-url.net/9n6b0pfz).
	CookiePlacementDomain *string `pulumi:"cookiePlacementDomain"`
	// Possible Values: `LAX`, `NONE`, `NOTSET`, `STRICT`
	SameSiteCookieAttribute string `pulumi:"sameSiteCookieAttribute"`
	// If your application is only accessible via SSL, you can add the Secure attribute to all cookies set by Dynatrace. This setting prevents the display of warnings from PCI-compliance security scanners. Be aware that with this setting enabled Dynatrace correlation of user actions with server-side web requests is only possible over SSL connections.
	UseSecureCookieAttribute bool `pulumi:"useSecureCookieAttribute"`
}

// The set of arguments for constructing a WebAppInjectionCookie resource.
type WebAppInjectionCookieArgs struct {
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ApplicationId pulumi.StringInput
	// Specify an alternative domain for cookies set by Dynatrace. Keep in mind that your browser may not allow placement of cookies on certain domains (for example, top-level domains). Before typing a domain name here, confirm that the domain will accept cookies from your browser. For details, see the list of [forbidden top-level domains](https://dt-url.net/9n6b0pfz).
	CookiePlacementDomain pulumi.StringPtrInput
	// Possible Values: `LAX`, `NONE`, `NOTSET`, `STRICT`
	SameSiteCookieAttribute pulumi.StringInput
	// If your application is only accessible via SSL, you can add the Secure attribute to all cookies set by Dynatrace. This setting prevents the display of warnings from PCI-compliance security scanners. Be aware that with this setting enabled Dynatrace correlation of user actions with server-side web requests is only possible over SSL connections.
	UseSecureCookieAttribute pulumi.BoolInput
}

func (WebAppInjectionCookieArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webAppInjectionCookieArgs)(nil)).Elem()
}

type WebAppInjectionCookieInput interface {
	pulumi.Input

	ToWebAppInjectionCookieOutput() WebAppInjectionCookieOutput
	ToWebAppInjectionCookieOutputWithContext(ctx context.Context) WebAppInjectionCookieOutput
}

func (*WebAppInjectionCookie) ElementType() reflect.Type {
	return reflect.TypeOf((**WebAppInjectionCookie)(nil)).Elem()
}

func (i *WebAppInjectionCookie) ToWebAppInjectionCookieOutput() WebAppInjectionCookieOutput {
	return i.ToWebAppInjectionCookieOutputWithContext(context.Background())
}

func (i *WebAppInjectionCookie) ToWebAppInjectionCookieOutputWithContext(ctx context.Context) WebAppInjectionCookieOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAppInjectionCookieOutput)
}

// WebAppInjectionCookieArrayInput is an input type that accepts WebAppInjectionCookieArray and WebAppInjectionCookieArrayOutput values.
// You can construct a concrete instance of `WebAppInjectionCookieArrayInput` via:
//
//	WebAppInjectionCookieArray{ WebAppInjectionCookieArgs{...} }
type WebAppInjectionCookieArrayInput interface {
	pulumi.Input

	ToWebAppInjectionCookieArrayOutput() WebAppInjectionCookieArrayOutput
	ToWebAppInjectionCookieArrayOutputWithContext(context.Context) WebAppInjectionCookieArrayOutput
}

type WebAppInjectionCookieArray []WebAppInjectionCookieInput

func (WebAppInjectionCookieArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebAppInjectionCookie)(nil)).Elem()
}

func (i WebAppInjectionCookieArray) ToWebAppInjectionCookieArrayOutput() WebAppInjectionCookieArrayOutput {
	return i.ToWebAppInjectionCookieArrayOutputWithContext(context.Background())
}

func (i WebAppInjectionCookieArray) ToWebAppInjectionCookieArrayOutputWithContext(ctx context.Context) WebAppInjectionCookieArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAppInjectionCookieArrayOutput)
}

// WebAppInjectionCookieMapInput is an input type that accepts WebAppInjectionCookieMap and WebAppInjectionCookieMapOutput values.
// You can construct a concrete instance of `WebAppInjectionCookieMapInput` via:
//
//	WebAppInjectionCookieMap{ "key": WebAppInjectionCookieArgs{...} }
type WebAppInjectionCookieMapInput interface {
	pulumi.Input

	ToWebAppInjectionCookieMapOutput() WebAppInjectionCookieMapOutput
	ToWebAppInjectionCookieMapOutputWithContext(context.Context) WebAppInjectionCookieMapOutput
}

type WebAppInjectionCookieMap map[string]WebAppInjectionCookieInput

func (WebAppInjectionCookieMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebAppInjectionCookie)(nil)).Elem()
}

func (i WebAppInjectionCookieMap) ToWebAppInjectionCookieMapOutput() WebAppInjectionCookieMapOutput {
	return i.ToWebAppInjectionCookieMapOutputWithContext(context.Background())
}

func (i WebAppInjectionCookieMap) ToWebAppInjectionCookieMapOutputWithContext(ctx context.Context) WebAppInjectionCookieMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAppInjectionCookieMapOutput)
}

type WebAppInjectionCookieOutput struct{ *pulumi.OutputState }

func (WebAppInjectionCookieOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebAppInjectionCookie)(nil)).Elem()
}

func (o WebAppInjectionCookieOutput) ToWebAppInjectionCookieOutput() WebAppInjectionCookieOutput {
	return o
}

func (o WebAppInjectionCookieOutput) ToWebAppInjectionCookieOutputWithContext(ctx context.Context) WebAppInjectionCookieOutput {
	return o
}

// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
func (o WebAppInjectionCookieOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *WebAppInjectionCookie) pulumi.StringOutput { return v.ApplicationId }).(pulumi.StringOutput)
}

// Specify an alternative domain for cookies set by Dynatrace. Keep in mind that your browser may not allow placement of cookies on certain domains (for example, top-level domains). Before typing a domain name here, confirm that the domain will accept cookies from your browser. For details, see the list of [forbidden top-level domains](https://dt-url.net/9n6b0pfz).
func (o WebAppInjectionCookieOutput) CookiePlacementDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebAppInjectionCookie) pulumi.StringPtrOutput { return v.CookiePlacementDomain }).(pulumi.StringPtrOutput)
}

// Possible Values: `LAX`, `NONE`, `NOTSET`, `STRICT`
func (o WebAppInjectionCookieOutput) SameSiteCookieAttribute() pulumi.StringOutput {
	return o.ApplyT(func(v *WebAppInjectionCookie) pulumi.StringOutput { return v.SameSiteCookieAttribute }).(pulumi.StringOutput)
}

// If your application is only accessible via SSL, you can add the Secure attribute to all cookies set by Dynatrace. This setting prevents the display of warnings from PCI-compliance security scanners. Be aware that with this setting enabled Dynatrace correlation of user actions with server-side web requests is only possible over SSL connections.
func (o WebAppInjectionCookieOutput) UseSecureCookieAttribute() pulumi.BoolOutput {
	return o.ApplyT(func(v *WebAppInjectionCookie) pulumi.BoolOutput { return v.UseSecureCookieAttribute }).(pulumi.BoolOutput)
}

type WebAppInjectionCookieArrayOutput struct{ *pulumi.OutputState }

func (WebAppInjectionCookieArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebAppInjectionCookie)(nil)).Elem()
}

func (o WebAppInjectionCookieArrayOutput) ToWebAppInjectionCookieArrayOutput() WebAppInjectionCookieArrayOutput {
	return o
}

func (o WebAppInjectionCookieArrayOutput) ToWebAppInjectionCookieArrayOutputWithContext(ctx context.Context) WebAppInjectionCookieArrayOutput {
	return o
}

func (o WebAppInjectionCookieArrayOutput) Index(i pulumi.IntInput) WebAppInjectionCookieOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WebAppInjectionCookie {
		return vs[0].([]*WebAppInjectionCookie)[vs[1].(int)]
	}).(WebAppInjectionCookieOutput)
}

type WebAppInjectionCookieMapOutput struct{ *pulumi.OutputState }

func (WebAppInjectionCookieMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebAppInjectionCookie)(nil)).Elem()
}

func (o WebAppInjectionCookieMapOutput) ToWebAppInjectionCookieMapOutput() WebAppInjectionCookieMapOutput {
	return o
}

func (o WebAppInjectionCookieMapOutput) ToWebAppInjectionCookieMapOutputWithContext(ctx context.Context) WebAppInjectionCookieMapOutput {
	return o
}

func (o WebAppInjectionCookieMapOutput) MapIndex(k pulumi.StringInput) WebAppInjectionCookieOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WebAppInjectionCookie {
		return vs[0].(map[string]*WebAppInjectionCookie)[vs[1].(string)]
	}).(WebAppInjectionCookieOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WebAppInjectionCookieInput)(nil)).Elem(), &WebAppInjectionCookie{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebAppInjectionCookieArrayInput)(nil)).Elem(), WebAppInjectionCookieArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebAppInjectionCookieMapInput)(nil)).Elem(), WebAppInjectionCookieMap{})
	pulumi.RegisterOutputType(WebAppInjectionCookieOutput{})
	pulumi.RegisterOutputType(WebAppInjectionCookieArrayOutput{})
	pulumi.RegisterOutputType(WebAppInjectionCookieMapOutput{})
}
