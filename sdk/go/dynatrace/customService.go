// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type CustomService struct {
	pulumi.CustomResourceState

	// Custom service enabled/disabled
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The name of the custom service, displayed in the UI
	Name pulumi.StringOutput `pulumi:"name"`
	// The list of process groups the custom service should belong to
	ProcessGroups pulumi.StringArrayOutput `pulumi:"processGroups"`
	// The queue entry point flag. Set to `true` for custom messaging services
	QueueEntryPoint pulumi.BoolPtrOutput `pulumi:"queueEntryPoint"`
	// The queue entry point type (IBM*MQ, JMS, KAFKA, MSMQ or RABBIT*MQ)
	QueueEntryPointType pulumi.StringPtrOutput `pulumi:"queueEntryPointType"`
	// The list of rules defining the custom service
	Rules CustomServiceRuleArrayOutput `pulumi:"rules"`
	// Matcher applying to the file name (ENDS*WITH, EQUALS or STARTS*WITH). Default value is ENDS_WITH (if applicable)
	Technology pulumi.StringOutput `pulumi:"technology"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns pulumi.StringPtrOutput `pulumi:"unknowns"`
}

// NewCustomService registers a new resource with the given unique name, arguments, and options.
func NewCustomService(ctx *pulumi.Context,
	name string, args *CustomServiceArgs, opts ...pulumi.ResourceOption) (*CustomService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Technology == nil {
		return nil, errors.New("invalid value for required argument 'Technology'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CustomService
	err := ctx.RegisterResource("dynatrace:index/customService:CustomService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCustomService gets an existing CustomService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCustomService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CustomServiceState, opts ...pulumi.ResourceOption) (*CustomService, error) {
	var resource CustomService
	err := ctx.ReadResource("dynatrace:index/customService:CustomService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CustomService resources.
type customServiceState struct {
	// Custom service enabled/disabled
	Enabled *bool `pulumi:"enabled"`
	// The name of the custom service, displayed in the UI
	Name *string `pulumi:"name"`
	// The list of process groups the custom service should belong to
	ProcessGroups []string `pulumi:"processGroups"`
	// The queue entry point flag. Set to `true` for custom messaging services
	QueueEntryPoint *bool `pulumi:"queueEntryPoint"`
	// The queue entry point type (IBM*MQ, JMS, KAFKA, MSMQ or RABBIT*MQ)
	QueueEntryPointType *string `pulumi:"queueEntryPointType"`
	// The list of rules defining the custom service
	Rules []CustomServiceRule `pulumi:"rules"`
	// Matcher applying to the file name (ENDS*WITH, EQUALS or STARTS*WITH). Default value is ENDS_WITH (if applicable)
	Technology *string `pulumi:"technology"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `pulumi:"unknowns"`
}

type CustomServiceState struct {
	// Custom service enabled/disabled
	Enabled pulumi.BoolPtrInput
	// The name of the custom service, displayed in the UI
	Name pulumi.StringPtrInput
	// The list of process groups the custom service should belong to
	ProcessGroups pulumi.StringArrayInput
	// The queue entry point flag. Set to `true` for custom messaging services
	QueueEntryPoint pulumi.BoolPtrInput
	// The queue entry point type (IBM*MQ, JMS, KAFKA, MSMQ or RABBIT*MQ)
	QueueEntryPointType pulumi.StringPtrInput
	// The list of rules defining the custom service
	Rules CustomServiceRuleArrayInput
	// Matcher applying to the file name (ENDS*WITH, EQUALS or STARTS*WITH). Default value is ENDS_WITH (if applicable)
	Technology pulumi.StringPtrInput
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns pulumi.StringPtrInput
}

func (CustomServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*customServiceState)(nil)).Elem()
}

type customServiceArgs struct {
	// Custom service enabled/disabled
	Enabled bool `pulumi:"enabled"`
	// The name of the custom service, displayed in the UI
	Name *string `pulumi:"name"`
	// The list of process groups the custom service should belong to
	ProcessGroups []string `pulumi:"processGroups"`
	// The queue entry point flag. Set to `true` for custom messaging services
	QueueEntryPoint *bool `pulumi:"queueEntryPoint"`
	// The queue entry point type (IBM*MQ, JMS, KAFKA, MSMQ or RABBIT*MQ)
	QueueEntryPointType *string `pulumi:"queueEntryPointType"`
	// The list of rules defining the custom service
	Rules []CustomServiceRule `pulumi:"rules"`
	// Matcher applying to the file name (ENDS*WITH, EQUALS or STARTS*WITH). Default value is ENDS_WITH (if applicable)
	Technology string `pulumi:"technology"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `pulumi:"unknowns"`
}

// The set of arguments for constructing a CustomService resource.
type CustomServiceArgs struct {
	// Custom service enabled/disabled
	Enabled pulumi.BoolInput
	// The name of the custom service, displayed in the UI
	Name pulumi.StringPtrInput
	// The list of process groups the custom service should belong to
	ProcessGroups pulumi.StringArrayInput
	// The queue entry point flag. Set to `true` for custom messaging services
	QueueEntryPoint pulumi.BoolPtrInput
	// The queue entry point type (IBM*MQ, JMS, KAFKA, MSMQ or RABBIT*MQ)
	QueueEntryPointType pulumi.StringPtrInput
	// The list of rules defining the custom service
	Rules CustomServiceRuleArrayInput
	// Matcher applying to the file name (ENDS*WITH, EQUALS or STARTS*WITH). Default value is ENDS_WITH (if applicable)
	Technology pulumi.StringInput
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns pulumi.StringPtrInput
}

func (CustomServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*customServiceArgs)(nil)).Elem()
}

type CustomServiceInput interface {
	pulumi.Input

	ToCustomServiceOutput() CustomServiceOutput
	ToCustomServiceOutputWithContext(ctx context.Context) CustomServiceOutput
}

func (*CustomService) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomService)(nil)).Elem()
}

func (i *CustomService) ToCustomServiceOutput() CustomServiceOutput {
	return i.ToCustomServiceOutputWithContext(context.Background())
}

func (i *CustomService) ToCustomServiceOutputWithContext(ctx context.Context) CustomServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomServiceOutput)
}

// CustomServiceArrayInput is an input type that accepts CustomServiceArray and CustomServiceArrayOutput values.
// You can construct a concrete instance of `CustomServiceArrayInput` via:
//
//	CustomServiceArray{ CustomServiceArgs{...} }
type CustomServiceArrayInput interface {
	pulumi.Input

	ToCustomServiceArrayOutput() CustomServiceArrayOutput
	ToCustomServiceArrayOutputWithContext(context.Context) CustomServiceArrayOutput
}

type CustomServiceArray []CustomServiceInput

func (CustomServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomService)(nil)).Elem()
}

func (i CustomServiceArray) ToCustomServiceArrayOutput() CustomServiceArrayOutput {
	return i.ToCustomServiceArrayOutputWithContext(context.Background())
}

func (i CustomServiceArray) ToCustomServiceArrayOutputWithContext(ctx context.Context) CustomServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomServiceArrayOutput)
}

// CustomServiceMapInput is an input type that accepts CustomServiceMap and CustomServiceMapOutput values.
// You can construct a concrete instance of `CustomServiceMapInput` via:
//
//	CustomServiceMap{ "key": CustomServiceArgs{...} }
type CustomServiceMapInput interface {
	pulumi.Input

	ToCustomServiceMapOutput() CustomServiceMapOutput
	ToCustomServiceMapOutputWithContext(context.Context) CustomServiceMapOutput
}

type CustomServiceMap map[string]CustomServiceInput

func (CustomServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomService)(nil)).Elem()
}

func (i CustomServiceMap) ToCustomServiceMapOutput() CustomServiceMapOutput {
	return i.ToCustomServiceMapOutputWithContext(context.Background())
}

func (i CustomServiceMap) ToCustomServiceMapOutputWithContext(ctx context.Context) CustomServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomServiceMapOutput)
}

type CustomServiceOutput struct{ *pulumi.OutputState }

func (CustomServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomService)(nil)).Elem()
}

func (o CustomServiceOutput) ToCustomServiceOutput() CustomServiceOutput {
	return o
}

func (o CustomServiceOutput) ToCustomServiceOutputWithContext(ctx context.Context) CustomServiceOutput {
	return o
}

// Custom service enabled/disabled
func (o CustomServiceOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *CustomService) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The name of the custom service, displayed in the UI
func (o CustomServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomService) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The list of process groups the custom service should belong to
func (o CustomServiceOutput) ProcessGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CustomService) pulumi.StringArrayOutput { return v.ProcessGroups }).(pulumi.StringArrayOutput)
}

// The queue entry point flag. Set to `true` for custom messaging services
func (o CustomServiceOutput) QueueEntryPoint() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CustomService) pulumi.BoolPtrOutput { return v.QueueEntryPoint }).(pulumi.BoolPtrOutput)
}

// The queue entry point type (IBM*MQ, JMS, KAFKA, MSMQ or RABBIT*MQ)
func (o CustomServiceOutput) QueueEntryPointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomService) pulumi.StringPtrOutput { return v.QueueEntryPointType }).(pulumi.StringPtrOutput)
}

// The list of rules defining the custom service
func (o CustomServiceOutput) Rules() CustomServiceRuleArrayOutput {
	return o.ApplyT(func(v *CustomService) CustomServiceRuleArrayOutput { return v.Rules }).(CustomServiceRuleArrayOutput)
}

// Matcher applying to the file name (ENDS*WITH, EQUALS or STARTS*WITH). Default value is ENDS_WITH (if applicable)
func (o CustomServiceOutput) Technology() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomService) pulumi.StringOutput { return v.Technology }).(pulumi.StringOutput)
}

// allows for configuring properties that are not explicitly supported by the current version of this provider
func (o CustomServiceOutput) Unknowns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomService) pulumi.StringPtrOutput { return v.Unknowns }).(pulumi.StringPtrOutput)
}

type CustomServiceArrayOutput struct{ *pulumi.OutputState }

func (CustomServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomService)(nil)).Elem()
}

func (o CustomServiceArrayOutput) ToCustomServiceArrayOutput() CustomServiceArrayOutput {
	return o
}

func (o CustomServiceArrayOutput) ToCustomServiceArrayOutputWithContext(ctx context.Context) CustomServiceArrayOutput {
	return o
}

func (o CustomServiceArrayOutput) Index(i pulumi.IntInput) CustomServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CustomService {
		return vs[0].([]*CustomService)[vs[1].(int)]
	}).(CustomServiceOutput)
}

type CustomServiceMapOutput struct{ *pulumi.OutputState }

func (CustomServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomService)(nil)).Elem()
}

func (o CustomServiceMapOutput) ToCustomServiceMapOutput() CustomServiceMapOutput {
	return o
}

func (o CustomServiceMapOutput) ToCustomServiceMapOutputWithContext(ctx context.Context) CustomServiceMapOutput {
	return o
}

func (o CustomServiceMapOutput) MapIndex(k pulumi.StringInput) CustomServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CustomService {
		return vs[0].(map[string]*CustomService)[vs[1].(string)]
	}).(CustomServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CustomServiceInput)(nil)).Elem(), &CustomService{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomServiceArrayInput)(nil)).Elem(), CustomServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomServiceMapInput)(nil)).Elem(), CustomServiceMap{})
	pulumi.RegisterOutputType(CustomServiceOutput{})
	pulumi.RegisterOutputType(CustomServiceArrayOutput{})
	pulumi.RegisterOutputType(CustomServiceMapOutput{})
}
