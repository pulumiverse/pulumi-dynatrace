// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type MutedRequests struct {
	pulumi.CustomResourceState

	// Muted request names
	MutedRequestNames pulumi.StringArrayOutput `pulumi:"mutedRequestNames"`
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
}

// NewMutedRequests registers a new resource with the given unique name, arguments, and options.
func NewMutedRequests(ctx *pulumi.Context,
	name string, args *MutedRequestsArgs, opts ...pulumi.ResourceOption) (*MutedRequests, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MutedRequests
	err := ctx.RegisterResource("dynatrace:index/mutedRequests:MutedRequests", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMutedRequests gets an existing MutedRequests resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMutedRequests(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MutedRequestsState, opts ...pulumi.ResourceOption) (*MutedRequests, error) {
	var resource MutedRequests
	err := ctx.ReadResource("dynatrace:index/mutedRequests:MutedRequests", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MutedRequests resources.
type mutedRequestsState struct {
	// Muted request names
	MutedRequestNames []string `pulumi:"mutedRequestNames"`
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ServiceId *string `pulumi:"serviceId"`
}

type MutedRequestsState struct {
	// Muted request names
	MutedRequestNames pulumi.StringArrayInput
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ServiceId pulumi.StringPtrInput
}

func (MutedRequestsState) ElementType() reflect.Type {
	return reflect.TypeOf((*mutedRequestsState)(nil)).Elem()
}

type mutedRequestsArgs struct {
	// Muted request names
	MutedRequestNames []string `pulumi:"mutedRequestNames"`
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ServiceId string `pulumi:"serviceId"`
}

// The set of arguments for constructing a MutedRequests resource.
type MutedRequestsArgs struct {
	// Muted request names
	MutedRequestNames pulumi.StringArrayInput
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ServiceId pulumi.StringInput
}

func (MutedRequestsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mutedRequestsArgs)(nil)).Elem()
}

type MutedRequestsInput interface {
	pulumi.Input

	ToMutedRequestsOutput() MutedRequestsOutput
	ToMutedRequestsOutputWithContext(ctx context.Context) MutedRequestsOutput
}

func (*MutedRequests) ElementType() reflect.Type {
	return reflect.TypeOf((**MutedRequests)(nil)).Elem()
}

func (i *MutedRequests) ToMutedRequestsOutput() MutedRequestsOutput {
	return i.ToMutedRequestsOutputWithContext(context.Background())
}

func (i *MutedRequests) ToMutedRequestsOutputWithContext(ctx context.Context) MutedRequestsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MutedRequestsOutput)
}

// MutedRequestsArrayInput is an input type that accepts MutedRequestsArray and MutedRequestsArrayOutput values.
// You can construct a concrete instance of `MutedRequestsArrayInput` via:
//
//	MutedRequestsArray{ MutedRequestsArgs{...} }
type MutedRequestsArrayInput interface {
	pulumi.Input

	ToMutedRequestsArrayOutput() MutedRequestsArrayOutput
	ToMutedRequestsArrayOutputWithContext(context.Context) MutedRequestsArrayOutput
}

type MutedRequestsArray []MutedRequestsInput

func (MutedRequestsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MutedRequests)(nil)).Elem()
}

func (i MutedRequestsArray) ToMutedRequestsArrayOutput() MutedRequestsArrayOutput {
	return i.ToMutedRequestsArrayOutputWithContext(context.Background())
}

func (i MutedRequestsArray) ToMutedRequestsArrayOutputWithContext(ctx context.Context) MutedRequestsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MutedRequestsArrayOutput)
}

// MutedRequestsMapInput is an input type that accepts MutedRequestsMap and MutedRequestsMapOutput values.
// You can construct a concrete instance of `MutedRequestsMapInput` via:
//
//	MutedRequestsMap{ "key": MutedRequestsArgs{...} }
type MutedRequestsMapInput interface {
	pulumi.Input

	ToMutedRequestsMapOutput() MutedRequestsMapOutput
	ToMutedRequestsMapOutputWithContext(context.Context) MutedRequestsMapOutput
}

type MutedRequestsMap map[string]MutedRequestsInput

func (MutedRequestsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MutedRequests)(nil)).Elem()
}

func (i MutedRequestsMap) ToMutedRequestsMapOutput() MutedRequestsMapOutput {
	return i.ToMutedRequestsMapOutputWithContext(context.Background())
}

func (i MutedRequestsMap) ToMutedRequestsMapOutputWithContext(ctx context.Context) MutedRequestsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MutedRequestsMapOutput)
}

type MutedRequestsOutput struct{ *pulumi.OutputState }

func (MutedRequestsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MutedRequests)(nil)).Elem()
}

func (o MutedRequestsOutput) ToMutedRequestsOutput() MutedRequestsOutput {
	return o
}

func (o MutedRequestsOutput) ToMutedRequestsOutputWithContext(ctx context.Context) MutedRequestsOutput {
	return o
}

// Muted request names
func (o MutedRequestsOutput) MutedRequestNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MutedRequests) pulumi.StringArrayOutput { return v.MutedRequestNames }).(pulumi.StringArrayOutput)
}

// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
func (o MutedRequestsOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *MutedRequests) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

type MutedRequestsArrayOutput struct{ *pulumi.OutputState }

func (MutedRequestsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MutedRequests)(nil)).Elem()
}

func (o MutedRequestsArrayOutput) ToMutedRequestsArrayOutput() MutedRequestsArrayOutput {
	return o
}

func (o MutedRequestsArrayOutput) ToMutedRequestsArrayOutputWithContext(ctx context.Context) MutedRequestsArrayOutput {
	return o
}

func (o MutedRequestsArrayOutput) Index(i pulumi.IntInput) MutedRequestsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MutedRequests {
		return vs[0].([]*MutedRequests)[vs[1].(int)]
	}).(MutedRequestsOutput)
}

type MutedRequestsMapOutput struct{ *pulumi.OutputState }

func (MutedRequestsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MutedRequests)(nil)).Elem()
}

func (o MutedRequestsMapOutput) ToMutedRequestsMapOutput() MutedRequestsMapOutput {
	return o
}

func (o MutedRequestsMapOutput) ToMutedRequestsMapOutputWithContext(ctx context.Context) MutedRequestsMapOutput {
	return o
}

func (o MutedRequestsMapOutput) MapIndex(k pulumi.StringInput) MutedRequestsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MutedRequests {
		return vs[0].(map[string]*MutedRequests)[vs[1].(string)]
	}).(MutedRequestsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MutedRequestsInput)(nil)).Elem(), &MutedRequests{})
	pulumi.RegisterInputType(reflect.TypeOf((*MutedRequestsArrayInput)(nil)).Elem(), MutedRequestsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MutedRequestsMapInput)(nil)).Elem(), MutedRequestsMap{})
	pulumi.RegisterOutputType(MutedRequestsOutput{})
	pulumi.RegisterOutputType(MutedRequestsArrayOutput{})
	pulumi.RegisterOutputType(MutedRequestsMapOutput{})
}
