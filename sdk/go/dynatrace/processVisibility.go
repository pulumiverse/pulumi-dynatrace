// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type ProcessVisibility struct {
	pulumi.CustomResourceState

	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The maximum amount of processes that host may report is **100**
	MaxProcesses pulumi.IntOutput `pulumi:"maxProcesses"`
	// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
}

// NewProcessVisibility registers a new resource with the given unique name, arguments, and options.
func NewProcessVisibility(ctx *pulumi.Context,
	name string, args *ProcessVisibilityArgs, opts ...pulumi.ResourceOption) (*ProcessVisibility, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.MaxProcesses == nil {
		return nil, errors.New("invalid value for required argument 'MaxProcesses'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProcessVisibility
	err := ctx.RegisterResource("dynatrace:index/processVisibility:ProcessVisibility", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProcessVisibility gets an existing ProcessVisibility resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProcessVisibility(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProcessVisibilityState, opts ...pulumi.ResourceOption) (*ProcessVisibility, error) {
	var resource ProcessVisibility
	err := ctx.ReadResource("dynatrace:index/processVisibility:ProcessVisibility", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProcessVisibility resources.
type processVisibilityState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// The maximum amount of processes that host may report is **100**
	MaxProcesses *int `pulumi:"maxProcesses"`
	// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
}

type ProcessVisibilityState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// The maximum amount of processes that host may report is **100**
	MaxProcesses pulumi.IntPtrInput
	// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
}

func (ProcessVisibilityState) ElementType() reflect.Type {
	return reflect.TypeOf((*processVisibilityState)(nil)).Elem()
}

type processVisibilityArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// The maximum amount of processes that host may report is **100**
	MaxProcesses int `pulumi:"maxProcesses"`
	// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
}

// The set of arguments for constructing a ProcessVisibility resource.
type ProcessVisibilityArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// The maximum amount of processes that host may report is **100**
	MaxProcesses pulumi.IntInput
	// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
}

func (ProcessVisibilityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*processVisibilityArgs)(nil)).Elem()
}

type ProcessVisibilityInput interface {
	pulumi.Input

	ToProcessVisibilityOutput() ProcessVisibilityOutput
	ToProcessVisibilityOutputWithContext(ctx context.Context) ProcessVisibilityOutput
}

func (*ProcessVisibility) ElementType() reflect.Type {
	return reflect.TypeOf((**ProcessVisibility)(nil)).Elem()
}

func (i *ProcessVisibility) ToProcessVisibilityOutput() ProcessVisibilityOutput {
	return i.ToProcessVisibilityOutputWithContext(context.Background())
}

func (i *ProcessVisibility) ToProcessVisibilityOutputWithContext(ctx context.Context) ProcessVisibilityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProcessVisibilityOutput)
}

// ProcessVisibilityArrayInput is an input type that accepts ProcessVisibilityArray and ProcessVisibilityArrayOutput values.
// You can construct a concrete instance of `ProcessVisibilityArrayInput` via:
//
//	ProcessVisibilityArray{ ProcessVisibilityArgs{...} }
type ProcessVisibilityArrayInput interface {
	pulumi.Input

	ToProcessVisibilityArrayOutput() ProcessVisibilityArrayOutput
	ToProcessVisibilityArrayOutputWithContext(context.Context) ProcessVisibilityArrayOutput
}

type ProcessVisibilityArray []ProcessVisibilityInput

func (ProcessVisibilityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProcessVisibility)(nil)).Elem()
}

func (i ProcessVisibilityArray) ToProcessVisibilityArrayOutput() ProcessVisibilityArrayOutput {
	return i.ToProcessVisibilityArrayOutputWithContext(context.Background())
}

func (i ProcessVisibilityArray) ToProcessVisibilityArrayOutputWithContext(ctx context.Context) ProcessVisibilityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProcessVisibilityArrayOutput)
}

// ProcessVisibilityMapInput is an input type that accepts ProcessVisibilityMap and ProcessVisibilityMapOutput values.
// You can construct a concrete instance of `ProcessVisibilityMapInput` via:
//
//	ProcessVisibilityMap{ "key": ProcessVisibilityArgs{...} }
type ProcessVisibilityMapInput interface {
	pulumi.Input

	ToProcessVisibilityMapOutput() ProcessVisibilityMapOutput
	ToProcessVisibilityMapOutputWithContext(context.Context) ProcessVisibilityMapOutput
}

type ProcessVisibilityMap map[string]ProcessVisibilityInput

func (ProcessVisibilityMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProcessVisibility)(nil)).Elem()
}

func (i ProcessVisibilityMap) ToProcessVisibilityMapOutput() ProcessVisibilityMapOutput {
	return i.ToProcessVisibilityMapOutputWithContext(context.Background())
}

func (i ProcessVisibilityMap) ToProcessVisibilityMapOutputWithContext(ctx context.Context) ProcessVisibilityMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProcessVisibilityMapOutput)
}

type ProcessVisibilityOutput struct{ *pulumi.OutputState }

func (ProcessVisibilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProcessVisibility)(nil)).Elem()
}

func (o ProcessVisibilityOutput) ToProcessVisibilityOutput() ProcessVisibilityOutput {
	return o
}

func (o ProcessVisibilityOutput) ToProcessVisibilityOutputWithContext(ctx context.Context) ProcessVisibilityOutput {
	return o
}

// This setting is enabled (`true`) or disabled (`false`)
func (o ProcessVisibilityOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProcessVisibility) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The maximum amount of processes that host may report is **100**
func (o ProcessVisibilityOutput) MaxProcesses() pulumi.IntOutput {
	return o.ApplyT(func(v *ProcessVisibility) pulumi.IntOutput { return v.MaxProcesses }).(pulumi.IntOutput)
}

// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
func (o ProcessVisibilityOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProcessVisibility) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

type ProcessVisibilityArrayOutput struct{ *pulumi.OutputState }

func (ProcessVisibilityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProcessVisibility)(nil)).Elem()
}

func (o ProcessVisibilityArrayOutput) ToProcessVisibilityArrayOutput() ProcessVisibilityArrayOutput {
	return o
}

func (o ProcessVisibilityArrayOutput) ToProcessVisibilityArrayOutputWithContext(ctx context.Context) ProcessVisibilityArrayOutput {
	return o
}

func (o ProcessVisibilityArrayOutput) Index(i pulumi.IntInput) ProcessVisibilityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProcessVisibility {
		return vs[0].([]*ProcessVisibility)[vs[1].(int)]
	}).(ProcessVisibilityOutput)
}

type ProcessVisibilityMapOutput struct{ *pulumi.OutputState }

func (ProcessVisibilityMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProcessVisibility)(nil)).Elem()
}

func (o ProcessVisibilityMapOutput) ToProcessVisibilityMapOutput() ProcessVisibilityMapOutput {
	return o
}

func (o ProcessVisibilityMapOutput) ToProcessVisibilityMapOutputWithContext(ctx context.Context) ProcessVisibilityMapOutput {
	return o
}

func (o ProcessVisibilityMapOutput) MapIndex(k pulumi.StringInput) ProcessVisibilityOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProcessVisibility {
		return vs[0].(map[string]*ProcessVisibility)[vs[1].(string)]
	}).(ProcessVisibilityOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProcessVisibilityInput)(nil)).Elem(), &ProcessVisibility{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProcessVisibilityArrayInput)(nil)).Elem(), ProcessVisibilityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProcessVisibilityMapInput)(nil)).Elem(), ProcessVisibilityMap{})
	pulumi.RegisterOutputType(ProcessVisibilityOutput{})
	pulumi.RegisterOutputType(ProcessVisibilityArrayOutput{})
	pulumi.RegisterOutputType(ProcessVisibilityMapOutput{})
}
