// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

// The `getGeoCountries` data source retrieves the list of countries and their codes.
//
// Geographic regions API: GET countries - https://docs.dynatrace.com/docs/shortlink/api-v2-rum-geographic-regions-get-countries
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := dynatrace.GetGeoCountries(ctx, map[string]interface{}{}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("test", example)
//			return nil
//		})
//	}
//
// ```
func GetGeoCountries(ctx *pulumi.Context, opts ...pulumi.InvokeOption) (*GetGeoCountriesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetGeoCountriesResult
	err := ctx.Invoke("dynatrace:index/getGeoCountries:getGeoCountries", nil, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of values returned by getGeoCountries.
type GetGeoCountriesResult struct {
	Countries []GetGeoCountriesCountry `pulumi:"countries"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
}

func GetGeoCountriesOutput(ctx *pulumi.Context, opts ...pulumi.InvokeOption) GetGeoCountriesResultOutput {
	return pulumi.ToOutput(0).ApplyT(func(int) (GetGeoCountriesResultOutput, error) {
		options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
		return ctx.InvokeOutput("dynatrace:index/getGeoCountries:getGeoCountries", nil, GetGeoCountriesResultOutput{}, options).(GetGeoCountriesResultOutput), nil
	}).(GetGeoCountriesResultOutput)
}

// A collection of values returned by getGeoCountries.
type GetGeoCountriesResultOutput struct{ *pulumi.OutputState }

func (GetGeoCountriesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGeoCountriesResult)(nil)).Elem()
}

func (o GetGeoCountriesResultOutput) ToGetGeoCountriesResultOutput() GetGeoCountriesResultOutput {
	return o
}

func (o GetGeoCountriesResultOutput) ToGetGeoCountriesResultOutputWithContext(ctx context.Context) GetGeoCountriesResultOutput {
	return o
}

func (o GetGeoCountriesResultOutput) Countries() GetGeoCountriesCountryArrayOutput {
	return o.ApplyT(func(v GetGeoCountriesResult) []GetGeoCountriesCountry { return v.Countries }).(GetGeoCountriesCountryArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetGeoCountriesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetGeoCountriesResult) string { return v.Id }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetGeoCountriesResultOutput{})
}
