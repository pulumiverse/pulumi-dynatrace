// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type Autotag struct {
	pulumi.CustomResourceState

	// The description of the auto-tag.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A list of entity-selector based rules for management zone usage. If several rules are specified, the `or` logic applies
	EntitySelectorBasedRules AutotagEntitySelectorBasedRuleArrayOutput `pulumi:"entitySelectorBasedRules"`
	// The name of the auto-tag, which is applied to entities.  Additionally you can specify a **valueFormat** in the tag rule. In that case the tag is used in the `name:valueFormat` format.  For example you can extend the `Infrastructure` tag to `Infrastructure:Windows` and `Infrastructure:Linux`.
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
	Rules AutotagRuleArrayOutput `pulumi:"rules"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns pulumi.StringPtrOutput `pulumi:"unknowns"`
}

// NewAutotag registers a new resource with the given unique name, arguments, and options.
func NewAutotag(ctx *pulumi.Context,
	name string, args *AutotagArgs, opts ...pulumi.ResourceOption) (*Autotag, error) {
	if args == nil {
		args = &AutotagArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Autotag
	err := ctx.RegisterResource("dynatrace:index/autotag:Autotag", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAutotag gets an existing Autotag resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAutotag(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AutotagState, opts ...pulumi.ResourceOption) (*Autotag, error) {
	var resource Autotag
	err := ctx.ReadResource("dynatrace:index/autotag:Autotag", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Autotag resources.
type autotagState struct {
	// The description of the auto-tag.
	Description *string `pulumi:"description"`
	// A list of entity-selector based rules for management zone usage. If several rules are specified, the `or` logic applies
	EntitySelectorBasedRules []AutotagEntitySelectorBasedRule `pulumi:"entitySelectorBasedRules"`
	// The name of the auto-tag, which is applied to entities.  Additionally you can specify a **valueFormat** in the tag rule. In that case the tag is used in the `name:valueFormat` format.  For example you can extend the `Infrastructure` tag to `Infrastructure:Windows` and `Infrastructure:Linux`.
	Name *string `pulumi:"name"`
	// A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
	Rules []AutotagRule `pulumi:"rules"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `pulumi:"unknowns"`
}

type AutotagState struct {
	// The description of the auto-tag.
	Description pulumi.StringPtrInput
	// A list of entity-selector based rules for management zone usage. If several rules are specified, the `or` logic applies
	EntitySelectorBasedRules AutotagEntitySelectorBasedRuleArrayInput
	// The name of the auto-tag, which is applied to entities.  Additionally you can specify a **valueFormat** in the tag rule. In that case the tag is used in the `name:valueFormat` format.  For example you can extend the `Infrastructure` tag to `Infrastructure:Windows` and `Infrastructure:Linux`.
	Name pulumi.StringPtrInput
	// A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
	Rules AutotagRuleArrayInput
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns pulumi.StringPtrInput
}

func (AutotagState) ElementType() reflect.Type {
	return reflect.TypeOf((*autotagState)(nil)).Elem()
}

type autotagArgs struct {
	// The description of the auto-tag.
	Description *string `pulumi:"description"`
	// A list of entity-selector based rules for management zone usage. If several rules are specified, the `or` logic applies
	EntitySelectorBasedRules []AutotagEntitySelectorBasedRule `pulumi:"entitySelectorBasedRules"`
	// The name of the auto-tag, which is applied to entities.  Additionally you can specify a **valueFormat** in the tag rule. In that case the tag is used in the `name:valueFormat` format.  For example you can extend the `Infrastructure` tag to `Infrastructure:Windows` and `Infrastructure:Linux`.
	Name *string `pulumi:"name"`
	// A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
	Rules []AutotagRule `pulumi:"rules"`
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `pulumi:"unknowns"`
}

// The set of arguments for constructing a Autotag resource.
type AutotagArgs struct {
	// The description of the auto-tag.
	Description pulumi.StringPtrInput
	// A list of entity-selector based rules for management zone usage. If several rules are specified, the `or` logic applies
	EntitySelectorBasedRules AutotagEntitySelectorBasedRuleArrayInput
	// The name of the auto-tag, which is applied to entities.  Additionally you can specify a **valueFormat** in the tag rule. In that case the tag is used in the `name:valueFormat` format.  For example you can extend the `Infrastructure` tag to `Infrastructure:Windows` and `Infrastructure:Linux`.
	Name pulumi.StringPtrInput
	// A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
	Rules AutotagRuleArrayInput
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns pulumi.StringPtrInput
}

func (AutotagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*autotagArgs)(nil)).Elem()
}

type AutotagInput interface {
	pulumi.Input

	ToAutotagOutput() AutotagOutput
	ToAutotagOutputWithContext(ctx context.Context) AutotagOutput
}

func (*Autotag) ElementType() reflect.Type {
	return reflect.TypeOf((**Autotag)(nil)).Elem()
}

func (i *Autotag) ToAutotagOutput() AutotagOutput {
	return i.ToAutotagOutputWithContext(context.Background())
}

func (i *Autotag) ToAutotagOutputWithContext(ctx context.Context) AutotagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutotagOutput)
}

// AutotagArrayInput is an input type that accepts AutotagArray and AutotagArrayOutput values.
// You can construct a concrete instance of `AutotagArrayInput` via:
//
//	AutotagArray{ AutotagArgs{...} }
type AutotagArrayInput interface {
	pulumi.Input

	ToAutotagArrayOutput() AutotagArrayOutput
	ToAutotagArrayOutputWithContext(context.Context) AutotagArrayOutput
}

type AutotagArray []AutotagInput

func (AutotagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Autotag)(nil)).Elem()
}

func (i AutotagArray) ToAutotagArrayOutput() AutotagArrayOutput {
	return i.ToAutotagArrayOutputWithContext(context.Background())
}

func (i AutotagArray) ToAutotagArrayOutputWithContext(ctx context.Context) AutotagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutotagArrayOutput)
}

// AutotagMapInput is an input type that accepts AutotagMap and AutotagMapOutput values.
// You can construct a concrete instance of `AutotagMapInput` via:
//
//	AutotagMap{ "key": AutotagArgs{...} }
type AutotagMapInput interface {
	pulumi.Input

	ToAutotagMapOutput() AutotagMapOutput
	ToAutotagMapOutputWithContext(context.Context) AutotagMapOutput
}

type AutotagMap map[string]AutotagInput

func (AutotagMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Autotag)(nil)).Elem()
}

func (i AutotagMap) ToAutotagMapOutput() AutotagMapOutput {
	return i.ToAutotagMapOutputWithContext(context.Background())
}

func (i AutotagMap) ToAutotagMapOutputWithContext(ctx context.Context) AutotagMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutotagMapOutput)
}

type AutotagOutput struct{ *pulumi.OutputState }

func (AutotagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Autotag)(nil)).Elem()
}

func (o AutotagOutput) ToAutotagOutput() AutotagOutput {
	return o
}

func (o AutotagOutput) ToAutotagOutputWithContext(ctx context.Context) AutotagOutput {
	return o
}

// The description of the auto-tag.
func (o AutotagOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Autotag) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A list of entity-selector based rules for management zone usage. If several rules are specified, the `or` logic applies
func (o AutotagOutput) EntitySelectorBasedRules() AutotagEntitySelectorBasedRuleArrayOutput {
	return o.ApplyT(func(v *Autotag) AutotagEntitySelectorBasedRuleArrayOutput { return v.EntitySelectorBasedRules }).(AutotagEntitySelectorBasedRuleArrayOutput)
}

// The name of the auto-tag, which is applied to entities.  Additionally you can specify a **valueFormat** in the tag rule. In that case the tag is used in the `name:valueFormat` format.  For example you can extend the `Infrastructure` tag to `Infrastructure:Windows` and `Infrastructure:Linux`.
func (o AutotagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Autotag) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
func (o AutotagOutput) Rules() AutotagRuleArrayOutput {
	return o.ApplyT(func(v *Autotag) AutotagRuleArrayOutput { return v.Rules }).(AutotagRuleArrayOutput)
}

// allows for configuring properties that are not explicitly supported by the current version of this provider
func (o AutotagOutput) Unknowns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Autotag) pulumi.StringPtrOutput { return v.Unknowns }).(pulumi.StringPtrOutput)
}

type AutotagArrayOutput struct{ *pulumi.OutputState }

func (AutotagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Autotag)(nil)).Elem()
}

func (o AutotagArrayOutput) ToAutotagArrayOutput() AutotagArrayOutput {
	return o
}

func (o AutotagArrayOutput) ToAutotagArrayOutputWithContext(ctx context.Context) AutotagArrayOutput {
	return o
}

func (o AutotagArrayOutput) Index(i pulumi.IntInput) AutotagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Autotag {
		return vs[0].([]*Autotag)[vs[1].(int)]
	}).(AutotagOutput)
}

type AutotagMapOutput struct{ *pulumi.OutputState }

func (AutotagMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Autotag)(nil)).Elem()
}

func (o AutotagMapOutput) ToAutotagMapOutput() AutotagMapOutput {
	return o
}

func (o AutotagMapOutput) ToAutotagMapOutputWithContext(ctx context.Context) AutotagMapOutput {
	return o
}

func (o AutotagMapOutput) MapIndex(k pulumi.StringInput) AutotagOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Autotag {
		return vs[0].(map[string]*Autotag)[vs[1].(string)]
	}).(AutotagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AutotagInput)(nil)).Elem(), &Autotag{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutotagArrayInput)(nil)).Elem(), AutotagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutotagMapInput)(nil)).Elem(), AutotagMap{})
	pulumi.RegisterOutputType(AutotagOutput{})
	pulumi.RegisterOutputType(AutotagArrayOutput{})
	pulumi.RegisterOutputType(AutotagMapOutput{})
}
