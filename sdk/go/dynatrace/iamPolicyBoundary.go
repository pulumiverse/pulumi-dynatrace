// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

// > **Dynatrace SaaS only**
//
// > To utilize this resource, please define the environment variables `DT_CLIENT_ID`, `DT_CLIENT_SECRET`, `DT_ACCOUNT_ID` with an OAuth client including the following permissions: **Allow IAM policy configuration for environments** (`iam-policies-management`) and **View environments** (`account-env-read`).
//
// > This resource is excluded by default in the export utility, please explicitly specify the resource to retrieve existing configuration.
//
// ## Dynatrace Documentation
//
// - Dynatrace IAM Group Permissions - https://docs.dynatrace.com/docs/manage/identity-access-management/permission-management/manage-user-permissions-policies
//
// - Settings API - https://www.dynatrace.com/support/help/how-to-use-dynatrace/user-management-and-sso/manage-groups-and-permissions/iam/iam-getting-started
//
// ## Resource Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			thisIamPolicyBoundary, err := dynatrace.NewIamPolicyBoundary(ctx, "thisIamPolicyBoundary", &dynatrace.IamPolicyBoundaryArgs{
//				Query: pulumi.String("environment:management-zone startsWith \"[Foo]\";"),
//			})
//			if err != nil {
//				return err
//			}
//			thisIamGroup, err := dynatrace.NewIamGroup(ctx, "thisIamGroup", nil)
//			if err != nil {
//				return err
//			}
//			thisIamPolicy, err := dynatrace.NewIamPolicy(ctx, "thisIamPolicy", &dynatrace.IamPolicyArgs{
//				Account:        pulumi.String("########-####-####-####-############"),
//				StatementQuery: pulumi.String("ALLOW settings:objects:read, settings:schemas:read WHERE settings:schemaId = \"#########\";"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dynatrace.NewIamPolicyBindingsV2(ctx, "thisIamPolicyBindingsV2", &dynatrace.IamPolicyBindingsV2Args{
//				Environment: pulumi.String("########"),
//				Group:       thisIamGroup.ID(),
//				Policies: dynatrace.IamPolicyBindingsV2PolicyArray{
//					&dynatrace.IamPolicyBindingsV2PolicyArgs{
//						Id: thisIamPolicy.ID(),
//						Boundaries: pulumi.StringArray{
//							thisIamPolicyBoundary.ID(),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type IamPolicyBoundary struct {
	pulumi.CustomResourceState

	// The name of the policy
	Name pulumi.StringOutput `pulumi:"name"`
	// The boundary query
	Query pulumi.StringOutput `pulumi:"query"`
}

// NewIamPolicyBoundary registers a new resource with the given unique name, arguments, and options.
func NewIamPolicyBoundary(ctx *pulumi.Context,
	name string, args *IamPolicyBoundaryArgs, opts ...pulumi.ResourceOption) (*IamPolicyBoundary, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Query == nil {
		return nil, errors.New("invalid value for required argument 'Query'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IamPolicyBoundary
	err := ctx.RegisterResource("dynatrace:index/iamPolicyBoundary:IamPolicyBoundary", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIamPolicyBoundary gets an existing IamPolicyBoundary resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIamPolicyBoundary(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IamPolicyBoundaryState, opts ...pulumi.ResourceOption) (*IamPolicyBoundary, error) {
	var resource IamPolicyBoundary
	err := ctx.ReadResource("dynatrace:index/iamPolicyBoundary:IamPolicyBoundary", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IamPolicyBoundary resources.
type iamPolicyBoundaryState struct {
	// The name of the policy
	Name *string `pulumi:"name"`
	// The boundary query
	Query *string `pulumi:"query"`
}

type IamPolicyBoundaryState struct {
	// The name of the policy
	Name pulumi.StringPtrInput
	// The boundary query
	Query pulumi.StringPtrInput
}

func (IamPolicyBoundaryState) ElementType() reflect.Type {
	return reflect.TypeOf((*iamPolicyBoundaryState)(nil)).Elem()
}

type iamPolicyBoundaryArgs struct {
	// The name of the policy
	Name *string `pulumi:"name"`
	// The boundary query
	Query string `pulumi:"query"`
}

// The set of arguments for constructing a IamPolicyBoundary resource.
type IamPolicyBoundaryArgs struct {
	// The name of the policy
	Name pulumi.StringPtrInput
	// The boundary query
	Query pulumi.StringInput
}

func (IamPolicyBoundaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iamPolicyBoundaryArgs)(nil)).Elem()
}

type IamPolicyBoundaryInput interface {
	pulumi.Input

	ToIamPolicyBoundaryOutput() IamPolicyBoundaryOutput
	ToIamPolicyBoundaryOutputWithContext(ctx context.Context) IamPolicyBoundaryOutput
}

func (*IamPolicyBoundary) ElementType() reflect.Type {
	return reflect.TypeOf((**IamPolicyBoundary)(nil)).Elem()
}

func (i *IamPolicyBoundary) ToIamPolicyBoundaryOutput() IamPolicyBoundaryOutput {
	return i.ToIamPolicyBoundaryOutputWithContext(context.Background())
}

func (i *IamPolicyBoundary) ToIamPolicyBoundaryOutputWithContext(ctx context.Context) IamPolicyBoundaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamPolicyBoundaryOutput)
}

// IamPolicyBoundaryArrayInput is an input type that accepts IamPolicyBoundaryArray and IamPolicyBoundaryArrayOutput values.
// You can construct a concrete instance of `IamPolicyBoundaryArrayInput` via:
//
//	IamPolicyBoundaryArray{ IamPolicyBoundaryArgs{...} }
type IamPolicyBoundaryArrayInput interface {
	pulumi.Input

	ToIamPolicyBoundaryArrayOutput() IamPolicyBoundaryArrayOutput
	ToIamPolicyBoundaryArrayOutputWithContext(context.Context) IamPolicyBoundaryArrayOutput
}

type IamPolicyBoundaryArray []IamPolicyBoundaryInput

func (IamPolicyBoundaryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamPolicyBoundary)(nil)).Elem()
}

func (i IamPolicyBoundaryArray) ToIamPolicyBoundaryArrayOutput() IamPolicyBoundaryArrayOutput {
	return i.ToIamPolicyBoundaryArrayOutputWithContext(context.Background())
}

func (i IamPolicyBoundaryArray) ToIamPolicyBoundaryArrayOutputWithContext(ctx context.Context) IamPolicyBoundaryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamPolicyBoundaryArrayOutput)
}

// IamPolicyBoundaryMapInput is an input type that accepts IamPolicyBoundaryMap and IamPolicyBoundaryMapOutput values.
// You can construct a concrete instance of `IamPolicyBoundaryMapInput` via:
//
//	IamPolicyBoundaryMap{ "key": IamPolicyBoundaryArgs{...} }
type IamPolicyBoundaryMapInput interface {
	pulumi.Input

	ToIamPolicyBoundaryMapOutput() IamPolicyBoundaryMapOutput
	ToIamPolicyBoundaryMapOutputWithContext(context.Context) IamPolicyBoundaryMapOutput
}

type IamPolicyBoundaryMap map[string]IamPolicyBoundaryInput

func (IamPolicyBoundaryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamPolicyBoundary)(nil)).Elem()
}

func (i IamPolicyBoundaryMap) ToIamPolicyBoundaryMapOutput() IamPolicyBoundaryMapOutput {
	return i.ToIamPolicyBoundaryMapOutputWithContext(context.Background())
}

func (i IamPolicyBoundaryMap) ToIamPolicyBoundaryMapOutputWithContext(ctx context.Context) IamPolicyBoundaryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamPolicyBoundaryMapOutput)
}

type IamPolicyBoundaryOutput struct{ *pulumi.OutputState }

func (IamPolicyBoundaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IamPolicyBoundary)(nil)).Elem()
}

func (o IamPolicyBoundaryOutput) ToIamPolicyBoundaryOutput() IamPolicyBoundaryOutput {
	return o
}

func (o IamPolicyBoundaryOutput) ToIamPolicyBoundaryOutputWithContext(ctx context.Context) IamPolicyBoundaryOutput {
	return o
}

// The name of the policy
func (o IamPolicyBoundaryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IamPolicyBoundary) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The boundary query
func (o IamPolicyBoundaryOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v *IamPolicyBoundary) pulumi.StringOutput { return v.Query }).(pulumi.StringOutput)
}

type IamPolicyBoundaryArrayOutput struct{ *pulumi.OutputState }

func (IamPolicyBoundaryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamPolicyBoundary)(nil)).Elem()
}

func (o IamPolicyBoundaryArrayOutput) ToIamPolicyBoundaryArrayOutput() IamPolicyBoundaryArrayOutput {
	return o
}

func (o IamPolicyBoundaryArrayOutput) ToIamPolicyBoundaryArrayOutputWithContext(ctx context.Context) IamPolicyBoundaryArrayOutput {
	return o
}

func (o IamPolicyBoundaryArrayOutput) Index(i pulumi.IntInput) IamPolicyBoundaryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IamPolicyBoundary {
		return vs[0].([]*IamPolicyBoundary)[vs[1].(int)]
	}).(IamPolicyBoundaryOutput)
}

type IamPolicyBoundaryMapOutput struct{ *pulumi.OutputState }

func (IamPolicyBoundaryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamPolicyBoundary)(nil)).Elem()
}

func (o IamPolicyBoundaryMapOutput) ToIamPolicyBoundaryMapOutput() IamPolicyBoundaryMapOutput {
	return o
}

func (o IamPolicyBoundaryMapOutput) ToIamPolicyBoundaryMapOutputWithContext(ctx context.Context) IamPolicyBoundaryMapOutput {
	return o
}

func (o IamPolicyBoundaryMapOutput) MapIndex(k pulumi.StringInput) IamPolicyBoundaryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IamPolicyBoundary {
		return vs[0].(map[string]*IamPolicyBoundary)[vs[1].(string)]
	}).(IamPolicyBoundaryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IamPolicyBoundaryInput)(nil)).Elem(), &IamPolicyBoundary{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamPolicyBoundaryArrayInput)(nil)).Elem(), IamPolicyBoundaryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamPolicyBoundaryMapInput)(nil)).Elem(), IamPolicyBoundaryMap{})
	pulumi.RegisterOutputType(IamPolicyBoundaryOutput{})
	pulumi.RegisterOutputType(IamPolicyBoundaryArrayOutput{})
	pulumi.RegisterOutputType(IamPolicyBoundaryMapOutput{})
}
