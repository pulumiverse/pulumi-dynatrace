// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OpenpipelineV2EventsSdlcRouting struct {
	pulumi.CustomResourceState

	// Routing for pipelines
	RoutingEntries OpenpipelineV2EventsSdlcRoutingRoutingEntriesPtrOutput `pulumi:"routingEntries"`
}

// NewOpenpipelineV2EventsSdlcRouting registers a new resource with the given unique name, arguments, and options.
func NewOpenpipelineV2EventsSdlcRouting(ctx *pulumi.Context,
	name string, args *OpenpipelineV2EventsSdlcRoutingArgs, opts ...pulumi.ResourceOption) (*OpenpipelineV2EventsSdlcRouting, error) {
	if args == nil {
		args = &OpenpipelineV2EventsSdlcRoutingArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenpipelineV2EventsSdlcRouting
	err := ctx.RegisterResource("dynatrace:index/openpipelineV2EventsSdlcRouting:OpenpipelineV2EventsSdlcRouting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenpipelineV2EventsSdlcRouting gets an existing OpenpipelineV2EventsSdlcRouting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenpipelineV2EventsSdlcRouting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenpipelineV2EventsSdlcRoutingState, opts ...pulumi.ResourceOption) (*OpenpipelineV2EventsSdlcRouting, error) {
	var resource OpenpipelineV2EventsSdlcRouting
	err := ctx.ReadResource("dynatrace:index/openpipelineV2EventsSdlcRouting:OpenpipelineV2EventsSdlcRouting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenpipelineV2EventsSdlcRouting resources.
type openpipelineV2EventsSdlcRoutingState struct {
	// Routing for pipelines
	RoutingEntries *OpenpipelineV2EventsSdlcRoutingRoutingEntries `pulumi:"routingEntries"`
}

type OpenpipelineV2EventsSdlcRoutingState struct {
	// Routing for pipelines
	RoutingEntries OpenpipelineV2EventsSdlcRoutingRoutingEntriesPtrInput
}

func (OpenpipelineV2EventsSdlcRoutingState) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2EventsSdlcRoutingState)(nil)).Elem()
}

type openpipelineV2EventsSdlcRoutingArgs struct {
	// Routing for pipelines
	RoutingEntries *OpenpipelineV2EventsSdlcRoutingRoutingEntries `pulumi:"routingEntries"`
}

// The set of arguments for constructing a OpenpipelineV2EventsSdlcRouting resource.
type OpenpipelineV2EventsSdlcRoutingArgs struct {
	// Routing for pipelines
	RoutingEntries OpenpipelineV2EventsSdlcRoutingRoutingEntriesPtrInput
}

func (OpenpipelineV2EventsSdlcRoutingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2EventsSdlcRoutingArgs)(nil)).Elem()
}

type OpenpipelineV2EventsSdlcRoutingInput interface {
	pulumi.Input

	ToOpenpipelineV2EventsSdlcRoutingOutput() OpenpipelineV2EventsSdlcRoutingOutput
	ToOpenpipelineV2EventsSdlcRoutingOutputWithContext(ctx context.Context) OpenpipelineV2EventsSdlcRoutingOutput
}

func (*OpenpipelineV2EventsSdlcRouting) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2EventsSdlcRouting)(nil)).Elem()
}

func (i *OpenpipelineV2EventsSdlcRouting) ToOpenpipelineV2EventsSdlcRoutingOutput() OpenpipelineV2EventsSdlcRoutingOutput {
	return i.ToOpenpipelineV2EventsSdlcRoutingOutputWithContext(context.Background())
}

func (i *OpenpipelineV2EventsSdlcRouting) ToOpenpipelineV2EventsSdlcRoutingOutputWithContext(ctx context.Context) OpenpipelineV2EventsSdlcRoutingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2EventsSdlcRoutingOutput)
}

// OpenpipelineV2EventsSdlcRoutingArrayInput is an input type that accepts OpenpipelineV2EventsSdlcRoutingArray and OpenpipelineV2EventsSdlcRoutingArrayOutput values.
// You can construct a concrete instance of `OpenpipelineV2EventsSdlcRoutingArrayInput` via:
//
//	OpenpipelineV2EventsSdlcRoutingArray{ OpenpipelineV2EventsSdlcRoutingArgs{...} }
type OpenpipelineV2EventsSdlcRoutingArrayInput interface {
	pulumi.Input

	ToOpenpipelineV2EventsSdlcRoutingArrayOutput() OpenpipelineV2EventsSdlcRoutingArrayOutput
	ToOpenpipelineV2EventsSdlcRoutingArrayOutputWithContext(context.Context) OpenpipelineV2EventsSdlcRoutingArrayOutput
}

type OpenpipelineV2EventsSdlcRoutingArray []OpenpipelineV2EventsSdlcRoutingInput

func (OpenpipelineV2EventsSdlcRoutingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2EventsSdlcRouting)(nil)).Elem()
}

func (i OpenpipelineV2EventsSdlcRoutingArray) ToOpenpipelineV2EventsSdlcRoutingArrayOutput() OpenpipelineV2EventsSdlcRoutingArrayOutput {
	return i.ToOpenpipelineV2EventsSdlcRoutingArrayOutputWithContext(context.Background())
}

func (i OpenpipelineV2EventsSdlcRoutingArray) ToOpenpipelineV2EventsSdlcRoutingArrayOutputWithContext(ctx context.Context) OpenpipelineV2EventsSdlcRoutingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2EventsSdlcRoutingArrayOutput)
}

// OpenpipelineV2EventsSdlcRoutingMapInput is an input type that accepts OpenpipelineV2EventsSdlcRoutingMap and OpenpipelineV2EventsSdlcRoutingMapOutput values.
// You can construct a concrete instance of `OpenpipelineV2EventsSdlcRoutingMapInput` via:
//
//	OpenpipelineV2EventsSdlcRoutingMap{ "key": OpenpipelineV2EventsSdlcRoutingArgs{...} }
type OpenpipelineV2EventsSdlcRoutingMapInput interface {
	pulumi.Input

	ToOpenpipelineV2EventsSdlcRoutingMapOutput() OpenpipelineV2EventsSdlcRoutingMapOutput
	ToOpenpipelineV2EventsSdlcRoutingMapOutputWithContext(context.Context) OpenpipelineV2EventsSdlcRoutingMapOutput
}

type OpenpipelineV2EventsSdlcRoutingMap map[string]OpenpipelineV2EventsSdlcRoutingInput

func (OpenpipelineV2EventsSdlcRoutingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2EventsSdlcRouting)(nil)).Elem()
}

func (i OpenpipelineV2EventsSdlcRoutingMap) ToOpenpipelineV2EventsSdlcRoutingMapOutput() OpenpipelineV2EventsSdlcRoutingMapOutput {
	return i.ToOpenpipelineV2EventsSdlcRoutingMapOutputWithContext(context.Background())
}

func (i OpenpipelineV2EventsSdlcRoutingMap) ToOpenpipelineV2EventsSdlcRoutingMapOutputWithContext(ctx context.Context) OpenpipelineV2EventsSdlcRoutingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2EventsSdlcRoutingMapOutput)
}

type OpenpipelineV2EventsSdlcRoutingOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2EventsSdlcRoutingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2EventsSdlcRouting)(nil)).Elem()
}

func (o OpenpipelineV2EventsSdlcRoutingOutput) ToOpenpipelineV2EventsSdlcRoutingOutput() OpenpipelineV2EventsSdlcRoutingOutput {
	return o
}

func (o OpenpipelineV2EventsSdlcRoutingOutput) ToOpenpipelineV2EventsSdlcRoutingOutputWithContext(ctx context.Context) OpenpipelineV2EventsSdlcRoutingOutput {
	return o
}

// Routing for pipelines
func (o OpenpipelineV2EventsSdlcRoutingOutput) RoutingEntries() OpenpipelineV2EventsSdlcRoutingRoutingEntriesPtrOutput {
	return o.ApplyT(func(v *OpenpipelineV2EventsSdlcRouting) OpenpipelineV2EventsSdlcRoutingRoutingEntriesPtrOutput {
		return v.RoutingEntries
	}).(OpenpipelineV2EventsSdlcRoutingRoutingEntriesPtrOutput)
}

type OpenpipelineV2EventsSdlcRoutingArrayOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2EventsSdlcRoutingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2EventsSdlcRouting)(nil)).Elem()
}

func (o OpenpipelineV2EventsSdlcRoutingArrayOutput) ToOpenpipelineV2EventsSdlcRoutingArrayOutput() OpenpipelineV2EventsSdlcRoutingArrayOutput {
	return o
}

func (o OpenpipelineV2EventsSdlcRoutingArrayOutput) ToOpenpipelineV2EventsSdlcRoutingArrayOutputWithContext(ctx context.Context) OpenpipelineV2EventsSdlcRoutingArrayOutput {
	return o
}

func (o OpenpipelineV2EventsSdlcRoutingArrayOutput) Index(i pulumi.IntInput) OpenpipelineV2EventsSdlcRoutingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenpipelineV2EventsSdlcRouting {
		return vs[0].([]*OpenpipelineV2EventsSdlcRouting)[vs[1].(int)]
	}).(OpenpipelineV2EventsSdlcRoutingOutput)
}

type OpenpipelineV2EventsSdlcRoutingMapOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2EventsSdlcRoutingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2EventsSdlcRouting)(nil)).Elem()
}

func (o OpenpipelineV2EventsSdlcRoutingMapOutput) ToOpenpipelineV2EventsSdlcRoutingMapOutput() OpenpipelineV2EventsSdlcRoutingMapOutput {
	return o
}

func (o OpenpipelineV2EventsSdlcRoutingMapOutput) ToOpenpipelineV2EventsSdlcRoutingMapOutputWithContext(ctx context.Context) OpenpipelineV2EventsSdlcRoutingMapOutput {
	return o
}

func (o OpenpipelineV2EventsSdlcRoutingMapOutput) MapIndex(k pulumi.StringInput) OpenpipelineV2EventsSdlcRoutingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenpipelineV2EventsSdlcRouting {
		return vs[0].(map[string]*OpenpipelineV2EventsSdlcRouting)[vs[1].(string)]
	}).(OpenpipelineV2EventsSdlcRoutingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2EventsSdlcRoutingInput)(nil)).Elem(), &OpenpipelineV2EventsSdlcRouting{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2EventsSdlcRoutingArrayInput)(nil)).Elem(), OpenpipelineV2EventsSdlcRoutingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2EventsSdlcRoutingMapInput)(nil)).Elem(), OpenpipelineV2EventsSdlcRoutingMap{})
	pulumi.RegisterOutputType(OpenpipelineV2EventsSdlcRoutingOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2EventsSdlcRoutingArrayOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2EventsSdlcRoutingMapOutput{})
}
