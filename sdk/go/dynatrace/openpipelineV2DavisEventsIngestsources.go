// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OpenpipelineV2DavisEventsIngestsources struct {
	pulumi.CustomResourceState

	// Default Bucket
	DefaultBucket pulumi.StringPtrOutput `pulumi:"defaultBucket"`
	// Endpoint display name
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Endpoint segment
	PathSegment pulumi.StringOutput `pulumi:"pathSegment"`
	// Processing stage
	Processing OpenpipelineV2DavisEventsIngestsourcesProcessingOutput `pulumi:"processing"`
	// Static routing of endpoint
	StaticRouting OpenpipelineV2DavisEventsIngestsourcesStaticRoutingPtrOutput `pulumi:"staticRouting"`
}

// NewOpenpipelineV2DavisEventsIngestsources registers a new resource with the given unique name, arguments, and options.
func NewOpenpipelineV2DavisEventsIngestsources(ctx *pulumi.Context,
	name string, args *OpenpipelineV2DavisEventsIngestsourcesArgs, opts ...pulumi.ResourceOption) (*OpenpipelineV2DavisEventsIngestsources, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.PathSegment == nil {
		return nil, errors.New("invalid value for required argument 'PathSegment'")
	}
	if args.Processing == nil {
		return nil, errors.New("invalid value for required argument 'Processing'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenpipelineV2DavisEventsIngestsources
	err := ctx.RegisterResource("dynatrace:index/openpipelineV2DavisEventsIngestsources:OpenpipelineV2DavisEventsIngestsources", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenpipelineV2DavisEventsIngestsources gets an existing OpenpipelineV2DavisEventsIngestsources resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenpipelineV2DavisEventsIngestsources(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenpipelineV2DavisEventsIngestsourcesState, opts ...pulumi.ResourceOption) (*OpenpipelineV2DavisEventsIngestsources, error) {
	var resource OpenpipelineV2DavisEventsIngestsources
	err := ctx.ReadResource("dynatrace:index/openpipelineV2DavisEventsIngestsources:OpenpipelineV2DavisEventsIngestsources", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenpipelineV2DavisEventsIngestsources resources.
type openpipelineV2DavisEventsIngestsourcesState struct {
	// Default Bucket
	DefaultBucket *string `pulumi:"defaultBucket"`
	// Endpoint display name
	DisplayName *string `pulumi:"displayName"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// Endpoint segment
	PathSegment *string `pulumi:"pathSegment"`
	// Processing stage
	Processing *OpenpipelineV2DavisEventsIngestsourcesProcessing `pulumi:"processing"`
	// Static routing of endpoint
	StaticRouting *OpenpipelineV2DavisEventsIngestsourcesStaticRouting `pulumi:"staticRouting"`
}

type OpenpipelineV2DavisEventsIngestsourcesState struct {
	// Default Bucket
	DefaultBucket pulumi.StringPtrInput
	// Endpoint display name
	DisplayName pulumi.StringPtrInput
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// Endpoint segment
	PathSegment pulumi.StringPtrInput
	// Processing stage
	Processing OpenpipelineV2DavisEventsIngestsourcesProcessingPtrInput
	// Static routing of endpoint
	StaticRouting OpenpipelineV2DavisEventsIngestsourcesStaticRoutingPtrInput
}

func (OpenpipelineV2DavisEventsIngestsourcesState) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2DavisEventsIngestsourcesState)(nil)).Elem()
}

type openpipelineV2DavisEventsIngestsourcesArgs struct {
	// Default Bucket
	DefaultBucket *string `pulumi:"defaultBucket"`
	// Endpoint display name
	DisplayName string `pulumi:"displayName"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// Endpoint segment
	PathSegment string `pulumi:"pathSegment"`
	// Processing stage
	Processing OpenpipelineV2DavisEventsIngestsourcesProcessing `pulumi:"processing"`
	// Static routing of endpoint
	StaticRouting *OpenpipelineV2DavisEventsIngestsourcesStaticRouting `pulumi:"staticRouting"`
}

// The set of arguments for constructing a OpenpipelineV2DavisEventsIngestsources resource.
type OpenpipelineV2DavisEventsIngestsourcesArgs struct {
	// Default Bucket
	DefaultBucket pulumi.StringPtrInput
	// Endpoint display name
	DisplayName pulumi.StringInput
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// Endpoint segment
	PathSegment pulumi.StringInput
	// Processing stage
	Processing OpenpipelineV2DavisEventsIngestsourcesProcessingInput
	// Static routing of endpoint
	StaticRouting OpenpipelineV2DavisEventsIngestsourcesStaticRoutingPtrInput
}

func (OpenpipelineV2DavisEventsIngestsourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2DavisEventsIngestsourcesArgs)(nil)).Elem()
}

type OpenpipelineV2DavisEventsIngestsourcesInput interface {
	pulumi.Input

	ToOpenpipelineV2DavisEventsIngestsourcesOutput() OpenpipelineV2DavisEventsIngestsourcesOutput
	ToOpenpipelineV2DavisEventsIngestsourcesOutputWithContext(ctx context.Context) OpenpipelineV2DavisEventsIngestsourcesOutput
}

func (*OpenpipelineV2DavisEventsIngestsources) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2DavisEventsIngestsources)(nil)).Elem()
}

func (i *OpenpipelineV2DavisEventsIngestsources) ToOpenpipelineV2DavisEventsIngestsourcesOutput() OpenpipelineV2DavisEventsIngestsourcesOutput {
	return i.ToOpenpipelineV2DavisEventsIngestsourcesOutputWithContext(context.Background())
}

func (i *OpenpipelineV2DavisEventsIngestsources) ToOpenpipelineV2DavisEventsIngestsourcesOutputWithContext(ctx context.Context) OpenpipelineV2DavisEventsIngestsourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2DavisEventsIngestsourcesOutput)
}

// OpenpipelineV2DavisEventsIngestsourcesArrayInput is an input type that accepts OpenpipelineV2DavisEventsIngestsourcesArray and OpenpipelineV2DavisEventsIngestsourcesArrayOutput values.
// You can construct a concrete instance of `OpenpipelineV2DavisEventsIngestsourcesArrayInput` via:
//
//	OpenpipelineV2DavisEventsIngestsourcesArray{ OpenpipelineV2DavisEventsIngestsourcesArgs{...} }
type OpenpipelineV2DavisEventsIngestsourcesArrayInput interface {
	pulumi.Input

	ToOpenpipelineV2DavisEventsIngestsourcesArrayOutput() OpenpipelineV2DavisEventsIngestsourcesArrayOutput
	ToOpenpipelineV2DavisEventsIngestsourcesArrayOutputWithContext(context.Context) OpenpipelineV2DavisEventsIngestsourcesArrayOutput
}

type OpenpipelineV2DavisEventsIngestsourcesArray []OpenpipelineV2DavisEventsIngestsourcesInput

func (OpenpipelineV2DavisEventsIngestsourcesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2DavisEventsIngestsources)(nil)).Elem()
}

func (i OpenpipelineV2DavisEventsIngestsourcesArray) ToOpenpipelineV2DavisEventsIngestsourcesArrayOutput() OpenpipelineV2DavisEventsIngestsourcesArrayOutput {
	return i.ToOpenpipelineV2DavisEventsIngestsourcesArrayOutputWithContext(context.Background())
}

func (i OpenpipelineV2DavisEventsIngestsourcesArray) ToOpenpipelineV2DavisEventsIngestsourcesArrayOutputWithContext(ctx context.Context) OpenpipelineV2DavisEventsIngestsourcesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2DavisEventsIngestsourcesArrayOutput)
}

// OpenpipelineV2DavisEventsIngestsourcesMapInput is an input type that accepts OpenpipelineV2DavisEventsIngestsourcesMap and OpenpipelineV2DavisEventsIngestsourcesMapOutput values.
// You can construct a concrete instance of `OpenpipelineV2DavisEventsIngestsourcesMapInput` via:
//
//	OpenpipelineV2DavisEventsIngestsourcesMap{ "key": OpenpipelineV2DavisEventsIngestsourcesArgs{...} }
type OpenpipelineV2DavisEventsIngestsourcesMapInput interface {
	pulumi.Input

	ToOpenpipelineV2DavisEventsIngestsourcesMapOutput() OpenpipelineV2DavisEventsIngestsourcesMapOutput
	ToOpenpipelineV2DavisEventsIngestsourcesMapOutputWithContext(context.Context) OpenpipelineV2DavisEventsIngestsourcesMapOutput
}

type OpenpipelineV2DavisEventsIngestsourcesMap map[string]OpenpipelineV2DavisEventsIngestsourcesInput

func (OpenpipelineV2DavisEventsIngestsourcesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2DavisEventsIngestsources)(nil)).Elem()
}

func (i OpenpipelineV2DavisEventsIngestsourcesMap) ToOpenpipelineV2DavisEventsIngestsourcesMapOutput() OpenpipelineV2DavisEventsIngestsourcesMapOutput {
	return i.ToOpenpipelineV2DavisEventsIngestsourcesMapOutputWithContext(context.Background())
}

func (i OpenpipelineV2DavisEventsIngestsourcesMap) ToOpenpipelineV2DavisEventsIngestsourcesMapOutputWithContext(ctx context.Context) OpenpipelineV2DavisEventsIngestsourcesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2DavisEventsIngestsourcesMapOutput)
}

type OpenpipelineV2DavisEventsIngestsourcesOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2DavisEventsIngestsourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2DavisEventsIngestsources)(nil)).Elem()
}

func (o OpenpipelineV2DavisEventsIngestsourcesOutput) ToOpenpipelineV2DavisEventsIngestsourcesOutput() OpenpipelineV2DavisEventsIngestsourcesOutput {
	return o
}

func (o OpenpipelineV2DavisEventsIngestsourcesOutput) ToOpenpipelineV2DavisEventsIngestsourcesOutputWithContext(ctx context.Context) OpenpipelineV2DavisEventsIngestsourcesOutput {
	return o
}

// Default Bucket
func (o OpenpipelineV2DavisEventsIngestsourcesOutput) DefaultBucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenpipelineV2DavisEventsIngestsources) pulumi.StringPtrOutput { return v.DefaultBucket }).(pulumi.StringPtrOutput)
}

// Endpoint display name
func (o OpenpipelineV2DavisEventsIngestsourcesOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenpipelineV2DavisEventsIngestsources) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// This setting is enabled (`true`) or disabled (`false`)
func (o OpenpipelineV2DavisEventsIngestsourcesOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *OpenpipelineV2DavisEventsIngestsources) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Endpoint segment
func (o OpenpipelineV2DavisEventsIngestsourcesOutput) PathSegment() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenpipelineV2DavisEventsIngestsources) pulumi.StringOutput { return v.PathSegment }).(pulumi.StringOutput)
}

// Processing stage
func (o OpenpipelineV2DavisEventsIngestsourcesOutput) Processing() OpenpipelineV2DavisEventsIngestsourcesProcessingOutput {
	return o.ApplyT(func(v *OpenpipelineV2DavisEventsIngestsources) OpenpipelineV2DavisEventsIngestsourcesProcessingOutput {
		return v.Processing
	}).(OpenpipelineV2DavisEventsIngestsourcesProcessingOutput)
}

// Static routing of endpoint
func (o OpenpipelineV2DavisEventsIngestsourcesOutput) StaticRouting() OpenpipelineV2DavisEventsIngestsourcesStaticRoutingPtrOutput {
	return o.ApplyT(func(v *OpenpipelineV2DavisEventsIngestsources) OpenpipelineV2DavisEventsIngestsourcesStaticRoutingPtrOutput {
		return v.StaticRouting
	}).(OpenpipelineV2DavisEventsIngestsourcesStaticRoutingPtrOutput)
}

type OpenpipelineV2DavisEventsIngestsourcesArrayOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2DavisEventsIngestsourcesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2DavisEventsIngestsources)(nil)).Elem()
}

func (o OpenpipelineV2DavisEventsIngestsourcesArrayOutput) ToOpenpipelineV2DavisEventsIngestsourcesArrayOutput() OpenpipelineV2DavisEventsIngestsourcesArrayOutput {
	return o
}

func (o OpenpipelineV2DavisEventsIngestsourcesArrayOutput) ToOpenpipelineV2DavisEventsIngestsourcesArrayOutputWithContext(ctx context.Context) OpenpipelineV2DavisEventsIngestsourcesArrayOutput {
	return o
}

func (o OpenpipelineV2DavisEventsIngestsourcesArrayOutput) Index(i pulumi.IntInput) OpenpipelineV2DavisEventsIngestsourcesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenpipelineV2DavisEventsIngestsources {
		return vs[0].([]*OpenpipelineV2DavisEventsIngestsources)[vs[1].(int)]
	}).(OpenpipelineV2DavisEventsIngestsourcesOutput)
}

type OpenpipelineV2DavisEventsIngestsourcesMapOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2DavisEventsIngestsourcesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2DavisEventsIngestsources)(nil)).Elem()
}

func (o OpenpipelineV2DavisEventsIngestsourcesMapOutput) ToOpenpipelineV2DavisEventsIngestsourcesMapOutput() OpenpipelineV2DavisEventsIngestsourcesMapOutput {
	return o
}

func (o OpenpipelineV2DavisEventsIngestsourcesMapOutput) ToOpenpipelineV2DavisEventsIngestsourcesMapOutputWithContext(ctx context.Context) OpenpipelineV2DavisEventsIngestsourcesMapOutput {
	return o
}

func (o OpenpipelineV2DavisEventsIngestsourcesMapOutput) MapIndex(k pulumi.StringInput) OpenpipelineV2DavisEventsIngestsourcesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenpipelineV2DavisEventsIngestsources {
		return vs[0].(map[string]*OpenpipelineV2DavisEventsIngestsources)[vs[1].(string)]
	}).(OpenpipelineV2DavisEventsIngestsourcesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2DavisEventsIngestsourcesInput)(nil)).Elem(), &OpenpipelineV2DavisEventsIngestsources{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2DavisEventsIngestsourcesArrayInput)(nil)).Elem(), OpenpipelineV2DavisEventsIngestsourcesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2DavisEventsIngestsourcesMapInput)(nil)).Elem(), OpenpipelineV2DavisEventsIngestsourcesMap{})
	pulumi.RegisterOutputType(OpenpipelineV2DavisEventsIngestsourcesOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2DavisEventsIngestsourcesArrayOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2DavisEventsIngestsourcesMapOutput{})
}
