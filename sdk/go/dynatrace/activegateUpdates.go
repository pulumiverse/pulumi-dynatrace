// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type ActivegateUpdates struct {
	pulumi.CustomResourceState

	// Automatic updates at earliest convenience
	AutoUpdate pulumi.BoolOutput `pulumi:"autoUpdate"`
	// The scope of this setting (ENVIRONMENT*ACTIVE*GATE). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
}

// NewActivegateUpdates registers a new resource with the given unique name, arguments, and options.
func NewActivegateUpdates(ctx *pulumi.Context,
	name string, args *ActivegateUpdatesArgs, opts ...pulumi.ResourceOption) (*ActivegateUpdates, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AutoUpdate == nil {
		return nil, errors.New("invalid value for required argument 'AutoUpdate'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ActivegateUpdates
	err := ctx.RegisterResource("dynatrace:index/activegateUpdates:ActivegateUpdates", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetActivegateUpdates gets an existing ActivegateUpdates resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetActivegateUpdates(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ActivegateUpdatesState, opts ...pulumi.ResourceOption) (*ActivegateUpdates, error) {
	var resource ActivegateUpdates
	err := ctx.ReadResource("dynatrace:index/activegateUpdates:ActivegateUpdates", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ActivegateUpdates resources.
type activegateUpdatesState struct {
	// Automatic updates at earliest convenience
	AutoUpdate *bool `pulumi:"autoUpdate"`
	// The scope of this setting (ENVIRONMENT*ACTIVE*GATE). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
}

type ActivegateUpdatesState struct {
	// Automatic updates at earliest convenience
	AutoUpdate pulumi.BoolPtrInput
	// The scope of this setting (ENVIRONMENT*ACTIVE*GATE). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
}

func (ActivegateUpdatesState) ElementType() reflect.Type {
	return reflect.TypeOf((*activegateUpdatesState)(nil)).Elem()
}

type activegateUpdatesArgs struct {
	// Automatic updates at earliest convenience
	AutoUpdate bool `pulumi:"autoUpdate"`
	// The scope of this setting (ENVIRONMENT*ACTIVE*GATE). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
}

// The set of arguments for constructing a ActivegateUpdates resource.
type ActivegateUpdatesArgs struct {
	// Automatic updates at earliest convenience
	AutoUpdate pulumi.BoolInput
	// The scope of this setting (ENVIRONMENT*ACTIVE*GATE). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
}

func (ActivegateUpdatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*activegateUpdatesArgs)(nil)).Elem()
}

type ActivegateUpdatesInput interface {
	pulumi.Input

	ToActivegateUpdatesOutput() ActivegateUpdatesOutput
	ToActivegateUpdatesOutputWithContext(ctx context.Context) ActivegateUpdatesOutput
}

func (*ActivegateUpdates) ElementType() reflect.Type {
	return reflect.TypeOf((**ActivegateUpdates)(nil)).Elem()
}

func (i *ActivegateUpdates) ToActivegateUpdatesOutput() ActivegateUpdatesOutput {
	return i.ToActivegateUpdatesOutputWithContext(context.Background())
}

func (i *ActivegateUpdates) ToActivegateUpdatesOutputWithContext(ctx context.Context) ActivegateUpdatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivegateUpdatesOutput)
}

// ActivegateUpdatesArrayInput is an input type that accepts ActivegateUpdatesArray and ActivegateUpdatesArrayOutput values.
// You can construct a concrete instance of `ActivegateUpdatesArrayInput` via:
//
//	ActivegateUpdatesArray{ ActivegateUpdatesArgs{...} }
type ActivegateUpdatesArrayInput interface {
	pulumi.Input

	ToActivegateUpdatesArrayOutput() ActivegateUpdatesArrayOutput
	ToActivegateUpdatesArrayOutputWithContext(context.Context) ActivegateUpdatesArrayOutput
}

type ActivegateUpdatesArray []ActivegateUpdatesInput

func (ActivegateUpdatesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ActivegateUpdates)(nil)).Elem()
}

func (i ActivegateUpdatesArray) ToActivegateUpdatesArrayOutput() ActivegateUpdatesArrayOutput {
	return i.ToActivegateUpdatesArrayOutputWithContext(context.Background())
}

func (i ActivegateUpdatesArray) ToActivegateUpdatesArrayOutputWithContext(ctx context.Context) ActivegateUpdatesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivegateUpdatesArrayOutput)
}

// ActivegateUpdatesMapInput is an input type that accepts ActivegateUpdatesMap and ActivegateUpdatesMapOutput values.
// You can construct a concrete instance of `ActivegateUpdatesMapInput` via:
//
//	ActivegateUpdatesMap{ "key": ActivegateUpdatesArgs{...} }
type ActivegateUpdatesMapInput interface {
	pulumi.Input

	ToActivegateUpdatesMapOutput() ActivegateUpdatesMapOutput
	ToActivegateUpdatesMapOutputWithContext(context.Context) ActivegateUpdatesMapOutput
}

type ActivegateUpdatesMap map[string]ActivegateUpdatesInput

func (ActivegateUpdatesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ActivegateUpdates)(nil)).Elem()
}

func (i ActivegateUpdatesMap) ToActivegateUpdatesMapOutput() ActivegateUpdatesMapOutput {
	return i.ToActivegateUpdatesMapOutputWithContext(context.Background())
}

func (i ActivegateUpdatesMap) ToActivegateUpdatesMapOutputWithContext(ctx context.Context) ActivegateUpdatesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivegateUpdatesMapOutput)
}

type ActivegateUpdatesOutput struct{ *pulumi.OutputState }

func (ActivegateUpdatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActivegateUpdates)(nil)).Elem()
}

func (o ActivegateUpdatesOutput) ToActivegateUpdatesOutput() ActivegateUpdatesOutput {
	return o
}

func (o ActivegateUpdatesOutput) ToActivegateUpdatesOutputWithContext(ctx context.Context) ActivegateUpdatesOutput {
	return o
}

// Automatic updates at earliest convenience
func (o ActivegateUpdatesOutput) AutoUpdate() pulumi.BoolOutput {
	return o.ApplyT(func(v *ActivegateUpdates) pulumi.BoolOutput { return v.AutoUpdate }).(pulumi.BoolOutput)
}

// The scope of this setting (ENVIRONMENT*ACTIVE*GATE). Omit this property if you want to cover the whole environment.
func (o ActivegateUpdatesOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActivegateUpdates) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

type ActivegateUpdatesArrayOutput struct{ *pulumi.OutputState }

func (ActivegateUpdatesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ActivegateUpdates)(nil)).Elem()
}

func (o ActivegateUpdatesArrayOutput) ToActivegateUpdatesArrayOutput() ActivegateUpdatesArrayOutput {
	return o
}

func (o ActivegateUpdatesArrayOutput) ToActivegateUpdatesArrayOutputWithContext(ctx context.Context) ActivegateUpdatesArrayOutput {
	return o
}

func (o ActivegateUpdatesArrayOutput) Index(i pulumi.IntInput) ActivegateUpdatesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ActivegateUpdates {
		return vs[0].([]*ActivegateUpdates)[vs[1].(int)]
	}).(ActivegateUpdatesOutput)
}

type ActivegateUpdatesMapOutput struct{ *pulumi.OutputState }

func (ActivegateUpdatesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ActivegateUpdates)(nil)).Elem()
}

func (o ActivegateUpdatesMapOutput) ToActivegateUpdatesMapOutput() ActivegateUpdatesMapOutput {
	return o
}

func (o ActivegateUpdatesMapOutput) ToActivegateUpdatesMapOutputWithContext(ctx context.Context) ActivegateUpdatesMapOutput {
	return o
}

func (o ActivegateUpdatesMapOutput) MapIndex(k pulumi.StringInput) ActivegateUpdatesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ActivegateUpdates {
		return vs[0].(map[string]*ActivegateUpdates)[vs[1].(string)]
	}).(ActivegateUpdatesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ActivegateUpdatesInput)(nil)).Elem(), &ActivegateUpdates{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActivegateUpdatesArrayInput)(nil)).Elem(), ActivegateUpdatesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActivegateUpdatesMapInput)(nil)).Elem(), ActivegateUpdatesMap{})
	pulumi.RegisterOutputType(ActivegateUpdatesOutput{})
	pulumi.RegisterOutputType(ActivegateUpdatesArrayOutput{})
	pulumi.RegisterOutputType(ActivegateUpdatesMapOutput{})
}
