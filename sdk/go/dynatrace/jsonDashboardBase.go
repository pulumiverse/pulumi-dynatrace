// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type JsonDashboardBase struct {
	pulumi.CustomResourceState

	// Contains the JSON Code of the Dashboard
	Contents pulumi.StringOutput `pulumi:"contents"`
}

// NewJsonDashboardBase registers a new resource with the given unique name, arguments, and options.
func NewJsonDashboardBase(ctx *pulumi.Context,
	name string, args *JsonDashboardBaseArgs, opts ...pulumi.ResourceOption) (*JsonDashboardBase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Contents == nil {
		return nil, errors.New("invalid value for required argument 'Contents'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource JsonDashboardBase
	err := ctx.RegisterResource("dynatrace:index/jsonDashboardBase:JsonDashboardBase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetJsonDashboardBase gets an existing JsonDashboardBase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetJsonDashboardBase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *JsonDashboardBaseState, opts ...pulumi.ResourceOption) (*JsonDashboardBase, error) {
	var resource JsonDashboardBase
	err := ctx.ReadResource("dynatrace:index/jsonDashboardBase:JsonDashboardBase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering JsonDashboardBase resources.
type jsonDashboardBaseState struct {
	// Contains the JSON Code of the Dashboard
	Contents *string `pulumi:"contents"`
}

type JsonDashboardBaseState struct {
	// Contains the JSON Code of the Dashboard
	Contents pulumi.StringPtrInput
}

func (JsonDashboardBaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*jsonDashboardBaseState)(nil)).Elem()
}

type jsonDashboardBaseArgs struct {
	// Contains the JSON Code of the Dashboard
	Contents string `pulumi:"contents"`
}

// The set of arguments for constructing a JsonDashboardBase resource.
type JsonDashboardBaseArgs struct {
	// Contains the JSON Code of the Dashboard
	Contents pulumi.StringInput
}

func (JsonDashboardBaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*jsonDashboardBaseArgs)(nil)).Elem()
}

type JsonDashboardBaseInput interface {
	pulumi.Input

	ToJsonDashboardBaseOutput() JsonDashboardBaseOutput
	ToJsonDashboardBaseOutputWithContext(ctx context.Context) JsonDashboardBaseOutput
}

func (*JsonDashboardBase) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonDashboardBase)(nil)).Elem()
}

func (i *JsonDashboardBase) ToJsonDashboardBaseOutput() JsonDashboardBaseOutput {
	return i.ToJsonDashboardBaseOutputWithContext(context.Background())
}

func (i *JsonDashboardBase) ToJsonDashboardBaseOutputWithContext(ctx context.Context) JsonDashboardBaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonDashboardBaseOutput)
}

// JsonDashboardBaseArrayInput is an input type that accepts JsonDashboardBaseArray and JsonDashboardBaseArrayOutput values.
// You can construct a concrete instance of `JsonDashboardBaseArrayInput` via:
//
//	JsonDashboardBaseArray{ JsonDashboardBaseArgs{...} }
type JsonDashboardBaseArrayInput interface {
	pulumi.Input

	ToJsonDashboardBaseArrayOutput() JsonDashboardBaseArrayOutput
	ToJsonDashboardBaseArrayOutputWithContext(context.Context) JsonDashboardBaseArrayOutput
}

type JsonDashboardBaseArray []JsonDashboardBaseInput

func (JsonDashboardBaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*JsonDashboardBase)(nil)).Elem()
}

func (i JsonDashboardBaseArray) ToJsonDashboardBaseArrayOutput() JsonDashboardBaseArrayOutput {
	return i.ToJsonDashboardBaseArrayOutputWithContext(context.Background())
}

func (i JsonDashboardBaseArray) ToJsonDashboardBaseArrayOutputWithContext(ctx context.Context) JsonDashboardBaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonDashboardBaseArrayOutput)
}

// JsonDashboardBaseMapInput is an input type that accepts JsonDashboardBaseMap and JsonDashboardBaseMapOutput values.
// You can construct a concrete instance of `JsonDashboardBaseMapInput` via:
//
//	JsonDashboardBaseMap{ "key": JsonDashboardBaseArgs{...} }
type JsonDashboardBaseMapInput interface {
	pulumi.Input

	ToJsonDashboardBaseMapOutput() JsonDashboardBaseMapOutput
	ToJsonDashboardBaseMapOutputWithContext(context.Context) JsonDashboardBaseMapOutput
}

type JsonDashboardBaseMap map[string]JsonDashboardBaseInput

func (JsonDashboardBaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*JsonDashboardBase)(nil)).Elem()
}

func (i JsonDashboardBaseMap) ToJsonDashboardBaseMapOutput() JsonDashboardBaseMapOutput {
	return i.ToJsonDashboardBaseMapOutputWithContext(context.Background())
}

func (i JsonDashboardBaseMap) ToJsonDashboardBaseMapOutputWithContext(ctx context.Context) JsonDashboardBaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonDashboardBaseMapOutput)
}

type JsonDashboardBaseOutput struct{ *pulumi.OutputState }

func (JsonDashboardBaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonDashboardBase)(nil)).Elem()
}

func (o JsonDashboardBaseOutput) ToJsonDashboardBaseOutput() JsonDashboardBaseOutput {
	return o
}

func (o JsonDashboardBaseOutput) ToJsonDashboardBaseOutputWithContext(ctx context.Context) JsonDashboardBaseOutput {
	return o
}

// Contains the JSON Code of the Dashboard
func (o JsonDashboardBaseOutput) Contents() pulumi.StringOutput {
	return o.ApplyT(func(v *JsonDashboardBase) pulumi.StringOutput { return v.Contents }).(pulumi.StringOutput)
}

type JsonDashboardBaseArrayOutput struct{ *pulumi.OutputState }

func (JsonDashboardBaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*JsonDashboardBase)(nil)).Elem()
}

func (o JsonDashboardBaseArrayOutput) ToJsonDashboardBaseArrayOutput() JsonDashboardBaseArrayOutput {
	return o
}

func (o JsonDashboardBaseArrayOutput) ToJsonDashboardBaseArrayOutputWithContext(ctx context.Context) JsonDashboardBaseArrayOutput {
	return o
}

func (o JsonDashboardBaseArrayOutput) Index(i pulumi.IntInput) JsonDashboardBaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *JsonDashboardBase {
		return vs[0].([]*JsonDashboardBase)[vs[1].(int)]
	}).(JsonDashboardBaseOutput)
}

type JsonDashboardBaseMapOutput struct{ *pulumi.OutputState }

func (JsonDashboardBaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*JsonDashboardBase)(nil)).Elem()
}

func (o JsonDashboardBaseMapOutput) ToJsonDashboardBaseMapOutput() JsonDashboardBaseMapOutput {
	return o
}

func (o JsonDashboardBaseMapOutput) ToJsonDashboardBaseMapOutputWithContext(ctx context.Context) JsonDashboardBaseMapOutput {
	return o
}

func (o JsonDashboardBaseMapOutput) MapIndex(k pulumi.StringInput) JsonDashboardBaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *JsonDashboardBase {
		return vs[0].(map[string]*JsonDashboardBase)[vs[1].(string)]
	}).(JsonDashboardBaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*JsonDashboardBaseInput)(nil)).Elem(), &JsonDashboardBase{})
	pulumi.RegisterInputType(reflect.TypeOf((*JsonDashboardBaseArrayInput)(nil)).Elem(), JsonDashboardBaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JsonDashboardBaseMapInput)(nil)).Elem(), JsonDashboardBaseMap{})
	pulumi.RegisterOutputType(JsonDashboardBaseOutput{})
	pulumi.RegisterOutputType(JsonDashboardBaseArrayOutput{})
	pulumi.RegisterOutputType(JsonDashboardBaseMapOutput{})
}
