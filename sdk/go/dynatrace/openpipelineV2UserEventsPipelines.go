// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OpenpipelineV2UserEventsPipelines struct {
	pulumi.CustomResourceState

	// Cost allocation stage
	CostAllocation OpenpipelineV2UserEventsPipelinesCostAllocationOutput `pulumi:"costAllocation"`
	// Custom pipeline id
	CustomId pulumi.StringOutput `pulumi:"customId"`
	// Data extraction stage
	DataExtraction OpenpipelineV2UserEventsPipelinesDataExtractionOutput `pulumi:"dataExtraction"`
	// Davis event extraction stage
	Davis OpenpipelineV2UserEventsPipelinesDavisOutput `pulumi:"davis"`
	// Display name
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Metrics extraction stage
	MetricExtraction OpenpipelineV2UserEventsPipelinesMetricExtractionOutput `pulumi:"metricExtraction"`
	// Processing stage
	Processing OpenpipelineV2UserEventsPipelinesProcessingOutput `pulumi:"processing"`
	// Product allocation stage
	ProductAllocation OpenpipelineV2UserEventsPipelinesProductAllocationOutput `pulumi:"productAllocation"`
	// Security context stage
	SecurityContext OpenpipelineV2UserEventsPipelinesSecurityContextOutput `pulumi:"securityContext"`
	// Storage stage
	Storage OpenpipelineV2UserEventsPipelinesStorageOutput `pulumi:"storage"`
}

// NewOpenpipelineV2UserEventsPipelines registers a new resource with the given unique name, arguments, and options.
func NewOpenpipelineV2UserEventsPipelines(ctx *pulumi.Context,
	name string, args *OpenpipelineV2UserEventsPipelinesArgs, opts ...pulumi.ResourceOption) (*OpenpipelineV2UserEventsPipelines, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CostAllocation == nil {
		return nil, errors.New("invalid value for required argument 'CostAllocation'")
	}
	if args.CustomId == nil {
		return nil, errors.New("invalid value for required argument 'CustomId'")
	}
	if args.DataExtraction == nil {
		return nil, errors.New("invalid value for required argument 'DataExtraction'")
	}
	if args.Davis == nil {
		return nil, errors.New("invalid value for required argument 'Davis'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.MetricExtraction == nil {
		return nil, errors.New("invalid value for required argument 'MetricExtraction'")
	}
	if args.Processing == nil {
		return nil, errors.New("invalid value for required argument 'Processing'")
	}
	if args.ProductAllocation == nil {
		return nil, errors.New("invalid value for required argument 'ProductAllocation'")
	}
	if args.SecurityContext == nil {
		return nil, errors.New("invalid value for required argument 'SecurityContext'")
	}
	if args.Storage == nil {
		return nil, errors.New("invalid value for required argument 'Storage'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenpipelineV2UserEventsPipelines
	err := ctx.RegisterResource("dynatrace:index/openpipelineV2UserEventsPipelines:OpenpipelineV2UserEventsPipelines", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenpipelineV2UserEventsPipelines gets an existing OpenpipelineV2UserEventsPipelines resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenpipelineV2UserEventsPipelines(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenpipelineV2UserEventsPipelinesState, opts ...pulumi.ResourceOption) (*OpenpipelineV2UserEventsPipelines, error) {
	var resource OpenpipelineV2UserEventsPipelines
	err := ctx.ReadResource("dynatrace:index/openpipelineV2UserEventsPipelines:OpenpipelineV2UserEventsPipelines", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenpipelineV2UserEventsPipelines resources.
type openpipelineV2UserEventsPipelinesState struct {
	// Cost allocation stage
	CostAllocation *OpenpipelineV2UserEventsPipelinesCostAllocation `pulumi:"costAllocation"`
	// Custom pipeline id
	CustomId *string `pulumi:"customId"`
	// Data extraction stage
	DataExtraction *OpenpipelineV2UserEventsPipelinesDataExtraction `pulumi:"dataExtraction"`
	// Davis event extraction stage
	Davis *OpenpipelineV2UserEventsPipelinesDavis `pulumi:"davis"`
	// Display name
	DisplayName *string `pulumi:"displayName"`
	// Metrics extraction stage
	MetricExtraction *OpenpipelineV2UserEventsPipelinesMetricExtraction `pulumi:"metricExtraction"`
	// Processing stage
	Processing *OpenpipelineV2UserEventsPipelinesProcessing `pulumi:"processing"`
	// Product allocation stage
	ProductAllocation *OpenpipelineV2UserEventsPipelinesProductAllocation `pulumi:"productAllocation"`
	// Security context stage
	SecurityContext *OpenpipelineV2UserEventsPipelinesSecurityContext `pulumi:"securityContext"`
	// Storage stage
	Storage *OpenpipelineV2UserEventsPipelinesStorage `pulumi:"storage"`
}

type OpenpipelineV2UserEventsPipelinesState struct {
	// Cost allocation stage
	CostAllocation OpenpipelineV2UserEventsPipelinesCostAllocationPtrInput
	// Custom pipeline id
	CustomId pulumi.StringPtrInput
	// Data extraction stage
	DataExtraction OpenpipelineV2UserEventsPipelinesDataExtractionPtrInput
	// Davis event extraction stage
	Davis OpenpipelineV2UserEventsPipelinesDavisPtrInput
	// Display name
	DisplayName pulumi.StringPtrInput
	// Metrics extraction stage
	MetricExtraction OpenpipelineV2UserEventsPipelinesMetricExtractionPtrInput
	// Processing stage
	Processing OpenpipelineV2UserEventsPipelinesProcessingPtrInput
	// Product allocation stage
	ProductAllocation OpenpipelineV2UserEventsPipelinesProductAllocationPtrInput
	// Security context stage
	SecurityContext OpenpipelineV2UserEventsPipelinesSecurityContextPtrInput
	// Storage stage
	Storage OpenpipelineV2UserEventsPipelinesStoragePtrInput
}

func (OpenpipelineV2UserEventsPipelinesState) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2UserEventsPipelinesState)(nil)).Elem()
}

type openpipelineV2UserEventsPipelinesArgs struct {
	// Cost allocation stage
	CostAllocation OpenpipelineV2UserEventsPipelinesCostAllocation `pulumi:"costAllocation"`
	// Custom pipeline id
	CustomId string `pulumi:"customId"`
	// Data extraction stage
	DataExtraction OpenpipelineV2UserEventsPipelinesDataExtraction `pulumi:"dataExtraction"`
	// Davis event extraction stage
	Davis OpenpipelineV2UserEventsPipelinesDavis `pulumi:"davis"`
	// Display name
	DisplayName string `pulumi:"displayName"`
	// Metrics extraction stage
	MetricExtraction OpenpipelineV2UserEventsPipelinesMetricExtraction `pulumi:"metricExtraction"`
	// Processing stage
	Processing OpenpipelineV2UserEventsPipelinesProcessing `pulumi:"processing"`
	// Product allocation stage
	ProductAllocation OpenpipelineV2UserEventsPipelinesProductAllocation `pulumi:"productAllocation"`
	// Security context stage
	SecurityContext OpenpipelineV2UserEventsPipelinesSecurityContext `pulumi:"securityContext"`
	// Storage stage
	Storage OpenpipelineV2UserEventsPipelinesStorage `pulumi:"storage"`
}

// The set of arguments for constructing a OpenpipelineV2UserEventsPipelines resource.
type OpenpipelineV2UserEventsPipelinesArgs struct {
	// Cost allocation stage
	CostAllocation OpenpipelineV2UserEventsPipelinesCostAllocationInput
	// Custom pipeline id
	CustomId pulumi.StringInput
	// Data extraction stage
	DataExtraction OpenpipelineV2UserEventsPipelinesDataExtractionInput
	// Davis event extraction stage
	Davis OpenpipelineV2UserEventsPipelinesDavisInput
	// Display name
	DisplayName pulumi.StringInput
	// Metrics extraction stage
	MetricExtraction OpenpipelineV2UserEventsPipelinesMetricExtractionInput
	// Processing stage
	Processing OpenpipelineV2UserEventsPipelinesProcessingInput
	// Product allocation stage
	ProductAllocation OpenpipelineV2UserEventsPipelinesProductAllocationInput
	// Security context stage
	SecurityContext OpenpipelineV2UserEventsPipelinesSecurityContextInput
	// Storage stage
	Storage OpenpipelineV2UserEventsPipelinesStorageInput
}

func (OpenpipelineV2UserEventsPipelinesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2UserEventsPipelinesArgs)(nil)).Elem()
}

type OpenpipelineV2UserEventsPipelinesInput interface {
	pulumi.Input

	ToOpenpipelineV2UserEventsPipelinesOutput() OpenpipelineV2UserEventsPipelinesOutput
	ToOpenpipelineV2UserEventsPipelinesOutputWithContext(ctx context.Context) OpenpipelineV2UserEventsPipelinesOutput
}

func (*OpenpipelineV2UserEventsPipelines) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2UserEventsPipelines)(nil)).Elem()
}

func (i *OpenpipelineV2UserEventsPipelines) ToOpenpipelineV2UserEventsPipelinesOutput() OpenpipelineV2UserEventsPipelinesOutput {
	return i.ToOpenpipelineV2UserEventsPipelinesOutputWithContext(context.Background())
}

func (i *OpenpipelineV2UserEventsPipelines) ToOpenpipelineV2UserEventsPipelinesOutputWithContext(ctx context.Context) OpenpipelineV2UserEventsPipelinesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2UserEventsPipelinesOutput)
}

// OpenpipelineV2UserEventsPipelinesArrayInput is an input type that accepts OpenpipelineV2UserEventsPipelinesArray and OpenpipelineV2UserEventsPipelinesArrayOutput values.
// You can construct a concrete instance of `OpenpipelineV2UserEventsPipelinesArrayInput` via:
//
//	OpenpipelineV2UserEventsPipelinesArray{ OpenpipelineV2UserEventsPipelinesArgs{...} }
type OpenpipelineV2UserEventsPipelinesArrayInput interface {
	pulumi.Input

	ToOpenpipelineV2UserEventsPipelinesArrayOutput() OpenpipelineV2UserEventsPipelinesArrayOutput
	ToOpenpipelineV2UserEventsPipelinesArrayOutputWithContext(context.Context) OpenpipelineV2UserEventsPipelinesArrayOutput
}

type OpenpipelineV2UserEventsPipelinesArray []OpenpipelineV2UserEventsPipelinesInput

func (OpenpipelineV2UserEventsPipelinesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2UserEventsPipelines)(nil)).Elem()
}

func (i OpenpipelineV2UserEventsPipelinesArray) ToOpenpipelineV2UserEventsPipelinesArrayOutput() OpenpipelineV2UserEventsPipelinesArrayOutput {
	return i.ToOpenpipelineV2UserEventsPipelinesArrayOutputWithContext(context.Background())
}

func (i OpenpipelineV2UserEventsPipelinesArray) ToOpenpipelineV2UserEventsPipelinesArrayOutputWithContext(ctx context.Context) OpenpipelineV2UserEventsPipelinesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2UserEventsPipelinesArrayOutput)
}

// OpenpipelineV2UserEventsPipelinesMapInput is an input type that accepts OpenpipelineV2UserEventsPipelinesMap and OpenpipelineV2UserEventsPipelinesMapOutput values.
// You can construct a concrete instance of `OpenpipelineV2UserEventsPipelinesMapInput` via:
//
//	OpenpipelineV2UserEventsPipelinesMap{ "key": OpenpipelineV2UserEventsPipelinesArgs{...} }
type OpenpipelineV2UserEventsPipelinesMapInput interface {
	pulumi.Input

	ToOpenpipelineV2UserEventsPipelinesMapOutput() OpenpipelineV2UserEventsPipelinesMapOutput
	ToOpenpipelineV2UserEventsPipelinesMapOutputWithContext(context.Context) OpenpipelineV2UserEventsPipelinesMapOutput
}

type OpenpipelineV2UserEventsPipelinesMap map[string]OpenpipelineV2UserEventsPipelinesInput

func (OpenpipelineV2UserEventsPipelinesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2UserEventsPipelines)(nil)).Elem()
}

func (i OpenpipelineV2UserEventsPipelinesMap) ToOpenpipelineV2UserEventsPipelinesMapOutput() OpenpipelineV2UserEventsPipelinesMapOutput {
	return i.ToOpenpipelineV2UserEventsPipelinesMapOutputWithContext(context.Background())
}

func (i OpenpipelineV2UserEventsPipelinesMap) ToOpenpipelineV2UserEventsPipelinesMapOutputWithContext(ctx context.Context) OpenpipelineV2UserEventsPipelinesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2UserEventsPipelinesMapOutput)
}

type OpenpipelineV2UserEventsPipelinesOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2UserEventsPipelinesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2UserEventsPipelines)(nil)).Elem()
}

func (o OpenpipelineV2UserEventsPipelinesOutput) ToOpenpipelineV2UserEventsPipelinesOutput() OpenpipelineV2UserEventsPipelinesOutput {
	return o
}

func (o OpenpipelineV2UserEventsPipelinesOutput) ToOpenpipelineV2UserEventsPipelinesOutputWithContext(ctx context.Context) OpenpipelineV2UserEventsPipelinesOutput {
	return o
}

// Cost allocation stage
func (o OpenpipelineV2UserEventsPipelinesOutput) CostAllocation() OpenpipelineV2UserEventsPipelinesCostAllocationOutput {
	return o.ApplyT(func(v *OpenpipelineV2UserEventsPipelines) OpenpipelineV2UserEventsPipelinesCostAllocationOutput {
		return v.CostAllocation
	}).(OpenpipelineV2UserEventsPipelinesCostAllocationOutput)
}

// Custom pipeline id
func (o OpenpipelineV2UserEventsPipelinesOutput) CustomId() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenpipelineV2UserEventsPipelines) pulumi.StringOutput { return v.CustomId }).(pulumi.StringOutput)
}

// Data extraction stage
func (o OpenpipelineV2UserEventsPipelinesOutput) DataExtraction() OpenpipelineV2UserEventsPipelinesDataExtractionOutput {
	return o.ApplyT(func(v *OpenpipelineV2UserEventsPipelines) OpenpipelineV2UserEventsPipelinesDataExtractionOutput {
		return v.DataExtraction
	}).(OpenpipelineV2UserEventsPipelinesDataExtractionOutput)
}

// Davis event extraction stage
func (o OpenpipelineV2UserEventsPipelinesOutput) Davis() OpenpipelineV2UserEventsPipelinesDavisOutput {
	return o.ApplyT(func(v *OpenpipelineV2UserEventsPipelines) OpenpipelineV2UserEventsPipelinesDavisOutput {
		return v.Davis
	}).(OpenpipelineV2UserEventsPipelinesDavisOutput)
}

// Display name
func (o OpenpipelineV2UserEventsPipelinesOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenpipelineV2UserEventsPipelines) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Metrics extraction stage
func (o OpenpipelineV2UserEventsPipelinesOutput) MetricExtraction() OpenpipelineV2UserEventsPipelinesMetricExtractionOutput {
	return o.ApplyT(func(v *OpenpipelineV2UserEventsPipelines) OpenpipelineV2UserEventsPipelinesMetricExtractionOutput {
		return v.MetricExtraction
	}).(OpenpipelineV2UserEventsPipelinesMetricExtractionOutput)
}

// Processing stage
func (o OpenpipelineV2UserEventsPipelinesOutput) Processing() OpenpipelineV2UserEventsPipelinesProcessingOutput {
	return o.ApplyT(func(v *OpenpipelineV2UserEventsPipelines) OpenpipelineV2UserEventsPipelinesProcessingOutput {
		return v.Processing
	}).(OpenpipelineV2UserEventsPipelinesProcessingOutput)
}

// Product allocation stage
func (o OpenpipelineV2UserEventsPipelinesOutput) ProductAllocation() OpenpipelineV2UserEventsPipelinesProductAllocationOutput {
	return o.ApplyT(func(v *OpenpipelineV2UserEventsPipelines) OpenpipelineV2UserEventsPipelinesProductAllocationOutput {
		return v.ProductAllocation
	}).(OpenpipelineV2UserEventsPipelinesProductAllocationOutput)
}

// Security context stage
func (o OpenpipelineV2UserEventsPipelinesOutput) SecurityContext() OpenpipelineV2UserEventsPipelinesSecurityContextOutput {
	return o.ApplyT(func(v *OpenpipelineV2UserEventsPipelines) OpenpipelineV2UserEventsPipelinesSecurityContextOutput {
		return v.SecurityContext
	}).(OpenpipelineV2UserEventsPipelinesSecurityContextOutput)
}

// Storage stage
func (o OpenpipelineV2UserEventsPipelinesOutput) Storage() OpenpipelineV2UserEventsPipelinesStorageOutput {
	return o.ApplyT(func(v *OpenpipelineV2UserEventsPipelines) OpenpipelineV2UserEventsPipelinesStorageOutput {
		return v.Storage
	}).(OpenpipelineV2UserEventsPipelinesStorageOutput)
}

type OpenpipelineV2UserEventsPipelinesArrayOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2UserEventsPipelinesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2UserEventsPipelines)(nil)).Elem()
}

func (o OpenpipelineV2UserEventsPipelinesArrayOutput) ToOpenpipelineV2UserEventsPipelinesArrayOutput() OpenpipelineV2UserEventsPipelinesArrayOutput {
	return o
}

func (o OpenpipelineV2UserEventsPipelinesArrayOutput) ToOpenpipelineV2UserEventsPipelinesArrayOutputWithContext(ctx context.Context) OpenpipelineV2UserEventsPipelinesArrayOutput {
	return o
}

func (o OpenpipelineV2UserEventsPipelinesArrayOutput) Index(i pulumi.IntInput) OpenpipelineV2UserEventsPipelinesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenpipelineV2UserEventsPipelines {
		return vs[0].([]*OpenpipelineV2UserEventsPipelines)[vs[1].(int)]
	}).(OpenpipelineV2UserEventsPipelinesOutput)
}

type OpenpipelineV2UserEventsPipelinesMapOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2UserEventsPipelinesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2UserEventsPipelines)(nil)).Elem()
}

func (o OpenpipelineV2UserEventsPipelinesMapOutput) ToOpenpipelineV2UserEventsPipelinesMapOutput() OpenpipelineV2UserEventsPipelinesMapOutput {
	return o
}

func (o OpenpipelineV2UserEventsPipelinesMapOutput) ToOpenpipelineV2UserEventsPipelinesMapOutputWithContext(ctx context.Context) OpenpipelineV2UserEventsPipelinesMapOutput {
	return o
}

func (o OpenpipelineV2UserEventsPipelinesMapOutput) MapIndex(k pulumi.StringInput) OpenpipelineV2UserEventsPipelinesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenpipelineV2UserEventsPipelines {
		return vs[0].(map[string]*OpenpipelineV2UserEventsPipelines)[vs[1].(string)]
	}).(OpenpipelineV2UserEventsPipelinesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2UserEventsPipelinesInput)(nil)).Elem(), &OpenpipelineV2UserEventsPipelines{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2UserEventsPipelinesArrayInput)(nil)).Elem(), OpenpipelineV2UserEventsPipelinesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2UserEventsPipelinesMapInput)(nil)).Elem(), OpenpipelineV2UserEventsPipelinesMap{})
	pulumi.RegisterOutputType(OpenpipelineV2UserEventsPipelinesOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2UserEventsPipelinesArrayOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2UserEventsPipelinesMapOutput{})
}
