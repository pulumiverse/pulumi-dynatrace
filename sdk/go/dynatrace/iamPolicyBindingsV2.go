// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

// > **Dynatrace SaaS only**
//
// > To utilize this resource, please define the environment variables `DT_CLIENT_ID`, `DT_CLIENT_SECRET`, `DT_ACCOUNT_ID` with an OAuth client including the following permissions: **Allow IAM policy configuration for environments** (`iam-policies-management`) and **View environments** (`account-env-read`).
//
// > This resource is excluded by default in the export utility, please explicitly specify the resource to retrieve existing configuration.
//
// ## Dynatrace Documentation
//
// - Dynatrace IAM Group Permissions - https://docs.dynatrace.com/docs/manage/identity-access-management/permission-management/manage-user-permissions-policies
//
// - Settings API - https://www.dynatrace.com/support/help/how-to-use-dynatrace/user-management-and-sso/manage-groups-and-permissions/iam/iam-getting-started
type IamPolicyBindingsV2 struct {
	pulumi.CustomResourceState

	// The UUID of the account (`urn:dtaccount:<account-uuid>`). The attribute `policies` must contain ONLY policies defined for that account. The prefix `urn:dtaccount:` MUST be omitted here.
	Account pulumi.StringPtrOutput `pulumi:"account"`
	// The ID of the environment (https://\n\n.live.dynatrace.com). The attribute `policies` must contain ONLY policies defined for that environment.
	Environment pulumi.StringPtrOutput `pulumi:"environment"`
	// The name of the policy
	Group pulumi.StringOutput `pulumi:"group"`
	// A list of Policies (ID and parameters/metadata) referring to policies bound to that group. It's not possible to mix policies here that are defined for different scopes (different accounts or environments) than specified via attributes `account` or `environment`.
	Policies IamPolicyBindingsV2PolicyArrayOutput `pulumi:"policies"`
}

// NewIamPolicyBindingsV2 registers a new resource with the given unique name, arguments, and options.
func NewIamPolicyBindingsV2(ctx *pulumi.Context,
	name string, args *IamPolicyBindingsV2Args, opts ...pulumi.ResourceOption) (*IamPolicyBindingsV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Group == nil {
		return nil, errors.New("invalid value for required argument 'Group'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IamPolicyBindingsV2
	err := ctx.RegisterResource("dynatrace:index/iamPolicyBindingsV2:IamPolicyBindingsV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIamPolicyBindingsV2 gets an existing IamPolicyBindingsV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIamPolicyBindingsV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IamPolicyBindingsV2State, opts ...pulumi.ResourceOption) (*IamPolicyBindingsV2, error) {
	var resource IamPolicyBindingsV2
	err := ctx.ReadResource("dynatrace:index/iamPolicyBindingsV2:IamPolicyBindingsV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IamPolicyBindingsV2 resources.
type iamPolicyBindingsV2State struct {
	// The UUID of the account (`urn:dtaccount:<account-uuid>`). The attribute `policies` must contain ONLY policies defined for that account. The prefix `urn:dtaccount:` MUST be omitted here.
	Account *string `pulumi:"account"`
	// The ID of the environment (https://\n\n.live.dynatrace.com). The attribute `policies` must contain ONLY policies defined for that environment.
	Environment *string `pulumi:"environment"`
	// The name of the policy
	Group *string `pulumi:"group"`
	// A list of Policies (ID and parameters/metadata) referring to policies bound to that group. It's not possible to mix policies here that are defined for different scopes (different accounts or environments) than specified via attributes `account` or `environment`.
	Policies []IamPolicyBindingsV2Policy `pulumi:"policies"`
}

type IamPolicyBindingsV2State struct {
	// The UUID of the account (`urn:dtaccount:<account-uuid>`). The attribute `policies` must contain ONLY policies defined for that account. The prefix `urn:dtaccount:` MUST be omitted here.
	Account pulumi.StringPtrInput
	// The ID of the environment (https://\n\n.live.dynatrace.com). The attribute `policies` must contain ONLY policies defined for that environment.
	Environment pulumi.StringPtrInput
	// The name of the policy
	Group pulumi.StringPtrInput
	// A list of Policies (ID and parameters/metadata) referring to policies bound to that group. It's not possible to mix policies here that are defined for different scopes (different accounts or environments) than specified via attributes `account` or `environment`.
	Policies IamPolicyBindingsV2PolicyArrayInput
}

func (IamPolicyBindingsV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*iamPolicyBindingsV2State)(nil)).Elem()
}

type iamPolicyBindingsV2Args struct {
	// The UUID of the account (`urn:dtaccount:<account-uuid>`). The attribute `policies` must contain ONLY policies defined for that account. The prefix `urn:dtaccount:` MUST be omitted here.
	Account *string `pulumi:"account"`
	// The ID of the environment (https://\n\n.live.dynatrace.com). The attribute `policies` must contain ONLY policies defined for that environment.
	Environment *string `pulumi:"environment"`
	// The name of the policy
	Group string `pulumi:"group"`
	// A list of Policies (ID and parameters/metadata) referring to policies bound to that group. It's not possible to mix policies here that are defined for different scopes (different accounts or environments) than specified via attributes `account` or `environment`.
	Policies []IamPolicyBindingsV2Policy `pulumi:"policies"`
}

// The set of arguments for constructing a IamPolicyBindingsV2 resource.
type IamPolicyBindingsV2Args struct {
	// The UUID of the account (`urn:dtaccount:<account-uuid>`). The attribute `policies` must contain ONLY policies defined for that account. The prefix `urn:dtaccount:` MUST be omitted here.
	Account pulumi.StringPtrInput
	// The ID of the environment (https://\n\n.live.dynatrace.com). The attribute `policies` must contain ONLY policies defined for that environment.
	Environment pulumi.StringPtrInput
	// The name of the policy
	Group pulumi.StringInput
	// A list of Policies (ID and parameters/metadata) referring to policies bound to that group. It's not possible to mix policies here that are defined for different scopes (different accounts or environments) than specified via attributes `account` or `environment`.
	Policies IamPolicyBindingsV2PolicyArrayInput
}

func (IamPolicyBindingsV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*iamPolicyBindingsV2Args)(nil)).Elem()
}

type IamPolicyBindingsV2Input interface {
	pulumi.Input

	ToIamPolicyBindingsV2Output() IamPolicyBindingsV2Output
	ToIamPolicyBindingsV2OutputWithContext(ctx context.Context) IamPolicyBindingsV2Output
}

func (*IamPolicyBindingsV2) ElementType() reflect.Type {
	return reflect.TypeOf((**IamPolicyBindingsV2)(nil)).Elem()
}

func (i *IamPolicyBindingsV2) ToIamPolicyBindingsV2Output() IamPolicyBindingsV2Output {
	return i.ToIamPolicyBindingsV2OutputWithContext(context.Background())
}

func (i *IamPolicyBindingsV2) ToIamPolicyBindingsV2OutputWithContext(ctx context.Context) IamPolicyBindingsV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(IamPolicyBindingsV2Output)
}

// IamPolicyBindingsV2ArrayInput is an input type that accepts IamPolicyBindingsV2Array and IamPolicyBindingsV2ArrayOutput values.
// You can construct a concrete instance of `IamPolicyBindingsV2ArrayInput` via:
//
//	IamPolicyBindingsV2Array{ IamPolicyBindingsV2Args{...} }
type IamPolicyBindingsV2ArrayInput interface {
	pulumi.Input

	ToIamPolicyBindingsV2ArrayOutput() IamPolicyBindingsV2ArrayOutput
	ToIamPolicyBindingsV2ArrayOutputWithContext(context.Context) IamPolicyBindingsV2ArrayOutput
}

type IamPolicyBindingsV2Array []IamPolicyBindingsV2Input

func (IamPolicyBindingsV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamPolicyBindingsV2)(nil)).Elem()
}

func (i IamPolicyBindingsV2Array) ToIamPolicyBindingsV2ArrayOutput() IamPolicyBindingsV2ArrayOutput {
	return i.ToIamPolicyBindingsV2ArrayOutputWithContext(context.Background())
}

func (i IamPolicyBindingsV2Array) ToIamPolicyBindingsV2ArrayOutputWithContext(ctx context.Context) IamPolicyBindingsV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamPolicyBindingsV2ArrayOutput)
}

// IamPolicyBindingsV2MapInput is an input type that accepts IamPolicyBindingsV2Map and IamPolicyBindingsV2MapOutput values.
// You can construct a concrete instance of `IamPolicyBindingsV2MapInput` via:
//
//	IamPolicyBindingsV2Map{ "key": IamPolicyBindingsV2Args{...} }
type IamPolicyBindingsV2MapInput interface {
	pulumi.Input

	ToIamPolicyBindingsV2MapOutput() IamPolicyBindingsV2MapOutput
	ToIamPolicyBindingsV2MapOutputWithContext(context.Context) IamPolicyBindingsV2MapOutput
}

type IamPolicyBindingsV2Map map[string]IamPolicyBindingsV2Input

func (IamPolicyBindingsV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamPolicyBindingsV2)(nil)).Elem()
}

func (i IamPolicyBindingsV2Map) ToIamPolicyBindingsV2MapOutput() IamPolicyBindingsV2MapOutput {
	return i.ToIamPolicyBindingsV2MapOutputWithContext(context.Background())
}

func (i IamPolicyBindingsV2Map) ToIamPolicyBindingsV2MapOutputWithContext(ctx context.Context) IamPolicyBindingsV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamPolicyBindingsV2MapOutput)
}

type IamPolicyBindingsV2Output struct{ *pulumi.OutputState }

func (IamPolicyBindingsV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**IamPolicyBindingsV2)(nil)).Elem()
}

func (o IamPolicyBindingsV2Output) ToIamPolicyBindingsV2Output() IamPolicyBindingsV2Output {
	return o
}

func (o IamPolicyBindingsV2Output) ToIamPolicyBindingsV2OutputWithContext(ctx context.Context) IamPolicyBindingsV2Output {
	return o
}

// The UUID of the account (`urn:dtaccount:<account-uuid>`). The attribute `policies` must contain ONLY policies defined for that account. The prefix `urn:dtaccount:` MUST be omitted here.
func (o IamPolicyBindingsV2Output) Account() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IamPolicyBindingsV2) pulumi.StringPtrOutput { return v.Account }).(pulumi.StringPtrOutput)
}

// The ID of the environment (https://\n\n.live.dynatrace.com). The attribute `policies` must contain ONLY policies defined for that environment.
func (o IamPolicyBindingsV2Output) Environment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IamPolicyBindingsV2) pulumi.StringPtrOutput { return v.Environment }).(pulumi.StringPtrOutput)
}

// The name of the policy
func (o IamPolicyBindingsV2Output) Group() pulumi.StringOutput {
	return o.ApplyT(func(v *IamPolicyBindingsV2) pulumi.StringOutput { return v.Group }).(pulumi.StringOutput)
}

// A list of Policies (ID and parameters/metadata) referring to policies bound to that group. It's not possible to mix policies here that are defined for different scopes (different accounts or environments) than specified via attributes `account` or `environment`.
func (o IamPolicyBindingsV2Output) Policies() IamPolicyBindingsV2PolicyArrayOutput {
	return o.ApplyT(func(v *IamPolicyBindingsV2) IamPolicyBindingsV2PolicyArrayOutput { return v.Policies }).(IamPolicyBindingsV2PolicyArrayOutput)
}

type IamPolicyBindingsV2ArrayOutput struct{ *pulumi.OutputState }

func (IamPolicyBindingsV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamPolicyBindingsV2)(nil)).Elem()
}

func (o IamPolicyBindingsV2ArrayOutput) ToIamPolicyBindingsV2ArrayOutput() IamPolicyBindingsV2ArrayOutput {
	return o
}

func (o IamPolicyBindingsV2ArrayOutput) ToIamPolicyBindingsV2ArrayOutputWithContext(ctx context.Context) IamPolicyBindingsV2ArrayOutput {
	return o
}

func (o IamPolicyBindingsV2ArrayOutput) Index(i pulumi.IntInput) IamPolicyBindingsV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IamPolicyBindingsV2 {
		return vs[0].([]*IamPolicyBindingsV2)[vs[1].(int)]
	}).(IamPolicyBindingsV2Output)
}

type IamPolicyBindingsV2MapOutput struct{ *pulumi.OutputState }

func (IamPolicyBindingsV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamPolicyBindingsV2)(nil)).Elem()
}

func (o IamPolicyBindingsV2MapOutput) ToIamPolicyBindingsV2MapOutput() IamPolicyBindingsV2MapOutput {
	return o
}

func (o IamPolicyBindingsV2MapOutput) ToIamPolicyBindingsV2MapOutputWithContext(ctx context.Context) IamPolicyBindingsV2MapOutput {
	return o
}

func (o IamPolicyBindingsV2MapOutput) MapIndex(k pulumi.StringInput) IamPolicyBindingsV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IamPolicyBindingsV2 {
		return vs[0].(map[string]*IamPolicyBindingsV2)[vs[1].(string)]
	}).(IamPolicyBindingsV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IamPolicyBindingsV2Input)(nil)).Elem(), &IamPolicyBindingsV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamPolicyBindingsV2ArrayInput)(nil)).Elem(), IamPolicyBindingsV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamPolicyBindingsV2MapInput)(nil)).Elem(), IamPolicyBindingsV2Map{})
	pulumi.RegisterOutputType(IamPolicyBindingsV2Output{})
	pulumi.RegisterOutputType(IamPolicyBindingsV2ArrayOutput{})
	pulumi.RegisterOutputType(IamPolicyBindingsV2MapOutput{})
}
