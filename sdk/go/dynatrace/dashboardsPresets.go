// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type DashboardsPresets struct {
	pulumi.CustomResourceState

	// Show selected preset to respective user group only.
	DashboardPresetsList DashboardsPresetsDashboardPresetsListPtrOutput `pulumi:"dashboardPresetsList"`
	// Dashboard presets are visible to all users by default. For a pristine environment you may disable them entirely or opt to manually limit visibility to selected user groups.
	EnableDashboardPresets pulumi.BoolOutput `pulumi:"enableDashboardPresets"`
}

// NewDashboardsPresets registers a new resource with the given unique name, arguments, and options.
func NewDashboardsPresets(ctx *pulumi.Context,
	name string, args *DashboardsPresetsArgs, opts ...pulumi.ResourceOption) (*DashboardsPresets, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnableDashboardPresets == nil {
		return nil, errors.New("invalid value for required argument 'EnableDashboardPresets'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DashboardsPresets
	err := ctx.RegisterResource("dynatrace:index/dashboardsPresets:DashboardsPresets", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDashboardsPresets gets an existing DashboardsPresets resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDashboardsPresets(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DashboardsPresetsState, opts ...pulumi.ResourceOption) (*DashboardsPresets, error) {
	var resource DashboardsPresets
	err := ctx.ReadResource("dynatrace:index/dashboardsPresets:DashboardsPresets", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DashboardsPresets resources.
type dashboardsPresetsState struct {
	// Show selected preset to respective user group only.
	DashboardPresetsList *DashboardsPresetsDashboardPresetsList `pulumi:"dashboardPresetsList"`
	// Dashboard presets are visible to all users by default. For a pristine environment you may disable them entirely or opt to manually limit visibility to selected user groups.
	EnableDashboardPresets *bool `pulumi:"enableDashboardPresets"`
}

type DashboardsPresetsState struct {
	// Show selected preset to respective user group only.
	DashboardPresetsList DashboardsPresetsDashboardPresetsListPtrInput
	// Dashboard presets are visible to all users by default. For a pristine environment you may disable them entirely or opt to manually limit visibility to selected user groups.
	EnableDashboardPresets pulumi.BoolPtrInput
}

func (DashboardsPresetsState) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardsPresetsState)(nil)).Elem()
}

type dashboardsPresetsArgs struct {
	// Show selected preset to respective user group only.
	DashboardPresetsList *DashboardsPresetsDashboardPresetsList `pulumi:"dashboardPresetsList"`
	// Dashboard presets are visible to all users by default. For a pristine environment you may disable them entirely or opt to manually limit visibility to selected user groups.
	EnableDashboardPresets bool `pulumi:"enableDashboardPresets"`
}

// The set of arguments for constructing a DashboardsPresets resource.
type DashboardsPresetsArgs struct {
	// Show selected preset to respective user group only.
	DashboardPresetsList DashboardsPresetsDashboardPresetsListPtrInput
	// Dashboard presets are visible to all users by default. For a pristine environment you may disable them entirely or opt to manually limit visibility to selected user groups.
	EnableDashboardPresets pulumi.BoolInput
}

func (DashboardsPresetsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardsPresetsArgs)(nil)).Elem()
}

type DashboardsPresetsInput interface {
	pulumi.Input

	ToDashboardsPresetsOutput() DashboardsPresetsOutput
	ToDashboardsPresetsOutputWithContext(ctx context.Context) DashboardsPresetsOutput
}

func (*DashboardsPresets) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardsPresets)(nil)).Elem()
}

func (i *DashboardsPresets) ToDashboardsPresetsOutput() DashboardsPresetsOutput {
	return i.ToDashboardsPresetsOutputWithContext(context.Background())
}

func (i *DashboardsPresets) ToDashboardsPresetsOutputWithContext(ctx context.Context) DashboardsPresetsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardsPresetsOutput)
}

// DashboardsPresetsArrayInput is an input type that accepts DashboardsPresetsArray and DashboardsPresetsArrayOutput values.
// You can construct a concrete instance of `DashboardsPresetsArrayInput` via:
//
//	DashboardsPresetsArray{ DashboardsPresetsArgs{...} }
type DashboardsPresetsArrayInput interface {
	pulumi.Input

	ToDashboardsPresetsArrayOutput() DashboardsPresetsArrayOutput
	ToDashboardsPresetsArrayOutputWithContext(context.Context) DashboardsPresetsArrayOutput
}

type DashboardsPresetsArray []DashboardsPresetsInput

func (DashboardsPresetsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DashboardsPresets)(nil)).Elem()
}

func (i DashboardsPresetsArray) ToDashboardsPresetsArrayOutput() DashboardsPresetsArrayOutput {
	return i.ToDashboardsPresetsArrayOutputWithContext(context.Background())
}

func (i DashboardsPresetsArray) ToDashboardsPresetsArrayOutputWithContext(ctx context.Context) DashboardsPresetsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardsPresetsArrayOutput)
}

// DashboardsPresetsMapInput is an input type that accepts DashboardsPresetsMap and DashboardsPresetsMapOutput values.
// You can construct a concrete instance of `DashboardsPresetsMapInput` via:
//
//	DashboardsPresetsMap{ "key": DashboardsPresetsArgs{...} }
type DashboardsPresetsMapInput interface {
	pulumi.Input

	ToDashboardsPresetsMapOutput() DashboardsPresetsMapOutput
	ToDashboardsPresetsMapOutputWithContext(context.Context) DashboardsPresetsMapOutput
}

type DashboardsPresetsMap map[string]DashboardsPresetsInput

func (DashboardsPresetsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DashboardsPresets)(nil)).Elem()
}

func (i DashboardsPresetsMap) ToDashboardsPresetsMapOutput() DashboardsPresetsMapOutput {
	return i.ToDashboardsPresetsMapOutputWithContext(context.Background())
}

func (i DashboardsPresetsMap) ToDashboardsPresetsMapOutputWithContext(ctx context.Context) DashboardsPresetsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardsPresetsMapOutput)
}

type DashboardsPresetsOutput struct{ *pulumi.OutputState }

func (DashboardsPresetsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardsPresets)(nil)).Elem()
}

func (o DashboardsPresetsOutput) ToDashboardsPresetsOutput() DashboardsPresetsOutput {
	return o
}

func (o DashboardsPresetsOutput) ToDashboardsPresetsOutputWithContext(ctx context.Context) DashboardsPresetsOutput {
	return o
}

// Show selected preset to respective user group only.
func (o DashboardsPresetsOutput) DashboardPresetsList() DashboardsPresetsDashboardPresetsListPtrOutput {
	return o.ApplyT(func(v *DashboardsPresets) DashboardsPresetsDashboardPresetsListPtrOutput {
		return v.DashboardPresetsList
	}).(DashboardsPresetsDashboardPresetsListPtrOutput)
}

// Dashboard presets are visible to all users by default. For a pristine environment you may disable them entirely or opt to manually limit visibility to selected user groups.
func (o DashboardsPresetsOutput) EnableDashboardPresets() pulumi.BoolOutput {
	return o.ApplyT(func(v *DashboardsPresets) pulumi.BoolOutput { return v.EnableDashboardPresets }).(pulumi.BoolOutput)
}

type DashboardsPresetsArrayOutput struct{ *pulumi.OutputState }

func (DashboardsPresetsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DashboardsPresets)(nil)).Elem()
}

func (o DashboardsPresetsArrayOutput) ToDashboardsPresetsArrayOutput() DashboardsPresetsArrayOutput {
	return o
}

func (o DashboardsPresetsArrayOutput) ToDashboardsPresetsArrayOutputWithContext(ctx context.Context) DashboardsPresetsArrayOutput {
	return o
}

func (o DashboardsPresetsArrayOutput) Index(i pulumi.IntInput) DashboardsPresetsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DashboardsPresets {
		return vs[0].([]*DashboardsPresets)[vs[1].(int)]
	}).(DashboardsPresetsOutput)
}

type DashboardsPresetsMapOutput struct{ *pulumi.OutputState }

func (DashboardsPresetsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DashboardsPresets)(nil)).Elem()
}

func (o DashboardsPresetsMapOutput) ToDashboardsPresetsMapOutput() DashboardsPresetsMapOutput {
	return o
}

func (o DashboardsPresetsMapOutput) ToDashboardsPresetsMapOutputWithContext(ctx context.Context) DashboardsPresetsMapOutput {
	return o
}

func (o DashboardsPresetsMapOutput) MapIndex(k pulumi.StringInput) DashboardsPresetsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DashboardsPresets {
		return vs[0].(map[string]*DashboardsPresets)[vs[1].(string)]
	}).(DashboardsPresetsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardsPresetsInput)(nil)).Elem(), &DashboardsPresets{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardsPresetsArrayInput)(nil)).Elem(), DashboardsPresetsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardsPresetsMapInput)(nil)).Elem(), DashboardsPresetsMap{})
	pulumi.RegisterOutputType(DashboardsPresetsOutput{})
	pulumi.RegisterOutputType(DashboardsPresetsArrayOutput{})
	pulumi.RegisterOutputType(DashboardsPresetsMapOutput{})
}
