// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type LogDebugSettings struct {
	pulumi.CustomResourceState

	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
}

// NewLogDebugSettings registers a new resource with the given unique name, arguments, and options.
func NewLogDebugSettings(ctx *pulumi.Context,
	name string, args *LogDebugSettingsArgs, opts ...pulumi.ResourceOption) (*LogDebugSettings, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogDebugSettings
	err := ctx.RegisterResource("dynatrace:index/logDebugSettings:LogDebugSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogDebugSettings gets an existing LogDebugSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogDebugSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogDebugSettingsState, opts ...pulumi.ResourceOption) (*LogDebugSettings, error) {
	var resource LogDebugSettings
	err := ctx.ReadResource("dynatrace:index/logDebugSettings:LogDebugSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogDebugSettings resources.
type logDebugSettingsState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
}

type LogDebugSettingsState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
}

func (LogDebugSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*logDebugSettingsState)(nil)).Elem()
}

type logDebugSettingsArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
}

// The set of arguments for constructing a LogDebugSettings resource.
type LogDebugSettingsArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
}

func (LogDebugSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logDebugSettingsArgs)(nil)).Elem()
}

type LogDebugSettingsInput interface {
	pulumi.Input

	ToLogDebugSettingsOutput() LogDebugSettingsOutput
	ToLogDebugSettingsOutputWithContext(ctx context.Context) LogDebugSettingsOutput
}

func (*LogDebugSettings) ElementType() reflect.Type {
	return reflect.TypeOf((**LogDebugSettings)(nil)).Elem()
}

func (i *LogDebugSettings) ToLogDebugSettingsOutput() LogDebugSettingsOutput {
	return i.ToLogDebugSettingsOutputWithContext(context.Background())
}

func (i *LogDebugSettings) ToLogDebugSettingsOutputWithContext(ctx context.Context) LogDebugSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogDebugSettingsOutput)
}

// LogDebugSettingsArrayInput is an input type that accepts LogDebugSettingsArray and LogDebugSettingsArrayOutput values.
// You can construct a concrete instance of `LogDebugSettingsArrayInput` via:
//
//	LogDebugSettingsArray{ LogDebugSettingsArgs{...} }
type LogDebugSettingsArrayInput interface {
	pulumi.Input

	ToLogDebugSettingsArrayOutput() LogDebugSettingsArrayOutput
	ToLogDebugSettingsArrayOutputWithContext(context.Context) LogDebugSettingsArrayOutput
}

type LogDebugSettingsArray []LogDebugSettingsInput

func (LogDebugSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogDebugSettings)(nil)).Elem()
}

func (i LogDebugSettingsArray) ToLogDebugSettingsArrayOutput() LogDebugSettingsArrayOutput {
	return i.ToLogDebugSettingsArrayOutputWithContext(context.Background())
}

func (i LogDebugSettingsArray) ToLogDebugSettingsArrayOutputWithContext(ctx context.Context) LogDebugSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogDebugSettingsArrayOutput)
}

// LogDebugSettingsMapInput is an input type that accepts LogDebugSettingsMap and LogDebugSettingsMapOutput values.
// You can construct a concrete instance of `LogDebugSettingsMapInput` via:
//
//	LogDebugSettingsMap{ "key": LogDebugSettingsArgs{...} }
type LogDebugSettingsMapInput interface {
	pulumi.Input

	ToLogDebugSettingsMapOutput() LogDebugSettingsMapOutput
	ToLogDebugSettingsMapOutputWithContext(context.Context) LogDebugSettingsMapOutput
}

type LogDebugSettingsMap map[string]LogDebugSettingsInput

func (LogDebugSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogDebugSettings)(nil)).Elem()
}

func (i LogDebugSettingsMap) ToLogDebugSettingsMapOutput() LogDebugSettingsMapOutput {
	return i.ToLogDebugSettingsMapOutputWithContext(context.Background())
}

func (i LogDebugSettingsMap) ToLogDebugSettingsMapOutputWithContext(ctx context.Context) LogDebugSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogDebugSettingsMapOutput)
}

type LogDebugSettingsOutput struct{ *pulumi.OutputState }

func (LogDebugSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogDebugSettings)(nil)).Elem()
}

func (o LogDebugSettingsOutput) ToLogDebugSettingsOutput() LogDebugSettingsOutput {
	return o
}

func (o LogDebugSettingsOutput) ToLogDebugSettingsOutputWithContext(ctx context.Context) LogDebugSettingsOutput {
	return o
}

// This setting is enabled (`true`) or disabled (`false`)
func (o LogDebugSettingsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *LogDebugSettings) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

type LogDebugSettingsArrayOutput struct{ *pulumi.OutputState }

func (LogDebugSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogDebugSettings)(nil)).Elem()
}

func (o LogDebugSettingsArrayOutput) ToLogDebugSettingsArrayOutput() LogDebugSettingsArrayOutput {
	return o
}

func (o LogDebugSettingsArrayOutput) ToLogDebugSettingsArrayOutputWithContext(ctx context.Context) LogDebugSettingsArrayOutput {
	return o
}

func (o LogDebugSettingsArrayOutput) Index(i pulumi.IntInput) LogDebugSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogDebugSettings {
		return vs[0].([]*LogDebugSettings)[vs[1].(int)]
	}).(LogDebugSettingsOutput)
}

type LogDebugSettingsMapOutput struct{ *pulumi.OutputState }

func (LogDebugSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogDebugSettings)(nil)).Elem()
}

func (o LogDebugSettingsMapOutput) ToLogDebugSettingsMapOutput() LogDebugSettingsMapOutput {
	return o
}

func (o LogDebugSettingsMapOutput) ToLogDebugSettingsMapOutputWithContext(ctx context.Context) LogDebugSettingsMapOutput {
	return o
}

func (o LogDebugSettingsMapOutput) MapIndex(k pulumi.StringInput) LogDebugSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogDebugSettings {
		return vs[0].(map[string]*LogDebugSettings)[vs[1].(string)]
	}).(LogDebugSettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogDebugSettingsInput)(nil)).Elem(), &LogDebugSettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogDebugSettingsArrayInput)(nil)).Elem(), LogDebugSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogDebugSettingsMapInput)(nil)).Elem(), LogDebugSettingsMap{})
	pulumi.RegisterOutputType(LogDebugSettingsOutput{})
	pulumi.RegisterOutputType(LogDebugSettingsArrayOutput{})
	pulumi.RegisterOutputType(LogDebugSettingsMapOutput{})
}
