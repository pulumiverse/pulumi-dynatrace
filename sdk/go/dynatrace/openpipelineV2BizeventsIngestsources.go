// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OpenpipelineV2BizeventsIngestsources struct {
	pulumi.CustomResourceState

	// Default Bucket
	DefaultBucket pulumi.StringPtrOutput `pulumi:"defaultBucket"`
	// Endpoint display name
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Endpoint segment
	PathSegment pulumi.StringOutput `pulumi:"pathSegment"`
	// Processing stage
	Processing OpenpipelineV2BizeventsIngestsourcesProcessingOutput `pulumi:"processing"`
	// Static routing of endpoint
	StaticRouting OpenpipelineV2BizeventsIngestsourcesStaticRoutingPtrOutput `pulumi:"staticRouting"`
}

// NewOpenpipelineV2BizeventsIngestsources registers a new resource with the given unique name, arguments, and options.
func NewOpenpipelineV2BizeventsIngestsources(ctx *pulumi.Context,
	name string, args *OpenpipelineV2BizeventsIngestsourcesArgs, opts ...pulumi.ResourceOption) (*OpenpipelineV2BizeventsIngestsources, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.PathSegment == nil {
		return nil, errors.New("invalid value for required argument 'PathSegment'")
	}
	if args.Processing == nil {
		return nil, errors.New("invalid value for required argument 'Processing'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenpipelineV2BizeventsIngestsources
	err := ctx.RegisterResource("dynatrace:index/openpipelineV2BizeventsIngestsources:OpenpipelineV2BizeventsIngestsources", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenpipelineV2BizeventsIngestsources gets an existing OpenpipelineV2BizeventsIngestsources resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenpipelineV2BizeventsIngestsources(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenpipelineV2BizeventsIngestsourcesState, opts ...pulumi.ResourceOption) (*OpenpipelineV2BizeventsIngestsources, error) {
	var resource OpenpipelineV2BizeventsIngestsources
	err := ctx.ReadResource("dynatrace:index/openpipelineV2BizeventsIngestsources:OpenpipelineV2BizeventsIngestsources", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenpipelineV2BizeventsIngestsources resources.
type openpipelineV2BizeventsIngestsourcesState struct {
	// Default Bucket
	DefaultBucket *string `pulumi:"defaultBucket"`
	// Endpoint display name
	DisplayName *string `pulumi:"displayName"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// Endpoint segment
	PathSegment *string `pulumi:"pathSegment"`
	// Processing stage
	Processing *OpenpipelineV2BizeventsIngestsourcesProcessing `pulumi:"processing"`
	// Static routing of endpoint
	StaticRouting *OpenpipelineV2BizeventsIngestsourcesStaticRouting `pulumi:"staticRouting"`
}

type OpenpipelineV2BizeventsIngestsourcesState struct {
	// Default Bucket
	DefaultBucket pulumi.StringPtrInput
	// Endpoint display name
	DisplayName pulumi.StringPtrInput
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// Endpoint segment
	PathSegment pulumi.StringPtrInput
	// Processing stage
	Processing OpenpipelineV2BizeventsIngestsourcesProcessingPtrInput
	// Static routing of endpoint
	StaticRouting OpenpipelineV2BizeventsIngestsourcesStaticRoutingPtrInput
}

func (OpenpipelineV2BizeventsIngestsourcesState) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2BizeventsIngestsourcesState)(nil)).Elem()
}

type openpipelineV2BizeventsIngestsourcesArgs struct {
	// Default Bucket
	DefaultBucket *string `pulumi:"defaultBucket"`
	// Endpoint display name
	DisplayName string `pulumi:"displayName"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// Endpoint segment
	PathSegment string `pulumi:"pathSegment"`
	// Processing stage
	Processing OpenpipelineV2BizeventsIngestsourcesProcessing `pulumi:"processing"`
	// Static routing of endpoint
	StaticRouting *OpenpipelineV2BizeventsIngestsourcesStaticRouting `pulumi:"staticRouting"`
}

// The set of arguments for constructing a OpenpipelineV2BizeventsIngestsources resource.
type OpenpipelineV2BizeventsIngestsourcesArgs struct {
	// Default Bucket
	DefaultBucket pulumi.StringPtrInput
	// Endpoint display name
	DisplayName pulumi.StringInput
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// Endpoint segment
	PathSegment pulumi.StringInput
	// Processing stage
	Processing OpenpipelineV2BizeventsIngestsourcesProcessingInput
	// Static routing of endpoint
	StaticRouting OpenpipelineV2BizeventsIngestsourcesStaticRoutingPtrInput
}

func (OpenpipelineV2BizeventsIngestsourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2BizeventsIngestsourcesArgs)(nil)).Elem()
}

type OpenpipelineV2BizeventsIngestsourcesInput interface {
	pulumi.Input

	ToOpenpipelineV2BizeventsIngestsourcesOutput() OpenpipelineV2BizeventsIngestsourcesOutput
	ToOpenpipelineV2BizeventsIngestsourcesOutputWithContext(ctx context.Context) OpenpipelineV2BizeventsIngestsourcesOutput
}

func (*OpenpipelineV2BizeventsIngestsources) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2BizeventsIngestsources)(nil)).Elem()
}

func (i *OpenpipelineV2BizeventsIngestsources) ToOpenpipelineV2BizeventsIngestsourcesOutput() OpenpipelineV2BizeventsIngestsourcesOutput {
	return i.ToOpenpipelineV2BizeventsIngestsourcesOutputWithContext(context.Background())
}

func (i *OpenpipelineV2BizeventsIngestsources) ToOpenpipelineV2BizeventsIngestsourcesOutputWithContext(ctx context.Context) OpenpipelineV2BizeventsIngestsourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2BizeventsIngestsourcesOutput)
}

// OpenpipelineV2BizeventsIngestsourcesArrayInput is an input type that accepts OpenpipelineV2BizeventsIngestsourcesArray and OpenpipelineV2BizeventsIngestsourcesArrayOutput values.
// You can construct a concrete instance of `OpenpipelineV2BizeventsIngestsourcesArrayInput` via:
//
//	OpenpipelineV2BizeventsIngestsourcesArray{ OpenpipelineV2BizeventsIngestsourcesArgs{...} }
type OpenpipelineV2BizeventsIngestsourcesArrayInput interface {
	pulumi.Input

	ToOpenpipelineV2BizeventsIngestsourcesArrayOutput() OpenpipelineV2BizeventsIngestsourcesArrayOutput
	ToOpenpipelineV2BizeventsIngestsourcesArrayOutputWithContext(context.Context) OpenpipelineV2BizeventsIngestsourcesArrayOutput
}

type OpenpipelineV2BizeventsIngestsourcesArray []OpenpipelineV2BizeventsIngestsourcesInput

func (OpenpipelineV2BizeventsIngestsourcesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2BizeventsIngestsources)(nil)).Elem()
}

func (i OpenpipelineV2BizeventsIngestsourcesArray) ToOpenpipelineV2BizeventsIngestsourcesArrayOutput() OpenpipelineV2BizeventsIngestsourcesArrayOutput {
	return i.ToOpenpipelineV2BizeventsIngestsourcesArrayOutputWithContext(context.Background())
}

func (i OpenpipelineV2BizeventsIngestsourcesArray) ToOpenpipelineV2BizeventsIngestsourcesArrayOutputWithContext(ctx context.Context) OpenpipelineV2BizeventsIngestsourcesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2BizeventsIngestsourcesArrayOutput)
}

// OpenpipelineV2BizeventsIngestsourcesMapInput is an input type that accepts OpenpipelineV2BizeventsIngestsourcesMap and OpenpipelineV2BizeventsIngestsourcesMapOutput values.
// You can construct a concrete instance of `OpenpipelineV2BizeventsIngestsourcesMapInput` via:
//
//	OpenpipelineV2BizeventsIngestsourcesMap{ "key": OpenpipelineV2BizeventsIngestsourcesArgs{...} }
type OpenpipelineV2BizeventsIngestsourcesMapInput interface {
	pulumi.Input

	ToOpenpipelineV2BizeventsIngestsourcesMapOutput() OpenpipelineV2BizeventsIngestsourcesMapOutput
	ToOpenpipelineV2BizeventsIngestsourcesMapOutputWithContext(context.Context) OpenpipelineV2BizeventsIngestsourcesMapOutput
}

type OpenpipelineV2BizeventsIngestsourcesMap map[string]OpenpipelineV2BizeventsIngestsourcesInput

func (OpenpipelineV2BizeventsIngestsourcesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2BizeventsIngestsources)(nil)).Elem()
}

func (i OpenpipelineV2BizeventsIngestsourcesMap) ToOpenpipelineV2BizeventsIngestsourcesMapOutput() OpenpipelineV2BizeventsIngestsourcesMapOutput {
	return i.ToOpenpipelineV2BizeventsIngestsourcesMapOutputWithContext(context.Background())
}

func (i OpenpipelineV2BizeventsIngestsourcesMap) ToOpenpipelineV2BizeventsIngestsourcesMapOutputWithContext(ctx context.Context) OpenpipelineV2BizeventsIngestsourcesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2BizeventsIngestsourcesMapOutput)
}

type OpenpipelineV2BizeventsIngestsourcesOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2BizeventsIngestsourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2BizeventsIngestsources)(nil)).Elem()
}

func (o OpenpipelineV2BizeventsIngestsourcesOutput) ToOpenpipelineV2BizeventsIngestsourcesOutput() OpenpipelineV2BizeventsIngestsourcesOutput {
	return o
}

func (o OpenpipelineV2BizeventsIngestsourcesOutput) ToOpenpipelineV2BizeventsIngestsourcesOutputWithContext(ctx context.Context) OpenpipelineV2BizeventsIngestsourcesOutput {
	return o
}

// Default Bucket
func (o OpenpipelineV2BizeventsIngestsourcesOutput) DefaultBucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenpipelineV2BizeventsIngestsources) pulumi.StringPtrOutput { return v.DefaultBucket }).(pulumi.StringPtrOutput)
}

// Endpoint display name
func (o OpenpipelineV2BizeventsIngestsourcesOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenpipelineV2BizeventsIngestsources) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// This setting is enabled (`true`) or disabled (`false`)
func (o OpenpipelineV2BizeventsIngestsourcesOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *OpenpipelineV2BizeventsIngestsources) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Endpoint segment
func (o OpenpipelineV2BizeventsIngestsourcesOutput) PathSegment() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenpipelineV2BizeventsIngestsources) pulumi.StringOutput { return v.PathSegment }).(pulumi.StringOutput)
}

// Processing stage
func (o OpenpipelineV2BizeventsIngestsourcesOutput) Processing() OpenpipelineV2BizeventsIngestsourcesProcessingOutput {
	return o.ApplyT(func(v *OpenpipelineV2BizeventsIngestsources) OpenpipelineV2BizeventsIngestsourcesProcessingOutput {
		return v.Processing
	}).(OpenpipelineV2BizeventsIngestsourcesProcessingOutput)
}

// Static routing of endpoint
func (o OpenpipelineV2BizeventsIngestsourcesOutput) StaticRouting() OpenpipelineV2BizeventsIngestsourcesStaticRoutingPtrOutput {
	return o.ApplyT(func(v *OpenpipelineV2BizeventsIngestsources) OpenpipelineV2BizeventsIngestsourcesStaticRoutingPtrOutput {
		return v.StaticRouting
	}).(OpenpipelineV2BizeventsIngestsourcesStaticRoutingPtrOutput)
}

type OpenpipelineV2BizeventsIngestsourcesArrayOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2BizeventsIngestsourcesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2BizeventsIngestsources)(nil)).Elem()
}

func (o OpenpipelineV2BizeventsIngestsourcesArrayOutput) ToOpenpipelineV2BizeventsIngestsourcesArrayOutput() OpenpipelineV2BizeventsIngestsourcesArrayOutput {
	return o
}

func (o OpenpipelineV2BizeventsIngestsourcesArrayOutput) ToOpenpipelineV2BizeventsIngestsourcesArrayOutputWithContext(ctx context.Context) OpenpipelineV2BizeventsIngestsourcesArrayOutput {
	return o
}

func (o OpenpipelineV2BizeventsIngestsourcesArrayOutput) Index(i pulumi.IntInput) OpenpipelineV2BizeventsIngestsourcesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenpipelineV2BizeventsIngestsources {
		return vs[0].([]*OpenpipelineV2BizeventsIngestsources)[vs[1].(int)]
	}).(OpenpipelineV2BizeventsIngestsourcesOutput)
}

type OpenpipelineV2BizeventsIngestsourcesMapOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2BizeventsIngestsourcesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2BizeventsIngestsources)(nil)).Elem()
}

func (o OpenpipelineV2BizeventsIngestsourcesMapOutput) ToOpenpipelineV2BizeventsIngestsourcesMapOutput() OpenpipelineV2BizeventsIngestsourcesMapOutput {
	return o
}

func (o OpenpipelineV2BizeventsIngestsourcesMapOutput) ToOpenpipelineV2BizeventsIngestsourcesMapOutputWithContext(ctx context.Context) OpenpipelineV2BizeventsIngestsourcesMapOutput {
	return o
}

func (o OpenpipelineV2BizeventsIngestsourcesMapOutput) MapIndex(k pulumi.StringInput) OpenpipelineV2BizeventsIngestsourcesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenpipelineV2BizeventsIngestsources {
		return vs[0].(map[string]*OpenpipelineV2BizeventsIngestsources)[vs[1].(string)]
	}).(OpenpipelineV2BizeventsIngestsourcesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2BizeventsIngestsourcesInput)(nil)).Elem(), &OpenpipelineV2BizeventsIngestsources{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2BizeventsIngestsourcesArrayInput)(nil)).Elem(), OpenpipelineV2BizeventsIngestsourcesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2BizeventsIngestsourcesMapInput)(nil)).Elem(), OpenpipelineV2BizeventsIngestsourcesMap{})
	pulumi.RegisterOutputType(OpenpipelineV2BizeventsIngestsourcesOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2BizeventsIngestsourcesArrayOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2BizeventsIngestsourcesMapOutput{})
}
