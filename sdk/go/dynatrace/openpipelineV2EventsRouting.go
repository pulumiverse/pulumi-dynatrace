// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OpenpipelineV2EventsRouting struct {
	pulumi.CustomResourceState

	// Routing for pipelines
	RoutingEntries OpenpipelineV2EventsRoutingRoutingEntriesPtrOutput `pulumi:"routingEntries"`
}

// NewOpenpipelineV2EventsRouting registers a new resource with the given unique name, arguments, and options.
func NewOpenpipelineV2EventsRouting(ctx *pulumi.Context,
	name string, args *OpenpipelineV2EventsRoutingArgs, opts ...pulumi.ResourceOption) (*OpenpipelineV2EventsRouting, error) {
	if args == nil {
		args = &OpenpipelineV2EventsRoutingArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenpipelineV2EventsRouting
	err := ctx.RegisterResource("dynatrace:index/openpipelineV2EventsRouting:OpenpipelineV2EventsRouting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenpipelineV2EventsRouting gets an existing OpenpipelineV2EventsRouting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenpipelineV2EventsRouting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenpipelineV2EventsRoutingState, opts ...pulumi.ResourceOption) (*OpenpipelineV2EventsRouting, error) {
	var resource OpenpipelineV2EventsRouting
	err := ctx.ReadResource("dynatrace:index/openpipelineV2EventsRouting:OpenpipelineV2EventsRouting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenpipelineV2EventsRouting resources.
type openpipelineV2EventsRoutingState struct {
	// Routing for pipelines
	RoutingEntries *OpenpipelineV2EventsRoutingRoutingEntries `pulumi:"routingEntries"`
}

type OpenpipelineV2EventsRoutingState struct {
	// Routing for pipelines
	RoutingEntries OpenpipelineV2EventsRoutingRoutingEntriesPtrInput
}

func (OpenpipelineV2EventsRoutingState) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2EventsRoutingState)(nil)).Elem()
}

type openpipelineV2EventsRoutingArgs struct {
	// Routing for pipelines
	RoutingEntries *OpenpipelineV2EventsRoutingRoutingEntries `pulumi:"routingEntries"`
}

// The set of arguments for constructing a OpenpipelineV2EventsRouting resource.
type OpenpipelineV2EventsRoutingArgs struct {
	// Routing for pipelines
	RoutingEntries OpenpipelineV2EventsRoutingRoutingEntriesPtrInput
}

func (OpenpipelineV2EventsRoutingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2EventsRoutingArgs)(nil)).Elem()
}

type OpenpipelineV2EventsRoutingInput interface {
	pulumi.Input

	ToOpenpipelineV2EventsRoutingOutput() OpenpipelineV2EventsRoutingOutput
	ToOpenpipelineV2EventsRoutingOutputWithContext(ctx context.Context) OpenpipelineV2EventsRoutingOutput
}

func (*OpenpipelineV2EventsRouting) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2EventsRouting)(nil)).Elem()
}

func (i *OpenpipelineV2EventsRouting) ToOpenpipelineV2EventsRoutingOutput() OpenpipelineV2EventsRoutingOutput {
	return i.ToOpenpipelineV2EventsRoutingOutputWithContext(context.Background())
}

func (i *OpenpipelineV2EventsRouting) ToOpenpipelineV2EventsRoutingOutputWithContext(ctx context.Context) OpenpipelineV2EventsRoutingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2EventsRoutingOutput)
}

// OpenpipelineV2EventsRoutingArrayInput is an input type that accepts OpenpipelineV2EventsRoutingArray and OpenpipelineV2EventsRoutingArrayOutput values.
// You can construct a concrete instance of `OpenpipelineV2EventsRoutingArrayInput` via:
//
//	OpenpipelineV2EventsRoutingArray{ OpenpipelineV2EventsRoutingArgs{...} }
type OpenpipelineV2EventsRoutingArrayInput interface {
	pulumi.Input

	ToOpenpipelineV2EventsRoutingArrayOutput() OpenpipelineV2EventsRoutingArrayOutput
	ToOpenpipelineV2EventsRoutingArrayOutputWithContext(context.Context) OpenpipelineV2EventsRoutingArrayOutput
}

type OpenpipelineV2EventsRoutingArray []OpenpipelineV2EventsRoutingInput

func (OpenpipelineV2EventsRoutingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2EventsRouting)(nil)).Elem()
}

func (i OpenpipelineV2EventsRoutingArray) ToOpenpipelineV2EventsRoutingArrayOutput() OpenpipelineV2EventsRoutingArrayOutput {
	return i.ToOpenpipelineV2EventsRoutingArrayOutputWithContext(context.Background())
}

func (i OpenpipelineV2EventsRoutingArray) ToOpenpipelineV2EventsRoutingArrayOutputWithContext(ctx context.Context) OpenpipelineV2EventsRoutingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2EventsRoutingArrayOutput)
}

// OpenpipelineV2EventsRoutingMapInput is an input type that accepts OpenpipelineV2EventsRoutingMap and OpenpipelineV2EventsRoutingMapOutput values.
// You can construct a concrete instance of `OpenpipelineV2EventsRoutingMapInput` via:
//
//	OpenpipelineV2EventsRoutingMap{ "key": OpenpipelineV2EventsRoutingArgs{...} }
type OpenpipelineV2EventsRoutingMapInput interface {
	pulumi.Input

	ToOpenpipelineV2EventsRoutingMapOutput() OpenpipelineV2EventsRoutingMapOutput
	ToOpenpipelineV2EventsRoutingMapOutputWithContext(context.Context) OpenpipelineV2EventsRoutingMapOutput
}

type OpenpipelineV2EventsRoutingMap map[string]OpenpipelineV2EventsRoutingInput

func (OpenpipelineV2EventsRoutingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2EventsRouting)(nil)).Elem()
}

func (i OpenpipelineV2EventsRoutingMap) ToOpenpipelineV2EventsRoutingMapOutput() OpenpipelineV2EventsRoutingMapOutput {
	return i.ToOpenpipelineV2EventsRoutingMapOutputWithContext(context.Background())
}

func (i OpenpipelineV2EventsRoutingMap) ToOpenpipelineV2EventsRoutingMapOutputWithContext(ctx context.Context) OpenpipelineV2EventsRoutingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2EventsRoutingMapOutput)
}

type OpenpipelineV2EventsRoutingOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2EventsRoutingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2EventsRouting)(nil)).Elem()
}

func (o OpenpipelineV2EventsRoutingOutput) ToOpenpipelineV2EventsRoutingOutput() OpenpipelineV2EventsRoutingOutput {
	return o
}

func (o OpenpipelineV2EventsRoutingOutput) ToOpenpipelineV2EventsRoutingOutputWithContext(ctx context.Context) OpenpipelineV2EventsRoutingOutput {
	return o
}

// Routing for pipelines
func (o OpenpipelineV2EventsRoutingOutput) RoutingEntries() OpenpipelineV2EventsRoutingRoutingEntriesPtrOutput {
	return o.ApplyT(func(v *OpenpipelineV2EventsRouting) OpenpipelineV2EventsRoutingRoutingEntriesPtrOutput {
		return v.RoutingEntries
	}).(OpenpipelineV2EventsRoutingRoutingEntriesPtrOutput)
}

type OpenpipelineV2EventsRoutingArrayOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2EventsRoutingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2EventsRouting)(nil)).Elem()
}

func (o OpenpipelineV2EventsRoutingArrayOutput) ToOpenpipelineV2EventsRoutingArrayOutput() OpenpipelineV2EventsRoutingArrayOutput {
	return o
}

func (o OpenpipelineV2EventsRoutingArrayOutput) ToOpenpipelineV2EventsRoutingArrayOutputWithContext(ctx context.Context) OpenpipelineV2EventsRoutingArrayOutput {
	return o
}

func (o OpenpipelineV2EventsRoutingArrayOutput) Index(i pulumi.IntInput) OpenpipelineV2EventsRoutingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenpipelineV2EventsRouting {
		return vs[0].([]*OpenpipelineV2EventsRouting)[vs[1].(int)]
	}).(OpenpipelineV2EventsRoutingOutput)
}

type OpenpipelineV2EventsRoutingMapOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2EventsRoutingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2EventsRouting)(nil)).Elem()
}

func (o OpenpipelineV2EventsRoutingMapOutput) ToOpenpipelineV2EventsRoutingMapOutput() OpenpipelineV2EventsRoutingMapOutput {
	return o
}

func (o OpenpipelineV2EventsRoutingMapOutput) ToOpenpipelineV2EventsRoutingMapOutputWithContext(ctx context.Context) OpenpipelineV2EventsRoutingMapOutput {
	return o
}

func (o OpenpipelineV2EventsRoutingMapOutput) MapIndex(k pulumi.StringInput) OpenpipelineV2EventsRoutingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenpipelineV2EventsRouting {
		return vs[0].(map[string]*OpenpipelineV2EventsRouting)[vs[1].(string)]
	}).(OpenpipelineV2EventsRoutingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2EventsRoutingInput)(nil)).Elem(), &OpenpipelineV2EventsRouting{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2EventsRoutingArrayInput)(nil)).Elem(), OpenpipelineV2EventsRoutingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2EventsRoutingMapInput)(nil)).Elem(), OpenpipelineV2EventsRoutingMap{})
	pulumi.RegisterOutputType(OpenpipelineV2EventsRoutingOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2EventsRoutingArrayOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2EventsRoutingMapOutput{})
}
