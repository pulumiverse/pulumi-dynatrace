// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type HistogramMetrics struct {
	pulumi.CustomResourceState

	// When enabled, you can ingest the `le` dimension, representing explicit histogram buckets.\
	// Enable this if you are using OpenTelemetry histograms or Prometheus histogram metrics.\
	// When disabled, only your histograms' sum and count metrics will be ingested.
	EnableHistogramBucketIngest pulumi.BoolOutput `pulumi:"enableHistogramBucketIngest"`
}

// NewHistogramMetrics registers a new resource with the given unique name, arguments, and options.
func NewHistogramMetrics(ctx *pulumi.Context,
	name string, args *HistogramMetricsArgs, opts ...pulumi.ResourceOption) (*HistogramMetrics, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnableHistogramBucketIngest == nil {
		return nil, errors.New("invalid value for required argument 'EnableHistogramBucketIngest'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HistogramMetrics
	err := ctx.RegisterResource("dynatrace:index/histogramMetrics:HistogramMetrics", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHistogramMetrics gets an existing HistogramMetrics resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHistogramMetrics(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HistogramMetricsState, opts ...pulumi.ResourceOption) (*HistogramMetrics, error) {
	var resource HistogramMetrics
	err := ctx.ReadResource("dynatrace:index/histogramMetrics:HistogramMetrics", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HistogramMetrics resources.
type histogramMetricsState struct {
	// When enabled, you can ingest the `le` dimension, representing explicit histogram buckets.\
	// Enable this if you are using OpenTelemetry histograms or Prometheus histogram metrics.\
	// When disabled, only your histograms' sum and count metrics will be ingested.
	EnableHistogramBucketIngest *bool `pulumi:"enableHistogramBucketIngest"`
}

type HistogramMetricsState struct {
	// When enabled, you can ingest the `le` dimension, representing explicit histogram buckets.\
	// Enable this if you are using OpenTelemetry histograms or Prometheus histogram metrics.\
	// When disabled, only your histograms' sum and count metrics will be ingested.
	EnableHistogramBucketIngest pulumi.BoolPtrInput
}

func (HistogramMetricsState) ElementType() reflect.Type {
	return reflect.TypeOf((*histogramMetricsState)(nil)).Elem()
}

type histogramMetricsArgs struct {
	// When enabled, you can ingest the `le` dimension, representing explicit histogram buckets.\
	// Enable this if you are using OpenTelemetry histograms or Prometheus histogram metrics.\
	// When disabled, only your histograms' sum and count metrics will be ingested.
	EnableHistogramBucketIngest bool `pulumi:"enableHistogramBucketIngest"`
}

// The set of arguments for constructing a HistogramMetrics resource.
type HistogramMetricsArgs struct {
	// When enabled, you can ingest the `le` dimension, representing explicit histogram buckets.\
	// Enable this if you are using OpenTelemetry histograms or Prometheus histogram metrics.\
	// When disabled, only your histograms' sum and count metrics will be ingested.
	EnableHistogramBucketIngest pulumi.BoolInput
}

func (HistogramMetricsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*histogramMetricsArgs)(nil)).Elem()
}

type HistogramMetricsInput interface {
	pulumi.Input

	ToHistogramMetricsOutput() HistogramMetricsOutput
	ToHistogramMetricsOutputWithContext(ctx context.Context) HistogramMetricsOutput
}

func (*HistogramMetrics) ElementType() reflect.Type {
	return reflect.TypeOf((**HistogramMetrics)(nil)).Elem()
}

func (i *HistogramMetrics) ToHistogramMetricsOutput() HistogramMetricsOutput {
	return i.ToHistogramMetricsOutputWithContext(context.Background())
}

func (i *HistogramMetrics) ToHistogramMetricsOutputWithContext(ctx context.Context) HistogramMetricsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HistogramMetricsOutput)
}

// HistogramMetricsArrayInput is an input type that accepts HistogramMetricsArray and HistogramMetricsArrayOutput values.
// You can construct a concrete instance of `HistogramMetricsArrayInput` via:
//
//	HistogramMetricsArray{ HistogramMetricsArgs{...} }
type HistogramMetricsArrayInput interface {
	pulumi.Input

	ToHistogramMetricsArrayOutput() HistogramMetricsArrayOutput
	ToHistogramMetricsArrayOutputWithContext(context.Context) HistogramMetricsArrayOutput
}

type HistogramMetricsArray []HistogramMetricsInput

func (HistogramMetricsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HistogramMetrics)(nil)).Elem()
}

func (i HistogramMetricsArray) ToHistogramMetricsArrayOutput() HistogramMetricsArrayOutput {
	return i.ToHistogramMetricsArrayOutputWithContext(context.Background())
}

func (i HistogramMetricsArray) ToHistogramMetricsArrayOutputWithContext(ctx context.Context) HistogramMetricsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HistogramMetricsArrayOutput)
}

// HistogramMetricsMapInput is an input type that accepts HistogramMetricsMap and HistogramMetricsMapOutput values.
// You can construct a concrete instance of `HistogramMetricsMapInput` via:
//
//	HistogramMetricsMap{ "key": HistogramMetricsArgs{...} }
type HistogramMetricsMapInput interface {
	pulumi.Input

	ToHistogramMetricsMapOutput() HistogramMetricsMapOutput
	ToHistogramMetricsMapOutputWithContext(context.Context) HistogramMetricsMapOutput
}

type HistogramMetricsMap map[string]HistogramMetricsInput

func (HistogramMetricsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HistogramMetrics)(nil)).Elem()
}

func (i HistogramMetricsMap) ToHistogramMetricsMapOutput() HistogramMetricsMapOutput {
	return i.ToHistogramMetricsMapOutputWithContext(context.Background())
}

func (i HistogramMetricsMap) ToHistogramMetricsMapOutputWithContext(ctx context.Context) HistogramMetricsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HistogramMetricsMapOutput)
}

type HistogramMetricsOutput struct{ *pulumi.OutputState }

func (HistogramMetricsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HistogramMetrics)(nil)).Elem()
}

func (o HistogramMetricsOutput) ToHistogramMetricsOutput() HistogramMetricsOutput {
	return o
}

func (o HistogramMetricsOutput) ToHistogramMetricsOutputWithContext(ctx context.Context) HistogramMetricsOutput {
	return o
}

// When enabled, you can ingest the `le` dimension, representing explicit histogram buckets.\
// Enable this if you are using OpenTelemetry histograms or Prometheus histogram metrics.\
// When disabled, only your histograms' sum and count metrics will be ingested.
func (o HistogramMetricsOutput) EnableHistogramBucketIngest() pulumi.BoolOutput {
	return o.ApplyT(func(v *HistogramMetrics) pulumi.BoolOutput { return v.EnableHistogramBucketIngest }).(pulumi.BoolOutput)
}

type HistogramMetricsArrayOutput struct{ *pulumi.OutputState }

func (HistogramMetricsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HistogramMetrics)(nil)).Elem()
}

func (o HistogramMetricsArrayOutput) ToHistogramMetricsArrayOutput() HistogramMetricsArrayOutput {
	return o
}

func (o HistogramMetricsArrayOutput) ToHistogramMetricsArrayOutputWithContext(ctx context.Context) HistogramMetricsArrayOutput {
	return o
}

func (o HistogramMetricsArrayOutput) Index(i pulumi.IntInput) HistogramMetricsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HistogramMetrics {
		return vs[0].([]*HistogramMetrics)[vs[1].(int)]
	}).(HistogramMetricsOutput)
}

type HistogramMetricsMapOutput struct{ *pulumi.OutputState }

func (HistogramMetricsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HistogramMetrics)(nil)).Elem()
}

func (o HistogramMetricsMapOutput) ToHistogramMetricsMapOutput() HistogramMetricsMapOutput {
	return o
}

func (o HistogramMetricsMapOutput) ToHistogramMetricsMapOutputWithContext(ctx context.Context) HistogramMetricsMapOutput {
	return o
}

func (o HistogramMetricsMapOutput) MapIndex(k pulumi.StringInput) HistogramMetricsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HistogramMetrics {
		return vs[0].(map[string]*HistogramMetrics)[vs[1].(string)]
	}).(HistogramMetricsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HistogramMetricsInput)(nil)).Elem(), &HistogramMetrics{})
	pulumi.RegisterInputType(reflect.TypeOf((*HistogramMetricsArrayInput)(nil)).Elem(), HistogramMetricsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HistogramMetricsMapInput)(nil)).Elem(), HistogramMetricsMap{})
	pulumi.RegisterOutputType(HistogramMetricsOutput{})
	pulumi.RegisterOutputType(HistogramMetricsArrayOutput{})
	pulumi.RegisterOutputType(HistogramMetricsMapOutput{})
}
