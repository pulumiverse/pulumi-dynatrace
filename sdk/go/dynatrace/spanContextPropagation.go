// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type SpanContextPropagation struct {
	pulumi.CustomResourceState

	// Whether to create an entry point or not
	Action pulumi.StringOutput `pulumi:"action"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringOutput `pulumi:"insertAfter"`
	// Matching strategies for the Span
	Matches SpanContextPropagationMatchesOutput `pulumi:"matches"`
	// The name of the rule
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewSpanContextPropagation registers a new resource with the given unique name, arguments, and options.
func NewSpanContextPropagation(ctx *pulumi.Context,
	name string, args *SpanContextPropagationArgs, opts ...pulumi.ResourceOption) (*SpanContextPropagation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.Matches == nil {
		return nil, errors.New("invalid value for required argument 'Matches'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SpanContextPropagation
	err := ctx.RegisterResource("dynatrace:index/spanContextPropagation:SpanContextPropagation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSpanContextPropagation gets an existing SpanContextPropagation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSpanContextPropagation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SpanContextPropagationState, opts ...pulumi.ResourceOption) (*SpanContextPropagation, error) {
	var resource SpanContextPropagation
	err := ctx.ReadResource("dynatrace:index/spanContextPropagation:SpanContextPropagation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SpanContextPropagation resources.
type spanContextPropagationState struct {
	// Whether to create an entry point or not
	Action *string `pulumi:"action"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `pulumi:"insertAfter"`
	// Matching strategies for the Span
	Matches *SpanContextPropagationMatches `pulumi:"matches"`
	// The name of the rule
	Name *string `pulumi:"name"`
}

type SpanContextPropagationState struct {
	// Whether to create an entry point or not
	Action pulumi.StringPtrInput
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringPtrInput
	// Matching strategies for the Span
	Matches SpanContextPropagationMatchesPtrInput
	// The name of the rule
	Name pulumi.StringPtrInput
}

func (SpanContextPropagationState) ElementType() reflect.Type {
	return reflect.TypeOf((*spanContextPropagationState)(nil)).Elem()
}

type spanContextPropagationArgs struct {
	// Whether to create an entry point or not
	Action string `pulumi:"action"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `pulumi:"insertAfter"`
	// Matching strategies for the Span
	Matches SpanContextPropagationMatches `pulumi:"matches"`
	// The name of the rule
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a SpanContextPropagation resource.
type SpanContextPropagationArgs struct {
	// Whether to create an entry point or not
	Action pulumi.StringInput
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringPtrInput
	// Matching strategies for the Span
	Matches SpanContextPropagationMatchesInput
	// The name of the rule
	Name pulumi.StringPtrInput
}

func (SpanContextPropagationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*spanContextPropagationArgs)(nil)).Elem()
}

type SpanContextPropagationInput interface {
	pulumi.Input

	ToSpanContextPropagationOutput() SpanContextPropagationOutput
	ToSpanContextPropagationOutputWithContext(ctx context.Context) SpanContextPropagationOutput
}

func (*SpanContextPropagation) ElementType() reflect.Type {
	return reflect.TypeOf((**SpanContextPropagation)(nil)).Elem()
}

func (i *SpanContextPropagation) ToSpanContextPropagationOutput() SpanContextPropagationOutput {
	return i.ToSpanContextPropagationOutputWithContext(context.Background())
}

func (i *SpanContextPropagation) ToSpanContextPropagationOutputWithContext(ctx context.Context) SpanContextPropagationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpanContextPropagationOutput)
}

// SpanContextPropagationArrayInput is an input type that accepts SpanContextPropagationArray and SpanContextPropagationArrayOutput values.
// You can construct a concrete instance of `SpanContextPropagationArrayInput` via:
//
//	SpanContextPropagationArray{ SpanContextPropagationArgs{...} }
type SpanContextPropagationArrayInput interface {
	pulumi.Input

	ToSpanContextPropagationArrayOutput() SpanContextPropagationArrayOutput
	ToSpanContextPropagationArrayOutputWithContext(context.Context) SpanContextPropagationArrayOutput
}

type SpanContextPropagationArray []SpanContextPropagationInput

func (SpanContextPropagationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpanContextPropagation)(nil)).Elem()
}

func (i SpanContextPropagationArray) ToSpanContextPropagationArrayOutput() SpanContextPropagationArrayOutput {
	return i.ToSpanContextPropagationArrayOutputWithContext(context.Background())
}

func (i SpanContextPropagationArray) ToSpanContextPropagationArrayOutputWithContext(ctx context.Context) SpanContextPropagationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpanContextPropagationArrayOutput)
}

// SpanContextPropagationMapInput is an input type that accepts SpanContextPropagationMap and SpanContextPropagationMapOutput values.
// You can construct a concrete instance of `SpanContextPropagationMapInput` via:
//
//	SpanContextPropagationMap{ "key": SpanContextPropagationArgs{...} }
type SpanContextPropagationMapInput interface {
	pulumi.Input

	ToSpanContextPropagationMapOutput() SpanContextPropagationMapOutput
	ToSpanContextPropagationMapOutputWithContext(context.Context) SpanContextPropagationMapOutput
}

type SpanContextPropagationMap map[string]SpanContextPropagationInput

func (SpanContextPropagationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpanContextPropagation)(nil)).Elem()
}

func (i SpanContextPropagationMap) ToSpanContextPropagationMapOutput() SpanContextPropagationMapOutput {
	return i.ToSpanContextPropagationMapOutputWithContext(context.Background())
}

func (i SpanContextPropagationMap) ToSpanContextPropagationMapOutputWithContext(ctx context.Context) SpanContextPropagationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpanContextPropagationMapOutput)
}

type SpanContextPropagationOutput struct{ *pulumi.OutputState }

func (SpanContextPropagationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpanContextPropagation)(nil)).Elem()
}

func (o SpanContextPropagationOutput) ToSpanContextPropagationOutput() SpanContextPropagationOutput {
	return o
}

func (o SpanContextPropagationOutput) ToSpanContextPropagationOutputWithContext(ctx context.Context) SpanContextPropagationOutput {
	return o
}

// Whether to create an entry point or not
func (o SpanContextPropagationOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *SpanContextPropagation) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
func (o SpanContextPropagationOutput) InsertAfter() pulumi.StringOutput {
	return o.ApplyT(func(v *SpanContextPropagation) pulumi.StringOutput { return v.InsertAfter }).(pulumi.StringOutput)
}

// Matching strategies for the Span
func (o SpanContextPropagationOutput) Matches() SpanContextPropagationMatchesOutput {
	return o.ApplyT(func(v *SpanContextPropagation) SpanContextPropagationMatchesOutput { return v.Matches }).(SpanContextPropagationMatchesOutput)
}

// The name of the rule
func (o SpanContextPropagationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SpanContextPropagation) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type SpanContextPropagationArrayOutput struct{ *pulumi.OutputState }

func (SpanContextPropagationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpanContextPropagation)(nil)).Elem()
}

func (o SpanContextPropagationArrayOutput) ToSpanContextPropagationArrayOutput() SpanContextPropagationArrayOutput {
	return o
}

func (o SpanContextPropagationArrayOutput) ToSpanContextPropagationArrayOutputWithContext(ctx context.Context) SpanContextPropagationArrayOutput {
	return o
}

func (o SpanContextPropagationArrayOutput) Index(i pulumi.IntInput) SpanContextPropagationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SpanContextPropagation {
		return vs[0].([]*SpanContextPropagation)[vs[1].(int)]
	}).(SpanContextPropagationOutput)
}

type SpanContextPropagationMapOutput struct{ *pulumi.OutputState }

func (SpanContextPropagationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpanContextPropagation)(nil)).Elem()
}

func (o SpanContextPropagationMapOutput) ToSpanContextPropagationMapOutput() SpanContextPropagationMapOutput {
	return o
}

func (o SpanContextPropagationMapOutput) ToSpanContextPropagationMapOutputWithContext(ctx context.Context) SpanContextPropagationMapOutput {
	return o
}

func (o SpanContextPropagationMapOutput) MapIndex(k pulumi.StringInput) SpanContextPropagationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SpanContextPropagation {
		return vs[0].(map[string]*SpanContextPropagation)[vs[1].(string)]
	}).(SpanContextPropagationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SpanContextPropagationInput)(nil)).Elem(), &SpanContextPropagation{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpanContextPropagationArrayInput)(nil)).Elem(), SpanContextPropagationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpanContextPropagationMapInput)(nil)).Elem(), SpanContextPropagationMap{})
	pulumi.RegisterOutputType(SpanContextPropagationOutput{})
	pulumi.RegisterOutputType(SpanContextPropagationArrayOutput{})
	pulumi.RegisterOutputType(SpanContextPropagationMapOutput{})
}
