// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OwnershipConfig struct {
	pulumi.CustomResourceState

	// Tags and metadata are key-value pairs. Define keys for tags and metadata that are considered for ownership. If a tag or any metadata starts with a key defined below, the value of the tag or metadata is considered a team identifier.
	OwnershipIdentifiers OwnershipConfigOwnershipIdentifiersOutput `pulumi:"ownershipIdentifiers"`
}

// NewOwnershipConfig registers a new resource with the given unique name, arguments, and options.
func NewOwnershipConfig(ctx *pulumi.Context,
	name string, args *OwnershipConfigArgs, opts ...pulumi.ResourceOption) (*OwnershipConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OwnershipIdentifiers == nil {
		return nil, errors.New("invalid value for required argument 'OwnershipIdentifiers'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OwnershipConfig
	err := ctx.RegisterResource("dynatrace:index/ownershipConfig:OwnershipConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOwnershipConfig gets an existing OwnershipConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOwnershipConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OwnershipConfigState, opts ...pulumi.ResourceOption) (*OwnershipConfig, error) {
	var resource OwnershipConfig
	err := ctx.ReadResource("dynatrace:index/ownershipConfig:OwnershipConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OwnershipConfig resources.
type ownershipConfigState struct {
	// Tags and metadata are key-value pairs. Define keys for tags and metadata that are considered for ownership. If a tag or any metadata starts with a key defined below, the value of the tag or metadata is considered a team identifier.
	OwnershipIdentifiers *OwnershipConfigOwnershipIdentifiers `pulumi:"ownershipIdentifiers"`
}

type OwnershipConfigState struct {
	// Tags and metadata are key-value pairs. Define keys for tags and metadata that are considered for ownership. If a tag or any metadata starts with a key defined below, the value of the tag or metadata is considered a team identifier.
	OwnershipIdentifiers OwnershipConfigOwnershipIdentifiersPtrInput
}

func (OwnershipConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*ownershipConfigState)(nil)).Elem()
}

type ownershipConfigArgs struct {
	// Tags and metadata are key-value pairs. Define keys for tags and metadata that are considered for ownership. If a tag or any metadata starts with a key defined below, the value of the tag or metadata is considered a team identifier.
	OwnershipIdentifiers OwnershipConfigOwnershipIdentifiers `pulumi:"ownershipIdentifiers"`
}

// The set of arguments for constructing a OwnershipConfig resource.
type OwnershipConfigArgs struct {
	// Tags and metadata are key-value pairs. Define keys for tags and metadata that are considered for ownership. If a tag or any metadata starts with a key defined below, the value of the tag or metadata is considered a team identifier.
	OwnershipIdentifiers OwnershipConfigOwnershipIdentifiersInput
}

func (OwnershipConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ownershipConfigArgs)(nil)).Elem()
}

type OwnershipConfigInput interface {
	pulumi.Input

	ToOwnershipConfigOutput() OwnershipConfigOutput
	ToOwnershipConfigOutputWithContext(ctx context.Context) OwnershipConfigOutput
}

func (*OwnershipConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**OwnershipConfig)(nil)).Elem()
}

func (i *OwnershipConfig) ToOwnershipConfigOutput() OwnershipConfigOutput {
	return i.ToOwnershipConfigOutputWithContext(context.Background())
}

func (i *OwnershipConfig) ToOwnershipConfigOutputWithContext(ctx context.Context) OwnershipConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OwnershipConfigOutput)
}

// OwnershipConfigArrayInput is an input type that accepts OwnershipConfigArray and OwnershipConfigArrayOutput values.
// You can construct a concrete instance of `OwnershipConfigArrayInput` via:
//
//	OwnershipConfigArray{ OwnershipConfigArgs{...} }
type OwnershipConfigArrayInput interface {
	pulumi.Input

	ToOwnershipConfigArrayOutput() OwnershipConfigArrayOutput
	ToOwnershipConfigArrayOutputWithContext(context.Context) OwnershipConfigArrayOutput
}

type OwnershipConfigArray []OwnershipConfigInput

func (OwnershipConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OwnershipConfig)(nil)).Elem()
}

func (i OwnershipConfigArray) ToOwnershipConfigArrayOutput() OwnershipConfigArrayOutput {
	return i.ToOwnershipConfigArrayOutputWithContext(context.Background())
}

func (i OwnershipConfigArray) ToOwnershipConfigArrayOutputWithContext(ctx context.Context) OwnershipConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OwnershipConfigArrayOutput)
}

// OwnershipConfigMapInput is an input type that accepts OwnershipConfigMap and OwnershipConfigMapOutput values.
// You can construct a concrete instance of `OwnershipConfigMapInput` via:
//
//	OwnershipConfigMap{ "key": OwnershipConfigArgs{...} }
type OwnershipConfigMapInput interface {
	pulumi.Input

	ToOwnershipConfigMapOutput() OwnershipConfigMapOutput
	ToOwnershipConfigMapOutputWithContext(context.Context) OwnershipConfigMapOutput
}

type OwnershipConfigMap map[string]OwnershipConfigInput

func (OwnershipConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OwnershipConfig)(nil)).Elem()
}

func (i OwnershipConfigMap) ToOwnershipConfigMapOutput() OwnershipConfigMapOutput {
	return i.ToOwnershipConfigMapOutputWithContext(context.Background())
}

func (i OwnershipConfigMap) ToOwnershipConfigMapOutputWithContext(ctx context.Context) OwnershipConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OwnershipConfigMapOutput)
}

type OwnershipConfigOutput struct{ *pulumi.OutputState }

func (OwnershipConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OwnershipConfig)(nil)).Elem()
}

func (o OwnershipConfigOutput) ToOwnershipConfigOutput() OwnershipConfigOutput {
	return o
}

func (o OwnershipConfigOutput) ToOwnershipConfigOutputWithContext(ctx context.Context) OwnershipConfigOutput {
	return o
}

// Tags and metadata are key-value pairs. Define keys for tags and metadata that are considered for ownership. If a tag or any metadata starts with a key defined below, the value of the tag or metadata is considered a team identifier.
func (o OwnershipConfigOutput) OwnershipIdentifiers() OwnershipConfigOwnershipIdentifiersOutput {
	return o.ApplyT(func(v *OwnershipConfig) OwnershipConfigOwnershipIdentifiersOutput { return v.OwnershipIdentifiers }).(OwnershipConfigOwnershipIdentifiersOutput)
}

type OwnershipConfigArrayOutput struct{ *pulumi.OutputState }

func (OwnershipConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OwnershipConfig)(nil)).Elem()
}

func (o OwnershipConfigArrayOutput) ToOwnershipConfigArrayOutput() OwnershipConfigArrayOutput {
	return o
}

func (o OwnershipConfigArrayOutput) ToOwnershipConfigArrayOutputWithContext(ctx context.Context) OwnershipConfigArrayOutput {
	return o
}

func (o OwnershipConfigArrayOutput) Index(i pulumi.IntInput) OwnershipConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OwnershipConfig {
		return vs[0].([]*OwnershipConfig)[vs[1].(int)]
	}).(OwnershipConfigOutput)
}

type OwnershipConfigMapOutput struct{ *pulumi.OutputState }

func (OwnershipConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OwnershipConfig)(nil)).Elem()
}

func (o OwnershipConfigMapOutput) ToOwnershipConfigMapOutput() OwnershipConfigMapOutput {
	return o
}

func (o OwnershipConfigMapOutput) ToOwnershipConfigMapOutputWithContext(ctx context.Context) OwnershipConfigMapOutput {
	return o
}

func (o OwnershipConfigMapOutput) MapIndex(k pulumi.StringInput) OwnershipConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OwnershipConfig {
		return vs[0].(map[string]*OwnershipConfig)[vs[1].(string)]
	}).(OwnershipConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OwnershipConfigInput)(nil)).Elem(), &OwnershipConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*OwnershipConfigArrayInput)(nil)).Elem(), OwnershipConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OwnershipConfigMapInput)(nil)).Elem(), OwnershipConfigMap{})
	pulumi.RegisterOutputType(OwnershipConfigOutput{})
	pulumi.RegisterOutputType(OwnershipConfigArrayOutput{})
	pulumi.RegisterOutputType(OwnershipConfigMapOutput{})
}
