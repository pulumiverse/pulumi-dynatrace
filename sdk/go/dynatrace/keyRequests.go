// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type KeyRequests struct {
	pulumi.CustomResourceState

	// The ids of the key requests
	KeyRequestIds pulumi.StringMapOutput `pulumi:"keyRequestIds"`
	// The names of the key requests
	Names pulumi.StringArrayOutput `pulumi:"names"`
	// ID of Dynatrace Service, eg. SERVICE-123ABC45678EFGH
	Service pulumi.StringOutput `pulumi:"service"`
}

// NewKeyRequests registers a new resource with the given unique name, arguments, and options.
func NewKeyRequests(ctx *pulumi.Context,
	name string, args *KeyRequestsArgs, opts ...pulumi.ResourceOption) (*KeyRequests, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Service == nil {
		return nil, errors.New("invalid value for required argument 'Service'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KeyRequests
	err := ctx.RegisterResource("dynatrace:index/keyRequests:KeyRequests", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeyRequests gets an existing KeyRequests resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeyRequests(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeyRequestsState, opts ...pulumi.ResourceOption) (*KeyRequests, error) {
	var resource KeyRequests
	err := ctx.ReadResource("dynatrace:index/keyRequests:KeyRequests", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KeyRequests resources.
type keyRequestsState struct {
	// The ids of the key requests
	KeyRequestIds map[string]string `pulumi:"keyRequestIds"`
	// The names of the key requests
	Names []string `pulumi:"names"`
	// ID of Dynatrace Service, eg. SERVICE-123ABC45678EFGH
	Service *string `pulumi:"service"`
}

type KeyRequestsState struct {
	// The ids of the key requests
	KeyRequestIds pulumi.StringMapInput
	// The names of the key requests
	Names pulumi.StringArrayInput
	// ID of Dynatrace Service, eg. SERVICE-123ABC45678EFGH
	Service pulumi.StringPtrInput
}

func (KeyRequestsState) ElementType() reflect.Type {
	return reflect.TypeOf((*keyRequestsState)(nil)).Elem()
}

type keyRequestsArgs struct {
	// The ids of the key requests
	KeyRequestIds map[string]string `pulumi:"keyRequestIds"`
	// The names of the key requests
	Names []string `pulumi:"names"`
	// ID of Dynatrace Service, eg. SERVICE-123ABC45678EFGH
	Service string `pulumi:"service"`
}

// The set of arguments for constructing a KeyRequests resource.
type KeyRequestsArgs struct {
	// The ids of the key requests
	KeyRequestIds pulumi.StringMapInput
	// The names of the key requests
	Names pulumi.StringArrayInput
	// ID of Dynatrace Service, eg. SERVICE-123ABC45678EFGH
	Service pulumi.StringInput
}

func (KeyRequestsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keyRequestsArgs)(nil)).Elem()
}

type KeyRequestsInput interface {
	pulumi.Input

	ToKeyRequestsOutput() KeyRequestsOutput
	ToKeyRequestsOutputWithContext(ctx context.Context) KeyRequestsOutput
}

func (*KeyRequests) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyRequests)(nil)).Elem()
}

func (i *KeyRequests) ToKeyRequestsOutput() KeyRequestsOutput {
	return i.ToKeyRequestsOutputWithContext(context.Background())
}

func (i *KeyRequests) ToKeyRequestsOutputWithContext(ctx context.Context) KeyRequestsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRequestsOutput)
}

// KeyRequestsArrayInput is an input type that accepts KeyRequestsArray and KeyRequestsArrayOutput values.
// You can construct a concrete instance of `KeyRequestsArrayInput` via:
//
//	KeyRequestsArray{ KeyRequestsArgs{...} }
type KeyRequestsArrayInput interface {
	pulumi.Input

	ToKeyRequestsArrayOutput() KeyRequestsArrayOutput
	ToKeyRequestsArrayOutputWithContext(context.Context) KeyRequestsArrayOutput
}

type KeyRequestsArray []KeyRequestsInput

func (KeyRequestsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KeyRequests)(nil)).Elem()
}

func (i KeyRequestsArray) ToKeyRequestsArrayOutput() KeyRequestsArrayOutput {
	return i.ToKeyRequestsArrayOutputWithContext(context.Background())
}

func (i KeyRequestsArray) ToKeyRequestsArrayOutputWithContext(ctx context.Context) KeyRequestsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRequestsArrayOutput)
}

// KeyRequestsMapInput is an input type that accepts KeyRequestsMap and KeyRequestsMapOutput values.
// You can construct a concrete instance of `KeyRequestsMapInput` via:
//
//	KeyRequestsMap{ "key": KeyRequestsArgs{...} }
type KeyRequestsMapInput interface {
	pulumi.Input

	ToKeyRequestsMapOutput() KeyRequestsMapOutput
	ToKeyRequestsMapOutputWithContext(context.Context) KeyRequestsMapOutput
}

type KeyRequestsMap map[string]KeyRequestsInput

func (KeyRequestsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KeyRequests)(nil)).Elem()
}

func (i KeyRequestsMap) ToKeyRequestsMapOutput() KeyRequestsMapOutput {
	return i.ToKeyRequestsMapOutputWithContext(context.Background())
}

func (i KeyRequestsMap) ToKeyRequestsMapOutputWithContext(ctx context.Context) KeyRequestsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRequestsMapOutput)
}

type KeyRequestsOutput struct{ *pulumi.OutputState }

func (KeyRequestsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyRequests)(nil)).Elem()
}

func (o KeyRequestsOutput) ToKeyRequestsOutput() KeyRequestsOutput {
	return o
}

func (o KeyRequestsOutput) ToKeyRequestsOutputWithContext(ctx context.Context) KeyRequestsOutput {
	return o
}

// The ids of the key requests
func (o KeyRequestsOutput) KeyRequestIds() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KeyRequests) pulumi.StringMapOutput { return v.KeyRequestIds }).(pulumi.StringMapOutput)
}

// The names of the key requests
func (o KeyRequestsOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KeyRequests) pulumi.StringArrayOutput { return v.Names }).(pulumi.StringArrayOutput)
}

// ID of Dynatrace Service, eg. SERVICE-123ABC45678EFGH
func (o KeyRequestsOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyRequests) pulumi.StringOutput { return v.Service }).(pulumi.StringOutput)
}

type KeyRequestsArrayOutput struct{ *pulumi.OutputState }

func (KeyRequestsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KeyRequests)(nil)).Elem()
}

func (o KeyRequestsArrayOutput) ToKeyRequestsArrayOutput() KeyRequestsArrayOutput {
	return o
}

func (o KeyRequestsArrayOutput) ToKeyRequestsArrayOutputWithContext(ctx context.Context) KeyRequestsArrayOutput {
	return o
}

func (o KeyRequestsArrayOutput) Index(i pulumi.IntInput) KeyRequestsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KeyRequests {
		return vs[0].([]*KeyRequests)[vs[1].(int)]
	}).(KeyRequestsOutput)
}

type KeyRequestsMapOutput struct{ *pulumi.OutputState }

func (KeyRequestsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KeyRequests)(nil)).Elem()
}

func (o KeyRequestsMapOutput) ToKeyRequestsMapOutput() KeyRequestsMapOutput {
	return o
}

func (o KeyRequestsMapOutput) ToKeyRequestsMapOutputWithContext(ctx context.Context) KeyRequestsMapOutput {
	return o
}

func (o KeyRequestsMapOutput) MapIndex(k pulumi.StringInput) KeyRequestsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KeyRequests {
		return vs[0].(map[string]*KeyRequests)[vs[1].(string)]
	}).(KeyRequestsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeyRequestsInput)(nil)).Elem(), &KeyRequests{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyRequestsArrayInput)(nil)).Elem(), KeyRequestsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyRequestsMapInput)(nil)).Elem(), KeyRequestsMap{})
	pulumi.RegisterOutputType(KeyRequestsOutput{})
	pulumi.RegisterOutputType(KeyRequestsArrayOutput{})
	pulumi.RegisterOutputType(KeyRequestsMapOutput{})
}
