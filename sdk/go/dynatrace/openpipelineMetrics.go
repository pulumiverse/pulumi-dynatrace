// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OpenpipelineMetrics struct {
	pulumi.CustomResourceState

	// List of all ingest sources of the configuration
	Endpoints OpenpipelineMetricsEndpointsPtrOutput `pulumi:"endpoints"`
	// List of all pipelines of the configuration
	Pipelines OpenpipelineMetricsPipelinesPtrOutput `pulumi:"pipelines"`
	// Dynamic routing definition
	Routing OpenpipelineMetricsRoutingPtrOutput `pulumi:"routing"`
}

// NewOpenpipelineMetrics registers a new resource with the given unique name, arguments, and options.
func NewOpenpipelineMetrics(ctx *pulumi.Context,
	name string, args *OpenpipelineMetricsArgs, opts ...pulumi.ResourceOption) (*OpenpipelineMetrics, error) {
	if args == nil {
		args = &OpenpipelineMetricsArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenpipelineMetrics
	err := ctx.RegisterResource("dynatrace:index/openpipelineMetrics:OpenpipelineMetrics", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenpipelineMetrics gets an existing OpenpipelineMetrics resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenpipelineMetrics(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenpipelineMetricsState, opts ...pulumi.ResourceOption) (*OpenpipelineMetrics, error) {
	var resource OpenpipelineMetrics
	err := ctx.ReadResource("dynatrace:index/openpipelineMetrics:OpenpipelineMetrics", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenpipelineMetrics resources.
type openpipelineMetricsState struct {
	// List of all ingest sources of the configuration
	Endpoints *OpenpipelineMetricsEndpoints `pulumi:"endpoints"`
	// List of all pipelines of the configuration
	Pipelines *OpenpipelineMetricsPipelines `pulumi:"pipelines"`
	// Dynamic routing definition
	Routing *OpenpipelineMetricsRouting `pulumi:"routing"`
}

type OpenpipelineMetricsState struct {
	// List of all ingest sources of the configuration
	Endpoints OpenpipelineMetricsEndpointsPtrInput
	// List of all pipelines of the configuration
	Pipelines OpenpipelineMetricsPipelinesPtrInput
	// Dynamic routing definition
	Routing OpenpipelineMetricsRoutingPtrInput
}

func (OpenpipelineMetricsState) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineMetricsState)(nil)).Elem()
}

type openpipelineMetricsArgs struct {
	// List of all ingest sources of the configuration
	Endpoints *OpenpipelineMetricsEndpoints `pulumi:"endpoints"`
	// List of all pipelines of the configuration
	Pipelines *OpenpipelineMetricsPipelines `pulumi:"pipelines"`
	// Dynamic routing definition
	Routing *OpenpipelineMetricsRouting `pulumi:"routing"`
}

// The set of arguments for constructing a OpenpipelineMetrics resource.
type OpenpipelineMetricsArgs struct {
	// List of all ingest sources of the configuration
	Endpoints OpenpipelineMetricsEndpointsPtrInput
	// List of all pipelines of the configuration
	Pipelines OpenpipelineMetricsPipelinesPtrInput
	// Dynamic routing definition
	Routing OpenpipelineMetricsRoutingPtrInput
}

func (OpenpipelineMetricsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineMetricsArgs)(nil)).Elem()
}

type OpenpipelineMetricsInput interface {
	pulumi.Input

	ToOpenpipelineMetricsOutput() OpenpipelineMetricsOutput
	ToOpenpipelineMetricsOutputWithContext(ctx context.Context) OpenpipelineMetricsOutput
}

func (*OpenpipelineMetrics) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineMetrics)(nil)).Elem()
}

func (i *OpenpipelineMetrics) ToOpenpipelineMetricsOutput() OpenpipelineMetricsOutput {
	return i.ToOpenpipelineMetricsOutputWithContext(context.Background())
}

func (i *OpenpipelineMetrics) ToOpenpipelineMetricsOutputWithContext(ctx context.Context) OpenpipelineMetricsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineMetricsOutput)
}

// OpenpipelineMetricsArrayInput is an input type that accepts OpenpipelineMetricsArray and OpenpipelineMetricsArrayOutput values.
// You can construct a concrete instance of `OpenpipelineMetricsArrayInput` via:
//
//	OpenpipelineMetricsArray{ OpenpipelineMetricsArgs{...} }
type OpenpipelineMetricsArrayInput interface {
	pulumi.Input

	ToOpenpipelineMetricsArrayOutput() OpenpipelineMetricsArrayOutput
	ToOpenpipelineMetricsArrayOutputWithContext(context.Context) OpenpipelineMetricsArrayOutput
}

type OpenpipelineMetricsArray []OpenpipelineMetricsInput

func (OpenpipelineMetricsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineMetrics)(nil)).Elem()
}

func (i OpenpipelineMetricsArray) ToOpenpipelineMetricsArrayOutput() OpenpipelineMetricsArrayOutput {
	return i.ToOpenpipelineMetricsArrayOutputWithContext(context.Background())
}

func (i OpenpipelineMetricsArray) ToOpenpipelineMetricsArrayOutputWithContext(ctx context.Context) OpenpipelineMetricsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineMetricsArrayOutput)
}

// OpenpipelineMetricsMapInput is an input type that accepts OpenpipelineMetricsMap and OpenpipelineMetricsMapOutput values.
// You can construct a concrete instance of `OpenpipelineMetricsMapInput` via:
//
//	OpenpipelineMetricsMap{ "key": OpenpipelineMetricsArgs{...} }
type OpenpipelineMetricsMapInput interface {
	pulumi.Input

	ToOpenpipelineMetricsMapOutput() OpenpipelineMetricsMapOutput
	ToOpenpipelineMetricsMapOutputWithContext(context.Context) OpenpipelineMetricsMapOutput
}

type OpenpipelineMetricsMap map[string]OpenpipelineMetricsInput

func (OpenpipelineMetricsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineMetrics)(nil)).Elem()
}

func (i OpenpipelineMetricsMap) ToOpenpipelineMetricsMapOutput() OpenpipelineMetricsMapOutput {
	return i.ToOpenpipelineMetricsMapOutputWithContext(context.Background())
}

func (i OpenpipelineMetricsMap) ToOpenpipelineMetricsMapOutputWithContext(ctx context.Context) OpenpipelineMetricsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineMetricsMapOutput)
}

type OpenpipelineMetricsOutput struct{ *pulumi.OutputState }

func (OpenpipelineMetricsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineMetrics)(nil)).Elem()
}

func (o OpenpipelineMetricsOutput) ToOpenpipelineMetricsOutput() OpenpipelineMetricsOutput {
	return o
}

func (o OpenpipelineMetricsOutput) ToOpenpipelineMetricsOutputWithContext(ctx context.Context) OpenpipelineMetricsOutput {
	return o
}

// List of all ingest sources of the configuration
func (o OpenpipelineMetricsOutput) Endpoints() OpenpipelineMetricsEndpointsPtrOutput {
	return o.ApplyT(func(v *OpenpipelineMetrics) OpenpipelineMetricsEndpointsPtrOutput { return v.Endpoints }).(OpenpipelineMetricsEndpointsPtrOutput)
}

// List of all pipelines of the configuration
func (o OpenpipelineMetricsOutput) Pipelines() OpenpipelineMetricsPipelinesPtrOutput {
	return o.ApplyT(func(v *OpenpipelineMetrics) OpenpipelineMetricsPipelinesPtrOutput { return v.Pipelines }).(OpenpipelineMetricsPipelinesPtrOutput)
}

// Dynamic routing definition
func (o OpenpipelineMetricsOutput) Routing() OpenpipelineMetricsRoutingPtrOutput {
	return o.ApplyT(func(v *OpenpipelineMetrics) OpenpipelineMetricsRoutingPtrOutput { return v.Routing }).(OpenpipelineMetricsRoutingPtrOutput)
}

type OpenpipelineMetricsArrayOutput struct{ *pulumi.OutputState }

func (OpenpipelineMetricsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineMetrics)(nil)).Elem()
}

func (o OpenpipelineMetricsArrayOutput) ToOpenpipelineMetricsArrayOutput() OpenpipelineMetricsArrayOutput {
	return o
}

func (o OpenpipelineMetricsArrayOutput) ToOpenpipelineMetricsArrayOutputWithContext(ctx context.Context) OpenpipelineMetricsArrayOutput {
	return o
}

func (o OpenpipelineMetricsArrayOutput) Index(i pulumi.IntInput) OpenpipelineMetricsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenpipelineMetrics {
		return vs[0].([]*OpenpipelineMetrics)[vs[1].(int)]
	}).(OpenpipelineMetricsOutput)
}

type OpenpipelineMetricsMapOutput struct{ *pulumi.OutputState }

func (OpenpipelineMetricsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineMetrics)(nil)).Elem()
}

func (o OpenpipelineMetricsMapOutput) ToOpenpipelineMetricsMapOutput() OpenpipelineMetricsMapOutput {
	return o
}

func (o OpenpipelineMetricsMapOutput) ToOpenpipelineMetricsMapOutputWithContext(ctx context.Context) OpenpipelineMetricsMapOutput {
	return o
}

func (o OpenpipelineMetricsMapOutput) MapIndex(k pulumi.StringInput) OpenpipelineMetricsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenpipelineMetrics {
		return vs[0].(map[string]*OpenpipelineMetrics)[vs[1].(string)]
	}).(OpenpipelineMetricsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineMetricsInput)(nil)).Elem(), &OpenpipelineMetrics{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineMetricsArrayInput)(nil)).Elem(), OpenpipelineMetricsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineMetricsMapInput)(nil)).Elem(), OpenpipelineMetricsMap{})
	pulumi.RegisterOutputType(OpenpipelineMetricsOutput{})
	pulumi.RegisterOutputType(OpenpipelineMetricsArrayOutput{})
	pulumi.RegisterOutputType(OpenpipelineMetricsMapOutput{})
}
