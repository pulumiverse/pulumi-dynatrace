// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type KubernetesEnrichment struct {
	pulumi.CustomResourceState

	// Dynatrace allows to use metadata defined on Kubernetes nodes, namespaces, and pods to set security and cost allocation attributes and dimensions for metrics, events, log, spans, and entities associated with the respective Kubernetes resource.
	Rules KubernetesEnrichmentRulesPtrOutput `pulumi:"rules"`
	// The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
}

// NewKubernetesEnrichment registers a new resource with the given unique name, arguments, and options.
func NewKubernetesEnrichment(ctx *pulumi.Context,
	name string, args *KubernetesEnrichmentArgs, opts ...pulumi.ResourceOption) (*KubernetesEnrichment, error) {
	if args == nil {
		args = &KubernetesEnrichmentArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KubernetesEnrichment
	err := ctx.RegisterResource("dynatrace:index/kubernetesEnrichment:KubernetesEnrichment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKubernetesEnrichment gets an existing KubernetesEnrichment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKubernetesEnrichment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KubernetesEnrichmentState, opts ...pulumi.ResourceOption) (*KubernetesEnrichment, error) {
	var resource KubernetesEnrichment
	err := ctx.ReadResource("dynatrace:index/kubernetesEnrichment:KubernetesEnrichment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KubernetesEnrichment resources.
type kubernetesEnrichmentState struct {
	// Dynatrace allows to use metadata defined on Kubernetes nodes, namespaces, and pods to set security and cost allocation attributes and dimensions for metrics, events, log, spans, and entities associated with the respective Kubernetes resource.
	Rules *KubernetesEnrichmentRules `pulumi:"rules"`
	// The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
}

type KubernetesEnrichmentState struct {
	// Dynatrace allows to use metadata defined on Kubernetes nodes, namespaces, and pods to set security and cost allocation attributes and dimensions for metrics, events, log, spans, and entities associated with the respective Kubernetes resource.
	Rules KubernetesEnrichmentRulesPtrInput
	// The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
}

func (KubernetesEnrichmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*kubernetesEnrichmentState)(nil)).Elem()
}

type kubernetesEnrichmentArgs struct {
	// Dynatrace allows to use metadata defined on Kubernetes nodes, namespaces, and pods to set security and cost allocation attributes and dimensions for metrics, events, log, spans, and entities associated with the respective Kubernetes resource.
	Rules *KubernetesEnrichmentRules `pulumi:"rules"`
	// The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
}

// The set of arguments for constructing a KubernetesEnrichment resource.
type KubernetesEnrichmentArgs struct {
	// Dynatrace allows to use metadata defined on Kubernetes nodes, namespaces, and pods to set security and cost allocation attributes and dimensions for metrics, events, log, spans, and entities associated with the respective Kubernetes resource.
	Rules KubernetesEnrichmentRulesPtrInput
	// The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
}

func (KubernetesEnrichmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kubernetesEnrichmentArgs)(nil)).Elem()
}

type KubernetesEnrichmentInput interface {
	pulumi.Input

	ToKubernetesEnrichmentOutput() KubernetesEnrichmentOutput
	ToKubernetesEnrichmentOutputWithContext(ctx context.Context) KubernetesEnrichmentOutput
}

func (*KubernetesEnrichment) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesEnrichment)(nil)).Elem()
}

func (i *KubernetesEnrichment) ToKubernetesEnrichmentOutput() KubernetesEnrichmentOutput {
	return i.ToKubernetesEnrichmentOutputWithContext(context.Background())
}

func (i *KubernetesEnrichment) ToKubernetesEnrichmentOutputWithContext(ctx context.Context) KubernetesEnrichmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesEnrichmentOutput)
}

// KubernetesEnrichmentArrayInput is an input type that accepts KubernetesEnrichmentArray and KubernetesEnrichmentArrayOutput values.
// You can construct a concrete instance of `KubernetesEnrichmentArrayInput` via:
//
//	KubernetesEnrichmentArray{ KubernetesEnrichmentArgs{...} }
type KubernetesEnrichmentArrayInput interface {
	pulumi.Input

	ToKubernetesEnrichmentArrayOutput() KubernetesEnrichmentArrayOutput
	ToKubernetesEnrichmentArrayOutputWithContext(context.Context) KubernetesEnrichmentArrayOutput
}

type KubernetesEnrichmentArray []KubernetesEnrichmentInput

func (KubernetesEnrichmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KubernetesEnrichment)(nil)).Elem()
}

func (i KubernetesEnrichmentArray) ToKubernetesEnrichmentArrayOutput() KubernetesEnrichmentArrayOutput {
	return i.ToKubernetesEnrichmentArrayOutputWithContext(context.Background())
}

func (i KubernetesEnrichmentArray) ToKubernetesEnrichmentArrayOutputWithContext(ctx context.Context) KubernetesEnrichmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesEnrichmentArrayOutput)
}

// KubernetesEnrichmentMapInput is an input type that accepts KubernetesEnrichmentMap and KubernetesEnrichmentMapOutput values.
// You can construct a concrete instance of `KubernetesEnrichmentMapInput` via:
//
//	KubernetesEnrichmentMap{ "key": KubernetesEnrichmentArgs{...} }
type KubernetesEnrichmentMapInput interface {
	pulumi.Input

	ToKubernetesEnrichmentMapOutput() KubernetesEnrichmentMapOutput
	ToKubernetesEnrichmentMapOutputWithContext(context.Context) KubernetesEnrichmentMapOutput
}

type KubernetesEnrichmentMap map[string]KubernetesEnrichmentInput

func (KubernetesEnrichmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KubernetesEnrichment)(nil)).Elem()
}

func (i KubernetesEnrichmentMap) ToKubernetesEnrichmentMapOutput() KubernetesEnrichmentMapOutput {
	return i.ToKubernetesEnrichmentMapOutputWithContext(context.Background())
}

func (i KubernetesEnrichmentMap) ToKubernetesEnrichmentMapOutputWithContext(ctx context.Context) KubernetesEnrichmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesEnrichmentMapOutput)
}

type KubernetesEnrichmentOutput struct{ *pulumi.OutputState }

func (KubernetesEnrichmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesEnrichment)(nil)).Elem()
}

func (o KubernetesEnrichmentOutput) ToKubernetesEnrichmentOutput() KubernetesEnrichmentOutput {
	return o
}

func (o KubernetesEnrichmentOutput) ToKubernetesEnrichmentOutputWithContext(ctx context.Context) KubernetesEnrichmentOutput {
	return o
}

// Dynatrace allows to use metadata defined on Kubernetes nodes, namespaces, and pods to set security and cost allocation attributes and dimensions for metrics, events, log, spans, and entities associated with the respective Kubernetes resource.
func (o KubernetesEnrichmentOutput) Rules() KubernetesEnrichmentRulesPtrOutput {
	return o.ApplyT(func(v *KubernetesEnrichment) KubernetesEnrichmentRulesPtrOutput { return v.Rules }).(KubernetesEnrichmentRulesPtrOutput)
}

// The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
func (o KubernetesEnrichmentOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesEnrichment) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

type KubernetesEnrichmentArrayOutput struct{ *pulumi.OutputState }

func (KubernetesEnrichmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KubernetesEnrichment)(nil)).Elem()
}

func (o KubernetesEnrichmentArrayOutput) ToKubernetesEnrichmentArrayOutput() KubernetesEnrichmentArrayOutput {
	return o
}

func (o KubernetesEnrichmentArrayOutput) ToKubernetesEnrichmentArrayOutputWithContext(ctx context.Context) KubernetesEnrichmentArrayOutput {
	return o
}

func (o KubernetesEnrichmentArrayOutput) Index(i pulumi.IntInput) KubernetesEnrichmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KubernetesEnrichment {
		return vs[0].([]*KubernetesEnrichment)[vs[1].(int)]
	}).(KubernetesEnrichmentOutput)
}

type KubernetesEnrichmentMapOutput struct{ *pulumi.OutputState }

func (KubernetesEnrichmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KubernetesEnrichment)(nil)).Elem()
}

func (o KubernetesEnrichmentMapOutput) ToKubernetesEnrichmentMapOutput() KubernetesEnrichmentMapOutput {
	return o
}

func (o KubernetesEnrichmentMapOutput) ToKubernetesEnrichmentMapOutputWithContext(ctx context.Context) KubernetesEnrichmentMapOutput {
	return o
}

func (o KubernetesEnrichmentMapOutput) MapIndex(k pulumi.StringInput) KubernetesEnrichmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KubernetesEnrichment {
		return vs[0].(map[string]*KubernetesEnrichment)[vs[1].(string)]
	}).(KubernetesEnrichmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesEnrichmentInput)(nil)).Elem(), &KubernetesEnrichment{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesEnrichmentArrayInput)(nil)).Elem(), KubernetesEnrichmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesEnrichmentMapInput)(nil)).Elem(), KubernetesEnrichmentMap{})
	pulumi.RegisterOutputType(KubernetesEnrichmentOutput{})
	pulumi.RegisterOutputType(KubernetesEnrichmentArrayOutput{})
	pulumi.RegisterOutputType(KubernetesEnrichmentMapOutput{})
}
