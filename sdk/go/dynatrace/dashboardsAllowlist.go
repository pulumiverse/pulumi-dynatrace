// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type DashboardsAllowlist struct {
	pulumi.CustomResourceState

	// List of URL pattern matchers
	Allowlist DashboardsAllowlistAllowlistPtrOutput `pulumi:"allowlist"`
}

// NewDashboardsAllowlist registers a new resource with the given unique name, arguments, and options.
func NewDashboardsAllowlist(ctx *pulumi.Context,
	name string, args *DashboardsAllowlistArgs, opts ...pulumi.ResourceOption) (*DashboardsAllowlist, error) {
	if args == nil {
		args = &DashboardsAllowlistArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DashboardsAllowlist
	err := ctx.RegisterResource("dynatrace:index/dashboardsAllowlist:DashboardsAllowlist", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDashboardsAllowlist gets an existing DashboardsAllowlist resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDashboardsAllowlist(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DashboardsAllowlistState, opts ...pulumi.ResourceOption) (*DashboardsAllowlist, error) {
	var resource DashboardsAllowlist
	err := ctx.ReadResource("dynatrace:index/dashboardsAllowlist:DashboardsAllowlist", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DashboardsAllowlist resources.
type dashboardsAllowlistState struct {
	// List of URL pattern matchers
	Allowlist *DashboardsAllowlistAllowlist `pulumi:"allowlist"`
}

type DashboardsAllowlistState struct {
	// List of URL pattern matchers
	Allowlist DashboardsAllowlistAllowlistPtrInput
}

func (DashboardsAllowlistState) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardsAllowlistState)(nil)).Elem()
}

type dashboardsAllowlistArgs struct {
	// List of URL pattern matchers
	Allowlist *DashboardsAllowlistAllowlist `pulumi:"allowlist"`
}

// The set of arguments for constructing a DashboardsAllowlist resource.
type DashboardsAllowlistArgs struct {
	// List of URL pattern matchers
	Allowlist DashboardsAllowlistAllowlistPtrInput
}

func (DashboardsAllowlistArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardsAllowlistArgs)(nil)).Elem()
}

type DashboardsAllowlistInput interface {
	pulumi.Input

	ToDashboardsAllowlistOutput() DashboardsAllowlistOutput
	ToDashboardsAllowlistOutputWithContext(ctx context.Context) DashboardsAllowlistOutput
}

func (*DashboardsAllowlist) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardsAllowlist)(nil)).Elem()
}

func (i *DashboardsAllowlist) ToDashboardsAllowlistOutput() DashboardsAllowlistOutput {
	return i.ToDashboardsAllowlistOutputWithContext(context.Background())
}

func (i *DashboardsAllowlist) ToDashboardsAllowlistOutputWithContext(ctx context.Context) DashboardsAllowlistOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardsAllowlistOutput)
}

// DashboardsAllowlistArrayInput is an input type that accepts DashboardsAllowlistArray and DashboardsAllowlistArrayOutput values.
// You can construct a concrete instance of `DashboardsAllowlistArrayInput` via:
//
//	DashboardsAllowlistArray{ DashboardsAllowlistArgs{...} }
type DashboardsAllowlistArrayInput interface {
	pulumi.Input

	ToDashboardsAllowlistArrayOutput() DashboardsAllowlistArrayOutput
	ToDashboardsAllowlistArrayOutputWithContext(context.Context) DashboardsAllowlistArrayOutput
}

type DashboardsAllowlistArray []DashboardsAllowlistInput

func (DashboardsAllowlistArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DashboardsAllowlist)(nil)).Elem()
}

func (i DashboardsAllowlistArray) ToDashboardsAllowlistArrayOutput() DashboardsAllowlistArrayOutput {
	return i.ToDashboardsAllowlistArrayOutputWithContext(context.Background())
}

func (i DashboardsAllowlistArray) ToDashboardsAllowlistArrayOutputWithContext(ctx context.Context) DashboardsAllowlistArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardsAllowlistArrayOutput)
}

// DashboardsAllowlistMapInput is an input type that accepts DashboardsAllowlistMap and DashboardsAllowlistMapOutput values.
// You can construct a concrete instance of `DashboardsAllowlistMapInput` via:
//
//	DashboardsAllowlistMap{ "key": DashboardsAllowlistArgs{...} }
type DashboardsAllowlistMapInput interface {
	pulumi.Input

	ToDashboardsAllowlistMapOutput() DashboardsAllowlistMapOutput
	ToDashboardsAllowlistMapOutputWithContext(context.Context) DashboardsAllowlistMapOutput
}

type DashboardsAllowlistMap map[string]DashboardsAllowlistInput

func (DashboardsAllowlistMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DashboardsAllowlist)(nil)).Elem()
}

func (i DashboardsAllowlistMap) ToDashboardsAllowlistMapOutput() DashboardsAllowlistMapOutput {
	return i.ToDashboardsAllowlistMapOutputWithContext(context.Background())
}

func (i DashboardsAllowlistMap) ToDashboardsAllowlistMapOutputWithContext(ctx context.Context) DashboardsAllowlistMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardsAllowlistMapOutput)
}

type DashboardsAllowlistOutput struct{ *pulumi.OutputState }

func (DashboardsAllowlistOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardsAllowlist)(nil)).Elem()
}

func (o DashboardsAllowlistOutput) ToDashboardsAllowlistOutput() DashboardsAllowlistOutput {
	return o
}

func (o DashboardsAllowlistOutput) ToDashboardsAllowlistOutputWithContext(ctx context.Context) DashboardsAllowlistOutput {
	return o
}

// List of URL pattern matchers
func (o DashboardsAllowlistOutput) Allowlist() DashboardsAllowlistAllowlistPtrOutput {
	return o.ApplyT(func(v *DashboardsAllowlist) DashboardsAllowlistAllowlistPtrOutput { return v.Allowlist }).(DashboardsAllowlistAllowlistPtrOutput)
}

type DashboardsAllowlistArrayOutput struct{ *pulumi.OutputState }

func (DashboardsAllowlistArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DashboardsAllowlist)(nil)).Elem()
}

func (o DashboardsAllowlistArrayOutput) ToDashboardsAllowlistArrayOutput() DashboardsAllowlistArrayOutput {
	return o
}

func (o DashboardsAllowlistArrayOutput) ToDashboardsAllowlistArrayOutputWithContext(ctx context.Context) DashboardsAllowlistArrayOutput {
	return o
}

func (o DashboardsAllowlistArrayOutput) Index(i pulumi.IntInput) DashboardsAllowlistOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DashboardsAllowlist {
		return vs[0].([]*DashboardsAllowlist)[vs[1].(int)]
	}).(DashboardsAllowlistOutput)
}

type DashboardsAllowlistMapOutput struct{ *pulumi.OutputState }

func (DashboardsAllowlistMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DashboardsAllowlist)(nil)).Elem()
}

func (o DashboardsAllowlistMapOutput) ToDashboardsAllowlistMapOutput() DashboardsAllowlistMapOutput {
	return o
}

func (o DashboardsAllowlistMapOutput) ToDashboardsAllowlistMapOutputWithContext(ctx context.Context) DashboardsAllowlistMapOutput {
	return o
}

func (o DashboardsAllowlistMapOutput) MapIndex(k pulumi.StringInput) DashboardsAllowlistOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DashboardsAllowlist {
		return vs[0].(map[string]*DashboardsAllowlist)[vs[1].(string)]
	}).(DashboardsAllowlistOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardsAllowlistInput)(nil)).Elem(), &DashboardsAllowlist{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardsAllowlistArrayInput)(nil)).Elem(), DashboardsAllowlistArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardsAllowlistMapInput)(nil)).Elem(), DashboardsAllowlistMap{})
	pulumi.RegisterOutputType(DashboardsAllowlistOutput{})
	pulumi.RegisterOutputType(DashboardsAllowlistArrayOutput{})
	pulumi.RegisterOutputType(DashboardsAllowlistMapOutput{})
}
