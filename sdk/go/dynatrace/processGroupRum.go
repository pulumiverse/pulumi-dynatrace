// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type ProcessGroupRum struct {
	pulumi.CustomResourceState

	// Allows OneAgent to: * automatically inject the RUM JavaScript tag into each page delivered by this process group *
	// provide the necessary info to correlate RUM data with server-side PurePaths * forward beacons to the cluster * deliver
	// the monitoring code
	Enable pulumi.BoolOutput `pulumi:"enable"`
	// The scope of this setting - PROCESS_GROUP-XXXXXXXXXXXXXXXX
	ProcessGroupId pulumi.StringOutput `pulumi:"processGroupId"`
}

// NewProcessGroupRum registers a new resource with the given unique name, arguments, and options.
func NewProcessGroupRum(ctx *pulumi.Context,
	name string, args *ProcessGroupRumArgs, opts ...pulumi.ResourceOption) (*ProcessGroupRum, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enable == nil {
		return nil, errors.New("invalid value for required argument 'Enable'")
	}
	if args.ProcessGroupId == nil {
		return nil, errors.New("invalid value for required argument 'ProcessGroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProcessGroupRum
	err := ctx.RegisterResource("dynatrace:index/processGroupRum:ProcessGroupRum", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProcessGroupRum gets an existing ProcessGroupRum resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProcessGroupRum(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProcessGroupRumState, opts ...pulumi.ResourceOption) (*ProcessGroupRum, error) {
	var resource ProcessGroupRum
	err := ctx.ReadResource("dynatrace:index/processGroupRum:ProcessGroupRum", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProcessGroupRum resources.
type processGroupRumState struct {
	// Allows OneAgent to: * automatically inject the RUM JavaScript tag into each page delivered by this process group *
	// provide the necessary info to correlate RUM data with server-side PurePaths * forward beacons to the cluster * deliver
	// the monitoring code
	Enable *bool `pulumi:"enable"`
	// The scope of this setting - PROCESS_GROUP-XXXXXXXXXXXXXXXX
	ProcessGroupId *string `pulumi:"processGroupId"`
}

type ProcessGroupRumState struct {
	// Allows OneAgent to: * automatically inject the RUM JavaScript tag into each page delivered by this process group *
	// provide the necessary info to correlate RUM data with server-side PurePaths * forward beacons to the cluster * deliver
	// the monitoring code
	Enable pulumi.BoolPtrInput
	// The scope of this setting - PROCESS_GROUP-XXXXXXXXXXXXXXXX
	ProcessGroupId pulumi.StringPtrInput
}

func (ProcessGroupRumState) ElementType() reflect.Type {
	return reflect.TypeOf((*processGroupRumState)(nil)).Elem()
}

type processGroupRumArgs struct {
	// Allows OneAgent to: * automatically inject the RUM JavaScript tag into each page delivered by this process group *
	// provide the necessary info to correlate RUM data with server-side PurePaths * forward beacons to the cluster * deliver
	// the monitoring code
	Enable bool `pulumi:"enable"`
	// The scope of this setting - PROCESS_GROUP-XXXXXXXXXXXXXXXX
	ProcessGroupId string `pulumi:"processGroupId"`
}

// The set of arguments for constructing a ProcessGroupRum resource.
type ProcessGroupRumArgs struct {
	// Allows OneAgent to: * automatically inject the RUM JavaScript tag into each page delivered by this process group *
	// provide the necessary info to correlate RUM data with server-side PurePaths * forward beacons to the cluster * deliver
	// the monitoring code
	Enable pulumi.BoolInput
	// The scope of this setting - PROCESS_GROUP-XXXXXXXXXXXXXXXX
	ProcessGroupId pulumi.StringInput
}

func (ProcessGroupRumArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*processGroupRumArgs)(nil)).Elem()
}

type ProcessGroupRumInput interface {
	pulumi.Input

	ToProcessGroupRumOutput() ProcessGroupRumOutput
	ToProcessGroupRumOutputWithContext(ctx context.Context) ProcessGroupRumOutput
}

func (*ProcessGroupRum) ElementType() reflect.Type {
	return reflect.TypeOf((**ProcessGroupRum)(nil)).Elem()
}

func (i *ProcessGroupRum) ToProcessGroupRumOutput() ProcessGroupRumOutput {
	return i.ToProcessGroupRumOutputWithContext(context.Background())
}

func (i *ProcessGroupRum) ToProcessGroupRumOutputWithContext(ctx context.Context) ProcessGroupRumOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProcessGroupRumOutput)
}

// ProcessGroupRumArrayInput is an input type that accepts ProcessGroupRumArray and ProcessGroupRumArrayOutput values.
// You can construct a concrete instance of `ProcessGroupRumArrayInput` via:
//
//	ProcessGroupRumArray{ ProcessGroupRumArgs{...} }
type ProcessGroupRumArrayInput interface {
	pulumi.Input

	ToProcessGroupRumArrayOutput() ProcessGroupRumArrayOutput
	ToProcessGroupRumArrayOutputWithContext(context.Context) ProcessGroupRumArrayOutput
}

type ProcessGroupRumArray []ProcessGroupRumInput

func (ProcessGroupRumArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProcessGroupRum)(nil)).Elem()
}

func (i ProcessGroupRumArray) ToProcessGroupRumArrayOutput() ProcessGroupRumArrayOutput {
	return i.ToProcessGroupRumArrayOutputWithContext(context.Background())
}

func (i ProcessGroupRumArray) ToProcessGroupRumArrayOutputWithContext(ctx context.Context) ProcessGroupRumArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProcessGroupRumArrayOutput)
}

// ProcessGroupRumMapInput is an input type that accepts ProcessGroupRumMap and ProcessGroupRumMapOutput values.
// You can construct a concrete instance of `ProcessGroupRumMapInput` via:
//
//	ProcessGroupRumMap{ "key": ProcessGroupRumArgs{...} }
type ProcessGroupRumMapInput interface {
	pulumi.Input

	ToProcessGroupRumMapOutput() ProcessGroupRumMapOutput
	ToProcessGroupRumMapOutputWithContext(context.Context) ProcessGroupRumMapOutput
}

type ProcessGroupRumMap map[string]ProcessGroupRumInput

func (ProcessGroupRumMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProcessGroupRum)(nil)).Elem()
}

func (i ProcessGroupRumMap) ToProcessGroupRumMapOutput() ProcessGroupRumMapOutput {
	return i.ToProcessGroupRumMapOutputWithContext(context.Background())
}

func (i ProcessGroupRumMap) ToProcessGroupRumMapOutputWithContext(ctx context.Context) ProcessGroupRumMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProcessGroupRumMapOutput)
}

type ProcessGroupRumOutput struct{ *pulumi.OutputState }

func (ProcessGroupRumOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProcessGroupRum)(nil)).Elem()
}

func (o ProcessGroupRumOutput) ToProcessGroupRumOutput() ProcessGroupRumOutput {
	return o
}

func (o ProcessGroupRumOutput) ToProcessGroupRumOutputWithContext(ctx context.Context) ProcessGroupRumOutput {
	return o
}

// Allows OneAgent to: * automatically inject the RUM JavaScript tag into each page delivered by this process group *
// provide the necessary info to correlate RUM data with server-side PurePaths * forward beacons to the cluster * deliver
// the monitoring code
func (o ProcessGroupRumOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProcessGroupRum) pulumi.BoolOutput { return v.Enable }).(pulumi.BoolOutput)
}

// The scope of this setting - PROCESS_GROUP-XXXXXXXXXXXXXXXX
func (o ProcessGroupRumOutput) ProcessGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcessGroupRum) pulumi.StringOutput { return v.ProcessGroupId }).(pulumi.StringOutput)
}

type ProcessGroupRumArrayOutput struct{ *pulumi.OutputState }

func (ProcessGroupRumArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProcessGroupRum)(nil)).Elem()
}

func (o ProcessGroupRumArrayOutput) ToProcessGroupRumArrayOutput() ProcessGroupRumArrayOutput {
	return o
}

func (o ProcessGroupRumArrayOutput) ToProcessGroupRumArrayOutputWithContext(ctx context.Context) ProcessGroupRumArrayOutput {
	return o
}

func (o ProcessGroupRumArrayOutput) Index(i pulumi.IntInput) ProcessGroupRumOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProcessGroupRum {
		return vs[0].([]*ProcessGroupRum)[vs[1].(int)]
	}).(ProcessGroupRumOutput)
}

type ProcessGroupRumMapOutput struct{ *pulumi.OutputState }

func (ProcessGroupRumMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProcessGroupRum)(nil)).Elem()
}

func (o ProcessGroupRumMapOutput) ToProcessGroupRumMapOutput() ProcessGroupRumMapOutput {
	return o
}

func (o ProcessGroupRumMapOutput) ToProcessGroupRumMapOutputWithContext(ctx context.Context) ProcessGroupRumMapOutput {
	return o
}

func (o ProcessGroupRumMapOutput) MapIndex(k pulumi.StringInput) ProcessGroupRumOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProcessGroupRum {
		return vs[0].(map[string]*ProcessGroupRum)[vs[1].(string)]
	}).(ProcessGroupRumOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProcessGroupRumInput)(nil)).Elem(), &ProcessGroupRum{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProcessGroupRumArrayInput)(nil)).Elem(), ProcessGroupRumArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProcessGroupRumMapInput)(nil)).Elem(), ProcessGroupRumMap{})
	pulumi.RegisterOutputType(ProcessGroupRumOutput{})
	pulumi.RegisterOutputType(ProcessGroupRumArrayOutput{})
	pulumi.RegisterOutputType(ProcessGroupRumMapOutput{})
}
