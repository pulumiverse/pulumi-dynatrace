// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type AuditLog struct {
	pulumi.CustomResourceState

	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
}

// NewAuditLog registers a new resource with the given unique name, arguments, and options.
func NewAuditLog(ctx *pulumi.Context,
	name string, args *AuditLogArgs, opts ...pulumi.ResourceOption) (*AuditLog, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AuditLog
	err := ctx.RegisterResource("dynatrace:index/auditLog:AuditLog", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuditLog gets an existing AuditLog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuditLog(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuditLogState, opts ...pulumi.ResourceOption) (*AuditLog, error) {
	var resource AuditLog
	err := ctx.ReadResource("dynatrace:index/auditLog:AuditLog", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuditLog resources.
type auditLogState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
}

type AuditLogState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
}

func (AuditLogState) ElementType() reflect.Type {
	return reflect.TypeOf((*auditLogState)(nil)).Elem()
}

type auditLogArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
}

// The set of arguments for constructing a AuditLog resource.
type AuditLogArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
}

func (AuditLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*auditLogArgs)(nil)).Elem()
}

type AuditLogInput interface {
	pulumi.Input

	ToAuditLogOutput() AuditLogOutput
	ToAuditLogOutputWithContext(ctx context.Context) AuditLogOutput
}

func (*AuditLog) ElementType() reflect.Type {
	return reflect.TypeOf((**AuditLog)(nil)).Elem()
}

func (i *AuditLog) ToAuditLogOutput() AuditLogOutput {
	return i.ToAuditLogOutputWithContext(context.Background())
}

func (i *AuditLog) ToAuditLogOutputWithContext(ctx context.Context) AuditLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogOutput)
}

// AuditLogArrayInput is an input type that accepts AuditLogArray and AuditLogArrayOutput values.
// You can construct a concrete instance of `AuditLogArrayInput` via:
//
//	AuditLogArray{ AuditLogArgs{...} }
type AuditLogArrayInput interface {
	pulumi.Input

	ToAuditLogArrayOutput() AuditLogArrayOutput
	ToAuditLogArrayOutputWithContext(context.Context) AuditLogArrayOutput
}

type AuditLogArray []AuditLogInput

func (AuditLogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuditLog)(nil)).Elem()
}

func (i AuditLogArray) ToAuditLogArrayOutput() AuditLogArrayOutput {
	return i.ToAuditLogArrayOutputWithContext(context.Background())
}

func (i AuditLogArray) ToAuditLogArrayOutputWithContext(ctx context.Context) AuditLogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogArrayOutput)
}

// AuditLogMapInput is an input type that accepts AuditLogMap and AuditLogMapOutput values.
// You can construct a concrete instance of `AuditLogMapInput` via:
//
//	AuditLogMap{ "key": AuditLogArgs{...} }
type AuditLogMapInput interface {
	pulumi.Input

	ToAuditLogMapOutput() AuditLogMapOutput
	ToAuditLogMapOutputWithContext(context.Context) AuditLogMapOutput
}

type AuditLogMap map[string]AuditLogInput

func (AuditLogMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuditLog)(nil)).Elem()
}

func (i AuditLogMap) ToAuditLogMapOutput() AuditLogMapOutput {
	return i.ToAuditLogMapOutputWithContext(context.Background())
}

func (i AuditLogMap) ToAuditLogMapOutputWithContext(ctx context.Context) AuditLogMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogMapOutput)
}

type AuditLogOutput struct{ *pulumi.OutputState }

func (AuditLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuditLog)(nil)).Elem()
}

func (o AuditLogOutput) ToAuditLogOutput() AuditLogOutput {
	return o
}

func (o AuditLogOutput) ToAuditLogOutputWithContext(ctx context.Context) AuditLogOutput {
	return o
}

// This setting is enabled (`true`) or disabled (`false`)
func (o AuditLogOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *AuditLog) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

type AuditLogArrayOutput struct{ *pulumi.OutputState }

func (AuditLogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuditLog)(nil)).Elem()
}

func (o AuditLogArrayOutput) ToAuditLogArrayOutput() AuditLogArrayOutput {
	return o
}

func (o AuditLogArrayOutput) ToAuditLogArrayOutputWithContext(ctx context.Context) AuditLogArrayOutput {
	return o
}

func (o AuditLogArrayOutput) Index(i pulumi.IntInput) AuditLogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AuditLog {
		return vs[0].([]*AuditLog)[vs[1].(int)]
	}).(AuditLogOutput)
}

type AuditLogMapOutput struct{ *pulumi.OutputState }

func (AuditLogMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuditLog)(nil)).Elem()
}

func (o AuditLogMapOutput) ToAuditLogMapOutput() AuditLogMapOutput {
	return o
}

func (o AuditLogMapOutput) ToAuditLogMapOutputWithContext(ctx context.Context) AuditLogMapOutput {
	return o
}

func (o AuditLogMapOutput) MapIndex(k pulumi.StringInput) AuditLogOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AuditLog {
		return vs[0].(map[string]*AuditLog)[vs[1].(string)]
	}).(AuditLogOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogInput)(nil)).Elem(), &AuditLog{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogArrayInput)(nil)).Elem(), AuditLogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogMapInput)(nil)).Elem(), AuditLogMap{})
	pulumi.RegisterOutputType(AuditLogOutput{})
	pulumi.RegisterOutputType(AuditLogArrayOutput{})
	pulumi.RegisterOutputType(AuditLogMapOutput{})
}
