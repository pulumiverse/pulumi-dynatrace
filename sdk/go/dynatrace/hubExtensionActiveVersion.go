// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type HubExtensionActiveVersion struct {
	pulumi.CustomResourceState

	// The fully qualified name of the extension, such as `com.dynatrace.extension.jmx-liberty-cp`. You can query for these names using the data source `getHubItems`
	Name pulumi.StringOutput `pulumi:"name"`
	// The version that should be active
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewHubExtensionActiveVersion registers a new resource with the given unique name, arguments, and options.
func NewHubExtensionActiveVersion(ctx *pulumi.Context,
	name string, args *HubExtensionActiveVersionArgs, opts ...pulumi.ResourceOption) (*HubExtensionActiveVersion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HubExtensionActiveVersion
	err := ctx.RegisterResource("dynatrace:index/hubExtensionActiveVersion:HubExtensionActiveVersion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHubExtensionActiveVersion gets an existing HubExtensionActiveVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHubExtensionActiveVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HubExtensionActiveVersionState, opts ...pulumi.ResourceOption) (*HubExtensionActiveVersion, error) {
	var resource HubExtensionActiveVersion
	err := ctx.ReadResource("dynatrace:index/hubExtensionActiveVersion:HubExtensionActiveVersion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HubExtensionActiveVersion resources.
type hubExtensionActiveVersionState struct {
	// The fully qualified name of the extension, such as `com.dynatrace.extension.jmx-liberty-cp`. You can query for these names using the data source `getHubItems`
	Name *string `pulumi:"name"`
	// The version that should be active
	Version *string `pulumi:"version"`
}

type HubExtensionActiveVersionState struct {
	// The fully qualified name of the extension, such as `com.dynatrace.extension.jmx-liberty-cp`. You can query for these names using the data source `getHubItems`
	Name pulumi.StringPtrInput
	// The version that should be active
	Version pulumi.StringPtrInput
}

func (HubExtensionActiveVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*hubExtensionActiveVersionState)(nil)).Elem()
}

type hubExtensionActiveVersionArgs struct {
	// The fully qualified name of the extension, such as `com.dynatrace.extension.jmx-liberty-cp`. You can query for these names using the data source `getHubItems`
	Name *string `pulumi:"name"`
	// The version that should be active
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a HubExtensionActiveVersion resource.
type HubExtensionActiveVersionArgs struct {
	// The fully qualified name of the extension, such as `com.dynatrace.extension.jmx-liberty-cp`. You can query for these names using the data source `getHubItems`
	Name pulumi.StringPtrInput
	// The version that should be active
	Version pulumi.StringInput
}

func (HubExtensionActiveVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hubExtensionActiveVersionArgs)(nil)).Elem()
}

type HubExtensionActiveVersionInput interface {
	pulumi.Input

	ToHubExtensionActiveVersionOutput() HubExtensionActiveVersionOutput
	ToHubExtensionActiveVersionOutputWithContext(ctx context.Context) HubExtensionActiveVersionOutput
}

func (*HubExtensionActiveVersion) ElementType() reflect.Type {
	return reflect.TypeOf((**HubExtensionActiveVersion)(nil)).Elem()
}

func (i *HubExtensionActiveVersion) ToHubExtensionActiveVersionOutput() HubExtensionActiveVersionOutput {
	return i.ToHubExtensionActiveVersionOutputWithContext(context.Background())
}

func (i *HubExtensionActiveVersion) ToHubExtensionActiveVersionOutputWithContext(ctx context.Context) HubExtensionActiveVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubExtensionActiveVersionOutput)
}

// HubExtensionActiveVersionArrayInput is an input type that accepts HubExtensionActiveVersionArray and HubExtensionActiveVersionArrayOutput values.
// You can construct a concrete instance of `HubExtensionActiveVersionArrayInput` via:
//
//	HubExtensionActiveVersionArray{ HubExtensionActiveVersionArgs{...} }
type HubExtensionActiveVersionArrayInput interface {
	pulumi.Input

	ToHubExtensionActiveVersionArrayOutput() HubExtensionActiveVersionArrayOutput
	ToHubExtensionActiveVersionArrayOutputWithContext(context.Context) HubExtensionActiveVersionArrayOutput
}

type HubExtensionActiveVersionArray []HubExtensionActiveVersionInput

func (HubExtensionActiveVersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HubExtensionActiveVersion)(nil)).Elem()
}

func (i HubExtensionActiveVersionArray) ToHubExtensionActiveVersionArrayOutput() HubExtensionActiveVersionArrayOutput {
	return i.ToHubExtensionActiveVersionArrayOutputWithContext(context.Background())
}

func (i HubExtensionActiveVersionArray) ToHubExtensionActiveVersionArrayOutputWithContext(ctx context.Context) HubExtensionActiveVersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubExtensionActiveVersionArrayOutput)
}

// HubExtensionActiveVersionMapInput is an input type that accepts HubExtensionActiveVersionMap and HubExtensionActiveVersionMapOutput values.
// You can construct a concrete instance of `HubExtensionActiveVersionMapInput` via:
//
//	HubExtensionActiveVersionMap{ "key": HubExtensionActiveVersionArgs{...} }
type HubExtensionActiveVersionMapInput interface {
	pulumi.Input

	ToHubExtensionActiveVersionMapOutput() HubExtensionActiveVersionMapOutput
	ToHubExtensionActiveVersionMapOutputWithContext(context.Context) HubExtensionActiveVersionMapOutput
}

type HubExtensionActiveVersionMap map[string]HubExtensionActiveVersionInput

func (HubExtensionActiveVersionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HubExtensionActiveVersion)(nil)).Elem()
}

func (i HubExtensionActiveVersionMap) ToHubExtensionActiveVersionMapOutput() HubExtensionActiveVersionMapOutput {
	return i.ToHubExtensionActiveVersionMapOutputWithContext(context.Background())
}

func (i HubExtensionActiveVersionMap) ToHubExtensionActiveVersionMapOutputWithContext(ctx context.Context) HubExtensionActiveVersionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubExtensionActiveVersionMapOutput)
}

type HubExtensionActiveVersionOutput struct{ *pulumi.OutputState }

func (HubExtensionActiveVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HubExtensionActiveVersion)(nil)).Elem()
}

func (o HubExtensionActiveVersionOutput) ToHubExtensionActiveVersionOutput() HubExtensionActiveVersionOutput {
	return o
}

func (o HubExtensionActiveVersionOutput) ToHubExtensionActiveVersionOutputWithContext(ctx context.Context) HubExtensionActiveVersionOutput {
	return o
}

// The fully qualified name of the extension, such as `com.dynatrace.extension.jmx-liberty-cp`. You can query for these names using the data source `getHubItems`
func (o HubExtensionActiveVersionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *HubExtensionActiveVersion) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The version that should be active
func (o HubExtensionActiveVersionOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *HubExtensionActiveVersion) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type HubExtensionActiveVersionArrayOutput struct{ *pulumi.OutputState }

func (HubExtensionActiveVersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HubExtensionActiveVersion)(nil)).Elem()
}

func (o HubExtensionActiveVersionArrayOutput) ToHubExtensionActiveVersionArrayOutput() HubExtensionActiveVersionArrayOutput {
	return o
}

func (o HubExtensionActiveVersionArrayOutput) ToHubExtensionActiveVersionArrayOutputWithContext(ctx context.Context) HubExtensionActiveVersionArrayOutput {
	return o
}

func (o HubExtensionActiveVersionArrayOutput) Index(i pulumi.IntInput) HubExtensionActiveVersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HubExtensionActiveVersion {
		return vs[0].([]*HubExtensionActiveVersion)[vs[1].(int)]
	}).(HubExtensionActiveVersionOutput)
}

type HubExtensionActiveVersionMapOutput struct{ *pulumi.OutputState }

func (HubExtensionActiveVersionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HubExtensionActiveVersion)(nil)).Elem()
}

func (o HubExtensionActiveVersionMapOutput) ToHubExtensionActiveVersionMapOutput() HubExtensionActiveVersionMapOutput {
	return o
}

func (o HubExtensionActiveVersionMapOutput) ToHubExtensionActiveVersionMapOutputWithContext(ctx context.Context) HubExtensionActiveVersionMapOutput {
	return o
}

func (o HubExtensionActiveVersionMapOutput) MapIndex(k pulumi.StringInput) HubExtensionActiveVersionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HubExtensionActiveVersion {
		return vs[0].(map[string]*HubExtensionActiveVersion)[vs[1].(string)]
	}).(HubExtensionActiveVersionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HubExtensionActiveVersionInput)(nil)).Elem(), &HubExtensionActiveVersion{})
	pulumi.RegisterInputType(reflect.TypeOf((*HubExtensionActiveVersionArrayInput)(nil)).Elem(), HubExtensionActiveVersionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HubExtensionActiveVersionMapInput)(nil)).Elem(), HubExtensionActiveVersionMap{})
	pulumi.RegisterOutputType(HubExtensionActiveVersionOutput{})
	pulumi.RegisterOutputType(HubExtensionActiveVersionArrayOutput{})
	pulumi.RegisterOutputType(HubExtensionActiveVersionMapOutput{})
}
