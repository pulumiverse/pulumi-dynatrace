// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type EmailNotification struct {
	pulumi.CustomResourceState

	// The configuration is enabled (`true`) or disabled (`false`)
	Active pulumi.BoolPtrOutput `pulumi:"active"`
	// The list of the email BCC-recipients
	Bccs pulumi.StringArrayOutput `pulumi:"bccs"`
	// The template of the email notification.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	Body pulumi.StringOutput `pulumi:"body"`
	// The list of the email CC-recipients
	Ccs pulumi.StringArrayOutput `pulumi:"ccs"`
	// The ID of these settings when referred to from resources requiring the REST API V1 keys
	LegacyId pulumi.StringOutput `pulumi:"legacyId"`
	// The name of the notification configuration
	Name pulumi.StringOutput `pulumi:"name"`
	// Send email if problem is closed
	NotifyClosedProblems pulumi.BoolPtrOutput `pulumi:"notifyClosedProblems"`
	// The ID of the associated alerting profile
	Profile pulumi.StringOutput `pulumi:"profile"`
	// The subject of the email notifications
	Subject pulumi.StringOutput `pulumi:"subject"`
	// The list of the email recipients
	Tos pulumi.StringArrayOutput `pulumi:"tos"`
}

// NewEmailNotification registers a new resource with the given unique name, arguments, and options.
func NewEmailNotification(ctx *pulumi.Context,
	name string, args *EmailNotificationArgs, opts ...pulumi.ResourceOption) (*EmailNotification, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Body == nil {
		return nil, errors.New("invalid value for required argument 'Body'")
	}
	if args.Profile == nil {
		return nil, errors.New("invalid value for required argument 'Profile'")
	}
	if args.Subject == nil {
		return nil, errors.New("invalid value for required argument 'Subject'")
	}
	if args.Tos == nil {
		return nil, errors.New("invalid value for required argument 'Tos'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EmailNotification
	err := ctx.RegisterResource("dynatrace:index/emailNotification:EmailNotification", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEmailNotification gets an existing EmailNotification resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEmailNotification(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EmailNotificationState, opts ...pulumi.ResourceOption) (*EmailNotification, error) {
	var resource EmailNotification
	err := ctx.ReadResource("dynatrace:index/emailNotification:EmailNotification", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EmailNotification resources.
type emailNotificationState struct {
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `pulumi:"active"`
	// The list of the email BCC-recipients
	Bccs []string `pulumi:"bccs"`
	// The template of the email notification.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	Body *string `pulumi:"body"`
	// The list of the email CC-recipients
	Ccs []string `pulumi:"ccs"`
	// The ID of these settings when referred to from resources requiring the REST API V1 keys
	LegacyId *string `pulumi:"legacyId"`
	// The name of the notification configuration
	Name *string `pulumi:"name"`
	// Send email if problem is closed
	NotifyClosedProblems *bool `pulumi:"notifyClosedProblems"`
	// The ID of the associated alerting profile
	Profile *string `pulumi:"profile"`
	// The subject of the email notifications
	Subject *string `pulumi:"subject"`
	// The list of the email recipients
	Tos []string `pulumi:"tos"`
}

type EmailNotificationState struct {
	// The configuration is enabled (`true`) or disabled (`false`)
	Active pulumi.BoolPtrInput
	// The list of the email BCC-recipients
	Bccs pulumi.StringArrayInput
	// The template of the email notification.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	Body pulumi.StringPtrInput
	// The list of the email CC-recipients
	Ccs pulumi.StringArrayInput
	// The ID of these settings when referred to from resources requiring the REST API V1 keys
	LegacyId pulumi.StringPtrInput
	// The name of the notification configuration
	Name pulumi.StringPtrInput
	// Send email if problem is closed
	NotifyClosedProblems pulumi.BoolPtrInput
	// The ID of the associated alerting profile
	Profile pulumi.StringPtrInput
	// The subject of the email notifications
	Subject pulumi.StringPtrInput
	// The list of the email recipients
	Tos pulumi.StringArrayInput
}

func (EmailNotificationState) ElementType() reflect.Type {
	return reflect.TypeOf((*emailNotificationState)(nil)).Elem()
}

type emailNotificationArgs struct {
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `pulumi:"active"`
	// The list of the email BCC-recipients
	Bccs []string `pulumi:"bccs"`
	// The template of the email notification.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	Body string `pulumi:"body"`
	// The list of the email CC-recipients
	Ccs []string `pulumi:"ccs"`
	// The ID of these settings when referred to from resources requiring the REST API V1 keys
	LegacyId *string `pulumi:"legacyId"`
	// The name of the notification configuration
	Name *string `pulumi:"name"`
	// Send email if problem is closed
	NotifyClosedProblems *bool `pulumi:"notifyClosedProblems"`
	// The ID of the associated alerting profile
	Profile string `pulumi:"profile"`
	// The subject of the email notifications
	Subject string `pulumi:"subject"`
	// The list of the email recipients
	Tos []string `pulumi:"tos"`
}

// The set of arguments for constructing a EmailNotification resource.
type EmailNotificationArgs struct {
	// The configuration is enabled (`true`) or disabled (`false`)
	Active pulumi.BoolPtrInput
	// The list of the email BCC-recipients
	Bccs pulumi.StringArrayInput
	// The template of the email notification.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	Body pulumi.StringInput
	// The list of the email CC-recipients
	Ccs pulumi.StringArrayInput
	// The ID of these settings when referred to from resources requiring the REST API V1 keys
	LegacyId pulumi.StringPtrInput
	// The name of the notification configuration
	Name pulumi.StringPtrInput
	// Send email if problem is closed
	NotifyClosedProblems pulumi.BoolPtrInput
	// The ID of the associated alerting profile
	Profile pulumi.StringInput
	// The subject of the email notifications
	Subject pulumi.StringInput
	// The list of the email recipients
	Tos pulumi.StringArrayInput
}

func (EmailNotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*emailNotificationArgs)(nil)).Elem()
}

type EmailNotificationInput interface {
	pulumi.Input

	ToEmailNotificationOutput() EmailNotificationOutput
	ToEmailNotificationOutputWithContext(ctx context.Context) EmailNotificationOutput
}

func (*EmailNotification) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailNotification)(nil)).Elem()
}

func (i *EmailNotification) ToEmailNotificationOutput() EmailNotificationOutput {
	return i.ToEmailNotificationOutputWithContext(context.Background())
}

func (i *EmailNotification) ToEmailNotificationOutputWithContext(ctx context.Context) EmailNotificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailNotificationOutput)
}

// EmailNotificationArrayInput is an input type that accepts EmailNotificationArray and EmailNotificationArrayOutput values.
// You can construct a concrete instance of `EmailNotificationArrayInput` via:
//
//	EmailNotificationArray{ EmailNotificationArgs{...} }
type EmailNotificationArrayInput interface {
	pulumi.Input

	ToEmailNotificationArrayOutput() EmailNotificationArrayOutput
	ToEmailNotificationArrayOutputWithContext(context.Context) EmailNotificationArrayOutput
}

type EmailNotificationArray []EmailNotificationInput

func (EmailNotificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmailNotification)(nil)).Elem()
}

func (i EmailNotificationArray) ToEmailNotificationArrayOutput() EmailNotificationArrayOutput {
	return i.ToEmailNotificationArrayOutputWithContext(context.Background())
}

func (i EmailNotificationArray) ToEmailNotificationArrayOutputWithContext(ctx context.Context) EmailNotificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailNotificationArrayOutput)
}

// EmailNotificationMapInput is an input type that accepts EmailNotificationMap and EmailNotificationMapOutput values.
// You can construct a concrete instance of `EmailNotificationMapInput` via:
//
//	EmailNotificationMap{ "key": EmailNotificationArgs{...} }
type EmailNotificationMapInput interface {
	pulumi.Input

	ToEmailNotificationMapOutput() EmailNotificationMapOutput
	ToEmailNotificationMapOutputWithContext(context.Context) EmailNotificationMapOutput
}

type EmailNotificationMap map[string]EmailNotificationInput

func (EmailNotificationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmailNotification)(nil)).Elem()
}

func (i EmailNotificationMap) ToEmailNotificationMapOutput() EmailNotificationMapOutput {
	return i.ToEmailNotificationMapOutputWithContext(context.Background())
}

func (i EmailNotificationMap) ToEmailNotificationMapOutputWithContext(ctx context.Context) EmailNotificationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailNotificationMapOutput)
}

type EmailNotificationOutput struct{ *pulumi.OutputState }

func (EmailNotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailNotification)(nil)).Elem()
}

func (o EmailNotificationOutput) ToEmailNotificationOutput() EmailNotificationOutput {
	return o
}

func (o EmailNotificationOutput) ToEmailNotificationOutputWithContext(ctx context.Context) EmailNotificationOutput {
	return o
}

// The configuration is enabled (`true`) or disabled (`false`)
func (o EmailNotificationOutput) Active() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EmailNotification) pulumi.BoolPtrOutput { return v.Active }).(pulumi.BoolPtrOutput)
}

// The list of the email BCC-recipients
func (o EmailNotificationOutput) Bccs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EmailNotification) pulumi.StringArrayOutput { return v.Bccs }).(pulumi.StringArrayOutput)
}

// The template of the email notification.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
func (o EmailNotificationOutput) Body() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailNotification) pulumi.StringOutput { return v.Body }).(pulumi.StringOutput)
}

// The list of the email CC-recipients
func (o EmailNotificationOutput) Ccs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EmailNotification) pulumi.StringArrayOutput { return v.Ccs }).(pulumi.StringArrayOutput)
}

// The ID of these settings when referred to from resources requiring the REST API V1 keys
func (o EmailNotificationOutput) LegacyId() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailNotification) pulumi.StringOutput { return v.LegacyId }).(pulumi.StringOutput)
}

// The name of the notification configuration
func (o EmailNotificationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailNotification) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Send email if problem is closed
func (o EmailNotificationOutput) NotifyClosedProblems() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EmailNotification) pulumi.BoolPtrOutput { return v.NotifyClosedProblems }).(pulumi.BoolPtrOutput)
}

// The ID of the associated alerting profile
func (o EmailNotificationOutput) Profile() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailNotification) pulumi.StringOutput { return v.Profile }).(pulumi.StringOutput)
}

// The subject of the email notifications
func (o EmailNotificationOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailNotification) pulumi.StringOutput { return v.Subject }).(pulumi.StringOutput)
}

// The list of the email recipients
func (o EmailNotificationOutput) Tos() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EmailNotification) pulumi.StringArrayOutput { return v.Tos }).(pulumi.StringArrayOutput)
}

type EmailNotificationArrayOutput struct{ *pulumi.OutputState }

func (EmailNotificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmailNotification)(nil)).Elem()
}

func (o EmailNotificationArrayOutput) ToEmailNotificationArrayOutput() EmailNotificationArrayOutput {
	return o
}

func (o EmailNotificationArrayOutput) ToEmailNotificationArrayOutputWithContext(ctx context.Context) EmailNotificationArrayOutput {
	return o
}

func (o EmailNotificationArrayOutput) Index(i pulumi.IntInput) EmailNotificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EmailNotification {
		return vs[0].([]*EmailNotification)[vs[1].(int)]
	}).(EmailNotificationOutput)
}

type EmailNotificationMapOutput struct{ *pulumi.OutputState }

func (EmailNotificationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmailNotification)(nil)).Elem()
}

func (o EmailNotificationMapOutput) ToEmailNotificationMapOutput() EmailNotificationMapOutput {
	return o
}

func (o EmailNotificationMapOutput) ToEmailNotificationMapOutputWithContext(ctx context.Context) EmailNotificationMapOutput {
	return o
}

func (o EmailNotificationMapOutput) MapIndex(k pulumi.StringInput) EmailNotificationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EmailNotification {
		return vs[0].(map[string]*EmailNotification)[vs[1].(string)]
	}).(EmailNotificationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EmailNotificationInput)(nil)).Elem(), &EmailNotification{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmailNotificationArrayInput)(nil)).Elem(), EmailNotificationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmailNotificationMapInput)(nil)).Elem(), EmailNotificationMap{})
	pulumi.RegisterOutputType(EmailNotificationOutput{})
	pulumi.RegisterOutputType(EmailNotificationArrayOutput{})
	pulumi.RegisterOutputType(EmailNotificationMapOutput{})
}
