// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type HubPermissions struct {
	pulumi.CustomResourceState

	// Name
	Description pulumi.StringOutput `pulumi:"description"`
	// Contact Email
	Email pulumi.StringOutput `pulumi:"email"`
}

// NewHubPermissions registers a new resource with the given unique name, arguments, and options.
func NewHubPermissions(ctx *pulumi.Context,
	name string, args *HubPermissionsArgs, opts ...pulumi.ResourceOption) (*HubPermissions, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HubPermissions
	err := ctx.RegisterResource("dynatrace:index/hubPermissions:HubPermissions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHubPermissions gets an existing HubPermissions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHubPermissions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HubPermissionsState, opts ...pulumi.ResourceOption) (*HubPermissions, error) {
	var resource HubPermissions
	err := ctx.ReadResource("dynatrace:index/hubPermissions:HubPermissions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HubPermissions resources.
type hubPermissionsState struct {
	// Name
	Description *string `pulumi:"description"`
	// Contact Email
	Email *string `pulumi:"email"`
}

type HubPermissionsState struct {
	// Name
	Description pulumi.StringPtrInput
	// Contact Email
	Email pulumi.StringPtrInput
}

func (HubPermissionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*hubPermissionsState)(nil)).Elem()
}

type hubPermissionsArgs struct {
	// Name
	Description string `pulumi:"description"`
	// Contact Email
	Email string `pulumi:"email"`
}

// The set of arguments for constructing a HubPermissions resource.
type HubPermissionsArgs struct {
	// Name
	Description pulumi.StringInput
	// Contact Email
	Email pulumi.StringInput
}

func (HubPermissionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hubPermissionsArgs)(nil)).Elem()
}

type HubPermissionsInput interface {
	pulumi.Input

	ToHubPermissionsOutput() HubPermissionsOutput
	ToHubPermissionsOutputWithContext(ctx context.Context) HubPermissionsOutput
}

func (*HubPermissions) ElementType() reflect.Type {
	return reflect.TypeOf((**HubPermissions)(nil)).Elem()
}

func (i *HubPermissions) ToHubPermissionsOutput() HubPermissionsOutput {
	return i.ToHubPermissionsOutputWithContext(context.Background())
}

func (i *HubPermissions) ToHubPermissionsOutputWithContext(ctx context.Context) HubPermissionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubPermissionsOutput)
}

// HubPermissionsArrayInput is an input type that accepts HubPermissionsArray and HubPermissionsArrayOutput values.
// You can construct a concrete instance of `HubPermissionsArrayInput` via:
//
//	HubPermissionsArray{ HubPermissionsArgs{...} }
type HubPermissionsArrayInput interface {
	pulumi.Input

	ToHubPermissionsArrayOutput() HubPermissionsArrayOutput
	ToHubPermissionsArrayOutputWithContext(context.Context) HubPermissionsArrayOutput
}

type HubPermissionsArray []HubPermissionsInput

func (HubPermissionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HubPermissions)(nil)).Elem()
}

func (i HubPermissionsArray) ToHubPermissionsArrayOutput() HubPermissionsArrayOutput {
	return i.ToHubPermissionsArrayOutputWithContext(context.Background())
}

func (i HubPermissionsArray) ToHubPermissionsArrayOutputWithContext(ctx context.Context) HubPermissionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubPermissionsArrayOutput)
}

// HubPermissionsMapInput is an input type that accepts HubPermissionsMap and HubPermissionsMapOutput values.
// You can construct a concrete instance of `HubPermissionsMapInput` via:
//
//	HubPermissionsMap{ "key": HubPermissionsArgs{...} }
type HubPermissionsMapInput interface {
	pulumi.Input

	ToHubPermissionsMapOutput() HubPermissionsMapOutput
	ToHubPermissionsMapOutputWithContext(context.Context) HubPermissionsMapOutput
}

type HubPermissionsMap map[string]HubPermissionsInput

func (HubPermissionsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HubPermissions)(nil)).Elem()
}

func (i HubPermissionsMap) ToHubPermissionsMapOutput() HubPermissionsMapOutput {
	return i.ToHubPermissionsMapOutputWithContext(context.Background())
}

func (i HubPermissionsMap) ToHubPermissionsMapOutputWithContext(ctx context.Context) HubPermissionsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubPermissionsMapOutput)
}

type HubPermissionsOutput struct{ *pulumi.OutputState }

func (HubPermissionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HubPermissions)(nil)).Elem()
}

func (o HubPermissionsOutput) ToHubPermissionsOutput() HubPermissionsOutput {
	return o
}

func (o HubPermissionsOutput) ToHubPermissionsOutputWithContext(ctx context.Context) HubPermissionsOutput {
	return o
}

// Name
func (o HubPermissionsOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *HubPermissions) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Contact Email
func (o HubPermissionsOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *HubPermissions) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

type HubPermissionsArrayOutput struct{ *pulumi.OutputState }

func (HubPermissionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HubPermissions)(nil)).Elem()
}

func (o HubPermissionsArrayOutput) ToHubPermissionsArrayOutput() HubPermissionsArrayOutput {
	return o
}

func (o HubPermissionsArrayOutput) ToHubPermissionsArrayOutputWithContext(ctx context.Context) HubPermissionsArrayOutput {
	return o
}

func (o HubPermissionsArrayOutput) Index(i pulumi.IntInput) HubPermissionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HubPermissions {
		return vs[0].([]*HubPermissions)[vs[1].(int)]
	}).(HubPermissionsOutput)
}

type HubPermissionsMapOutput struct{ *pulumi.OutputState }

func (HubPermissionsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HubPermissions)(nil)).Elem()
}

func (o HubPermissionsMapOutput) ToHubPermissionsMapOutput() HubPermissionsMapOutput {
	return o
}

func (o HubPermissionsMapOutput) ToHubPermissionsMapOutputWithContext(ctx context.Context) HubPermissionsMapOutput {
	return o
}

func (o HubPermissionsMapOutput) MapIndex(k pulumi.StringInput) HubPermissionsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HubPermissions {
		return vs[0].(map[string]*HubPermissions)[vs[1].(string)]
	}).(HubPermissionsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HubPermissionsInput)(nil)).Elem(), &HubPermissions{})
	pulumi.RegisterInputType(reflect.TypeOf((*HubPermissionsArrayInput)(nil)).Elem(), HubPermissionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HubPermissionsMapInput)(nil)).Elem(), HubPermissionsMap{})
	pulumi.RegisterOutputType(HubPermissionsOutput{})
	pulumi.RegisterOutputType(HubPermissionsArrayOutput{})
	pulumi.RegisterOutputType(HubPermissionsMapOutput{})
}
