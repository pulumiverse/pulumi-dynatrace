// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type ContainerTechnology struct {
	pulumi.CustomResourceState

	// Platform: Cloud Foundry
	BoshProcessManager pulumi.BoolOutput `pulumi:"boshProcessManager"`
	// Platform: Kubernetes Status: Released Operating system: Linux Min agent version: 1.169
	Containerd pulumi.BoolOutput `pulumi:"containerd"`
	// Platform: Kubernetes Status: Released Operating system: Linux Min agent version: 1.163
	Crio pulumi.BoolOutput `pulumi:"crio"`
	// Platform: Docker and Kubernetes Status: Released Operating system: Linux
	Docker pulumi.BoolOutput `pulumi:"docker"`
	// Platform: Docker Status: Early adopter Operating system: Windows Min agent version: 1.149
	DockerWindows pulumi.BoolOutput `pulumi:"dockerWindows"`
	// Platform: Cloud Foundry Status: Released Operating system: Linux Min agent version: 1.133
	Garden pulumi.BoolOutput `pulumi:"garden"`
	// Platform: Podman Status: Released Operating system: Linux Min agent version: 1.267
	Podman pulumi.BoolOutput `pulumi:"podman"`
	// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
	// Platform: Cloud Foundry Status: Early adopter Operating system: Windows Min agent version: 1.175
	Winc pulumi.BoolOutput `pulumi:"winc"`
}

// NewContainerTechnology registers a new resource with the given unique name, arguments, and options.
func NewContainerTechnology(ctx *pulumi.Context,
	name string, args *ContainerTechnologyArgs, opts ...pulumi.ResourceOption) (*ContainerTechnology, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BoshProcessManager == nil {
		return nil, errors.New("invalid value for required argument 'BoshProcessManager'")
	}
	if args.Containerd == nil {
		return nil, errors.New("invalid value for required argument 'Containerd'")
	}
	if args.Crio == nil {
		return nil, errors.New("invalid value for required argument 'Crio'")
	}
	if args.Docker == nil {
		return nil, errors.New("invalid value for required argument 'Docker'")
	}
	if args.DockerWindows == nil {
		return nil, errors.New("invalid value for required argument 'DockerWindows'")
	}
	if args.Garden == nil {
		return nil, errors.New("invalid value for required argument 'Garden'")
	}
	if args.Podman == nil {
		return nil, errors.New("invalid value for required argument 'Podman'")
	}
	if args.Winc == nil {
		return nil, errors.New("invalid value for required argument 'Winc'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ContainerTechnology
	err := ctx.RegisterResource("dynatrace:index/containerTechnology:ContainerTechnology", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContainerTechnology gets an existing ContainerTechnology resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContainerTechnology(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContainerTechnologyState, opts ...pulumi.ResourceOption) (*ContainerTechnology, error) {
	var resource ContainerTechnology
	err := ctx.ReadResource("dynatrace:index/containerTechnology:ContainerTechnology", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContainerTechnology resources.
type containerTechnologyState struct {
	// Platform: Cloud Foundry
	BoshProcessManager *bool `pulumi:"boshProcessManager"`
	// Platform: Kubernetes Status: Released Operating system: Linux Min agent version: 1.169
	Containerd *bool `pulumi:"containerd"`
	// Platform: Kubernetes Status: Released Operating system: Linux Min agent version: 1.163
	Crio *bool `pulumi:"crio"`
	// Platform: Docker and Kubernetes Status: Released Operating system: Linux
	Docker *bool `pulumi:"docker"`
	// Platform: Docker Status: Early adopter Operating system: Windows Min agent version: 1.149
	DockerWindows *bool `pulumi:"dockerWindows"`
	// Platform: Cloud Foundry Status: Released Operating system: Linux Min agent version: 1.133
	Garden *bool `pulumi:"garden"`
	// Platform: Podman Status: Released Operating system: Linux Min agent version: 1.267
	Podman *bool `pulumi:"podman"`
	// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
	// Platform: Cloud Foundry Status: Early adopter Operating system: Windows Min agent version: 1.175
	Winc *bool `pulumi:"winc"`
}

type ContainerTechnologyState struct {
	// Platform: Cloud Foundry
	BoshProcessManager pulumi.BoolPtrInput
	// Platform: Kubernetes Status: Released Operating system: Linux Min agent version: 1.169
	Containerd pulumi.BoolPtrInput
	// Platform: Kubernetes Status: Released Operating system: Linux Min agent version: 1.163
	Crio pulumi.BoolPtrInput
	// Platform: Docker and Kubernetes Status: Released Operating system: Linux
	Docker pulumi.BoolPtrInput
	// Platform: Docker Status: Early adopter Operating system: Windows Min agent version: 1.149
	DockerWindows pulumi.BoolPtrInput
	// Platform: Cloud Foundry Status: Released Operating system: Linux Min agent version: 1.133
	Garden pulumi.BoolPtrInput
	// Platform: Podman Status: Released Operating system: Linux Min agent version: 1.267
	Podman pulumi.BoolPtrInput
	// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
	// Platform: Cloud Foundry Status: Early adopter Operating system: Windows Min agent version: 1.175
	Winc pulumi.BoolPtrInput
}

func (ContainerTechnologyState) ElementType() reflect.Type {
	return reflect.TypeOf((*containerTechnologyState)(nil)).Elem()
}

type containerTechnologyArgs struct {
	// Platform: Cloud Foundry
	BoshProcessManager bool `pulumi:"boshProcessManager"`
	// Platform: Kubernetes Status: Released Operating system: Linux Min agent version: 1.169
	Containerd bool `pulumi:"containerd"`
	// Platform: Kubernetes Status: Released Operating system: Linux Min agent version: 1.163
	Crio bool `pulumi:"crio"`
	// Platform: Docker and Kubernetes Status: Released Operating system: Linux
	Docker bool `pulumi:"docker"`
	// Platform: Docker Status: Early adopter Operating system: Windows Min agent version: 1.149
	DockerWindows bool `pulumi:"dockerWindows"`
	// Platform: Cloud Foundry Status: Released Operating system: Linux Min agent version: 1.133
	Garden bool `pulumi:"garden"`
	// Platform: Podman Status: Released Operating system: Linux Min agent version: 1.267
	Podman bool `pulumi:"podman"`
	// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
	// Platform: Cloud Foundry Status: Early adopter Operating system: Windows Min agent version: 1.175
	Winc bool `pulumi:"winc"`
}

// The set of arguments for constructing a ContainerTechnology resource.
type ContainerTechnologyArgs struct {
	// Platform: Cloud Foundry
	BoshProcessManager pulumi.BoolInput
	// Platform: Kubernetes Status: Released Operating system: Linux Min agent version: 1.169
	Containerd pulumi.BoolInput
	// Platform: Kubernetes Status: Released Operating system: Linux Min agent version: 1.163
	Crio pulumi.BoolInput
	// Platform: Docker and Kubernetes Status: Released Operating system: Linux
	Docker pulumi.BoolInput
	// Platform: Docker Status: Early adopter Operating system: Windows Min agent version: 1.149
	DockerWindows pulumi.BoolInput
	// Platform: Cloud Foundry Status: Released Operating system: Linux Min agent version: 1.133
	Garden pulumi.BoolInput
	// Platform: Podman Status: Released Operating system: Linux Min agent version: 1.267
	Podman pulumi.BoolInput
	// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
	// Platform: Cloud Foundry Status: Early adopter Operating system: Windows Min agent version: 1.175
	Winc pulumi.BoolInput
}

func (ContainerTechnologyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*containerTechnologyArgs)(nil)).Elem()
}

type ContainerTechnologyInput interface {
	pulumi.Input

	ToContainerTechnologyOutput() ContainerTechnologyOutput
	ToContainerTechnologyOutputWithContext(ctx context.Context) ContainerTechnologyOutput
}

func (*ContainerTechnology) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerTechnology)(nil)).Elem()
}

func (i *ContainerTechnology) ToContainerTechnologyOutput() ContainerTechnologyOutput {
	return i.ToContainerTechnologyOutputWithContext(context.Background())
}

func (i *ContainerTechnology) ToContainerTechnologyOutputWithContext(ctx context.Context) ContainerTechnologyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerTechnologyOutput)
}

// ContainerTechnologyArrayInput is an input type that accepts ContainerTechnologyArray and ContainerTechnologyArrayOutput values.
// You can construct a concrete instance of `ContainerTechnologyArrayInput` via:
//
//	ContainerTechnologyArray{ ContainerTechnologyArgs{...} }
type ContainerTechnologyArrayInput interface {
	pulumi.Input

	ToContainerTechnologyArrayOutput() ContainerTechnologyArrayOutput
	ToContainerTechnologyArrayOutputWithContext(context.Context) ContainerTechnologyArrayOutput
}

type ContainerTechnologyArray []ContainerTechnologyInput

func (ContainerTechnologyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContainerTechnology)(nil)).Elem()
}

func (i ContainerTechnologyArray) ToContainerTechnologyArrayOutput() ContainerTechnologyArrayOutput {
	return i.ToContainerTechnologyArrayOutputWithContext(context.Background())
}

func (i ContainerTechnologyArray) ToContainerTechnologyArrayOutputWithContext(ctx context.Context) ContainerTechnologyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerTechnologyArrayOutput)
}

// ContainerTechnologyMapInput is an input type that accepts ContainerTechnologyMap and ContainerTechnologyMapOutput values.
// You can construct a concrete instance of `ContainerTechnologyMapInput` via:
//
//	ContainerTechnologyMap{ "key": ContainerTechnologyArgs{...} }
type ContainerTechnologyMapInput interface {
	pulumi.Input

	ToContainerTechnologyMapOutput() ContainerTechnologyMapOutput
	ToContainerTechnologyMapOutputWithContext(context.Context) ContainerTechnologyMapOutput
}

type ContainerTechnologyMap map[string]ContainerTechnologyInput

func (ContainerTechnologyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContainerTechnology)(nil)).Elem()
}

func (i ContainerTechnologyMap) ToContainerTechnologyMapOutput() ContainerTechnologyMapOutput {
	return i.ToContainerTechnologyMapOutputWithContext(context.Background())
}

func (i ContainerTechnologyMap) ToContainerTechnologyMapOutputWithContext(ctx context.Context) ContainerTechnologyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerTechnologyMapOutput)
}

type ContainerTechnologyOutput struct{ *pulumi.OutputState }

func (ContainerTechnologyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerTechnology)(nil)).Elem()
}

func (o ContainerTechnologyOutput) ToContainerTechnologyOutput() ContainerTechnologyOutput {
	return o
}

func (o ContainerTechnologyOutput) ToContainerTechnologyOutputWithContext(ctx context.Context) ContainerTechnologyOutput {
	return o
}

// Platform: Cloud Foundry
func (o ContainerTechnologyOutput) BoshProcessManager() pulumi.BoolOutput {
	return o.ApplyT(func(v *ContainerTechnology) pulumi.BoolOutput { return v.BoshProcessManager }).(pulumi.BoolOutput)
}

// Platform: Kubernetes Status: Released Operating system: Linux Min agent version: 1.169
func (o ContainerTechnologyOutput) Containerd() pulumi.BoolOutput {
	return o.ApplyT(func(v *ContainerTechnology) pulumi.BoolOutput { return v.Containerd }).(pulumi.BoolOutput)
}

// Platform: Kubernetes Status: Released Operating system: Linux Min agent version: 1.163
func (o ContainerTechnologyOutput) Crio() pulumi.BoolOutput {
	return o.ApplyT(func(v *ContainerTechnology) pulumi.BoolOutput { return v.Crio }).(pulumi.BoolOutput)
}

// Platform: Docker and Kubernetes Status: Released Operating system: Linux
func (o ContainerTechnologyOutput) Docker() pulumi.BoolOutput {
	return o.ApplyT(func(v *ContainerTechnology) pulumi.BoolOutput { return v.Docker }).(pulumi.BoolOutput)
}

// Platform: Docker Status: Early adopter Operating system: Windows Min agent version: 1.149
func (o ContainerTechnologyOutput) DockerWindows() pulumi.BoolOutput {
	return o.ApplyT(func(v *ContainerTechnology) pulumi.BoolOutput { return v.DockerWindows }).(pulumi.BoolOutput)
}

// Platform: Cloud Foundry Status: Released Operating system: Linux Min agent version: 1.133
func (o ContainerTechnologyOutput) Garden() pulumi.BoolOutput {
	return o.ApplyT(func(v *ContainerTechnology) pulumi.BoolOutput { return v.Garden }).(pulumi.BoolOutput)
}

// Platform: Podman Status: Released Operating system: Linux Min agent version: 1.267
func (o ContainerTechnologyOutput) Podman() pulumi.BoolOutput {
	return o.ApplyT(func(v *ContainerTechnology) pulumi.BoolOutput { return v.Podman }).(pulumi.BoolOutput)
}

// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
func (o ContainerTechnologyOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerTechnology) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

// Platform: Cloud Foundry Status: Early adopter Operating system: Windows Min agent version: 1.175
func (o ContainerTechnologyOutput) Winc() pulumi.BoolOutput {
	return o.ApplyT(func(v *ContainerTechnology) pulumi.BoolOutput { return v.Winc }).(pulumi.BoolOutput)
}

type ContainerTechnologyArrayOutput struct{ *pulumi.OutputState }

func (ContainerTechnologyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContainerTechnology)(nil)).Elem()
}

func (o ContainerTechnologyArrayOutput) ToContainerTechnologyArrayOutput() ContainerTechnologyArrayOutput {
	return o
}

func (o ContainerTechnologyArrayOutput) ToContainerTechnologyArrayOutputWithContext(ctx context.Context) ContainerTechnologyArrayOutput {
	return o
}

func (o ContainerTechnologyArrayOutput) Index(i pulumi.IntInput) ContainerTechnologyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ContainerTechnology {
		return vs[0].([]*ContainerTechnology)[vs[1].(int)]
	}).(ContainerTechnologyOutput)
}

type ContainerTechnologyMapOutput struct{ *pulumi.OutputState }

func (ContainerTechnologyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContainerTechnology)(nil)).Elem()
}

func (o ContainerTechnologyMapOutput) ToContainerTechnologyMapOutput() ContainerTechnologyMapOutput {
	return o
}

func (o ContainerTechnologyMapOutput) ToContainerTechnologyMapOutputWithContext(ctx context.Context) ContainerTechnologyMapOutput {
	return o
}

func (o ContainerTechnologyMapOutput) MapIndex(k pulumi.StringInput) ContainerTechnologyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ContainerTechnology {
		return vs[0].(map[string]*ContainerTechnology)[vs[1].(string)]
	}).(ContainerTechnologyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerTechnologyInput)(nil)).Elem(), &ContainerTechnology{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerTechnologyArrayInput)(nil)).Elem(), ContainerTechnologyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerTechnologyMapInput)(nil)).Elem(), ContainerTechnologyMap{})
	pulumi.RegisterOutputType(ContainerTechnologyOutput{})
	pulumi.RegisterOutputType(ContainerTechnologyArrayOutput{})
	pulumi.RegisterOutputType(ContainerTechnologyMapOutput{})
}
