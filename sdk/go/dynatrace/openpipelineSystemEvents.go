// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OpenpipelineSystemEvents struct {
	pulumi.CustomResourceState

	// List of all ingest sources of the configuration
	Endpoints OpenpipelineSystemEventsEndpointsPtrOutput `pulumi:"endpoints"`
	// List of all pipelines of the configuration
	Pipelines OpenpipelineSystemEventsPipelinesPtrOutput `pulumi:"pipelines"`
	// Dynamic routing definition
	Routing OpenpipelineSystemEventsRoutingPtrOutput `pulumi:"routing"`
}

// NewOpenpipelineSystemEvents registers a new resource with the given unique name, arguments, and options.
func NewOpenpipelineSystemEvents(ctx *pulumi.Context,
	name string, args *OpenpipelineSystemEventsArgs, opts ...pulumi.ResourceOption) (*OpenpipelineSystemEvents, error) {
	if args == nil {
		args = &OpenpipelineSystemEventsArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenpipelineSystemEvents
	err := ctx.RegisterResource("dynatrace:index/openpipelineSystemEvents:OpenpipelineSystemEvents", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenpipelineSystemEvents gets an existing OpenpipelineSystemEvents resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenpipelineSystemEvents(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenpipelineSystemEventsState, opts ...pulumi.ResourceOption) (*OpenpipelineSystemEvents, error) {
	var resource OpenpipelineSystemEvents
	err := ctx.ReadResource("dynatrace:index/openpipelineSystemEvents:OpenpipelineSystemEvents", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenpipelineSystemEvents resources.
type openpipelineSystemEventsState struct {
	// List of all ingest sources of the configuration
	Endpoints *OpenpipelineSystemEventsEndpoints `pulumi:"endpoints"`
	// List of all pipelines of the configuration
	Pipelines *OpenpipelineSystemEventsPipelines `pulumi:"pipelines"`
	// Dynamic routing definition
	Routing *OpenpipelineSystemEventsRouting `pulumi:"routing"`
}

type OpenpipelineSystemEventsState struct {
	// List of all ingest sources of the configuration
	Endpoints OpenpipelineSystemEventsEndpointsPtrInput
	// List of all pipelines of the configuration
	Pipelines OpenpipelineSystemEventsPipelinesPtrInput
	// Dynamic routing definition
	Routing OpenpipelineSystemEventsRoutingPtrInput
}

func (OpenpipelineSystemEventsState) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineSystemEventsState)(nil)).Elem()
}

type openpipelineSystemEventsArgs struct {
	// List of all ingest sources of the configuration
	Endpoints *OpenpipelineSystemEventsEndpoints `pulumi:"endpoints"`
	// List of all pipelines of the configuration
	Pipelines *OpenpipelineSystemEventsPipelines `pulumi:"pipelines"`
	// Dynamic routing definition
	Routing *OpenpipelineSystemEventsRouting `pulumi:"routing"`
}

// The set of arguments for constructing a OpenpipelineSystemEvents resource.
type OpenpipelineSystemEventsArgs struct {
	// List of all ingest sources of the configuration
	Endpoints OpenpipelineSystemEventsEndpointsPtrInput
	// List of all pipelines of the configuration
	Pipelines OpenpipelineSystemEventsPipelinesPtrInput
	// Dynamic routing definition
	Routing OpenpipelineSystemEventsRoutingPtrInput
}

func (OpenpipelineSystemEventsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineSystemEventsArgs)(nil)).Elem()
}

type OpenpipelineSystemEventsInput interface {
	pulumi.Input

	ToOpenpipelineSystemEventsOutput() OpenpipelineSystemEventsOutput
	ToOpenpipelineSystemEventsOutputWithContext(ctx context.Context) OpenpipelineSystemEventsOutput
}

func (*OpenpipelineSystemEvents) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineSystemEvents)(nil)).Elem()
}

func (i *OpenpipelineSystemEvents) ToOpenpipelineSystemEventsOutput() OpenpipelineSystemEventsOutput {
	return i.ToOpenpipelineSystemEventsOutputWithContext(context.Background())
}

func (i *OpenpipelineSystemEvents) ToOpenpipelineSystemEventsOutputWithContext(ctx context.Context) OpenpipelineSystemEventsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineSystemEventsOutput)
}

// OpenpipelineSystemEventsArrayInput is an input type that accepts OpenpipelineSystemEventsArray and OpenpipelineSystemEventsArrayOutput values.
// You can construct a concrete instance of `OpenpipelineSystemEventsArrayInput` via:
//
//	OpenpipelineSystemEventsArray{ OpenpipelineSystemEventsArgs{...} }
type OpenpipelineSystemEventsArrayInput interface {
	pulumi.Input

	ToOpenpipelineSystemEventsArrayOutput() OpenpipelineSystemEventsArrayOutput
	ToOpenpipelineSystemEventsArrayOutputWithContext(context.Context) OpenpipelineSystemEventsArrayOutput
}

type OpenpipelineSystemEventsArray []OpenpipelineSystemEventsInput

func (OpenpipelineSystemEventsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineSystemEvents)(nil)).Elem()
}

func (i OpenpipelineSystemEventsArray) ToOpenpipelineSystemEventsArrayOutput() OpenpipelineSystemEventsArrayOutput {
	return i.ToOpenpipelineSystemEventsArrayOutputWithContext(context.Background())
}

func (i OpenpipelineSystemEventsArray) ToOpenpipelineSystemEventsArrayOutputWithContext(ctx context.Context) OpenpipelineSystemEventsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineSystemEventsArrayOutput)
}

// OpenpipelineSystemEventsMapInput is an input type that accepts OpenpipelineSystemEventsMap and OpenpipelineSystemEventsMapOutput values.
// You can construct a concrete instance of `OpenpipelineSystemEventsMapInput` via:
//
//	OpenpipelineSystemEventsMap{ "key": OpenpipelineSystemEventsArgs{...} }
type OpenpipelineSystemEventsMapInput interface {
	pulumi.Input

	ToOpenpipelineSystemEventsMapOutput() OpenpipelineSystemEventsMapOutput
	ToOpenpipelineSystemEventsMapOutputWithContext(context.Context) OpenpipelineSystemEventsMapOutput
}

type OpenpipelineSystemEventsMap map[string]OpenpipelineSystemEventsInput

func (OpenpipelineSystemEventsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineSystemEvents)(nil)).Elem()
}

func (i OpenpipelineSystemEventsMap) ToOpenpipelineSystemEventsMapOutput() OpenpipelineSystemEventsMapOutput {
	return i.ToOpenpipelineSystemEventsMapOutputWithContext(context.Background())
}

func (i OpenpipelineSystemEventsMap) ToOpenpipelineSystemEventsMapOutputWithContext(ctx context.Context) OpenpipelineSystemEventsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineSystemEventsMapOutput)
}

type OpenpipelineSystemEventsOutput struct{ *pulumi.OutputState }

func (OpenpipelineSystemEventsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineSystemEvents)(nil)).Elem()
}

func (o OpenpipelineSystemEventsOutput) ToOpenpipelineSystemEventsOutput() OpenpipelineSystemEventsOutput {
	return o
}

func (o OpenpipelineSystemEventsOutput) ToOpenpipelineSystemEventsOutputWithContext(ctx context.Context) OpenpipelineSystemEventsOutput {
	return o
}

// List of all ingest sources of the configuration
func (o OpenpipelineSystemEventsOutput) Endpoints() OpenpipelineSystemEventsEndpointsPtrOutput {
	return o.ApplyT(func(v *OpenpipelineSystemEvents) OpenpipelineSystemEventsEndpointsPtrOutput { return v.Endpoints }).(OpenpipelineSystemEventsEndpointsPtrOutput)
}

// List of all pipelines of the configuration
func (o OpenpipelineSystemEventsOutput) Pipelines() OpenpipelineSystemEventsPipelinesPtrOutput {
	return o.ApplyT(func(v *OpenpipelineSystemEvents) OpenpipelineSystemEventsPipelinesPtrOutput { return v.Pipelines }).(OpenpipelineSystemEventsPipelinesPtrOutput)
}

// Dynamic routing definition
func (o OpenpipelineSystemEventsOutput) Routing() OpenpipelineSystemEventsRoutingPtrOutput {
	return o.ApplyT(func(v *OpenpipelineSystemEvents) OpenpipelineSystemEventsRoutingPtrOutput { return v.Routing }).(OpenpipelineSystemEventsRoutingPtrOutput)
}

type OpenpipelineSystemEventsArrayOutput struct{ *pulumi.OutputState }

func (OpenpipelineSystemEventsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineSystemEvents)(nil)).Elem()
}

func (o OpenpipelineSystemEventsArrayOutput) ToOpenpipelineSystemEventsArrayOutput() OpenpipelineSystemEventsArrayOutput {
	return o
}

func (o OpenpipelineSystemEventsArrayOutput) ToOpenpipelineSystemEventsArrayOutputWithContext(ctx context.Context) OpenpipelineSystemEventsArrayOutput {
	return o
}

func (o OpenpipelineSystemEventsArrayOutput) Index(i pulumi.IntInput) OpenpipelineSystemEventsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenpipelineSystemEvents {
		return vs[0].([]*OpenpipelineSystemEvents)[vs[1].(int)]
	}).(OpenpipelineSystemEventsOutput)
}

type OpenpipelineSystemEventsMapOutput struct{ *pulumi.OutputState }

func (OpenpipelineSystemEventsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineSystemEvents)(nil)).Elem()
}

func (o OpenpipelineSystemEventsMapOutput) ToOpenpipelineSystemEventsMapOutput() OpenpipelineSystemEventsMapOutput {
	return o
}

func (o OpenpipelineSystemEventsMapOutput) ToOpenpipelineSystemEventsMapOutputWithContext(ctx context.Context) OpenpipelineSystemEventsMapOutput {
	return o
}

func (o OpenpipelineSystemEventsMapOutput) MapIndex(k pulumi.StringInput) OpenpipelineSystemEventsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenpipelineSystemEvents {
		return vs[0].(map[string]*OpenpipelineSystemEvents)[vs[1].(string)]
	}).(OpenpipelineSystemEventsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineSystemEventsInput)(nil)).Elem(), &OpenpipelineSystemEvents{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineSystemEventsArrayInput)(nil)).Elem(), OpenpipelineSystemEventsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineSystemEventsMapInput)(nil)).Elem(), OpenpipelineSystemEventsMap{})
	pulumi.RegisterOutputType(OpenpipelineSystemEventsOutput{})
	pulumi.RegisterOutputType(OpenpipelineSystemEventsArrayOutput{})
	pulumi.RegisterOutputType(OpenpipelineSystemEventsMapOutput{})
}
