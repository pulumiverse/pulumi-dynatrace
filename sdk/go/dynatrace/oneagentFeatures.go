// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OneagentFeatures struct {
	pulumi.CustomResourceState

	_restore_ pulumi.StringOutput `pulumi:"_restore_"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Activate this feature also in OneAgents only fulfilling the minimum Opt-In version
	Forcible pulumi.BoolPtrOutput `pulumi:"forcible"`
	// Instrumentation enabled (change needs a process restart)
	Instrumentation pulumi.BoolPtrOutput `pulumi:"instrumentation"`
	// Feature
	Key pulumi.StringOutput `pulumi:"key"`
	// The scope of this setting (PROCESS*GROUP*INSTANCE, PROCESS_GROUP). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
}

// NewOneagentFeatures registers a new resource with the given unique name, arguments, and options.
func NewOneagentFeatures(ctx *pulumi.Context,
	name string, args *OneagentFeaturesArgs, opts ...pulumi.ResourceOption) (*OneagentFeatures, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OneagentFeatures
	err := ctx.RegisterResource("dynatrace:index/oneagentFeatures:OneagentFeatures", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOneagentFeatures gets an existing OneagentFeatures resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOneagentFeatures(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OneagentFeaturesState, opts ...pulumi.ResourceOption) (*OneagentFeatures, error) {
	var resource OneagentFeatures
	err := ctx.ReadResource("dynatrace:index/oneagentFeatures:OneagentFeatures", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OneagentFeatures resources.
type oneagentFeaturesState struct {
	_restore_ *string `pulumi:"_restore_"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// Activate this feature also in OneAgents only fulfilling the minimum Opt-In version
	Forcible *bool `pulumi:"forcible"`
	// Instrumentation enabled (change needs a process restart)
	Instrumentation *bool `pulumi:"instrumentation"`
	// Feature
	Key *string `pulumi:"key"`
	// The scope of this setting (PROCESS*GROUP*INSTANCE, PROCESS_GROUP). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
}

type OneagentFeaturesState struct {
	_restore_ pulumi.StringPtrInput
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// Activate this feature also in OneAgents only fulfilling the minimum Opt-In version
	Forcible pulumi.BoolPtrInput
	// Instrumentation enabled (change needs a process restart)
	Instrumentation pulumi.BoolPtrInput
	// Feature
	Key pulumi.StringPtrInput
	// The scope of this setting (PROCESS*GROUP*INSTANCE, PROCESS_GROUP). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
}

func (OneagentFeaturesState) ElementType() reflect.Type {
	return reflect.TypeOf((*oneagentFeaturesState)(nil)).Elem()
}

type oneagentFeaturesArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// Activate this feature also in OneAgents only fulfilling the minimum Opt-In version
	Forcible *bool `pulumi:"forcible"`
	// Instrumentation enabled (change needs a process restart)
	Instrumentation *bool `pulumi:"instrumentation"`
	// Feature
	Key string `pulumi:"key"`
	// The scope of this setting (PROCESS*GROUP*INSTANCE, PROCESS_GROUP). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
}

// The set of arguments for constructing a OneagentFeatures resource.
type OneagentFeaturesArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// Activate this feature also in OneAgents only fulfilling the minimum Opt-In version
	Forcible pulumi.BoolPtrInput
	// Instrumentation enabled (change needs a process restart)
	Instrumentation pulumi.BoolPtrInput
	// Feature
	Key pulumi.StringInput
	// The scope of this setting (PROCESS*GROUP*INSTANCE, PROCESS_GROUP). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
}

func (OneagentFeaturesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*oneagentFeaturesArgs)(nil)).Elem()
}

type OneagentFeaturesInput interface {
	pulumi.Input

	ToOneagentFeaturesOutput() OneagentFeaturesOutput
	ToOneagentFeaturesOutputWithContext(ctx context.Context) OneagentFeaturesOutput
}

func (*OneagentFeatures) ElementType() reflect.Type {
	return reflect.TypeOf((**OneagentFeatures)(nil)).Elem()
}

func (i *OneagentFeatures) ToOneagentFeaturesOutput() OneagentFeaturesOutput {
	return i.ToOneagentFeaturesOutputWithContext(context.Background())
}

func (i *OneagentFeatures) ToOneagentFeaturesOutputWithContext(ctx context.Context) OneagentFeaturesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneagentFeaturesOutput)
}

// OneagentFeaturesArrayInput is an input type that accepts OneagentFeaturesArray and OneagentFeaturesArrayOutput values.
// You can construct a concrete instance of `OneagentFeaturesArrayInput` via:
//
//	OneagentFeaturesArray{ OneagentFeaturesArgs{...} }
type OneagentFeaturesArrayInput interface {
	pulumi.Input

	ToOneagentFeaturesArrayOutput() OneagentFeaturesArrayOutput
	ToOneagentFeaturesArrayOutputWithContext(context.Context) OneagentFeaturesArrayOutput
}

type OneagentFeaturesArray []OneagentFeaturesInput

func (OneagentFeaturesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OneagentFeatures)(nil)).Elem()
}

func (i OneagentFeaturesArray) ToOneagentFeaturesArrayOutput() OneagentFeaturesArrayOutput {
	return i.ToOneagentFeaturesArrayOutputWithContext(context.Background())
}

func (i OneagentFeaturesArray) ToOneagentFeaturesArrayOutputWithContext(ctx context.Context) OneagentFeaturesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneagentFeaturesArrayOutput)
}

// OneagentFeaturesMapInput is an input type that accepts OneagentFeaturesMap and OneagentFeaturesMapOutput values.
// You can construct a concrete instance of `OneagentFeaturesMapInput` via:
//
//	OneagentFeaturesMap{ "key": OneagentFeaturesArgs{...} }
type OneagentFeaturesMapInput interface {
	pulumi.Input

	ToOneagentFeaturesMapOutput() OneagentFeaturesMapOutput
	ToOneagentFeaturesMapOutputWithContext(context.Context) OneagentFeaturesMapOutput
}

type OneagentFeaturesMap map[string]OneagentFeaturesInput

func (OneagentFeaturesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OneagentFeatures)(nil)).Elem()
}

func (i OneagentFeaturesMap) ToOneagentFeaturesMapOutput() OneagentFeaturesMapOutput {
	return i.ToOneagentFeaturesMapOutputWithContext(context.Background())
}

func (i OneagentFeaturesMap) ToOneagentFeaturesMapOutputWithContext(ctx context.Context) OneagentFeaturesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneagentFeaturesMapOutput)
}

type OneagentFeaturesOutput struct{ *pulumi.OutputState }

func (OneagentFeaturesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OneagentFeatures)(nil)).Elem()
}

func (o OneagentFeaturesOutput) ToOneagentFeaturesOutput() OneagentFeaturesOutput {
	return o
}

func (o OneagentFeaturesOutput) ToOneagentFeaturesOutputWithContext(ctx context.Context) OneagentFeaturesOutput {
	return o
}

func (o OneagentFeaturesOutput) _restore_() pulumi.StringOutput {
	return o.ApplyT(func(v *OneagentFeatures) pulumi.StringOutput { return v._restore_ }).(pulumi.StringOutput)
}

// This setting is enabled (`true`) or disabled (`false`)
func (o OneagentFeaturesOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *OneagentFeatures) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Activate this feature also in OneAgents only fulfilling the minimum Opt-In version
func (o OneagentFeaturesOutput) Forcible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OneagentFeatures) pulumi.BoolPtrOutput { return v.Forcible }).(pulumi.BoolPtrOutput)
}

// Instrumentation enabled (change needs a process restart)
func (o OneagentFeaturesOutput) Instrumentation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OneagentFeatures) pulumi.BoolPtrOutput { return v.Instrumentation }).(pulumi.BoolPtrOutput)
}

// Feature
func (o OneagentFeaturesOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *OneagentFeatures) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// The scope of this setting (PROCESS*GROUP*INSTANCE, PROCESS_GROUP). Omit this property if you want to cover the whole environment.
func (o OneagentFeaturesOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OneagentFeatures) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

type OneagentFeaturesArrayOutput struct{ *pulumi.OutputState }

func (OneagentFeaturesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OneagentFeatures)(nil)).Elem()
}

func (o OneagentFeaturesArrayOutput) ToOneagentFeaturesArrayOutput() OneagentFeaturesArrayOutput {
	return o
}

func (o OneagentFeaturesArrayOutput) ToOneagentFeaturesArrayOutputWithContext(ctx context.Context) OneagentFeaturesArrayOutput {
	return o
}

func (o OneagentFeaturesArrayOutput) Index(i pulumi.IntInput) OneagentFeaturesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OneagentFeatures {
		return vs[0].([]*OneagentFeatures)[vs[1].(int)]
	}).(OneagentFeaturesOutput)
}

type OneagentFeaturesMapOutput struct{ *pulumi.OutputState }

func (OneagentFeaturesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OneagentFeatures)(nil)).Elem()
}

func (o OneagentFeaturesMapOutput) ToOneagentFeaturesMapOutput() OneagentFeaturesMapOutput {
	return o
}

func (o OneagentFeaturesMapOutput) ToOneagentFeaturesMapOutputWithContext(ctx context.Context) OneagentFeaturesMapOutput {
	return o
}

func (o OneagentFeaturesMapOutput) MapIndex(k pulumi.StringInput) OneagentFeaturesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OneagentFeatures {
		return vs[0].(map[string]*OneagentFeatures)[vs[1].(string)]
	}).(OneagentFeaturesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OneagentFeaturesInput)(nil)).Elem(), &OneagentFeatures{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneagentFeaturesArrayInput)(nil)).Elem(), OneagentFeaturesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneagentFeaturesMapInput)(nil)).Elem(), OneagentFeaturesMap{})
	pulumi.RegisterOutputType(OneagentFeaturesOutput{})
	pulumi.RegisterOutputType(OneagentFeaturesArrayOutput{})
	pulumi.RegisterOutputType(OneagentFeaturesMapOutput{})
}
