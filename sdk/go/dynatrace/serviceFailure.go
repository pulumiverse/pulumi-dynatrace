// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type ServiceFailure struct {
	pulumi.CustomResourceState

	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Customize failure detection for specific exceptions and errors
	ExceptionRules ServiceFailureExceptionRulesPtrOutput `pulumi:"exceptionRules"`
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
}

// NewServiceFailure registers a new resource with the given unique name, arguments, and options.
func NewServiceFailure(ctx *pulumi.Context,
	name string, args *ServiceFailureArgs, opts ...pulumi.ResourceOption) (*ServiceFailure, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceFailure
	err := ctx.RegisterResource("dynatrace:index/serviceFailure:ServiceFailure", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceFailure gets an existing ServiceFailure resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceFailure(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceFailureState, opts ...pulumi.ResourceOption) (*ServiceFailure, error) {
	var resource ServiceFailure
	err := ctx.ReadResource("dynatrace:index/serviceFailure:ServiceFailure", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceFailure resources.
type serviceFailureState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// Customize failure detection for specific exceptions and errors
	ExceptionRules *ServiceFailureExceptionRules `pulumi:"exceptionRules"`
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ServiceId *string `pulumi:"serviceId"`
}

type ServiceFailureState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// Customize failure detection for specific exceptions and errors
	ExceptionRules ServiceFailureExceptionRulesPtrInput
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ServiceId pulumi.StringPtrInput
}

func (ServiceFailureState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceFailureState)(nil)).Elem()
}

type serviceFailureArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// Customize failure detection for specific exceptions and errors
	ExceptionRules *ServiceFailureExceptionRules `pulumi:"exceptionRules"`
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ServiceId string `pulumi:"serviceId"`
}

// The set of arguments for constructing a ServiceFailure resource.
type ServiceFailureArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// Customize failure detection for specific exceptions and errors
	ExceptionRules ServiceFailureExceptionRulesPtrInput
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ServiceId pulumi.StringInput
}

func (ServiceFailureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceFailureArgs)(nil)).Elem()
}

type ServiceFailureInput interface {
	pulumi.Input

	ToServiceFailureOutput() ServiceFailureOutput
	ToServiceFailureOutputWithContext(ctx context.Context) ServiceFailureOutput
}

func (*ServiceFailure) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceFailure)(nil)).Elem()
}

func (i *ServiceFailure) ToServiceFailureOutput() ServiceFailureOutput {
	return i.ToServiceFailureOutputWithContext(context.Background())
}

func (i *ServiceFailure) ToServiceFailureOutputWithContext(ctx context.Context) ServiceFailureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceFailureOutput)
}

// ServiceFailureArrayInput is an input type that accepts ServiceFailureArray and ServiceFailureArrayOutput values.
// You can construct a concrete instance of `ServiceFailureArrayInput` via:
//
//	ServiceFailureArray{ ServiceFailureArgs{...} }
type ServiceFailureArrayInput interface {
	pulumi.Input

	ToServiceFailureArrayOutput() ServiceFailureArrayOutput
	ToServiceFailureArrayOutputWithContext(context.Context) ServiceFailureArrayOutput
}

type ServiceFailureArray []ServiceFailureInput

func (ServiceFailureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceFailure)(nil)).Elem()
}

func (i ServiceFailureArray) ToServiceFailureArrayOutput() ServiceFailureArrayOutput {
	return i.ToServiceFailureArrayOutputWithContext(context.Background())
}

func (i ServiceFailureArray) ToServiceFailureArrayOutputWithContext(ctx context.Context) ServiceFailureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceFailureArrayOutput)
}

// ServiceFailureMapInput is an input type that accepts ServiceFailureMap and ServiceFailureMapOutput values.
// You can construct a concrete instance of `ServiceFailureMapInput` via:
//
//	ServiceFailureMap{ "key": ServiceFailureArgs{...} }
type ServiceFailureMapInput interface {
	pulumi.Input

	ToServiceFailureMapOutput() ServiceFailureMapOutput
	ToServiceFailureMapOutputWithContext(context.Context) ServiceFailureMapOutput
}

type ServiceFailureMap map[string]ServiceFailureInput

func (ServiceFailureMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceFailure)(nil)).Elem()
}

func (i ServiceFailureMap) ToServiceFailureMapOutput() ServiceFailureMapOutput {
	return i.ToServiceFailureMapOutputWithContext(context.Background())
}

func (i ServiceFailureMap) ToServiceFailureMapOutputWithContext(ctx context.Context) ServiceFailureMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceFailureMapOutput)
}

type ServiceFailureOutput struct{ *pulumi.OutputState }

func (ServiceFailureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceFailure)(nil)).Elem()
}

func (o ServiceFailureOutput) ToServiceFailureOutput() ServiceFailureOutput {
	return o
}

func (o ServiceFailureOutput) ToServiceFailureOutputWithContext(ctx context.Context) ServiceFailureOutput {
	return o
}

// This setting is enabled (`true`) or disabled (`false`)
func (o ServiceFailureOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ServiceFailure) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Customize failure detection for specific exceptions and errors
func (o ServiceFailureOutput) ExceptionRules() ServiceFailureExceptionRulesPtrOutput {
	return o.ApplyT(func(v *ServiceFailure) ServiceFailureExceptionRulesPtrOutput { return v.ExceptionRules }).(ServiceFailureExceptionRulesPtrOutput)
}

// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
func (o ServiceFailureOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceFailure) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

type ServiceFailureArrayOutput struct{ *pulumi.OutputState }

func (ServiceFailureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceFailure)(nil)).Elem()
}

func (o ServiceFailureArrayOutput) ToServiceFailureArrayOutput() ServiceFailureArrayOutput {
	return o
}

func (o ServiceFailureArrayOutput) ToServiceFailureArrayOutputWithContext(ctx context.Context) ServiceFailureArrayOutput {
	return o
}

func (o ServiceFailureArrayOutput) Index(i pulumi.IntInput) ServiceFailureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceFailure {
		return vs[0].([]*ServiceFailure)[vs[1].(int)]
	}).(ServiceFailureOutput)
}

type ServiceFailureMapOutput struct{ *pulumi.OutputState }

func (ServiceFailureMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceFailure)(nil)).Elem()
}

func (o ServiceFailureMapOutput) ToServiceFailureMapOutput() ServiceFailureMapOutput {
	return o
}

func (o ServiceFailureMapOutput) ToServiceFailureMapOutputWithContext(ctx context.Context) ServiceFailureMapOutput {
	return o
}

func (o ServiceFailureMapOutput) MapIndex(k pulumi.StringInput) ServiceFailureOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceFailure {
		return vs[0].(map[string]*ServiceFailure)[vs[1].(string)]
	}).(ServiceFailureOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceFailureInput)(nil)).Elem(), &ServiceFailure{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceFailureArrayInput)(nil)).Elem(), ServiceFailureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceFailureMapInput)(nil)).Elem(), ServiceFailureMap{})
	pulumi.RegisterOutputType(ServiceFailureOutput{})
	pulumi.RegisterOutputType(ServiceFailureArrayOutput{})
	pulumi.RegisterOutputType(ServiceFailureMapOutput{})
}
