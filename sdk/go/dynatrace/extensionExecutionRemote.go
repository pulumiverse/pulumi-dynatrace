// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type ExtensionExecutionRemote struct {
	pulumi.CustomResourceState

	// Select performance profile for Extension Execution Controller [Documentation](https://www.dynatrace.com/support/help/shortlink/extensions-concepts#resource-consumption)
	PerformanceProfile pulumi.StringOutput `pulumi:"performanceProfile"`
	// The scope of this setting (ENVIRONMENT*ACTIVE*GATE)
	Scope pulumi.StringOutput `pulumi:"scope"`
}

// NewExtensionExecutionRemote registers a new resource with the given unique name, arguments, and options.
func NewExtensionExecutionRemote(ctx *pulumi.Context,
	name string, args *ExtensionExecutionRemoteArgs, opts ...pulumi.ResourceOption) (*ExtensionExecutionRemote, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PerformanceProfile == nil {
		return nil, errors.New("invalid value for required argument 'PerformanceProfile'")
	}
	if args.Scope == nil {
		return nil, errors.New("invalid value for required argument 'Scope'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ExtensionExecutionRemote
	err := ctx.RegisterResource("dynatrace:index/extensionExecutionRemote:ExtensionExecutionRemote", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExtensionExecutionRemote gets an existing ExtensionExecutionRemote resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExtensionExecutionRemote(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExtensionExecutionRemoteState, opts ...pulumi.ResourceOption) (*ExtensionExecutionRemote, error) {
	var resource ExtensionExecutionRemote
	err := ctx.ReadResource("dynatrace:index/extensionExecutionRemote:ExtensionExecutionRemote", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExtensionExecutionRemote resources.
type extensionExecutionRemoteState struct {
	// Select performance profile for Extension Execution Controller [Documentation](https://www.dynatrace.com/support/help/shortlink/extensions-concepts#resource-consumption)
	PerformanceProfile *string `pulumi:"performanceProfile"`
	// The scope of this setting (ENVIRONMENT*ACTIVE*GATE)
	Scope *string `pulumi:"scope"`
}

type ExtensionExecutionRemoteState struct {
	// Select performance profile for Extension Execution Controller [Documentation](https://www.dynatrace.com/support/help/shortlink/extensions-concepts#resource-consumption)
	PerformanceProfile pulumi.StringPtrInput
	// The scope of this setting (ENVIRONMENT*ACTIVE*GATE)
	Scope pulumi.StringPtrInput
}

func (ExtensionExecutionRemoteState) ElementType() reflect.Type {
	return reflect.TypeOf((*extensionExecutionRemoteState)(nil)).Elem()
}

type extensionExecutionRemoteArgs struct {
	// Select performance profile for Extension Execution Controller [Documentation](https://www.dynatrace.com/support/help/shortlink/extensions-concepts#resource-consumption)
	PerformanceProfile string `pulumi:"performanceProfile"`
	// The scope of this setting (ENVIRONMENT*ACTIVE*GATE)
	Scope string `pulumi:"scope"`
}

// The set of arguments for constructing a ExtensionExecutionRemote resource.
type ExtensionExecutionRemoteArgs struct {
	// Select performance profile for Extension Execution Controller [Documentation](https://www.dynatrace.com/support/help/shortlink/extensions-concepts#resource-consumption)
	PerformanceProfile pulumi.StringInput
	// The scope of this setting (ENVIRONMENT*ACTIVE*GATE)
	Scope pulumi.StringInput
}

func (ExtensionExecutionRemoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*extensionExecutionRemoteArgs)(nil)).Elem()
}

type ExtensionExecutionRemoteInput interface {
	pulumi.Input

	ToExtensionExecutionRemoteOutput() ExtensionExecutionRemoteOutput
	ToExtensionExecutionRemoteOutputWithContext(ctx context.Context) ExtensionExecutionRemoteOutput
}

func (*ExtensionExecutionRemote) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtensionExecutionRemote)(nil)).Elem()
}

func (i *ExtensionExecutionRemote) ToExtensionExecutionRemoteOutput() ExtensionExecutionRemoteOutput {
	return i.ToExtensionExecutionRemoteOutputWithContext(context.Background())
}

func (i *ExtensionExecutionRemote) ToExtensionExecutionRemoteOutputWithContext(ctx context.Context) ExtensionExecutionRemoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionExecutionRemoteOutput)
}

// ExtensionExecutionRemoteArrayInput is an input type that accepts ExtensionExecutionRemoteArray and ExtensionExecutionRemoteArrayOutput values.
// You can construct a concrete instance of `ExtensionExecutionRemoteArrayInput` via:
//
//	ExtensionExecutionRemoteArray{ ExtensionExecutionRemoteArgs{...} }
type ExtensionExecutionRemoteArrayInput interface {
	pulumi.Input

	ToExtensionExecutionRemoteArrayOutput() ExtensionExecutionRemoteArrayOutput
	ToExtensionExecutionRemoteArrayOutputWithContext(context.Context) ExtensionExecutionRemoteArrayOutput
}

type ExtensionExecutionRemoteArray []ExtensionExecutionRemoteInput

func (ExtensionExecutionRemoteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExtensionExecutionRemote)(nil)).Elem()
}

func (i ExtensionExecutionRemoteArray) ToExtensionExecutionRemoteArrayOutput() ExtensionExecutionRemoteArrayOutput {
	return i.ToExtensionExecutionRemoteArrayOutputWithContext(context.Background())
}

func (i ExtensionExecutionRemoteArray) ToExtensionExecutionRemoteArrayOutputWithContext(ctx context.Context) ExtensionExecutionRemoteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionExecutionRemoteArrayOutput)
}

// ExtensionExecutionRemoteMapInput is an input type that accepts ExtensionExecutionRemoteMap and ExtensionExecutionRemoteMapOutput values.
// You can construct a concrete instance of `ExtensionExecutionRemoteMapInput` via:
//
//	ExtensionExecutionRemoteMap{ "key": ExtensionExecutionRemoteArgs{...} }
type ExtensionExecutionRemoteMapInput interface {
	pulumi.Input

	ToExtensionExecutionRemoteMapOutput() ExtensionExecutionRemoteMapOutput
	ToExtensionExecutionRemoteMapOutputWithContext(context.Context) ExtensionExecutionRemoteMapOutput
}

type ExtensionExecutionRemoteMap map[string]ExtensionExecutionRemoteInput

func (ExtensionExecutionRemoteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExtensionExecutionRemote)(nil)).Elem()
}

func (i ExtensionExecutionRemoteMap) ToExtensionExecutionRemoteMapOutput() ExtensionExecutionRemoteMapOutput {
	return i.ToExtensionExecutionRemoteMapOutputWithContext(context.Background())
}

func (i ExtensionExecutionRemoteMap) ToExtensionExecutionRemoteMapOutputWithContext(ctx context.Context) ExtensionExecutionRemoteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionExecutionRemoteMapOutput)
}

type ExtensionExecutionRemoteOutput struct{ *pulumi.OutputState }

func (ExtensionExecutionRemoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtensionExecutionRemote)(nil)).Elem()
}

func (o ExtensionExecutionRemoteOutput) ToExtensionExecutionRemoteOutput() ExtensionExecutionRemoteOutput {
	return o
}

func (o ExtensionExecutionRemoteOutput) ToExtensionExecutionRemoteOutputWithContext(ctx context.Context) ExtensionExecutionRemoteOutput {
	return o
}

// Select performance profile for Extension Execution Controller [Documentation](https://www.dynatrace.com/support/help/shortlink/extensions-concepts#resource-consumption)
func (o ExtensionExecutionRemoteOutput) PerformanceProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *ExtensionExecutionRemote) pulumi.StringOutput { return v.PerformanceProfile }).(pulumi.StringOutput)
}

// The scope of this setting (ENVIRONMENT*ACTIVE*GATE)
func (o ExtensionExecutionRemoteOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v *ExtensionExecutionRemote) pulumi.StringOutput { return v.Scope }).(pulumi.StringOutput)
}

type ExtensionExecutionRemoteArrayOutput struct{ *pulumi.OutputState }

func (ExtensionExecutionRemoteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExtensionExecutionRemote)(nil)).Elem()
}

func (o ExtensionExecutionRemoteArrayOutput) ToExtensionExecutionRemoteArrayOutput() ExtensionExecutionRemoteArrayOutput {
	return o
}

func (o ExtensionExecutionRemoteArrayOutput) ToExtensionExecutionRemoteArrayOutputWithContext(ctx context.Context) ExtensionExecutionRemoteArrayOutput {
	return o
}

func (o ExtensionExecutionRemoteArrayOutput) Index(i pulumi.IntInput) ExtensionExecutionRemoteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ExtensionExecutionRemote {
		return vs[0].([]*ExtensionExecutionRemote)[vs[1].(int)]
	}).(ExtensionExecutionRemoteOutput)
}

type ExtensionExecutionRemoteMapOutput struct{ *pulumi.OutputState }

func (ExtensionExecutionRemoteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExtensionExecutionRemote)(nil)).Elem()
}

func (o ExtensionExecutionRemoteMapOutput) ToExtensionExecutionRemoteMapOutput() ExtensionExecutionRemoteMapOutput {
	return o
}

func (o ExtensionExecutionRemoteMapOutput) ToExtensionExecutionRemoteMapOutputWithContext(ctx context.Context) ExtensionExecutionRemoteMapOutput {
	return o
}

func (o ExtensionExecutionRemoteMapOutput) MapIndex(k pulumi.StringInput) ExtensionExecutionRemoteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ExtensionExecutionRemote {
		return vs[0].(map[string]*ExtensionExecutionRemote)[vs[1].(string)]
	}).(ExtensionExecutionRemoteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExtensionExecutionRemoteInput)(nil)).Elem(), &ExtensionExecutionRemote{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExtensionExecutionRemoteArrayInput)(nil)).Elem(), ExtensionExecutionRemoteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExtensionExecutionRemoteMapInput)(nil)).Elem(), ExtensionExecutionRemoteMap{})
	pulumi.RegisterOutputType(ExtensionExecutionRemoteOutput{})
	pulumi.RegisterOutputType(ExtensionExecutionRemoteArrayOutput{})
	pulumi.RegisterOutputType(ExtensionExecutionRemoteMapOutput{})
}
