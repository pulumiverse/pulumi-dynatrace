// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type GenericTypes struct {
	pulumi.CustomResourceState

	// The user or extension that created this type.
	CreatedBy pulumi.StringOutput `pulumi:"createdBy"`
	// The human readable type name for this entity type.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringOutput `pulumi:"insertAfter"`
	// The entity type name. This type name must be unique and must not be changed after creation.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specify a list of rules which are evaluated in order. When **any** rule matches, the entity defined according to that rule will be extracted. Subsequent rules will not be evaluated.
	Rules GenericTypesRulesOutput `pulumi:"rules"`
}

// NewGenericTypes registers a new resource with the given unique name, arguments, and options.
func NewGenericTypes(ctx *pulumi.Context,
	name string, args *GenericTypesArgs, opts ...pulumi.ResourceOption) (*GenericTypes, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CreatedBy == nil {
		return nil, errors.New("invalid value for required argument 'CreatedBy'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GenericTypes
	err := ctx.RegisterResource("dynatrace:index/genericTypes:GenericTypes", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGenericTypes gets an existing GenericTypes resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGenericTypes(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GenericTypesState, opts ...pulumi.ResourceOption) (*GenericTypes, error) {
	var resource GenericTypes
	err := ctx.ReadResource("dynatrace:index/genericTypes:GenericTypes", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GenericTypes resources.
type genericTypesState struct {
	// The user or extension that created this type.
	CreatedBy *string `pulumi:"createdBy"`
	// The human readable type name for this entity type.
	DisplayName *string `pulumi:"displayName"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `pulumi:"insertAfter"`
	// The entity type name. This type name must be unique and must not be changed after creation.
	Name *string `pulumi:"name"`
	// Specify a list of rules which are evaluated in order. When **any** rule matches, the entity defined according to that rule will be extracted. Subsequent rules will not be evaluated.
	Rules *GenericTypesRules `pulumi:"rules"`
}

type GenericTypesState struct {
	// The user or extension that created this type.
	CreatedBy pulumi.StringPtrInput
	// The human readable type name for this entity type.
	DisplayName pulumi.StringPtrInput
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringPtrInput
	// The entity type name. This type name must be unique and must not be changed after creation.
	Name pulumi.StringPtrInput
	// Specify a list of rules which are evaluated in order. When **any** rule matches, the entity defined according to that rule will be extracted. Subsequent rules will not be evaluated.
	Rules GenericTypesRulesPtrInput
}

func (GenericTypesState) ElementType() reflect.Type {
	return reflect.TypeOf((*genericTypesState)(nil)).Elem()
}

type genericTypesArgs struct {
	// The user or extension that created this type.
	CreatedBy string `pulumi:"createdBy"`
	// The human readable type name for this entity type.
	DisplayName string `pulumi:"displayName"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `pulumi:"insertAfter"`
	// The entity type name. This type name must be unique and must not be changed after creation.
	Name *string `pulumi:"name"`
	// Specify a list of rules which are evaluated in order. When **any** rule matches, the entity defined according to that rule will be extracted. Subsequent rules will not be evaluated.
	Rules GenericTypesRules `pulumi:"rules"`
}

// The set of arguments for constructing a GenericTypes resource.
type GenericTypesArgs struct {
	// The user or extension that created this type.
	CreatedBy pulumi.StringInput
	// The human readable type name for this entity type.
	DisplayName pulumi.StringInput
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringPtrInput
	// The entity type name. This type name must be unique and must not be changed after creation.
	Name pulumi.StringPtrInput
	// Specify a list of rules which are evaluated in order. When **any** rule matches, the entity defined according to that rule will be extracted. Subsequent rules will not be evaluated.
	Rules GenericTypesRulesInput
}

func (GenericTypesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*genericTypesArgs)(nil)).Elem()
}

type GenericTypesInput interface {
	pulumi.Input

	ToGenericTypesOutput() GenericTypesOutput
	ToGenericTypesOutputWithContext(ctx context.Context) GenericTypesOutput
}

func (*GenericTypes) ElementType() reflect.Type {
	return reflect.TypeOf((**GenericTypes)(nil)).Elem()
}

func (i *GenericTypes) ToGenericTypesOutput() GenericTypesOutput {
	return i.ToGenericTypesOutputWithContext(context.Background())
}

func (i *GenericTypes) ToGenericTypesOutputWithContext(ctx context.Context) GenericTypesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenericTypesOutput)
}

// GenericTypesArrayInput is an input type that accepts GenericTypesArray and GenericTypesArrayOutput values.
// You can construct a concrete instance of `GenericTypesArrayInput` via:
//
//	GenericTypesArray{ GenericTypesArgs{...} }
type GenericTypesArrayInput interface {
	pulumi.Input

	ToGenericTypesArrayOutput() GenericTypesArrayOutput
	ToGenericTypesArrayOutputWithContext(context.Context) GenericTypesArrayOutput
}

type GenericTypesArray []GenericTypesInput

func (GenericTypesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GenericTypes)(nil)).Elem()
}

func (i GenericTypesArray) ToGenericTypesArrayOutput() GenericTypesArrayOutput {
	return i.ToGenericTypesArrayOutputWithContext(context.Background())
}

func (i GenericTypesArray) ToGenericTypesArrayOutputWithContext(ctx context.Context) GenericTypesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenericTypesArrayOutput)
}

// GenericTypesMapInput is an input type that accepts GenericTypesMap and GenericTypesMapOutput values.
// You can construct a concrete instance of `GenericTypesMapInput` via:
//
//	GenericTypesMap{ "key": GenericTypesArgs{...} }
type GenericTypesMapInput interface {
	pulumi.Input

	ToGenericTypesMapOutput() GenericTypesMapOutput
	ToGenericTypesMapOutputWithContext(context.Context) GenericTypesMapOutput
}

type GenericTypesMap map[string]GenericTypesInput

func (GenericTypesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GenericTypes)(nil)).Elem()
}

func (i GenericTypesMap) ToGenericTypesMapOutput() GenericTypesMapOutput {
	return i.ToGenericTypesMapOutputWithContext(context.Background())
}

func (i GenericTypesMap) ToGenericTypesMapOutputWithContext(ctx context.Context) GenericTypesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenericTypesMapOutput)
}

type GenericTypesOutput struct{ *pulumi.OutputState }

func (GenericTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GenericTypes)(nil)).Elem()
}

func (o GenericTypesOutput) ToGenericTypesOutput() GenericTypesOutput {
	return o
}

func (o GenericTypesOutput) ToGenericTypesOutputWithContext(ctx context.Context) GenericTypesOutput {
	return o
}

// The user or extension that created this type.
func (o GenericTypesOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *GenericTypes) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// The human readable type name for this entity type.
func (o GenericTypesOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *GenericTypes) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// This setting is enabled (`true`) or disabled (`false`)
func (o GenericTypesOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *GenericTypes) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
func (o GenericTypesOutput) InsertAfter() pulumi.StringOutput {
	return o.ApplyT(func(v *GenericTypes) pulumi.StringOutput { return v.InsertAfter }).(pulumi.StringOutput)
}

// The entity type name. This type name must be unique and must not be changed after creation.
func (o GenericTypesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GenericTypes) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specify a list of rules which are evaluated in order. When **any** rule matches, the entity defined according to that rule will be extracted. Subsequent rules will not be evaluated.
func (o GenericTypesOutput) Rules() GenericTypesRulesOutput {
	return o.ApplyT(func(v *GenericTypes) GenericTypesRulesOutput { return v.Rules }).(GenericTypesRulesOutput)
}

type GenericTypesArrayOutput struct{ *pulumi.OutputState }

func (GenericTypesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GenericTypes)(nil)).Elem()
}

func (o GenericTypesArrayOutput) ToGenericTypesArrayOutput() GenericTypesArrayOutput {
	return o
}

func (o GenericTypesArrayOutput) ToGenericTypesArrayOutputWithContext(ctx context.Context) GenericTypesArrayOutput {
	return o
}

func (o GenericTypesArrayOutput) Index(i pulumi.IntInput) GenericTypesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GenericTypes {
		return vs[0].([]*GenericTypes)[vs[1].(int)]
	}).(GenericTypesOutput)
}

type GenericTypesMapOutput struct{ *pulumi.OutputState }

func (GenericTypesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GenericTypes)(nil)).Elem()
}

func (o GenericTypesMapOutput) ToGenericTypesMapOutput() GenericTypesMapOutput {
	return o
}

func (o GenericTypesMapOutput) ToGenericTypesMapOutputWithContext(ctx context.Context) GenericTypesMapOutput {
	return o
}

func (o GenericTypesMapOutput) MapIndex(k pulumi.StringInput) GenericTypesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GenericTypes {
		return vs[0].(map[string]*GenericTypes)[vs[1].(string)]
	}).(GenericTypesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GenericTypesInput)(nil)).Elem(), &GenericTypes{})
	pulumi.RegisterInputType(reflect.TypeOf((*GenericTypesArrayInput)(nil)).Elem(), GenericTypesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GenericTypesMapInput)(nil)).Elem(), GenericTypesMap{})
	pulumi.RegisterOutputType(GenericTypesOutput{})
	pulumi.RegisterOutputType(GenericTypesArrayOutput{})
	pulumi.RegisterOutputType(GenericTypesMapOutput{})
}
