// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type HostMonitoringAdvanced struct {
	pulumi.CustomResourceState

	// Inject CodeModules in Discovery mode.
	CodeModuleInjection pulumi.BoolPtrOutput `pulumi:"codeModuleInjection"`
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId pulumi.StringOutput `pulumi:"hostId"`
	// Disabling this via [oneagentctl](https://dt-url.net/oneagentctl) takes precedence over this setting and cannot be changed from the Dynatrace web UI.
	ProcessAgentInjection pulumi.BoolOutput `pulumi:"processAgentInjection"`
}

// NewHostMonitoringAdvanced registers a new resource with the given unique name, arguments, and options.
func NewHostMonitoringAdvanced(ctx *pulumi.Context,
	name string, args *HostMonitoringAdvancedArgs, opts ...pulumi.ResourceOption) (*HostMonitoringAdvanced, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HostId == nil {
		return nil, errors.New("invalid value for required argument 'HostId'")
	}
	if args.ProcessAgentInjection == nil {
		return nil, errors.New("invalid value for required argument 'ProcessAgentInjection'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HostMonitoringAdvanced
	err := ctx.RegisterResource("dynatrace:index/hostMonitoringAdvanced:HostMonitoringAdvanced", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHostMonitoringAdvanced gets an existing HostMonitoringAdvanced resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHostMonitoringAdvanced(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HostMonitoringAdvancedState, opts ...pulumi.ResourceOption) (*HostMonitoringAdvanced, error) {
	var resource HostMonitoringAdvanced
	err := ctx.ReadResource("dynatrace:index/hostMonitoringAdvanced:HostMonitoringAdvanced", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HostMonitoringAdvanced resources.
type hostMonitoringAdvancedState struct {
	// Inject CodeModules in Discovery mode.
	CodeModuleInjection *bool `pulumi:"codeModuleInjection"`
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId *string `pulumi:"hostId"`
	// Disabling this via [oneagentctl](https://dt-url.net/oneagentctl) takes precedence over this setting and cannot be changed from the Dynatrace web UI.
	ProcessAgentInjection *bool `pulumi:"processAgentInjection"`
}

type HostMonitoringAdvancedState struct {
	// Inject CodeModules in Discovery mode.
	CodeModuleInjection pulumi.BoolPtrInput
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId pulumi.StringPtrInput
	// Disabling this via [oneagentctl](https://dt-url.net/oneagentctl) takes precedence over this setting and cannot be changed from the Dynatrace web UI.
	ProcessAgentInjection pulumi.BoolPtrInput
}

func (HostMonitoringAdvancedState) ElementType() reflect.Type {
	return reflect.TypeOf((*hostMonitoringAdvancedState)(nil)).Elem()
}

type hostMonitoringAdvancedArgs struct {
	// Inject CodeModules in Discovery mode.
	CodeModuleInjection *bool `pulumi:"codeModuleInjection"`
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId string `pulumi:"hostId"`
	// Disabling this via [oneagentctl](https://dt-url.net/oneagentctl) takes precedence over this setting and cannot be changed from the Dynatrace web UI.
	ProcessAgentInjection bool `pulumi:"processAgentInjection"`
}

// The set of arguments for constructing a HostMonitoringAdvanced resource.
type HostMonitoringAdvancedArgs struct {
	// Inject CodeModules in Discovery mode.
	CodeModuleInjection pulumi.BoolPtrInput
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId pulumi.StringInput
	// Disabling this via [oneagentctl](https://dt-url.net/oneagentctl) takes precedence over this setting and cannot be changed from the Dynatrace web UI.
	ProcessAgentInjection pulumi.BoolInput
}

func (HostMonitoringAdvancedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hostMonitoringAdvancedArgs)(nil)).Elem()
}

type HostMonitoringAdvancedInput interface {
	pulumi.Input

	ToHostMonitoringAdvancedOutput() HostMonitoringAdvancedOutput
	ToHostMonitoringAdvancedOutputWithContext(ctx context.Context) HostMonitoringAdvancedOutput
}

func (*HostMonitoringAdvanced) ElementType() reflect.Type {
	return reflect.TypeOf((**HostMonitoringAdvanced)(nil)).Elem()
}

func (i *HostMonitoringAdvanced) ToHostMonitoringAdvancedOutput() HostMonitoringAdvancedOutput {
	return i.ToHostMonitoringAdvancedOutputWithContext(context.Background())
}

func (i *HostMonitoringAdvanced) ToHostMonitoringAdvancedOutputWithContext(ctx context.Context) HostMonitoringAdvancedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostMonitoringAdvancedOutput)
}

// HostMonitoringAdvancedArrayInput is an input type that accepts HostMonitoringAdvancedArray and HostMonitoringAdvancedArrayOutput values.
// You can construct a concrete instance of `HostMonitoringAdvancedArrayInput` via:
//
//	HostMonitoringAdvancedArray{ HostMonitoringAdvancedArgs{...} }
type HostMonitoringAdvancedArrayInput interface {
	pulumi.Input

	ToHostMonitoringAdvancedArrayOutput() HostMonitoringAdvancedArrayOutput
	ToHostMonitoringAdvancedArrayOutputWithContext(context.Context) HostMonitoringAdvancedArrayOutput
}

type HostMonitoringAdvancedArray []HostMonitoringAdvancedInput

func (HostMonitoringAdvancedArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HostMonitoringAdvanced)(nil)).Elem()
}

func (i HostMonitoringAdvancedArray) ToHostMonitoringAdvancedArrayOutput() HostMonitoringAdvancedArrayOutput {
	return i.ToHostMonitoringAdvancedArrayOutputWithContext(context.Background())
}

func (i HostMonitoringAdvancedArray) ToHostMonitoringAdvancedArrayOutputWithContext(ctx context.Context) HostMonitoringAdvancedArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostMonitoringAdvancedArrayOutput)
}

// HostMonitoringAdvancedMapInput is an input type that accepts HostMonitoringAdvancedMap and HostMonitoringAdvancedMapOutput values.
// You can construct a concrete instance of `HostMonitoringAdvancedMapInput` via:
//
//	HostMonitoringAdvancedMap{ "key": HostMonitoringAdvancedArgs{...} }
type HostMonitoringAdvancedMapInput interface {
	pulumi.Input

	ToHostMonitoringAdvancedMapOutput() HostMonitoringAdvancedMapOutput
	ToHostMonitoringAdvancedMapOutputWithContext(context.Context) HostMonitoringAdvancedMapOutput
}

type HostMonitoringAdvancedMap map[string]HostMonitoringAdvancedInput

func (HostMonitoringAdvancedMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HostMonitoringAdvanced)(nil)).Elem()
}

func (i HostMonitoringAdvancedMap) ToHostMonitoringAdvancedMapOutput() HostMonitoringAdvancedMapOutput {
	return i.ToHostMonitoringAdvancedMapOutputWithContext(context.Background())
}

func (i HostMonitoringAdvancedMap) ToHostMonitoringAdvancedMapOutputWithContext(ctx context.Context) HostMonitoringAdvancedMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostMonitoringAdvancedMapOutput)
}

type HostMonitoringAdvancedOutput struct{ *pulumi.OutputState }

func (HostMonitoringAdvancedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostMonitoringAdvanced)(nil)).Elem()
}

func (o HostMonitoringAdvancedOutput) ToHostMonitoringAdvancedOutput() HostMonitoringAdvancedOutput {
	return o
}

func (o HostMonitoringAdvancedOutput) ToHostMonitoringAdvancedOutputWithContext(ctx context.Context) HostMonitoringAdvancedOutput {
	return o
}

// Inject CodeModules in Discovery mode.
func (o HostMonitoringAdvancedOutput) CodeModuleInjection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostMonitoringAdvanced) pulumi.BoolPtrOutput { return v.CodeModuleInjection }).(pulumi.BoolPtrOutput)
}

// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
func (o HostMonitoringAdvancedOutput) HostId() pulumi.StringOutput {
	return o.ApplyT(func(v *HostMonitoringAdvanced) pulumi.StringOutput { return v.HostId }).(pulumi.StringOutput)
}

// Disabling this via [oneagentctl](https://dt-url.net/oneagentctl) takes precedence over this setting and cannot be changed from the Dynatrace web UI.
func (o HostMonitoringAdvancedOutput) ProcessAgentInjection() pulumi.BoolOutput {
	return o.ApplyT(func(v *HostMonitoringAdvanced) pulumi.BoolOutput { return v.ProcessAgentInjection }).(pulumi.BoolOutput)
}

type HostMonitoringAdvancedArrayOutput struct{ *pulumi.OutputState }

func (HostMonitoringAdvancedArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HostMonitoringAdvanced)(nil)).Elem()
}

func (o HostMonitoringAdvancedArrayOutput) ToHostMonitoringAdvancedArrayOutput() HostMonitoringAdvancedArrayOutput {
	return o
}

func (o HostMonitoringAdvancedArrayOutput) ToHostMonitoringAdvancedArrayOutputWithContext(ctx context.Context) HostMonitoringAdvancedArrayOutput {
	return o
}

func (o HostMonitoringAdvancedArrayOutput) Index(i pulumi.IntInput) HostMonitoringAdvancedOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HostMonitoringAdvanced {
		return vs[0].([]*HostMonitoringAdvanced)[vs[1].(int)]
	}).(HostMonitoringAdvancedOutput)
}

type HostMonitoringAdvancedMapOutput struct{ *pulumi.OutputState }

func (HostMonitoringAdvancedMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HostMonitoringAdvanced)(nil)).Elem()
}

func (o HostMonitoringAdvancedMapOutput) ToHostMonitoringAdvancedMapOutput() HostMonitoringAdvancedMapOutput {
	return o
}

func (o HostMonitoringAdvancedMapOutput) ToHostMonitoringAdvancedMapOutputWithContext(ctx context.Context) HostMonitoringAdvancedMapOutput {
	return o
}

func (o HostMonitoringAdvancedMapOutput) MapIndex(k pulumi.StringInput) HostMonitoringAdvancedOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HostMonitoringAdvanced {
		return vs[0].(map[string]*HostMonitoringAdvanced)[vs[1].(string)]
	}).(HostMonitoringAdvancedOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HostMonitoringAdvancedInput)(nil)).Elem(), &HostMonitoringAdvanced{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostMonitoringAdvancedArrayInput)(nil)).Elem(), HostMonitoringAdvancedArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostMonitoringAdvancedMapInput)(nil)).Elem(), HostMonitoringAdvancedMap{})
	pulumi.RegisterOutputType(HostMonitoringAdvancedOutput{})
	pulumi.RegisterOutputType(HostMonitoringAdvancedArrayOutput{})
	pulumi.RegisterOutputType(HostMonitoringAdvancedMapOutput{})
}
