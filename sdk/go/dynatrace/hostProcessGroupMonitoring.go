// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type HostProcessGroupMonitoring struct {
	pulumi.CustomResourceState

	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId pulumi.StringOutput `pulumi:"hostId"`
	// Possible Values: `DEFAULT`, `MONITORING_OFF`, `MONITORING_ON`
	MonitoringState pulumi.StringOutput `pulumi:"monitoringState"`
	// Process group
	ProcessGroup pulumi.StringOutput `pulumi:"processGroup"`
}

// NewHostProcessGroupMonitoring registers a new resource with the given unique name, arguments, and options.
func NewHostProcessGroupMonitoring(ctx *pulumi.Context,
	name string, args *HostProcessGroupMonitoringArgs, opts ...pulumi.ResourceOption) (*HostProcessGroupMonitoring, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HostId == nil {
		return nil, errors.New("invalid value for required argument 'HostId'")
	}
	if args.MonitoringState == nil {
		return nil, errors.New("invalid value for required argument 'MonitoringState'")
	}
	if args.ProcessGroup == nil {
		return nil, errors.New("invalid value for required argument 'ProcessGroup'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HostProcessGroupMonitoring
	err := ctx.RegisterResource("dynatrace:index/hostProcessGroupMonitoring:HostProcessGroupMonitoring", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHostProcessGroupMonitoring gets an existing HostProcessGroupMonitoring resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHostProcessGroupMonitoring(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HostProcessGroupMonitoringState, opts ...pulumi.ResourceOption) (*HostProcessGroupMonitoring, error) {
	var resource HostProcessGroupMonitoring
	err := ctx.ReadResource("dynatrace:index/hostProcessGroupMonitoring:HostProcessGroupMonitoring", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HostProcessGroupMonitoring resources.
type hostProcessGroupMonitoringState struct {
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId *string `pulumi:"hostId"`
	// Possible Values: `DEFAULT`, `MONITORING_OFF`, `MONITORING_ON`
	MonitoringState *string `pulumi:"monitoringState"`
	// Process group
	ProcessGroup *string `pulumi:"processGroup"`
}

type HostProcessGroupMonitoringState struct {
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId pulumi.StringPtrInput
	// Possible Values: `DEFAULT`, `MONITORING_OFF`, `MONITORING_ON`
	MonitoringState pulumi.StringPtrInput
	// Process group
	ProcessGroup pulumi.StringPtrInput
}

func (HostProcessGroupMonitoringState) ElementType() reflect.Type {
	return reflect.TypeOf((*hostProcessGroupMonitoringState)(nil)).Elem()
}

type hostProcessGroupMonitoringArgs struct {
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId string `pulumi:"hostId"`
	// Possible Values: `DEFAULT`, `MONITORING_OFF`, `MONITORING_ON`
	MonitoringState string `pulumi:"monitoringState"`
	// Process group
	ProcessGroup string `pulumi:"processGroup"`
}

// The set of arguments for constructing a HostProcessGroupMonitoring resource.
type HostProcessGroupMonitoringArgs struct {
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId pulumi.StringInput
	// Possible Values: `DEFAULT`, `MONITORING_OFF`, `MONITORING_ON`
	MonitoringState pulumi.StringInput
	// Process group
	ProcessGroup pulumi.StringInput
}

func (HostProcessGroupMonitoringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hostProcessGroupMonitoringArgs)(nil)).Elem()
}

type HostProcessGroupMonitoringInput interface {
	pulumi.Input

	ToHostProcessGroupMonitoringOutput() HostProcessGroupMonitoringOutput
	ToHostProcessGroupMonitoringOutputWithContext(ctx context.Context) HostProcessGroupMonitoringOutput
}

func (*HostProcessGroupMonitoring) ElementType() reflect.Type {
	return reflect.TypeOf((**HostProcessGroupMonitoring)(nil)).Elem()
}

func (i *HostProcessGroupMonitoring) ToHostProcessGroupMonitoringOutput() HostProcessGroupMonitoringOutput {
	return i.ToHostProcessGroupMonitoringOutputWithContext(context.Background())
}

func (i *HostProcessGroupMonitoring) ToHostProcessGroupMonitoringOutputWithContext(ctx context.Context) HostProcessGroupMonitoringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostProcessGroupMonitoringOutput)
}

// HostProcessGroupMonitoringArrayInput is an input type that accepts HostProcessGroupMonitoringArray and HostProcessGroupMonitoringArrayOutput values.
// You can construct a concrete instance of `HostProcessGroupMonitoringArrayInput` via:
//
//	HostProcessGroupMonitoringArray{ HostProcessGroupMonitoringArgs{...} }
type HostProcessGroupMonitoringArrayInput interface {
	pulumi.Input

	ToHostProcessGroupMonitoringArrayOutput() HostProcessGroupMonitoringArrayOutput
	ToHostProcessGroupMonitoringArrayOutputWithContext(context.Context) HostProcessGroupMonitoringArrayOutput
}

type HostProcessGroupMonitoringArray []HostProcessGroupMonitoringInput

func (HostProcessGroupMonitoringArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HostProcessGroupMonitoring)(nil)).Elem()
}

func (i HostProcessGroupMonitoringArray) ToHostProcessGroupMonitoringArrayOutput() HostProcessGroupMonitoringArrayOutput {
	return i.ToHostProcessGroupMonitoringArrayOutputWithContext(context.Background())
}

func (i HostProcessGroupMonitoringArray) ToHostProcessGroupMonitoringArrayOutputWithContext(ctx context.Context) HostProcessGroupMonitoringArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostProcessGroupMonitoringArrayOutput)
}

// HostProcessGroupMonitoringMapInput is an input type that accepts HostProcessGroupMonitoringMap and HostProcessGroupMonitoringMapOutput values.
// You can construct a concrete instance of `HostProcessGroupMonitoringMapInput` via:
//
//	HostProcessGroupMonitoringMap{ "key": HostProcessGroupMonitoringArgs{...} }
type HostProcessGroupMonitoringMapInput interface {
	pulumi.Input

	ToHostProcessGroupMonitoringMapOutput() HostProcessGroupMonitoringMapOutput
	ToHostProcessGroupMonitoringMapOutputWithContext(context.Context) HostProcessGroupMonitoringMapOutput
}

type HostProcessGroupMonitoringMap map[string]HostProcessGroupMonitoringInput

func (HostProcessGroupMonitoringMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HostProcessGroupMonitoring)(nil)).Elem()
}

func (i HostProcessGroupMonitoringMap) ToHostProcessGroupMonitoringMapOutput() HostProcessGroupMonitoringMapOutput {
	return i.ToHostProcessGroupMonitoringMapOutputWithContext(context.Background())
}

func (i HostProcessGroupMonitoringMap) ToHostProcessGroupMonitoringMapOutputWithContext(ctx context.Context) HostProcessGroupMonitoringMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostProcessGroupMonitoringMapOutput)
}

type HostProcessGroupMonitoringOutput struct{ *pulumi.OutputState }

func (HostProcessGroupMonitoringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostProcessGroupMonitoring)(nil)).Elem()
}

func (o HostProcessGroupMonitoringOutput) ToHostProcessGroupMonitoringOutput() HostProcessGroupMonitoringOutput {
	return o
}

func (o HostProcessGroupMonitoringOutput) ToHostProcessGroupMonitoringOutputWithContext(ctx context.Context) HostProcessGroupMonitoringOutput {
	return o
}

// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
func (o HostProcessGroupMonitoringOutput) HostId() pulumi.StringOutput {
	return o.ApplyT(func(v *HostProcessGroupMonitoring) pulumi.StringOutput { return v.HostId }).(pulumi.StringOutput)
}

// Possible Values: `DEFAULT`, `MONITORING_OFF`, `MONITORING_ON`
func (o HostProcessGroupMonitoringOutput) MonitoringState() pulumi.StringOutput {
	return o.ApplyT(func(v *HostProcessGroupMonitoring) pulumi.StringOutput { return v.MonitoringState }).(pulumi.StringOutput)
}

// Process group
func (o HostProcessGroupMonitoringOutput) ProcessGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *HostProcessGroupMonitoring) pulumi.StringOutput { return v.ProcessGroup }).(pulumi.StringOutput)
}

type HostProcessGroupMonitoringArrayOutput struct{ *pulumi.OutputState }

func (HostProcessGroupMonitoringArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HostProcessGroupMonitoring)(nil)).Elem()
}

func (o HostProcessGroupMonitoringArrayOutput) ToHostProcessGroupMonitoringArrayOutput() HostProcessGroupMonitoringArrayOutput {
	return o
}

func (o HostProcessGroupMonitoringArrayOutput) ToHostProcessGroupMonitoringArrayOutputWithContext(ctx context.Context) HostProcessGroupMonitoringArrayOutput {
	return o
}

func (o HostProcessGroupMonitoringArrayOutput) Index(i pulumi.IntInput) HostProcessGroupMonitoringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HostProcessGroupMonitoring {
		return vs[0].([]*HostProcessGroupMonitoring)[vs[1].(int)]
	}).(HostProcessGroupMonitoringOutput)
}

type HostProcessGroupMonitoringMapOutput struct{ *pulumi.OutputState }

func (HostProcessGroupMonitoringMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HostProcessGroupMonitoring)(nil)).Elem()
}

func (o HostProcessGroupMonitoringMapOutput) ToHostProcessGroupMonitoringMapOutput() HostProcessGroupMonitoringMapOutput {
	return o
}

func (o HostProcessGroupMonitoringMapOutput) ToHostProcessGroupMonitoringMapOutputWithContext(ctx context.Context) HostProcessGroupMonitoringMapOutput {
	return o
}

func (o HostProcessGroupMonitoringMapOutput) MapIndex(k pulumi.StringInput) HostProcessGroupMonitoringOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HostProcessGroupMonitoring {
		return vs[0].(map[string]*HostProcessGroupMonitoring)[vs[1].(string)]
	}).(HostProcessGroupMonitoringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HostProcessGroupMonitoringInput)(nil)).Elem(), &HostProcessGroupMonitoring{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostProcessGroupMonitoringArrayInput)(nil)).Elem(), HostProcessGroupMonitoringArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostProcessGroupMonitoringMapInput)(nil)).Elem(), HostProcessGroupMonitoringMap{})
	pulumi.RegisterOutputType(HostProcessGroupMonitoringOutput{})
	pulumi.RegisterOutputType(HostProcessGroupMonitoringArrayOutput{})
	pulumi.RegisterOutputType(HostProcessGroupMonitoringMapOutput{})
}
