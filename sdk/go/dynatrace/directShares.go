// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

// > **Dynatrace SaaS only**
//
// > To utilize this resource, please define the environment variables `DT_CLIENT_ID`, `DT_CLIENT_SECRET`, `DT_ACCOUNT_ID` with an OAuth client including the following permissions: **Read direct-shares** (`document:direct-shares:read`), **Write direct-shares** (`document:direct-shares:write`), and **Delete direct-shares** (`document:direct-shares:delete`).
//
// > This resource is currently not covered by the export utility.
//
// ## Dynatrace Documentation
//
// - Dynatrace Documents - https://########.apps.dynatrace.com/platform/swagger-ui/index.html?urls.primaryName=Document%20Service
//
// ## Resource Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"version":   13,
//				"variables": []interface{}{},
//				"tiles": map[string]interface{}{
//					"0": map[string]interface{}{
//						"type":    "markdown",
//						"title":   "",
//						"content": "![Image of a Dashboard](https://dt-cdn.net/wp-content/uploads/2022/09/pic1____Dashboard-Preset___PNG.png)",
//					},
//					"1": map[string]interface{}{
//						"type":  "data",
//						"title": "",
//						"query": "timeseries avg(dt.host.cpu.user)",
//						"queryConfig": map[string]interface{}{
//							"additionalFilters": map[string]interface{}{},
//							"version":           "4.3.1",
//							"datatype":          "metrics",
//							"metricKey":         "dt.host.cpu.user",
//							"aggregation":       "avg",
//							"by":                []interface{}{},
//						},
//						"subType":       "dql-builder-metrics",
//						"visualization": "lineChart",
//						"visualizationSettings": map[string]interface{}{
//							"thresholds": []interface{}{},
//							"chartSettings": map[string]interface{}{
//								"gapPolicy": "connect",
//								"circleChartSettings": map[string]interface{}{
//									"groupingThresholdType":  "relative",
//									"groupingThresholdValue": 0,
//									"valueType":              "relative",
//								},
//								"categoryOverrides": map[string]interface{}{},
//								"fieldMapping": map[string]interface{}{
//									"timestamp": "timeframe",
//									"leftAxisValues": []string{
//										"avg(dt.host.cpu.user)",
//									},
//									"leftAxisDimensions": []interface{}{},
//									"fields":             []interface{}{},
//									"values":             []interface{}{},
//								},
//							},
//							"singleValue": map[string]interface{}{
//								"showLabel":            true,
//								"label":                "",
//								"prefixIcon":           "",
//								"autoscale":            true,
//								"alignment":            "center",
//								"colorThresholdTarget": "value",
//							},
//							"table": map[string]interface{}{
//								"rowDensity":       "condensed",
//								"enableSparklines": false,
//								"hiddenColumns":    []interface{}{},
//								"lineWrapIds":      []interface{}{},
//								"columnWidths":     map[string]interface{}{},
//							},
//						},
//					},
//					"2": map[string]interface{}{
//						"type":  "data",
//						"title": "",
//						"query": "timeseries avg(dt.host.memory.used)",
//						"queryConfig": map[string]interface{}{
//							"additionalFilters": map[string]interface{}{},
//							"version":           "4.3.1",
//							"datatype":          "metrics",
//							"metricKey":         "dt.host.memory.used",
//							"aggregation":       "avg",
//							"by":                []interface{}{},
//						},
//						"subType":       "dql-builder-metrics",
//						"visualization": "lineChart",
//						"visualizationSettings": map[string]interface{}{
//							"thresholds": []interface{}{},
//							"chartSettings": map[string]interface{}{
//								"gapPolicy": "connect",
//								"circleChartSettings": map[string]interface{}{
//									"groupingThresholdType":  "relative",
//									"groupingThresholdValue": 0,
//									"valueType":              "relative",
//								},
//								"categoryOverrides": map[string]interface{}{},
//								"fieldMapping": map[string]interface{}{
//									"timestamp": "timeframe",
//									"leftAxisValues": []string{
//										"avg(dt.host.memory.used)",
//									},
//									"leftAxisDimensions": []interface{}{},
//									"fields":             []interface{}{},
//									"values":             []interface{}{},
//								},
//								"categoricalBarChartSettings": map[string]interface{}{},
//							},
//							"singleValue": map[string]interface{}{
//								"showLabel":            true,
//								"label":                "",
//								"prefixIcon":           "",
//								"autoscale":            true,
//								"alignment":            "center",
//								"colorThresholdTarget": "value",
//							},
//							"table": map[string]interface{}{
//								"rowDensity":       "condensed",
//								"enableSparklines": false,
//								"hiddenColumns":    []interface{}{},
//								"lineWrapIds":      []interface{}{},
//								"columnWidths":     map[string]interface{}{},
//							},
//						},
//					},
//				},
//				"layouts": map[string]interface{}{
//					"0": map[string]interface{}{
//						"x": 0,
//						"y": 0,
//						"w": 24,
//						"h": 14,
//					},
//					"1": map[string]interface{}{
//						"x": 0,
//						"y": 14,
//						"w": 9,
//						"h": 6,
//					},
//					"2": map[string]interface{}{
//						"x": 15,
//						"y": 14,
//						"w": 9,
//						"h": 6,
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			thisDocument, err := dynatrace.NewDocument(ctx, "thisDocument", &dynatrace.DocumentArgs{
//				Type:    pulumi.String("dashboard"),
//				Content: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dynatrace.NewDirectShares(ctx, "thisDirectShares", &dynatrace.DirectSharesArgs{
//				DocumentId: thisDocument.ID(),
//				Access:     pulumi.String("read-write"),
//				Recipients: &dynatrace.DirectSharesRecipientsArgs{
//					Recipients: dynatrace.DirectSharesRecipientsRecipientArray{
//						&dynatrace.DirectSharesRecipientsRecipientArgs{
//							Id:   pulumi.String("441664f0-23c9-40ef-b344-18c02c23d787"),
//							Type: pulumi.String("user"),
//						},
//						&dynatrace.DirectSharesRecipientsRecipientArgs{
//							Id:   pulumi.String("441664f0-23c9-40ef-b344-18c02c23d788"),
//							Type: pulumi.String("group"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type DirectShares struct {
	pulumi.CustomResourceState

	// Access grants. Possible values are `read` and `read-write`
	Access pulumi.StringPtrOutput `pulumi:"access"`
	// Document ID
	DocumentId pulumi.StringOutput `pulumi:"documentId"`
	// Recipients of the direct share
	Recipients DirectSharesRecipientsOutput `pulumi:"recipients"`
}

// NewDirectShares registers a new resource with the given unique name, arguments, and options.
func NewDirectShares(ctx *pulumi.Context,
	name string, args *DirectSharesArgs, opts ...pulumi.ResourceOption) (*DirectShares, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DocumentId == nil {
		return nil, errors.New("invalid value for required argument 'DocumentId'")
	}
	if args.Recipients == nil {
		return nil, errors.New("invalid value for required argument 'Recipients'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DirectShares
	err := ctx.RegisterResource("dynatrace:index/directShares:DirectShares", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDirectShares gets an existing DirectShares resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDirectShares(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DirectSharesState, opts ...pulumi.ResourceOption) (*DirectShares, error) {
	var resource DirectShares
	err := ctx.ReadResource("dynatrace:index/directShares:DirectShares", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DirectShares resources.
type directSharesState struct {
	// Access grants. Possible values are `read` and `read-write`
	Access *string `pulumi:"access"`
	// Document ID
	DocumentId *string `pulumi:"documentId"`
	// Recipients of the direct share
	Recipients *DirectSharesRecipients `pulumi:"recipients"`
}

type DirectSharesState struct {
	// Access grants. Possible values are `read` and `read-write`
	Access pulumi.StringPtrInput
	// Document ID
	DocumentId pulumi.StringPtrInput
	// Recipients of the direct share
	Recipients DirectSharesRecipientsPtrInput
}

func (DirectSharesState) ElementType() reflect.Type {
	return reflect.TypeOf((*directSharesState)(nil)).Elem()
}

type directSharesArgs struct {
	// Access grants. Possible values are `read` and `read-write`
	Access *string `pulumi:"access"`
	// Document ID
	DocumentId string `pulumi:"documentId"`
	// Recipients of the direct share
	Recipients DirectSharesRecipients `pulumi:"recipients"`
}

// The set of arguments for constructing a DirectShares resource.
type DirectSharesArgs struct {
	// Access grants. Possible values are `read` and `read-write`
	Access pulumi.StringPtrInput
	// Document ID
	DocumentId pulumi.StringInput
	// Recipients of the direct share
	Recipients DirectSharesRecipientsInput
}

func (DirectSharesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*directSharesArgs)(nil)).Elem()
}

type DirectSharesInput interface {
	pulumi.Input

	ToDirectSharesOutput() DirectSharesOutput
	ToDirectSharesOutputWithContext(ctx context.Context) DirectSharesOutput
}

func (*DirectShares) ElementType() reflect.Type {
	return reflect.TypeOf((**DirectShares)(nil)).Elem()
}

func (i *DirectShares) ToDirectSharesOutput() DirectSharesOutput {
	return i.ToDirectSharesOutputWithContext(context.Background())
}

func (i *DirectShares) ToDirectSharesOutputWithContext(ctx context.Context) DirectSharesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectSharesOutput)
}

// DirectSharesArrayInput is an input type that accepts DirectSharesArray and DirectSharesArrayOutput values.
// You can construct a concrete instance of `DirectSharesArrayInput` via:
//
//	DirectSharesArray{ DirectSharesArgs{...} }
type DirectSharesArrayInput interface {
	pulumi.Input

	ToDirectSharesArrayOutput() DirectSharesArrayOutput
	ToDirectSharesArrayOutputWithContext(context.Context) DirectSharesArrayOutput
}

type DirectSharesArray []DirectSharesInput

func (DirectSharesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DirectShares)(nil)).Elem()
}

func (i DirectSharesArray) ToDirectSharesArrayOutput() DirectSharesArrayOutput {
	return i.ToDirectSharesArrayOutputWithContext(context.Background())
}

func (i DirectSharesArray) ToDirectSharesArrayOutputWithContext(ctx context.Context) DirectSharesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectSharesArrayOutput)
}

// DirectSharesMapInput is an input type that accepts DirectSharesMap and DirectSharesMapOutput values.
// You can construct a concrete instance of `DirectSharesMapInput` via:
//
//	DirectSharesMap{ "key": DirectSharesArgs{...} }
type DirectSharesMapInput interface {
	pulumi.Input

	ToDirectSharesMapOutput() DirectSharesMapOutput
	ToDirectSharesMapOutputWithContext(context.Context) DirectSharesMapOutput
}

type DirectSharesMap map[string]DirectSharesInput

func (DirectSharesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DirectShares)(nil)).Elem()
}

func (i DirectSharesMap) ToDirectSharesMapOutput() DirectSharesMapOutput {
	return i.ToDirectSharesMapOutputWithContext(context.Background())
}

func (i DirectSharesMap) ToDirectSharesMapOutputWithContext(ctx context.Context) DirectSharesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectSharesMapOutput)
}

type DirectSharesOutput struct{ *pulumi.OutputState }

func (DirectSharesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DirectShares)(nil)).Elem()
}

func (o DirectSharesOutput) ToDirectSharesOutput() DirectSharesOutput {
	return o
}

func (o DirectSharesOutput) ToDirectSharesOutputWithContext(ctx context.Context) DirectSharesOutput {
	return o
}

// Access grants. Possible values are `read` and `read-write`
func (o DirectSharesOutput) Access() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DirectShares) pulumi.StringPtrOutput { return v.Access }).(pulumi.StringPtrOutput)
}

// Document ID
func (o DirectSharesOutput) DocumentId() pulumi.StringOutput {
	return o.ApplyT(func(v *DirectShares) pulumi.StringOutput { return v.DocumentId }).(pulumi.StringOutput)
}

// Recipients of the direct share
func (o DirectSharesOutput) Recipients() DirectSharesRecipientsOutput {
	return o.ApplyT(func(v *DirectShares) DirectSharesRecipientsOutput { return v.Recipients }).(DirectSharesRecipientsOutput)
}

type DirectSharesArrayOutput struct{ *pulumi.OutputState }

func (DirectSharesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DirectShares)(nil)).Elem()
}

func (o DirectSharesArrayOutput) ToDirectSharesArrayOutput() DirectSharesArrayOutput {
	return o
}

func (o DirectSharesArrayOutput) ToDirectSharesArrayOutputWithContext(ctx context.Context) DirectSharesArrayOutput {
	return o
}

func (o DirectSharesArrayOutput) Index(i pulumi.IntInput) DirectSharesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DirectShares {
		return vs[0].([]*DirectShares)[vs[1].(int)]
	}).(DirectSharesOutput)
}

type DirectSharesMapOutput struct{ *pulumi.OutputState }

func (DirectSharesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DirectShares)(nil)).Elem()
}

func (o DirectSharesMapOutput) ToDirectSharesMapOutput() DirectSharesMapOutput {
	return o
}

func (o DirectSharesMapOutput) ToDirectSharesMapOutputWithContext(ctx context.Context) DirectSharesMapOutput {
	return o
}

func (o DirectSharesMapOutput) MapIndex(k pulumi.StringInput) DirectSharesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DirectShares {
		return vs[0].(map[string]*DirectShares)[vs[1].(string)]
	}).(DirectSharesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DirectSharesInput)(nil)).Elem(), &DirectShares{})
	pulumi.RegisterInputType(reflect.TypeOf((*DirectSharesArrayInput)(nil)).Elem(), DirectSharesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DirectSharesMapInput)(nil)).Elem(), DirectSharesMap{})
	pulumi.RegisterOutputType(DirectSharesOutput{})
	pulumi.RegisterOutputType(DirectSharesArrayOutput{})
	pulumi.RegisterOutputType(DirectSharesMapOutput{})
}
