// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type WebAppJavascriptUpdates struct {
	pulumi.CustomResourceState

	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ApplicationId pulumi.StringPtrOutput `pulumi:"applicationId"`
	// Possible Values: `CUSTOM`, `LATEST_IE7_10_SUPPORTED`, `LATEST_STABLE`, `PREVIOUS_STABLE`
	JavascriptVersion pulumi.StringOutput `pulumi:"javascriptVersion"`
}

// NewWebAppJavascriptUpdates registers a new resource with the given unique name, arguments, and options.
func NewWebAppJavascriptUpdates(ctx *pulumi.Context,
	name string, args *WebAppJavascriptUpdatesArgs, opts ...pulumi.ResourceOption) (*WebAppJavascriptUpdates, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.JavascriptVersion == nil {
		return nil, errors.New("invalid value for required argument 'JavascriptVersion'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WebAppJavascriptUpdates
	err := ctx.RegisterResource("dynatrace:index/webAppJavascriptUpdates:WebAppJavascriptUpdates", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebAppJavascriptUpdates gets an existing WebAppJavascriptUpdates resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebAppJavascriptUpdates(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebAppJavascriptUpdatesState, opts ...pulumi.ResourceOption) (*WebAppJavascriptUpdates, error) {
	var resource WebAppJavascriptUpdates
	err := ctx.ReadResource("dynatrace:index/webAppJavascriptUpdates:WebAppJavascriptUpdates", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WebAppJavascriptUpdates resources.
type webAppJavascriptUpdatesState struct {
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ApplicationId *string `pulumi:"applicationId"`
	// Possible Values: `CUSTOM`, `LATEST_IE7_10_SUPPORTED`, `LATEST_STABLE`, `PREVIOUS_STABLE`
	JavascriptVersion *string `pulumi:"javascriptVersion"`
}

type WebAppJavascriptUpdatesState struct {
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ApplicationId pulumi.StringPtrInput
	// Possible Values: `CUSTOM`, `LATEST_IE7_10_SUPPORTED`, `LATEST_STABLE`, `PREVIOUS_STABLE`
	JavascriptVersion pulumi.StringPtrInput
}

func (WebAppJavascriptUpdatesState) ElementType() reflect.Type {
	return reflect.TypeOf((*webAppJavascriptUpdatesState)(nil)).Elem()
}

type webAppJavascriptUpdatesArgs struct {
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ApplicationId *string `pulumi:"applicationId"`
	// Possible Values: `CUSTOM`, `LATEST_IE7_10_SUPPORTED`, `LATEST_STABLE`, `PREVIOUS_STABLE`
	JavascriptVersion string `pulumi:"javascriptVersion"`
}

// The set of arguments for constructing a WebAppJavascriptUpdates resource.
type WebAppJavascriptUpdatesArgs struct {
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ApplicationId pulumi.StringPtrInput
	// Possible Values: `CUSTOM`, `LATEST_IE7_10_SUPPORTED`, `LATEST_STABLE`, `PREVIOUS_STABLE`
	JavascriptVersion pulumi.StringInput
}

func (WebAppJavascriptUpdatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webAppJavascriptUpdatesArgs)(nil)).Elem()
}

type WebAppJavascriptUpdatesInput interface {
	pulumi.Input

	ToWebAppJavascriptUpdatesOutput() WebAppJavascriptUpdatesOutput
	ToWebAppJavascriptUpdatesOutputWithContext(ctx context.Context) WebAppJavascriptUpdatesOutput
}

func (*WebAppJavascriptUpdates) ElementType() reflect.Type {
	return reflect.TypeOf((**WebAppJavascriptUpdates)(nil)).Elem()
}

func (i *WebAppJavascriptUpdates) ToWebAppJavascriptUpdatesOutput() WebAppJavascriptUpdatesOutput {
	return i.ToWebAppJavascriptUpdatesOutputWithContext(context.Background())
}

func (i *WebAppJavascriptUpdates) ToWebAppJavascriptUpdatesOutputWithContext(ctx context.Context) WebAppJavascriptUpdatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAppJavascriptUpdatesOutput)
}

// WebAppJavascriptUpdatesArrayInput is an input type that accepts WebAppJavascriptUpdatesArray and WebAppJavascriptUpdatesArrayOutput values.
// You can construct a concrete instance of `WebAppJavascriptUpdatesArrayInput` via:
//
//	WebAppJavascriptUpdatesArray{ WebAppJavascriptUpdatesArgs{...} }
type WebAppJavascriptUpdatesArrayInput interface {
	pulumi.Input

	ToWebAppJavascriptUpdatesArrayOutput() WebAppJavascriptUpdatesArrayOutput
	ToWebAppJavascriptUpdatesArrayOutputWithContext(context.Context) WebAppJavascriptUpdatesArrayOutput
}

type WebAppJavascriptUpdatesArray []WebAppJavascriptUpdatesInput

func (WebAppJavascriptUpdatesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebAppJavascriptUpdates)(nil)).Elem()
}

func (i WebAppJavascriptUpdatesArray) ToWebAppJavascriptUpdatesArrayOutput() WebAppJavascriptUpdatesArrayOutput {
	return i.ToWebAppJavascriptUpdatesArrayOutputWithContext(context.Background())
}

func (i WebAppJavascriptUpdatesArray) ToWebAppJavascriptUpdatesArrayOutputWithContext(ctx context.Context) WebAppJavascriptUpdatesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAppJavascriptUpdatesArrayOutput)
}

// WebAppJavascriptUpdatesMapInput is an input type that accepts WebAppJavascriptUpdatesMap and WebAppJavascriptUpdatesMapOutput values.
// You can construct a concrete instance of `WebAppJavascriptUpdatesMapInput` via:
//
//	WebAppJavascriptUpdatesMap{ "key": WebAppJavascriptUpdatesArgs{...} }
type WebAppJavascriptUpdatesMapInput interface {
	pulumi.Input

	ToWebAppJavascriptUpdatesMapOutput() WebAppJavascriptUpdatesMapOutput
	ToWebAppJavascriptUpdatesMapOutputWithContext(context.Context) WebAppJavascriptUpdatesMapOutput
}

type WebAppJavascriptUpdatesMap map[string]WebAppJavascriptUpdatesInput

func (WebAppJavascriptUpdatesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebAppJavascriptUpdates)(nil)).Elem()
}

func (i WebAppJavascriptUpdatesMap) ToWebAppJavascriptUpdatesMapOutput() WebAppJavascriptUpdatesMapOutput {
	return i.ToWebAppJavascriptUpdatesMapOutputWithContext(context.Background())
}

func (i WebAppJavascriptUpdatesMap) ToWebAppJavascriptUpdatesMapOutputWithContext(ctx context.Context) WebAppJavascriptUpdatesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAppJavascriptUpdatesMapOutput)
}

type WebAppJavascriptUpdatesOutput struct{ *pulumi.OutputState }

func (WebAppJavascriptUpdatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebAppJavascriptUpdates)(nil)).Elem()
}

func (o WebAppJavascriptUpdatesOutput) ToWebAppJavascriptUpdatesOutput() WebAppJavascriptUpdatesOutput {
	return o
}

func (o WebAppJavascriptUpdatesOutput) ToWebAppJavascriptUpdatesOutputWithContext(ctx context.Context) WebAppJavascriptUpdatesOutput {
	return o
}

// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
func (o WebAppJavascriptUpdatesOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebAppJavascriptUpdates) pulumi.StringPtrOutput { return v.ApplicationId }).(pulumi.StringPtrOutput)
}

// Possible Values: `CUSTOM`, `LATEST_IE7_10_SUPPORTED`, `LATEST_STABLE`, `PREVIOUS_STABLE`
func (o WebAppJavascriptUpdatesOutput) JavascriptVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *WebAppJavascriptUpdates) pulumi.StringOutput { return v.JavascriptVersion }).(pulumi.StringOutput)
}

type WebAppJavascriptUpdatesArrayOutput struct{ *pulumi.OutputState }

func (WebAppJavascriptUpdatesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebAppJavascriptUpdates)(nil)).Elem()
}

func (o WebAppJavascriptUpdatesArrayOutput) ToWebAppJavascriptUpdatesArrayOutput() WebAppJavascriptUpdatesArrayOutput {
	return o
}

func (o WebAppJavascriptUpdatesArrayOutput) ToWebAppJavascriptUpdatesArrayOutputWithContext(ctx context.Context) WebAppJavascriptUpdatesArrayOutput {
	return o
}

func (o WebAppJavascriptUpdatesArrayOutput) Index(i pulumi.IntInput) WebAppJavascriptUpdatesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WebAppJavascriptUpdates {
		return vs[0].([]*WebAppJavascriptUpdates)[vs[1].(int)]
	}).(WebAppJavascriptUpdatesOutput)
}

type WebAppJavascriptUpdatesMapOutput struct{ *pulumi.OutputState }

func (WebAppJavascriptUpdatesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebAppJavascriptUpdates)(nil)).Elem()
}

func (o WebAppJavascriptUpdatesMapOutput) ToWebAppJavascriptUpdatesMapOutput() WebAppJavascriptUpdatesMapOutput {
	return o
}

func (o WebAppJavascriptUpdatesMapOutput) ToWebAppJavascriptUpdatesMapOutputWithContext(ctx context.Context) WebAppJavascriptUpdatesMapOutput {
	return o
}

func (o WebAppJavascriptUpdatesMapOutput) MapIndex(k pulumi.StringInput) WebAppJavascriptUpdatesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WebAppJavascriptUpdates {
		return vs[0].(map[string]*WebAppJavascriptUpdates)[vs[1].(string)]
	}).(WebAppJavascriptUpdatesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WebAppJavascriptUpdatesInput)(nil)).Elem(), &WebAppJavascriptUpdates{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebAppJavascriptUpdatesArrayInput)(nil)).Elem(), WebAppJavascriptUpdatesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebAppJavascriptUpdatesMapInput)(nil)).Elem(), WebAppJavascriptUpdatesMap{})
	pulumi.RegisterOutputType(WebAppJavascriptUpdatesOutput{})
	pulumi.RegisterOutputType(WebAppJavascriptUpdatesArrayOutput{})
	pulumi.RegisterOutputType(WebAppJavascriptUpdatesMapOutput{})
}
