// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type UnifiedServicesOpentel struct {
	pulumi.CustomResourceState

	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
}

// NewUnifiedServicesOpentel registers a new resource with the given unique name, arguments, and options.
func NewUnifiedServicesOpentel(ctx *pulumi.Context,
	name string, args *UnifiedServicesOpentelArgs, opts ...pulumi.ResourceOption) (*UnifiedServicesOpentel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UnifiedServicesOpentel
	err := ctx.RegisterResource("dynatrace:index/unifiedServicesOpentel:UnifiedServicesOpentel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUnifiedServicesOpentel gets an existing UnifiedServicesOpentel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUnifiedServicesOpentel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UnifiedServicesOpentelState, opts ...pulumi.ResourceOption) (*UnifiedServicesOpentel, error) {
	var resource UnifiedServicesOpentel
	err := ctx.ReadResource("dynatrace:index/unifiedServicesOpentel:UnifiedServicesOpentel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UnifiedServicesOpentel resources.
type unifiedServicesOpentelState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
}

type UnifiedServicesOpentelState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
}

func (UnifiedServicesOpentelState) ElementType() reflect.Type {
	return reflect.TypeOf((*unifiedServicesOpentelState)(nil)).Elem()
}

type unifiedServicesOpentelArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
}

// The set of arguments for constructing a UnifiedServicesOpentel resource.
type UnifiedServicesOpentelArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
}

func (UnifiedServicesOpentelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*unifiedServicesOpentelArgs)(nil)).Elem()
}

type UnifiedServicesOpentelInput interface {
	pulumi.Input

	ToUnifiedServicesOpentelOutput() UnifiedServicesOpentelOutput
	ToUnifiedServicesOpentelOutputWithContext(ctx context.Context) UnifiedServicesOpentelOutput
}

func (*UnifiedServicesOpentel) ElementType() reflect.Type {
	return reflect.TypeOf((**UnifiedServicesOpentel)(nil)).Elem()
}

func (i *UnifiedServicesOpentel) ToUnifiedServicesOpentelOutput() UnifiedServicesOpentelOutput {
	return i.ToUnifiedServicesOpentelOutputWithContext(context.Background())
}

func (i *UnifiedServicesOpentel) ToUnifiedServicesOpentelOutputWithContext(ctx context.Context) UnifiedServicesOpentelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnifiedServicesOpentelOutput)
}

// UnifiedServicesOpentelArrayInput is an input type that accepts UnifiedServicesOpentelArray and UnifiedServicesOpentelArrayOutput values.
// You can construct a concrete instance of `UnifiedServicesOpentelArrayInput` via:
//
//	UnifiedServicesOpentelArray{ UnifiedServicesOpentelArgs{...} }
type UnifiedServicesOpentelArrayInput interface {
	pulumi.Input

	ToUnifiedServicesOpentelArrayOutput() UnifiedServicesOpentelArrayOutput
	ToUnifiedServicesOpentelArrayOutputWithContext(context.Context) UnifiedServicesOpentelArrayOutput
}

type UnifiedServicesOpentelArray []UnifiedServicesOpentelInput

func (UnifiedServicesOpentelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UnifiedServicesOpentel)(nil)).Elem()
}

func (i UnifiedServicesOpentelArray) ToUnifiedServicesOpentelArrayOutput() UnifiedServicesOpentelArrayOutput {
	return i.ToUnifiedServicesOpentelArrayOutputWithContext(context.Background())
}

func (i UnifiedServicesOpentelArray) ToUnifiedServicesOpentelArrayOutputWithContext(ctx context.Context) UnifiedServicesOpentelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnifiedServicesOpentelArrayOutput)
}

// UnifiedServicesOpentelMapInput is an input type that accepts UnifiedServicesOpentelMap and UnifiedServicesOpentelMapOutput values.
// You can construct a concrete instance of `UnifiedServicesOpentelMapInput` via:
//
//	UnifiedServicesOpentelMap{ "key": UnifiedServicesOpentelArgs{...} }
type UnifiedServicesOpentelMapInput interface {
	pulumi.Input

	ToUnifiedServicesOpentelMapOutput() UnifiedServicesOpentelMapOutput
	ToUnifiedServicesOpentelMapOutputWithContext(context.Context) UnifiedServicesOpentelMapOutput
}

type UnifiedServicesOpentelMap map[string]UnifiedServicesOpentelInput

func (UnifiedServicesOpentelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UnifiedServicesOpentel)(nil)).Elem()
}

func (i UnifiedServicesOpentelMap) ToUnifiedServicesOpentelMapOutput() UnifiedServicesOpentelMapOutput {
	return i.ToUnifiedServicesOpentelMapOutputWithContext(context.Background())
}

func (i UnifiedServicesOpentelMap) ToUnifiedServicesOpentelMapOutputWithContext(ctx context.Context) UnifiedServicesOpentelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnifiedServicesOpentelMapOutput)
}

type UnifiedServicesOpentelOutput struct{ *pulumi.OutputState }

func (UnifiedServicesOpentelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UnifiedServicesOpentel)(nil)).Elem()
}

func (o UnifiedServicesOpentelOutput) ToUnifiedServicesOpentelOutput() UnifiedServicesOpentelOutput {
	return o
}

func (o UnifiedServicesOpentelOutput) ToUnifiedServicesOpentelOutputWithContext(ctx context.Context) UnifiedServicesOpentelOutput {
	return o
}

// This setting is enabled (`true`) or disabled (`false`)
func (o UnifiedServicesOpentelOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *UnifiedServicesOpentel) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

type UnifiedServicesOpentelArrayOutput struct{ *pulumi.OutputState }

func (UnifiedServicesOpentelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UnifiedServicesOpentel)(nil)).Elem()
}

func (o UnifiedServicesOpentelArrayOutput) ToUnifiedServicesOpentelArrayOutput() UnifiedServicesOpentelArrayOutput {
	return o
}

func (o UnifiedServicesOpentelArrayOutput) ToUnifiedServicesOpentelArrayOutputWithContext(ctx context.Context) UnifiedServicesOpentelArrayOutput {
	return o
}

func (o UnifiedServicesOpentelArrayOutput) Index(i pulumi.IntInput) UnifiedServicesOpentelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UnifiedServicesOpentel {
		return vs[0].([]*UnifiedServicesOpentel)[vs[1].(int)]
	}).(UnifiedServicesOpentelOutput)
}

type UnifiedServicesOpentelMapOutput struct{ *pulumi.OutputState }

func (UnifiedServicesOpentelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UnifiedServicesOpentel)(nil)).Elem()
}

func (o UnifiedServicesOpentelMapOutput) ToUnifiedServicesOpentelMapOutput() UnifiedServicesOpentelMapOutput {
	return o
}

func (o UnifiedServicesOpentelMapOutput) ToUnifiedServicesOpentelMapOutputWithContext(ctx context.Context) UnifiedServicesOpentelMapOutput {
	return o
}

func (o UnifiedServicesOpentelMapOutput) MapIndex(k pulumi.StringInput) UnifiedServicesOpentelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UnifiedServicesOpentel {
		return vs[0].(map[string]*UnifiedServicesOpentel)[vs[1].(string)]
	}).(UnifiedServicesOpentelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UnifiedServicesOpentelInput)(nil)).Elem(), &UnifiedServicesOpentel{})
	pulumi.RegisterInputType(reflect.TypeOf((*UnifiedServicesOpentelArrayInput)(nil)).Elem(), UnifiedServicesOpentelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UnifiedServicesOpentelMapInput)(nil)).Elem(), UnifiedServicesOpentelMap{})
	pulumi.RegisterOutputType(UnifiedServicesOpentelOutput{})
	pulumi.RegisterOutputType(UnifiedServicesOpentelArrayOutput{})
	pulumi.RegisterOutputType(UnifiedServicesOpentelMapOutput{})
}
