// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type ManagementZoneV2 struct {
	pulumi.CustomResourceState

	// Description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The ID of this setting when referred to by the Config REST API V1
	LegacyId pulumi.StringOutput `pulumi:"legacyId"`
	// **Be careful when renaming** - if there are policies that are referencing this Management zone, they will need to be adapted to the new name!
	Name pulumi.StringOutput `pulumi:"name"`
	// Rules
	Rules ManagementZoneV2RulesPtrOutput `pulumi:"rules"`
}

// NewManagementZoneV2 registers a new resource with the given unique name, arguments, and options.
func NewManagementZoneV2(ctx *pulumi.Context,
	name string, args *ManagementZoneV2Args, opts ...pulumi.ResourceOption) (*ManagementZoneV2, error) {
	if args == nil {
		args = &ManagementZoneV2Args{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ManagementZoneV2
	err := ctx.RegisterResource("dynatrace:index/managementZoneV2:ManagementZoneV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagementZoneV2 gets an existing ManagementZoneV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagementZoneV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagementZoneV2State, opts ...pulumi.ResourceOption) (*ManagementZoneV2, error) {
	var resource ManagementZoneV2
	err := ctx.ReadResource("dynatrace:index/managementZoneV2:ManagementZoneV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagementZoneV2 resources.
type managementZoneV2State struct {
	// Description
	Description *string `pulumi:"description"`
	// The ID of this setting when referred to by the Config REST API V1
	LegacyId *string `pulumi:"legacyId"`
	// **Be careful when renaming** - if there are policies that are referencing this Management zone, they will need to be adapted to the new name!
	Name *string `pulumi:"name"`
	// Rules
	Rules *ManagementZoneV2Rules `pulumi:"rules"`
}

type ManagementZoneV2State struct {
	// Description
	Description pulumi.StringPtrInput
	// The ID of this setting when referred to by the Config REST API V1
	LegacyId pulumi.StringPtrInput
	// **Be careful when renaming** - if there are policies that are referencing this Management zone, they will need to be adapted to the new name!
	Name pulumi.StringPtrInput
	// Rules
	Rules ManagementZoneV2RulesPtrInput
}

func (ManagementZoneV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*managementZoneV2State)(nil)).Elem()
}

type managementZoneV2Args struct {
	// Description
	Description *string `pulumi:"description"`
	// The ID of this setting when referred to by the Config REST API V1
	LegacyId *string `pulumi:"legacyId"`
	// **Be careful when renaming** - if there are policies that are referencing this Management zone, they will need to be adapted to the new name!
	Name *string `pulumi:"name"`
	// Rules
	Rules *ManagementZoneV2Rules `pulumi:"rules"`
}

// The set of arguments for constructing a ManagementZoneV2 resource.
type ManagementZoneV2Args struct {
	// Description
	Description pulumi.StringPtrInput
	// The ID of this setting when referred to by the Config REST API V1
	LegacyId pulumi.StringPtrInput
	// **Be careful when renaming** - if there are policies that are referencing this Management zone, they will need to be adapted to the new name!
	Name pulumi.StringPtrInput
	// Rules
	Rules ManagementZoneV2RulesPtrInput
}

func (ManagementZoneV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*managementZoneV2Args)(nil)).Elem()
}

type ManagementZoneV2Input interface {
	pulumi.Input

	ToManagementZoneV2Output() ManagementZoneV2Output
	ToManagementZoneV2OutputWithContext(ctx context.Context) ManagementZoneV2Output
}

func (*ManagementZoneV2) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagementZoneV2)(nil)).Elem()
}

func (i *ManagementZoneV2) ToManagementZoneV2Output() ManagementZoneV2Output {
	return i.ToManagementZoneV2OutputWithContext(context.Background())
}

func (i *ManagementZoneV2) ToManagementZoneV2OutputWithContext(ctx context.Context) ManagementZoneV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementZoneV2Output)
}

// ManagementZoneV2ArrayInput is an input type that accepts ManagementZoneV2Array and ManagementZoneV2ArrayOutput values.
// You can construct a concrete instance of `ManagementZoneV2ArrayInput` via:
//
//	ManagementZoneV2Array{ ManagementZoneV2Args{...} }
type ManagementZoneV2ArrayInput interface {
	pulumi.Input

	ToManagementZoneV2ArrayOutput() ManagementZoneV2ArrayOutput
	ToManagementZoneV2ArrayOutputWithContext(context.Context) ManagementZoneV2ArrayOutput
}

type ManagementZoneV2Array []ManagementZoneV2Input

func (ManagementZoneV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagementZoneV2)(nil)).Elem()
}

func (i ManagementZoneV2Array) ToManagementZoneV2ArrayOutput() ManagementZoneV2ArrayOutput {
	return i.ToManagementZoneV2ArrayOutputWithContext(context.Background())
}

func (i ManagementZoneV2Array) ToManagementZoneV2ArrayOutputWithContext(ctx context.Context) ManagementZoneV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementZoneV2ArrayOutput)
}

// ManagementZoneV2MapInput is an input type that accepts ManagementZoneV2Map and ManagementZoneV2MapOutput values.
// You can construct a concrete instance of `ManagementZoneV2MapInput` via:
//
//	ManagementZoneV2Map{ "key": ManagementZoneV2Args{...} }
type ManagementZoneV2MapInput interface {
	pulumi.Input

	ToManagementZoneV2MapOutput() ManagementZoneV2MapOutput
	ToManagementZoneV2MapOutputWithContext(context.Context) ManagementZoneV2MapOutput
}

type ManagementZoneV2Map map[string]ManagementZoneV2Input

func (ManagementZoneV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagementZoneV2)(nil)).Elem()
}

func (i ManagementZoneV2Map) ToManagementZoneV2MapOutput() ManagementZoneV2MapOutput {
	return i.ToManagementZoneV2MapOutputWithContext(context.Background())
}

func (i ManagementZoneV2Map) ToManagementZoneV2MapOutputWithContext(ctx context.Context) ManagementZoneV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementZoneV2MapOutput)
}

type ManagementZoneV2Output struct{ *pulumi.OutputState }

func (ManagementZoneV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagementZoneV2)(nil)).Elem()
}

func (o ManagementZoneV2Output) ToManagementZoneV2Output() ManagementZoneV2Output {
	return o
}

func (o ManagementZoneV2Output) ToManagementZoneV2OutputWithContext(ctx context.Context) ManagementZoneV2Output {
	return o
}

// Description
func (o ManagementZoneV2Output) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagementZoneV2) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The ID of this setting when referred to by the Config REST API V1
func (o ManagementZoneV2Output) LegacyId() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagementZoneV2) pulumi.StringOutput { return v.LegacyId }).(pulumi.StringOutput)
}

// **Be careful when renaming** - if there are policies that are referencing this Management zone, they will need to be adapted to the new name!
func (o ManagementZoneV2Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagementZoneV2) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Rules
func (o ManagementZoneV2Output) Rules() ManagementZoneV2RulesPtrOutput {
	return o.ApplyT(func(v *ManagementZoneV2) ManagementZoneV2RulesPtrOutput { return v.Rules }).(ManagementZoneV2RulesPtrOutput)
}

type ManagementZoneV2ArrayOutput struct{ *pulumi.OutputState }

func (ManagementZoneV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagementZoneV2)(nil)).Elem()
}

func (o ManagementZoneV2ArrayOutput) ToManagementZoneV2ArrayOutput() ManagementZoneV2ArrayOutput {
	return o
}

func (o ManagementZoneV2ArrayOutput) ToManagementZoneV2ArrayOutputWithContext(ctx context.Context) ManagementZoneV2ArrayOutput {
	return o
}

func (o ManagementZoneV2ArrayOutput) Index(i pulumi.IntInput) ManagementZoneV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ManagementZoneV2 {
		return vs[0].([]*ManagementZoneV2)[vs[1].(int)]
	}).(ManagementZoneV2Output)
}

type ManagementZoneV2MapOutput struct{ *pulumi.OutputState }

func (ManagementZoneV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagementZoneV2)(nil)).Elem()
}

func (o ManagementZoneV2MapOutput) ToManagementZoneV2MapOutput() ManagementZoneV2MapOutput {
	return o
}

func (o ManagementZoneV2MapOutput) ToManagementZoneV2MapOutputWithContext(ctx context.Context) ManagementZoneV2MapOutput {
	return o
}

func (o ManagementZoneV2MapOutput) MapIndex(k pulumi.StringInput) ManagementZoneV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ManagementZoneV2 {
		return vs[0].(map[string]*ManagementZoneV2)[vs[1].(string)]
	}).(ManagementZoneV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManagementZoneV2Input)(nil)).Elem(), &ManagementZoneV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagementZoneV2ArrayInput)(nil)).Elem(), ManagementZoneV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagementZoneV2MapInput)(nil)).Elem(), ManagementZoneV2Map{})
	pulumi.RegisterOutputType(ManagementZoneV2Output{})
	pulumi.RegisterOutputType(ManagementZoneV2ArrayOutput{})
	pulumi.RegisterOutputType(ManagementZoneV2MapOutput{})
}
