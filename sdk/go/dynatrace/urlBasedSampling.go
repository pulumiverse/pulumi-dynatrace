// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type UrlBasedSampling struct {
	pulumi.CustomResourceState

	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Select the scaling factor for the current sampling rate of the system. Possible values: `IncreaseCapturing128Times`, `IncreaseCapturing64Times`, `IncreaseCapturing32Times`, `IncreaseCapturing16Times`, `IncreaseCapturing8Times`, `IncreaseCapturing4Times`, `IncreaseCapturing2Times`, `ReduceCapturingByFactor2`, `ReduceCapturingByFactor4`, `ReduceCapturingByFactor8`, `ReduceCapturingByFactor16`, `ReduceCapturingByFactor32`, `ReduceCapturingByFactor64`, `ReduceCapturingByFactor128`
	Factor pulumi.StringPtrOutput `pulumi:"factor"`
	// The scaling factor for the defined URL will be applied to any HTTP method.
	HttpMethodAny pulumi.BoolOutput `pulumi:"httpMethodAny"`
	// Possible values: `GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH`
	HttpMethods pulumi.StringArrayOutput `pulumi:"httpMethods"`
	// The matching URLs will always be ignored, also if Adaptive Traffic Management is not active.
	Ignore pulumi.BoolOutput `pulumi:"ignore"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringOutput `pulumi:"insertAfter"`
	// Path of the URL.
	Path pulumi.StringPtrOutput `pulumi:"path"`
	// Path comparison condition. Possible values: `EQUALS`, `DOES_NOT_EQUAL`, `CONTAINS`, `DOES_NOT_CONTAIN`, `STARTS_WITH`, `DOES_NOT_START_WITH`, `ENDS_WITH`, `DOES_NOT_END_WITH`
	PathComparisonType pulumi.StringPtrOutput `pulumi:"pathComparisonType"`
	// Add URL parameters in any order. **All** specified parameters must be present in the query of an URL to get a match.
	QueryParameters UrlBasedSamplingQueryParametersPtrOutput `pulumi:"queryParameters"`
	// The scope of this setting (PROCESS*GROUP*INSTANCE, PROCESS_GROUP). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
}

// NewUrlBasedSampling registers a new resource with the given unique name, arguments, and options.
func NewUrlBasedSampling(ctx *pulumi.Context,
	name string, args *UrlBasedSamplingArgs, opts ...pulumi.ResourceOption) (*UrlBasedSampling, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.HttpMethodAny == nil {
		return nil, errors.New("invalid value for required argument 'HttpMethodAny'")
	}
	if args.Ignore == nil {
		return nil, errors.New("invalid value for required argument 'Ignore'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UrlBasedSampling
	err := ctx.RegisterResource("dynatrace:index/urlBasedSampling:UrlBasedSampling", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUrlBasedSampling gets an existing UrlBasedSampling resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUrlBasedSampling(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UrlBasedSamplingState, opts ...pulumi.ResourceOption) (*UrlBasedSampling, error) {
	var resource UrlBasedSampling
	err := ctx.ReadResource("dynatrace:index/urlBasedSampling:UrlBasedSampling", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UrlBasedSampling resources.
type urlBasedSamplingState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// Select the scaling factor for the current sampling rate of the system. Possible values: `IncreaseCapturing128Times`, `IncreaseCapturing64Times`, `IncreaseCapturing32Times`, `IncreaseCapturing16Times`, `IncreaseCapturing8Times`, `IncreaseCapturing4Times`, `IncreaseCapturing2Times`, `ReduceCapturingByFactor2`, `ReduceCapturingByFactor4`, `ReduceCapturingByFactor8`, `ReduceCapturingByFactor16`, `ReduceCapturingByFactor32`, `ReduceCapturingByFactor64`, `ReduceCapturingByFactor128`
	Factor *string `pulumi:"factor"`
	// The scaling factor for the defined URL will be applied to any HTTP method.
	HttpMethodAny *bool `pulumi:"httpMethodAny"`
	// Possible values: `GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH`
	HttpMethods []string `pulumi:"httpMethods"`
	// The matching URLs will always be ignored, also if Adaptive Traffic Management is not active.
	Ignore *bool `pulumi:"ignore"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `pulumi:"insertAfter"`
	// Path of the URL.
	Path *string `pulumi:"path"`
	// Path comparison condition. Possible values: `EQUALS`, `DOES_NOT_EQUAL`, `CONTAINS`, `DOES_NOT_CONTAIN`, `STARTS_WITH`, `DOES_NOT_START_WITH`, `ENDS_WITH`, `DOES_NOT_END_WITH`
	PathComparisonType *string `pulumi:"pathComparisonType"`
	// Add URL parameters in any order. **All** specified parameters must be present in the query of an URL to get a match.
	QueryParameters *UrlBasedSamplingQueryParameters `pulumi:"queryParameters"`
	// The scope of this setting (PROCESS*GROUP*INSTANCE, PROCESS_GROUP). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
}

type UrlBasedSamplingState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// Select the scaling factor for the current sampling rate of the system. Possible values: `IncreaseCapturing128Times`, `IncreaseCapturing64Times`, `IncreaseCapturing32Times`, `IncreaseCapturing16Times`, `IncreaseCapturing8Times`, `IncreaseCapturing4Times`, `IncreaseCapturing2Times`, `ReduceCapturingByFactor2`, `ReduceCapturingByFactor4`, `ReduceCapturingByFactor8`, `ReduceCapturingByFactor16`, `ReduceCapturingByFactor32`, `ReduceCapturingByFactor64`, `ReduceCapturingByFactor128`
	Factor pulumi.StringPtrInput
	// The scaling factor for the defined URL will be applied to any HTTP method.
	HttpMethodAny pulumi.BoolPtrInput
	// Possible values: `GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH`
	HttpMethods pulumi.StringArrayInput
	// The matching URLs will always be ignored, also if Adaptive Traffic Management is not active.
	Ignore pulumi.BoolPtrInput
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringPtrInput
	// Path of the URL.
	Path pulumi.StringPtrInput
	// Path comparison condition. Possible values: `EQUALS`, `DOES_NOT_EQUAL`, `CONTAINS`, `DOES_NOT_CONTAIN`, `STARTS_WITH`, `DOES_NOT_START_WITH`, `ENDS_WITH`, `DOES_NOT_END_WITH`
	PathComparisonType pulumi.StringPtrInput
	// Add URL parameters in any order. **All** specified parameters must be present in the query of an URL to get a match.
	QueryParameters UrlBasedSamplingQueryParametersPtrInput
	// The scope of this setting (PROCESS*GROUP*INSTANCE, PROCESS_GROUP). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
}

func (UrlBasedSamplingState) ElementType() reflect.Type {
	return reflect.TypeOf((*urlBasedSamplingState)(nil)).Elem()
}

type urlBasedSamplingArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// Select the scaling factor for the current sampling rate of the system. Possible values: `IncreaseCapturing128Times`, `IncreaseCapturing64Times`, `IncreaseCapturing32Times`, `IncreaseCapturing16Times`, `IncreaseCapturing8Times`, `IncreaseCapturing4Times`, `IncreaseCapturing2Times`, `ReduceCapturingByFactor2`, `ReduceCapturingByFactor4`, `ReduceCapturingByFactor8`, `ReduceCapturingByFactor16`, `ReduceCapturingByFactor32`, `ReduceCapturingByFactor64`, `ReduceCapturingByFactor128`
	Factor *string `pulumi:"factor"`
	// The scaling factor for the defined URL will be applied to any HTTP method.
	HttpMethodAny bool `pulumi:"httpMethodAny"`
	// Possible values: `GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH`
	HttpMethods []string `pulumi:"httpMethods"`
	// The matching URLs will always be ignored, also if Adaptive Traffic Management is not active.
	Ignore bool `pulumi:"ignore"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `pulumi:"insertAfter"`
	// Path of the URL.
	Path *string `pulumi:"path"`
	// Path comparison condition. Possible values: `EQUALS`, `DOES_NOT_EQUAL`, `CONTAINS`, `DOES_NOT_CONTAIN`, `STARTS_WITH`, `DOES_NOT_START_WITH`, `ENDS_WITH`, `DOES_NOT_END_WITH`
	PathComparisonType *string `pulumi:"pathComparisonType"`
	// Add URL parameters in any order. **All** specified parameters must be present in the query of an URL to get a match.
	QueryParameters *UrlBasedSamplingQueryParameters `pulumi:"queryParameters"`
	// The scope of this setting (PROCESS*GROUP*INSTANCE, PROCESS_GROUP). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
}

// The set of arguments for constructing a UrlBasedSampling resource.
type UrlBasedSamplingArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// Select the scaling factor for the current sampling rate of the system. Possible values: `IncreaseCapturing128Times`, `IncreaseCapturing64Times`, `IncreaseCapturing32Times`, `IncreaseCapturing16Times`, `IncreaseCapturing8Times`, `IncreaseCapturing4Times`, `IncreaseCapturing2Times`, `ReduceCapturingByFactor2`, `ReduceCapturingByFactor4`, `ReduceCapturingByFactor8`, `ReduceCapturingByFactor16`, `ReduceCapturingByFactor32`, `ReduceCapturingByFactor64`, `ReduceCapturingByFactor128`
	Factor pulumi.StringPtrInput
	// The scaling factor for the defined URL will be applied to any HTTP method.
	HttpMethodAny pulumi.BoolInput
	// Possible values: `GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH`
	HttpMethods pulumi.StringArrayInput
	// The matching URLs will always be ignored, also if Adaptive Traffic Management is not active.
	Ignore pulumi.BoolInput
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringPtrInput
	// Path of the URL.
	Path pulumi.StringPtrInput
	// Path comparison condition. Possible values: `EQUALS`, `DOES_NOT_EQUAL`, `CONTAINS`, `DOES_NOT_CONTAIN`, `STARTS_WITH`, `DOES_NOT_START_WITH`, `ENDS_WITH`, `DOES_NOT_END_WITH`
	PathComparisonType pulumi.StringPtrInput
	// Add URL parameters in any order. **All** specified parameters must be present in the query of an URL to get a match.
	QueryParameters UrlBasedSamplingQueryParametersPtrInput
	// The scope of this setting (PROCESS*GROUP*INSTANCE, PROCESS_GROUP). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
}

func (UrlBasedSamplingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*urlBasedSamplingArgs)(nil)).Elem()
}

type UrlBasedSamplingInput interface {
	pulumi.Input

	ToUrlBasedSamplingOutput() UrlBasedSamplingOutput
	ToUrlBasedSamplingOutputWithContext(ctx context.Context) UrlBasedSamplingOutput
}

func (*UrlBasedSampling) ElementType() reflect.Type {
	return reflect.TypeOf((**UrlBasedSampling)(nil)).Elem()
}

func (i *UrlBasedSampling) ToUrlBasedSamplingOutput() UrlBasedSamplingOutput {
	return i.ToUrlBasedSamplingOutputWithContext(context.Background())
}

func (i *UrlBasedSampling) ToUrlBasedSamplingOutputWithContext(ctx context.Context) UrlBasedSamplingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlBasedSamplingOutput)
}

// UrlBasedSamplingArrayInput is an input type that accepts UrlBasedSamplingArray and UrlBasedSamplingArrayOutput values.
// You can construct a concrete instance of `UrlBasedSamplingArrayInput` via:
//
//	UrlBasedSamplingArray{ UrlBasedSamplingArgs{...} }
type UrlBasedSamplingArrayInput interface {
	pulumi.Input

	ToUrlBasedSamplingArrayOutput() UrlBasedSamplingArrayOutput
	ToUrlBasedSamplingArrayOutputWithContext(context.Context) UrlBasedSamplingArrayOutput
}

type UrlBasedSamplingArray []UrlBasedSamplingInput

func (UrlBasedSamplingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UrlBasedSampling)(nil)).Elem()
}

func (i UrlBasedSamplingArray) ToUrlBasedSamplingArrayOutput() UrlBasedSamplingArrayOutput {
	return i.ToUrlBasedSamplingArrayOutputWithContext(context.Background())
}

func (i UrlBasedSamplingArray) ToUrlBasedSamplingArrayOutputWithContext(ctx context.Context) UrlBasedSamplingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlBasedSamplingArrayOutput)
}

// UrlBasedSamplingMapInput is an input type that accepts UrlBasedSamplingMap and UrlBasedSamplingMapOutput values.
// You can construct a concrete instance of `UrlBasedSamplingMapInput` via:
//
//	UrlBasedSamplingMap{ "key": UrlBasedSamplingArgs{...} }
type UrlBasedSamplingMapInput interface {
	pulumi.Input

	ToUrlBasedSamplingMapOutput() UrlBasedSamplingMapOutput
	ToUrlBasedSamplingMapOutputWithContext(context.Context) UrlBasedSamplingMapOutput
}

type UrlBasedSamplingMap map[string]UrlBasedSamplingInput

func (UrlBasedSamplingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UrlBasedSampling)(nil)).Elem()
}

func (i UrlBasedSamplingMap) ToUrlBasedSamplingMapOutput() UrlBasedSamplingMapOutput {
	return i.ToUrlBasedSamplingMapOutputWithContext(context.Background())
}

func (i UrlBasedSamplingMap) ToUrlBasedSamplingMapOutputWithContext(ctx context.Context) UrlBasedSamplingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlBasedSamplingMapOutput)
}

type UrlBasedSamplingOutput struct{ *pulumi.OutputState }

func (UrlBasedSamplingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UrlBasedSampling)(nil)).Elem()
}

func (o UrlBasedSamplingOutput) ToUrlBasedSamplingOutput() UrlBasedSamplingOutput {
	return o
}

func (o UrlBasedSamplingOutput) ToUrlBasedSamplingOutputWithContext(ctx context.Context) UrlBasedSamplingOutput {
	return o
}

// This setting is enabled (`true`) or disabled (`false`)
func (o UrlBasedSamplingOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *UrlBasedSampling) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Select the scaling factor for the current sampling rate of the system. Possible values: `IncreaseCapturing128Times`, `IncreaseCapturing64Times`, `IncreaseCapturing32Times`, `IncreaseCapturing16Times`, `IncreaseCapturing8Times`, `IncreaseCapturing4Times`, `IncreaseCapturing2Times`, `ReduceCapturingByFactor2`, `ReduceCapturingByFactor4`, `ReduceCapturingByFactor8`, `ReduceCapturingByFactor16`, `ReduceCapturingByFactor32`, `ReduceCapturingByFactor64`, `ReduceCapturingByFactor128`
func (o UrlBasedSamplingOutput) Factor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UrlBasedSampling) pulumi.StringPtrOutput { return v.Factor }).(pulumi.StringPtrOutput)
}

// The scaling factor for the defined URL will be applied to any HTTP method.
func (o UrlBasedSamplingOutput) HttpMethodAny() pulumi.BoolOutput {
	return o.ApplyT(func(v *UrlBasedSampling) pulumi.BoolOutput { return v.HttpMethodAny }).(pulumi.BoolOutput)
}

// Possible values: `GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH`
func (o UrlBasedSamplingOutput) HttpMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UrlBasedSampling) pulumi.StringArrayOutput { return v.HttpMethods }).(pulumi.StringArrayOutput)
}

// The matching URLs will always be ignored, also if Adaptive Traffic Management is not active.
func (o UrlBasedSamplingOutput) Ignore() pulumi.BoolOutput {
	return o.ApplyT(func(v *UrlBasedSampling) pulumi.BoolOutput { return v.Ignore }).(pulumi.BoolOutput)
}

// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
func (o UrlBasedSamplingOutput) InsertAfter() pulumi.StringOutput {
	return o.ApplyT(func(v *UrlBasedSampling) pulumi.StringOutput { return v.InsertAfter }).(pulumi.StringOutput)
}

// Path of the URL.
func (o UrlBasedSamplingOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UrlBasedSampling) pulumi.StringPtrOutput { return v.Path }).(pulumi.StringPtrOutput)
}

// Path comparison condition. Possible values: `EQUALS`, `DOES_NOT_EQUAL`, `CONTAINS`, `DOES_NOT_CONTAIN`, `STARTS_WITH`, `DOES_NOT_START_WITH`, `ENDS_WITH`, `DOES_NOT_END_WITH`
func (o UrlBasedSamplingOutput) PathComparisonType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UrlBasedSampling) pulumi.StringPtrOutput { return v.PathComparisonType }).(pulumi.StringPtrOutput)
}

// Add URL parameters in any order. **All** specified parameters must be present in the query of an URL to get a match.
func (o UrlBasedSamplingOutput) QueryParameters() UrlBasedSamplingQueryParametersPtrOutput {
	return o.ApplyT(func(v *UrlBasedSampling) UrlBasedSamplingQueryParametersPtrOutput { return v.QueryParameters }).(UrlBasedSamplingQueryParametersPtrOutput)
}

// The scope of this setting (PROCESS*GROUP*INSTANCE, PROCESS_GROUP). Omit this property if you want to cover the whole environment.
func (o UrlBasedSamplingOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UrlBasedSampling) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

type UrlBasedSamplingArrayOutput struct{ *pulumi.OutputState }

func (UrlBasedSamplingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UrlBasedSampling)(nil)).Elem()
}

func (o UrlBasedSamplingArrayOutput) ToUrlBasedSamplingArrayOutput() UrlBasedSamplingArrayOutput {
	return o
}

func (o UrlBasedSamplingArrayOutput) ToUrlBasedSamplingArrayOutputWithContext(ctx context.Context) UrlBasedSamplingArrayOutput {
	return o
}

func (o UrlBasedSamplingArrayOutput) Index(i pulumi.IntInput) UrlBasedSamplingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UrlBasedSampling {
		return vs[0].([]*UrlBasedSampling)[vs[1].(int)]
	}).(UrlBasedSamplingOutput)
}

type UrlBasedSamplingMapOutput struct{ *pulumi.OutputState }

func (UrlBasedSamplingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UrlBasedSampling)(nil)).Elem()
}

func (o UrlBasedSamplingMapOutput) ToUrlBasedSamplingMapOutput() UrlBasedSamplingMapOutput {
	return o
}

func (o UrlBasedSamplingMapOutput) ToUrlBasedSamplingMapOutputWithContext(ctx context.Context) UrlBasedSamplingMapOutput {
	return o
}

func (o UrlBasedSamplingMapOutput) MapIndex(k pulumi.StringInput) UrlBasedSamplingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UrlBasedSampling {
		return vs[0].(map[string]*UrlBasedSampling)[vs[1].(string)]
	}).(UrlBasedSamplingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UrlBasedSamplingInput)(nil)).Elem(), &UrlBasedSampling{})
	pulumi.RegisterInputType(reflect.TypeOf((*UrlBasedSamplingArrayInput)(nil)).Elem(), UrlBasedSamplingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UrlBasedSamplingMapInput)(nil)).Elem(), UrlBasedSamplingMap{})
	pulumi.RegisterOutputType(UrlBasedSamplingOutput{})
	pulumi.RegisterOutputType(UrlBasedSamplingArrayOutput{})
	pulumi.RegisterOutputType(UrlBasedSamplingMapOutput{})
}
