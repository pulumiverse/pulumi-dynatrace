// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OpenpipelineV2SpansIngestsources struct {
	pulumi.CustomResourceState

	// Default Bucket
	DefaultBucket pulumi.StringPtrOutput `pulumi:"defaultBucket"`
	// Endpoint display name
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Endpoint segment
	PathSegment pulumi.StringOutput `pulumi:"pathSegment"`
	// Processing stage
	Processing OpenpipelineV2SpansIngestsourcesProcessingOutput `pulumi:"processing"`
	// Static routing of endpoint
	StaticRouting OpenpipelineV2SpansIngestsourcesStaticRoutingPtrOutput `pulumi:"staticRouting"`
}

// NewOpenpipelineV2SpansIngestsources registers a new resource with the given unique name, arguments, and options.
func NewOpenpipelineV2SpansIngestsources(ctx *pulumi.Context,
	name string, args *OpenpipelineV2SpansIngestsourcesArgs, opts ...pulumi.ResourceOption) (*OpenpipelineV2SpansIngestsources, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.PathSegment == nil {
		return nil, errors.New("invalid value for required argument 'PathSegment'")
	}
	if args.Processing == nil {
		return nil, errors.New("invalid value for required argument 'Processing'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenpipelineV2SpansIngestsources
	err := ctx.RegisterResource("dynatrace:index/openpipelineV2SpansIngestsources:OpenpipelineV2SpansIngestsources", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenpipelineV2SpansIngestsources gets an existing OpenpipelineV2SpansIngestsources resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenpipelineV2SpansIngestsources(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenpipelineV2SpansIngestsourcesState, opts ...pulumi.ResourceOption) (*OpenpipelineV2SpansIngestsources, error) {
	var resource OpenpipelineV2SpansIngestsources
	err := ctx.ReadResource("dynatrace:index/openpipelineV2SpansIngestsources:OpenpipelineV2SpansIngestsources", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenpipelineV2SpansIngestsources resources.
type openpipelineV2SpansIngestsourcesState struct {
	// Default Bucket
	DefaultBucket *string `pulumi:"defaultBucket"`
	// Endpoint display name
	DisplayName *string `pulumi:"displayName"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// Endpoint segment
	PathSegment *string `pulumi:"pathSegment"`
	// Processing stage
	Processing *OpenpipelineV2SpansIngestsourcesProcessing `pulumi:"processing"`
	// Static routing of endpoint
	StaticRouting *OpenpipelineV2SpansIngestsourcesStaticRouting `pulumi:"staticRouting"`
}

type OpenpipelineV2SpansIngestsourcesState struct {
	// Default Bucket
	DefaultBucket pulumi.StringPtrInput
	// Endpoint display name
	DisplayName pulumi.StringPtrInput
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// Endpoint segment
	PathSegment pulumi.StringPtrInput
	// Processing stage
	Processing OpenpipelineV2SpansIngestsourcesProcessingPtrInput
	// Static routing of endpoint
	StaticRouting OpenpipelineV2SpansIngestsourcesStaticRoutingPtrInput
}

func (OpenpipelineV2SpansIngestsourcesState) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2SpansIngestsourcesState)(nil)).Elem()
}

type openpipelineV2SpansIngestsourcesArgs struct {
	// Default Bucket
	DefaultBucket *string `pulumi:"defaultBucket"`
	// Endpoint display name
	DisplayName string `pulumi:"displayName"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// Endpoint segment
	PathSegment string `pulumi:"pathSegment"`
	// Processing stage
	Processing OpenpipelineV2SpansIngestsourcesProcessing `pulumi:"processing"`
	// Static routing of endpoint
	StaticRouting *OpenpipelineV2SpansIngestsourcesStaticRouting `pulumi:"staticRouting"`
}

// The set of arguments for constructing a OpenpipelineV2SpansIngestsources resource.
type OpenpipelineV2SpansIngestsourcesArgs struct {
	// Default Bucket
	DefaultBucket pulumi.StringPtrInput
	// Endpoint display name
	DisplayName pulumi.StringInput
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// Endpoint segment
	PathSegment pulumi.StringInput
	// Processing stage
	Processing OpenpipelineV2SpansIngestsourcesProcessingInput
	// Static routing of endpoint
	StaticRouting OpenpipelineV2SpansIngestsourcesStaticRoutingPtrInput
}

func (OpenpipelineV2SpansIngestsourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2SpansIngestsourcesArgs)(nil)).Elem()
}

type OpenpipelineV2SpansIngestsourcesInput interface {
	pulumi.Input

	ToOpenpipelineV2SpansIngestsourcesOutput() OpenpipelineV2SpansIngestsourcesOutput
	ToOpenpipelineV2SpansIngestsourcesOutputWithContext(ctx context.Context) OpenpipelineV2SpansIngestsourcesOutput
}

func (*OpenpipelineV2SpansIngestsources) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2SpansIngestsources)(nil)).Elem()
}

func (i *OpenpipelineV2SpansIngestsources) ToOpenpipelineV2SpansIngestsourcesOutput() OpenpipelineV2SpansIngestsourcesOutput {
	return i.ToOpenpipelineV2SpansIngestsourcesOutputWithContext(context.Background())
}

func (i *OpenpipelineV2SpansIngestsources) ToOpenpipelineV2SpansIngestsourcesOutputWithContext(ctx context.Context) OpenpipelineV2SpansIngestsourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2SpansIngestsourcesOutput)
}

// OpenpipelineV2SpansIngestsourcesArrayInput is an input type that accepts OpenpipelineV2SpansIngestsourcesArray and OpenpipelineV2SpansIngestsourcesArrayOutput values.
// You can construct a concrete instance of `OpenpipelineV2SpansIngestsourcesArrayInput` via:
//
//	OpenpipelineV2SpansIngestsourcesArray{ OpenpipelineV2SpansIngestsourcesArgs{...} }
type OpenpipelineV2SpansIngestsourcesArrayInput interface {
	pulumi.Input

	ToOpenpipelineV2SpansIngestsourcesArrayOutput() OpenpipelineV2SpansIngestsourcesArrayOutput
	ToOpenpipelineV2SpansIngestsourcesArrayOutputWithContext(context.Context) OpenpipelineV2SpansIngestsourcesArrayOutput
}

type OpenpipelineV2SpansIngestsourcesArray []OpenpipelineV2SpansIngestsourcesInput

func (OpenpipelineV2SpansIngestsourcesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2SpansIngestsources)(nil)).Elem()
}

func (i OpenpipelineV2SpansIngestsourcesArray) ToOpenpipelineV2SpansIngestsourcesArrayOutput() OpenpipelineV2SpansIngestsourcesArrayOutput {
	return i.ToOpenpipelineV2SpansIngestsourcesArrayOutputWithContext(context.Background())
}

func (i OpenpipelineV2SpansIngestsourcesArray) ToOpenpipelineV2SpansIngestsourcesArrayOutputWithContext(ctx context.Context) OpenpipelineV2SpansIngestsourcesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2SpansIngestsourcesArrayOutput)
}

// OpenpipelineV2SpansIngestsourcesMapInput is an input type that accepts OpenpipelineV2SpansIngestsourcesMap and OpenpipelineV2SpansIngestsourcesMapOutput values.
// You can construct a concrete instance of `OpenpipelineV2SpansIngestsourcesMapInput` via:
//
//	OpenpipelineV2SpansIngestsourcesMap{ "key": OpenpipelineV2SpansIngestsourcesArgs{...} }
type OpenpipelineV2SpansIngestsourcesMapInput interface {
	pulumi.Input

	ToOpenpipelineV2SpansIngestsourcesMapOutput() OpenpipelineV2SpansIngestsourcesMapOutput
	ToOpenpipelineV2SpansIngestsourcesMapOutputWithContext(context.Context) OpenpipelineV2SpansIngestsourcesMapOutput
}

type OpenpipelineV2SpansIngestsourcesMap map[string]OpenpipelineV2SpansIngestsourcesInput

func (OpenpipelineV2SpansIngestsourcesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2SpansIngestsources)(nil)).Elem()
}

func (i OpenpipelineV2SpansIngestsourcesMap) ToOpenpipelineV2SpansIngestsourcesMapOutput() OpenpipelineV2SpansIngestsourcesMapOutput {
	return i.ToOpenpipelineV2SpansIngestsourcesMapOutputWithContext(context.Background())
}

func (i OpenpipelineV2SpansIngestsourcesMap) ToOpenpipelineV2SpansIngestsourcesMapOutputWithContext(ctx context.Context) OpenpipelineV2SpansIngestsourcesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2SpansIngestsourcesMapOutput)
}

type OpenpipelineV2SpansIngestsourcesOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2SpansIngestsourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2SpansIngestsources)(nil)).Elem()
}

func (o OpenpipelineV2SpansIngestsourcesOutput) ToOpenpipelineV2SpansIngestsourcesOutput() OpenpipelineV2SpansIngestsourcesOutput {
	return o
}

func (o OpenpipelineV2SpansIngestsourcesOutput) ToOpenpipelineV2SpansIngestsourcesOutputWithContext(ctx context.Context) OpenpipelineV2SpansIngestsourcesOutput {
	return o
}

// Default Bucket
func (o OpenpipelineV2SpansIngestsourcesOutput) DefaultBucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenpipelineV2SpansIngestsources) pulumi.StringPtrOutput { return v.DefaultBucket }).(pulumi.StringPtrOutput)
}

// Endpoint display name
func (o OpenpipelineV2SpansIngestsourcesOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenpipelineV2SpansIngestsources) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// This setting is enabled (`true`) or disabled (`false`)
func (o OpenpipelineV2SpansIngestsourcesOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *OpenpipelineV2SpansIngestsources) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Endpoint segment
func (o OpenpipelineV2SpansIngestsourcesOutput) PathSegment() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenpipelineV2SpansIngestsources) pulumi.StringOutput { return v.PathSegment }).(pulumi.StringOutput)
}

// Processing stage
func (o OpenpipelineV2SpansIngestsourcesOutput) Processing() OpenpipelineV2SpansIngestsourcesProcessingOutput {
	return o.ApplyT(func(v *OpenpipelineV2SpansIngestsources) OpenpipelineV2SpansIngestsourcesProcessingOutput {
		return v.Processing
	}).(OpenpipelineV2SpansIngestsourcesProcessingOutput)
}

// Static routing of endpoint
func (o OpenpipelineV2SpansIngestsourcesOutput) StaticRouting() OpenpipelineV2SpansIngestsourcesStaticRoutingPtrOutput {
	return o.ApplyT(func(v *OpenpipelineV2SpansIngestsources) OpenpipelineV2SpansIngestsourcesStaticRoutingPtrOutput {
		return v.StaticRouting
	}).(OpenpipelineV2SpansIngestsourcesStaticRoutingPtrOutput)
}

type OpenpipelineV2SpansIngestsourcesArrayOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2SpansIngestsourcesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2SpansIngestsources)(nil)).Elem()
}

func (o OpenpipelineV2SpansIngestsourcesArrayOutput) ToOpenpipelineV2SpansIngestsourcesArrayOutput() OpenpipelineV2SpansIngestsourcesArrayOutput {
	return o
}

func (o OpenpipelineV2SpansIngestsourcesArrayOutput) ToOpenpipelineV2SpansIngestsourcesArrayOutputWithContext(ctx context.Context) OpenpipelineV2SpansIngestsourcesArrayOutput {
	return o
}

func (o OpenpipelineV2SpansIngestsourcesArrayOutput) Index(i pulumi.IntInput) OpenpipelineV2SpansIngestsourcesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenpipelineV2SpansIngestsources {
		return vs[0].([]*OpenpipelineV2SpansIngestsources)[vs[1].(int)]
	}).(OpenpipelineV2SpansIngestsourcesOutput)
}

type OpenpipelineV2SpansIngestsourcesMapOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2SpansIngestsourcesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2SpansIngestsources)(nil)).Elem()
}

func (o OpenpipelineV2SpansIngestsourcesMapOutput) ToOpenpipelineV2SpansIngestsourcesMapOutput() OpenpipelineV2SpansIngestsourcesMapOutput {
	return o
}

func (o OpenpipelineV2SpansIngestsourcesMapOutput) ToOpenpipelineV2SpansIngestsourcesMapOutputWithContext(ctx context.Context) OpenpipelineV2SpansIngestsourcesMapOutput {
	return o
}

func (o OpenpipelineV2SpansIngestsourcesMapOutput) MapIndex(k pulumi.StringInput) OpenpipelineV2SpansIngestsourcesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenpipelineV2SpansIngestsources {
		return vs[0].(map[string]*OpenpipelineV2SpansIngestsources)[vs[1].(string)]
	}).(OpenpipelineV2SpansIngestsourcesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2SpansIngestsourcesInput)(nil)).Elem(), &OpenpipelineV2SpansIngestsources{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2SpansIngestsourcesArrayInput)(nil)).Elem(), OpenpipelineV2SpansIngestsourcesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2SpansIngestsourcesMapInput)(nil)).Elem(), OpenpipelineV2SpansIngestsourcesMap{})
	pulumi.RegisterOutputType(OpenpipelineV2SpansIngestsourcesOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2SpansIngestsourcesArrayOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2SpansIngestsourcesMapOutput{})
}
