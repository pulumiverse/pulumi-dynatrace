// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type NetworkMonitor struct {
	pulumi.CustomResourceState

	// Description of the monitor
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// If true, the monitor is enabled
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Frequency of the monitor, in minutes
	FrequencyMin pulumi.IntPtrOutput `pulumi:"frequencyMin"`
	// The locations to which the monitor is assigned
	Locations pulumi.StringArrayOutput `pulumi:"locations"`
	// Name of the monitor
	Name pulumi.StringOutput `pulumi:"name"`
	// Outage handling configuration
	OutageHandling NetworkMonitorOutageHandlingPtrOutput `pulumi:"outageHandling"`
	// Performance thresholds configuration
	PerformanceThresholds NetworkMonitorPerformanceThresholdsPtrOutput `pulumi:"performanceThresholds"`
	// The steps of the monitor
	Steps NetworkMonitorStepArrayOutput `pulumi:"steps"`
	// A set of tags assigned to the monitor.
	Tags NetworkMonitorTagArrayOutput `pulumi:"tags"`
	// Type of the monitor, possible values: `MULTI_PROTOCOL`
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewNetworkMonitor registers a new resource with the given unique name, arguments, and options.
func NewNetworkMonitor(ctx *pulumi.Context,
	name string, args *NetworkMonitorArgs, opts ...pulumi.ResourceOption) (*NetworkMonitor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Locations == nil {
		return nil, errors.New("invalid value for required argument 'Locations'")
	}
	if args.Steps == nil {
		return nil, errors.New("invalid value for required argument 'Steps'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkMonitor
	err := ctx.RegisterResource("dynatrace:index/networkMonitor:NetworkMonitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkMonitor gets an existing NetworkMonitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkMonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkMonitorState, opts ...pulumi.ResourceOption) (*NetworkMonitor, error) {
	var resource NetworkMonitor
	err := ctx.ReadResource("dynatrace:index/networkMonitor:NetworkMonitor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkMonitor resources.
type networkMonitorState struct {
	// Description of the monitor
	Description *string `pulumi:"description"`
	// If true, the monitor is enabled
	Enabled *bool `pulumi:"enabled"`
	// Frequency of the monitor, in minutes
	FrequencyMin *int `pulumi:"frequencyMin"`
	// The locations to which the monitor is assigned
	Locations []string `pulumi:"locations"`
	// Name of the monitor
	Name *string `pulumi:"name"`
	// Outage handling configuration
	OutageHandling *NetworkMonitorOutageHandling `pulumi:"outageHandling"`
	// Performance thresholds configuration
	PerformanceThresholds *NetworkMonitorPerformanceThresholds `pulumi:"performanceThresholds"`
	// The steps of the monitor
	Steps []NetworkMonitorStep `pulumi:"steps"`
	// A set of tags assigned to the monitor.
	Tags []NetworkMonitorTag `pulumi:"tags"`
	// Type of the monitor, possible values: `MULTI_PROTOCOL`
	Type *string `pulumi:"type"`
}

type NetworkMonitorState struct {
	// Description of the monitor
	Description pulumi.StringPtrInput
	// If true, the monitor is enabled
	Enabled pulumi.BoolPtrInput
	// Frequency of the monitor, in minutes
	FrequencyMin pulumi.IntPtrInput
	// The locations to which the monitor is assigned
	Locations pulumi.StringArrayInput
	// Name of the monitor
	Name pulumi.StringPtrInput
	// Outage handling configuration
	OutageHandling NetworkMonitorOutageHandlingPtrInput
	// Performance thresholds configuration
	PerformanceThresholds NetworkMonitorPerformanceThresholdsPtrInput
	// The steps of the monitor
	Steps NetworkMonitorStepArrayInput
	// A set of tags assigned to the monitor.
	Tags NetworkMonitorTagArrayInput
	// Type of the monitor, possible values: `MULTI_PROTOCOL`
	Type pulumi.StringPtrInput
}

func (NetworkMonitorState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkMonitorState)(nil)).Elem()
}

type networkMonitorArgs struct {
	// Description of the monitor
	Description *string `pulumi:"description"`
	// If true, the monitor is enabled
	Enabled *bool `pulumi:"enabled"`
	// Frequency of the monitor, in minutes
	FrequencyMin *int `pulumi:"frequencyMin"`
	// The locations to which the monitor is assigned
	Locations []string `pulumi:"locations"`
	// Name of the monitor
	Name *string `pulumi:"name"`
	// Outage handling configuration
	OutageHandling *NetworkMonitorOutageHandling `pulumi:"outageHandling"`
	// Performance thresholds configuration
	PerformanceThresholds *NetworkMonitorPerformanceThresholds `pulumi:"performanceThresholds"`
	// The steps of the monitor
	Steps []NetworkMonitorStep `pulumi:"steps"`
	// A set of tags assigned to the monitor.
	Tags []NetworkMonitorTag `pulumi:"tags"`
	// Type of the monitor, possible values: `MULTI_PROTOCOL`
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a NetworkMonitor resource.
type NetworkMonitorArgs struct {
	// Description of the monitor
	Description pulumi.StringPtrInput
	// If true, the monitor is enabled
	Enabled pulumi.BoolPtrInput
	// Frequency of the monitor, in minutes
	FrequencyMin pulumi.IntPtrInput
	// The locations to which the monitor is assigned
	Locations pulumi.StringArrayInput
	// Name of the monitor
	Name pulumi.StringPtrInput
	// Outage handling configuration
	OutageHandling NetworkMonitorOutageHandlingPtrInput
	// Performance thresholds configuration
	PerformanceThresholds NetworkMonitorPerformanceThresholdsPtrInput
	// The steps of the monitor
	Steps NetworkMonitorStepArrayInput
	// A set of tags assigned to the monitor.
	Tags NetworkMonitorTagArrayInput
	// Type of the monitor, possible values: `MULTI_PROTOCOL`
	Type pulumi.StringInput
}

func (NetworkMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkMonitorArgs)(nil)).Elem()
}

type NetworkMonitorInput interface {
	pulumi.Input

	ToNetworkMonitorOutput() NetworkMonitorOutput
	ToNetworkMonitorOutputWithContext(ctx context.Context) NetworkMonitorOutput
}

func (*NetworkMonitor) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkMonitor)(nil)).Elem()
}

func (i *NetworkMonitor) ToNetworkMonitorOutput() NetworkMonitorOutput {
	return i.ToNetworkMonitorOutputWithContext(context.Background())
}

func (i *NetworkMonitor) ToNetworkMonitorOutputWithContext(ctx context.Context) NetworkMonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkMonitorOutput)
}

// NetworkMonitorArrayInput is an input type that accepts NetworkMonitorArray and NetworkMonitorArrayOutput values.
// You can construct a concrete instance of `NetworkMonitorArrayInput` via:
//
//	NetworkMonitorArray{ NetworkMonitorArgs{...} }
type NetworkMonitorArrayInput interface {
	pulumi.Input

	ToNetworkMonitorArrayOutput() NetworkMonitorArrayOutput
	ToNetworkMonitorArrayOutputWithContext(context.Context) NetworkMonitorArrayOutput
}

type NetworkMonitorArray []NetworkMonitorInput

func (NetworkMonitorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkMonitor)(nil)).Elem()
}

func (i NetworkMonitorArray) ToNetworkMonitorArrayOutput() NetworkMonitorArrayOutput {
	return i.ToNetworkMonitorArrayOutputWithContext(context.Background())
}

func (i NetworkMonitorArray) ToNetworkMonitorArrayOutputWithContext(ctx context.Context) NetworkMonitorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkMonitorArrayOutput)
}

// NetworkMonitorMapInput is an input type that accepts NetworkMonitorMap and NetworkMonitorMapOutput values.
// You can construct a concrete instance of `NetworkMonitorMapInput` via:
//
//	NetworkMonitorMap{ "key": NetworkMonitorArgs{...} }
type NetworkMonitorMapInput interface {
	pulumi.Input

	ToNetworkMonitorMapOutput() NetworkMonitorMapOutput
	ToNetworkMonitorMapOutputWithContext(context.Context) NetworkMonitorMapOutput
}

type NetworkMonitorMap map[string]NetworkMonitorInput

func (NetworkMonitorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkMonitor)(nil)).Elem()
}

func (i NetworkMonitorMap) ToNetworkMonitorMapOutput() NetworkMonitorMapOutput {
	return i.ToNetworkMonitorMapOutputWithContext(context.Background())
}

func (i NetworkMonitorMap) ToNetworkMonitorMapOutputWithContext(ctx context.Context) NetworkMonitorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkMonitorMapOutput)
}

type NetworkMonitorOutput struct{ *pulumi.OutputState }

func (NetworkMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkMonitor)(nil)).Elem()
}

func (o NetworkMonitorOutput) ToNetworkMonitorOutput() NetworkMonitorOutput {
	return o
}

func (o NetworkMonitorOutput) ToNetworkMonitorOutputWithContext(ctx context.Context) NetworkMonitorOutput {
	return o
}

// Description of the monitor
func (o NetworkMonitorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkMonitor) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// If true, the monitor is enabled
func (o NetworkMonitorOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkMonitor) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Frequency of the monitor, in minutes
func (o NetworkMonitorOutput) FrequencyMin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkMonitor) pulumi.IntPtrOutput { return v.FrequencyMin }).(pulumi.IntPtrOutput)
}

// The locations to which the monitor is assigned
func (o NetworkMonitorOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkMonitor) pulumi.StringArrayOutput { return v.Locations }).(pulumi.StringArrayOutput)
}

// Name of the monitor
func (o NetworkMonitorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkMonitor) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Outage handling configuration
func (o NetworkMonitorOutput) OutageHandling() NetworkMonitorOutageHandlingPtrOutput {
	return o.ApplyT(func(v *NetworkMonitor) NetworkMonitorOutageHandlingPtrOutput { return v.OutageHandling }).(NetworkMonitorOutageHandlingPtrOutput)
}

// Performance thresholds configuration
func (o NetworkMonitorOutput) PerformanceThresholds() NetworkMonitorPerformanceThresholdsPtrOutput {
	return o.ApplyT(func(v *NetworkMonitor) NetworkMonitorPerformanceThresholdsPtrOutput { return v.PerformanceThresholds }).(NetworkMonitorPerformanceThresholdsPtrOutput)
}

// The steps of the monitor
func (o NetworkMonitorOutput) Steps() NetworkMonitorStepArrayOutput {
	return o.ApplyT(func(v *NetworkMonitor) NetworkMonitorStepArrayOutput { return v.Steps }).(NetworkMonitorStepArrayOutput)
}

// A set of tags assigned to the monitor.
func (o NetworkMonitorOutput) Tags() NetworkMonitorTagArrayOutput {
	return o.ApplyT(func(v *NetworkMonitor) NetworkMonitorTagArrayOutput { return v.Tags }).(NetworkMonitorTagArrayOutput)
}

// Type of the monitor, possible values: `MULTI_PROTOCOL`
func (o NetworkMonitorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkMonitor) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type NetworkMonitorArrayOutput struct{ *pulumi.OutputState }

func (NetworkMonitorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkMonitor)(nil)).Elem()
}

func (o NetworkMonitorArrayOutput) ToNetworkMonitorArrayOutput() NetworkMonitorArrayOutput {
	return o
}

func (o NetworkMonitorArrayOutput) ToNetworkMonitorArrayOutputWithContext(ctx context.Context) NetworkMonitorArrayOutput {
	return o
}

func (o NetworkMonitorArrayOutput) Index(i pulumi.IntInput) NetworkMonitorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkMonitor {
		return vs[0].([]*NetworkMonitor)[vs[1].(int)]
	}).(NetworkMonitorOutput)
}

type NetworkMonitorMapOutput struct{ *pulumi.OutputState }

func (NetworkMonitorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkMonitor)(nil)).Elem()
}

func (o NetworkMonitorMapOutput) ToNetworkMonitorMapOutput() NetworkMonitorMapOutput {
	return o
}

func (o NetworkMonitorMapOutput) ToNetworkMonitorMapOutputWithContext(ctx context.Context) NetworkMonitorMapOutput {
	return o
}

func (o NetworkMonitorMapOutput) MapIndex(k pulumi.StringInput) NetworkMonitorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkMonitor {
		return vs[0].(map[string]*NetworkMonitor)[vs[1].(string)]
	}).(NetworkMonitorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkMonitorInput)(nil)).Elem(), &NetworkMonitor{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkMonitorArrayInput)(nil)).Elem(), NetworkMonitorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkMonitorMapInput)(nil)).Elem(), NetworkMonitorMap{})
	pulumi.RegisterOutputType(NetworkMonitorOutput{})
	pulumi.RegisterOutputType(NetworkMonitorArrayOutput{})
	pulumi.RegisterOutputType(NetworkMonitorMapOutput{})
}
