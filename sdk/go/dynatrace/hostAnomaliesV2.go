// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type HostAnomaliesV2 struct {
	pulumi.CustomResourceState

	// Hosts
	Host HostAnomaliesV2HostOutput `pulumi:"host"`
	// Network
	Network HostAnomaliesV2NetworkOutput `pulumi:"network"`
	// The scope of this setting (HOST HOST_GROUP environment)
	Scope pulumi.StringOutput `pulumi:"scope"`
}

// NewHostAnomaliesV2 registers a new resource with the given unique name, arguments, and options.
func NewHostAnomaliesV2(ctx *pulumi.Context,
	name string, args *HostAnomaliesV2Args, opts ...pulumi.ResourceOption) (*HostAnomaliesV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Host == nil {
		return nil, errors.New("invalid value for required argument 'Host'")
	}
	if args.Network == nil {
		return nil, errors.New("invalid value for required argument 'Network'")
	}
	if args.Scope == nil {
		return nil, errors.New("invalid value for required argument 'Scope'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HostAnomaliesV2
	err := ctx.RegisterResource("dynatrace:index/hostAnomaliesV2:HostAnomaliesV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHostAnomaliesV2 gets an existing HostAnomaliesV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHostAnomaliesV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HostAnomaliesV2State, opts ...pulumi.ResourceOption) (*HostAnomaliesV2, error) {
	var resource HostAnomaliesV2
	err := ctx.ReadResource("dynatrace:index/hostAnomaliesV2:HostAnomaliesV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HostAnomaliesV2 resources.
type hostAnomaliesV2State struct {
	// Hosts
	Host *HostAnomaliesV2Host `pulumi:"host"`
	// Network
	Network *HostAnomaliesV2Network `pulumi:"network"`
	// The scope of this setting (HOST HOST_GROUP environment)
	Scope *string `pulumi:"scope"`
}

type HostAnomaliesV2State struct {
	// Hosts
	Host HostAnomaliesV2HostPtrInput
	// Network
	Network HostAnomaliesV2NetworkPtrInput
	// The scope of this setting (HOST HOST_GROUP environment)
	Scope pulumi.StringPtrInput
}

func (HostAnomaliesV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*hostAnomaliesV2State)(nil)).Elem()
}

type hostAnomaliesV2Args struct {
	// Hosts
	Host HostAnomaliesV2Host `pulumi:"host"`
	// Network
	Network HostAnomaliesV2Network `pulumi:"network"`
	// The scope of this setting (HOST HOST_GROUP environment)
	Scope string `pulumi:"scope"`
}

// The set of arguments for constructing a HostAnomaliesV2 resource.
type HostAnomaliesV2Args struct {
	// Hosts
	Host HostAnomaliesV2HostInput
	// Network
	Network HostAnomaliesV2NetworkInput
	// The scope of this setting (HOST HOST_GROUP environment)
	Scope pulumi.StringInput
}

func (HostAnomaliesV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*hostAnomaliesV2Args)(nil)).Elem()
}

type HostAnomaliesV2Input interface {
	pulumi.Input

	ToHostAnomaliesV2Output() HostAnomaliesV2Output
	ToHostAnomaliesV2OutputWithContext(ctx context.Context) HostAnomaliesV2Output
}

func (*HostAnomaliesV2) ElementType() reflect.Type {
	return reflect.TypeOf((**HostAnomaliesV2)(nil)).Elem()
}

func (i *HostAnomaliesV2) ToHostAnomaliesV2Output() HostAnomaliesV2Output {
	return i.ToHostAnomaliesV2OutputWithContext(context.Background())
}

func (i *HostAnomaliesV2) ToHostAnomaliesV2OutputWithContext(ctx context.Context) HostAnomaliesV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(HostAnomaliesV2Output)
}

// HostAnomaliesV2ArrayInput is an input type that accepts HostAnomaliesV2Array and HostAnomaliesV2ArrayOutput values.
// You can construct a concrete instance of `HostAnomaliesV2ArrayInput` via:
//
//	HostAnomaliesV2Array{ HostAnomaliesV2Args{...} }
type HostAnomaliesV2ArrayInput interface {
	pulumi.Input

	ToHostAnomaliesV2ArrayOutput() HostAnomaliesV2ArrayOutput
	ToHostAnomaliesV2ArrayOutputWithContext(context.Context) HostAnomaliesV2ArrayOutput
}

type HostAnomaliesV2Array []HostAnomaliesV2Input

func (HostAnomaliesV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HostAnomaliesV2)(nil)).Elem()
}

func (i HostAnomaliesV2Array) ToHostAnomaliesV2ArrayOutput() HostAnomaliesV2ArrayOutput {
	return i.ToHostAnomaliesV2ArrayOutputWithContext(context.Background())
}

func (i HostAnomaliesV2Array) ToHostAnomaliesV2ArrayOutputWithContext(ctx context.Context) HostAnomaliesV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostAnomaliesV2ArrayOutput)
}

// HostAnomaliesV2MapInput is an input type that accepts HostAnomaliesV2Map and HostAnomaliesV2MapOutput values.
// You can construct a concrete instance of `HostAnomaliesV2MapInput` via:
//
//	HostAnomaliesV2Map{ "key": HostAnomaliesV2Args{...} }
type HostAnomaliesV2MapInput interface {
	pulumi.Input

	ToHostAnomaliesV2MapOutput() HostAnomaliesV2MapOutput
	ToHostAnomaliesV2MapOutputWithContext(context.Context) HostAnomaliesV2MapOutput
}

type HostAnomaliesV2Map map[string]HostAnomaliesV2Input

func (HostAnomaliesV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HostAnomaliesV2)(nil)).Elem()
}

func (i HostAnomaliesV2Map) ToHostAnomaliesV2MapOutput() HostAnomaliesV2MapOutput {
	return i.ToHostAnomaliesV2MapOutputWithContext(context.Background())
}

func (i HostAnomaliesV2Map) ToHostAnomaliesV2MapOutputWithContext(ctx context.Context) HostAnomaliesV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostAnomaliesV2MapOutput)
}

type HostAnomaliesV2Output struct{ *pulumi.OutputState }

func (HostAnomaliesV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**HostAnomaliesV2)(nil)).Elem()
}

func (o HostAnomaliesV2Output) ToHostAnomaliesV2Output() HostAnomaliesV2Output {
	return o
}

func (o HostAnomaliesV2Output) ToHostAnomaliesV2OutputWithContext(ctx context.Context) HostAnomaliesV2Output {
	return o
}

// Hosts
func (o HostAnomaliesV2Output) Host() HostAnomaliesV2HostOutput {
	return o.ApplyT(func(v *HostAnomaliesV2) HostAnomaliesV2HostOutput { return v.Host }).(HostAnomaliesV2HostOutput)
}

// Network
func (o HostAnomaliesV2Output) Network() HostAnomaliesV2NetworkOutput {
	return o.ApplyT(func(v *HostAnomaliesV2) HostAnomaliesV2NetworkOutput { return v.Network }).(HostAnomaliesV2NetworkOutput)
}

// The scope of this setting (HOST HOST_GROUP environment)
func (o HostAnomaliesV2Output) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v *HostAnomaliesV2) pulumi.StringOutput { return v.Scope }).(pulumi.StringOutput)
}

type HostAnomaliesV2ArrayOutput struct{ *pulumi.OutputState }

func (HostAnomaliesV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HostAnomaliesV2)(nil)).Elem()
}

func (o HostAnomaliesV2ArrayOutput) ToHostAnomaliesV2ArrayOutput() HostAnomaliesV2ArrayOutput {
	return o
}

func (o HostAnomaliesV2ArrayOutput) ToHostAnomaliesV2ArrayOutputWithContext(ctx context.Context) HostAnomaliesV2ArrayOutput {
	return o
}

func (o HostAnomaliesV2ArrayOutput) Index(i pulumi.IntInput) HostAnomaliesV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HostAnomaliesV2 {
		return vs[0].([]*HostAnomaliesV2)[vs[1].(int)]
	}).(HostAnomaliesV2Output)
}

type HostAnomaliesV2MapOutput struct{ *pulumi.OutputState }

func (HostAnomaliesV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HostAnomaliesV2)(nil)).Elem()
}

func (o HostAnomaliesV2MapOutput) ToHostAnomaliesV2MapOutput() HostAnomaliesV2MapOutput {
	return o
}

func (o HostAnomaliesV2MapOutput) ToHostAnomaliesV2MapOutputWithContext(ctx context.Context) HostAnomaliesV2MapOutput {
	return o
}

func (o HostAnomaliesV2MapOutput) MapIndex(k pulumi.StringInput) HostAnomaliesV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HostAnomaliesV2 {
		return vs[0].(map[string]*HostAnomaliesV2)[vs[1].(string)]
	}).(HostAnomaliesV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HostAnomaliesV2Input)(nil)).Elem(), &HostAnomaliesV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostAnomaliesV2ArrayInput)(nil)).Elem(), HostAnomaliesV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostAnomaliesV2MapInput)(nil)).Elem(), HostAnomaliesV2Map{})
	pulumi.RegisterOutputType(HostAnomaliesV2Output{})
	pulumi.RegisterOutputType(HostAnomaliesV2ArrayOutput{})
	pulumi.RegisterOutputType(HostAnomaliesV2MapOutput{})
}
