// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type AutomationControllerConnections struct {
	pulumi.CustomResourceState

	// A unique and clearly identifiable connection name.
	Name pulumi.StringOutput `pulumi:"name"`
	// API access token for the Ansible Automation Controller. Please note that this token is not refreshed and can expire.
	Token pulumi.StringPtrOutput `pulumi:"token"`
	// Possible Values: `Api_token`
	Type pulumi.StringOutput `pulumi:"type"`
	// URL of the Ansible Automation Controller API endpoint. For example, https://ansible.yourdomain.com/api/v2/
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewAutomationControllerConnections registers a new resource with the given unique name, arguments, and options.
func NewAutomationControllerConnections(ctx *pulumi.Context,
	name string, args *AutomationControllerConnectionsArgs, opts ...pulumi.ResourceOption) (*AutomationControllerConnections, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	if args.Token != nil {
		args.Token = pulumi.ToSecret(args.Token).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"token",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AutomationControllerConnections
	err := ctx.RegisterResource("dynatrace:index/automationControllerConnections:AutomationControllerConnections", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAutomationControllerConnections gets an existing AutomationControllerConnections resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAutomationControllerConnections(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AutomationControllerConnectionsState, opts ...pulumi.ResourceOption) (*AutomationControllerConnections, error) {
	var resource AutomationControllerConnections
	err := ctx.ReadResource("dynatrace:index/automationControllerConnections:AutomationControllerConnections", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AutomationControllerConnections resources.
type automationControllerConnectionsState struct {
	// A unique and clearly identifiable connection name.
	Name *string `pulumi:"name"`
	// API access token for the Ansible Automation Controller. Please note that this token is not refreshed and can expire.
	Token *string `pulumi:"token"`
	// Possible Values: `Api_token`
	Type *string `pulumi:"type"`
	// URL of the Ansible Automation Controller API endpoint. For example, https://ansible.yourdomain.com/api/v2/
	Url *string `pulumi:"url"`
}

type AutomationControllerConnectionsState struct {
	// A unique and clearly identifiable connection name.
	Name pulumi.StringPtrInput
	// API access token for the Ansible Automation Controller. Please note that this token is not refreshed and can expire.
	Token pulumi.StringPtrInput
	// Possible Values: `Api_token`
	Type pulumi.StringPtrInput
	// URL of the Ansible Automation Controller API endpoint. For example, https://ansible.yourdomain.com/api/v2/
	Url pulumi.StringPtrInput
}

func (AutomationControllerConnectionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*automationControllerConnectionsState)(nil)).Elem()
}

type automationControllerConnectionsArgs struct {
	// A unique and clearly identifiable connection name.
	Name *string `pulumi:"name"`
	// API access token for the Ansible Automation Controller. Please note that this token is not refreshed and can expire.
	Token *string `pulumi:"token"`
	// Possible Values: `Api_token`
	Type string `pulumi:"type"`
	// URL of the Ansible Automation Controller API endpoint. For example, https://ansible.yourdomain.com/api/v2/
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a AutomationControllerConnections resource.
type AutomationControllerConnectionsArgs struct {
	// A unique and clearly identifiable connection name.
	Name pulumi.StringPtrInput
	// API access token for the Ansible Automation Controller. Please note that this token is not refreshed and can expire.
	Token pulumi.StringPtrInput
	// Possible Values: `Api_token`
	Type pulumi.StringInput
	// URL of the Ansible Automation Controller API endpoint. For example, https://ansible.yourdomain.com/api/v2/
	Url pulumi.StringInput
}

func (AutomationControllerConnectionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*automationControllerConnectionsArgs)(nil)).Elem()
}

type AutomationControllerConnectionsInput interface {
	pulumi.Input

	ToAutomationControllerConnectionsOutput() AutomationControllerConnectionsOutput
	ToAutomationControllerConnectionsOutputWithContext(ctx context.Context) AutomationControllerConnectionsOutput
}

func (*AutomationControllerConnections) ElementType() reflect.Type {
	return reflect.TypeOf((**AutomationControllerConnections)(nil)).Elem()
}

func (i *AutomationControllerConnections) ToAutomationControllerConnectionsOutput() AutomationControllerConnectionsOutput {
	return i.ToAutomationControllerConnectionsOutputWithContext(context.Background())
}

func (i *AutomationControllerConnections) ToAutomationControllerConnectionsOutputWithContext(ctx context.Context) AutomationControllerConnectionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationControllerConnectionsOutput)
}

// AutomationControllerConnectionsArrayInput is an input type that accepts AutomationControllerConnectionsArray and AutomationControllerConnectionsArrayOutput values.
// You can construct a concrete instance of `AutomationControllerConnectionsArrayInput` via:
//
//	AutomationControllerConnectionsArray{ AutomationControllerConnectionsArgs{...} }
type AutomationControllerConnectionsArrayInput interface {
	pulumi.Input

	ToAutomationControllerConnectionsArrayOutput() AutomationControllerConnectionsArrayOutput
	ToAutomationControllerConnectionsArrayOutputWithContext(context.Context) AutomationControllerConnectionsArrayOutput
}

type AutomationControllerConnectionsArray []AutomationControllerConnectionsInput

func (AutomationControllerConnectionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AutomationControllerConnections)(nil)).Elem()
}

func (i AutomationControllerConnectionsArray) ToAutomationControllerConnectionsArrayOutput() AutomationControllerConnectionsArrayOutput {
	return i.ToAutomationControllerConnectionsArrayOutputWithContext(context.Background())
}

func (i AutomationControllerConnectionsArray) ToAutomationControllerConnectionsArrayOutputWithContext(ctx context.Context) AutomationControllerConnectionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationControllerConnectionsArrayOutput)
}

// AutomationControllerConnectionsMapInput is an input type that accepts AutomationControllerConnectionsMap and AutomationControllerConnectionsMapOutput values.
// You can construct a concrete instance of `AutomationControllerConnectionsMapInput` via:
//
//	AutomationControllerConnectionsMap{ "key": AutomationControllerConnectionsArgs{...} }
type AutomationControllerConnectionsMapInput interface {
	pulumi.Input

	ToAutomationControllerConnectionsMapOutput() AutomationControllerConnectionsMapOutput
	ToAutomationControllerConnectionsMapOutputWithContext(context.Context) AutomationControllerConnectionsMapOutput
}

type AutomationControllerConnectionsMap map[string]AutomationControllerConnectionsInput

func (AutomationControllerConnectionsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AutomationControllerConnections)(nil)).Elem()
}

func (i AutomationControllerConnectionsMap) ToAutomationControllerConnectionsMapOutput() AutomationControllerConnectionsMapOutput {
	return i.ToAutomationControllerConnectionsMapOutputWithContext(context.Background())
}

func (i AutomationControllerConnectionsMap) ToAutomationControllerConnectionsMapOutputWithContext(ctx context.Context) AutomationControllerConnectionsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationControllerConnectionsMapOutput)
}

type AutomationControllerConnectionsOutput struct{ *pulumi.OutputState }

func (AutomationControllerConnectionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutomationControllerConnections)(nil)).Elem()
}

func (o AutomationControllerConnectionsOutput) ToAutomationControllerConnectionsOutput() AutomationControllerConnectionsOutput {
	return o
}

func (o AutomationControllerConnectionsOutput) ToAutomationControllerConnectionsOutputWithContext(ctx context.Context) AutomationControllerConnectionsOutput {
	return o
}

// A unique and clearly identifiable connection name.
func (o AutomationControllerConnectionsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AutomationControllerConnections) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// API access token for the Ansible Automation Controller. Please note that this token is not refreshed and can expire.
func (o AutomationControllerConnectionsOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutomationControllerConnections) pulumi.StringPtrOutput { return v.Token }).(pulumi.StringPtrOutput)
}

// Possible Values: `Api_token`
func (o AutomationControllerConnectionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *AutomationControllerConnections) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// URL of the Ansible Automation Controller API endpoint. For example, https://ansible.yourdomain.com/api/v2/
func (o AutomationControllerConnectionsOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *AutomationControllerConnections) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type AutomationControllerConnectionsArrayOutput struct{ *pulumi.OutputState }

func (AutomationControllerConnectionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AutomationControllerConnections)(nil)).Elem()
}

func (o AutomationControllerConnectionsArrayOutput) ToAutomationControllerConnectionsArrayOutput() AutomationControllerConnectionsArrayOutput {
	return o
}

func (o AutomationControllerConnectionsArrayOutput) ToAutomationControllerConnectionsArrayOutputWithContext(ctx context.Context) AutomationControllerConnectionsArrayOutput {
	return o
}

func (o AutomationControllerConnectionsArrayOutput) Index(i pulumi.IntInput) AutomationControllerConnectionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AutomationControllerConnections {
		return vs[0].([]*AutomationControllerConnections)[vs[1].(int)]
	}).(AutomationControllerConnectionsOutput)
}

type AutomationControllerConnectionsMapOutput struct{ *pulumi.OutputState }

func (AutomationControllerConnectionsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AutomationControllerConnections)(nil)).Elem()
}

func (o AutomationControllerConnectionsMapOutput) ToAutomationControllerConnectionsMapOutput() AutomationControllerConnectionsMapOutput {
	return o
}

func (o AutomationControllerConnectionsMapOutput) ToAutomationControllerConnectionsMapOutputWithContext(ctx context.Context) AutomationControllerConnectionsMapOutput {
	return o
}

func (o AutomationControllerConnectionsMapOutput) MapIndex(k pulumi.StringInput) AutomationControllerConnectionsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AutomationControllerConnections {
		return vs[0].(map[string]*AutomationControllerConnections)[vs[1].(string)]
	}).(AutomationControllerConnectionsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AutomationControllerConnectionsInput)(nil)).Elem(), &AutomationControllerConnections{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutomationControllerConnectionsArrayInput)(nil)).Elem(), AutomationControllerConnectionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutomationControllerConnectionsMapInput)(nil)).Elem(), AutomationControllerConnectionsMap{})
	pulumi.RegisterOutputType(AutomationControllerConnectionsOutput{})
	pulumi.RegisterOutputType(AutomationControllerConnectionsArrayOutput{})
	pulumi.RegisterOutputType(AutomationControllerConnectionsMapOutput{})
}
