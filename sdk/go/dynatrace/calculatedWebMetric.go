// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type CalculatedWebMetric struct {
	pulumi.CustomResourceState

	// The Dynatrace entity ID of the application to which the metric belongs.
	AppIdentifier pulumi.StringOutput `pulumi:"appIdentifier"`
	// Descriptor of a calculated web metric.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Parameters of a definition of a calculated web metric.
	Dimensions CalculatedWebMetricDimensionArrayOutput `pulumi:"dimensions"`
	// The metric is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The definition of a calculated web metric.
	MetricDefinition CalculatedWebMetricMetricDefinitionOutput `pulumi:"metricDefinition"`
	// The unique key of the calculated web metric.
	MetricKey pulumi.StringOutput `pulumi:"metricKey"`
	// The displayed name of the metric.
	Name pulumi.StringOutput `pulumi:"name"`
	// Parameters of a definition of a calculated web metric.
	UserActionFilter CalculatedWebMetricUserActionFilterPtrOutput `pulumi:"userActionFilter"`
}

// NewCalculatedWebMetric registers a new resource with the given unique name, arguments, and options.
func NewCalculatedWebMetric(ctx *pulumi.Context,
	name string, args *CalculatedWebMetricArgs, opts ...pulumi.ResourceOption) (*CalculatedWebMetric, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'AppIdentifier'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.MetricDefinition == nil {
		return nil, errors.New("invalid value for required argument 'MetricDefinition'")
	}
	if args.MetricKey == nil {
		return nil, errors.New("invalid value for required argument 'MetricKey'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CalculatedWebMetric
	err := ctx.RegisterResource("dynatrace:index/calculatedWebMetric:CalculatedWebMetric", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCalculatedWebMetric gets an existing CalculatedWebMetric resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCalculatedWebMetric(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CalculatedWebMetricState, opts ...pulumi.ResourceOption) (*CalculatedWebMetric, error) {
	var resource CalculatedWebMetric
	err := ctx.ReadResource("dynatrace:index/calculatedWebMetric:CalculatedWebMetric", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CalculatedWebMetric resources.
type calculatedWebMetricState struct {
	// The Dynatrace entity ID of the application to which the metric belongs.
	AppIdentifier *string `pulumi:"appIdentifier"`
	// Descriptor of a calculated web metric.
	Description *string `pulumi:"description"`
	// Parameters of a definition of a calculated web metric.
	Dimensions []CalculatedWebMetricDimension `pulumi:"dimensions"`
	// The metric is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// The definition of a calculated web metric.
	MetricDefinition *CalculatedWebMetricMetricDefinition `pulumi:"metricDefinition"`
	// The unique key of the calculated web metric.
	MetricKey *string `pulumi:"metricKey"`
	// The displayed name of the metric.
	Name *string `pulumi:"name"`
	// Parameters of a definition of a calculated web metric.
	UserActionFilter *CalculatedWebMetricUserActionFilter `pulumi:"userActionFilter"`
}

type CalculatedWebMetricState struct {
	// The Dynatrace entity ID of the application to which the metric belongs.
	AppIdentifier pulumi.StringPtrInput
	// Descriptor of a calculated web metric.
	Description pulumi.StringPtrInput
	// Parameters of a definition of a calculated web metric.
	Dimensions CalculatedWebMetricDimensionArrayInput
	// The metric is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// The definition of a calculated web metric.
	MetricDefinition CalculatedWebMetricMetricDefinitionPtrInput
	// The unique key of the calculated web metric.
	MetricKey pulumi.StringPtrInput
	// The displayed name of the metric.
	Name pulumi.StringPtrInput
	// Parameters of a definition of a calculated web metric.
	UserActionFilter CalculatedWebMetricUserActionFilterPtrInput
}

func (CalculatedWebMetricState) ElementType() reflect.Type {
	return reflect.TypeOf((*calculatedWebMetricState)(nil)).Elem()
}

type calculatedWebMetricArgs struct {
	// The Dynatrace entity ID of the application to which the metric belongs.
	AppIdentifier string `pulumi:"appIdentifier"`
	// Descriptor of a calculated web metric.
	Description *string `pulumi:"description"`
	// Parameters of a definition of a calculated web metric.
	Dimensions []CalculatedWebMetricDimension `pulumi:"dimensions"`
	// The metric is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// The definition of a calculated web metric.
	MetricDefinition CalculatedWebMetricMetricDefinition `pulumi:"metricDefinition"`
	// The unique key of the calculated web metric.
	MetricKey string `pulumi:"metricKey"`
	// The displayed name of the metric.
	Name *string `pulumi:"name"`
	// Parameters of a definition of a calculated web metric.
	UserActionFilter *CalculatedWebMetricUserActionFilter `pulumi:"userActionFilter"`
}

// The set of arguments for constructing a CalculatedWebMetric resource.
type CalculatedWebMetricArgs struct {
	// The Dynatrace entity ID of the application to which the metric belongs.
	AppIdentifier pulumi.StringInput
	// Descriptor of a calculated web metric.
	Description pulumi.StringPtrInput
	// Parameters of a definition of a calculated web metric.
	Dimensions CalculatedWebMetricDimensionArrayInput
	// The metric is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// The definition of a calculated web metric.
	MetricDefinition CalculatedWebMetricMetricDefinitionInput
	// The unique key of the calculated web metric.
	MetricKey pulumi.StringInput
	// The displayed name of the metric.
	Name pulumi.StringPtrInput
	// Parameters of a definition of a calculated web metric.
	UserActionFilter CalculatedWebMetricUserActionFilterPtrInput
}

func (CalculatedWebMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*calculatedWebMetricArgs)(nil)).Elem()
}

type CalculatedWebMetricInput interface {
	pulumi.Input

	ToCalculatedWebMetricOutput() CalculatedWebMetricOutput
	ToCalculatedWebMetricOutputWithContext(ctx context.Context) CalculatedWebMetricOutput
}

func (*CalculatedWebMetric) ElementType() reflect.Type {
	return reflect.TypeOf((**CalculatedWebMetric)(nil)).Elem()
}

func (i *CalculatedWebMetric) ToCalculatedWebMetricOutput() CalculatedWebMetricOutput {
	return i.ToCalculatedWebMetricOutputWithContext(context.Background())
}

func (i *CalculatedWebMetric) ToCalculatedWebMetricOutputWithContext(ctx context.Context) CalculatedWebMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CalculatedWebMetricOutput)
}

// CalculatedWebMetricArrayInput is an input type that accepts CalculatedWebMetricArray and CalculatedWebMetricArrayOutput values.
// You can construct a concrete instance of `CalculatedWebMetricArrayInput` via:
//
//	CalculatedWebMetricArray{ CalculatedWebMetricArgs{...} }
type CalculatedWebMetricArrayInput interface {
	pulumi.Input

	ToCalculatedWebMetricArrayOutput() CalculatedWebMetricArrayOutput
	ToCalculatedWebMetricArrayOutputWithContext(context.Context) CalculatedWebMetricArrayOutput
}

type CalculatedWebMetricArray []CalculatedWebMetricInput

func (CalculatedWebMetricArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CalculatedWebMetric)(nil)).Elem()
}

func (i CalculatedWebMetricArray) ToCalculatedWebMetricArrayOutput() CalculatedWebMetricArrayOutput {
	return i.ToCalculatedWebMetricArrayOutputWithContext(context.Background())
}

func (i CalculatedWebMetricArray) ToCalculatedWebMetricArrayOutputWithContext(ctx context.Context) CalculatedWebMetricArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CalculatedWebMetricArrayOutput)
}

// CalculatedWebMetricMapInput is an input type that accepts CalculatedWebMetricMap and CalculatedWebMetricMapOutput values.
// You can construct a concrete instance of `CalculatedWebMetricMapInput` via:
//
//	CalculatedWebMetricMap{ "key": CalculatedWebMetricArgs{...} }
type CalculatedWebMetricMapInput interface {
	pulumi.Input

	ToCalculatedWebMetricMapOutput() CalculatedWebMetricMapOutput
	ToCalculatedWebMetricMapOutputWithContext(context.Context) CalculatedWebMetricMapOutput
}

type CalculatedWebMetricMap map[string]CalculatedWebMetricInput

func (CalculatedWebMetricMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CalculatedWebMetric)(nil)).Elem()
}

func (i CalculatedWebMetricMap) ToCalculatedWebMetricMapOutput() CalculatedWebMetricMapOutput {
	return i.ToCalculatedWebMetricMapOutputWithContext(context.Background())
}

func (i CalculatedWebMetricMap) ToCalculatedWebMetricMapOutputWithContext(ctx context.Context) CalculatedWebMetricMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CalculatedWebMetricMapOutput)
}

type CalculatedWebMetricOutput struct{ *pulumi.OutputState }

func (CalculatedWebMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CalculatedWebMetric)(nil)).Elem()
}

func (o CalculatedWebMetricOutput) ToCalculatedWebMetricOutput() CalculatedWebMetricOutput {
	return o
}

func (o CalculatedWebMetricOutput) ToCalculatedWebMetricOutputWithContext(ctx context.Context) CalculatedWebMetricOutput {
	return o
}

// The Dynatrace entity ID of the application to which the metric belongs.
func (o CalculatedWebMetricOutput) AppIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *CalculatedWebMetric) pulumi.StringOutput { return v.AppIdentifier }).(pulumi.StringOutput)
}

// Descriptor of a calculated web metric.
func (o CalculatedWebMetricOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CalculatedWebMetric) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Parameters of a definition of a calculated web metric.
func (o CalculatedWebMetricOutput) Dimensions() CalculatedWebMetricDimensionArrayOutput {
	return o.ApplyT(func(v *CalculatedWebMetric) CalculatedWebMetricDimensionArrayOutput { return v.Dimensions }).(CalculatedWebMetricDimensionArrayOutput)
}

// The metric is enabled (`true`) or disabled (`false`)
func (o CalculatedWebMetricOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *CalculatedWebMetric) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The definition of a calculated web metric.
func (o CalculatedWebMetricOutput) MetricDefinition() CalculatedWebMetricMetricDefinitionOutput {
	return o.ApplyT(func(v *CalculatedWebMetric) CalculatedWebMetricMetricDefinitionOutput { return v.MetricDefinition }).(CalculatedWebMetricMetricDefinitionOutput)
}

// The unique key of the calculated web metric.
func (o CalculatedWebMetricOutput) MetricKey() pulumi.StringOutput {
	return o.ApplyT(func(v *CalculatedWebMetric) pulumi.StringOutput { return v.MetricKey }).(pulumi.StringOutput)
}

// The displayed name of the metric.
func (o CalculatedWebMetricOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CalculatedWebMetric) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Parameters of a definition of a calculated web metric.
func (o CalculatedWebMetricOutput) UserActionFilter() CalculatedWebMetricUserActionFilterPtrOutput {
	return o.ApplyT(func(v *CalculatedWebMetric) CalculatedWebMetricUserActionFilterPtrOutput { return v.UserActionFilter }).(CalculatedWebMetricUserActionFilterPtrOutput)
}

type CalculatedWebMetricArrayOutput struct{ *pulumi.OutputState }

func (CalculatedWebMetricArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CalculatedWebMetric)(nil)).Elem()
}

func (o CalculatedWebMetricArrayOutput) ToCalculatedWebMetricArrayOutput() CalculatedWebMetricArrayOutput {
	return o
}

func (o CalculatedWebMetricArrayOutput) ToCalculatedWebMetricArrayOutputWithContext(ctx context.Context) CalculatedWebMetricArrayOutput {
	return o
}

func (o CalculatedWebMetricArrayOutput) Index(i pulumi.IntInput) CalculatedWebMetricOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CalculatedWebMetric {
		return vs[0].([]*CalculatedWebMetric)[vs[1].(int)]
	}).(CalculatedWebMetricOutput)
}

type CalculatedWebMetricMapOutput struct{ *pulumi.OutputState }

func (CalculatedWebMetricMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CalculatedWebMetric)(nil)).Elem()
}

func (o CalculatedWebMetricMapOutput) ToCalculatedWebMetricMapOutput() CalculatedWebMetricMapOutput {
	return o
}

func (o CalculatedWebMetricMapOutput) ToCalculatedWebMetricMapOutputWithContext(ctx context.Context) CalculatedWebMetricMapOutput {
	return o
}

func (o CalculatedWebMetricMapOutput) MapIndex(k pulumi.StringInput) CalculatedWebMetricOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CalculatedWebMetric {
		return vs[0].(map[string]*CalculatedWebMetric)[vs[1].(string)]
	}).(CalculatedWebMetricOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CalculatedWebMetricInput)(nil)).Elem(), &CalculatedWebMetric{})
	pulumi.RegisterInputType(reflect.TypeOf((*CalculatedWebMetricArrayInput)(nil)).Elem(), CalculatedWebMetricArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CalculatedWebMetricMapInput)(nil)).Elem(), CalculatedWebMetricMap{})
	pulumi.RegisterOutputType(CalculatedWebMetricOutput{})
	pulumi.RegisterOutputType(CalculatedWebMetricArrayOutput{})
	pulumi.RegisterOutputType(CalculatedWebMetricMapOutput{})
}
