// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type DefaultLaunchpad struct {
	pulumi.CustomResourceState

	// Set default launchpads for user groups. The highest ranked will be shown to the user of a group.
	GroupLaunchpads DefaultLaunchpadGroupLaunchpadsPtrOutput `pulumi:"groupLaunchpads"`
}

// NewDefaultLaunchpad registers a new resource with the given unique name, arguments, and options.
func NewDefaultLaunchpad(ctx *pulumi.Context,
	name string, args *DefaultLaunchpadArgs, opts ...pulumi.ResourceOption) (*DefaultLaunchpad, error) {
	if args == nil {
		args = &DefaultLaunchpadArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DefaultLaunchpad
	err := ctx.RegisterResource("dynatrace:index/defaultLaunchpad:DefaultLaunchpad", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDefaultLaunchpad gets an existing DefaultLaunchpad resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDefaultLaunchpad(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DefaultLaunchpadState, opts ...pulumi.ResourceOption) (*DefaultLaunchpad, error) {
	var resource DefaultLaunchpad
	err := ctx.ReadResource("dynatrace:index/defaultLaunchpad:DefaultLaunchpad", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DefaultLaunchpad resources.
type defaultLaunchpadState struct {
	// Set default launchpads for user groups. The highest ranked will be shown to the user of a group.
	GroupLaunchpads *DefaultLaunchpadGroupLaunchpads `pulumi:"groupLaunchpads"`
}

type DefaultLaunchpadState struct {
	// Set default launchpads for user groups. The highest ranked will be shown to the user of a group.
	GroupLaunchpads DefaultLaunchpadGroupLaunchpadsPtrInput
}

func (DefaultLaunchpadState) ElementType() reflect.Type {
	return reflect.TypeOf((*defaultLaunchpadState)(nil)).Elem()
}

type defaultLaunchpadArgs struct {
	// Set default launchpads for user groups. The highest ranked will be shown to the user of a group.
	GroupLaunchpads *DefaultLaunchpadGroupLaunchpads `pulumi:"groupLaunchpads"`
}

// The set of arguments for constructing a DefaultLaunchpad resource.
type DefaultLaunchpadArgs struct {
	// Set default launchpads for user groups. The highest ranked will be shown to the user of a group.
	GroupLaunchpads DefaultLaunchpadGroupLaunchpadsPtrInput
}

func (DefaultLaunchpadArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*defaultLaunchpadArgs)(nil)).Elem()
}

type DefaultLaunchpadInput interface {
	pulumi.Input

	ToDefaultLaunchpadOutput() DefaultLaunchpadOutput
	ToDefaultLaunchpadOutputWithContext(ctx context.Context) DefaultLaunchpadOutput
}

func (*DefaultLaunchpad) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultLaunchpad)(nil)).Elem()
}

func (i *DefaultLaunchpad) ToDefaultLaunchpadOutput() DefaultLaunchpadOutput {
	return i.ToDefaultLaunchpadOutputWithContext(context.Background())
}

func (i *DefaultLaunchpad) ToDefaultLaunchpadOutputWithContext(ctx context.Context) DefaultLaunchpadOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultLaunchpadOutput)
}

// DefaultLaunchpadArrayInput is an input type that accepts DefaultLaunchpadArray and DefaultLaunchpadArrayOutput values.
// You can construct a concrete instance of `DefaultLaunchpadArrayInput` via:
//
//	DefaultLaunchpadArray{ DefaultLaunchpadArgs{...} }
type DefaultLaunchpadArrayInput interface {
	pulumi.Input

	ToDefaultLaunchpadArrayOutput() DefaultLaunchpadArrayOutput
	ToDefaultLaunchpadArrayOutputWithContext(context.Context) DefaultLaunchpadArrayOutput
}

type DefaultLaunchpadArray []DefaultLaunchpadInput

func (DefaultLaunchpadArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DefaultLaunchpad)(nil)).Elem()
}

func (i DefaultLaunchpadArray) ToDefaultLaunchpadArrayOutput() DefaultLaunchpadArrayOutput {
	return i.ToDefaultLaunchpadArrayOutputWithContext(context.Background())
}

func (i DefaultLaunchpadArray) ToDefaultLaunchpadArrayOutputWithContext(ctx context.Context) DefaultLaunchpadArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultLaunchpadArrayOutput)
}

// DefaultLaunchpadMapInput is an input type that accepts DefaultLaunchpadMap and DefaultLaunchpadMapOutput values.
// You can construct a concrete instance of `DefaultLaunchpadMapInput` via:
//
//	DefaultLaunchpadMap{ "key": DefaultLaunchpadArgs{...} }
type DefaultLaunchpadMapInput interface {
	pulumi.Input

	ToDefaultLaunchpadMapOutput() DefaultLaunchpadMapOutput
	ToDefaultLaunchpadMapOutputWithContext(context.Context) DefaultLaunchpadMapOutput
}

type DefaultLaunchpadMap map[string]DefaultLaunchpadInput

func (DefaultLaunchpadMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DefaultLaunchpad)(nil)).Elem()
}

func (i DefaultLaunchpadMap) ToDefaultLaunchpadMapOutput() DefaultLaunchpadMapOutput {
	return i.ToDefaultLaunchpadMapOutputWithContext(context.Background())
}

func (i DefaultLaunchpadMap) ToDefaultLaunchpadMapOutputWithContext(ctx context.Context) DefaultLaunchpadMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultLaunchpadMapOutput)
}

type DefaultLaunchpadOutput struct{ *pulumi.OutputState }

func (DefaultLaunchpadOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultLaunchpad)(nil)).Elem()
}

func (o DefaultLaunchpadOutput) ToDefaultLaunchpadOutput() DefaultLaunchpadOutput {
	return o
}

func (o DefaultLaunchpadOutput) ToDefaultLaunchpadOutputWithContext(ctx context.Context) DefaultLaunchpadOutput {
	return o
}

// Set default launchpads for user groups. The highest ranked will be shown to the user of a group.
func (o DefaultLaunchpadOutput) GroupLaunchpads() DefaultLaunchpadGroupLaunchpadsPtrOutput {
	return o.ApplyT(func(v *DefaultLaunchpad) DefaultLaunchpadGroupLaunchpadsPtrOutput { return v.GroupLaunchpads }).(DefaultLaunchpadGroupLaunchpadsPtrOutput)
}

type DefaultLaunchpadArrayOutput struct{ *pulumi.OutputState }

func (DefaultLaunchpadArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DefaultLaunchpad)(nil)).Elem()
}

func (o DefaultLaunchpadArrayOutput) ToDefaultLaunchpadArrayOutput() DefaultLaunchpadArrayOutput {
	return o
}

func (o DefaultLaunchpadArrayOutput) ToDefaultLaunchpadArrayOutputWithContext(ctx context.Context) DefaultLaunchpadArrayOutput {
	return o
}

func (o DefaultLaunchpadArrayOutput) Index(i pulumi.IntInput) DefaultLaunchpadOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DefaultLaunchpad {
		return vs[0].([]*DefaultLaunchpad)[vs[1].(int)]
	}).(DefaultLaunchpadOutput)
}

type DefaultLaunchpadMapOutput struct{ *pulumi.OutputState }

func (DefaultLaunchpadMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DefaultLaunchpad)(nil)).Elem()
}

func (o DefaultLaunchpadMapOutput) ToDefaultLaunchpadMapOutput() DefaultLaunchpadMapOutput {
	return o
}

func (o DefaultLaunchpadMapOutput) ToDefaultLaunchpadMapOutputWithContext(ctx context.Context) DefaultLaunchpadMapOutput {
	return o
}

func (o DefaultLaunchpadMapOutput) MapIndex(k pulumi.StringInput) DefaultLaunchpadOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DefaultLaunchpad {
		return vs[0].(map[string]*DefaultLaunchpad)[vs[1].(string)]
	}).(DefaultLaunchpadOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DefaultLaunchpadInput)(nil)).Elem(), &DefaultLaunchpad{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefaultLaunchpadArrayInput)(nil)).Elem(), DefaultLaunchpadArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefaultLaunchpadMapInput)(nil)).Elem(), DefaultLaunchpadMap{})
	pulumi.RegisterOutputType(DefaultLaunchpadOutput{})
	pulumi.RegisterOutputType(DefaultLaunchpadArrayOutput{})
	pulumi.RegisterOutputType(DefaultLaunchpadMapOutput{})
}
