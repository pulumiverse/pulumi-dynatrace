// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type SecurityContext struct {
	pulumi.CustomResourceState

	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
}

// NewSecurityContext registers a new resource with the given unique name, arguments, and options.
func NewSecurityContext(ctx *pulumi.Context,
	name string, args *SecurityContextArgs, opts ...pulumi.ResourceOption) (*SecurityContext, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecurityContext
	err := ctx.RegisterResource("dynatrace:index/securityContext:SecurityContext", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityContext gets an existing SecurityContext resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityContext(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityContextState, opts ...pulumi.ResourceOption) (*SecurityContext, error) {
	var resource SecurityContext
	err := ctx.ReadResource("dynatrace:index/securityContext:SecurityContext", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityContext resources.
type securityContextState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
}

type SecurityContextState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
}

func (SecurityContextState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityContextState)(nil)).Elem()
}

type securityContextArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
}

// The set of arguments for constructing a SecurityContext resource.
type SecurityContextArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
}

func (SecurityContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityContextArgs)(nil)).Elem()
}

type SecurityContextInput interface {
	pulumi.Input

	ToSecurityContextOutput() SecurityContextOutput
	ToSecurityContextOutputWithContext(ctx context.Context) SecurityContextOutput
}

func (*SecurityContext) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityContext)(nil)).Elem()
}

func (i *SecurityContext) ToSecurityContextOutput() SecurityContextOutput {
	return i.ToSecurityContextOutputWithContext(context.Background())
}

func (i *SecurityContext) ToSecurityContextOutputWithContext(ctx context.Context) SecurityContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityContextOutput)
}

// SecurityContextArrayInput is an input type that accepts SecurityContextArray and SecurityContextArrayOutput values.
// You can construct a concrete instance of `SecurityContextArrayInput` via:
//
//	SecurityContextArray{ SecurityContextArgs{...} }
type SecurityContextArrayInput interface {
	pulumi.Input

	ToSecurityContextArrayOutput() SecurityContextArrayOutput
	ToSecurityContextArrayOutputWithContext(context.Context) SecurityContextArrayOutput
}

type SecurityContextArray []SecurityContextInput

func (SecurityContextArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityContext)(nil)).Elem()
}

func (i SecurityContextArray) ToSecurityContextArrayOutput() SecurityContextArrayOutput {
	return i.ToSecurityContextArrayOutputWithContext(context.Background())
}

func (i SecurityContextArray) ToSecurityContextArrayOutputWithContext(ctx context.Context) SecurityContextArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityContextArrayOutput)
}

// SecurityContextMapInput is an input type that accepts SecurityContextMap and SecurityContextMapOutput values.
// You can construct a concrete instance of `SecurityContextMapInput` via:
//
//	SecurityContextMap{ "key": SecurityContextArgs{...} }
type SecurityContextMapInput interface {
	pulumi.Input

	ToSecurityContextMapOutput() SecurityContextMapOutput
	ToSecurityContextMapOutputWithContext(context.Context) SecurityContextMapOutput
}

type SecurityContextMap map[string]SecurityContextInput

func (SecurityContextMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityContext)(nil)).Elem()
}

func (i SecurityContextMap) ToSecurityContextMapOutput() SecurityContextMapOutput {
	return i.ToSecurityContextMapOutputWithContext(context.Background())
}

func (i SecurityContextMap) ToSecurityContextMapOutputWithContext(ctx context.Context) SecurityContextMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityContextMapOutput)
}

type SecurityContextOutput struct{ *pulumi.OutputState }

func (SecurityContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityContext)(nil)).Elem()
}

func (o SecurityContextOutput) ToSecurityContextOutput() SecurityContextOutput {
	return o
}

func (o SecurityContextOutput) ToSecurityContextOutputWithContext(ctx context.Context) SecurityContextOutput {
	return o
}

// This setting is enabled (`true`) or disabled (`false`)
func (o SecurityContextOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecurityContext) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

type SecurityContextArrayOutput struct{ *pulumi.OutputState }

func (SecurityContextArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityContext)(nil)).Elem()
}

func (o SecurityContextArrayOutput) ToSecurityContextArrayOutput() SecurityContextArrayOutput {
	return o
}

func (o SecurityContextArrayOutput) ToSecurityContextArrayOutputWithContext(ctx context.Context) SecurityContextArrayOutput {
	return o
}

func (o SecurityContextArrayOutput) Index(i pulumi.IntInput) SecurityContextOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecurityContext {
		return vs[0].([]*SecurityContext)[vs[1].(int)]
	}).(SecurityContextOutput)
}

type SecurityContextMapOutput struct{ *pulumi.OutputState }

func (SecurityContextMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityContext)(nil)).Elem()
}

func (o SecurityContextMapOutput) ToSecurityContextMapOutput() SecurityContextMapOutput {
	return o
}

func (o SecurityContextMapOutput) ToSecurityContextMapOutputWithContext(ctx context.Context) SecurityContextMapOutput {
	return o
}

func (o SecurityContextMapOutput) MapIndex(k pulumi.StringInput) SecurityContextOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecurityContext {
		return vs[0].(map[string]*SecurityContext)[vs[1].(string)]
	}).(SecurityContextOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityContextInput)(nil)).Elem(), &SecurityContext{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityContextArrayInput)(nil)).Elem(), SecurityContextArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityContextMapInput)(nil)).Elem(), SecurityContextMap{})
	pulumi.RegisterOutputType(SecurityContextOutput{})
	pulumi.RegisterOutputType(SecurityContextArrayOutput{})
	pulumi.RegisterOutputType(SecurityContextMapOutput{})
}
