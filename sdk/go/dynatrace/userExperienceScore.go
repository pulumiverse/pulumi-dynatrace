// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type UserExperienceScore struct {
	pulumi.CustomResourceState

	// If last user action in a session is classified as Frustrating, classify the entire session as Frustrating
	ConsiderLastAction pulumi.BoolOutput `pulumi:"considerLastAction"`
	// Consider rage clicks / rage taps in score calculation
	ConsiderRageClick pulumi.BoolOutput `pulumi:"considerRageClick"`
	// User experience is considered Frustrating when the selected percentage or more of the user actions in a session are rated as Frustrating.
	MaxFrustratedUserActionsThreshold pulumi.IntOutput `pulumi:"maxFrustratedUserActionsThreshold"`
	// User experience is considered Satisfying when at least the selected percentage of the user actions in a session are rated as Satisfying.
	MinSatisfiedUserActionsThreshold pulumi.IntOutput `pulumi:"minSatisfiedUserActionsThreshold"`
}

// NewUserExperienceScore registers a new resource with the given unique name, arguments, and options.
func NewUserExperienceScore(ctx *pulumi.Context,
	name string, args *UserExperienceScoreArgs, opts ...pulumi.ResourceOption) (*UserExperienceScore, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConsiderLastAction == nil {
		return nil, errors.New("invalid value for required argument 'ConsiderLastAction'")
	}
	if args.ConsiderRageClick == nil {
		return nil, errors.New("invalid value for required argument 'ConsiderRageClick'")
	}
	if args.MaxFrustratedUserActionsThreshold == nil {
		return nil, errors.New("invalid value for required argument 'MaxFrustratedUserActionsThreshold'")
	}
	if args.MinSatisfiedUserActionsThreshold == nil {
		return nil, errors.New("invalid value for required argument 'MinSatisfiedUserActionsThreshold'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserExperienceScore
	err := ctx.RegisterResource("dynatrace:index/userExperienceScore:UserExperienceScore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserExperienceScore gets an existing UserExperienceScore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserExperienceScore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserExperienceScoreState, opts ...pulumi.ResourceOption) (*UserExperienceScore, error) {
	var resource UserExperienceScore
	err := ctx.ReadResource("dynatrace:index/userExperienceScore:UserExperienceScore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserExperienceScore resources.
type userExperienceScoreState struct {
	// If last user action in a session is classified as Frustrating, classify the entire session as Frustrating
	ConsiderLastAction *bool `pulumi:"considerLastAction"`
	// Consider rage clicks / rage taps in score calculation
	ConsiderRageClick *bool `pulumi:"considerRageClick"`
	// User experience is considered Frustrating when the selected percentage or more of the user actions in a session are rated as Frustrating.
	MaxFrustratedUserActionsThreshold *int `pulumi:"maxFrustratedUserActionsThreshold"`
	// User experience is considered Satisfying when at least the selected percentage of the user actions in a session are rated as Satisfying.
	MinSatisfiedUserActionsThreshold *int `pulumi:"minSatisfiedUserActionsThreshold"`
}

type UserExperienceScoreState struct {
	// If last user action in a session is classified as Frustrating, classify the entire session as Frustrating
	ConsiderLastAction pulumi.BoolPtrInput
	// Consider rage clicks / rage taps in score calculation
	ConsiderRageClick pulumi.BoolPtrInput
	// User experience is considered Frustrating when the selected percentage or more of the user actions in a session are rated as Frustrating.
	MaxFrustratedUserActionsThreshold pulumi.IntPtrInput
	// User experience is considered Satisfying when at least the selected percentage of the user actions in a session are rated as Satisfying.
	MinSatisfiedUserActionsThreshold pulumi.IntPtrInput
}

func (UserExperienceScoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*userExperienceScoreState)(nil)).Elem()
}

type userExperienceScoreArgs struct {
	// If last user action in a session is classified as Frustrating, classify the entire session as Frustrating
	ConsiderLastAction bool `pulumi:"considerLastAction"`
	// Consider rage clicks / rage taps in score calculation
	ConsiderRageClick bool `pulumi:"considerRageClick"`
	// User experience is considered Frustrating when the selected percentage or more of the user actions in a session are rated as Frustrating.
	MaxFrustratedUserActionsThreshold int `pulumi:"maxFrustratedUserActionsThreshold"`
	// User experience is considered Satisfying when at least the selected percentage of the user actions in a session are rated as Satisfying.
	MinSatisfiedUserActionsThreshold int `pulumi:"minSatisfiedUserActionsThreshold"`
}

// The set of arguments for constructing a UserExperienceScore resource.
type UserExperienceScoreArgs struct {
	// If last user action in a session is classified as Frustrating, classify the entire session as Frustrating
	ConsiderLastAction pulumi.BoolInput
	// Consider rage clicks / rage taps in score calculation
	ConsiderRageClick pulumi.BoolInput
	// User experience is considered Frustrating when the selected percentage or more of the user actions in a session are rated as Frustrating.
	MaxFrustratedUserActionsThreshold pulumi.IntInput
	// User experience is considered Satisfying when at least the selected percentage of the user actions in a session are rated as Satisfying.
	MinSatisfiedUserActionsThreshold pulumi.IntInput
}

func (UserExperienceScoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userExperienceScoreArgs)(nil)).Elem()
}

type UserExperienceScoreInput interface {
	pulumi.Input

	ToUserExperienceScoreOutput() UserExperienceScoreOutput
	ToUserExperienceScoreOutputWithContext(ctx context.Context) UserExperienceScoreOutput
}

func (*UserExperienceScore) ElementType() reflect.Type {
	return reflect.TypeOf((**UserExperienceScore)(nil)).Elem()
}

func (i *UserExperienceScore) ToUserExperienceScoreOutput() UserExperienceScoreOutput {
	return i.ToUserExperienceScoreOutputWithContext(context.Background())
}

func (i *UserExperienceScore) ToUserExperienceScoreOutputWithContext(ctx context.Context) UserExperienceScoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserExperienceScoreOutput)
}

// UserExperienceScoreArrayInput is an input type that accepts UserExperienceScoreArray and UserExperienceScoreArrayOutput values.
// You can construct a concrete instance of `UserExperienceScoreArrayInput` via:
//
//	UserExperienceScoreArray{ UserExperienceScoreArgs{...} }
type UserExperienceScoreArrayInput interface {
	pulumi.Input

	ToUserExperienceScoreArrayOutput() UserExperienceScoreArrayOutput
	ToUserExperienceScoreArrayOutputWithContext(context.Context) UserExperienceScoreArrayOutput
}

type UserExperienceScoreArray []UserExperienceScoreInput

func (UserExperienceScoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserExperienceScore)(nil)).Elem()
}

func (i UserExperienceScoreArray) ToUserExperienceScoreArrayOutput() UserExperienceScoreArrayOutput {
	return i.ToUserExperienceScoreArrayOutputWithContext(context.Background())
}

func (i UserExperienceScoreArray) ToUserExperienceScoreArrayOutputWithContext(ctx context.Context) UserExperienceScoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserExperienceScoreArrayOutput)
}

// UserExperienceScoreMapInput is an input type that accepts UserExperienceScoreMap and UserExperienceScoreMapOutput values.
// You can construct a concrete instance of `UserExperienceScoreMapInput` via:
//
//	UserExperienceScoreMap{ "key": UserExperienceScoreArgs{...} }
type UserExperienceScoreMapInput interface {
	pulumi.Input

	ToUserExperienceScoreMapOutput() UserExperienceScoreMapOutput
	ToUserExperienceScoreMapOutputWithContext(context.Context) UserExperienceScoreMapOutput
}

type UserExperienceScoreMap map[string]UserExperienceScoreInput

func (UserExperienceScoreMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserExperienceScore)(nil)).Elem()
}

func (i UserExperienceScoreMap) ToUserExperienceScoreMapOutput() UserExperienceScoreMapOutput {
	return i.ToUserExperienceScoreMapOutputWithContext(context.Background())
}

func (i UserExperienceScoreMap) ToUserExperienceScoreMapOutputWithContext(ctx context.Context) UserExperienceScoreMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserExperienceScoreMapOutput)
}

type UserExperienceScoreOutput struct{ *pulumi.OutputState }

func (UserExperienceScoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserExperienceScore)(nil)).Elem()
}

func (o UserExperienceScoreOutput) ToUserExperienceScoreOutput() UserExperienceScoreOutput {
	return o
}

func (o UserExperienceScoreOutput) ToUserExperienceScoreOutputWithContext(ctx context.Context) UserExperienceScoreOutput {
	return o
}

// If last user action in a session is classified as Frustrating, classify the entire session as Frustrating
func (o UserExperienceScoreOutput) ConsiderLastAction() pulumi.BoolOutput {
	return o.ApplyT(func(v *UserExperienceScore) pulumi.BoolOutput { return v.ConsiderLastAction }).(pulumi.BoolOutput)
}

// Consider rage clicks / rage taps in score calculation
func (o UserExperienceScoreOutput) ConsiderRageClick() pulumi.BoolOutput {
	return o.ApplyT(func(v *UserExperienceScore) pulumi.BoolOutput { return v.ConsiderRageClick }).(pulumi.BoolOutput)
}

// User experience is considered Frustrating when the selected percentage or more of the user actions in a session are rated as Frustrating.
func (o UserExperienceScoreOutput) MaxFrustratedUserActionsThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v *UserExperienceScore) pulumi.IntOutput { return v.MaxFrustratedUserActionsThreshold }).(pulumi.IntOutput)
}

// User experience is considered Satisfying when at least the selected percentage of the user actions in a session are rated as Satisfying.
func (o UserExperienceScoreOutput) MinSatisfiedUserActionsThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v *UserExperienceScore) pulumi.IntOutput { return v.MinSatisfiedUserActionsThreshold }).(pulumi.IntOutput)
}

type UserExperienceScoreArrayOutput struct{ *pulumi.OutputState }

func (UserExperienceScoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserExperienceScore)(nil)).Elem()
}

func (o UserExperienceScoreArrayOutput) ToUserExperienceScoreArrayOutput() UserExperienceScoreArrayOutput {
	return o
}

func (o UserExperienceScoreArrayOutput) ToUserExperienceScoreArrayOutputWithContext(ctx context.Context) UserExperienceScoreArrayOutput {
	return o
}

func (o UserExperienceScoreArrayOutput) Index(i pulumi.IntInput) UserExperienceScoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserExperienceScore {
		return vs[0].([]*UserExperienceScore)[vs[1].(int)]
	}).(UserExperienceScoreOutput)
}

type UserExperienceScoreMapOutput struct{ *pulumi.OutputState }

func (UserExperienceScoreMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserExperienceScore)(nil)).Elem()
}

func (o UserExperienceScoreMapOutput) ToUserExperienceScoreMapOutput() UserExperienceScoreMapOutput {
	return o
}

func (o UserExperienceScoreMapOutput) ToUserExperienceScoreMapOutputWithContext(ctx context.Context) UserExperienceScoreMapOutput {
	return o
}

func (o UserExperienceScoreMapOutput) MapIndex(k pulumi.StringInput) UserExperienceScoreOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserExperienceScore {
		return vs[0].(map[string]*UserExperienceScore)[vs[1].(string)]
	}).(UserExperienceScoreOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserExperienceScoreInput)(nil)).Elem(), &UserExperienceScore{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserExperienceScoreArrayInput)(nil)).Elem(), UserExperienceScoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserExperienceScoreMapInput)(nil)).Elem(), UserExperienceScoreMap{})
	pulumi.RegisterOutputType(UserExperienceScoreOutput{})
	pulumi.RegisterOutputType(UserExperienceScoreArrayOutput{})
	pulumi.RegisterOutputType(UserExperienceScoreMapOutput{})
}
