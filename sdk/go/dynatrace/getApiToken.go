// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

// The API token data source allows a single access token to be retrieved by its name, note the token value is not included in the response.
//
// If multiple tokens match the given name, the first result will be retrieved. To retrieve multiple tokens of the same name, please utilize the `getApiTokens` data source.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleApiToken, err := dynatrace.LookupApiToken(ctx, &dynatrace.LookupApiTokenArgs{
//				Name: "Terraform",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("example", exampleApiToken)
//			return nil
//		})
//	}
//
// ```
func LookupApiToken(ctx *pulumi.Context, args *LookupApiTokenArgs, opts ...pulumi.InvokeOption) (*LookupApiTokenResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupApiTokenResult
	err := ctx.Invoke("dynatrace:index/getApiToken:getApiToken", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getApiToken.
type LookupApiTokenArgs struct {
	Name string `pulumi:"name"`
}

// A collection of values returned by getApiToken.
type LookupApiTokenResult struct {
	// Token creation date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z')
	CreationDate string `pulumi:"creationDate"`
	// The token is enabled (true) or disabled (false), default disabled (false).
	Enabled bool `pulumi:"enabled"`
	// The expiration date of the token.
	ExpirationDate string `pulumi:"expirationDate"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// The owner of the token
	Owner string `pulumi:"owner"`
	// The token is a personal access token (true) or an API token (false).
	PersonalAccessToken bool `pulumi:"personalAccessToken"`
	// A list of the scopes to be assigned to the token.
	Scopes []string `pulumi:"scopes"`
}

func LookupApiTokenOutput(ctx *pulumi.Context, args LookupApiTokenOutputArgs, opts ...pulumi.InvokeOption) LookupApiTokenResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupApiTokenResultOutput, error) {
			args := v.(LookupApiTokenArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupApiTokenResult
			secret, err := ctx.InvokePackageRaw("dynatrace:index/getApiToken:getApiToken", args, &rv, "", opts...)
			if err != nil {
				return LookupApiTokenResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupApiTokenResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupApiTokenResultOutput), nil
			}
			return output, nil
		}).(LookupApiTokenResultOutput)
}

// A collection of arguments for invoking getApiToken.
type LookupApiTokenOutputArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupApiTokenOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupApiTokenArgs)(nil)).Elem()
}

// A collection of values returned by getApiToken.
type LookupApiTokenResultOutput struct{ *pulumi.OutputState }

func (LookupApiTokenResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupApiTokenResult)(nil)).Elem()
}

func (o LookupApiTokenResultOutput) ToLookupApiTokenResultOutput() LookupApiTokenResultOutput {
	return o
}

func (o LookupApiTokenResultOutput) ToLookupApiTokenResultOutputWithContext(ctx context.Context) LookupApiTokenResultOutput {
	return o
}

// Token creation date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z')
func (o LookupApiTokenResultOutput) CreationDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApiTokenResult) string { return v.CreationDate }).(pulumi.StringOutput)
}

// The token is enabled (true) or disabled (false), default disabled (false).
func (o LookupApiTokenResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupApiTokenResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The expiration date of the token.
func (o LookupApiTokenResultOutput) ExpirationDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApiTokenResult) string { return v.ExpirationDate }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupApiTokenResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApiTokenResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupApiTokenResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApiTokenResult) string { return v.Name }).(pulumi.StringOutput)
}

// The owner of the token
func (o LookupApiTokenResultOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApiTokenResult) string { return v.Owner }).(pulumi.StringOutput)
}

// The token is a personal access token (true) or an API token (false).
func (o LookupApiTokenResultOutput) PersonalAccessToken() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupApiTokenResult) bool { return v.PersonalAccessToken }).(pulumi.BoolOutput)
}

// A list of the scopes to be assigned to the token.
func (o LookupApiTokenResultOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupApiTokenResult) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupApiTokenResultOutput{})
}
