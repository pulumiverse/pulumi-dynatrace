// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

// > **Dynatrace SaaS only**
//
// > To utilize this resource with access to all segments, please define the environment variables `DT_CLIENT_ID`, `DT_CLIENT_SECRET`, `DT_ACCOUNT_ID` with an OAuth client including the following permissions: **View Filter-Segments** (`storage:filter-segments:read`), **Create and Update Filter-Segments** (`storage:filter-segments:write`), **Share Filter-Segments** (`storage:filter-segments:share`), **Delete Filter-Segments** (`storage:filter-segments:delete`) and **Maintain all Filter-Segments on the environment** (`storage:filter-segments:admin`).
//
// > This resource is excluded by default in the export utility, please explicitly specify the resource to retrieve existing configuration.
//
// > The `includes.items[X].filter` attribute, which is a JSON string, is unfriendly for configuration as code. The structure of that attribute is not publicly documented and therefore subject to change without warning. The resource schema has been created to match our REST API, but we will be reaching out to product management on further enhancement of this endpoint. In the meantime, please use the export utility to create configurations more efficiently.
//
// ## Dynatrace Documentation
//
// - Segments - https://docs.dynatrace.com/docs/manage/segments
//
// - Grail Storage Filter-Segments (API) - https://########.apps.dynatrace.com/platform/swagger-ui/index.html?urls.primaryName=Grail+-+Filter+Segments
//
// ## Resource Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"children": []map[string]interface{}{
//					map[string]interface{}{
//						"key": map[string]interface{}{
//							"range": map[string]interface{}{
//								"from": 0,
//								"to":   16,
//							},
//							"textValue": "k8s.cluster.name",
//							"type":      "Key",
//							"value":     "k8s.cluster.name",
//						},
//						"operator": map[string]interface{}{
//							"range": map[string]interface{}{
//								"from": 17,
//								"to":   18,
//							},
//							"textValue": "=",
//							"type":      "ComparisonOperator",
//							"value":     "=",
//						},
//						"range": map[string]interface{}{
//							"from": 0,
//							"to":   27,
//						},
//						"type": "Statement",
//						"value": map[string]interface{}{
//							"range": map[string]interface{}{
//								"from": 19,
//								"to":   27,
//							},
//							"textValue": "$cluster",
//							"type":      "String",
//							"value":     "$cluster",
//						},
//					},
//				},
//				"explicit":        false,
//				"logicalOperator": "AND",
//				"range": map[string]interface{}{
//					"from": 0,
//					"to":   27,
//				},
//				"type": "Group",
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			tmpJSON1, err := json.Marshal(map[string]interface{}{
//				"children": []map[string]interface{}{
//					map[string]interface{}{
//						"key": map[string]interface{}{
//							"range": map[string]interface{}{
//								"from": 0,
//								"to":   11,
//							},
//							"textValue": "entity.name",
//							"type":      "Key",
//							"value":     "entity.name",
//						},
//						"operator": map[string]interface{}{
//							"range": map[string]interface{}{
//								"from": 12,
//								"to":   13,
//							},
//							"textValue": "=",
//							"type":      "ComparisonOperator",
//							"value":     "=",
//						},
//						"range": map[string]interface{}{
//							"from": 0,
//							"to":   22,
//						},
//						"type": "Statement",
//						"value": map[string]interface{}{
//							"range": map[string]interface{}{
//								"from": 14,
//								"to":   22,
//							},
//							"textValue": "$cluster",
//							"type":      "String",
//							"value":     "$cluster",
//						},
//					},
//				},
//				"explicit":        false,
//				"logicalOperator": "AND",
//				"range": map[string]interface{}{
//					"from": 0,
//					"to":   22,
//				},
//				"type": "Group",
//			})
//			if err != nil {
//				return err
//			}
//			json1 := string(tmpJSON1)
//			// ID GQ7NqJGPV1N
//			_, err = dynatrace.NewSegment(ctx, "#name#", &dynatrace.SegmentArgs{
//				Description: pulumi.String("Example description"),
//				IsPublic:    pulumi.Bool(true),
//				Includes: &dynatrace.SegmentIncludesArgs{
//					Items: dynatrace.SegmentIncludesItemArray{
//						&dynatrace.SegmentIncludesItemArgs{
//							DataObject: pulumi.String("_all_data_object"),
//							Filter:     pulumi.String(json0),
//						},
//						&dynatrace.SegmentIncludesItemArgs{
//							DataObject: pulumi.String("dt.entity.cloud_application"),
//							Filter:     pulumi.String(""),
//							Relationship: &dynatrace.SegmentIncludesItemRelationshipArgs{
//								Name:   pulumi.String("clustered_by"),
//								Target: pulumi.String("dt.entity.kubernetes_cluster"),
//							},
//						},
//						&dynatrace.SegmentIncludesItemArgs{
//							DataObject: pulumi.String("dt.entity.cloud_application_instance"),
//							Filter:     pulumi.String(""),
//							Relationship: &dynatrace.SegmentIncludesItemRelationshipArgs{
//								Name:   pulumi.String("clustered_by"),
//								Target: pulumi.String("dt.entity.kubernetes_cluster"),
//							},
//						},
//						&dynatrace.SegmentIncludesItemArgs{
//							DataObject: pulumi.String("dt.entity.cloud_application_namespace"),
//							Filter:     pulumi.String(""),
//							Relationship: &dynatrace.SegmentIncludesItemRelationshipArgs{
//								Name:   pulumi.String("clustered_by"),
//								Target: pulumi.String("dt.entity.kubernetes_cluster"),
//							},
//						},
//						&dynatrace.SegmentIncludesItemArgs{
//							DataObject: pulumi.String("dt.entity.container_group_instance"),
//							Filter:     pulumi.String(""),
//							Relationship: &dynatrace.SegmentIncludesItemRelationshipArgs{
//								Name:   pulumi.String("belongs_to"),
//								Target: pulumi.String("dt.entity.kubernetes_cluster"),
//							},
//						},
//						&dynatrace.SegmentIncludesItemArgs{
//							DataObject: pulumi.String("dt.entity.host"),
//							Filter:     pulumi.String(""),
//							Relationship: &dynatrace.SegmentIncludesItemRelationshipArgs{
//								Name:   pulumi.String("clustered_by"),
//								Target: pulumi.String("dt.entity.kubernetes_cluster"),
//							},
//						},
//						&dynatrace.SegmentIncludesItemArgs{
//							DataObject: pulumi.String("dt.entity.kubernetes_cluster"),
//							Filter:     pulumi.String(json1),
//						},
//						&dynatrace.SegmentIncludesItemArgs{
//							DataObject: pulumi.String("dt.entity.kubernetes_node"),
//							Filter:     pulumi.String(""),
//							Relationship: &dynatrace.SegmentIncludesItemRelationshipArgs{
//								Name:   pulumi.String("clustered_by"),
//								Target: pulumi.String("dt.entity.kubernetes_cluster"),
//							},
//						},
//						&dynatrace.SegmentIncludesItemArgs{
//							DataObject: pulumi.String("dt.entity.kubernetes_service"),
//							Filter:     pulumi.String(""),
//							Relationship: &dynatrace.SegmentIncludesItemRelationshipArgs{
//								Name:   pulumi.String("clustered_by"),
//								Target: pulumi.String("dt.entity.kubernetes_cluster"),
//							},
//						},
//						&dynatrace.SegmentIncludesItemArgs{
//							DataObject: pulumi.String("dt.entity.service"),
//							Filter:     pulumi.String(""),
//							Relationship: &dynatrace.SegmentIncludesItemRelationshipArgs{
//								Name:   pulumi.String("clustered_by"),
//								Target: pulumi.String("dt.entity.kubernetes_cluster"),
//							},
//						},
//					},
//				},
//				Variables: &dynatrace.SegmentVariablesArgs{
//					Type:  pulumi.String("query"),
//					Value: pulumi.String("fetch dt.entity.kubernetes_cluster\n| fields cluster = entity.name\n| sort cluster\n"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Segment struct {
	pulumi.CustomResourceState

	// Description of the filter-segment
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// List of includes of the filter-segment
	Includes SegmentIncludesPtrOutput `pulumi:"includes"`
	// Indicates if the filter-segment is publicly accessible within the tenant
	IsPublic pulumi.BoolOutput `pulumi:"isPublic"`
	// Name of the filter-segment
	Name pulumi.StringOutput `pulumi:"name"`
	// Variables of the filter-segment
	Variables SegmentVariablesPtrOutput `pulumi:"variables"`
}

// NewSegment registers a new resource with the given unique name, arguments, and options.
func NewSegment(ctx *pulumi.Context,
	name string, args *SegmentArgs, opts ...pulumi.ResourceOption) (*Segment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IsPublic == nil {
		return nil, errors.New("invalid value for required argument 'IsPublic'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Segment
	err := ctx.RegisterResource("dynatrace:index/segment:Segment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSegment gets an existing Segment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSegment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SegmentState, opts ...pulumi.ResourceOption) (*Segment, error) {
	var resource Segment
	err := ctx.ReadResource("dynatrace:index/segment:Segment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Segment resources.
type segmentState struct {
	// Description of the filter-segment
	Description *string `pulumi:"description"`
	// List of includes of the filter-segment
	Includes *SegmentIncludes `pulumi:"includes"`
	// Indicates if the filter-segment is publicly accessible within the tenant
	IsPublic *bool `pulumi:"isPublic"`
	// Name of the filter-segment
	Name *string `pulumi:"name"`
	// Variables of the filter-segment
	Variables *SegmentVariables `pulumi:"variables"`
}

type SegmentState struct {
	// Description of the filter-segment
	Description pulumi.StringPtrInput
	// List of includes of the filter-segment
	Includes SegmentIncludesPtrInput
	// Indicates if the filter-segment is publicly accessible within the tenant
	IsPublic pulumi.BoolPtrInput
	// Name of the filter-segment
	Name pulumi.StringPtrInput
	// Variables of the filter-segment
	Variables SegmentVariablesPtrInput
}

func (SegmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*segmentState)(nil)).Elem()
}

type segmentArgs struct {
	// Description of the filter-segment
	Description *string `pulumi:"description"`
	// List of includes of the filter-segment
	Includes *SegmentIncludes `pulumi:"includes"`
	// Indicates if the filter-segment is publicly accessible within the tenant
	IsPublic bool `pulumi:"isPublic"`
	// Name of the filter-segment
	Name *string `pulumi:"name"`
	// Variables of the filter-segment
	Variables *SegmentVariables `pulumi:"variables"`
}

// The set of arguments for constructing a Segment resource.
type SegmentArgs struct {
	// Description of the filter-segment
	Description pulumi.StringPtrInput
	// List of includes of the filter-segment
	Includes SegmentIncludesPtrInput
	// Indicates if the filter-segment is publicly accessible within the tenant
	IsPublic pulumi.BoolInput
	// Name of the filter-segment
	Name pulumi.StringPtrInput
	// Variables of the filter-segment
	Variables SegmentVariablesPtrInput
}

func (SegmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*segmentArgs)(nil)).Elem()
}

type SegmentInput interface {
	pulumi.Input

	ToSegmentOutput() SegmentOutput
	ToSegmentOutputWithContext(ctx context.Context) SegmentOutput
}

func (*Segment) ElementType() reflect.Type {
	return reflect.TypeOf((**Segment)(nil)).Elem()
}

func (i *Segment) ToSegmentOutput() SegmentOutput {
	return i.ToSegmentOutputWithContext(context.Background())
}

func (i *Segment) ToSegmentOutputWithContext(ctx context.Context) SegmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentOutput)
}

// SegmentArrayInput is an input type that accepts SegmentArray and SegmentArrayOutput values.
// You can construct a concrete instance of `SegmentArrayInput` via:
//
//	SegmentArray{ SegmentArgs{...} }
type SegmentArrayInput interface {
	pulumi.Input

	ToSegmentArrayOutput() SegmentArrayOutput
	ToSegmentArrayOutputWithContext(context.Context) SegmentArrayOutput
}

type SegmentArray []SegmentInput

func (SegmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Segment)(nil)).Elem()
}

func (i SegmentArray) ToSegmentArrayOutput() SegmentArrayOutput {
	return i.ToSegmentArrayOutputWithContext(context.Background())
}

func (i SegmentArray) ToSegmentArrayOutputWithContext(ctx context.Context) SegmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentArrayOutput)
}

// SegmentMapInput is an input type that accepts SegmentMap and SegmentMapOutput values.
// You can construct a concrete instance of `SegmentMapInput` via:
//
//	SegmentMap{ "key": SegmentArgs{...} }
type SegmentMapInput interface {
	pulumi.Input

	ToSegmentMapOutput() SegmentMapOutput
	ToSegmentMapOutputWithContext(context.Context) SegmentMapOutput
}

type SegmentMap map[string]SegmentInput

func (SegmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Segment)(nil)).Elem()
}

func (i SegmentMap) ToSegmentMapOutput() SegmentMapOutput {
	return i.ToSegmentMapOutputWithContext(context.Background())
}

func (i SegmentMap) ToSegmentMapOutputWithContext(ctx context.Context) SegmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentMapOutput)
}

type SegmentOutput struct{ *pulumi.OutputState }

func (SegmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Segment)(nil)).Elem()
}

func (o SegmentOutput) ToSegmentOutput() SegmentOutput {
	return o
}

func (o SegmentOutput) ToSegmentOutputWithContext(ctx context.Context) SegmentOutput {
	return o
}

// Description of the filter-segment
func (o SegmentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Segment) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// List of includes of the filter-segment
func (o SegmentOutput) Includes() SegmentIncludesPtrOutput {
	return o.ApplyT(func(v *Segment) SegmentIncludesPtrOutput { return v.Includes }).(SegmentIncludesPtrOutput)
}

// Indicates if the filter-segment is publicly accessible within the tenant
func (o SegmentOutput) IsPublic() pulumi.BoolOutput {
	return o.ApplyT(func(v *Segment) pulumi.BoolOutput { return v.IsPublic }).(pulumi.BoolOutput)
}

// Name of the filter-segment
func (o SegmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Segment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Variables of the filter-segment
func (o SegmentOutput) Variables() SegmentVariablesPtrOutput {
	return o.ApplyT(func(v *Segment) SegmentVariablesPtrOutput { return v.Variables }).(SegmentVariablesPtrOutput)
}

type SegmentArrayOutput struct{ *pulumi.OutputState }

func (SegmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Segment)(nil)).Elem()
}

func (o SegmentArrayOutput) ToSegmentArrayOutput() SegmentArrayOutput {
	return o
}

func (o SegmentArrayOutput) ToSegmentArrayOutputWithContext(ctx context.Context) SegmentArrayOutput {
	return o
}

func (o SegmentArrayOutput) Index(i pulumi.IntInput) SegmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Segment {
		return vs[0].([]*Segment)[vs[1].(int)]
	}).(SegmentOutput)
}

type SegmentMapOutput struct{ *pulumi.OutputState }

func (SegmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Segment)(nil)).Elem()
}

func (o SegmentMapOutput) ToSegmentMapOutput() SegmentMapOutput {
	return o
}

func (o SegmentMapOutput) ToSegmentMapOutputWithContext(ctx context.Context) SegmentMapOutput {
	return o
}

func (o SegmentMapOutput) MapIndex(k pulumi.StringInput) SegmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Segment {
		return vs[0].(map[string]*Segment)[vs[1].(string)]
	}).(SegmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentInput)(nil)).Elem(), &Segment{})
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentArrayInput)(nil)).Elem(), SegmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentMapInput)(nil)).Elem(), SegmentMap{})
	pulumi.RegisterOutputType(SegmentOutput{})
	pulumi.RegisterOutputType(SegmentArrayOutput{})
	pulumi.RegisterOutputType(SegmentMapOutput{})
}
