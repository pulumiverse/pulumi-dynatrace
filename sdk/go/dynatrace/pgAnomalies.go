// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type PgAnomalies struct {
	pulumi.CustomResourceState

	// Configuration of the availability monitoring for the process group.
	Availability PgAnomaliesAvailabilityPtrOutput `pulumi:"availability"`
	// The ID of the process group
	PgId pulumi.StringOutput `pulumi:"pgId"`
}

// NewPgAnomalies registers a new resource with the given unique name, arguments, and options.
func NewPgAnomalies(ctx *pulumi.Context,
	name string, args *PgAnomaliesArgs, opts ...pulumi.ResourceOption) (*PgAnomalies, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PgId == nil {
		return nil, errors.New("invalid value for required argument 'PgId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PgAnomalies
	err := ctx.RegisterResource("dynatrace:index/pgAnomalies:PgAnomalies", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPgAnomalies gets an existing PgAnomalies resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPgAnomalies(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PgAnomaliesState, opts ...pulumi.ResourceOption) (*PgAnomalies, error) {
	var resource PgAnomalies
	err := ctx.ReadResource("dynatrace:index/pgAnomalies:PgAnomalies", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PgAnomalies resources.
type pgAnomaliesState struct {
	// Configuration of the availability monitoring for the process group.
	Availability *PgAnomaliesAvailability `pulumi:"availability"`
	// The ID of the process group
	PgId *string `pulumi:"pgId"`
}

type PgAnomaliesState struct {
	// Configuration of the availability monitoring for the process group.
	Availability PgAnomaliesAvailabilityPtrInput
	// The ID of the process group
	PgId pulumi.StringPtrInput
}

func (PgAnomaliesState) ElementType() reflect.Type {
	return reflect.TypeOf((*pgAnomaliesState)(nil)).Elem()
}

type pgAnomaliesArgs struct {
	// Configuration of the availability monitoring for the process group.
	Availability *PgAnomaliesAvailability `pulumi:"availability"`
	// The ID of the process group
	PgId string `pulumi:"pgId"`
}

// The set of arguments for constructing a PgAnomalies resource.
type PgAnomaliesArgs struct {
	// Configuration of the availability monitoring for the process group.
	Availability PgAnomaliesAvailabilityPtrInput
	// The ID of the process group
	PgId pulumi.StringInput
}

func (PgAnomaliesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pgAnomaliesArgs)(nil)).Elem()
}

type PgAnomaliesInput interface {
	pulumi.Input

	ToPgAnomaliesOutput() PgAnomaliesOutput
	ToPgAnomaliesOutputWithContext(ctx context.Context) PgAnomaliesOutput
}

func (*PgAnomalies) ElementType() reflect.Type {
	return reflect.TypeOf((**PgAnomalies)(nil)).Elem()
}

func (i *PgAnomalies) ToPgAnomaliesOutput() PgAnomaliesOutput {
	return i.ToPgAnomaliesOutputWithContext(context.Background())
}

func (i *PgAnomalies) ToPgAnomaliesOutputWithContext(ctx context.Context) PgAnomaliesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgAnomaliesOutput)
}

// PgAnomaliesArrayInput is an input type that accepts PgAnomaliesArray and PgAnomaliesArrayOutput values.
// You can construct a concrete instance of `PgAnomaliesArrayInput` via:
//
//	PgAnomaliesArray{ PgAnomaliesArgs{...} }
type PgAnomaliesArrayInput interface {
	pulumi.Input

	ToPgAnomaliesArrayOutput() PgAnomaliesArrayOutput
	ToPgAnomaliesArrayOutputWithContext(context.Context) PgAnomaliesArrayOutput
}

type PgAnomaliesArray []PgAnomaliesInput

func (PgAnomaliesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PgAnomalies)(nil)).Elem()
}

func (i PgAnomaliesArray) ToPgAnomaliesArrayOutput() PgAnomaliesArrayOutput {
	return i.ToPgAnomaliesArrayOutputWithContext(context.Background())
}

func (i PgAnomaliesArray) ToPgAnomaliesArrayOutputWithContext(ctx context.Context) PgAnomaliesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgAnomaliesArrayOutput)
}

// PgAnomaliesMapInput is an input type that accepts PgAnomaliesMap and PgAnomaliesMapOutput values.
// You can construct a concrete instance of `PgAnomaliesMapInput` via:
//
//	PgAnomaliesMap{ "key": PgAnomaliesArgs{...} }
type PgAnomaliesMapInput interface {
	pulumi.Input

	ToPgAnomaliesMapOutput() PgAnomaliesMapOutput
	ToPgAnomaliesMapOutputWithContext(context.Context) PgAnomaliesMapOutput
}

type PgAnomaliesMap map[string]PgAnomaliesInput

func (PgAnomaliesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PgAnomalies)(nil)).Elem()
}

func (i PgAnomaliesMap) ToPgAnomaliesMapOutput() PgAnomaliesMapOutput {
	return i.ToPgAnomaliesMapOutputWithContext(context.Background())
}

func (i PgAnomaliesMap) ToPgAnomaliesMapOutputWithContext(ctx context.Context) PgAnomaliesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgAnomaliesMapOutput)
}

type PgAnomaliesOutput struct{ *pulumi.OutputState }

func (PgAnomaliesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PgAnomalies)(nil)).Elem()
}

func (o PgAnomaliesOutput) ToPgAnomaliesOutput() PgAnomaliesOutput {
	return o
}

func (o PgAnomaliesOutput) ToPgAnomaliesOutputWithContext(ctx context.Context) PgAnomaliesOutput {
	return o
}

// Configuration of the availability monitoring for the process group.
func (o PgAnomaliesOutput) Availability() PgAnomaliesAvailabilityPtrOutput {
	return o.ApplyT(func(v *PgAnomalies) PgAnomaliesAvailabilityPtrOutput { return v.Availability }).(PgAnomaliesAvailabilityPtrOutput)
}

// The ID of the process group
func (o PgAnomaliesOutput) PgId() pulumi.StringOutput {
	return o.ApplyT(func(v *PgAnomalies) pulumi.StringOutput { return v.PgId }).(pulumi.StringOutput)
}

type PgAnomaliesArrayOutput struct{ *pulumi.OutputState }

func (PgAnomaliesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PgAnomalies)(nil)).Elem()
}

func (o PgAnomaliesArrayOutput) ToPgAnomaliesArrayOutput() PgAnomaliesArrayOutput {
	return o
}

func (o PgAnomaliesArrayOutput) ToPgAnomaliesArrayOutputWithContext(ctx context.Context) PgAnomaliesArrayOutput {
	return o
}

func (o PgAnomaliesArrayOutput) Index(i pulumi.IntInput) PgAnomaliesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PgAnomalies {
		return vs[0].([]*PgAnomalies)[vs[1].(int)]
	}).(PgAnomaliesOutput)
}

type PgAnomaliesMapOutput struct{ *pulumi.OutputState }

func (PgAnomaliesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PgAnomalies)(nil)).Elem()
}

func (o PgAnomaliesMapOutput) ToPgAnomaliesMapOutput() PgAnomaliesMapOutput {
	return o
}

func (o PgAnomaliesMapOutput) ToPgAnomaliesMapOutputWithContext(ctx context.Context) PgAnomaliesMapOutput {
	return o
}

func (o PgAnomaliesMapOutput) MapIndex(k pulumi.StringInput) PgAnomaliesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PgAnomalies {
		return vs[0].(map[string]*PgAnomalies)[vs[1].(string)]
	}).(PgAnomaliesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PgAnomaliesInput)(nil)).Elem(), &PgAnomalies{})
	pulumi.RegisterInputType(reflect.TypeOf((*PgAnomaliesArrayInput)(nil)).Elem(), PgAnomaliesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PgAnomaliesMapInput)(nil)).Elem(), PgAnomaliesMap{})
	pulumi.RegisterOutputType(PgAnomaliesOutput{})
	pulumi.RegisterOutputType(PgAnomaliesArrayOutput{})
	pulumi.RegisterOutputType(PgAnomaliesMapOutput{})
}
