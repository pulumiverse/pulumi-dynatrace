// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type DavisAnomalyDetectors struct {
	pulumi.CustomResourceState

	// Analyzer input
	Analyzer DavisAnomalyDetectorsAnalyzerOutput `pulumi:"analyzer"`
	// The description of the anomaly detector
	Description pulumi.StringOutput `pulumi:"description"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Event template
	EventTemplate DavisAnomalyDetectorsEventTemplateOutput `pulumi:"eventTemplate"`
	// Execution settings
	ExecutionSettings DavisAnomalyDetectorsExecutionSettingsOutput `pulumi:"executionSettings"`
	// Source
	Source pulumi.StringOutput `pulumi:"source"`
	// The title of the anomaly detector
	Title pulumi.StringOutput `pulumi:"title"`
}

// NewDavisAnomalyDetectors registers a new resource with the given unique name, arguments, and options.
func NewDavisAnomalyDetectors(ctx *pulumi.Context,
	name string, args *DavisAnomalyDetectorsArgs, opts ...pulumi.ResourceOption) (*DavisAnomalyDetectors, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Analyzer == nil {
		return nil, errors.New("invalid value for required argument 'Analyzer'")
	}
	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.EventTemplate == nil {
		return nil, errors.New("invalid value for required argument 'EventTemplate'")
	}
	if args.ExecutionSettings == nil {
		return nil, errors.New("invalid value for required argument 'ExecutionSettings'")
	}
	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DavisAnomalyDetectors
	err := ctx.RegisterResource("dynatrace:index/davisAnomalyDetectors:DavisAnomalyDetectors", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDavisAnomalyDetectors gets an existing DavisAnomalyDetectors resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDavisAnomalyDetectors(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DavisAnomalyDetectorsState, opts ...pulumi.ResourceOption) (*DavisAnomalyDetectors, error) {
	var resource DavisAnomalyDetectors
	err := ctx.ReadResource("dynatrace:index/davisAnomalyDetectors:DavisAnomalyDetectors", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DavisAnomalyDetectors resources.
type davisAnomalyDetectorsState struct {
	// Analyzer input
	Analyzer *DavisAnomalyDetectorsAnalyzer `pulumi:"analyzer"`
	// The description of the anomaly detector
	Description *string `pulumi:"description"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// Event template
	EventTemplate *DavisAnomalyDetectorsEventTemplate `pulumi:"eventTemplate"`
	// Execution settings
	ExecutionSettings *DavisAnomalyDetectorsExecutionSettings `pulumi:"executionSettings"`
	// Source
	Source *string `pulumi:"source"`
	// The title of the anomaly detector
	Title *string `pulumi:"title"`
}

type DavisAnomalyDetectorsState struct {
	// Analyzer input
	Analyzer DavisAnomalyDetectorsAnalyzerPtrInput
	// The description of the anomaly detector
	Description pulumi.StringPtrInput
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// Event template
	EventTemplate DavisAnomalyDetectorsEventTemplatePtrInput
	// Execution settings
	ExecutionSettings DavisAnomalyDetectorsExecutionSettingsPtrInput
	// Source
	Source pulumi.StringPtrInput
	// The title of the anomaly detector
	Title pulumi.StringPtrInput
}

func (DavisAnomalyDetectorsState) ElementType() reflect.Type {
	return reflect.TypeOf((*davisAnomalyDetectorsState)(nil)).Elem()
}

type davisAnomalyDetectorsArgs struct {
	// Analyzer input
	Analyzer DavisAnomalyDetectorsAnalyzer `pulumi:"analyzer"`
	// The description of the anomaly detector
	Description string `pulumi:"description"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// Event template
	EventTemplate DavisAnomalyDetectorsEventTemplate `pulumi:"eventTemplate"`
	// Execution settings
	ExecutionSettings DavisAnomalyDetectorsExecutionSettings `pulumi:"executionSettings"`
	// Source
	Source string `pulumi:"source"`
	// The title of the anomaly detector
	Title string `pulumi:"title"`
}

// The set of arguments for constructing a DavisAnomalyDetectors resource.
type DavisAnomalyDetectorsArgs struct {
	// Analyzer input
	Analyzer DavisAnomalyDetectorsAnalyzerInput
	// The description of the anomaly detector
	Description pulumi.StringInput
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// Event template
	EventTemplate DavisAnomalyDetectorsEventTemplateInput
	// Execution settings
	ExecutionSettings DavisAnomalyDetectorsExecutionSettingsInput
	// Source
	Source pulumi.StringInput
	// The title of the anomaly detector
	Title pulumi.StringInput
}

func (DavisAnomalyDetectorsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*davisAnomalyDetectorsArgs)(nil)).Elem()
}

type DavisAnomalyDetectorsInput interface {
	pulumi.Input

	ToDavisAnomalyDetectorsOutput() DavisAnomalyDetectorsOutput
	ToDavisAnomalyDetectorsOutputWithContext(ctx context.Context) DavisAnomalyDetectorsOutput
}

func (*DavisAnomalyDetectors) ElementType() reflect.Type {
	return reflect.TypeOf((**DavisAnomalyDetectors)(nil)).Elem()
}

func (i *DavisAnomalyDetectors) ToDavisAnomalyDetectorsOutput() DavisAnomalyDetectorsOutput {
	return i.ToDavisAnomalyDetectorsOutputWithContext(context.Background())
}

func (i *DavisAnomalyDetectors) ToDavisAnomalyDetectorsOutputWithContext(ctx context.Context) DavisAnomalyDetectorsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DavisAnomalyDetectorsOutput)
}

// DavisAnomalyDetectorsArrayInput is an input type that accepts DavisAnomalyDetectorsArray and DavisAnomalyDetectorsArrayOutput values.
// You can construct a concrete instance of `DavisAnomalyDetectorsArrayInput` via:
//
//	DavisAnomalyDetectorsArray{ DavisAnomalyDetectorsArgs{...} }
type DavisAnomalyDetectorsArrayInput interface {
	pulumi.Input

	ToDavisAnomalyDetectorsArrayOutput() DavisAnomalyDetectorsArrayOutput
	ToDavisAnomalyDetectorsArrayOutputWithContext(context.Context) DavisAnomalyDetectorsArrayOutput
}

type DavisAnomalyDetectorsArray []DavisAnomalyDetectorsInput

func (DavisAnomalyDetectorsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DavisAnomalyDetectors)(nil)).Elem()
}

func (i DavisAnomalyDetectorsArray) ToDavisAnomalyDetectorsArrayOutput() DavisAnomalyDetectorsArrayOutput {
	return i.ToDavisAnomalyDetectorsArrayOutputWithContext(context.Background())
}

func (i DavisAnomalyDetectorsArray) ToDavisAnomalyDetectorsArrayOutputWithContext(ctx context.Context) DavisAnomalyDetectorsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DavisAnomalyDetectorsArrayOutput)
}

// DavisAnomalyDetectorsMapInput is an input type that accepts DavisAnomalyDetectorsMap and DavisAnomalyDetectorsMapOutput values.
// You can construct a concrete instance of `DavisAnomalyDetectorsMapInput` via:
//
//	DavisAnomalyDetectorsMap{ "key": DavisAnomalyDetectorsArgs{...} }
type DavisAnomalyDetectorsMapInput interface {
	pulumi.Input

	ToDavisAnomalyDetectorsMapOutput() DavisAnomalyDetectorsMapOutput
	ToDavisAnomalyDetectorsMapOutputWithContext(context.Context) DavisAnomalyDetectorsMapOutput
}

type DavisAnomalyDetectorsMap map[string]DavisAnomalyDetectorsInput

func (DavisAnomalyDetectorsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DavisAnomalyDetectors)(nil)).Elem()
}

func (i DavisAnomalyDetectorsMap) ToDavisAnomalyDetectorsMapOutput() DavisAnomalyDetectorsMapOutput {
	return i.ToDavisAnomalyDetectorsMapOutputWithContext(context.Background())
}

func (i DavisAnomalyDetectorsMap) ToDavisAnomalyDetectorsMapOutputWithContext(ctx context.Context) DavisAnomalyDetectorsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DavisAnomalyDetectorsMapOutput)
}

type DavisAnomalyDetectorsOutput struct{ *pulumi.OutputState }

func (DavisAnomalyDetectorsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DavisAnomalyDetectors)(nil)).Elem()
}

func (o DavisAnomalyDetectorsOutput) ToDavisAnomalyDetectorsOutput() DavisAnomalyDetectorsOutput {
	return o
}

func (o DavisAnomalyDetectorsOutput) ToDavisAnomalyDetectorsOutputWithContext(ctx context.Context) DavisAnomalyDetectorsOutput {
	return o
}

// Analyzer input
func (o DavisAnomalyDetectorsOutput) Analyzer() DavisAnomalyDetectorsAnalyzerOutput {
	return o.ApplyT(func(v *DavisAnomalyDetectors) DavisAnomalyDetectorsAnalyzerOutput { return v.Analyzer }).(DavisAnomalyDetectorsAnalyzerOutput)
}

// The description of the anomaly detector
func (o DavisAnomalyDetectorsOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *DavisAnomalyDetectors) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// This setting is enabled (`true`) or disabled (`false`)
func (o DavisAnomalyDetectorsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *DavisAnomalyDetectors) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Event template
func (o DavisAnomalyDetectorsOutput) EventTemplate() DavisAnomalyDetectorsEventTemplateOutput {
	return o.ApplyT(func(v *DavisAnomalyDetectors) DavisAnomalyDetectorsEventTemplateOutput { return v.EventTemplate }).(DavisAnomalyDetectorsEventTemplateOutput)
}

// Execution settings
func (o DavisAnomalyDetectorsOutput) ExecutionSettings() DavisAnomalyDetectorsExecutionSettingsOutput {
	return o.ApplyT(func(v *DavisAnomalyDetectors) DavisAnomalyDetectorsExecutionSettingsOutput {
		return v.ExecutionSettings
	}).(DavisAnomalyDetectorsExecutionSettingsOutput)
}

// Source
func (o DavisAnomalyDetectorsOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v *DavisAnomalyDetectors) pulumi.StringOutput { return v.Source }).(pulumi.StringOutput)
}

// The title of the anomaly detector
func (o DavisAnomalyDetectorsOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *DavisAnomalyDetectors) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

type DavisAnomalyDetectorsArrayOutput struct{ *pulumi.OutputState }

func (DavisAnomalyDetectorsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DavisAnomalyDetectors)(nil)).Elem()
}

func (o DavisAnomalyDetectorsArrayOutput) ToDavisAnomalyDetectorsArrayOutput() DavisAnomalyDetectorsArrayOutput {
	return o
}

func (o DavisAnomalyDetectorsArrayOutput) ToDavisAnomalyDetectorsArrayOutputWithContext(ctx context.Context) DavisAnomalyDetectorsArrayOutput {
	return o
}

func (o DavisAnomalyDetectorsArrayOutput) Index(i pulumi.IntInput) DavisAnomalyDetectorsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DavisAnomalyDetectors {
		return vs[0].([]*DavisAnomalyDetectors)[vs[1].(int)]
	}).(DavisAnomalyDetectorsOutput)
}

type DavisAnomalyDetectorsMapOutput struct{ *pulumi.OutputState }

func (DavisAnomalyDetectorsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DavisAnomalyDetectors)(nil)).Elem()
}

func (o DavisAnomalyDetectorsMapOutput) ToDavisAnomalyDetectorsMapOutput() DavisAnomalyDetectorsMapOutput {
	return o
}

func (o DavisAnomalyDetectorsMapOutput) ToDavisAnomalyDetectorsMapOutputWithContext(ctx context.Context) DavisAnomalyDetectorsMapOutput {
	return o
}

func (o DavisAnomalyDetectorsMapOutput) MapIndex(k pulumi.StringInput) DavisAnomalyDetectorsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DavisAnomalyDetectors {
		return vs[0].(map[string]*DavisAnomalyDetectors)[vs[1].(string)]
	}).(DavisAnomalyDetectorsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DavisAnomalyDetectorsInput)(nil)).Elem(), &DavisAnomalyDetectors{})
	pulumi.RegisterInputType(reflect.TypeOf((*DavisAnomalyDetectorsArrayInput)(nil)).Elem(), DavisAnomalyDetectorsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DavisAnomalyDetectorsMapInput)(nil)).Elem(), DavisAnomalyDetectorsMap{})
	pulumi.RegisterOutputType(DavisAnomalyDetectorsOutput{})
	pulumi.RegisterOutputType(DavisAnomalyDetectorsArrayOutput{})
	pulumi.RegisterOutputType(DavisAnomalyDetectorsMapOutput{})
}
