// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OpenpipelineV2MetricsIngestsources struct {
	pulumi.CustomResourceState

	// Default Bucket
	DefaultBucket pulumi.StringPtrOutput `pulumi:"defaultBucket"`
	// Endpoint display name
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Endpoint segment
	PathSegment pulumi.StringOutput `pulumi:"pathSegment"`
	// Processing stage
	Processing OpenpipelineV2MetricsIngestsourcesProcessingOutput `pulumi:"processing"`
	// Static routing of endpoint
	StaticRouting OpenpipelineV2MetricsIngestsourcesStaticRoutingPtrOutput `pulumi:"staticRouting"`
}

// NewOpenpipelineV2MetricsIngestsources registers a new resource with the given unique name, arguments, and options.
func NewOpenpipelineV2MetricsIngestsources(ctx *pulumi.Context,
	name string, args *OpenpipelineV2MetricsIngestsourcesArgs, opts ...pulumi.ResourceOption) (*OpenpipelineV2MetricsIngestsources, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.PathSegment == nil {
		return nil, errors.New("invalid value for required argument 'PathSegment'")
	}
	if args.Processing == nil {
		return nil, errors.New("invalid value for required argument 'Processing'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenpipelineV2MetricsIngestsources
	err := ctx.RegisterResource("dynatrace:index/openpipelineV2MetricsIngestsources:OpenpipelineV2MetricsIngestsources", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenpipelineV2MetricsIngestsources gets an existing OpenpipelineV2MetricsIngestsources resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenpipelineV2MetricsIngestsources(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenpipelineV2MetricsIngestsourcesState, opts ...pulumi.ResourceOption) (*OpenpipelineV2MetricsIngestsources, error) {
	var resource OpenpipelineV2MetricsIngestsources
	err := ctx.ReadResource("dynatrace:index/openpipelineV2MetricsIngestsources:OpenpipelineV2MetricsIngestsources", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenpipelineV2MetricsIngestsources resources.
type openpipelineV2MetricsIngestsourcesState struct {
	// Default Bucket
	DefaultBucket *string `pulumi:"defaultBucket"`
	// Endpoint display name
	DisplayName *string `pulumi:"displayName"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// Endpoint segment
	PathSegment *string `pulumi:"pathSegment"`
	// Processing stage
	Processing *OpenpipelineV2MetricsIngestsourcesProcessing `pulumi:"processing"`
	// Static routing of endpoint
	StaticRouting *OpenpipelineV2MetricsIngestsourcesStaticRouting `pulumi:"staticRouting"`
}

type OpenpipelineV2MetricsIngestsourcesState struct {
	// Default Bucket
	DefaultBucket pulumi.StringPtrInput
	// Endpoint display name
	DisplayName pulumi.StringPtrInput
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// Endpoint segment
	PathSegment pulumi.StringPtrInput
	// Processing stage
	Processing OpenpipelineV2MetricsIngestsourcesProcessingPtrInput
	// Static routing of endpoint
	StaticRouting OpenpipelineV2MetricsIngestsourcesStaticRoutingPtrInput
}

func (OpenpipelineV2MetricsIngestsourcesState) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2MetricsIngestsourcesState)(nil)).Elem()
}

type openpipelineV2MetricsIngestsourcesArgs struct {
	// Default Bucket
	DefaultBucket *string `pulumi:"defaultBucket"`
	// Endpoint display name
	DisplayName string `pulumi:"displayName"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// Endpoint segment
	PathSegment string `pulumi:"pathSegment"`
	// Processing stage
	Processing OpenpipelineV2MetricsIngestsourcesProcessing `pulumi:"processing"`
	// Static routing of endpoint
	StaticRouting *OpenpipelineV2MetricsIngestsourcesStaticRouting `pulumi:"staticRouting"`
}

// The set of arguments for constructing a OpenpipelineV2MetricsIngestsources resource.
type OpenpipelineV2MetricsIngestsourcesArgs struct {
	// Default Bucket
	DefaultBucket pulumi.StringPtrInput
	// Endpoint display name
	DisplayName pulumi.StringInput
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// Endpoint segment
	PathSegment pulumi.StringInput
	// Processing stage
	Processing OpenpipelineV2MetricsIngestsourcesProcessingInput
	// Static routing of endpoint
	StaticRouting OpenpipelineV2MetricsIngestsourcesStaticRoutingPtrInput
}

func (OpenpipelineV2MetricsIngestsourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2MetricsIngestsourcesArgs)(nil)).Elem()
}

type OpenpipelineV2MetricsIngestsourcesInput interface {
	pulumi.Input

	ToOpenpipelineV2MetricsIngestsourcesOutput() OpenpipelineV2MetricsIngestsourcesOutput
	ToOpenpipelineV2MetricsIngestsourcesOutputWithContext(ctx context.Context) OpenpipelineV2MetricsIngestsourcesOutput
}

func (*OpenpipelineV2MetricsIngestsources) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2MetricsIngestsources)(nil)).Elem()
}

func (i *OpenpipelineV2MetricsIngestsources) ToOpenpipelineV2MetricsIngestsourcesOutput() OpenpipelineV2MetricsIngestsourcesOutput {
	return i.ToOpenpipelineV2MetricsIngestsourcesOutputWithContext(context.Background())
}

func (i *OpenpipelineV2MetricsIngestsources) ToOpenpipelineV2MetricsIngestsourcesOutputWithContext(ctx context.Context) OpenpipelineV2MetricsIngestsourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2MetricsIngestsourcesOutput)
}

// OpenpipelineV2MetricsIngestsourcesArrayInput is an input type that accepts OpenpipelineV2MetricsIngestsourcesArray and OpenpipelineV2MetricsIngestsourcesArrayOutput values.
// You can construct a concrete instance of `OpenpipelineV2MetricsIngestsourcesArrayInput` via:
//
//	OpenpipelineV2MetricsIngestsourcesArray{ OpenpipelineV2MetricsIngestsourcesArgs{...} }
type OpenpipelineV2MetricsIngestsourcesArrayInput interface {
	pulumi.Input

	ToOpenpipelineV2MetricsIngestsourcesArrayOutput() OpenpipelineV2MetricsIngestsourcesArrayOutput
	ToOpenpipelineV2MetricsIngestsourcesArrayOutputWithContext(context.Context) OpenpipelineV2MetricsIngestsourcesArrayOutput
}

type OpenpipelineV2MetricsIngestsourcesArray []OpenpipelineV2MetricsIngestsourcesInput

func (OpenpipelineV2MetricsIngestsourcesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2MetricsIngestsources)(nil)).Elem()
}

func (i OpenpipelineV2MetricsIngestsourcesArray) ToOpenpipelineV2MetricsIngestsourcesArrayOutput() OpenpipelineV2MetricsIngestsourcesArrayOutput {
	return i.ToOpenpipelineV2MetricsIngestsourcesArrayOutputWithContext(context.Background())
}

func (i OpenpipelineV2MetricsIngestsourcesArray) ToOpenpipelineV2MetricsIngestsourcesArrayOutputWithContext(ctx context.Context) OpenpipelineV2MetricsIngestsourcesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2MetricsIngestsourcesArrayOutput)
}

// OpenpipelineV2MetricsIngestsourcesMapInput is an input type that accepts OpenpipelineV2MetricsIngestsourcesMap and OpenpipelineV2MetricsIngestsourcesMapOutput values.
// You can construct a concrete instance of `OpenpipelineV2MetricsIngestsourcesMapInput` via:
//
//	OpenpipelineV2MetricsIngestsourcesMap{ "key": OpenpipelineV2MetricsIngestsourcesArgs{...} }
type OpenpipelineV2MetricsIngestsourcesMapInput interface {
	pulumi.Input

	ToOpenpipelineV2MetricsIngestsourcesMapOutput() OpenpipelineV2MetricsIngestsourcesMapOutput
	ToOpenpipelineV2MetricsIngestsourcesMapOutputWithContext(context.Context) OpenpipelineV2MetricsIngestsourcesMapOutput
}

type OpenpipelineV2MetricsIngestsourcesMap map[string]OpenpipelineV2MetricsIngestsourcesInput

func (OpenpipelineV2MetricsIngestsourcesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2MetricsIngestsources)(nil)).Elem()
}

func (i OpenpipelineV2MetricsIngestsourcesMap) ToOpenpipelineV2MetricsIngestsourcesMapOutput() OpenpipelineV2MetricsIngestsourcesMapOutput {
	return i.ToOpenpipelineV2MetricsIngestsourcesMapOutputWithContext(context.Background())
}

func (i OpenpipelineV2MetricsIngestsourcesMap) ToOpenpipelineV2MetricsIngestsourcesMapOutputWithContext(ctx context.Context) OpenpipelineV2MetricsIngestsourcesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2MetricsIngestsourcesMapOutput)
}

type OpenpipelineV2MetricsIngestsourcesOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2MetricsIngestsourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2MetricsIngestsources)(nil)).Elem()
}

func (o OpenpipelineV2MetricsIngestsourcesOutput) ToOpenpipelineV2MetricsIngestsourcesOutput() OpenpipelineV2MetricsIngestsourcesOutput {
	return o
}

func (o OpenpipelineV2MetricsIngestsourcesOutput) ToOpenpipelineV2MetricsIngestsourcesOutputWithContext(ctx context.Context) OpenpipelineV2MetricsIngestsourcesOutput {
	return o
}

// Default Bucket
func (o OpenpipelineV2MetricsIngestsourcesOutput) DefaultBucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenpipelineV2MetricsIngestsources) pulumi.StringPtrOutput { return v.DefaultBucket }).(pulumi.StringPtrOutput)
}

// Endpoint display name
func (o OpenpipelineV2MetricsIngestsourcesOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenpipelineV2MetricsIngestsources) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// This setting is enabled (`true`) or disabled (`false`)
func (o OpenpipelineV2MetricsIngestsourcesOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *OpenpipelineV2MetricsIngestsources) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Endpoint segment
func (o OpenpipelineV2MetricsIngestsourcesOutput) PathSegment() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenpipelineV2MetricsIngestsources) pulumi.StringOutput { return v.PathSegment }).(pulumi.StringOutput)
}

// Processing stage
func (o OpenpipelineV2MetricsIngestsourcesOutput) Processing() OpenpipelineV2MetricsIngestsourcesProcessingOutput {
	return o.ApplyT(func(v *OpenpipelineV2MetricsIngestsources) OpenpipelineV2MetricsIngestsourcesProcessingOutput {
		return v.Processing
	}).(OpenpipelineV2MetricsIngestsourcesProcessingOutput)
}

// Static routing of endpoint
func (o OpenpipelineV2MetricsIngestsourcesOutput) StaticRouting() OpenpipelineV2MetricsIngestsourcesStaticRoutingPtrOutput {
	return o.ApplyT(func(v *OpenpipelineV2MetricsIngestsources) OpenpipelineV2MetricsIngestsourcesStaticRoutingPtrOutput {
		return v.StaticRouting
	}).(OpenpipelineV2MetricsIngestsourcesStaticRoutingPtrOutput)
}

type OpenpipelineV2MetricsIngestsourcesArrayOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2MetricsIngestsourcesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2MetricsIngestsources)(nil)).Elem()
}

func (o OpenpipelineV2MetricsIngestsourcesArrayOutput) ToOpenpipelineV2MetricsIngestsourcesArrayOutput() OpenpipelineV2MetricsIngestsourcesArrayOutput {
	return o
}

func (o OpenpipelineV2MetricsIngestsourcesArrayOutput) ToOpenpipelineV2MetricsIngestsourcesArrayOutputWithContext(ctx context.Context) OpenpipelineV2MetricsIngestsourcesArrayOutput {
	return o
}

func (o OpenpipelineV2MetricsIngestsourcesArrayOutput) Index(i pulumi.IntInput) OpenpipelineV2MetricsIngestsourcesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenpipelineV2MetricsIngestsources {
		return vs[0].([]*OpenpipelineV2MetricsIngestsources)[vs[1].(int)]
	}).(OpenpipelineV2MetricsIngestsourcesOutput)
}

type OpenpipelineV2MetricsIngestsourcesMapOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2MetricsIngestsourcesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2MetricsIngestsources)(nil)).Elem()
}

func (o OpenpipelineV2MetricsIngestsourcesMapOutput) ToOpenpipelineV2MetricsIngestsourcesMapOutput() OpenpipelineV2MetricsIngestsourcesMapOutput {
	return o
}

func (o OpenpipelineV2MetricsIngestsourcesMapOutput) ToOpenpipelineV2MetricsIngestsourcesMapOutputWithContext(ctx context.Context) OpenpipelineV2MetricsIngestsourcesMapOutput {
	return o
}

func (o OpenpipelineV2MetricsIngestsourcesMapOutput) MapIndex(k pulumi.StringInput) OpenpipelineV2MetricsIngestsourcesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenpipelineV2MetricsIngestsources {
		return vs[0].(map[string]*OpenpipelineV2MetricsIngestsources)[vs[1].(string)]
	}).(OpenpipelineV2MetricsIngestsourcesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2MetricsIngestsourcesInput)(nil)).Elem(), &OpenpipelineV2MetricsIngestsources{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2MetricsIngestsourcesArrayInput)(nil)).Elem(), OpenpipelineV2MetricsIngestsourcesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2MetricsIngestsourcesMapInput)(nil)).Elem(), OpenpipelineV2MetricsIngestsourcesMap{})
	pulumi.RegisterOutputType(OpenpipelineV2MetricsIngestsourcesOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2MetricsIngestsourcesArrayOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2MetricsIngestsourcesMapOutput{})
}
