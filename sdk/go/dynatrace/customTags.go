// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type CustomTags struct {
	pulumi.CustomResourceState

	// For internal use: current state of tags in JSON format
	CurrentState pulumi.StringOutput `pulumi:"currentState"`
	// Specifies the entities where you want to update tags
	EntitySelector pulumi.StringOutput `pulumi:"entitySelector"`
	// The number of monitored entities where the tags have been added.
	MatchedEntities pulumi.IntOutput `pulumi:"matchedEntities"`
	// Specifies the entities where you want to update tags
	Tags CustomTagsTagsOutput `pulumi:"tags"`
}

// NewCustomTags registers a new resource with the given unique name, arguments, and options.
func NewCustomTags(ctx *pulumi.Context,
	name string, args *CustomTagsArgs, opts ...pulumi.ResourceOption) (*CustomTags, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EntitySelector == nil {
		return nil, errors.New("invalid value for required argument 'EntitySelector'")
	}
	if args.Tags == nil {
		return nil, errors.New("invalid value for required argument 'Tags'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CustomTags
	err := ctx.RegisterResource("dynatrace:index/customTags:CustomTags", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCustomTags gets an existing CustomTags resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCustomTags(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CustomTagsState, opts ...pulumi.ResourceOption) (*CustomTags, error) {
	var resource CustomTags
	err := ctx.ReadResource("dynatrace:index/customTags:CustomTags", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CustomTags resources.
type customTagsState struct {
	// For internal use: current state of tags in JSON format
	CurrentState *string `pulumi:"currentState"`
	// Specifies the entities where you want to update tags
	EntitySelector *string `pulumi:"entitySelector"`
	// The number of monitored entities where the tags have been added.
	MatchedEntities *int `pulumi:"matchedEntities"`
	// Specifies the entities where you want to update tags
	Tags *CustomTagsTags `pulumi:"tags"`
}

type CustomTagsState struct {
	// For internal use: current state of tags in JSON format
	CurrentState pulumi.StringPtrInput
	// Specifies the entities where you want to update tags
	EntitySelector pulumi.StringPtrInput
	// The number of monitored entities where the tags have been added.
	MatchedEntities pulumi.IntPtrInput
	// Specifies the entities where you want to update tags
	Tags CustomTagsTagsPtrInput
}

func (CustomTagsState) ElementType() reflect.Type {
	return reflect.TypeOf((*customTagsState)(nil)).Elem()
}

type customTagsArgs struct {
	// For internal use: current state of tags in JSON format
	CurrentState *string `pulumi:"currentState"`
	// Specifies the entities where you want to update tags
	EntitySelector string `pulumi:"entitySelector"`
	// The number of monitored entities where the tags have been added.
	MatchedEntities *int `pulumi:"matchedEntities"`
	// Specifies the entities where you want to update tags
	Tags CustomTagsTags `pulumi:"tags"`
}

// The set of arguments for constructing a CustomTags resource.
type CustomTagsArgs struct {
	// For internal use: current state of tags in JSON format
	CurrentState pulumi.StringPtrInput
	// Specifies the entities where you want to update tags
	EntitySelector pulumi.StringInput
	// The number of monitored entities where the tags have been added.
	MatchedEntities pulumi.IntPtrInput
	// Specifies the entities where you want to update tags
	Tags CustomTagsTagsInput
}

func (CustomTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*customTagsArgs)(nil)).Elem()
}

type CustomTagsInput interface {
	pulumi.Input

	ToCustomTagsOutput() CustomTagsOutput
	ToCustomTagsOutputWithContext(ctx context.Context) CustomTagsOutput
}

func (*CustomTags) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomTags)(nil)).Elem()
}

func (i *CustomTags) ToCustomTagsOutput() CustomTagsOutput {
	return i.ToCustomTagsOutputWithContext(context.Background())
}

func (i *CustomTags) ToCustomTagsOutputWithContext(ctx context.Context) CustomTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomTagsOutput)
}

// CustomTagsArrayInput is an input type that accepts CustomTagsArray and CustomTagsArrayOutput values.
// You can construct a concrete instance of `CustomTagsArrayInput` via:
//
//	CustomTagsArray{ CustomTagsArgs{...} }
type CustomTagsArrayInput interface {
	pulumi.Input

	ToCustomTagsArrayOutput() CustomTagsArrayOutput
	ToCustomTagsArrayOutputWithContext(context.Context) CustomTagsArrayOutput
}

type CustomTagsArray []CustomTagsInput

func (CustomTagsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomTags)(nil)).Elem()
}

func (i CustomTagsArray) ToCustomTagsArrayOutput() CustomTagsArrayOutput {
	return i.ToCustomTagsArrayOutputWithContext(context.Background())
}

func (i CustomTagsArray) ToCustomTagsArrayOutputWithContext(ctx context.Context) CustomTagsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomTagsArrayOutput)
}

// CustomTagsMapInput is an input type that accepts CustomTagsMap and CustomTagsMapOutput values.
// You can construct a concrete instance of `CustomTagsMapInput` via:
//
//	CustomTagsMap{ "key": CustomTagsArgs{...} }
type CustomTagsMapInput interface {
	pulumi.Input

	ToCustomTagsMapOutput() CustomTagsMapOutput
	ToCustomTagsMapOutputWithContext(context.Context) CustomTagsMapOutput
}

type CustomTagsMap map[string]CustomTagsInput

func (CustomTagsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomTags)(nil)).Elem()
}

func (i CustomTagsMap) ToCustomTagsMapOutput() CustomTagsMapOutput {
	return i.ToCustomTagsMapOutputWithContext(context.Background())
}

func (i CustomTagsMap) ToCustomTagsMapOutputWithContext(ctx context.Context) CustomTagsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomTagsMapOutput)
}

type CustomTagsOutput struct{ *pulumi.OutputState }

func (CustomTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomTags)(nil)).Elem()
}

func (o CustomTagsOutput) ToCustomTagsOutput() CustomTagsOutput {
	return o
}

func (o CustomTagsOutput) ToCustomTagsOutputWithContext(ctx context.Context) CustomTagsOutput {
	return o
}

// For internal use: current state of tags in JSON format
func (o CustomTagsOutput) CurrentState() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomTags) pulumi.StringOutput { return v.CurrentState }).(pulumi.StringOutput)
}

// Specifies the entities where you want to update tags
func (o CustomTagsOutput) EntitySelector() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomTags) pulumi.StringOutput { return v.EntitySelector }).(pulumi.StringOutput)
}

// The number of monitored entities where the tags have been added.
func (o CustomTagsOutput) MatchedEntities() pulumi.IntOutput {
	return o.ApplyT(func(v *CustomTags) pulumi.IntOutput { return v.MatchedEntities }).(pulumi.IntOutput)
}

// Specifies the entities where you want to update tags
func (o CustomTagsOutput) Tags() CustomTagsTagsOutput {
	return o.ApplyT(func(v *CustomTags) CustomTagsTagsOutput { return v.Tags }).(CustomTagsTagsOutput)
}

type CustomTagsArrayOutput struct{ *pulumi.OutputState }

func (CustomTagsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomTags)(nil)).Elem()
}

func (o CustomTagsArrayOutput) ToCustomTagsArrayOutput() CustomTagsArrayOutput {
	return o
}

func (o CustomTagsArrayOutput) ToCustomTagsArrayOutputWithContext(ctx context.Context) CustomTagsArrayOutput {
	return o
}

func (o CustomTagsArrayOutput) Index(i pulumi.IntInput) CustomTagsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CustomTags {
		return vs[0].([]*CustomTags)[vs[1].(int)]
	}).(CustomTagsOutput)
}

type CustomTagsMapOutput struct{ *pulumi.OutputState }

func (CustomTagsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomTags)(nil)).Elem()
}

func (o CustomTagsMapOutput) ToCustomTagsMapOutput() CustomTagsMapOutput {
	return o
}

func (o CustomTagsMapOutput) ToCustomTagsMapOutputWithContext(ctx context.Context) CustomTagsMapOutput {
	return o
}

func (o CustomTagsMapOutput) MapIndex(k pulumi.StringInput) CustomTagsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CustomTags {
		return vs[0].(map[string]*CustomTags)[vs[1].(string)]
	}).(CustomTagsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CustomTagsInput)(nil)).Elem(), &CustomTags{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomTagsArrayInput)(nil)).Elem(), CustomTagsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomTagsMapInput)(nil)).Elem(), CustomTagsMap{})
	pulumi.RegisterOutputType(CustomTagsOutput{})
	pulumi.RegisterOutputType(CustomTagsArrayOutput{})
	pulumi.RegisterOutputType(CustomTagsMapOutput{})
}
