// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type SyntheticAvailability struct {
	pulumi.CustomResourceState

	// Exclude periods with maintenance windows from availability calculation
	ExcludeMaintenanceWindows pulumi.BoolOutput `pulumi:"excludeMaintenanceWindows"`
}

// NewSyntheticAvailability registers a new resource with the given unique name, arguments, and options.
func NewSyntheticAvailability(ctx *pulumi.Context,
	name string, args *SyntheticAvailabilityArgs, opts ...pulumi.ResourceOption) (*SyntheticAvailability, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExcludeMaintenanceWindows == nil {
		return nil, errors.New("invalid value for required argument 'ExcludeMaintenanceWindows'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SyntheticAvailability
	err := ctx.RegisterResource("dynatrace:index/syntheticAvailability:SyntheticAvailability", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSyntheticAvailability gets an existing SyntheticAvailability resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSyntheticAvailability(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SyntheticAvailabilityState, opts ...pulumi.ResourceOption) (*SyntheticAvailability, error) {
	var resource SyntheticAvailability
	err := ctx.ReadResource("dynatrace:index/syntheticAvailability:SyntheticAvailability", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SyntheticAvailability resources.
type syntheticAvailabilityState struct {
	// Exclude periods with maintenance windows from availability calculation
	ExcludeMaintenanceWindows *bool `pulumi:"excludeMaintenanceWindows"`
}

type SyntheticAvailabilityState struct {
	// Exclude periods with maintenance windows from availability calculation
	ExcludeMaintenanceWindows pulumi.BoolPtrInput
}

func (SyntheticAvailabilityState) ElementType() reflect.Type {
	return reflect.TypeOf((*syntheticAvailabilityState)(nil)).Elem()
}

type syntheticAvailabilityArgs struct {
	// Exclude periods with maintenance windows from availability calculation
	ExcludeMaintenanceWindows bool `pulumi:"excludeMaintenanceWindows"`
}

// The set of arguments for constructing a SyntheticAvailability resource.
type SyntheticAvailabilityArgs struct {
	// Exclude periods with maintenance windows from availability calculation
	ExcludeMaintenanceWindows pulumi.BoolInput
}

func (SyntheticAvailabilityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*syntheticAvailabilityArgs)(nil)).Elem()
}

type SyntheticAvailabilityInput interface {
	pulumi.Input

	ToSyntheticAvailabilityOutput() SyntheticAvailabilityOutput
	ToSyntheticAvailabilityOutputWithContext(ctx context.Context) SyntheticAvailabilityOutput
}

func (*SyntheticAvailability) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticAvailability)(nil)).Elem()
}

func (i *SyntheticAvailability) ToSyntheticAvailabilityOutput() SyntheticAvailabilityOutput {
	return i.ToSyntheticAvailabilityOutputWithContext(context.Background())
}

func (i *SyntheticAvailability) ToSyntheticAvailabilityOutputWithContext(ctx context.Context) SyntheticAvailabilityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticAvailabilityOutput)
}

// SyntheticAvailabilityArrayInput is an input type that accepts SyntheticAvailabilityArray and SyntheticAvailabilityArrayOutput values.
// You can construct a concrete instance of `SyntheticAvailabilityArrayInput` via:
//
//	SyntheticAvailabilityArray{ SyntheticAvailabilityArgs{...} }
type SyntheticAvailabilityArrayInput interface {
	pulumi.Input

	ToSyntheticAvailabilityArrayOutput() SyntheticAvailabilityArrayOutput
	ToSyntheticAvailabilityArrayOutputWithContext(context.Context) SyntheticAvailabilityArrayOutput
}

type SyntheticAvailabilityArray []SyntheticAvailabilityInput

func (SyntheticAvailabilityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SyntheticAvailability)(nil)).Elem()
}

func (i SyntheticAvailabilityArray) ToSyntheticAvailabilityArrayOutput() SyntheticAvailabilityArrayOutput {
	return i.ToSyntheticAvailabilityArrayOutputWithContext(context.Background())
}

func (i SyntheticAvailabilityArray) ToSyntheticAvailabilityArrayOutputWithContext(ctx context.Context) SyntheticAvailabilityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticAvailabilityArrayOutput)
}

// SyntheticAvailabilityMapInput is an input type that accepts SyntheticAvailabilityMap and SyntheticAvailabilityMapOutput values.
// You can construct a concrete instance of `SyntheticAvailabilityMapInput` via:
//
//	SyntheticAvailabilityMap{ "key": SyntheticAvailabilityArgs{...} }
type SyntheticAvailabilityMapInput interface {
	pulumi.Input

	ToSyntheticAvailabilityMapOutput() SyntheticAvailabilityMapOutput
	ToSyntheticAvailabilityMapOutputWithContext(context.Context) SyntheticAvailabilityMapOutput
}

type SyntheticAvailabilityMap map[string]SyntheticAvailabilityInput

func (SyntheticAvailabilityMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SyntheticAvailability)(nil)).Elem()
}

func (i SyntheticAvailabilityMap) ToSyntheticAvailabilityMapOutput() SyntheticAvailabilityMapOutput {
	return i.ToSyntheticAvailabilityMapOutputWithContext(context.Background())
}

func (i SyntheticAvailabilityMap) ToSyntheticAvailabilityMapOutputWithContext(ctx context.Context) SyntheticAvailabilityMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticAvailabilityMapOutput)
}

type SyntheticAvailabilityOutput struct{ *pulumi.OutputState }

func (SyntheticAvailabilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticAvailability)(nil)).Elem()
}

func (o SyntheticAvailabilityOutput) ToSyntheticAvailabilityOutput() SyntheticAvailabilityOutput {
	return o
}

func (o SyntheticAvailabilityOutput) ToSyntheticAvailabilityOutputWithContext(ctx context.Context) SyntheticAvailabilityOutput {
	return o
}

// Exclude periods with maintenance windows from availability calculation
func (o SyntheticAvailabilityOutput) ExcludeMaintenanceWindows() pulumi.BoolOutput {
	return o.ApplyT(func(v *SyntheticAvailability) pulumi.BoolOutput { return v.ExcludeMaintenanceWindows }).(pulumi.BoolOutput)
}

type SyntheticAvailabilityArrayOutput struct{ *pulumi.OutputState }

func (SyntheticAvailabilityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SyntheticAvailability)(nil)).Elem()
}

func (o SyntheticAvailabilityArrayOutput) ToSyntheticAvailabilityArrayOutput() SyntheticAvailabilityArrayOutput {
	return o
}

func (o SyntheticAvailabilityArrayOutput) ToSyntheticAvailabilityArrayOutputWithContext(ctx context.Context) SyntheticAvailabilityArrayOutput {
	return o
}

func (o SyntheticAvailabilityArrayOutput) Index(i pulumi.IntInput) SyntheticAvailabilityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SyntheticAvailability {
		return vs[0].([]*SyntheticAvailability)[vs[1].(int)]
	}).(SyntheticAvailabilityOutput)
}

type SyntheticAvailabilityMapOutput struct{ *pulumi.OutputState }

func (SyntheticAvailabilityMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SyntheticAvailability)(nil)).Elem()
}

func (o SyntheticAvailabilityMapOutput) ToSyntheticAvailabilityMapOutput() SyntheticAvailabilityMapOutput {
	return o
}

func (o SyntheticAvailabilityMapOutput) ToSyntheticAvailabilityMapOutputWithContext(ctx context.Context) SyntheticAvailabilityMapOutput {
	return o
}

func (o SyntheticAvailabilityMapOutput) MapIndex(k pulumi.StringInput) SyntheticAvailabilityOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SyntheticAvailability {
		return vs[0].(map[string]*SyntheticAvailability)[vs[1].(string)]
	}).(SyntheticAvailabilityOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticAvailabilityInput)(nil)).Elem(), &SyntheticAvailability{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticAvailabilityArrayInput)(nil)).Elem(), SyntheticAvailabilityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticAvailabilityMapInput)(nil)).Elem(), SyntheticAvailabilityMap{})
	pulumi.RegisterOutputType(SyntheticAvailabilityOutput{})
	pulumi.RegisterOutputType(SyntheticAvailabilityArrayOutput{})
	pulumi.RegisterOutputType(SyntheticAvailabilityMapOutput{})
}
