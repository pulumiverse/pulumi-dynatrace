// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type LimitOutboundConnections struct {
	pulumi.CustomResourceState

	// no documentation available
	AllowedOutboundConnections LimitOutboundConnectionsAllowedOutboundConnectionsOutput `pulumi:"allowedOutboundConnections"`
}

// NewLimitOutboundConnections registers a new resource with the given unique name, arguments, and options.
func NewLimitOutboundConnections(ctx *pulumi.Context,
	name string, args *LimitOutboundConnectionsArgs, opts ...pulumi.ResourceOption) (*LimitOutboundConnections, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AllowedOutboundConnections == nil {
		return nil, errors.New("invalid value for required argument 'AllowedOutboundConnections'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LimitOutboundConnections
	err := ctx.RegisterResource("dynatrace:index/limitOutboundConnections:LimitOutboundConnections", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLimitOutboundConnections gets an existing LimitOutboundConnections resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLimitOutboundConnections(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LimitOutboundConnectionsState, opts ...pulumi.ResourceOption) (*LimitOutboundConnections, error) {
	var resource LimitOutboundConnections
	err := ctx.ReadResource("dynatrace:index/limitOutboundConnections:LimitOutboundConnections", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LimitOutboundConnections resources.
type limitOutboundConnectionsState struct {
	// no documentation available
	AllowedOutboundConnections *LimitOutboundConnectionsAllowedOutboundConnections `pulumi:"allowedOutboundConnections"`
}

type LimitOutboundConnectionsState struct {
	// no documentation available
	AllowedOutboundConnections LimitOutboundConnectionsAllowedOutboundConnectionsPtrInput
}

func (LimitOutboundConnectionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*limitOutboundConnectionsState)(nil)).Elem()
}

type limitOutboundConnectionsArgs struct {
	// no documentation available
	AllowedOutboundConnections LimitOutboundConnectionsAllowedOutboundConnections `pulumi:"allowedOutboundConnections"`
}

// The set of arguments for constructing a LimitOutboundConnections resource.
type LimitOutboundConnectionsArgs struct {
	// no documentation available
	AllowedOutboundConnections LimitOutboundConnectionsAllowedOutboundConnectionsInput
}

func (LimitOutboundConnectionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*limitOutboundConnectionsArgs)(nil)).Elem()
}

type LimitOutboundConnectionsInput interface {
	pulumi.Input

	ToLimitOutboundConnectionsOutput() LimitOutboundConnectionsOutput
	ToLimitOutboundConnectionsOutputWithContext(ctx context.Context) LimitOutboundConnectionsOutput
}

func (*LimitOutboundConnections) ElementType() reflect.Type {
	return reflect.TypeOf((**LimitOutboundConnections)(nil)).Elem()
}

func (i *LimitOutboundConnections) ToLimitOutboundConnectionsOutput() LimitOutboundConnectionsOutput {
	return i.ToLimitOutboundConnectionsOutputWithContext(context.Background())
}

func (i *LimitOutboundConnections) ToLimitOutboundConnectionsOutputWithContext(ctx context.Context) LimitOutboundConnectionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LimitOutboundConnectionsOutput)
}

// LimitOutboundConnectionsArrayInput is an input type that accepts LimitOutboundConnectionsArray and LimitOutboundConnectionsArrayOutput values.
// You can construct a concrete instance of `LimitOutboundConnectionsArrayInput` via:
//
//	LimitOutboundConnectionsArray{ LimitOutboundConnectionsArgs{...} }
type LimitOutboundConnectionsArrayInput interface {
	pulumi.Input

	ToLimitOutboundConnectionsArrayOutput() LimitOutboundConnectionsArrayOutput
	ToLimitOutboundConnectionsArrayOutputWithContext(context.Context) LimitOutboundConnectionsArrayOutput
}

type LimitOutboundConnectionsArray []LimitOutboundConnectionsInput

func (LimitOutboundConnectionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LimitOutboundConnections)(nil)).Elem()
}

func (i LimitOutboundConnectionsArray) ToLimitOutboundConnectionsArrayOutput() LimitOutboundConnectionsArrayOutput {
	return i.ToLimitOutboundConnectionsArrayOutputWithContext(context.Background())
}

func (i LimitOutboundConnectionsArray) ToLimitOutboundConnectionsArrayOutputWithContext(ctx context.Context) LimitOutboundConnectionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LimitOutboundConnectionsArrayOutput)
}

// LimitOutboundConnectionsMapInput is an input type that accepts LimitOutboundConnectionsMap and LimitOutboundConnectionsMapOutput values.
// You can construct a concrete instance of `LimitOutboundConnectionsMapInput` via:
//
//	LimitOutboundConnectionsMap{ "key": LimitOutboundConnectionsArgs{...} }
type LimitOutboundConnectionsMapInput interface {
	pulumi.Input

	ToLimitOutboundConnectionsMapOutput() LimitOutboundConnectionsMapOutput
	ToLimitOutboundConnectionsMapOutputWithContext(context.Context) LimitOutboundConnectionsMapOutput
}

type LimitOutboundConnectionsMap map[string]LimitOutboundConnectionsInput

func (LimitOutboundConnectionsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LimitOutboundConnections)(nil)).Elem()
}

func (i LimitOutboundConnectionsMap) ToLimitOutboundConnectionsMapOutput() LimitOutboundConnectionsMapOutput {
	return i.ToLimitOutboundConnectionsMapOutputWithContext(context.Background())
}

func (i LimitOutboundConnectionsMap) ToLimitOutboundConnectionsMapOutputWithContext(ctx context.Context) LimitOutboundConnectionsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LimitOutboundConnectionsMapOutput)
}

type LimitOutboundConnectionsOutput struct{ *pulumi.OutputState }

func (LimitOutboundConnectionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LimitOutboundConnections)(nil)).Elem()
}

func (o LimitOutboundConnectionsOutput) ToLimitOutboundConnectionsOutput() LimitOutboundConnectionsOutput {
	return o
}

func (o LimitOutboundConnectionsOutput) ToLimitOutboundConnectionsOutputWithContext(ctx context.Context) LimitOutboundConnectionsOutput {
	return o
}

// no documentation available
func (o LimitOutboundConnectionsOutput) AllowedOutboundConnections() LimitOutboundConnectionsAllowedOutboundConnectionsOutput {
	return o.ApplyT(func(v *LimitOutboundConnections) LimitOutboundConnectionsAllowedOutboundConnectionsOutput {
		return v.AllowedOutboundConnections
	}).(LimitOutboundConnectionsAllowedOutboundConnectionsOutput)
}

type LimitOutboundConnectionsArrayOutput struct{ *pulumi.OutputState }

func (LimitOutboundConnectionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LimitOutboundConnections)(nil)).Elem()
}

func (o LimitOutboundConnectionsArrayOutput) ToLimitOutboundConnectionsArrayOutput() LimitOutboundConnectionsArrayOutput {
	return o
}

func (o LimitOutboundConnectionsArrayOutput) ToLimitOutboundConnectionsArrayOutputWithContext(ctx context.Context) LimitOutboundConnectionsArrayOutput {
	return o
}

func (o LimitOutboundConnectionsArrayOutput) Index(i pulumi.IntInput) LimitOutboundConnectionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LimitOutboundConnections {
		return vs[0].([]*LimitOutboundConnections)[vs[1].(int)]
	}).(LimitOutboundConnectionsOutput)
}

type LimitOutboundConnectionsMapOutput struct{ *pulumi.OutputState }

func (LimitOutboundConnectionsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LimitOutboundConnections)(nil)).Elem()
}

func (o LimitOutboundConnectionsMapOutput) ToLimitOutboundConnectionsMapOutput() LimitOutboundConnectionsMapOutput {
	return o
}

func (o LimitOutboundConnectionsMapOutput) ToLimitOutboundConnectionsMapOutputWithContext(ctx context.Context) LimitOutboundConnectionsMapOutput {
	return o
}

func (o LimitOutboundConnectionsMapOutput) MapIndex(k pulumi.StringInput) LimitOutboundConnectionsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LimitOutboundConnections {
		return vs[0].(map[string]*LimitOutboundConnections)[vs[1].(string)]
	}).(LimitOutboundConnectionsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LimitOutboundConnectionsInput)(nil)).Elem(), &LimitOutboundConnections{})
	pulumi.RegisterInputType(reflect.TypeOf((*LimitOutboundConnectionsArrayInput)(nil)).Elem(), LimitOutboundConnectionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LimitOutboundConnectionsMapInput)(nil)).Elem(), LimitOutboundConnectionsMap{})
	pulumi.RegisterOutputType(LimitOutboundConnectionsOutput{})
	pulumi.RegisterOutputType(LimitOutboundConnectionsArrayOutput{})
	pulumi.RegisterOutputType(LimitOutboundConnectionsMapOutput{})
}
