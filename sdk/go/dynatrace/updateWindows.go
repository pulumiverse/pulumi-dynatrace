// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type UpdateWindows struct {
	pulumi.CustomResourceState

	// no documentation available
	DailyRecurrence UpdateWindowsDailyRecurrencePtrOutput `pulumi:"dailyRecurrence"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// no documentation available
	MonthlyRecurrence UpdateWindowsMonthlyRecurrencePtrOutput `pulumi:"monthlyRecurrence"`
	// Name
	Name pulumi.StringOutput `pulumi:"name"`
	// no documentation available
	OnceRecurrence UpdateWindowsOnceRecurrencePtrOutput `pulumi:"onceRecurrence"`
	// Possible Values: `MONTHLY`, `ONCE`, `DAILY`, `WEEKLY`
	Recurrence pulumi.StringOutput `pulumi:"recurrence"`
	// no documentation available
	WeeklyRecurrence UpdateWindowsWeeklyRecurrencePtrOutput `pulumi:"weeklyRecurrence"`
}

// NewUpdateWindows registers a new resource with the given unique name, arguments, and options.
func NewUpdateWindows(ctx *pulumi.Context,
	name string, args *UpdateWindowsArgs, opts ...pulumi.ResourceOption) (*UpdateWindows, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Recurrence == nil {
		return nil, errors.New("invalid value for required argument 'Recurrence'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UpdateWindows
	err := ctx.RegisterResource("dynatrace:index/updateWindows:UpdateWindows", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUpdateWindows gets an existing UpdateWindows resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUpdateWindows(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UpdateWindowsState, opts ...pulumi.ResourceOption) (*UpdateWindows, error) {
	var resource UpdateWindows
	err := ctx.ReadResource("dynatrace:index/updateWindows:UpdateWindows", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UpdateWindows resources.
type updateWindowsState struct {
	// no documentation available
	DailyRecurrence *UpdateWindowsDailyRecurrence `pulumi:"dailyRecurrence"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// no documentation available
	MonthlyRecurrence *UpdateWindowsMonthlyRecurrence `pulumi:"monthlyRecurrence"`
	// Name
	Name *string `pulumi:"name"`
	// no documentation available
	OnceRecurrence *UpdateWindowsOnceRecurrence `pulumi:"onceRecurrence"`
	// Possible Values: `MONTHLY`, `ONCE`, `DAILY`, `WEEKLY`
	Recurrence *string `pulumi:"recurrence"`
	// no documentation available
	WeeklyRecurrence *UpdateWindowsWeeklyRecurrence `pulumi:"weeklyRecurrence"`
}

type UpdateWindowsState struct {
	// no documentation available
	DailyRecurrence UpdateWindowsDailyRecurrencePtrInput
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// no documentation available
	MonthlyRecurrence UpdateWindowsMonthlyRecurrencePtrInput
	// Name
	Name pulumi.StringPtrInput
	// no documentation available
	OnceRecurrence UpdateWindowsOnceRecurrencePtrInput
	// Possible Values: `MONTHLY`, `ONCE`, `DAILY`, `WEEKLY`
	Recurrence pulumi.StringPtrInput
	// no documentation available
	WeeklyRecurrence UpdateWindowsWeeklyRecurrencePtrInput
}

func (UpdateWindowsState) ElementType() reflect.Type {
	return reflect.TypeOf((*updateWindowsState)(nil)).Elem()
}

type updateWindowsArgs struct {
	// no documentation available
	DailyRecurrence *UpdateWindowsDailyRecurrence `pulumi:"dailyRecurrence"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// no documentation available
	MonthlyRecurrence *UpdateWindowsMonthlyRecurrence `pulumi:"monthlyRecurrence"`
	// Name
	Name *string `pulumi:"name"`
	// no documentation available
	OnceRecurrence *UpdateWindowsOnceRecurrence `pulumi:"onceRecurrence"`
	// Possible Values: `MONTHLY`, `ONCE`, `DAILY`, `WEEKLY`
	Recurrence string `pulumi:"recurrence"`
	// no documentation available
	WeeklyRecurrence *UpdateWindowsWeeklyRecurrence `pulumi:"weeklyRecurrence"`
}

// The set of arguments for constructing a UpdateWindows resource.
type UpdateWindowsArgs struct {
	// no documentation available
	DailyRecurrence UpdateWindowsDailyRecurrencePtrInput
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// no documentation available
	MonthlyRecurrence UpdateWindowsMonthlyRecurrencePtrInput
	// Name
	Name pulumi.StringPtrInput
	// no documentation available
	OnceRecurrence UpdateWindowsOnceRecurrencePtrInput
	// Possible Values: `MONTHLY`, `ONCE`, `DAILY`, `WEEKLY`
	Recurrence pulumi.StringInput
	// no documentation available
	WeeklyRecurrence UpdateWindowsWeeklyRecurrencePtrInput
}

func (UpdateWindowsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*updateWindowsArgs)(nil)).Elem()
}

type UpdateWindowsInput interface {
	pulumi.Input

	ToUpdateWindowsOutput() UpdateWindowsOutput
	ToUpdateWindowsOutputWithContext(ctx context.Context) UpdateWindowsOutput
}

func (*UpdateWindows) ElementType() reflect.Type {
	return reflect.TypeOf((**UpdateWindows)(nil)).Elem()
}

func (i *UpdateWindows) ToUpdateWindowsOutput() UpdateWindowsOutput {
	return i.ToUpdateWindowsOutputWithContext(context.Background())
}

func (i *UpdateWindows) ToUpdateWindowsOutputWithContext(ctx context.Context) UpdateWindowsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpdateWindowsOutput)
}

// UpdateWindowsArrayInput is an input type that accepts UpdateWindowsArray and UpdateWindowsArrayOutput values.
// You can construct a concrete instance of `UpdateWindowsArrayInput` via:
//
//	UpdateWindowsArray{ UpdateWindowsArgs{...} }
type UpdateWindowsArrayInput interface {
	pulumi.Input

	ToUpdateWindowsArrayOutput() UpdateWindowsArrayOutput
	ToUpdateWindowsArrayOutputWithContext(context.Context) UpdateWindowsArrayOutput
}

type UpdateWindowsArray []UpdateWindowsInput

func (UpdateWindowsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UpdateWindows)(nil)).Elem()
}

func (i UpdateWindowsArray) ToUpdateWindowsArrayOutput() UpdateWindowsArrayOutput {
	return i.ToUpdateWindowsArrayOutputWithContext(context.Background())
}

func (i UpdateWindowsArray) ToUpdateWindowsArrayOutputWithContext(ctx context.Context) UpdateWindowsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpdateWindowsArrayOutput)
}

// UpdateWindowsMapInput is an input type that accepts UpdateWindowsMap and UpdateWindowsMapOutput values.
// You can construct a concrete instance of `UpdateWindowsMapInput` via:
//
//	UpdateWindowsMap{ "key": UpdateWindowsArgs{...} }
type UpdateWindowsMapInput interface {
	pulumi.Input

	ToUpdateWindowsMapOutput() UpdateWindowsMapOutput
	ToUpdateWindowsMapOutputWithContext(context.Context) UpdateWindowsMapOutput
}

type UpdateWindowsMap map[string]UpdateWindowsInput

func (UpdateWindowsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UpdateWindows)(nil)).Elem()
}

func (i UpdateWindowsMap) ToUpdateWindowsMapOutput() UpdateWindowsMapOutput {
	return i.ToUpdateWindowsMapOutputWithContext(context.Background())
}

func (i UpdateWindowsMap) ToUpdateWindowsMapOutputWithContext(ctx context.Context) UpdateWindowsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpdateWindowsMapOutput)
}

type UpdateWindowsOutput struct{ *pulumi.OutputState }

func (UpdateWindowsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UpdateWindows)(nil)).Elem()
}

func (o UpdateWindowsOutput) ToUpdateWindowsOutput() UpdateWindowsOutput {
	return o
}

func (o UpdateWindowsOutput) ToUpdateWindowsOutputWithContext(ctx context.Context) UpdateWindowsOutput {
	return o
}

// no documentation available
func (o UpdateWindowsOutput) DailyRecurrence() UpdateWindowsDailyRecurrencePtrOutput {
	return o.ApplyT(func(v *UpdateWindows) UpdateWindowsDailyRecurrencePtrOutput { return v.DailyRecurrence }).(UpdateWindowsDailyRecurrencePtrOutput)
}

// This setting is enabled (`true`) or disabled (`false`)
func (o UpdateWindowsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *UpdateWindows) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// no documentation available
func (o UpdateWindowsOutput) MonthlyRecurrence() UpdateWindowsMonthlyRecurrencePtrOutput {
	return o.ApplyT(func(v *UpdateWindows) UpdateWindowsMonthlyRecurrencePtrOutput { return v.MonthlyRecurrence }).(UpdateWindowsMonthlyRecurrencePtrOutput)
}

// Name
func (o UpdateWindowsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UpdateWindows) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// no documentation available
func (o UpdateWindowsOutput) OnceRecurrence() UpdateWindowsOnceRecurrencePtrOutput {
	return o.ApplyT(func(v *UpdateWindows) UpdateWindowsOnceRecurrencePtrOutput { return v.OnceRecurrence }).(UpdateWindowsOnceRecurrencePtrOutput)
}

// Possible Values: `MONTHLY`, `ONCE`, `DAILY`, `WEEKLY`
func (o UpdateWindowsOutput) Recurrence() pulumi.StringOutput {
	return o.ApplyT(func(v *UpdateWindows) pulumi.StringOutput { return v.Recurrence }).(pulumi.StringOutput)
}

// no documentation available
func (o UpdateWindowsOutput) WeeklyRecurrence() UpdateWindowsWeeklyRecurrencePtrOutput {
	return o.ApplyT(func(v *UpdateWindows) UpdateWindowsWeeklyRecurrencePtrOutput { return v.WeeklyRecurrence }).(UpdateWindowsWeeklyRecurrencePtrOutput)
}

type UpdateWindowsArrayOutput struct{ *pulumi.OutputState }

func (UpdateWindowsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UpdateWindows)(nil)).Elem()
}

func (o UpdateWindowsArrayOutput) ToUpdateWindowsArrayOutput() UpdateWindowsArrayOutput {
	return o
}

func (o UpdateWindowsArrayOutput) ToUpdateWindowsArrayOutputWithContext(ctx context.Context) UpdateWindowsArrayOutput {
	return o
}

func (o UpdateWindowsArrayOutput) Index(i pulumi.IntInput) UpdateWindowsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UpdateWindows {
		return vs[0].([]*UpdateWindows)[vs[1].(int)]
	}).(UpdateWindowsOutput)
}

type UpdateWindowsMapOutput struct{ *pulumi.OutputState }

func (UpdateWindowsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UpdateWindows)(nil)).Elem()
}

func (o UpdateWindowsMapOutput) ToUpdateWindowsMapOutput() UpdateWindowsMapOutput {
	return o
}

func (o UpdateWindowsMapOutput) ToUpdateWindowsMapOutputWithContext(ctx context.Context) UpdateWindowsMapOutput {
	return o
}

func (o UpdateWindowsMapOutput) MapIndex(k pulumi.StringInput) UpdateWindowsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UpdateWindows {
		return vs[0].(map[string]*UpdateWindows)[vs[1].(string)]
	}).(UpdateWindowsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UpdateWindowsInput)(nil)).Elem(), &UpdateWindows{})
	pulumi.RegisterInputType(reflect.TypeOf((*UpdateWindowsArrayInput)(nil)).Elem(), UpdateWindowsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UpdateWindowsMapInput)(nil)).Elem(), UpdateWindowsMap{})
	pulumi.RegisterOutputType(UpdateWindowsOutput{})
	pulumi.RegisterOutputType(UpdateWindowsArrayOutput{})
	pulumi.RegisterOutputType(UpdateWindowsMapOutput{})
}
