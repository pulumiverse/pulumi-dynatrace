// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type Geolocation struct {
	pulumi.CustomResourceState

	// Display the world map
	DisplayWorldmap pulumi.BoolOutput `pulumi:"displayWorldmap"`
	// The scope of this setting (environment-default). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
}

// NewGeolocation registers a new resource with the given unique name, arguments, and options.
func NewGeolocation(ctx *pulumi.Context,
	name string, args *GeolocationArgs, opts ...pulumi.ResourceOption) (*Geolocation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayWorldmap == nil {
		return nil, errors.New("invalid value for required argument 'DisplayWorldmap'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Geolocation
	err := ctx.RegisterResource("dynatrace:index/geolocation:Geolocation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGeolocation gets an existing Geolocation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGeolocation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GeolocationState, opts ...pulumi.ResourceOption) (*Geolocation, error) {
	var resource Geolocation
	err := ctx.ReadResource("dynatrace:index/geolocation:Geolocation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Geolocation resources.
type geolocationState struct {
	// Display the world map
	DisplayWorldmap *bool `pulumi:"displayWorldmap"`
	// The scope of this setting (environment-default). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
}

type GeolocationState struct {
	// Display the world map
	DisplayWorldmap pulumi.BoolPtrInput
	// The scope of this setting (environment-default). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
}

func (GeolocationState) ElementType() reflect.Type {
	return reflect.TypeOf((*geolocationState)(nil)).Elem()
}

type geolocationArgs struct {
	// Display the world map
	DisplayWorldmap bool `pulumi:"displayWorldmap"`
	// The scope of this setting (environment-default). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
}

// The set of arguments for constructing a Geolocation resource.
type GeolocationArgs struct {
	// Display the world map
	DisplayWorldmap pulumi.BoolInput
	// The scope of this setting (environment-default). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
}

func (GeolocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*geolocationArgs)(nil)).Elem()
}

type GeolocationInput interface {
	pulumi.Input

	ToGeolocationOutput() GeolocationOutput
	ToGeolocationOutputWithContext(ctx context.Context) GeolocationOutput
}

func (*Geolocation) ElementType() reflect.Type {
	return reflect.TypeOf((**Geolocation)(nil)).Elem()
}

func (i *Geolocation) ToGeolocationOutput() GeolocationOutput {
	return i.ToGeolocationOutputWithContext(context.Background())
}

func (i *Geolocation) ToGeolocationOutputWithContext(ctx context.Context) GeolocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeolocationOutput)
}

// GeolocationArrayInput is an input type that accepts GeolocationArray and GeolocationArrayOutput values.
// You can construct a concrete instance of `GeolocationArrayInput` via:
//
//	GeolocationArray{ GeolocationArgs{...} }
type GeolocationArrayInput interface {
	pulumi.Input

	ToGeolocationArrayOutput() GeolocationArrayOutput
	ToGeolocationArrayOutputWithContext(context.Context) GeolocationArrayOutput
}

type GeolocationArray []GeolocationInput

func (GeolocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Geolocation)(nil)).Elem()
}

func (i GeolocationArray) ToGeolocationArrayOutput() GeolocationArrayOutput {
	return i.ToGeolocationArrayOutputWithContext(context.Background())
}

func (i GeolocationArray) ToGeolocationArrayOutputWithContext(ctx context.Context) GeolocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeolocationArrayOutput)
}

// GeolocationMapInput is an input type that accepts GeolocationMap and GeolocationMapOutput values.
// You can construct a concrete instance of `GeolocationMapInput` via:
//
//	GeolocationMap{ "key": GeolocationArgs{...} }
type GeolocationMapInput interface {
	pulumi.Input

	ToGeolocationMapOutput() GeolocationMapOutput
	ToGeolocationMapOutputWithContext(context.Context) GeolocationMapOutput
}

type GeolocationMap map[string]GeolocationInput

func (GeolocationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Geolocation)(nil)).Elem()
}

func (i GeolocationMap) ToGeolocationMapOutput() GeolocationMapOutput {
	return i.ToGeolocationMapOutputWithContext(context.Background())
}

func (i GeolocationMap) ToGeolocationMapOutputWithContext(ctx context.Context) GeolocationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeolocationMapOutput)
}

type GeolocationOutput struct{ *pulumi.OutputState }

func (GeolocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Geolocation)(nil)).Elem()
}

func (o GeolocationOutput) ToGeolocationOutput() GeolocationOutput {
	return o
}

func (o GeolocationOutput) ToGeolocationOutputWithContext(ctx context.Context) GeolocationOutput {
	return o
}

// Display the world map
func (o GeolocationOutput) DisplayWorldmap() pulumi.BoolOutput {
	return o.ApplyT(func(v *Geolocation) pulumi.BoolOutput { return v.DisplayWorldmap }).(pulumi.BoolOutput)
}

// The scope of this setting (environment-default). Omit this property if you want to cover the whole environment.
func (o GeolocationOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Geolocation) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

type GeolocationArrayOutput struct{ *pulumi.OutputState }

func (GeolocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Geolocation)(nil)).Elem()
}

func (o GeolocationArrayOutput) ToGeolocationArrayOutput() GeolocationArrayOutput {
	return o
}

func (o GeolocationArrayOutput) ToGeolocationArrayOutputWithContext(ctx context.Context) GeolocationArrayOutput {
	return o
}

func (o GeolocationArrayOutput) Index(i pulumi.IntInput) GeolocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Geolocation {
		return vs[0].([]*Geolocation)[vs[1].(int)]
	}).(GeolocationOutput)
}

type GeolocationMapOutput struct{ *pulumi.OutputState }

func (GeolocationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Geolocation)(nil)).Elem()
}

func (o GeolocationMapOutput) ToGeolocationMapOutput() GeolocationMapOutput {
	return o
}

func (o GeolocationMapOutput) ToGeolocationMapOutputWithContext(ctx context.Context) GeolocationMapOutput {
	return o
}

func (o GeolocationMapOutput) MapIndex(k pulumi.StringInput) GeolocationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Geolocation {
		return vs[0].(map[string]*Geolocation)[vs[1].(string)]
	}).(GeolocationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GeolocationInput)(nil)).Elem(), &Geolocation{})
	pulumi.RegisterInputType(reflect.TypeOf((*GeolocationArrayInput)(nil)).Elem(), GeolocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GeolocationMapInput)(nil)).Elem(), GeolocationMap{})
	pulumi.RegisterOutputType(GeolocationOutput{})
	pulumi.RegisterOutputType(GeolocationArrayOutput{})
	pulumi.RegisterOutputType(GeolocationMapOutput{})
}
