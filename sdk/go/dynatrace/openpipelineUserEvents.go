// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OpenpipelineUserEvents struct {
	pulumi.CustomResourceState

	// List of all ingest sources of the configuration
	Endpoints OpenpipelineUserEventsEndpointsPtrOutput `pulumi:"endpoints"`
	// List of all pipelines of the configuration
	Pipelines OpenpipelineUserEventsPipelinesPtrOutput `pulumi:"pipelines"`
	// Dynamic routing definition
	Routing OpenpipelineUserEventsRoutingPtrOutput `pulumi:"routing"`
}

// NewOpenpipelineUserEvents registers a new resource with the given unique name, arguments, and options.
func NewOpenpipelineUserEvents(ctx *pulumi.Context,
	name string, args *OpenpipelineUserEventsArgs, opts ...pulumi.ResourceOption) (*OpenpipelineUserEvents, error) {
	if args == nil {
		args = &OpenpipelineUserEventsArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenpipelineUserEvents
	err := ctx.RegisterResource("dynatrace:index/openpipelineUserEvents:OpenpipelineUserEvents", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenpipelineUserEvents gets an existing OpenpipelineUserEvents resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenpipelineUserEvents(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenpipelineUserEventsState, opts ...pulumi.ResourceOption) (*OpenpipelineUserEvents, error) {
	var resource OpenpipelineUserEvents
	err := ctx.ReadResource("dynatrace:index/openpipelineUserEvents:OpenpipelineUserEvents", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenpipelineUserEvents resources.
type openpipelineUserEventsState struct {
	// List of all ingest sources of the configuration
	Endpoints *OpenpipelineUserEventsEndpoints `pulumi:"endpoints"`
	// List of all pipelines of the configuration
	Pipelines *OpenpipelineUserEventsPipelines `pulumi:"pipelines"`
	// Dynamic routing definition
	Routing *OpenpipelineUserEventsRouting `pulumi:"routing"`
}

type OpenpipelineUserEventsState struct {
	// List of all ingest sources of the configuration
	Endpoints OpenpipelineUserEventsEndpointsPtrInput
	// List of all pipelines of the configuration
	Pipelines OpenpipelineUserEventsPipelinesPtrInput
	// Dynamic routing definition
	Routing OpenpipelineUserEventsRoutingPtrInput
}

func (OpenpipelineUserEventsState) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineUserEventsState)(nil)).Elem()
}

type openpipelineUserEventsArgs struct {
	// List of all ingest sources of the configuration
	Endpoints *OpenpipelineUserEventsEndpoints `pulumi:"endpoints"`
	// List of all pipelines of the configuration
	Pipelines *OpenpipelineUserEventsPipelines `pulumi:"pipelines"`
	// Dynamic routing definition
	Routing *OpenpipelineUserEventsRouting `pulumi:"routing"`
}

// The set of arguments for constructing a OpenpipelineUserEvents resource.
type OpenpipelineUserEventsArgs struct {
	// List of all ingest sources of the configuration
	Endpoints OpenpipelineUserEventsEndpointsPtrInput
	// List of all pipelines of the configuration
	Pipelines OpenpipelineUserEventsPipelinesPtrInput
	// Dynamic routing definition
	Routing OpenpipelineUserEventsRoutingPtrInput
}

func (OpenpipelineUserEventsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineUserEventsArgs)(nil)).Elem()
}

type OpenpipelineUserEventsInput interface {
	pulumi.Input

	ToOpenpipelineUserEventsOutput() OpenpipelineUserEventsOutput
	ToOpenpipelineUserEventsOutputWithContext(ctx context.Context) OpenpipelineUserEventsOutput
}

func (*OpenpipelineUserEvents) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineUserEvents)(nil)).Elem()
}

func (i *OpenpipelineUserEvents) ToOpenpipelineUserEventsOutput() OpenpipelineUserEventsOutput {
	return i.ToOpenpipelineUserEventsOutputWithContext(context.Background())
}

func (i *OpenpipelineUserEvents) ToOpenpipelineUserEventsOutputWithContext(ctx context.Context) OpenpipelineUserEventsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineUserEventsOutput)
}

// OpenpipelineUserEventsArrayInput is an input type that accepts OpenpipelineUserEventsArray and OpenpipelineUserEventsArrayOutput values.
// You can construct a concrete instance of `OpenpipelineUserEventsArrayInput` via:
//
//	OpenpipelineUserEventsArray{ OpenpipelineUserEventsArgs{...} }
type OpenpipelineUserEventsArrayInput interface {
	pulumi.Input

	ToOpenpipelineUserEventsArrayOutput() OpenpipelineUserEventsArrayOutput
	ToOpenpipelineUserEventsArrayOutputWithContext(context.Context) OpenpipelineUserEventsArrayOutput
}

type OpenpipelineUserEventsArray []OpenpipelineUserEventsInput

func (OpenpipelineUserEventsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineUserEvents)(nil)).Elem()
}

func (i OpenpipelineUserEventsArray) ToOpenpipelineUserEventsArrayOutput() OpenpipelineUserEventsArrayOutput {
	return i.ToOpenpipelineUserEventsArrayOutputWithContext(context.Background())
}

func (i OpenpipelineUserEventsArray) ToOpenpipelineUserEventsArrayOutputWithContext(ctx context.Context) OpenpipelineUserEventsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineUserEventsArrayOutput)
}

// OpenpipelineUserEventsMapInput is an input type that accepts OpenpipelineUserEventsMap and OpenpipelineUserEventsMapOutput values.
// You can construct a concrete instance of `OpenpipelineUserEventsMapInput` via:
//
//	OpenpipelineUserEventsMap{ "key": OpenpipelineUserEventsArgs{...} }
type OpenpipelineUserEventsMapInput interface {
	pulumi.Input

	ToOpenpipelineUserEventsMapOutput() OpenpipelineUserEventsMapOutput
	ToOpenpipelineUserEventsMapOutputWithContext(context.Context) OpenpipelineUserEventsMapOutput
}

type OpenpipelineUserEventsMap map[string]OpenpipelineUserEventsInput

func (OpenpipelineUserEventsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineUserEvents)(nil)).Elem()
}

func (i OpenpipelineUserEventsMap) ToOpenpipelineUserEventsMapOutput() OpenpipelineUserEventsMapOutput {
	return i.ToOpenpipelineUserEventsMapOutputWithContext(context.Background())
}

func (i OpenpipelineUserEventsMap) ToOpenpipelineUserEventsMapOutputWithContext(ctx context.Context) OpenpipelineUserEventsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineUserEventsMapOutput)
}

type OpenpipelineUserEventsOutput struct{ *pulumi.OutputState }

func (OpenpipelineUserEventsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineUserEvents)(nil)).Elem()
}

func (o OpenpipelineUserEventsOutput) ToOpenpipelineUserEventsOutput() OpenpipelineUserEventsOutput {
	return o
}

func (o OpenpipelineUserEventsOutput) ToOpenpipelineUserEventsOutputWithContext(ctx context.Context) OpenpipelineUserEventsOutput {
	return o
}

// List of all ingest sources of the configuration
func (o OpenpipelineUserEventsOutput) Endpoints() OpenpipelineUserEventsEndpointsPtrOutput {
	return o.ApplyT(func(v *OpenpipelineUserEvents) OpenpipelineUserEventsEndpointsPtrOutput { return v.Endpoints }).(OpenpipelineUserEventsEndpointsPtrOutput)
}

// List of all pipelines of the configuration
func (o OpenpipelineUserEventsOutput) Pipelines() OpenpipelineUserEventsPipelinesPtrOutput {
	return o.ApplyT(func(v *OpenpipelineUserEvents) OpenpipelineUserEventsPipelinesPtrOutput { return v.Pipelines }).(OpenpipelineUserEventsPipelinesPtrOutput)
}

// Dynamic routing definition
func (o OpenpipelineUserEventsOutput) Routing() OpenpipelineUserEventsRoutingPtrOutput {
	return o.ApplyT(func(v *OpenpipelineUserEvents) OpenpipelineUserEventsRoutingPtrOutput { return v.Routing }).(OpenpipelineUserEventsRoutingPtrOutput)
}

type OpenpipelineUserEventsArrayOutput struct{ *pulumi.OutputState }

func (OpenpipelineUserEventsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineUserEvents)(nil)).Elem()
}

func (o OpenpipelineUserEventsArrayOutput) ToOpenpipelineUserEventsArrayOutput() OpenpipelineUserEventsArrayOutput {
	return o
}

func (o OpenpipelineUserEventsArrayOutput) ToOpenpipelineUserEventsArrayOutputWithContext(ctx context.Context) OpenpipelineUserEventsArrayOutput {
	return o
}

func (o OpenpipelineUserEventsArrayOutput) Index(i pulumi.IntInput) OpenpipelineUserEventsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenpipelineUserEvents {
		return vs[0].([]*OpenpipelineUserEvents)[vs[1].(int)]
	}).(OpenpipelineUserEventsOutput)
}

type OpenpipelineUserEventsMapOutput struct{ *pulumi.OutputState }

func (OpenpipelineUserEventsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineUserEvents)(nil)).Elem()
}

func (o OpenpipelineUserEventsMapOutput) ToOpenpipelineUserEventsMapOutput() OpenpipelineUserEventsMapOutput {
	return o
}

func (o OpenpipelineUserEventsMapOutput) ToOpenpipelineUserEventsMapOutputWithContext(ctx context.Context) OpenpipelineUserEventsMapOutput {
	return o
}

func (o OpenpipelineUserEventsMapOutput) MapIndex(k pulumi.StringInput) OpenpipelineUserEventsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenpipelineUserEvents {
		return vs[0].(map[string]*OpenpipelineUserEvents)[vs[1].(string)]
	}).(OpenpipelineUserEventsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineUserEventsInput)(nil)).Elem(), &OpenpipelineUserEvents{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineUserEventsArrayInput)(nil)).Elem(), OpenpipelineUserEventsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineUserEventsMapInput)(nil)).Elem(), OpenpipelineUserEventsMap{})
	pulumi.RegisterOutputType(OpenpipelineUserEventsOutput{})
	pulumi.RegisterOutputType(OpenpipelineUserEventsArrayOutput{})
	pulumi.RegisterOutputType(OpenpipelineUserEventsMapOutput{})
}
