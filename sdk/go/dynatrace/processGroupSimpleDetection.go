// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type ProcessGroupSimpleDetection struct {
	pulumi.CustomResourceState

	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// If Dynatrace detects this property at startup of a process, it will use its value to identify process groups more granular.
	GroupIdentifier pulumi.StringOutput `pulumi:"groupIdentifier"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this
	// instance regarding order. If not specified when creating the setting will be added to the end of the list. If not
	// specified during update the order will remain untouched
	InsertAfter pulumi.StringOutput `pulumi:"insertAfter"`
	// Use a variable to identify instances within a process group.
	InstanceIdentifier pulumi.StringOutput `pulumi:"instanceIdentifier"`
	// Note: Not all types can be detected at startup.
	ProcessType pulumi.StringPtrOutput `pulumi:"processType"`
	// Possible Values: `Prop`, `Env`
	RuleType pulumi.StringOutput `pulumi:"ruleType"`
}

// NewProcessGroupSimpleDetection registers a new resource with the given unique name, arguments, and options.
func NewProcessGroupSimpleDetection(ctx *pulumi.Context,
	name string, args *ProcessGroupSimpleDetectionArgs, opts ...pulumi.ResourceOption) (*ProcessGroupSimpleDetection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.GroupIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'GroupIdentifier'")
	}
	if args.InstanceIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'InstanceIdentifier'")
	}
	if args.RuleType == nil {
		return nil, errors.New("invalid value for required argument 'RuleType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProcessGroupSimpleDetection
	err := ctx.RegisterResource("dynatrace:index/processGroupSimpleDetection:ProcessGroupSimpleDetection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProcessGroupSimpleDetection gets an existing ProcessGroupSimpleDetection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProcessGroupSimpleDetection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProcessGroupSimpleDetectionState, opts ...pulumi.ResourceOption) (*ProcessGroupSimpleDetection, error) {
	var resource ProcessGroupSimpleDetection
	err := ctx.ReadResource("dynatrace:index/processGroupSimpleDetection:ProcessGroupSimpleDetection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProcessGroupSimpleDetection resources.
type processGroupSimpleDetectionState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// If Dynatrace detects this property at startup of a process, it will use its value to identify process groups more granular.
	GroupIdentifier *string `pulumi:"groupIdentifier"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this
	// instance regarding order. If not specified when creating the setting will be added to the end of the list. If not
	// specified during update the order will remain untouched
	InsertAfter *string `pulumi:"insertAfter"`
	// Use a variable to identify instances within a process group.
	InstanceIdentifier *string `pulumi:"instanceIdentifier"`
	// Note: Not all types can be detected at startup.
	ProcessType *string `pulumi:"processType"`
	// Possible Values: `Prop`, `Env`
	RuleType *string `pulumi:"ruleType"`
}

type ProcessGroupSimpleDetectionState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// If Dynatrace detects this property at startup of a process, it will use its value to identify process groups more granular.
	GroupIdentifier pulumi.StringPtrInput
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this
	// instance regarding order. If not specified when creating the setting will be added to the end of the list. If not
	// specified during update the order will remain untouched
	InsertAfter pulumi.StringPtrInput
	// Use a variable to identify instances within a process group.
	InstanceIdentifier pulumi.StringPtrInput
	// Note: Not all types can be detected at startup.
	ProcessType pulumi.StringPtrInput
	// Possible Values: `Prop`, `Env`
	RuleType pulumi.StringPtrInput
}

func (ProcessGroupSimpleDetectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*processGroupSimpleDetectionState)(nil)).Elem()
}

type processGroupSimpleDetectionArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// If Dynatrace detects this property at startup of a process, it will use its value to identify process groups more granular.
	GroupIdentifier string `pulumi:"groupIdentifier"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this
	// instance regarding order. If not specified when creating the setting will be added to the end of the list. If not
	// specified during update the order will remain untouched
	InsertAfter *string `pulumi:"insertAfter"`
	// Use a variable to identify instances within a process group.
	InstanceIdentifier string `pulumi:"instanceIdentifier"`
	// Note: Not all types can be detected at startup.
	ProcessType *string `pulumi:"processType"`
	// Possible Values: `Prop`, `Env`
	RuleType string `pulumi:"ruleType"`
}

// The set of arguments for constructing a ProcessGroupSimpleDetection resource.
type ProcessGroupSimpleDetectionArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// If Dynatrace detects this property at startup of a process, it will use its value to identify process groups more granular.
	GroupIdentifier pulumi.StringInput
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this
	// instance regarding order. If not specified when creating the setting will be added to the end of the list. If not
	// specified during update the order will remain untouched
	InsertAfter pulumi.StringPtrInput
	// Use a variable to identify instances within a process group.
	InstanceIdentifier pulumi.StringInput
	// Note: Not all types can be detected at startup.
	ProcessType pulumi.StringPtrInput
	// Possible Values: `Prop`, `Env`
	RuleType pulumi.StringInput
}

func (ProcessGroupSimpleDetectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*processGroupSimpleDetectionArgs)(nil)).Elem()
}

type ProcessGroupSimpleDetectionInput interface {
	pulumi.Input

	ToProcessGroupSimpleDetectionOutput() ProcessGroupSimpleDetectionOutput
	ToProcessGroupSimpleDetectionOutputWithContext(ctx context.Context) ProcessGroupSimpleDetectionOutput
}

func (*ProcessGroupSimpleDetection) ElementType() reflect.Type {
	return reflect.TypeOf((**ProcessGroupSimpleDetection)(nil)).Elem()
}

func (i *ProcessGroupSimpleDetection) ToProcessGroupSimpleDetectionOutput() ProcessGroupSimpleDetectionOutput {
	return i.ToProcessGroupSimpleDetectionOutputWithContext(context.Background())
}

func (i *ProcessGroupSimpleDetection) ToProcessGroupSimpleDetectionOutputWithContext(ctx context.Context) ProcessGroupSimpleDetectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProcessGroupSimpleDetectionOutput)
}

// ProcessGroupSimpleDetectionArrayInput is an input type that accepts ProcessGroupSimpleDetectionArray and ProcessGroupSimpleDetectionArrayOutput values.
// You can construct a concrete instance of `ProcessGroupSimpleDetectionArrayInput` via:
//
//	ProcessGroupSimpleDetectionArray{ ProcessGroupSimpleDetectionArgs{...} }
type ProcessGroupSimpleDetectionArrayInput interface {
	pulumi.Input

	ToProcessGroupSimpleDetectionArrayOutput() ProcessGroupSimpleDetectionArrayOutput
	ToProcessGroupSimpleDetectionArrayOutputWithContext(context.Context) ProcessGroupSimpleDetectionArrayOutput
}

type ProcessGroupSimpleDetectionArray []ProcessGroupSimpleDetectionInput

func (ProcessGroupSimpleDetectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProcessGroupSimpleDetection)(nil)).Elem()
}

func (i ProcessGroupSimpleDetectionArray) ToProcessGroupSimpleDetectionArrayOutput() ProcessGroupSimpleDetectionArrayOutput {
	return i.ToProcessGroupSimpleDetectionArrayOutputWithContext(context.Background())
}

func (i ProcessGroupSimpleDetectionArray) ToProcessGroupSimpleDetectionArrayOutputWithContext(ctx context.Context) ProcessGroupSimpleDetectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProcessGroupSimpleDetectionArrayOutput)
}

// ProcessGroupSimpleDetectionMapInput is an input type that accepts ProcessGroupSimpleDetectionMap and ProcessGroupSimpleDetectionMapOutput values.
// You can construct a concrete instance of `ProcessGroupSimpleDetectionMapInput` via:
//
//	ProcessGroupSimpleDetectionMap{ "key": ProcessGroupSimpleDetectionArgs{...} }
type ProcessGroupSimpleDetectionMapInput interface {
	pulumi.Input

	ToProcessGroupSimpleDetectionMapOutput() ProcessGroupSimpleDetectionMapOutput
	ToProcessGroupSimpleDetectionMapOutputWithContext(context.Context) ProcessGroupSimpleDetectionMapOutput
}

type ProcessGroupSimpleDetectionMap map[string]ProcessGroupSimpleDetectionInput

func (ProcessGroupSimpleDetectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProcessGroupSimpleDetection)(nil)).Elem()
}

func (i ProcessGroupSimpleDetectionMap) ToProcessGroupSimpleDetectionMapOutput() ProcessGroupSimpleDetectionMapOutput {
	return i.ToProcessGroupSimpleDetectionMapOutputWithContext(context.Background())
}

func (i ProcessGroupSimpleDetectionMap) ToProcessGroupSimpleDetectionMapOutputWithContext(ctx context.Context) ProcessGroupSimpleDetectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProcessGroupSimpleDetectionMapOutput)
}

type ProcessGroupSimpleDetectionOutput struct{ *pulumi.OutputState }

func (ProcessGroupSimpleDetectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProcessGroupSimpleDetection)(nil)).Elem()
}

func (o ProcessGroupSimpleDetectionOutput) ToProcessGroupSimpleDetectionOutput() ProcessGroupSimpleDetectionOutput {
	return o
}

func (o ProcessGroupSimpleDetectionOutput) ToProcessGroupSimpleDetectionOutputWithContext(ctx context.Context) ProcessGroupSimpleDetectionOutput {
	return o
}

// This setting is enabled (`true`) or disabled (`false`)
func (o ProcessGroupSimpleDetectionOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProcessGroupSimpleDetection) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// If Dynatrace detects this property at startup of a process, it will use its value to identify process groups more granular.
func (o ProcessGroupSimpleDetectionOutput) GroupIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcessGroupSimpleDetection) pulumi.StringOutput { return v.GroupIdentifier }).(pulumi.StringOutput)
}

// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this
// instance regarding order. If not specified when creating the setting will be added to the end of the list. If not
// specified during update the order will remain untouched
func (o ProcessGroupSimpleDetectionOutput) InsertAfter() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcessGroupSimpleDetection) pulumi.StringOutput { return v.InsertAfter }).(pulumi.StringOutput)
}

// Use a variable to identify instances within a process group.
func (o ProcessGroupSimpleDetectionOutput) InstanceIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcessGroupSimpleDetection) pulumi.StringOutput { return v.InstanceIdentifier }).(pulumi.StringOutput)
}

// Note: Not all types can be detected at startup.
func (o ProcessGroupSimpleDetectionOutput) ProcessType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProcessGroupSimpleDetection) pulumi.StringPtrOutput { return v.ProcessType }).(pulumi.StringPtrOutput)
}

// Possible Values: `Prop`, `Env`
func (o ProcessGroupSimpleDetectionOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcessGroupSimpleDetection) pulumi.StringOutput { return v.RuleType }).(pulumi.StringOutput)
}

type ProcessGroupSimpleDetectionArrayOutput struct{ *pulumi.OutputState }

func (ProcessGroupSimpleDetectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProcessGroupSimpleDetection)(nil)).Elem()
}

func (o ProcessGroupSimpleDetectionArrayOutput) ToProcessGroupSimpleDetectionArrayOutput() ProcessGroupSimpleDetectionArrayOutput {
	return o
}

func (o ProcessGroupSimpleDetectionArrayOutput) ToProcessGroupSimpleDetectionArrayOutputWithContext(ctx context.Context) ProcessGroupSimpleDetectionArrayOutput {
	return o
}

func (o ProcessGroupSimpleDetectionArrayOutput) Index(i pulumi.IntInput) ProcessGroupSimpleDetectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProcessGroupSimpleDetection {
		return vs[0].([]*ProcessGroupSimpleDetection)[vs[1].(int)]
	}).(ProcessGroupSimpleDetectionOutput)
}

type ProcessGroupSimpleDetectionMapOutput struct{ *pulumi.OutputState }

func (ProcessGroupSimpleDetectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProcessGroupSimpleDetection)(nil)).Elem()
}

func (o ProcessGroupSimpleDetectionMapOutput) ToProcessGroupSimpleDetectionMapOutput() ProcessGroupSimpleDetectionMapOutput {
	return o
}

func (o ProcessGroupSimpleDetectionMapOutput) ToProcessGroupSimpleDetectionMapOutputWithContext(ctx context.Context) ProcessGroupSimpleDetectionMapOutput {
	return o
}

func (o ProcessGroupSimpleDetectionMapOutput) MapIndex(k pulumi.StringInput) ProcessGroupSimpleDetectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProcessGroupSimpleDetection {
		return vs[0].(map[string]*ProcessGroupSimpleDetection)[vs[1].(string)]
	}).(ProcessGroupSimpleDetectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProcessGroupSimpleDetectionInput)(nil)).Elem(), &ProcessGroupSimpleDetection{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProcessGroupSimpleDetectionArrayInput)(nil)).Elem(), ProcessGroupSimpleDetectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProcessGroupSimpleDetectionMapInput)(nil)).Elem(), ProcessGroupSimpleDetectionMap{})
	pulumi.RegisterOutputType(ProcessGroupSimpleDetectionOutput{})
	pulumi.RegisterOutputType(ProcessGroupSimpleDetectionArrayOutput{})
	pulumi.RegisterOutputType(ProcessGroupSimpleDetectionMapOutput{})
}
