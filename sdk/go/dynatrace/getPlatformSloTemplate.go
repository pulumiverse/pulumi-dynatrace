// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

// > To utilize this data source, please define the environment variables `DT_CLIENT_ID`, `DT_CLIENT_SECRET`, `DT_ACCOUNT_ID` with an OAuth client including the following permissions: **View SLOs** (`slo:slos:read`) and **View SLO objective templates** (`slo:objective-templates:read`).
//
// The SLO objective template data source allows the ID to be retrieved by its name.
//
// - `name` (String) Name of the SLO objective template
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			hostCPU, err := dynatrace.GetPlatformSloTemplate(ctx, &dynatrace.GetPlatformSloTemplateArgs{
//				Name: "Host CPU usage utilization",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = dynatrace.NewPlatformSlo(ctx, "#name#", &dynatrace.PlatformSloArgs{
//				Description: pulumi.String("Measures the CPU usage of selected hosts over time."),
//				Criteria: &dynatrace.PlatformSloCriteriaArgs{
//					CriteriaDetails: dynatrace.PlatformSloCriteriaCriteriaDetailArray{
//						&dynatrace.PlatformSloCriteriaCriteriaDetailArgs{
//							Target:        pulumi.Float64(95),
//							TimeframeFrom: pulumi.String("now-7d"),
//							TimeframeTo:   pulumi.String("now"),
//						},
//					},
//				},
//				SliReference: &dynatrace.PlatformSloSliReferenceArgs{
//					TemplateId: pulumi.String(hostCPU.Id),
//					Variables: &dynatrace.PlatformSloSliReferenceVariablesArgs{
//						SliReferenceVariables: dynatrace.PlatformSloSliReferenceVariablesSliReferenceVariableArray{
//							&dynatrace.PlatformSloSliReferenceVariablesSliReferenceVariableArgs{
//								Name:  pulumi.String("hosts"),
//								Value: pulumi.String("\"HOST-1234567890000000\""),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetPlatformSloTemplate(ctx *pulumi.Context, args *GetPlatformSloTemplateArgs, opts ...pulumi.InvokeOption) (*GetPlatformSloTemplateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetPlatformSloTemplateResult
	err := ctx.Invoke("dynatrace:index/getPlatformSloTemplate:getPlatformSloTemplate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPlatformSloTemplate.
type GetPlatformSloTemplateArgs struct {
	// Name of the SLO objective template
	Name string `pulumi:"name"`
}

// A collection of values returned by getPlatformSloTemplate.
type GetPlatformSloTemplateResult struct {
	// ID of the SLO objective template
	Id string `pulumi:"id"`
	// Name of the SLO objective template
	Name string `pulumi:"name"`
}

func GetPlatformSloTemplateOutput(ctx *pulumi.Context, args GetPlatformSloTemplateOutputArgs, opts ...pulumi.InvokeOption) GetPlatformSloTemplateResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetPlatformSloTemplateResultOutput, error) {
			args := v.(GetPlatformSloTemplateArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("dynatrace:index/getPlatformSloTemplate:getPlatformSloTemplate", args, GetPlatformSloTemplateResultOutput{}, options).(GetPlatformSloTemplateResultOutput), nil
		}).(GetPlatformSloTemplateResultOutput)
}

// A collection of arguments for invoking getPlatformSloTemplate.
type GetPlatformSloTemplateOutputArgs struct {
	// Name of the SLO objective template
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetPlatformSloTemplateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPlatformSloTemplateArgs)(nil)).Elem()
}

// A collection of values returned by getPlatformSloTemplate.
type GetPlatformSloTemplateResultOutput struct{ *pulumi.OutputState }

func (GetPlatformSloTemplateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPlatformSloTemplateResult)(nil)).Elem()
}

func (o GetPlatformSloTemplateResultOutput) ToGetPlatformSloTemplateResultOutput() GetPlatformSloTemplateResultOutput {
	return o
}

func (o GetPlatformSloTemplateResultOutput) ToGetPlatformSloTemplateResultOutputWithContext(ctx context.Context) GetPlatformSloTemplateResultOutput {
	return o
}

// ID of the SLO objective template
func (o GetPlatformSloTemplateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPlatformSloTemplateResult) string { return v.Id }).(pulumi.StringOutput)
}

// Name of the SLO objective template
func (o GetPlatformSloTemplateResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPlatformSloTemplateResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetPlatformSloTemplateResultOutput{})
}
