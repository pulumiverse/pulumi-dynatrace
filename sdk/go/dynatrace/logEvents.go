// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type LogEvents struct {
	pulumi.CustomResourceState

	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Event template
	EventTemplate LogEventsEventTemplateOutput `pulumi:"eventTemplate"`
	// Log query
	Query pulumi.StringOutput `pulumi:"query"`
	// The textual summary of the log event entry
	Summary pulumi.StringOutput `pulumi:"summary"`
}

// NewLogEvents registers a new resource with the given unique name, arguments, and options.
func NewLogEvents(ctx *pulumi.Context,
	name string, args *LogEventsArgs, opts ...pulumi.ResourceOption) (*LogEvents, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.EventTemplate == nil {
		return nil, errors.New("invalid value for required argument 'EventTemplate'")
	}
	if args.Query == nil {
		return nil, errors.New("invalid value for required argument 'Query'")
	}
	if args.Summary == nil {
		return nil, errors.New("invalid value for required argument 'Summary'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogEvents
	err := ctx.RegisterResource("dynatrace:index/logEvents:LogEvents", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogEvents gets an existing LogEvents resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogEvents(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogEventsState, opts ...pulumi.ResourceOption) (*LogEvents, error) {
	var resource LogEvents
	err := ctx.ReadResource("dynatrace:index/logEvents:LogEvents", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogEvents resources.
type logEventsState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// Event template
	EventTemplate *LogEventsEventTemplate `pulumi:"eventTemplate"`
	// Log query
	Query *string `pulumi:"query"`
	// The textual summary of the log event entry
	Summary *string `pulumi:"summary"`
}

type LogEventsState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// Event template
	EventTemplate LogEventsEventTemplatePtrInput
	// Log query
	Query pulumi.StringPtrInput
	// The textual summary of the log event entry
	Summary pulumi.StringPtrInput
}

func (LogEventsState) ElementType() reflect.Type {
	return reflect.TypeOf((*logEventsState)(nil)).Elem()
}

type logEventsArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// Event template
	EventTemplate LogEventsEventTemplate `pulumi:"eventTemplate"`
	// Log query
	Query string `pulumi:"query"`
	// The textual summary of the log event entry
	Summary string `pulumi:"summary"`
}

// The set of arguments for constructing a LogEvents resource.
type LogEventsArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// Event template
	EventTemplate LogEventsEventTemplateInput
	// Log query
	Query pulumi.StringInput
	// The textual summary of the log event entry
	Summary pulumi.StringInput
}

func (LogEventsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logEventsArgs)(nil)).Elem()
}

type LogEventsInput interface {
	pulumi.Input

	ToLogEventsOutput() LogEventsOutput
	ToLogEventsOutputWithContext(ctx context.Context) LogEventsOutput
}

func (*LogEvents) ElementType() reflect.Type {
	return reflect.TypeOf((**LogEvents)(nil)).Elem()
}

func (i *LogEvents) ToLogEventsOutput() LogEventsOutput {
	return i.ToLogEventsOutputWithContext(context.Background())
}

func (i *LogEvents) ToLogEventsOutputWithContext(ctx context.Context) LogEventsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogEventsOutput)
}

// LogEventsArrayInput is an input type that accepts LogEventsArray and LogEventsArrayOutput values.
// You can construct a concrete instance of `LogEventsArrayInput` via:
//
//	LogEventsArray{ LogEventsArgs{...} }
type LogEventsArrayInput interface {
	pulumi.Input

	ToLogEventsArrayOutput() LogEventsArrayOutput
	ToLogEventsArrayOutputWithContext(context.Context) LogEventsArrayOutput
}

type LogEventsArray []LogEventsInput

func (LogEventsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogEvents)(nil)).Elem()
}

func (i LogEventsArray) ToLogEventsArrayOutput() LogEventsArrayOutput {
	return i.ToLogEventsArrayOutputWithContext(context.Background())
}

func (i LogEventsArray) ToLogEventsArrayOutputWithContext(ctx context.Context) LogEventsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogEventsArrayOutput)
}

// LogEventsMapInput is an input type that accepts LogEventsMap and LogEventsMapOutput values.
// You can construct a concrete instance of `LogEventsMapInput` via:
//
//	LogEventsMap{ "key": LogEventsArgs{...} }
type LogEventsMapInput interface {
	pulumi.Input

	ToLogEventsMapOutput() LogEventsMapOutput
	ToLogEventsMapOutputWithContext(context.Context) LogEventsMapOutput
}

type LogEventsMap map[string]LogEventsInput

func (LogEventsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogEvents)(nil)).Elem()
}

func (i LogEventsMap) ToLogEventsMapOutput() LogEventsMapOutput {
	return i.ToLogEventsMapOutputWithContext(context.Background())
}

func (i LogEventsMap) ToLogEventsMapOutputWithContext(ctx context.Context) LogEventsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogEventsMapOutput)
}

type LogEventsOutput struct{ *pulumi.OutputState }

func (LogEventsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogEvents)(nil)).Elem()
}

func (o LogEventsOutput) ToLogEventsOutput() LogEventsOutput {
	return o
}

func (o LogEventsOutput) ToLogEventsOutputWithContext(ctx context.Context) LogEventsOutput {
	return o
}

// This setting is enabled (`true`) or disabled (`false`)
func (o LogEventsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *LogEvents) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Event template
func (o LogEventsOutput) EventTemplate() LogEventsEventTemplateOutput {
	return o.ApplyT(func(v *LogEvents) LogEventsEventTemplateOutput { return v.EventTemplate }).(LogEventsEventTemplateOutput)
}

// Log query
func (o LogEventsOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v *LogEvents) pulumi.StringOutput { return v.Query }).(pulumi.StringOutput)
}

// The textual summary of the log event entry
func (o LogEventsOutput) Summary() pulumi.StringOutput {
	return o.ApplyT(func(v *LogEvents) pulumi.StringOutput { return v.Summary }).(pulumi.StringOutput)
}

type LogEventsArrayOutput struct{ *pulumi.OutputState }

func (LogEventsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogEvents)(nil)).Elem()
}

func (o LogEventsArrayOutput) ToLogEventsArrayOutput() LogEventsArrayOutput {
	return o
}

func (o LogEventsArrayOutput) ToLogEventsArrayOutputWithContext(ctx context.Context) LogEventsArrayOutput {
	return o
}

func (o LogEventsArrayOutput) Index(i pulumi.IntInput) LogEventsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogEvents {
		return vs[0].([]*LogEvents)[vs[1].(int)]
	}).(LogEventsOutput)
}

type LogEventsMapOutput struct{ *pulumi.OutputState }

func (LogEventsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogEvents)(nil)).Elem()
}

func (o LogEventsMapOutput) ToLogEventsMapOutput() LogEventsMapOutput {
	return o
}

func (o LogEventsMapOutput) ToLogEventsMapOutputWithContext(ctx context.Context) LogEventsMapOutput {
	return o
}

func (o LogEventsMapOutput) MapIndex(k pulumi.StringInput) LogEventsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogEvents {
		return vs[0].(map[string]*LogEvents)[vs[1].(string)]
	}).(LogEventsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogEventsInput)(nil)).Elem(), &LogEvents{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogEventsArrayInput)(nil)).Elem(), LogEventsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogEventsMapInput)(nil)).Elem(), LogEventsMap{})
	pulumi.RegisterOutputType(LogEventsOutput{})
	pulumi.RegisterOutputType(LogEventsArrayOutput{})
	pulumi.RegisterOutputType(LogEventsMapOutput{})
}
