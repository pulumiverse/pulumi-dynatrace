// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OpenpipelineV2SpansRouting struct {
	pulumi.CustomResourceState

	// Routing for pipelines
	RoutingEntries OpenpipelineV2SpansRoutingRoutingEntriesPtrOutput `pulumi:"routingEntries"`
}

// NewOpenpipelineV2SpansRouting registers a new resource with the given unique name, arguments, and options.
func NewOpenpipelineV2SpansRouting(ctx *pulumi.Context,
	name string, args *OpenpipelineV2SpansRoutingArgs, opts ...pulumi.ResourceOption) (*OpenpipelineV2SpansRouting, error) {
	if args == nil {
		args = &OpenpipelineV2SpansRoutingArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenpipelineV2SpansRouting
	err := ctx.RegisterResource("dynatrace:index/openpipelineV2SpansRouting:OpenpipelineV2SpansRouting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenpipelineV2SpansRouting gets an existing OpenpipelineV2SpansRouting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenpipelineV2SpansRouting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenpipelineV2SpansRoutingState, opts ...pulumi.ResourceOption) (*OpenpipelineV2SpansRouting, error) {
	var resource OpenpipelineV2SpansRouting
	err := ctx.ReadResource("dynatrace:index/openpipelineV2SpansRouting:OpenpipelineV2SpansRouting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenpipelineV2SpansRouting resources.
type openpipelineV2SpansRoutingState struct {
	// Routing for pipelines
	RoutingEntries *OpenpipelineV2SpansRoutingRoutingEntries `pulumi:"routingEntries"`
}

type OpenpipelineV2SpansRoutingState struct {
	// Routing for pipelines
	RoutingEntries OpenpipelineV2SpansRoutingRoutingEntriesPtrInput
}

func (OpenpipelineV2SpansRoutingState) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2SpansRoutingState)(nil)).Elem()
}

type openpipelineV2SpansRoutingArgs struct {
	// Routing for pipelines
	RoutingEntries *OpenpipelineV2SpansRoutingRoutingEntries `pulumi:"routingEntries"`
}

// The set of arguments for constructing a OpenpipelineV2SpansRouting resource.
type OpenpipelineV2SpansRoutingArgs struct {
	// Routing for pipelines
	RoutingEntries OpenpipelineV2SpansRoutingRoutingEntriesPtrInput
}

func (OpenpipelineV2SpansRoutingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2SpansRoutingArgs)(nil)).Elem()
}

type OpenpipelineV2SpansRoutingInput interface {
	pulumi.Input

	ToOpenpipelineV2SpansRoutingOutput() OpenpipelineV2SpansRoutingOutput
	ToOpenpipelineV2SpansRoutingOutputWithContext(ctx context.Context) OpenpipelineV2SpansRoutingOutput
}

func (*OpenpipelineV2SpansRouting) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2SpansRouting)(nil)).Elem()
}

func (i *OpenpipelineV2SpansRouting) ToOpenpipelineV2SpansRoutingOutput() OpenpipelineV2SpansRoutingOutput {
	return i.ToOpenpipelineV2SpansRoutingOutputWithContext(context.Background())
}

func (i *OpenpipelineV2SpansRouting) ToOpenpipelineV2SpansRoutingOutputWithContext(ctx context.Context) OpenpipelineV2SpansRoutingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2SpansRoutingOutput)
}

// OpenpipelineV2SpansRoutingArrayInput is an input type that accepts OpenpipelineV2SpansRoutingArray and OpenpipelineV2SpansRoutingArrayOutput values.
// You can construct a concrete instance of `OpenpipelineV2SpansRoutingArrayInput` via:
//
//	OpenpipelineV2SpansRoutingArray{ OpenpipelineV2SpansRoutingArgs{...} }
type OpenpipelineV2SpansRoutingArrayInput interface {
	pulumi.Input

	ToOpenpipelineV2SpansRoutingArrayOutput() OpenpipelineV2SpansRoutingArrayOutput
	ToOpenpipelineV2SpansRoutingArrayOutputWithContext(context.Context) OpenpipelineV2SpansRoutingArrayOutput
}

type OpenpipelineV2SpansRoutingArray []OpenpipelineV2SpansRoutingInput

func (OpenpipelineV2SpansRoutingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2SpansRouting)(nil)).Elem()
}

func (i OpenpipelineV2SpansRoutingArray) ToOpenpipelineV2SpansRoutingArrayOutput() OpenpipelineV2SpansRoutingArrayOutput {
	return i.ToOpenpipelineV2SpansRoutingArrayOutputWithContext(context.Background())
}

func (i OpenpipelineV2SpansRoutingArray) ToOpenpipelineV2SpansRoutingArrayOutputWithContext(ctx context.Context) OpenpipelineV2SpansRoutingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2SpansRoutingArrayOutput)
}

// OpenpipelineV2SpansRoutingMapInput is an input type that accepts OpenpipelineV2SpansRoutingMap and OpenpipelineV2SpansRoutingMapOutput values.
// You can construct a concrete instance of `OpenpipelineV2SpansRoutingMapInput` via:
//
//	OpenpipelineV2SpansRoutingMap{ "key": OpenpipelineV2SpansRoutingArgs{...} }
type OpenpipelineV2SpansRoutingMapInput interface {
	pulumi.Input

	ToOpenpipelineV2SpansRoutingMapOutput() OpenpipelineV2SpansRoutingMapOutput
	ToOpenpipelineV2SpansRoutingMapOutputWithContext(context.Context) OpenpipelineV2SpansRoutingMapOutput
}

type OpenpipelineV2SpansRoutingMap map[string]OpenpipelineV2SpansRoutingInput

func (OpenpipelineV2SpansRoutingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2SpansRouting)(nil)).Elem()
}

func (i OpenpipelineV2SpansRoutingMap) ToOpenpipelineV2SpansRoutingMapOutput() OpenpipelineV2SpansRoutingMapOutput {
	return i.ToOpenpipelineV2SpansRoutingMapOutputWithContext(context.Background())
}

func (i OpenpipelineV2SpansRoutingMap) ToOpenpipelineV2SpansRoutingMapOutputWithContext(ctx context.Context) OpenpipelineV2SpansRoutingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2SpansRoutingMapOutput)
}

type OpenpipelineV2SpansRoutingOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2SpansRoutingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2SpansRouting)(nil)).Elem()
}

func (o OpenpipelineV2SpansRoutingOutput) ToOpenpipelineV2SpansRoutingOutput() OpenpipelineV2SpansRoutingOutput {
	return o
}

func (o OpenpipelineV2SpansRoutingOutput) ToOpenpipelineV2SpansRoutingOutputWithContext(ctx context.Context) OpenpipelineV2SpansRoutingOutput {
	return o
}

// Routing for pipelines
func (o OpenpipelineV2SpansRoutingOutput) RoutingEntries() OpenpipelineV2SpansRoutingRoutingEntriesPtrOutput {
	return o.ApplyT(func(v *OpenpipelineV2SpansRouting) OpenpipelineV2SpansRoutingRoutingEntriesPtrOutput {
		return v.RoutingEntries
	}).(OpenpipelineV2SpansRoutingRoutingEntriesPtrOutput)
}

type OpenpipelineV2SpansRoutingArrayOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2SpansRoutingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2SpansRouting)(nil)).Elem()
}

func (o OpenpipelineV2SpansRoutingArrayOutput) ToOpenpipelineV2SpansRoutingArrayOutput() OpenpipelineV2SpansRoutingArrayOutput {
	return o
}

func (o OpenpipelineV2SpansRoutingArrayOutput) ToOpenpipelineV2SpansRoutingArrayOutputWithContext(ctx context.Context) OpenpipelineV2SpansRoutingArrayOutput {
	return o
}

func (o OpenpipelineV2SpansRoutingArrayOutput) Index(i pulumi.IntInput) OpenpipelineV2SpansRoutingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenpipelineV2SpansRouting {
		return vs[0].([]*OpenpipelineV2SpansRouting)[vs[1].(int)]
	}).(OpenpipelineV2SpansRoutingOutput)
}

type OpenpipelineV2SpansRoutingMapOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2SpansRoutingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2SpansRouting)(nil)).Elem()
}

func (o OpenpipelineV2SpansRoutingMapOutput) ToOpenpipelineV2SpansRoutingMapOutput() OpenpipelineV2SpansRoutingMapOutput {
	return o
}

func (o OpenpipelineV2SpansRoutingMapOutput) ToOpenpipelineV2SpansRoutingMapOutputWithContext(ctx context.Context) OpenpipelineV2SpansRoutingMapOutput {
	return o
}

func (o OpenpipelineV2SpansRoutingMapOutput) MapIndex(k pulumi.StringInput) OpenpipelineV2SpansRoutingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenpipelineV2SpansRouting {
		return vs[0].(map[string]*OpenpipelineV2SpansRouting)[vs[1].(string)]
	}).(OpenpipelineV2SpansRoutingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2SpansRoutingInput)(nil)).Elem(), &OpenpipelineV2SpansRouting{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2SpansRoutingArrayInput)(nil)).Elem(), OpenpipelineV2SpansRoutingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2SpansRoutingMapInput)(nil)).Elem(), OpenpipelineV2SpansRoutingMap{})
	pulumi.RegisterOutputType(OpenpipelineV2SpansRoutingOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2SpansRoutingArrayOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2SpansRoutingMapOutput{})
}
