// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type WebAppAnomalies struct {
	pulumi.CustomResourceState

	// Error rate
	ErrorRate WebAppAnomaliesErrorRateOutput `pulumi:"errorRate"`
	// Response time
	ResponseTime WebAppAnomaliesResponseTimeOutput `pulumi:"responseTime"`
	// The scope of this setting (APPLICATION_METHOD, APPLICATION). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
	// Detect traffic drops
	TrafficDrops WebAppAnomaliesTrafficDropsOutput `pulumi:"trafficDrops"`
	// Detect traffic spikes
	TrafficSpikes WebAppAnomaliesTrafficSpikesOutput `pulumi:"trafficSpikes"`
}

// NewWebAppAnomalies registers a new resource with the given unique name, arguments, and options.
func NewWebAppAnomalies(ctx *pulumi.Context,
	name string, args *WebAppAnomaliesArgs, opts ...pulumi.ResourceOption) (*WebAppAnomalies, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ErrorRate == nil {
		return nil, errors.New("invalid value for required argument 'ErrorRate'")
	}
	if args.ResponseTime == nil {
		return nil, errors.New("invalid value for required argument 'ResponseTime'")
	}
	if args.TrafficDrops == nil {
		return nil, errors.New("invalid value for required argument 'TrafficDrops'")
	}
	if args.TrafficSpikes == nil {
		return nil, errors.New("invalid value for required argument 'TrafficSpikes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WebAppAnomalies
	err := ctx.RegisterResource("dynatrace:index/webAppAnomalies:WebAppAnomalies", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebAppAnomalies gets an existing WebAppAnomalies resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebAppAnomalies(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebAppAnomaliesState, opts ...pulumi.ResourceOption) (*WebAppAnomalies, error) {
	var resource WebAppAnomalies
	err := ctx.ReadResource("dynatrace:index/webAppAnomalies:WebAppAnomalies", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WebAppAnomalies resources.
type webAppAnomaliesState struct {
	// Error rate
	ErrorRate *WebAppAnomaliesErrorRate `pulumi:"errorRate"`
	// Response time
	ResponseTime *WebAppAnomaliesResponseTime `pulumi:"responseTime"`
	// The scope of this setting (APPLICATION_METHOD, APPLICATION). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
	// Detect traffic drops
	TrafficDrops *WebAppAnomaliesTrafficDrops `pulumi:"trafficDrops"`
	// Detect traffic spikes
	TrafficSpikes *WebAppAnomaliesTrafficSpikes `pulumi:"trafficSpikes"`
}

type WebAppAnomaliesState struct {
	// Error rate
	ErrorRate WebAppAnomaliesErrorRatePtrInput
	// Response time
	ResponseTime WebAppAnomaliesResponseTimePtrInput
	// The scope of this setting (APPLICATION_METHOD, APPLICATION). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
	// Detect traffic drops
	TrafficDrops WebAppAnomaliesTrafficDropsPtrInput
	// Detect traffic spikes
	TrafficSpikes WebAppAnomaliesTrafficSpikesPtrInput
}

func (WebAppAnomaliesState) ElementType() reflect.Type {
	return reflect.TypeOf((*webAppAnomaliesState)(nil)).Elem()
}

type webAppAnomaliesArgs struct {
	// Error rate
	ErrorRate WebAppAnomaliesErrorRate `pulumi:"errorRate"`
	// Response time
	ResponseTime WebAppAnomaliesResponseTime `pulumi:"responseTime"`
	// The scope of this setting (APPLICATION_METHOD, APPLICATION). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
	// Detect traffic drops
	TrafficDrops WebAppAnomaliesTrafficDrops `pulumi:"trafficDrops"`
	// Detect traffic spikes
	TrafficSpikes WebAppAnomaliesTrafficSpikes `pulumi:"trafficSpikes"`
}

// The set of arguments for constructing a WebAppAnomalies resource.
type WebAppAnomaliesArgs struct {
	// Error rate
	ErrorRate WebAppAnomaliesErrorRateInput
	// Response time
	ResponseTime WebAppAnomaliesResponseTimeInput
	// The scope of this setting (APPLICATION_METHOD, APPLICATION). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
	// Detect traffic drops
	TrafficDrops WebAppAnomaliesTrafficDropsInput
	// Detect traffic spikes
	TrafficSpikes WebAppAnomaliesTrafficSpikesInput
}

func (WebAppAnomaliesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webAppAnomaliesArgs)(nil)).Elem()
}

type WebAppAnomaliesInput interface {
	pulumi.Input

	ToWebAppAnomaliesOutput() WebAppAnomaliesOutput
	ToWebAppAnomaliesOutputWithContext(ctx context.Context) WebAppAnomaliesOutput
}

func (*WebAppAnomalies) ElementType() reflect.Type {
	return reflect.TypeOf((**WebAppAnomalies)(nil)).Elem()
}

func (i *WebAppAnomalies) ToWebAppAnomaliesOutput() WebAppAnomaliesOutput {
	return i.ToWebAppAnomaliesOutputWithContext(context.Background())
}

func (i *WebAppAnomalies) ToWebAppAnomaliesOutputWithContext(ctx context.Context) WebAppAnomaliesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAppAnomaliesOutput)
}

// WebAppAnomaliesArrayInput is an input type that accepts WebAppAnomaliesArray and WebAppAnomaliesArrayOutput values.
// You can construct a concrete instance of `WebAppAnomaliesArrayInput` via:
//
//	WebAppAnomaliesArray{ WebAppAnomaliesArgs{...} }
type WebAppAnomaliesArrayInput interface {
	pulumi.Input

	ToWebAppAnomaliesArrayOutput() WebAppAnomaliesArrayOutput
	ToWebAppAnomaliesArrayOutputWithContext(context.Context) WebAppAnomaliesArrayOutput
}

type WebAppAnomaliesArray []WebAppAnomaliesInput

func (WebAppAnomaliesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebAppAnomalies)(nil)).Elem()
}

func (i WebAppAnomaliesArray) ToWebAppAnomaliesArrayOutput() WebAppAnomaliesArrayOutput {
	return i.ToWebAppAnomaliesArrayOutputWithContext(context.Background())
}

func (i WebAppAnomaliesArray) ToWebAppAnomaliesArrayOutputWithContext(ctx context.Context) WebAppAnomaliesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAppAnomaliesArrayOutput)
}

// WebAppAnomaliesMapInput is an input type that accepts WebAppAnomaliesMap and WebAppAnomaliesMapOutput values.
// You can construct a concrete instance of `WebAppAnomaliesMapInput` via:
//
//	WebAppAnomaliesMap{ "key": WebAppAnomaliesArgs{...} }
type WebAppAnomaliesMapInput interface {
	pulumi.Input

	ToWebAppAnomaliesMapOutput() WebAppAnomaliesMapOutput
	ToWebAppAnomaliesMapOutputWithContext(context.Context) WebAppAnomaliesMapOutput
}

type WebAppAnomaliesMap map[string]WebAppAnomaliesInput

func (WebAppAnomaliesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebAppAnomalies)(nil)).Elem()
}

func (i WebAppAnomaliesMap) ToWebAppAnomaliesMapOutput() WebAppAnomaliesMapOutput {
	return i.ToWebAppAnomaliesMapOutputWithContext(context.Background())
}

func (i WebAppAnomaliesMap) ToWebAppAnomaliesMapOutputWithContext(ctx context.Context) WebAppAnomaliesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAppAnomaliesMapOutput)
}

type WebAppAnomaliesOutput struct{ *pulumi.OutputState }

func (WebAppAnomaliesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebAppAnomalies)(nil)).Elem()
}

func (o WebAppAnomaliesOutput) ToWebAppAnomaliesOutput() WebAppAnomaliesOutput {
	return o
}

func (o WebAppAnomaliesOutput) ToWebAppAnomaliesOutputWithContext(ctx context.Context) WebAppAnomaliesOutput {
	return o
}

// Error rate
func (o WebAppAnomaliesOutput) ErrorRate() WebAppAnomaliesErrorRateOutput {
	return o.ApplyT(func(v *WebAppAnomalies) WebAppAnomaliesErrorRateOutput { return v.ErrorRate }).(WebAppAnomaliesErrorRateOutput)
}

// Response time
func (o WebAppAnomaliesOutput) ResponseTime() WebAppAnomaliesResponseTimeOutput {
	return o.ApplyT(func(v *WebAppAnomalies) WebAppAnomaliesResponseTimeOutput { return v.ResponseTime }).(WebAppAnomaliesResponseTimeOutput)
}

// The scope of this setting (APPLICATION_METHOD, APPLICATION). Omit this property if you want to cover the whole environment.
func (o WebAppAnomaliesOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebAppAnomalies) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

// Detect traffic drops
func (o WebAppAnomaliesOutput) TrafficDrops() WebAppAnomaliesTrafficDropsOutput {
	return o.ApplyT(func(v *WebAppAnomalies) WebAppAnomaliesTrafficDropsOutput { return v.TrafficDrops }).(WebAppAnomaliesTrafficDropsOutput)
}

// Detect traffic spikes
func (o WebAppAnomaliesOutput) TrafficSpikes() WebAppAnomaliesTrafficSpikesOutput {
	return o.ApplyT(func(v *WebAppAnomalies) WebAppAnomaliesTrafficSpikesOutput { return v.TrafficSpikes }).(WebAppAnomaliesTrafficSpikesOutput)
}

type WebAppAnomaliesArrayOutput struct{ *pulumi.OutputState }

func (WebAppAnomaliesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebAppAnomalies)(nil)).Elem()
}

func (o WebAppAnomaliesArrayOutput) ToWebAppAnomaliesArrayOutput() WebAppAnomaliesArrayOutput {
	return o
}

func (o WebAppAnomaliesArrayOutput) ToWebAppAnomaliesArrayOutputWithContext(ctx context.Context) WebAppAnomaliesArrayOutput {
	return o
}

func (o WebAppAnomaliesArrayOutput) Index(i pulumi.IntInput) WebAppAnomaliesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WebAppAnomalies {
		return vs[0].([]*WebAppAnomalies)[vs[1].(int)]
	}).(WebAppAnomaliesOutput)
}

type WebAppAnomaliesMapOutput struct{ *pulumi.OutputState }

func (WebAppAnomaliesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebAppAnomalies)(nil)).Elem()
}

func (o WebAppAnomaliesMapOutput) ToWebAppAnomaliesMapOutput() WebAppAnomaliesMapOutput {
	return o
}

func (o WebAppAnomaliesMapOutput) ToWebAppAnomaliesMapOutputWithContext(ctx context.Context) WebAppAnomaliesMapOutput {
	return o
}

func (o WebAppAnomaliesMapOutput) MapIndex(k pulumi.StringInput) WebAppAnomaliesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WebAppAnomalies {
		return vs[0].(map[string]*WebAppAnomalies)[vs[1].(string)]
	}).(WebAppAnomaliesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WebAppAnomaliesInput)(nil)).Elem(), &WebAppAnomalies{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebAppAnomaliesArrayInput)(nil)).Elem(), WebAppAnomaliesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebAppAnomaliesMapInput)(nil)).Elem(), WebAppAnomaliesMap{})
	pulumi.RegisterOutputType(WebAppAnomaliesOutput{})
	pulumi.RegisterOutputType(WebAppAnomaliesArrayOutput{})
	pulumi.RegisterOutputType(WebAppAnomaliesMapOutput{})
}
