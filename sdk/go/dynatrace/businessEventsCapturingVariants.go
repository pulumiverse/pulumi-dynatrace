// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type BusinessEventsCapturingVariants struct {
	pulumi.CustomResourceState

	// Possible Values: `CONTAINS`, `ENDS_WITH`, `EQUALS`, `STARTS_WITH`
	ContentTypeMatcher pulumi.StringOutput `pulumi:"contentTypeMatcher"`
	// Content-type match value
	ContentTypeValue pulumi.StringOutput `pulumi:"contentTypeValue"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringOutput `pulumi:"insertAfter"`
	// Possible Values: `JSON`, `Raw`, `Text`, `URLencoded`, `XML`
	Parser pulumi.StringOutput `pulumi:"parser"`
	// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
}

// NewBusinessEventsCapturingVariants registers a new resource with the given unique name, arguments, and options.
func NewBusinessEventsCapturingVariants(ctx *pulumi.Context,
	name string, args *BusinessEventsCapturingVariantsArgs, opts ...pulumi.ResourceOption) (*BusinessEventsCapturingVariants, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContentTypeMatcher == nil {
		return nil, errors.New("invalid value for required argument 'ContentTypeMatcher'")
	}
	if args.ContentTypeValue == nil {
		return nil, errors.New("invalid value for required argument 'ContentTypeValue'")
	}
	if args.Parser == nil {
		return nil, errors.New("invalid value for required argument 'Parser'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BusinessEventsCapturingVariants
	err := ctx.RegisterResource("dynatrace:index/businessEventsCapturingVariants:BusinessEventsCapturingVariants", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBusinessEventsCapturingVariants gets an existing BusinessEventsCapturingVariants resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBusinessEventsCapturingVariants(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BusinessEventsCapturingVariantsState, opts ...pulumi.ResourceOption) (*BusinessEventsCapturingVariants, error) {
	var resource BusinessEventsCapturingVariants
	err := ctx.ReadResource("dynatrace:index/businessEventsCapturingVariants:BusinessEventsCapturingVariants", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BusinessEventsCapturingVariants resources.
type businessEventsCapturingVariantsState struct {
	// Possible Values: `CONTAINS`, `ENDS_WITH`, `EQUALS`, `STARTS_WITH`
	ContentTypeMatcher *string `pulumi:"contentTypeMatcher"`
	// Content-type match value
	ContentTypeValue *string `pulumi:"contentTypeValue"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `pulumi:"insertAfter"`
	// Possible Values: `JSON`, `Raw`, `Text`, `URLencoded`, `XML`
	Parser *string `pulumi:"parser"`
	// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
}

type BusinessEventsCapturingVariantsState struct {
	// Possible Values: `CONTAINS`, `ENDS_WITH`, `EQUALS`, `STARTS_WITH`
	ContentTypeMatcher pulumi.StringPtrInput
	// Content-type match value
	ContentTypeValue pulumi.StringPtrInput
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringPtrInput
	// Possible Values: `JSON`, `Raw`, `Text`, `URLencoded`, `XML`
	Parser pulumi.StringPtrInput
	// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
}

func (BusinessEventsCapturingVariantsState) ElementType() reflect.Type {
	return reflect.TypeOf((*businessEventsCapturingVariantsState)(nil)).Elem()
}

type businessEventsCapturingVariantsArgs struct {
	// Possible Values: `CONTAINS`, `ENDS_WITH`, `EQUALS`, `STARTS_WITH`
	ContentTypeMatcher string `pulumi:"contentTypeMatcher"`
	// Content-type match value
	ContentTypeValue string `pulumi:"contentTypeValue"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `pulumi:"insertAfter"`
	// Possible Values: `JSON`, `Raw`, `Text`, `URLencoded`, `XML`
	Parser string `pulumi:"parser"`
	// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
}

// The set of arguments for constructing a BusinessEventsCapturingVariants resource.
type BusinessEventsCapturingVariantsArgs struct {
	// Possible Values: `CONTAINS`, `ENDS_WITH`, `EQUALS`, `STARTS_WITH`
	ContentTypeMatcher pulumi.StringInput
	// Content-type match value
	ContentTypeValue pulumi.StringInput
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringPtrInput
	// Possible Values: `JSON`, `Raw`, `Text`, `URLencoded`, `XML`
	Parser pulumi.StringInput
	// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
}

func (BusinessEventsCapturingVariantsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*businessEventsCapturingVariantsArgs)(nil)).Elem()
}

type BusinessEventsCapturingVariantsInput interface {
	pulumi.Input

	ToBusinessEventsCapturingVariantsOutput() BusinessEventsCapturingVariantsOutput
	ToBusinessEventsCapturingVariantsOutputWithContext(ctx context.Context) BusinessEventsCapturingVariantsOutput
}

func (*BusinessEventsCapturingVariants) ElementType() reflect.Type {
	return reflect.TypeOf((**BusinessEventsCapturingVariants)(nil)).Elem()
}

func (i *BusinessEventsCapturingVariants) ToBusinessEventsCapturingVariantsOutput() BusinessEventsCapturingVariantsOutput {
	return i.ToBusinessEventsCapturingVariantsOutputWithContext(context.Background())
}

func (i *BusinessEventsCapturingVariants) ToBusinessEventsCapturingVariantsOutputWithContext(ctx context.Context) BusinessEventsCapturingVariantsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessEventsCapturingVariantsOutput)
}

// BusinessEventsCapturingVariantsArrayInput is an input type that accepts BusinessEventsCapturingVariantsArray and BusinessEventsCapturingVariantsArrayOutput values.
// You can construct a concrete instance of `BusinessEventsCapturingVariantsArrayInput` via:
//
//	BusinessEventsCapturingVariantsArray{ BusinessEventsCapturingVariantsArgs{...} }
type BusinessEventsCapturingVariantsArrayInput interface {
	pulumi.Input

	ToBusinessEventsCapturingVariantsArrayOutput() BusinessEventsCapturingVariantsArrayOutput
	ToBusinessEventsCapturingVariantsArrayOutputWithContext(context.Context) BusinessEventsCapturingVariantsArrayOutput
}

type BusinessEventsCapturingVariantsArray []BusinessEventsCapturingVariantsInput

func (BusinessEventsCapturingVariantsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BusinessEventsCapturingVariants)(nil)).Elem()
}

func (i BusinessEventsCapturingVariantsArray) ToBusinessEventsCapturingVariantsArrayOutput() BusinessEventsCapturingVariantsArrayOutput {
	return i.ToBusinessEventsCapturingVariantsArrayOutputWithContext(context.Background())
}

func (i BusinessEventsCapturingVariantsArray) ToBusinessEventsCapturingVariantsArrayOutputWithContext(ctx context.Context) BusinessEventsCapturingVariantsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessEventsCapturingVariantsArrayOutput)
}

// BusinessEventsCapturingVariantsMapInput is an input type that accepts BusinessEventsCapturingVariantsMap and BusinessEventsCapturingVariantsMapOutput values.
// You can construct a concrete instance of `BusinessEventsCapturingVariantsMapInput` via:
//
//	BusinessEventsCapturingVariantsMap{ "key": BusinessEventsCapturingVariantsArgs{...} }
type BusinessEventsCapturingVariantsMapInput interface {
	pulumi.Input

	ToBusinessEventsCapturingVariantsMapOutput() BusinessEventsCapturingVariantsMapOutput
	ToBusinessEventsCapturingVariantsMapOutputWithContext(context.Context) BusinessEventsCapturingVariantsMapOutput
}

type BusinessEventsCapturingVariantsMap map[string]BusinessEventsCapturingVariantsInput

func (BusinessEventsCapturingVariantsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BusinessEventsCapturingVariants)(nil)).Elem()
}

func (i BusinessEventsCapturingVariantsMap) ToBusinessEventsCapturingVariantsMapOutput() BusinessEventsCapturingVariantsMapOutput {
	return i.ToBusinessEventsCapturingVariantsMapOutputWithContext(context.Background())
}

func (i BusinessEventsCapturingVariantsMap) ToBusinessEventsCapturingVariantsMapOutputWithContext(ctx context.Context) BusinessEventsCapturingVariantsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessEventsCapturingVariantsMapOutput)
}

type BusinessEventsCapturingVariantsOutput struct{ *pulumi.OutputState }

func (BusinessEventsCapturingVariantsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BusinessEventsCapturingVariants)(nil)).Elem()
}

func (o BusinessEventsCapturingVariantsOutput) ToBusinessEventsCapturingVariantsOutput() BusinessEventsCapturingVariantsOutput {
	return o
}

func (o BusinessEventsCapturingVariantsOutput) ToBusinessEventsCapturingVariantsOutputWithContext(ctx context.Context) BusinessEventsCapturingVariantsOutput {
	return o
}

// Possible Values: `CONTAINS`, `ENDS_WITH`, `EQUALS`, `STARTS_WITH`
func (o BusinessEventsCapturingVariantsOutput) ContentTypeMatcher() pulumi.StringOutput {
	return o.ApplyT(func(v *BusinessEventsCapturingVariants) pulumi.StringOutput { return v.ContentTypeMatcher }).(pulumi.StringOutput)
}

// Content-type match value
func (o BusinessEventsCapturingVariantsOutput) ContentTypeValue() pulumi.StringOutput {
	return o.ApplyT(func(v *BusinessEventsCapturingVariants) pulumi.StringOutput { return v.ContentTypeValue }).(pulumi.StringOutput)
}

// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
func (o BusinessEventsCapturingVariantsOutput) InsertAfter() pulumi.StringOutput {
	return o.ApplyT(func(v *BusinessEventsCapturingVariants) pulumi.StringOutput { return v.InsertAfter }).(pulumi.StringOutput)
}

// Possible Values: `JSON`, `Raw`, `Text`, `URLencoded`, `XML`
func (o BusinessEventsCapturingVariantsOutput) Parser() pulumi.StringOutput {
	return o.ApplyT(func(v *BusinessEventsCapturingVariants) pulumi.StringOutput { return v.Parser }).(pulumi.StringOutput)
}

// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
func (o BusinessEventsCapturingVariantsOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BusinessEventsCapturingVariants) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

type BusinessEventsCapturingVariantsArrayOutput struct{ *pulumi.OutputState }

func (BusinessEventsCapturingVariantsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BusinessEventsCapturingVariants)(nil)).Elem()
}

func (o BusinessEventsCapturingVariantsArrayOutput) ToBusinessEventsCapturingVariantsArrayOutput() BusinessEventsCapturingVariantsArrayOutput {
	return o
}

func (o BusinessEventsCapturingVariantsArrayOutput) ToBusinessEventsCapturingVariantsArrayOutputWithContext(ctx context.Context) BusinessEventsCapturingVariantsArrayOutput {
	return o
}

func (o BusinessEventsCapturingVariantsArrayOutput) Index(i pulumi.IntInput) BusinessEventsCapturingVariantsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BusinessEventsCapturingVariants {
		return vs[0].([]*BusinessEventsCapturingVariants)[vs[1].(int)]
	}).(BusinessEventsCapturingVariantsOutput)
}

type BusinessEventsCapturingVariantsMapOutput struct{ *pulumi.OutputState }

func (BusinessEventsCapturingVariantsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BusinessEventsCapturingVariants)(nil)).Elem()
}

func (o BusinessEventsCapturingVariantsMapOutput) ToBusinessEventsCapturingVariantsMapOutput() BusinessEventsCapturingVariantsMapOutput {
	return o
}

func (o BusinessEventsCapturingVariantsMapOutput) ToBusinessEventsCapturingVariantsMapOutputWithContext(ctx context.Context) BusinessEventsCapturingVariantsMapOutput {
	return o
}

func (o BusinessEventsCapturingVariantsMapOutput) MapIndex(k pulumi.StringInput) BusinessEventsCapturingVariantsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BusinessEventsCapturingVariants {
		return vs[0].(map[string]*BusinessEventsCapturingVariants)[vs[1].(string)]
	}).(BusinessEventsCapturingVariantsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BusinessEventsCapturingVariantsInput)(nil)).Elem(), &BusinessEventsCapturingVariants{})
	pulumi.RegisterInputType(reflect.TypeOf((*BusinessEventsCapturingVariantsArrayInput)(nil)).Elem(), BusinessEventsCapturingVariantsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BusinessEventsCapturingVariantsMapInput)(nil)).Elem(), BusinessEventsCapturingVariantsMap{})
	pulumi.RegisterOutputType(BusinessEventsCapturingVariantsOutput{})
	pulumi.RegisterOutputType(BusinessEventsCapturingVariantsArrayOutput{})
	pulumi.RegisterOutputType(BusinessEventsCapturingVariantsMapOutput{})
}
