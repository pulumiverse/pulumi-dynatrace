// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OpenpipelineUserSessions struct {
	pulumi.CustomResourceState

	// List of all ingest sources of the configuration
	Endpoints OpenpipelineUserSessionsEndpointsPtrOutput `pulumi:"endpoints"`
	// List of all pipelines of the configuration
	Pipelines OpenpipelineUserSessionsPipelinesPtrOutput `pulumi:"pipelines"`
	// Dynamic routing definition
	Routing OpenpipelineUserSessionsRoutingPtrOutput `pulumi:"routing"`
}

// NewOpenpipelineUserSessions registers a new resource with the given unique name, arguments, and options.
func NewOpenpipelineUserSessions(ctx *pulumi.Context,
	name string, args *OpenpipelineUserSessionsArgs, opts ...pulumi.ResourceOption) (*OpenpipelineUserSessions, error) {
	if args == nil {
		args = &OpenpipelineUserSessionsArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenpipelineUserSessions
	err := ctx.RegisterResource("dynatrace:index/openpipelineUserSessions:OpenpipelineUserSessions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenpipelineUserSessions gets an existing OpenpipelineUserSessions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenpipelineUserSessions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenpipelineUserSessionsState, opts ...pulumi.ResourceOption) (*OpenpipelineUserSessions, error) {
	var resource OpenpipelineUserSessions
	err := ctx.ReadResource("dynatrace:index/openpipelineUserSessions:OpenpipelineUserSessions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenpipelineUserSessions resources.
type openpipelineUserSessionsState struct {
	// List of all ingest sources of the configuration
	Endpoints *OpenpipelineUserSessionsEndpoints `pulumi:"endpoints"`
	// List of all pipelines of the configuration
	Pipelines *OpenpipelineUserSessionsPipelines `pulumi:"pipelines"`
	// Dynamic routing definition
	Routing *OpenpipelineUserSessionsRouting `pulumi:"routing"`
}

type OpenpipelineUserSessionsState struct {
	// List of all ingest sources of the configuration
	Endpoints OpenpipelineUserSessionsEndpointsPtrInput
	// List of all pipelines of the configuration
	Pipelines OpenpipelineUserSessionsPipelinesPtrInput
	// Dynamic routing definition
	Routing OpenpipelineUserSessionsRoutingPtrInput
}

func (OpenpipelineUserSessionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineUserSessionsState)(nil)).Elem()
}

type openpipelineUserSessionsArgs struct {
	// List of all ingest sources of the configuration
	Endpoints *OpenpipelineUserSessionsEndpoints `pulumi:"endpoints"`
	// List of all pipelines of the configuration
	Pipelines *OpenpipelineUserSessionsPipelines `pulumi:"pipelines"`
	// Dynamic routing definition
	Routing *OpenpipelineUserSessionsRouting `pulumi:"routing"`
}

// The set of arguments for constructing a OpenpipelineUserSessions resource.
type OpenpipelineUserSessionsArgs struct {
	// List of all ingest sources of the configuration
	Endpoints OpenpipelineUserSessionsEndpointsPtrInput
	// List of all pipelines of the configuration
	Pipelines OpenpipelineUserSessionsPipelinesPtrInput
	// Dynamic routing definition
	Routing OpenpipelineUserSessionsRoutingPtrInput
}

func (OpenpipelineUserSessionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineUserSessionsArgs)(nil)).Elem()
}

type OpenpipelineUserSessionsInput interface {
	pulumi.Input

	ToOpenpipelineUserSessionsOutput() OpenpipelineUserSessionsOutput
	ToOpenpipelineUserSessionsOutputWithContext(ctx context.Context) OpenpipelineUserSessionsOutput
}

func (*OpenpipelineUserSessions) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineUserSessions)(nil)).Elem()
}

func (i *OpenpipelineUserSessions) ToOpenpipelineUserSessionsOutput() OpenpipelineUserSessionsOutput {
	return i.ToOpenpipelineUserSessionsOutputWithContext(context.Background())
}

func (i *OpenpipelineUserSessions) ToOpenpipelineUserSessionsOutputWithContext(ctx context.Context) OpenpipelineUserSessionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineUserSessionsOutput)
}

// OpenpipelineUserSessionsArrayInput is an input type that accepts OpenpipelineUserSessionsArray and OpenpipelineUserSessionsArrayOutput values.
// You can construct a concrete instance of `OpenpipelineUserSessionsArrayInput` via:
//
//	OpenpipelineUserSessionsArray{ OpenpipelineUserSessionsArgs{...} }
type OpenpipelineUserSessionsArrayInput interface {
	pulumi.Input

	ToOpenpipelineUserSessionsArrayOutput() OpenpipelineUserSessionsArrayOutput
	ToOpenpipelineUserSessionsArrayOutputWithContext(context.Context) OpenpipelineUserSessionsArrayOutput
}

type OpenpipelineUserSessionsArray []OpenpipelineUserSessionsInput

func (OpenpipelineUserSessionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineUserSessions)(nil)).Elem()
}

func (i OpenpipelineUserSessionsArray) ToOpenpipelineUserSessionsArrayOutput() OpenpipelineUserSessionsArrayOutput {
	return i.ToOpenpipelineUserSessionsArrayOutputWithContext(context.Background())
}

func (i OpenpipelineUserSessionsArray) ToOpenpipelineUserSessionsArrayOutputWithContext(ctx context.Context) OpenpipelineUserSessionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineUserSessionsArrayOutput)
}

// OpenpipelineUserSessionsMapInput is an input type that accepts OpenpipelineUserSessionsMap and OpenpipelineUserSessionsMapOutput values.
// You can construct a concrete instance of `OpenpipelineUserSessionsMapInput` via:
//
//	OpenpipelineUserSessionsMap{ "key": OpenpipelineUserSessionsArgs{...} }
type OpenpipelineUserSessionsMapInput interface {
	pulumi.Input

	ToOpenpipelineUserSessionsMapOutput() OpenpipelineUserSessionsMapOutput
	ToOpenpipelineUserSessionsMapOutputWithContext(context.Context) OpenpipelineUserSessionsMapOutput
}

type OpenpipelineUserSessionsMap map[string]OpenpipelineUserSessionsInput

func (OpenpipelineUserSessionsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineUserSessions)(nil)).Elem()
}

func (i OpenpipelineUserSessionsMap) ToOpenpipelineUserSessionsMapOutput() OpenpipelineUserSessionsMapOutput {
	return i.ToOpenpipelineUserSessionsMapOutputWithContext(context.Background())
}

func (i OpenpipelineUserSessionsMap) ToOpenpipelineUserSessionsMapOutputWithContext(ctx context.Context) OpenpipelineUserSessionsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineUserSessionsMapOutput)
}

type OpenpipelineUserSessionsOutput struct{ *pulumi.OutputState }

func (OpenpipelineUserSessionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineUserSessions)(nil)).Elem()
}

func (o OpenpipelineUserSessionsOutput) ToOpenpipelineUserSessionsOutput() OpenpipelineUserSessionsOutput {
	return o
}

func (o OpenpipelineUserSessionsOutput) ToOpenpipelineUserSessionsOutputWithContext(ctx context.Context) OpenpipelineUserSessionsOutput {
	return o
}

// List of all ingest sources of the configuration
func (o OpenpipelineUserSessionsOutput) Endpoints() OpenpipelineUserSessionsEndpointsPtrOutput {
	return o.ApplyT(func(v *OpenpipelineUserSessions) OpenpipelineUserSessionsEndpointsPtrOutput { return v.Endpoints }).(OpenpipelineUserSessionsEndpointsPtrOutput)
}

// List of all pipelines of the configuration
func (o OpenpipelineUserSessionsOutput) Pipelines() OpenpipelineUserSessionsPipelinesPtrOutput {
	return o.ApplyT(func(v *OpenpipelineUserSessions) OpenpipelineUserSessionsPipelinesPtrOutput { return v.Pipelines }).(OpenpipelineUserSessionsPipelinesPtrOutput)
}

// Dynamic routing definition
func (o OpenpipelineUserSessionsOutput) Routing() OpenpipelineUserSessionsRoutingPtrOutput {
	return o.ApplyT(func(v *OpenpipelineUserSessions) OpenpipelineUserSessionsRoutingPtrOutput { return v.Routing }).(OpenpipelineUserSessionsRoutingPtrOutput)
}

type OpenpipelineUserSessionsArrayOutput struct{ *pulumi.OutputState }

func (OpenpipelineUserSessionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineUserSessions)(nil)).Elem()
}

func (o OpenpipelineUserSessionsArrayOutput) ToOpenpipelineUserSessionsArrayOutput() OpenpipelineUserSessionsArrayOutput {
	return o
}

func (o OpenpipelineUserSessionsArrayOutput) ToOpenpipelineUserSessionsArrayOutputWithContext(ctx context.Context) OpenpipelineUserSessionsArrayOutput {
	return o
}

func (o OpenpipelineUserSessionsArrayOutput) Index(i pulumi.IntInput) OpenpipelineUserSessionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenpipelineUserSessions {
		return vs[0].([]*OpenpipelineUserSessions)[vs[1].(int)]
	}).(OpenpipelineUserSessionsOutput)
}

type OpenpipelineUserSessionsMapOutput struct{ *pulumi.OutputState }

func (OpenpipelineUserSessionsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineUserSessions)(nil)).Elem()
}

func (o OpenpipelineUserSessionsMapOutput) ToOpenpipelineUserSessionsMapOutput() OpenpipelineUserSessionsMapOutput {
	return o
}

func (o OpenpipelineUserSessionsMapOutput) ToOpenpipelineUserSessionsMapOutputWithContext(ctx context.Context) OpenpipelineUserSessionsMapOutput {
	return o
}

func (o OpenpipelineUserSessionsMapOutput) MapIndex(k pulumi.StringInput) OpenpipelineUserSessionsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenpipelineUserSessions {
		return vs[0].(map[string]*OpenpipelineUserSessions)[vs[1].(string)]
	}).(OpenpipelineUserSessionsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineUserSessionsInput)(nil)).Elem(), &OpenpipelineUserSessions{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineUserSessionsArrayInput)(nil)).Elem(), OpenpipelineUserSessionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineUserSessionsMapInput)(nil)).Elem(), OpenpipelineUserSessionsMap{})
	pulumi.RegisterOutputType(OpenpipelineUserSessionsOutput{})
	pulumi.RegisterOutputType(OpenpipelineUserSessionsArrayOutput{})
	pulumi.RegisterOutputType(OpenpipelineUserSessionsMapOutput{})
}
