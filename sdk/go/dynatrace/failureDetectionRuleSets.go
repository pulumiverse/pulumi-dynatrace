// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

// > This resource requires the API token scopes **Read settings** (`settings.read`) and **Write settings** (`settings.write`)
//
// ## Dynatrace Documentation
//
// - Customize failure detection in Service Detection v2 - https://docs.dynatrace.com/docs/observe/applications-and-microservices/services/service-detection-v2/failure-detection-v2
//
// - Settings API - https://www.dynatrace.com/support/help/dynatrace-api/environment-api/settings (schemaId: `builtin:failure-detection-rulesets`)
//
// ## Resource Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dynatrace.NewFailureDetectionRuleSets(ctx, "#name#", &dynatrace.FailureDetectionRuleSetsArgs{
//				Enabled: pulumi.Bool(false),
//				Ruleset: &dynatrace.FailureDetectionRuleSetsRulesetArgs{
//					Condition:   pulumi.String("matchesValue(k8s.cluster.name,\"#name#\")"),
//					Description: pulumi.String("This is a sample description"),
//					FailOnExceptions: &dynatrace.FailureDetectionRuleSetsRulesetFailOnExceptionsArgs{
//						Enabled: pulumi.Bool(true),
//					},
//					FailOnGrpcStatusCodes: &dynatrace.FailureDetectionRuleSetsRulesetFailOnGrpcStatusCodesArgs{
//						StatusCodes: pulumi.String("2,4,12,13,14,15"),
//					},
//					FailOnHttpResponseStatusCodes: &dynatrace.FailureDetectionRuleSetsRulesetFailOnHttpResponseStatusCodesArgs{
//						StatusCodes: pulumi.String("500-599"),
//					},
//					FailOnSpanStatusError: &dynatrace.FailureDetectionRuleSetsRulesetFailOnSpanStatusErrorArgs{
//						Enabled: pulumi.Bool(true),
//					},
//					Overrides: &dynatrace.FailureDetectionRuleSetsRulesetOverridesArgs{
//						ForceSuccessOnSpanStatusOk: &dynatrace.FailureDetectionRuleSetsRulesetOverridesForceSuccessOnSpanStatusOkArgs{
//							Enabled: pulumi.Bool(false),
//						},
//					},
//					RulesetName: pulumi.String("#name#"),
//				},
//				Scope: pulumi.String("environment"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type FailureDetectionRuleSets struct {
	pulumi.CustomResourceState

	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringOutput `pulumi:"insertAfter"`
	// Ruleset
	Ruleset FailureDetectionRuleSetsRulesetOutput `pulumi:"ruleset"`
	// The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
}

// NewFailureDetectionRuleSets registers a new resource with the given unique name, arguments, and options.
func NewFailureDetectionRuleSets(ctx *pulumi.Context,
	name string, args *FailureDetectionRuleSetsArgs, opts ...pulumi.ResourceOption) (*FailureDetectionRuleSets, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Ruleset == nil {
		return nil, errors.New("invalid value for required argument 'Ruleset'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FailureDetectionRuleSets
	err := ctx.RegisterResource("dynatrace:index/failureDetectionRuleSets:FailureDetectionRuleSets", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFailureDetectionRuleSets gets an existing FailureDetectionRuleSets resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFailureDetectionRuleSets(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FailureDetectionRuleSetsState, opts ...pulumi.ResourceOption) (*FailureDetectionRuleSets, error) {
	var resource FailureDetectionRuleSets
	err := ctx.ReadResource("dynatrace:index/failureDetectionRuleSets:FailureDetectionRuleSets", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FailureDetectionRuleSets resources.
type failureDetectionRuleSetsState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `pulumi:"insertAfter"`
	// Ruleset
	Ruleset *FailureDetectionRuleSetsRuleset `pulumi:"ruleset"`
	// The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
}

type FailureDetectionRuleSetsState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringPtrInput
	// Ruleset
	Ruleset FailureDetectionRuleSetsRulesetPtrInput
	// The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
}

func (FailureDetectionRuleSetsState) ElementType() reflect.Type {
	return reflect.TypeOf((*failureDetectionRuleSetsState)(nil)).Elem()
}

type failureDetectionRuleSetsArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `pulumi:"insertAfter"`
	// Ruleset
	Ruleset FailureDetectionRuleSetsRuleset `pulumi:"ruleset"`
	// The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
}

// The set of arguments for constructing a FailureDetectionRuleSets resource.
type FailureDetectionRuleSetsArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringPtrInput
	// Ruleset
	Ruleset FailureDetectionRuleSetsRulesetInput
	// The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
}

func (FailureDetectionRuleSetsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*failureDetectionRuleSetsArgs)(nil)).Elem()
}

type FailureDetectionRuleSetsInput interface {
	pulumi.Input

	ToFailureDetectionRuleSetsOutput() FailureDetectionRuleSetsOutput
	ToFailureDetectionRuleSetsOutputWithContext(ctx context.Context) FailureDetectionRuleSetsOutput
}

func (*FailureDetectionRuleSets) ElementType() reflect.Type {
	return reflect.TypeOf((**FailureDetectionRuleSets)(nil)).Elem()
}

func (i *FailureDetectionRuleSets) ToFailureDetectionRuleSetsOutput() FailureDetectionRuleSetsOutput {
	return i.ToFailureDetectionRuleSetsOutputWithContext(context.Background())
}

func (i *FailureDetectionRuleSets) ToFailureDetectionRuleSetsOutputWithContext(ctx context.Context) FailureDetectionRuleSetsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailureDetectionRuleSetsOutput)
}

// FailureDetectionRuleSetsArrayInput is an input type that accepts FailureDetectionRuleSetsArray and FailureDetectionRuleSetsArrayOutput values.
// You can construct a concrete instance of `FailureDetectionRuleSetsArrayInput` via:
//
//	FailureDetectionRuleSetsArray{ FailureDetectionRuleSetsArgs{...} }
type FailureDetectionRuleSetsArrayInput interface {
	pulumi.Input

	ToFailureDetectionRuleSetsArrayOutput() FailureDetectionRuleSetsArrayOutput
	ToFailureDetectionRuleSetsArrayOutputWithContext(context.Context) FailureDetectionRuleSetsArrayOutput
}

type FailureDetectionRuleSetsArray []FailureDetectionRuleSetsInput

func (FailureDetectionRuleSetsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FailureDetectionRuleSets)(nil)).Elem()
}

func (i FailureDetectionRuleSetsArray) ToFailureDetectionRuleSetsArrayOutput() FailureDetectionRuleSetsArrayOutput {
	return i.ToFailureDetectionRuleSetsArrayOutputWithContext(context.Background())
}

func (i FailureDetectionRuleSetsArray) ToFailureDetectionRuleSetsArrayOutputWithContext(ctx context.Context) FailureDetectionRuleSetsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailureDetectionRuleSetsArrayOutput)
}

// FailureDetectionRuleSetsMapInput is an input type that accepts FailureDetectionRuleSetsMap and FailureDetectionRuleSetsMapOutput values.
// You can construct a concrete instance of `FailureDetectionRuleSetsMapInput` via:
//
//	FailureDetectionRuleSetsMap{ "key": FailureDetectionRuleSetsArgs{...} }
type FailureDetectionRuleSetsMapInput interface {
	pulumi.Input

	ToFailureDetectionRuleSetsMapOutput() FailureDetectionRuleSetsMapOutput
	ToFailureDetectionRuleSetsMapOutputWithContext(context.Context) FailureDetectionRuleSetsMapOutput
}

type FailureDetectionRuleSetsMap map[string]FailureDetectionRuleSetsInput

func (FailureDetectionRuleSetsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FailureDetectionRuleSets)(nil)).Elem()
}

func (i FailureDetectionRuleSetsMap) ToFailureDetectionRuleSetsMapOutput() FailureDetectionRuleSetsMapOutput {
	return i.ToFailureDetectionRuleSetsMapOutputWithContext(context.Background())
}

func (i FailureDetectionRuleSetsMap) ToFailureDetectionRuleSetsMapOutputWithContext(ctx context.Context) FailureDetectionRuleSetsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailureDetectionRuleSetsMapOutput)
}

type FailureDetectionRuleSetsOutput struct{ *pulumi.OutputState }

func (FailureDetectionRuleSetsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FailureDetectionRuleSets)(nil)).Elem()
}

func (o FailureDetectionRuleSetsOutput) ToFailureDetectionRuleSetsOutput() FailureDetectionRuleSetsOutput {
	return o
}

func (o FailureDetectionRuleSetsOutput) ToFailureDetectionRuleSetsOutputWithContext(ctx context.Context) FailureDetectionRuleSetsOutput {
	return o
}

// This setting is enabled (`true`) or disabled (`false`)
func (o FailureDetectionRuleSetsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *FailureDetectionRuleSets) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
func (o FailureDetectionRuleSetsOutput) InsertAfter() pulumi.StringOutput {
	return o.ApplyT(func(v *FailureDetectionRuleSets) pulumi.StringOutput { return v.InsertAfter }).(pulumi.StringOutput)
}

// Ruleset
func (o FailureDetectionRuleSetsOutput) Ruleset() FailureDetectionRuleSetsRulesetOutput {
	return o.ApplyT(func(v *FailureDetectionRuleSets) FailureDetectionRuleSetsRulesetOutput { return v.Ruleset }).(FailureDetectionRuleSetsRulesetOutput)
}

// The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
func (o FailureDetectionRuleSetsOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FailureDetectionRuleSets) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

type FailureDetectionRuleSetsArrayOutput struct{ *pulumi.OutputState }

func (FailureDetectionRuleSetsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FailureDetectionRuleSets)(nil)).Elem()
}

func (o FailureDetectionRuleSetsArrayOutput) ToFailureDetectionRuleSetsArrayOutput() FailureDetectionRuleSetsArrayOutput {
	return o
}

func (o FailureDetectionRuleSetsArrayOutput) ToFailureDetectionRuleSetsArrayOutputWithContext(ctx context.Context) FailureDetectionRuleSetsArrayOutput {
	return o
}

func (o FailureDetectionRuleSetsArrayOutput) Index(i pulumi.IntInput) FailureDetectionRuleSetsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FailureDetectionRuleSets {
		return vs[0].([]*FailureDetectionRuleSets)[vs[1].(int)]
	}).(FailureDetectionRuleSetsOutput)
}

type FailureDetectionRuleSetsMapOutput struct{ *pulumi.OutputState }

func (FailureDetectionRuleSetsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FailureDetectionRuleSets)(nil)).Elem()
}

func (o FailureDetectionRuleSetsMapOutput) ToFailureDetectionRuleSetsMapOutput() FailureDetectionRuleSetsMapOutput {
	return o
}

func (o FailureDetectionRuleSetsMapOutput) ToFailureDetectionRuleSetsMapOutputWithContext(ctx context.Context) FailureDetectionRuleSetsMapOutput {
	return o
}

func (o FailureDetectionRuleSetsMapOutput) MapIndex(k pulumi.StringInput) FailureDetectionRuleSetsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FailureDetectionRuleSets {
		return vs[0].(map[string]*FailureDetectionRuleSets)[vs[1].(string)]
	}).(FailureDetectionRuleSetsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FailureDetectionRuleSetsInput)(nil)).Elem(), &FailureDetectionRuleSets{})
	pulumi.RegisterInputType(reflect.TypeOf((*FailureDetectionRuleSetsArrayInput)(nil)).Elem(), FailureDetectionRuleSetsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FailureDetectionRuleSetsMapInput)(nil)).Elem(), FailureDetectionRuleSetsMap{})
	pulumi.RegisterOutputType(FailureDetectionRuleSetsOutput{})
	pulumi.RegisterOutputType(FailureDetectionRuleSetsArrayOutput{})
	pulumi.RegisterOutputType(FailureDetectionRuleSetsMapOutput{})
}
