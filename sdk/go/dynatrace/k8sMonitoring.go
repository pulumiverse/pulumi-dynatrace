// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type K8sMonitoring struct {
	pulumi.CustomResourceState

	// Monitor Kubernetes namespaces, services, workloads, and pods
	CloudApplicationPipelineEnabled pulumi.BoolOutput `pulumi:"cloudApplicationPipelineEnabled"`
	// Define Kubernetes event filters to ingest events into your environment. For more details, see the
	// [documentation](https://dt-url.net/2201p0u).
	EventPatterns K8sMonitoringEventPatternsPtrOutput `pulumi:"eventPatterns"`
	// All events are monitored unless event filters are specified. All ingested events are subject to licensing by default.
	EventProcessingActive pulumi.BoolOutput `pulumi:"eventProcessingActive"`
	// Include only events specified by Events Field Selectors
	FilterEvents pulumi.BoolPtrOutput `pulumi:"filterEvents"`
	// For a list of included events, see the [documentation](https://dt-url.net/l61d02no).
	IncludeAllFdiEvents pulumi.BoolPtrOutput `pulumi:"includeAllFdiEvents"`
	// Workload and node resource metrics are based on a subset of cAdvisor metrics. Depending on your Kubernetes cluster size,
	// this may increase the CPU/memory resource consumption of your ActiveGate.
	OpenMetricsBuiltinEnabled pulumi.BoolOutput `pulumi:"openMetricsBuiltinEnabled"`
	// For annotation guidance, see the [documentation](https://dt-url.net/g42i0ppw).
	OpenMetricsPipelineEnabled pulumi.BoolOutput `pulumi:"openMetricsPipelineEnabled"`
	// To enable dashboards and alerts, add the Kubernetes persistent volume claims extension to your environment.
	//
	// Deprecated: This attribute is deprecated, see [this community guide](https://dt-url.net/v2200u4m) for details.
	PvcMonitoringEnabled pulumi.BoolPtrOutput `pulumi:"pvcMonitoringEnabled"`
	// The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
}

// NewK8sMonitoring registers a new resource with the given unique name, arguments, and options.
func NewK8sMonitoring(ctx *pulumi.Context,
	name string, args *K8sMonitoringArgs, opts ...pulumi.ResourceOption) (*K8sMonitoring, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CloudApplicationPipelineEnabled == nil {
		return nil, errors.New("invalid value for required argument 'CloudApplicationPipelineEnabled'")
	}
	if args.EventProcessingActive == nil {
		return nil, errors.New("invalid value for required argument 'EventProcessingActive'")
	}
	if args.OpenMetricsBuiltinEnabled == nil {
		return nil, errors.New("invalid value for required argument 'OpenMetricsBuiltinEnabled'")
	}
	if args.OpenMetricsPipelineEnabled == nil {
		return nil, errors.New("invalid value for required argument 'OpenMetricsPipelineEnabled'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource K8sMonitoring
	err := ctx.RegisterResource("dynatrace:index/k8sMonitoring:K8sMonitoring", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetK8sMonitoring gets an existing K8sMonitoring resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetK8sMonitoring(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *K8sMonitoringState, opts ...pulumi.ResourceOption) (*K8sMonitoring, error) {
	var resource K8sMonitoring
	err := ctx.ReadResource("dynatrace:index/k8sMonitoring:K8sMonitoring", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering K8sMonitoring resources.
type k8sMonitoringState struct {
	// Monitor Kubernetes namespaces, services, workloads, and pods
	CloudApplicationPipelineEnabled *bool `pulumi:"cloudApplicationPipelineEnabled"`
	// Define Kubernetes event filters to ingest events into your environment. For more details, see the
	// [documentation](https://dt-url.net/2201p0u).
	EventPatterns *K8sMonitoringEventPatterns `pulumi:"eventPatterns"`
	// All events are monitored unless event filters are specified. All ingested events are subject to licensing by default.
	EventProcessingActive *bool `pulumi:"eventProcessingActive"`
	// Include only events specified by Events Field Selectors
	FilterEvents *bool `pulumi:"filterEvents"`
	// For a list of included events, see the [documentation](https://dt-url.net/l61d02no).
	IncludeAllFdiEvents *bool `pulumi:"includeAllFdiEvents"`
	// Workload and node resource metrics are based on a subset of cAdvisor metrics. Depending on your Kubernetes cluster size,
	// this may increase the CPU/memory resource consumption of your ActiveGate.
	OpenMetricsBuiltinEnabled *bool `pulumi:"openMetricsBuiltinEnabled"`
	// For annotation guidance, see the [documentation](https://dt-url.net/g42i0ppw).
	OpenMetricsPipelineEnabled *bool `pulumi:"openMetricsPipelineEnabled"`
	// To enable dashboards and alerts, add the Kubernetes persistent volume claims extension to your environment.
	//
	// Deprecated: This attribute is deprecated, see [this community guide](https://dt-url.net/v2200u4m) for details.
	PvcMonitoringEnabled *bool `pulumi:"pvcMonitoringEnabled"`
	// The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
}

type K8sMonitoringState struct {
	// Monitor Kubernetes namespaces, services, workloads, and pods
	CloudApplicationPipelineEnabled pulumi.BoolPtrInput
	// Define Kubernetes event filters to ingest events into your environment. For more details, see the
	// [documentation](https://dt-url.net/2201p0u).
	EventPatterns K8sMonitoringEventPatternsPtrInput
	// All events are monitored unless event filters are specified. All ingested events are subject to licensing by default.
	EventProcessingActive pulumi.BoolPtrInput
	// Include only events specified by Events Field Selectors
	FilterEvents pulumi.BoolPtrInput
	// For a list of included events, see the [documentation](https://dt-url.net/l61d02no).
	IncludeAllFdiEvents pulumi.BoolPtrInput
	// Workload and node resource metrics are based on a subset of cAdvisor metrics. Depending on your Kubernetes cluster size,
	// this may increase the CPU/memory resource consumption of your ActiveGate.
	OpenMetricsBuiltinEnabled pulumi.BoolPtrInput
	// For annotation guidance, see the [documentation](https://dt-url.net/g42i0ppw).
	OpenMetricsPipelineEnabled pulumi.BoolPtrInput
	// To enable dashboards and alerts, add the Kubernetes persistent volume claims extension to your environment.
	//
	// Deprecated: This attribute is deprecated, see [this community guide](https://dt-url.net/v2200u4m) for details.
	PvcMonitoringEnabled pulumi.BoolPtrInput
	// The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
}

func (K8sMonitoringState) ElementType() reflect.Type {
	return reflect.TypeOf((*k8sMonitoringState)(nil)).Elem()
}

type k8sMonitoringArgs struct {
	// Monitor Kubernetes namespaces, services, workloads, and pods
	CloudApplicationPipelineEnabled bool `pulumi:"cloudApplicationPipelineEnabled"`
	// Define Kubernetes event filters to ingest events into your environment. For more details, see the
	// [documentation](https://dt-url.net/2201p0u).
	EventPatterns *K8sMonitoringEventPatterns `pulumi:"eventPatterns"`
	// All events are monitored unless event filters are specified. All ingested events are subject to licensing by default.
	EventProcessingActive bool `pulumi:"eventProcessingActive"`
	// Include only events specified by Events Field Selectors
	FilterEvents *bool `pulumi:"filterEvents"`
	// For a list of included events, see the [documentation](https://dt-url.net/l61d02no).
	IncludeAllFdiEvents *bool `pulumi:"includeAllFdiEvents"`
	// Workload and node resource metrics are based on a subset of cAdvisor metrics. Depending on your Kubernetes cluster size,
	// this may increase the CPU/memory resource consumption of your ActiveGate.
	OpenMetricsBuiltinEnabled bool `pulumi:"openMetricsBuiltinEnabled"`
	// For annotation guidance, see the [documentation](https://dt-url.net/g42i0ppw).
	OpenMetricsPipelineEnabled bool `pulumi:"openMetricsPipelineEnabled"`
	// To enable dashboards and alerts, add the Kubernetes persistent volume claims extension to your environment.
	//
	// Deprecated: This attribute is deprecated, see [this community guide](https://dt-url.net/v2200u4m) for details.
	PvcMonitoringEnabled *bool `pulumi:"pvcMonitoringEnabled"`
	// The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
}

// The set of arguments for constructing a K8sMonitoring resource.
type K8sMonitoringArgs struct {
	// Monitor Kubernetes namespaces, services, workloads, and pods
	CloudApplicationPipelineEnabled pulumi.BoolInput
	// Define Kubernetes event filters to ingest events into your environment. For more details, see the
	// [documentation](https://dt-url.net/2201p0u).
	EventPatterns K8sMonitoringEventPatternsPtrInput
	// All events are monitored unless event filters are specified. All ingested events are subject to licensing by default.
	EventProcessingActive pulumi.BoolInput
	// Include only events specified by Events Field Selectors
	FilterEvents pulumi.BoolPtrInput
	// For a list of included events, see the [documentation](https://dt-url.net/l61d02no).
	IncludeAllFdiEvents pulumi.BoolPtrInput
	// Workload and node resource metrics are based on a subset of cAdvisor metrics. Depending on your Kubernetes cluster size,
	// this may increase the CPU/memory resource consumption of your ActiveGate.
	OpenMetricsBuiltinEnabled pulumi.BoolInput
	// For annotation guidance, see the [documentation](https://dt-url.net/g42i0ppw).
	OpenMetricsPipelineEnabled pulumi.BoolInput
	// To enable dashboards and alerts, add the Kubernetes persistent volume claims extension to your environment.
	//
	// Deprecated: This attribute is deprecated, see [this community guide](https://dt-url.net/v2200u4m) for details.
	PvcMonitoringEnabled pulumi.BoolPtrInput
	// The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
}

func (K8sMonitoringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*k8sMonitoringArgs)(nil)).Elem()
}

type K8sMonitoringInput interface {
	pulumi.Input

	ToK8sMonitoringOutput() K8sMonitoringOutput
	ToK8sMonitoringOutputWithContext(ctx context.Context) K8sMonitoringOutput
}

func (*K8sMonitoring) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sMonitoring)(nil)).Elem()
}

func (i *K8sMonitoring) ToK8sMonitoringOutput() K8sMonitoringOutput {
	return i.ToK8sMonitoringOutputWithContext(context.Background())
}

func (i *K8sMonitoring) ToK8sMonitoringOutputWithContext(ctx context.Context) K8sMonitoringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sMonitoringOutput)
}

// K8sMonitoringArrayInput is an input type that accepts K8sMonitoringArray and K8sMonitoringArrayOutput values.
// You can construct a concrete instance of `K8sMonitoringArrayInput` via:
//
//	K8sMonitoringArray{ K8sMonitoringArgs{...} }
type K8sMonitoringArrayInput interface {
	pulumi.Input

	ToK8sMonitoringArrayOutput() K8sMonitoringArrayOutput
	ToK8sMonitoringArrayOutputWithContext(context.Context) K8sMonitoringArrayOutput
}

type K8sMonitoringArray []K8sMonitoringInput

func (K8sMonitoringArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*K8sMonitoring)(nil)).Elem()
}

func (i K8sMonitoringArray) ToK8sMonitoringArrayOutput() K8sMonitoringArrayOutput {
	return i.ToK8sMonitoringArrayOutputWithContext(context.Background())
}

func (i K8sMonitoringArray) ToK8sMonitoringArrayOutputWithContext(ctx context.Context) K8sMonitoringArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sMonitoringArrayOutput)
}

// K8sMonitoringMapInput is an input type that accepts K8sMonitoringMap and K8sMonitoringMapOutput values.
// You can construct a concrete instance of `K8sMonitoringMapInput` via:
//
//	K8sMonitoringMap{ "key": K8sMonitoringArgs{...} }
type K8sMonitoringMapInput interface {
	pulumi.Input

	ToK8sMonitoringMapOutput() K8sMonitoringMapOutput
	ToK8sMonitoringMapOutputWithContext(context.Context) K8sMonitoringMapOutput
}

type K8sMonitoringMap map[string]K8sMonitoringInput

func (K8sMonitoringMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*K8sMonitoring)(nil)).Elem()
}

func (i K8sMonitoringMap) ToK8sMonitoringMapOutput() K8sMonitoringMapOutput {
	return i.ToK8sMonitoringMapOutputWithContext(context.Background())
}

func (i K8sMonitoringMap) ToK8sMonitoringMapOutputWithContext(ctx context.Context) K8sMonitoringMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sMonitoringMapOutput)
}

type K8sMonitoringOutput struct{ *pulumi.OutputState }

func (K8sMonitoringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sMonitoring)(nil)).Elem()
}

func (o K8sMonitoringOutput) ToK8sMonitoringOutput() K8sMonitoringOutput {
	return o
}

func (o K8sMonitoringOutput) ToK8sMonitoringOutputWithContext(ctx context.Context) K8sMonitoringOutput {
	return o
}

// Monitor Kubernetes namespaces, services, workloads, and pods
func (o K8sMonitoringOutput) CloudApplicationPipelineEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *K8sMonitoring) pulumi.BoolOutput { return v.CloudApplicationPipelineEnabled }).(pulumi.BoolOutput)
}

// Define Kubernetes event filters to ingest events into your environment. For more details, see the
// [documentation](https://dt-url.net/2201p0u).
func (o K8sMonitoringOutput) EventPatterns() K8sMonitoringEventPatternsPtrOutput {
	return o.ApplyT(func(v *K8sMonitoring) K8sMonitoringEventPatternsPtrOutput { return v.EventPatterns }).(K8sMonitoringEventPatternsPtrOutput)
}

// All events are monitored unless event filters are specified. All ingested events are subject to licensing by default.
func (o K8sMonitoringOutput) EventProcessingActive() pulumi.BoolOutput {
	return o.ApplyT(func(v *K8sMonitoring) pulumi.BoolOutput { return v.EventProcessingActive }).(pulumi.BoolOutput)
}

// Include only events specified by Events Field Selectors
func (o K8sMonitoringOutput) FilterEvents() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *K8sMonitoring) pulumi.BoolPtrOutput { return v.FilterEvents }).(pulumi.BoolPtrOutput)
}

// For a list of included events, see the [documentation](https://dt-url.net/l61d02no).
func (o K8sMonitoringOutput) IncludeAllFdiEvents() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *K8sMonitoring) pulumi.BoolPtrOutput { return v.IncludeAllFdiEvents }).(pulumi.BoolPtrOutput)
}

// Workload and node resource metrics are based on a subset of cAdvisor metrics. Depending on your Kubernetes cluster size,
// this may increase the CPU/memory resource consumption of your ActiveGate.
func (o K8sMonitoringOutput) OpenMetricsBuiltinEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *K8sMonitoring) pulumi.BoolOutput { return v.OpenMetricsBuiltinEnabled }).(pulumi.BoolOutput)
}

// For annotation guidance, see the [documentation](https://dt-url.net/g42i0ppw).
func (o K8sMonitoringOutput) OpenMetricsPipelineEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *K8sMonitoring) pulumi.BoolOutput { return v.OpenMetricsPipelineEnabled }).(pulumi.BoolOutput)
}

// To enable dashboards and alerts, add the Kubernetes persistent volume claims extension to your environment.
//
// Deprecated: This attribute is deprecated, see [this community guide](https://dt-url.net/v2200u4m) for details.
func (o K8sMonitoringOutput) PvcMonitoringEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *K8sMonitoring) pulumi.BoolPtrOutput { return v.PvcMonitoringEnabled }).(pulumi.BoolPtrOutput)
}

// The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
func (o K8sMonitoringOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *K8sMonitoring) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

type K8sMonitoringArrayOutput struct{ *pulumi.OutputState }

func (K8sMonitoringArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*K8sMonitoring)(nil)).Elem()
}

func (o K8sMonitoringArrayOutput) ToK8sMonitoringArrayOutput() K8sMonitoringArrayOutput {
	return o
}

func (o K8sMonitoringArrayOutput) ToK8sMonitoringArrayOutputWithContext(ctx context.Context) K8sMonitoringArrayOutput {
	return o
}

func (o K8sMonitoringArrayOutput) Index(i pulumi.IntInput) K8sMonitoringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *K8sMonitoring {
		return vs[0].([]*K8sMonitoring)[vs[1].(int)]
	}).(K8sMonitoringOutput)
}

type K8sMonitoringMapOutput struct{ *pulumi.OutputState }

func (K8sMonitoringMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*K8sMonitoring)(nil)).Elem()
}

func (o K8sMonitoringMapOutput) ToK8sMonitoringMapOutput() K8sMonitoringMapOutput {
	return o
}

func (o K8sMonitoringMapOutput) ToK8sMonitoringMapOutputWithContext(ctx context.Context) K8sMonitoringMapOutput {
	return o
}

func (o K8sMonitoringMapOutput) MapIndex(k pulumi.StringInput) K8sMonitoringOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *K8sMonitoring {
		return vs[0].(map[string]*K8sMonitoring)[vs[1].(string)]
	}).(K8sMonitoringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*K8sMonitoringInput)(nil)).Elem(), &K8sMonitoring{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sMonitoringArrayInput)(nil)).Elem(), K8sMonitoringArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sMonitoringMapInput)(nil)).Elem(), K8sMonitoringMap{})
	pulumi.RegisterOutputType(K8sMonitoringOutput{})
	pulumi.RegisterOutputType(K8sMonitoringArrayOutput{})
	pulumi.RegisterOutputType(K8sMonitoringMapOutput{})
}
