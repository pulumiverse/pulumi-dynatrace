// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

// > This resource requires the API token scopes **Read security problems** (`securityProblems.read`) and **Write security problems** (`securityProblems.write`)
//
// > This resource is excluded by default in the export utility, please explicitly specify the resource to retrieve existing configuration.
//
// ## Dynatrace Documentation
//
// - Runtime Vulnerability Analytics - https://www.dynatrace.com/support/help/platform-modules/application-security/vulnerability-analytics
//
// - Settings API - https://www.dynatrace.com/support/help/dynatrace-api/environment-api/settings (schemaId: `builtin:appsec.third-party-vulnerability-kubernetes-label-rule-settings`)
//
// ## Resource Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dynatrace.NewVulnerabilityThirdPartyK8s(ctx, "#name#", &dynatrace.VulnerabilityThirdPartyK8sArgs{
//				Enabled: pulumi.Bool(false),
//				KubernetesLabelConditions: &dynatrace.VulnerabilityThirdPartyK8sKubernetesLabelConditionsArgs{
//					KubernetesLabelConditions: dynatrace.VulnerabilityThirdPartyK8sKubernetesLabelConditionsKubernetesLabelConditionArray{
//						&dynatrace.VulnerabilityThirdPartyK8sKubernetesLabelConditionsKubernetesLabelConditionArgs{
//							KubernetesLabelKey:   pulumi.String("kubernetes.azure.com/mode"),
//							KubernetesLabelValue: pulumi.String("#name#"),
//							Matcher:              pulumi.String("NOT_EQUALS"),
//						},
//						&dynatrace.VulnerabilityThirdPartyK8sKubernetesLabelConditionsKubernetesLabelConditionArgs{
//							KubernetesLabelKey:   pulumi.String("agentpool"),
//							KubernetesLabelValue: pulumi.String("#name#"),
//							Matcher:              pulumi.String("CONTAINS"),
//						},
//					},
//				},
//				Metadata: &dynatrace.VulnerabilityThirdPartyK8sMetadataArgs{
//					Comment: pulumi.String("#name#"),
//				},
//				RuleName: pulumi.String("#name#"),
//				VulnerabilityDetectionControl: &dynatrace.VulnerabilityThirdPartyK8sVulnerabilityDetectionControlArgs{
//					MonitoringMode: pulumi.String("MONITORING_OFF"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type VulnerabilityThirdPartyK8s struct {
	pulumi.CustomResourceState

	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringOutput `pulumi:"insertAfter"`
	// When you add multiple conditions, the rule applies if all conditions apply.
	KubernetesLabelConditions VulnerabilityThirdPartyK8sKubernetesLabelConditionsPtrOutput `pulumi:"kubernetesLabelConditions"`
	// Step 3: Leave comment (optional)
	Metadata VulnerabilityThirdPartyK8sMetadataOutput `pulumi:"metadata"`
	// Rule name
	RuleName pulumi.StringPtrOutput `pulumi:"ruleName"`
	// Step 1: Select third-party vulnerability detection behavior
	VulnerabilityDetectionControl VulnerabilityThirdPartyK8sVulnerabilityDetectionControlOutput `pulumi:"vulnerabilityDetectionControl"`
}

// NewVulnerabilityThirdPartyK8s registers a new resource with the given unique name, arguments, and options.
func NewVulnerabilityThirdPartyK8s(ctx *pulumi.Context,
	name string, args *VulnerabilityThirdPartyK8sArgs, opts ...pulumi.ResourceOption) (*VulnerabilityThirdPartyK8s, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Metadata == nil {
		return nil, errors.New("invalid value for required argument 'Metadata'")
	}
	if args.VulnerabilityDetectionControl == nil {
		return nil, errors.New("invalid value for required argument 'VulnerabilityDetectionControl'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VulnerabilityThirdPartyK8s
	err := ctx.RegisterResource("dynatrace:index/vulnerabilityThirdPartyK8s:VulnerabilityThirdPartyK8s", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVulnerabilityThirdPartyK8s gets an existing VulnerabilityThirdPartyK8s resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVulnerabilityThirdPartyK8s(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VulnerabilityThirdPartyK8sState, opts ...pulumi.ResourceOption) (*VulnerabilityThirdPartyK8s, error) {
	var resource VulnerabilityThirdPartyK8s
	err := ctx.ReadResource("dynatrace:index/vulnerabilityThirdPartyK8s:VulnerabilityThirdPartyK8s", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VulnerabilityThirdPartyK8s resources.
type vulnerabilityThirdPartyK8sState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `pulumi:"insertAfter"`
	// When you add multiple conditions, the rule applies if all conditions apply.
	KubernetesLabelConditions *VulnerabilityThirdPartyK8sKubernetesLabelConditions `pulumi:"kubernetesLabelConditions"`
	// Step 3: Leave comment (optional)
	Metadata *VulnerabilityThirdPartyK8sMetadata `pulumi:"metadata"`
	// Rule name
	RuleName *string `pulumi:"ruleName"`
	// Step 1: Select third-party vulnerability detection behavior
	VulnerabilityDetectionControl *VulnerabilityThirdPartyK8sVulnerabilityDetectionControl `pulumi:"vulnerabilityDetectionControl"`
}

type VulnerabilityThirdPartyK8sState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringPtrInput
	// When you add multiple conditions, the rule applies if all conditions apply.
	KubernetesLabelConditions VulnerabilityThirdPartyK8sKubernetesLabelConditionsPtrInput
	// Step 3: Leave comment (optional)
	Metadata VulnerabilityThirdPartyK8sMetadataPtrInput
	// Rule name
	RuleName pulumi.StringPtrInput
	// Step 1: Select third-party vulnerability detection behavior
	VulnerabilityDetectionControl VulnerabilityThirdPartyK8sVulnerabilityDetectionControlPtrInput
}

func (VulnerabilityThirdPartyK8sState) ElementType() reflect.Type {
	return reflect.TypeOf((*vulnerabilityThirdPartyK8sState)(nil)).Elem()
}

type vulnerabilityThirdPartyK8sArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `pulumi:"insertAfter"`
	// When you add multiple conditions, the rule applies if all conditions apply.
	KubernetesLabelConditions *VulnerabilityThirdPartyK8sKubernetesLabelConditions `pulumi:"kubernetesLabelConditions"`
	// Step 3: Leave comment (optional)
	Metadata VulnerabilityThirdPartyK8sMetadata `pulumi:"metadata"`
	// Rule name
	RuleName *string `pulumi:"ruleName"`
	// Step 1: Select third-party vulnerability detection behavior
	VulnerabilityDetectionControl VulnerabilityThirdPartyK8sVulnerabilityDetectionControl `pulumi:"vulnerabilityDetectionControl"`
}

// The set of arguments for constructing a VulnerabilityThirdPartyK8s resource.
type VulnerabilityThirdPartyK8sArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringPtrInput
	// When you add multiple conditions, the rule applies if all conditions apply.
	KubernetesLabelConditions VulnerabilityThirdPartyK8sKubernetesLabelConditionsPtrInput
	// Step 3: Leave comment (optional)
	Metadata VulnerabilityThirdPartyK8sMetadataInput
	// Rule name
	RuleName pulumi.StringPtrInput
	// Step 1: Select third-party vulnerability detection behavior
	VulnerabilityDetectionControl VulnerabilityThirdPartyK8sVulnerabilityDetectionControlInput
}

func (VulnerabilityThirdPartyK8sArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vulnerabilityThirdPartyK8sArgs)(nil)).Elem()
}

type VulnerabilityThirdPartyK8sInput interface {
	pulumi.Input

	ToVulnerabilityThirdPartyK8sOutput() VulnerabilityThirdPartyK8sOutput
	ToVulnerabilityThirdPartyK8sOutputWithContext(ctx context.Context) VulnerabilityThirdPartyK8sOutput
}

func (*VulnerabilityThirdPartyK8s) ElementType() reflect.Type {
	return reflect.TypeOf((**VulnerabilityThirdPartyK8s)(nil)).Elem()
}

func (i *VulnerabilityThirdPartyK8s) ToVulnerabilityThirdPartyK8sOutput() VulnerabilityThirdPartyK8sOutput {
	return i.ToVulnerabilityThirdPartyK8sOutputWithContext(context.Background())
}

func (i *VulnerabilityThirdPartyK8s) ToVulnerabilityThirdPartyK8sOutputWithContext(ctx context.Context) VulnerabilityThirdPartyK8sOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityThirdPartyK8sOutput)
}

// VulnerabilityThirdPartyK8sArrayInput is an input type that accepts VulnerabilityThirdPartyK8sArray and VulnerabilityThirdPartyK8sArrayOutput values.
// You can construct a concrete instance of `VulnerabilityThirdPartyK8sArrayInput` via:
//
//	VulnerabilityThirdPartyK8sArray{ VulnerabilityThirdPartyK8sArgs{...} }
type VulnerabilityThirdPartyK8sArrayInput interface {
	pulumi.Input

	ToVulnerabilityThirdPartyK8sArrayOutput() VulnerabilityThirdPartyK8sArrayOutput
	ToVulnerabilityThirdPartyK8sArrayOutputWithContext(context.Context) VulnerabilityThirdPartyK8sArrayOutput
}

type VulnerabilityThirdPartyK8sArray []VulnerabilityThirdPartyK8sInput

func (VulnerabilityThirdPartyK8sArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VulnerabilityThirdPartyK8s)(nil)).Elem()
}

func (i VulnerabilityThirdPartyK8sArray) ToVulnerabilityThirdPartyK8sArrayOutput() VulnerabilityThirdPartyK8sArrayOutput {
	return i.ToVulnerabilityThirdPartyK8sArrayOutputWithContext(context.Background())
}

func (i VulnerabilityThirdPartyK8sArray) ToVulnerabilityThirdPartyK8sArrayOutputWithContext(ctx context.Context) VulnerabilityThirdPartyK8sArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityThirdPartyK8sArrayOutput)
}

// VulnerabilityThirdPartyK8sMapInput is an input type that accepts VulnerabilityThirdPartyK8sMap and VulnerabilityThirdPartyK8sMapOutput values.
// You can construct a concrete instance of `VulnerabilityThirdPartyK8sMapInput` via:
//
//	VulnerabilityThirdPartyK8sMap{ "key": VulnerabilityThirdPartyK8sArgs{...} }
type VulnerabilityThirdPartyK8sMapInput interface {
	pulumi.Input

	ToVulnerabilityThirdPartyK8sMapOutput() VulnerabilityThirdPartyK8sMapOutput
	ToVulnerabilityThirdPartyK8sMapOutputWithContext(context.Context) VulnerabilityThirdPartyK8sMapOutput
}

type VulnerabilityThirdPartyK8sMap map[string]VulnerabilityThirdPartyK8sInput

func (VulnerabilityThirdPartyK8sMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VulnerabilityThirdPartyK8s)(nil)).Elem()
}

func (i VulnerabilityThirdPartyK8sMap) ToVulnerabilityThirdPartyK8sMapOutput() VulnerabilityThirdPartyK8sMapOutput {
	return i.ToVulnerabilityThirdPartyK8sMapOutputWithContext(context.Background())
}

func (i VulnerabilityThirdPartyK8sMap) ToVulnerabilityThirdPartyK8sMapOutputWithContext(ctx context.Context) VulnerabilityThirdPartyK8sMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityThirdPartyK8sMapOutput)
}

type VulnerabilityThirdPartyK8sOutput struct{ *pulumi.OutputState }

func (VulnerabilityThirdPartyK8sOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VulnerabilityThirdPartyK8s)(nil)).Elem()
}

func (o VulnerabilityThirdPartyK8sOutput) ToVulnerabilityThirdPartyK8sOutput() VulnerabilityThirdPartyK8sOutput {
	return o
}

func (o VulnerabilityThirdPartyK8sOutput) ToVulnerabilityThirdPartyK8sOutputWithContext(ctx context.Context) VulnerabilityThirdPartyK8sOutput {
	return o
}

// This setting is enabled (`true`) or disabled (`false`)
func (o VulnerabilityThirdPartyK8sOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *VulnerabilityThirdPartyK8s) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
func (o VulnerabilityThirdPartyK8sOutput) InsertAfter() pulumi.StringOutput {
	return o.ApplyT(func(v *VulnerabilityThirdPartyK8s) pulumi.StringOutput { return v.InsertAfter }).(pulumi.StringOutput)
}

// When you add multiple conditions, the rule applies if all conditions apply.
func (o VulnerabilityThirdPartyK8sOutput) KubernetesLabelConditions() VulnerabilityThirdPartyK8sKubernetesLabelConditionsPtrOutput {
	return o.ApplyT(func(v *VulnerabilityThirdPartyK8s) VulnerabilityThirdPartyK8sKubernetesLabelConditionsPtrOutput {
		return v.KubernetesLabelConditions
	}).(VulnerabilityThirdPartyK8sKubernetesLabelConditionsPtrOutput)
}

// Step 3: Leave comment (optional)
func (o VulnerabilityThirdPartyK8sOutput) Metadata() VulnerabilityThirdPartyK8sMetadataOutput {
	return o.ApplyT(func(v *VulnerabilityThirdPartyK8s) VulnerabilityThirdPartyK8sMetadataOutput { return v.Metadata }).(VulnerabilityThirdPartyK8sMetadataOutput)
}

// Rule name
func (o VulnerabilityThirdPartyK8sOutput) RuleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VulnerabilityThirdPartyK8s) pulumi.StringPtrOutput { return v.RuleName }).(pulumi.StringPtrOutput)
}

// Step 1: Select third-party vulnerability detection behavior
func (o VulnerabilityThirdPartyK8sOutput) VulnerabilityDetectionControl() VulnerabilityThirdPartyK8sVulnerabilityDetectionControlOutput {
	return o.ApplyT(func(v *VulnerabilityThirdPartyK8s) VulnerabilityThirdPartyK8sVulnerabilityDetectionControlOutput {
		return v.VulnerabilityDetectionControl
	}).(VulnerabilityThirdPartyK8sVulnerabilityDetectionControlOutput)
}

type VulnerabilityThirdPartyK8sArrayOutput struct{ *pulumi.OutputState }

func (VulnerabilityThirdPartyK8sArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VulnerabilityThirdPartyK8s)(nil)).Elem()
}

func (o VulnerabilityThirdPartyK8sArrayOutput) ToVulnerabilityThirdPartyK8sArrayOutput() VulnerabilityThirdPartyK8sArrayOutput {
	return o
}

func (o VulnerabilityThirdPartyK8sArrayOutput) ToVulnerabilityThirdPartyK8sArrayOutputWithContext(ctx context.Context) VulnerabilityThirdPartyK8sArrayOutput {
	return o
}

func (o VulnerabilityThirdPartyK8sArrayOutput) Index(i pulumi.IntInput) VulnerabilityThirdPartyK8sOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VulnerabilityThirdPartyK8s {
		return vs[0].([]*VulnerabilityThirdPartyK8s)[vs[1].(int)]
	}).(VulnerabilityThirdPartyK8sOutput)
}

type VulnerabilityThirdPartyK8sMapOutput struct{ *pulumi.OutputState }

func (VulnerabilityThirdPartyK8sMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VulnerabilityThirdPartyK8s)(nil)).Elem()
}

func (o VulnerabilityThirdPartyK8sMapOutput) ToVulnerabilityThirdPartyK8sMapOutput() VulnerabilityThirdPartyK8sMapOutput {
	return o
}

func (o VulnerabilityThirdPartyK8sMapOutput) ToVulnerabilityThirdPartyK8sMapOutputWithContext(ctx context.Context) VulnerabilityThirdPartyK8sMapOutput {
	return o
}

func (o VulnerabilityThirdPartyK8sMapOutput) MapIndex(k pulumi.StringInput) VulnerabilityThirdPartyK8sOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VulnerabilityThirdPartyK8s {
		return vs[0].(map[string]*VulnerabilityThirdPartyK8s)[vs[1].(string)]
	}).(VulnerabilityThirdPartyK8sOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VulnerabilityThirdPartyK8sInput)(nil)).Elem(), &VulnerabilityThirdPartyK8s{})
	pulumi.RegisterInputType(reflect.TypeOf((*VulnerabilityThirdPartyK8sArrayInput)(nil)).Elem(), VulnerabilityThirdPartyK8sArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VulnerabilityThirdPartyK8sMapInput)(nil)).Elem(), VulnerabilityThirdPartyK8sMap{})
	pulumi.RegisterOutputType(VulnerabilityThirdPartyK8sOutput{})
	pulumi.RegisterOutputType(VulnerabilityThirdPartyK8sArrayOutput{})
	pulumi.RegisterOutputType(VulnerabilityThirdPartyK8sMapOutput{})
}
