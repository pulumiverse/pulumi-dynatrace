// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type IssueTracking struct {
	pulumi.CustomResourceState

	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringOutput `pulumi:"insertAfter"`
	// Set a label to identify these issues, for example, `releaseBlocker` or `non-critical`
	Issuelabel pulumi.StringOutput `pulumi:"issuelabel"`
	// You can use the following placeholders to automatically insert values from the **Release monitoring** page in your query: `{NAME}`, `{VERSION}`, `{STAGE}`, `{PRODUCT}`.
	Issuequery pulumi.StringOutput `pulumi:"issuequery"`
	// Possible Values: `ERROR`, `INFO`, `RESOLVED`
	Issuetheme pulumi.StringOutput `pulumi:"issuetheme"`
	// Possible Values: `GITHUB`, `GITLAB`, `JIRA`, `JIRA_CLOUD`, `JIRA_ON_PREMISE`, `SERVICENOW`
	Issuetrackersystem pulumi.StringOutput `pulumi:"issuetrackersystem"`
	// Password
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Token
	Token pulumi.StringPtrOutput `pulumi:"token"`
	// For Jira, use the base URL (for example, https://jira.yourcompany.com); for GitHub, use the repository URL (for example, https://github.com/org/repo); for GitLab, use the specific project API for a single project (for example, https://gitlab.com/api/v4/projects/:projectId), and the specific group API for a multiple projects (for example, https://gitlab.com/api/v4/groups/:groupId); for ServiceNow, use your company instance URL (for example, https://yourinstance.service-now.com/)
	Url pulumi.StringOutput `pulumi:"url"`
	// Username
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewIssueTracking registers a new resource with the given unique name, arguments, and options.
func NewIssueTracking(ctx *pulumi.Context,
	name string, args *IssueTrackingArgs, opts ...pulumi.ResourceOption) (*IssueTracking, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Issuelabel == nil {
		return nil, errors.New("invalid value for required argument 'Issuelabel'")
	}
	if args.Issuequery == nil {
		return nil, errors.New("invalid value for required argument 'Issuequery'")
	}
	if args.Issuetheme == nil {
		return nil, errors.New("invalid value for required argument 'Issuetheme'")
	}
	if args.Issuetrackersystem == nil {
		return nil, errors.New("invalid value for required argument 'Issuetrackersystem'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.Token != nil {
		args.Token = pulumi.ToSecret(args.Token).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"token",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IssueTracking
	err := ctx.RegisterResource("dynatrace:index/issueTracking:IssueTracking", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIssueTracking gets an existing IssueTracking resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIssueTracking(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IssueTrackingState, opts ...pulumi.ResourceOption) (*IssueTracking, error) {
	var resource IssueTracking
	err := ctx.ReadResource("dynatrace:index/issueTracking:IssueTracking", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IssueTracking resources.
type issueTrackingState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `pulumi:"insertAfter"`
	// Set a label to identify these issues, for example, `releaseBlocker` or `non-critical`
	Issuelabel *string `pulumi:"issuelabel"`
	// You can use the following placeholders to automatically insert values from the **Release monitoring** page in your query: `{NAME}`, `{VERSION}`, `{STAGE}`, `{PRODUCT}`.
	Issuequery *string `pulumi:"issuequery"`
	// Possible Values: `ERROR`, `INFO`, `RESOLVED`
	Issuetheme *string `pulumi:"issuetheme"`
	// Possible Values: `GITHUB`, `GITLAB`, `JIRA`, `JIRA_CLOUD`, `JIRA_ON_PREMISE`, `SERVICENOW`
	Issuetrackersystem *string `pulumi:"issuetrackersystem"`
	// Password
	Password *string `pulumi:"password"`
	// Token
	Token *string `pulumi:"token"`
	// For Jira, use the base URL (for example, https://jira.yourcompany.com); for GitHub, use the repository URL (for example, https://github.com/org/repo); for GitLab, use the specific project API for a single project (for example, https://gitlab.com/api/v4/projects/:projectId), and the specific group API for a multiple projects (for example, https://gitlab.com/api/v4/groups/:groupId); for ServiceNow, use your company instance URL (for example, https://yourinstance.service-now.com/)
	Url *string `pulumi:"url"`
	// Username
	Username *string `pulumi:"username"`
}

type IssueTrackingState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringPtrInput
	// Set a label to identify these issues, for example, `releaseBlocker` or `non-critical`
	Issuelabel pulumi.StringPtrInput
	// You can use the following placeholders to automatically insert values from the **Release monitoring** page in your query: `{NAME}`, `{VERSION}`, `{STAGE}`, `{PRODUCT}`.
	Issuequery pulumi.StringPtrInput
	// Possible Values: `ERROR`, `INFO`, `RESOLVED`
	Issuetheme pulumi.StringPtrInput
	// Possible Values: `GITHUB`, `GITLAB`, `JIRA`, `JIRA_CLOUD`, `JIRA_ON_PREMISE`, `SERVICENOW`
	Issuetrackersystem pulumi.StringPtrInput
	// Password
	Password pulumi.StringPtrInput
	// Token
	Token pulumi.StringPtrInput
	// For Jira, use the base URL (for example, https://jira.yourcompany.com); for GitHub, use the repository URL (for example, https://github.com/org/repo); for GitLab, use the specific project API for a single project (for example, https://gitlab.com/api/v4/projects/:projectId), and the specific group API for a multiple projects (for example, https://gitlab.com/api/v4/groups/:groupId); for ServiceNow, use your company instance URL (for example, https://yourinstance.service-now.com/)
	Url pulumi.StringPtrInput
	// Username
	Username pulumi.StringPtrInput
}

func (IssueTrackingState) ElementType() reflect.Type {
	return reflect.TypeOf((*issueTrackingState)(nil)).Elem()
}

type issueTrackingArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `pulumi:"insertAfter"`
	// Set a label to identify these issues, for example, `releaseBlocker` or `non-critical`
	Issuelabel string `pulumi:"issuelabel"`
	// You can use the following placeholders to automatically insert values from the **Release monitoring** page in your query: `{NAME}`, `{VERSION}`, `{STAGE}`, `{PRODUCT}`.
	Issuequery string `pulumi:"issuequery"`
	// Possible Values: `ERROR`, `INFO`, `RESOLVED`
	Issuetheme string `pulumi:"issuetheme"`
	// Possible Values: `GITHUB`, `GITLAB`, `JIRA`, `JIRA_CLOUD`, `JIRA_ON_PREMISE`, `SERVICENOW`
	Issuetrackersystem string `pulumi:"issuetrackersystem"`
	// Password
	Password *string `pulumi:"password"`
	// Token
	Token *string `pulumi:"token"`
	// For Jira, use the base URL (for example, https://jira.yourcompany.com); for GitHub, use the repository URL (for example, https://github.com/org/repo); for GitLab, use the specific project API for a single project (for example, https://gitlab.com/api/v4/projects/:projectId), and the specific group API for a multiple projects (for example, https://gitlab.com/api/v4/groups/:groupId); for ServiceNow, use your company instance URL (for example, https://yourinstance.service-now.com/)
	Url string `pulumi:"url"`
	// Username
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a IssueTracking resource.
type IssueTrackingArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringPtrInput
	// Set a label to identify these issues, for example, `releaseBlocker` or `non-critical`
	Issuelabel pulumi.StringInput
	// You can use the following placeholders to automatically insert values from the **Release monitoring** page in your query: `{NAME}`, `{VERSION}`, `{STAGE}`, `{PRODUCT}`.
	Issuequery pulumi.StringInput
	// Possible Values: `ERROR`, `INFO`, `RESOLVED`
	Issuetheme pulumi.StringInput
	// Possible Values: `GITHUB`, `GITLAB`, `JIRA`, `JIRA_CLOUD`, `JIRA_ON_PREMISE`, `SERVICENOW`
	Issuetrackersystem pulumi.StringInput
	// Password
	Password pulumi.StringPtrInput
	// Token
	Token pulumi.StringPtrInput
	// For Jira, use the base URL (for example, https://jira.yourcompany.com); for GitHub, use the repository URL (for example, https://github.com/org/repo); for GitLab, use the specific project API for a single project (for example, https://gitlab.com/api/v4/projects/:projectId), and the specific group API for a multiple projects (for example, https://gitlab.com/api/v4/groups/:groupId); for ServiceNow, use your company instance URL (for example, https://yourinstance.service-now.com/)
	Url pulumi.StringInput
	// Username
	Username pulumi.StringInput
}

func (IssueTrackingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*issueTrackingArgs)(nil)).Elem()
}

type IssueTrackingInput interface {
	pulumi.Input

	ToIssueTrackingOutput() IssueTrackingOutput
	ToIssueTrackingOutputWithContext(ctx context.Context) IssueTrackingOutput
}

func (*IssueTracking) ElementType() reflect.Type {
	return reflect.TypeOf((**IssueTracking)(nil)).Elem()
}

func (i *IssueTracking) ToIssueTrackingOutput() IssueTrackingOutput {
	return i.ToIssueTrackingOutputWithContext(context.Background())
}

func (i *IssueTracking) ToIssueTrackingOutputWithContext(ctx context.Context) IssueTrackingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssueTrackingOutput)
}

// IssueTrackingArrayInput is an input type that accepts IssueTrackingArray and IssueTrackingArrayOutput values.
// You can construct a concrete instance of `IssueTrackingArrayInput` via:
//
//	IssueTrackingArray{ IssueTrackingArgs{...} }
type IssueTrackingArrayInput interface {
	pulumi.Input

	ToIssueTrackingArrayOutput() IssueTrackingArrayOutput
	ToIssueTrackingArrayOutputWithContext(context.Context) IssueTrackingArrayOutput
}

type IssueTrackingArray []IssueTrackingInput

func (IssueTrackingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IssueTracking)(nil)).Elem()
}

func (i IssueTrackingArray) ToIssueTrackingArrayOutput() IssueTrackingArrayOutput {
	return i.ToIssueTrackingArrayOutputWithContext(context.Background())
}

func (i IssueTrackingArray) ToIssueTrackingArrayOutputWithContext(ctx context.Context) IssueTrackingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssueTrackingArrayOutput)
}

// IssueTrackingMapInput is an input type that accepts IssueTrackingMap and IssueTrackingMapOutput values.
// You can construct a concrete instance of `IssueTrackingMapInput` via:
//
//	IssueTrackingMap{ "key": IssueTrackingArgs{...} }
type IssueTrackingMapInput interface {
	pulumi.Input

	ToIssueTrackingMapOutput() IssueTrackingMapOutput
	ToIssueTrackingMapOutputWithContext(context.Context) IssueTrackingMapOutput
}

type IssueTrackingMap map[string]IssueTrackingInput

func (IssueTrackingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IssueTracking)(nil)).Elem()
}

func (i IssueTrackingMap) ToIssueTrackingMapOutput() IssueTrackingMapOutput {
	return i.ToIssueTrackingMapOutputWithContext(context.Background())
}

func (i IssueTrackingMap) ToIssueTrackingMapOutputWithContext(ctx context.Context) IssueTrackingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssueTrackingMapOutput)
}

type IssueTrackingOutput struct{ *pulumi.OutputState }

func (IssueTrackingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IssueTracking)(nil)).Elem()
}

func (o IssueTrackingOutput) ToIssueTrackingOutput() IssueTrackingOutput {
	return o
}

func (o IssueTrackingOutput) ToIssueTrackingOutputWithContext(ctx context.Context) IssueTrackingOutput {
	return o
}

// This setting is enabled (`true`) or disabled (`false`)
func (o IssueTrackingOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *IssueTracking) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
func (o IssueTrackingOutput) InsertAfter() pulumi.StringOutput {
	return o.ApplyT(func(v *IssueTracking) pulumi.StringOutput { return v.InsertAfter }).(pulumi.StringOutput)
}

// Set a label to identify these issues, for example, `releaseBlocker` or `non-critical`
func (o IssueTrackingOutput) Issuelabel() pulumi.StringOutput {
	return o.ApplyT(func(v *IssueTracking) pulumi.StringOutput { return v.Issuelabel }).(pulumi.StringOutput)
}

// You can use the following placeholders to automatically insert values from the **Release monitoring** page in your query: `{NAME}`, `{VERSION}`, `{STAGE}`, `{PRODUCT}`.
func (o IssueTrackingOutput) Issuequery() pulumi.StringOutput {
	return o.ApplyT(func(v *IssueTracking) pulumi.StringOutput { return v.Issuequery }).(pulumi.StringOutput)
}

// Possible Values: `ERROR`, `INFO`, `RESOLVED`
func (o IssueTrackingOutput) Issuetheme() pulumi.StringOutput {
	return o.ApplyT(func(v *IssueTracking) pulumi.StringOutput { return v.Issuetheme }).(pulumi.StringOutput)
}

// Possible Values: `GITHUB`, `GITLAB`, `JIRA`, `JIRA_CLOUD`, `JIRA_ON_PREMISE`, `SERVICENOW`
func (o IssueTrackingOutput) Issuetrackersystem() pulumi.StringOutput {
	return o.ApplyT(func(v *IssueTracking) pulumi.StringOutput { return v.Issuetrackersystem }).(pulumi.StringOutput)
}

// Password
func (o IssueTrackingOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IssueTracking) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Token
func (o IssueTrackingOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IssueTracking) pulumi.StringPtrOutput { return v.Token }).(pulumi.StringPtrOutput)
}

// For Jira, use the base URL (for example, https://jira.yourcompany.com); for GitHub, use the repository URL (for example, https://github.com/org/repo); for GitLab, use the specific project API for a single project (for example, https://gitlab.com/api/v4/projects/:projectId), and the specific group API for a multiple projects (for example, https://gitlab.com/api/v4/groups/:groupId); for ServiceNow, use your company instance URL (for example, https://yourinstance.service-now.com/)
func (o IssueTrackingOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *IssueTracking) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// Username
func (o IssueTrackingOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *IssueTracking) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type IssueTrackingArrayOutput struct{ *pulumi.OutputState }

func (IssueTrackingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IssueTracking)(nil)).Elem()
}

func (o IssueTrackingArrayOutput) ToIssueTrackingArrayOutput() IssueTrackingArrayOutput {
	return o
}

func (o IssueTrackingArrayOutput) ToIssueTrackingArrayOutputWithContext(ctx context.Context) IssueTrackingArrayOutput {
	return o
}

func (o IssueTrackingArrayOutput) Index(i pulumi.IntInput) IssueTrackingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IssueTracking {
		return vs[0].([]*IssueTracking)[vs[1].(int)]
	}).(IssueTrackingOutput)
}

type IssueTrackingMapOutput struct{ *pulumi.OutputState }

func (IssueTrackingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IssueTracking)(nil)).Elem()
}

func (o IssueTrackingMapOutput) ToIssueTrackingMapOutput() IssueTrackingMapOutput {
	return o
}

func (o IssueTrackingMapOutput) ToIssueTrackingMapOutputWithContext(ctx context.Context) IssueTrackingMapOutput {
	return o
}

func (o IssueTrackingMapOutput) MapIndex(k pulumi.StringInput) IssueTrackingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IssueTracking {
		return vs[0].(map[string]*IssueTracking)[vs[1].(string)]
	}).(IssueTrackingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IssueTrackingInput)(nil)).Elem(), &IssueTracking{})
	pulumi.RegisterInputType(reflect.TypeOf((*IssueTrackingArrayInput)(nil)).Elem(), IssueTrackingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IssueTrackingMapInput)(nil)).Elem(), IssueTrackingMap{})
	pulumi.RegisterOutputType(IssueTrackingOutput{})
	pulumi.RegisterOutputType(IssueTrackingArrayOutput{})
	pulumi.RegisterOutputType(IssueTrackingMapOutput{})
}
