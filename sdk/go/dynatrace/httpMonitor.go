// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type HttpMonitor struct {
	pulumi.CustomResourceState

	// The anomaly detection configuration.
	AnomalyDetections HttpMonitorAnomalyDetectionArrayOutput `pulumi:"anomalyDetections"`
	// The monitor is enabled (`true`) or disabled (`false`).
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The frequency of the monitor, in minutes.
	Frequency pulumi.IntOutput `pulumi:"frequency"`
	// A list of locations from which the monitor is executed.
	//
	// To specify a location, use its entity ID.
	Locations pulumi.StringArrayOutput `pulumi:"locations"`
	// A set of manually assigned applications.
	ManuallyAssignedApps pulumi.StringArrayOutput `pulumi:"manuallyAssignedApps"`
	// The name of the monitor.
	Name pulumi.StringOutput `pulumi:"name"`
	// No script block - handle requests via `HttpMonitorScript` resource
	NoScript pulumi.BoolPtrOutput `pulumi:"noScript"`
	// The HTTP Script
	Script HttpMonitorScriptTypePtrOutput `pulumi:"script"`
	// A set of tags assigned to the monitor.
	//
	// You can specify only the value of the tag here and the `CONTEXTLESS` context and source 'USER' will be added automatically.
	Tags HttpMonitorTagArrayOutput `pulumi:"tags"`
}

// NewHttpMonitor registers a new resource with the given unique name, arguments, and options.
func NewHttpMonitor(ctx *pulumi.Context,
	name string, args *HttpMonitorArgs, opts ...pulumi.ResourceOption) (*HttpMonitor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Frequency == nil {
		return nil, errors.New("invalid value for required argument 'Frequency'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HttpMonitor
	err := ctx.RegisterResource("dynatrace:index/httpMonitor:HttpMonitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHttpMonitor gets an existing HttpMonitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHttpMonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HttpMonitorState, opts ...pulumi.ResourceOption) (*HttpMonitor, error) {
	var resource HttpMonitor
	err := ctx.ReadResource("dynatrace:index/httpMonitor:HttpMonitor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HttpMonitor resources.
type httpMonitorState struct {
	// The anomaly detection configuration.
	AnomalyDetections []HttpMonitorAnomalyDetection `pulumi:"anomalyDetections"`
	// The monitor is enabled (`true`) or disabled (`false`).
	Enabled *bool `pulumi:"enabled"`
	// The frequency of the monitor, in minutes.
	Frequency *int `pulumi:"frequency"`
	// A list of locations from which the monitor is executed.
	//
	// To specify a location, use its entity ID.
	Locations []string `pulumi:"locations"`
	// A set of manually assigned applications.
	ManuallyAssignedApps []string `pulumi:"manuallyAssignedApps"`
	// The name of the monitor.
	Name *string `pulumi:"name"`
	// No script block - handle requests via `HttpMonitorScript` resource
	NoScript *bool `pulumi:"noScript"`
	// The HTTP Script
	Script *HttpMonitorScriptType `pulumi:"script"`
	// A set of tags assigned to the monitor.
	//
	// You can specify only the value of the tag here and the `CONTEXTLESS` context and source 'USER' will be added automatically.
	Tags []HttpMonitorTag `pulumi:"tags"`
}

type HttpMonitorState struct {
	// The anomaly detection configuration.
	AnomalyDetections HttpMonitorAnomalyDetectionArrayInput
	// The monitor is enabled (`true`) or disabled (`false`).
	Enabled pulumi.BoolPtrInput
	// The frequency of the monitor, in minutes.
	Frequency pulumi.IntPtrInput
	// A list of locations from which the monitor is executed.
	//
	// To specify a location, use its entity ID.
	Locations pulumi.StringArrayInput
	// A set of manually assigned applications.
	ManuallyAssignedApps pulumi.StringArrayInput
	// The name of the monitor.
	Name pulumi.StringPtrInput
	// No script block - handle requests via `HttpMonitorScript` resource
	NoScript pulumi.BoolPtrInput
	// The HTTP Script
	Script HttpMonitorScriptTypePtrInput
	// A set of tags assigned to the monitor.
	//
	// You can specify only the value of the tag here and the `CONTEXTLESS` context and source 'USER' will be added automatically.
	Tags HttpMonitorTagArrayInput
}

func (HttpMonitorState) ElementType() reflect.Type {
	return reflect.TypeOf((*httpMonitorState)(nil)).Elem()
}

type httpMonitorArgs struct {
	// The anomaly detection configuration.
	AnomalyDetections []HttpMonitorAnomalyDetection `pulumi:"anomalyDetections"`
	// The monitor is enabled (`true`) or disabled (`false`).
	Enabled *bool `pulumi:"enabled"`
	// The frequency of the monitor, in minutes.
	Frequency int `pulumi:"frequency"`
	// A list of locations from which the monitor is executed.
	//
	// To specify a location, use its entity ID.
	Locations []string `pulumi:"locations"`
	// A set of manually assigned applications.
	ManuallyAssignedApps []string `pulumi:"manuallyAssignedApps"`
	// The name of the monitor.
	Name *string `pulumi:"name"`
	// No script block - handle requests via `HttpMonitorScript` resource
	NoScript *bool `pulumi:"noScript"`
	// The HTTP Script
	Script *HttpMonitorScriptType `pulumi:"script"`
	// A set of tags assigned to the monitor.
	//
	// You can specify only the value of the tag here and the `CONTEXTLESS` context and source 'USER' will be added automatically.
	Tags []HttpMonitorTag `pulumi:"tags"`
}

// The set of arguments for constructing a HttpMonitor resource.
type HttpMonitorArgs struct {
	// The anomaly detection configuration.
	AnomalyDetections HttpMonitorAnomalyDetectionArrayInput
	// The monitor is enabled (`true`) or disabled (`false`).
	Enabled pulumi.BoolPtrInput
	// The frequency of the monitor, in minutes.
	Frequency pulumi.IntInput
	// A list of locations from which the monitor is executed.
	//
	// To specify a location, use its entity ID.
	Locations pulumi.StringArrayInput
	// A set of manually assigned applications.
	ManuallyAssignedApps pulumi.StringArrayInput
	// The name of the monitor.
	Name pulumi.StringPtrInput
	// No script block - handle requests via `HttpMonitorScript` resource
	NoScript pulumi.BoolPtrInput
	// The HTTP Script
	Script HttpMonitorScriptTypePtrInput
	// A set of tags assigned to the monitor.
	//
	// You can specify only the value of the tag here and the `CONTEXTLESS` context and source 'USER' will be added automatically.
	Tags HttpMonitorTagArrayInput
}

func (HttpMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*httpMonitorArgs)(nil)).Elem()
}

type HttpMonitorInput interface {
	pulumi.Input

	ToHttpMonitorOutput() HttpMonitorOutput
	ToHttpMonitorOutputWithContext(ctx context.Context) HttpMonitorOutput
}

func (*HttpMonitor) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpMonitor)(nil)).Elem()
}

func (i *HttpMonitor) ToHttpMonitorOutput() HttpMonitorOutput {
	return i.ToHttpMonitorOutputWithContext(context.Background())
}

func (i *HttpMonitor) ToHttpMonitorOutputWithContext(ctx context.Context) HttpMonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpMonitorOutput)
}

// HttpMonitorArrayInput is an input type that accepts HttpMonitorArray and HttpMonitorArrayOutput values.
// You can construct a concrete instance of `HttpMonitorArrayInput` via:
//
//	HttpMonitorArray{ HttpMonitorArgs{...} }
type HttpMonitorArrayInput interface {
	pulumi.Input

	ToHttpMonitorArrayOutput() HttpMonitorArrayOutput
	ToHttpMonitorArrayOutputWithContext(context.Context) HttpMonitorArrayOutput
}

type HttpMonitorArray []HttpMonitorInput

func (HttpMonitorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HttpMonitor)(nil)).Elem()
}

func (i HttpMonitorArray) ToHttpMonitorArrayOutput() HttpMonitorArrayOutput {
	return i.ToHttpMonitorArrayOutputWithContext(context.Background())
}

func (i HttpMonitorArray) ToHttpMonitorArrayOutputWithContext(ctx context.Context) HttpMonitorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpMonitorArrayOutput)
}

// HttpMonitorMapInput is an input type that accepts HttpMonitorMap and HttpMonitorMapOutput values.
// You can construct a concrete instance of `HttpMonitorMapInput` via:
//
//	HttpMonitorMap{ "key": HttpMonitorArgs{...} }
type HttpMonitorMapInput interface {
	pulumi.Input

	ToHttpMonitorMapOutput() HttpMonitorMapOutput
	ToHttpMonitorMapOutputWithContext(context.Context) HttpMonitorMapOutput
}

type HttpMonitorMap map[string]HttpMonitorInput

func (HttpMonitorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HttpMonitor)(nil)).Elem()
}

func (i HttpMonitorMap) ToHttpMonitorMapOutput() HttpMonitorMapOutput {
	return i.ToHttpMonitorMapOutputWithContext(context.Background())
}

func (i HttpMonitorMap) ToHttpMonitorMapOutputWithContext(ctx context.Context) HttpMonitorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpMonitorMapOutput)
}

type HttpMonitorOutput struct{ *pulumi.OutputState }

func (HttpMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpMonitor)(nil)).Elem()
}

func (o HttpMonitorOutput) ToHttpMonitorOutput() HttpMonitorOutput {
	return o
}

func (o HttpMonitorOutput) ToHttpMonitorOutputWithContext(ctx context.Context) HttpMonitorOutput {
	return o
}

// The anomaly detection configuration.
func (o HttpMonitorOutput) AnomalyDetections() HttpMonitorAnomalyDetectionArrayOutput {
	return o.ApplyT(func(v *HttpMonitor) HttpMonitorAnomalyDetectionArrayOutput { return v.AnomalyDetections }).(HttpMonitorAnomalyDetectionArrayOutput)
}

// The monitor is enabled (`true`) or disabled (`false`).
func (o HttpMonitorOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HttpMonitor) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The frequency of the monitor, in minutes.
func (o HttpMonitorOutput) Frequency() pulumi.IntOutput {
	return o.ApplyT(func(v *HttpMonitor) pulumi.IntOutput { return v.Frequency }).(pulumi.IntOutput)
}

// A list of locations from which the monitor is executed.
//
// To specify a location, use its entity ID.
func (o HttpMonitorOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HttpMonitor) pulumi.StringArrayOutput { return v.Locations }).(pulumi.StringArrayOutput)
}

// A set of manually assigned applications.
func (o HttpMonitorOutput) ManuallyAssignedApps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HttpMonitor) pulumi.StringArrayOutput { return v.ManuallyAssignedApps }).(pulumi.StringArrayOutput)
}

// The name of the monitor.
func (o HttpMonitorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *HttpMonitor) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// No script block - handle requests via `HttpMonitorScript` resource
func (o HttpMonitorOutput) NoScript() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HttpMonitor) pulumi.BoolPtrOutput { return v.NoScript }).(pulumi.BoolPtrOutput)
}

// The HTTP Script
func (o HttpMonitorOutput) Script() HttpMonitorScriptTypePtrOutput {
	return o.ApplyT(func(v *HttpMonitor) HttpMonitorScriptTypePtrOutput { return v.Script }).(HttpMonitorScriptTypePtrOutput)
}

// A set of tags assigned to the monitor.
//
// You can specify only the value of the tag here and the `CONTEXTLESS` context and source 'USER' will be added automatically.
func (o HttpMonitorOutput) Tags() HttpMonitorTagArrayOutput {
	return o.ApplyT(func(v *HttpMonitor) HttpMonitorTagArrayOutput { return v.Tags }).(HttpMonitorTagArrayOutput)
}

type HttpMonitorArrayOutput struct{ *pulumi.OutputState }

func (HttpMonitorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HttpMonitor)(nil)).Elem()
}

func (o HttpMonitorArrayOutput) ToHttpMonitorArrayOutput() HttpMonitorArrayOutput {
	return o
}

func (o HttpMonitorArrayOutput) ToHttpMonitorArrayOutputWithContext(ctx context.Context) HttpMonitorArrayOutput {
	return o
}

func (o HttpMonitorArrayOutput) Index(i pulumi.IntInput) HttpMonitorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HttpMonitor {
		return vs[0].([]*HttpMonitor)[vs[1].(int)]
	}).(HttpMonitorOutput)
}

type HttpMonitorMapOutput struct{ *pulumi.OutputState }

func (HttpMonitorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HttpMonitor)(nil)).Elem()
}

func (o HttpMonitorMapOutput) ToHttpMonitorMapOutput() HttpMonitorMapOutput {
	return o
}

func (o HttpMonitorMapOutput) ToHttpMonitorMapOutputWithContext(ctx context.Context) HttpMonitorMapOutput {
	return o
}

func (o HttpMonitorMapOutput) MapIndex(k pulumi.StringInput) HttpMonitorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HttpMonitor {
		return vs[0].(map[string]*HttpMonitor)[vs[1].(string)]
	}).(HttpMonitorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HttpMonitorInput)(nil)).Elem(), &HttpMonitor{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpMonitorArrayInput)(nil)).Elem(), HttpMonitorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpMonitorMapInput)(nil)).Elem(), HttpMonitorMap{})
	pulumi.RegisterOutputType(HttpMonitorOutput{})
	pulumi.RegisterOutputType(HttpMonitorArrayOutput{})
	pulumi.RegisterOutputType(HttpMonitorMapOutput{})
}
