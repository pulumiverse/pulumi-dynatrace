// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type ApplicationErrorRules struct {
	pulumi.CustomResourceState

	// (Field has overlap with `WebAppCustomErrors`) An ordered list of HTTP errors.
	CustomErrors ApplicationErrorRulesCustomErrorsPtrOutput `pulumi:"customErrors"`
	// (Field has overlap with `WebAppRequestErrors`) An ordered list of HTTP errors. Rules are evaluated from top to bottom;
	// the first matching rule applies
	HttpErrors ApplicationErrorRulesHttpErrorsPtrOutput `pulumi:"httpErrors"`
	// (Field has overlap with `WebAppCustomErrors`) Exclude (`true`) or include (`false`) custom errors listed in
	// **customErrorRules** in Apdex calculation
	IgnoreCustomErrorsApdex pulumi.BoolPtrOutput `pulumi:"ignoreCustomErrorsApdex"`
	// (Field has overlap with `WebAppRequestErrors`) Exclude (`true`) or include (`false`) HTTP errors listed in
	// **httpErrorRules** in Apdex calculation
	IgnoreHttpErrorsApdex pulumi.BoolPtrOutput `pulumi:"ignoreHttpErrorsApdex"`
	// Exclude (`true`) or include (`false`) JavaScript errors in Apdex calculation
	IgnoreJsErrorsApdex pulumi.BoolPtrOutput `pulumi:"ignoreJsErrorsApdex"`
	// The EntityID of the the WebApplication
	WebApplicationId pulumi.StringPtrOutput `pulumi:"webApplicationId"`
}

// NewApplicationErrorRules registers a new resource with the given unique name, arguments, and options.
func NewApplicationErrorRules(ctx *pulumi.Context,
	name string, args *ApplicationErrorRulesArgs, opts ...pulumi.ResourceOption) (*ApplicationErrorRules, error) {
	if args == nil {
		args = &ApplicationErrorRulesArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApplicationErrorRules
	err := ctx.RegisterResource("dynatrace:index/applicationErrorRules:ApplicationErrorRules", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplicationErrorRules gets an existing ApplicationErrorRules resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplicationErrorRules(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationErrorRulesState, opts ...pulumi.ResourceOption) (*ApplicationErrorRules, error) {
	var resource ApplicationErrorRules
	err := ctx.ReadResource("dynatrace:index/applicationErrorRules:ApplicationErrorRules", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplicationErrorRules resources.
type applicationErrorRulesState struct {
	// (Field has overlap with `WebAppCustomErrors`) An ordered list of HTTP errors.
	CustomErrors *ApplicationErrorRulesCustomErrors `pulumi:"customErrors"`
	// (Field has overlap with `WebAppRequestErrors`) An ordered list of HTTP errors. Rules are evaluated from top to bottom;
	// the first matching rule applies
	HttpErrors *ApplicationErrorRulesHttpErrors `pulumi:"httpErrors"`
	// (Field has overlap with `WebAppCustomErrors`) Exclude (`true`) or include (`false`) custom errors listed in
	// **customErrorRules** in Apdex calculation
	IgnoreCustomErrorsApdex *bool `pulumi:"ignoreCustomErrorsApdex"`
	// (Field has overlap with `WebAppRequestErrors`) Exclude (`true`) or include (`false`) HTTP errors listed in
	// **httpErrorRules** in Apdex calculation
	IgnoreHttpErrorsApdex *bool `pulumi:"ignoreHttpErrorsApdex"`
	// Exclude (`true`) or include (`false`) JavaScript errors in Apdex calculation
	IgnoreJsErrorsApdex *bool `pulumi:"ignoreJsErrorsApdex"`
	// The EntityID of the the WebApplication
	WebApplicationId *string `pulumi:"webApplicationId"`
}

type ApplicationErrorRulesState struct {
	// (Field has overlap with `WebAppCustomErrors`) An ordered list of HTTP errors.
	CustomErrors ApplicationErrorRulesCustomErrorsPtrInput
	// (Field has overlap with `WebAppRequestErrors`) An ordered list of HTTP errors. Rules are evaluated from top to bottom;
	// the first matching rule applies
	HttpErrors ApplicationErrorRulesHttpErrorsPtrInput
	// (Field has overlap with `WebAppCustomErrors`) Exclude (`true`) or include (`false`) custom errors listed in
	// **customErrorRules** in Apdex calculation
	IgnoreCustomErrorsApdex pulumi.BoolPtrInput
	// (Field has overlap with `WebAppRequestErrors`) Exclude (`true`) or include (`false`) HTTP errors listed in
	// **httpErrorRules** in Apdex calculation
	IgnoreHttpErrorsApdex pulumi.BoolPtrInput
	// Exclude (`true`) or include (`false`) JavaScript errors in Apdex calculation
	IgnoreJsErrorsApdex pulumi.BoolPtrInput
	// The EntityID of the the WebApplication
	WebApplicationId pulumi.StringPtrInput
}

func (ApplicationErrorRulesState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationErrorRulesState)(nil)).Elem()
}

type applicationErrorRulesArgs struct {
	// (Field has overlap with `WebAppCustomErrors`) An ordered list of HTTP errors.
	CustomErrors *ApplicationErrorRulesCustomErrors `pulumi:"customErrors"`
	// (Field has overlap with `WebAppRequestErrors`) An ordered list of HTTP errors. Rules are evaluated from top to bottom;
	// the first matching rule applies
	HttpErrors *ApplicationErrorRulesHttpErrors `pulumi:"httpErrors"`
	// (Field has overlap with `WebAppCustomErrors`) Exclude (`true`) or include (`false`) custom errors listed in
	// **customErrorRules** in Apdex calculation
	IgnoreCustomErrorsApdex *bool `pulumi:"ignoreCustomErrorsApdex"`
	// (Field has overlap with `WebAppRequestErrors`) Exclude (`true`) or include (`false`) HTTP errors listed in
	// **httpErrorRules** in Apdex calculation
	IgnoreHttpErrorsApdex *bool `pulumi:"ignoreHttpErrorsApdex"`
	// Exclude (`true`) or include (`false`) JavaScript errors in Apdex calculation
	IgnoreJsErrorsApdex *bool `pulumi:"ignoreJsErrorsApdex"`
	// The EntityID of the the WebApplication
	WebApplicationId *string `pulumi:"webApplicationId"`
}

// The set of arguments for constructing a ApplicationErrorRules resource.
type ApplicationErrorRulesArgs struct {
	// (Field has overlap with `WebAppCustomErrors`) An ordered list of HTTP errors.
	CustomErrors ApplicationErrorRulesCustomErrorsPtrInput
	// (Field has overlap with `WebAppRequestErrors`) An ordered list of HTTP errors. Rules are evaluated from top to bottom;
	// the first matching rule applies
	HttpErrors ApplicationErrorRulesHttpErrorsPtrInput
	// (Field has overlap with `WebAppCustomErrors`) Exclude (`true`) or include (`false`) custom errors listed in
	// **customErrorRules** in Apdex calculation
	IgnoreCustomErrorsApdex pulumi.BoolPtrInput
	// (Field has overlap with `WebAppRequestErrors`) Exclude (`true`) or include (`false`) HTTP errors listed in
	// **httpErrorRules** in Apdex calculation
	IgnoreHttpErrorsApdex pulumi.BoolPtrInput
	// Exclude (`true`) or include (`false`) JavaScript errors in Apdex calculation
	IgnoreJsErrorsApdex pulumi.BoolPtrInput
	// The EntityID of the the WebApplication
	WebApplicationId pulumi.StringPtrInput
}

func (ApplicationErrorRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationErrorRulesArgs)(nil)).Elem()
}

type ApplicationErrorRulesInput interface {
	pulumi.Input

	ToApplicationErrorRulesOutput() ApplicationErrorRulesOutput
	ToApplicationErrorRulesOutputWithContext(ctx context.Context) ApplicationErrorRulesOutput
}

func (*ApplicationErrorRules) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationErrorRules)(nil)).Elem()
}

func (i *ApplicationErrorRules) ToApplicationErrorRulesOutput() ApplicationErrorRulesOutput {
	return i.ToApplicationErrorRulesOutputWithContext(context.Background())
}

func (i *ApplicationErrorRules) ToApplicationErrorRulesOutputWithContext(ctx context.Context) ApplicationErrorRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationErrorRulesOutput)
}

// ApplicationErrorRulesArrayInput is an input type that accepts ApplicationErrorRulesArray and ApplicationErrorRulesArrayOutput values.
// You can construct a concrete instance of `ApplicationErrorRulesArrayInput` via:
//
//	ApplicationErrorRulesArray{ ApplicationErrorRulesArgs{...} }
type ApplicationErrorRulesArrayInput interface {
	pulumi.Input

	ToApplicationErrorRulesArrayOutput() ApplicationErrorRulesArrayOutput
	ToApplicationErrorRulesArrayOutputWithContext(context.Context) ApplicationErrorRulesArrayOutput
}

type ApplicationErrorRulesArray []ApplicationErrorRulesInput

func (ApplicationErrorRulesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationErrorRules)(nil)).Elem()
}

func (i ApplicationErrorRulesArray) ToApplicationErrorRulesArrayOutput() ApplicationErrorRulesArrayOutput {
	return i.ToApplicationErrorRulesArrayOutputWithContext(context.Background())
}

func (i ApplicationErrorRulesArray) ToApplicationErrorRulesArrayOutputWithContext(ctx context.Context) ApplicationErrorRulesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationErrorRulesArrayOutput)
}

// ApplicationErrorRulesMapInput is an input type that accepts ApplicationErrorRulesMap and ApplicationErrorRulesMapOutput values.
// You can construct a concrete instance of `ApplicationErrorRulesMapInput` via:
//
//	ApplicationErrorRulesMap{ "key": ApplicationErrorRulesArgs{...} }
type ApplicationErrorRulesMapInput interface {
	pulumi.Input

	ToApplicationErrorRulesMapOutput() ApplicationErrorRulesMapOutput
	ToApplicationErrorRulesMapOutputWithContext(context.Context) ApplicationErrorRulesMapOutput
}

type ApplicationErrorRulesMap map[string]ApplicationErrorRulesInput

func (ApplicationErrorRulesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationErrorRules)(nil)).Elem()
}

func (i ApplicationErrorRulesMap) ToApplicationErrorRulesMapOutput() ApplicationErrorRulesMapOutput {
	return i.ToApplicationErrorRulesMapOutputWithContext(context.Background())
}

func (i ApplicationErrorRulesMap) ToApplicationErrorRulesMapOutputWithContext(ctx context.Context) ApplicationErrorRulesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationErrorRulesMapOutput)
}

type ApplicationErrorRulesOutput struct{ *pulumi.OutputState }

func (ApplicationErrorRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationErrorRules)(nil)).Elem()
}

func (o ApplicationErrorRulesOutput) ToApplicationErrorRulesOutput() ApplicationErrorRulesOutput {
	return o
}

func (o ApplicationErrorRulesOutput) ToApplicationErrorRulesOutputWithContext(ctx context.Context) ApplicationErrorRulesOutput {
	return o
}

// (Field has overlap with `WebAppCustomErrors`) An ordered list of HTTP errors.
func (o ApplicationErrorRulesOutput) CustomErrors() ApplicationErrorRulesCustomErrorsPtrOutput {
	return o.ApplyT(func(v *ApplicationErrorRules) ApplicationErrorRulesCustomErrorsPtrOutput { return v.CustomErrors }).(ApplicationErrorRulesCustomErrorsPtrOutput)
}

// (Field has overlap with `WebAppRequestErrors`) An ordered list of HTTP errors. Rules are evaluated from top to bottom;
// the first matching rule applies
func (o ApplicationErrorRulesOutput) HttpErrors() ApplicationErrorRulesHttpErrorsPtrOutput {
	return o.ApplyT(func(v *ApplicationErrorRules) ApplicationErrorRulesHttpErrorsPtrOutput { return v.HttpErrors }).(ApplicationErrorRulesHttpErrorsPtrOutput)
}

// (Field has overlap with `WebAppCustomErrors`) Exclude (`true`) or include (`false`) custom errors listed in
// **customErrorRules** in Apdex calculation
func (o ApplicationErrorRulesOutput) IgnoreCustomErrorsApdex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationErrorRules) pulumi.BoolPtrOutput { return v.IgnoreCustomErrorsApdex }).(pulumi.BoolPtrOutput)
}

// (Field has overlap with `WebAppRequestErrors`) Exclude (`true`) or include (`false`) HTTP errors listed in
// **httpErrorRules** in Apdex calculation
func (o ApplicationErrorRulesOutput) IgnoreHttpErrorsApdex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationErrorRules) pulumi.BoolPtrOutput { return v.IgnoreHttpErrorsApdex }).(pulumi.BoolPtrOutput)
}

// Exclude (`true`) or include (`false`) JavaScript errors in Apdex calculation
func (o ApplicationErrorRulesOutput) IgnoreJsErrorsApdex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationErrorRules) pulumi.BoolPtrOutput { return v.IgnoreJsErrorsApdex }).(pulumi.BoolPtrOutput)
}

// The EntityID of the the WebApplication
func (o ApplicationErrorRulesOutput) WebApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationErrorRules) pulumi.StringPtrOutput { return v.WebApplicationId }).(pulumi.StringPtrOutput)
}

type ApplicationErrorRulesArrayOutput struct{ *pulumi.OutputState }

func (ApplicationErrorRulesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationErrorRules)(nil)).Elem()
}

func (o ApplicationErrorRulesArrayOutput) ToApplicationErrorRulesArrayOutput() ApplicationErrorRulesArrayOutput {
	return o
}

func (o ApplicationErrorRulesArrayOutput) ToApplicationErrorRulesArrayOutputWithContext(ctx context.Context) ApplicationErrorRulesArrayOutput {
	return o
}

func (o ApplicationErrorRulesArrayOutput) Index(i pulumi.IntInput) ApplicationErrorRulesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApplicationErrorRules {
		return vs[0].([]*ApplicationErrorRules)[vs[1].(int)]
	}).(ApplicationErrorRulesOutput)
}

type ApplicationErrorRulesMapOutput struct{ *pulumi.OutputState }

func (ApplicationErrorRulesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationErrorRules)(nil)).Elem()
}

func (o ApplicationErrorRulesMapOutput) ToApplicationErrorRulesMapOutput() ApplicationErrorRulesMapOutput {
	return o
}

func (o ApplicationErrorRulesMapOutput) ToApplicationErrorRulesMapOutputWithContext(ctx context.Context) ApplicationErrorRulesMapOutput {
	return o
}

func (o ApplicationErrorRulesMapOutput) MapIndex(k pulumi.StringInput) ApplicationErrorRulesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApplicationErrorRules {
		return vs[0].(map[string]*ApplicationErrorRules)[vs[1].(string)]
	}).(ApplicationErrorRulesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationErrorRulesInput)(nil)).Elem(), &ApplicationErrorRules{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationErrorRulesArrayInput)(nil)).Elem(), ApplicationErrorRulesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationErrorRulesMapInput)(nil)).Elem(), ApplicationErrorRulesMap{})
	pulumi.RegisterOutputType(ApplicationErrorRulesOutput{})
	pulumi.RegisterOutputType(ApplicationErrorRulesArrayOutput{})
	pulumi.RegisterOutputType(ApplicationErrorRulesMapOutput{})
}
