// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type CustomUnits struct {
	pulumi.CustomResourceState

	// Unit description should provide additional information about the new unit
	Description pulumi.StringOutput `pulumi:"description"`
	// Unit name has to be unique and is used as identifier.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unit plural name represent the plural form of the unit name.
	PluralName pulumi.StringOutput `pulumi:"pluralName"`
	// Unit symbol has to be unique.
	Symbol pulumi.StringOutput `pulumi:"symbol"`
}

// NewCustomUnits registers a new resource with the given unique name, arguments, and options.
func NewCustomUnits(ctx *pulumi.Context,
	name string, args *CustomUnitsArgs, opts ...pulumi.ResourceOption) (*CustomUnits, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.PluralName == nil {
		return nil, errors.New("invalid value for required argument 'PluralName'")
	}
	if args.Symbol == nil {
		return nil, errors.New("invalid value for required argument 'Symbol'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CustomUnits
	err := ctx.RegisterResource("dynatrace:index/customUnits:CustomUnits", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCustomUnits gets an existing CustomUnits resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCustomUnits(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CustomUnitsState, opts ...pulumi.ResourceOption) (*CustomUnits, error) {
	var resource CustomUnits
	err := ctx.ReadResource("dynatrace:index/customUnits:CustomUnits", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CustomUnits resources.
type customUnitsState struct {
	// Unit description should provide additional information about the new unit
	Description *string `pulumi:"description"`
	// Unit name has to be unique and is used as identifier.
	Name *string `pulumi:"name"`
	// Unit plural name represent the plural form of the unit name.
	PluralName *string `pulumi:"pluralName"`
	// Unit symbol has to be unique.
	Symbol *string `pulumi:"symbol"`
}

type CustomUnitsState struct {
	// Unit description should provide additional information about the new unit
	Description pulumi.StringPtrInput
	// Unit name has to be unique and is used as identifier.
	Name pulumi.StringPtrInput
	// Unit plural name represent the plural form of the unit name.
	PluralName pulumi.StringPtrInput
	// Unit symbol has to be unique.
	Symbol pulumi.StringPtrInput
}

func (CustomUnitsState) ElementType() reflect.Type {
	return reflect.TypeOf((*customUnitsState)(nil)).Elem()
}

type customUnitsArgs struct {
	// Unit description should provide additional information about the new unit
	Description string `pulumi:"description"`
	// Unit name has to be unique and is used as identifier.
	Name *string `pulumi:"name"`
	// Unit plural name represent the plural form of the unit name.
	PluralName string `pulumi:"pluralName"`
	// Unit symbol has to be unique.
	Symbol string `pulumi:"symbol"`
}

// The set of arguments for constructing a CustomUnits resource.
type CustomUnitsArgs struct {
	// Unit description should provide additional information about the new unit
	Description pulumi.StringInput
	// Unit name has to be unique and is used as identifier.
	Name pulumi.StringPtrInput
	// Unit plural name represent the plural form of the unit name.
	PluralName pulumi.StringInput
	// Unit symbol has to be unique.
	Symbol pulumi.StringInput
}

func (CustomUnitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*customUnitsArgs)(nil)).Elem()
}

type CustomUnitsInput interface {
	pulumi.Input

	ToCustomUnitsOutput() CustomUnitsOutput
	ToCustomUnitsOutputWithContext(ctx context.Context) CustomUnitsOutput
}

func (*CustomUnits) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomUnits)(nil)).Elem()
}

func (i *CustomUnits) ToCustomUnitsOutput() CustomUnitsOutput {
	return i.ToCustomUnitsOutputWithContext(context.Background())
}

func (i *CustomUnits) ToCustomUnitsOutputWithContext(ctx context.Context) CustomUnitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomUnitsOutput)
}

// CustomUnitsArrayInput is an input type that accepts CustomUnitsArray and CustomUnitsArrayOutput values.
// You can construct a concrete instance of `CustomUnitsArrayInput` via:
//
//	CustomUnitsArray{ CustomUnitsArgs{...} }
type CustomUnitsArrayInput interface {
	pulumi.Input

	ToCustomUnitsArrayOutput() CustomUnitsArrayOutput
	ToCustomUnitsArrayOutputWithContext(context.Context) CustomUnitsArrayOutput
}

type CustomUnitsArray []CustomUnitsInput

func (CustomUnitsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomUnits)(nil)).Elem()
}

func (i CustomUnitsArray) ToCustomUnitsArrayOutput() CustomUnitsArrayOutput {
	return i.ToCustomUnitsArrayOutputWithContext(context.Background())
}

func (i CustomUnitsArray) ToCustomUnitsArrayOutputWithContext(ctx context.Context) CustomUnitsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomUnitsArrayOutput)
}

// CustomUnitsMapInput is an input type that accepts CustomUnitsMap and CustomUnitsMapOutput values.
// You can construct a concrete instance of `CustomUnitsMapInput` via:
//
//	CustomUnitsMap{ "key": CustomUnitsArgs{...} }
type CustomUnitsMapInput interface {
	pulumi.Input

	ToCustomUnitsMapOutput() CustomUnitsMapOutput
	ToCustomUnitsMapOutputWithContext(context.Context) CustomUnitsMapOutput
}

type CustomUnitsMap map[string]CustomUnitsInput

func (CustomUnitsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomUnits)(nil)).Elem()
}

func (i CustomUnitsMap) ToCustomUnitsMapOutput() CustomUnitsMapOutput {
	return i.ToCustomUnitsMapOutputWithContext(context.Background())
}

func (i CustomUnitsMap) ToCustomUnitsMapOutputWithContext(ctx context.Context) CustomUnitsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomUnitsMapOutput)
}

type CustomUnitsOutput struct{ *pulumi.OutputState }

func (CustomUnitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomUnits)(nil)).Elem()
}

func (o CustomUnitsOutput) ToCustomUnitsOutput() CustomUnitsOutput {
	return o
}

func (o CustomUnitsOutput) ToCustomUnitsOutputWithContext(ctx context.Context) CustomUnitsOutput {
	return o
}

// Unit description should provide additional information about the new unit
func (o CustomUnitsOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomUnits) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Unit name has to be unique and is used as identifier.
func (o CustomUnitsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomUnits) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unit plural name represent the plural form of the unit name.
func (o CustomUnitsOutput) PluralName() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomUnits) pulumi.StringOutput { return v.PluralName }).(pulumi.StringOutput)
}

// Unit symbol has to be unique.
func (o CustomUnitsOutput) Symbol() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomUnits) pulumi.StringOutput { return v.Symbol }).(pulumi.StringOutput)
}

type CustomUnitsArrayOutput struct{ *pulumi.OutputState }

func (CustomUnitsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomUnits)(nil)).Elem()
}

func (o CustomUnitsArrayOutput) ToCustomUnitsArrayOutput() CustomUnitsArrayOutput {
	return o
}

func (o CustomUnitsArrayOutput) ToCustomUnitsArrayOutputWithContext(ctx context.Context) CustomUnitsArrayOutput {
	return o
}

func (o CustomUnitsArrayOutput) Index(i pulumi.IntInput) CustomUnitsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CustomUnits {
		return vs[0].([]*CustomUnits)[vs[1].(int)]
	}).(CustomUnitsOutput)
}

type CustomUnitsMapOutput struct{ *pulumi.OutputState }

func (CustomUnitsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomUnits)(nil)).Elem()
}

func (o CustomUnitsMapOutput) ToCustomUnitsMapOutput() CustomUnitsMapOutput {
	return o
}

func (o CustomUnitsMapOutput) ToCustomUnitsMapOutputWithContext(ctx context.Context) CustomUnitsMapOutput {
	return o
}

func (o CustomUnitsMapOutput) MapIndex(k pulumi.StringInput) CustomUnitsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CustomUnits {
		return vs[0].(map[string]*CustomUnits)[vs[1].(string)]
	}).(CustomUnitsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CustomUnitsInput)(nil)).Elem(), &CustomUnits{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomUnitsArrayInput)(nil)).Elem(), CustomUnitsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomUnitsMapInput)(nil)).Elem(), CustomUnitsMap{})
	pulumi.RegisterOutputType(CustomUnitsOutput{})
	pulumi.RegisterOutputType(CustomUnitsArrayOutput{})
	pulumi.RegisterOutputType(CustomUnitsMapOutput{})
}
