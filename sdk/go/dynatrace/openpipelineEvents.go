// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OpenpipelineEvents struct {
	pulumi.CustomResourceState

	// List of all ingest sources of the configuration
	Endpoints OpenpipelineEventsEndpointsPtrOutput `pulumi:"endpoints"`
	// List of all pipelines of the configuration
	Pipelines OpenpipelineEventsPipelinesPtrOutput `pulumi:"pipelines"`
	// Dynamic routing definition
	Routing OpenpipelineEventsRoutingPtrOutput `pulumi:"routing"`
}

// NewOpenpipelineEvents registers a new resource with the given unique name, arguments, and options.
func NewOpenpipelineEvents(ctx *pulumi.Context,
	name string, args *OpenpipelineEventsArgs, opts ...pulumi.ResourceOption) (*OpenpipelineEvents, error) {
	if args == nil {
		args = &OpenpipelineEventsArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenpipelineEvents
	err := ctx.RegisterResource("dynatrace:index/openpipelineEvents:OpenpipelineEvents", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenpipelineEvents gets an existing OpenpipelineEvents resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenpipelineEvents(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenpipelineEventsState, opts ...pulumi.ResourceOption) (*OpenpipelineEvents, error) {
	var resource OpenpipelineEvents
	err := ctx.ReadResource("dynatrace:index/openpipelineEvents:OpenpipelineEvents", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenpipelineEvents resources.
type openpipelineEventsState struct {
	// List of all ingest sources of the configuration
	Endpoints *OpenpipelineEventsEndpoints `pulumi:"endpoints"`
	// List of all pipelines of the configuration
	Pipelines *OpenpipelineEventsPipelines `pulumi:"pipelines"`
	// Dynamic routing definition
	Routing *OpenpipelineEventsRouting `pulumi:"routing"`
}

type OpenpipelineEventsState struct {
	// List of all ingest sources of the configuration
	Endpoints OpenpipelineEventsEndpointsPtrInput
	// List of all pipelines of the configuration
	Pipelines OpenpipelineEventsPipelinesPtrInput
	// Dynamic routing definition
	Routing OpenpipelineEventsRoutingPtrInput
}

func (OpenpipelineEventsState) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineEventsState)(nil)).Elem()
}

type openpipelineEventsArgs struct {
	// List of all ingest sources of the configuration
	Endpoints *OpenpipelineEventsEndpoints `pulumi:"endpoints"`
	// List of all pipelines of the configuration
	Pipelines *OpenpipelineEventsPipelines `pulumi:"pipelines"`
	// Dynamic routing definition
	Routing *OpenpipelineEventsRouting `pulumi:"routing"`
}

// The set of arguments for constructing a OpenpipelineEvents resource.
type OpenpipelineEventsArgs struct {
	// List of all ingest sources of the configuration
	Endpoints OpenpipelineEventsEndpointsPtrInput
	// List of all pipelines of the configuration
	Pipelines OpenpipelineEventsPipelinesPtrInput
	// Dynamic routing definition
	Routing OpenpipelineEventsRoutingPtrInput
}

func (OpenpipelineEventsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineEventsArgs)(nil)).Elem()
}

type OpenpipelineEventsInput interface {
	pulumi.Input

	ToOpenpipelineEventsOutput() OpenpipelineEventsOutput
	ToOpenpipelineEventsOutputWithContext(ctx context.Context) OpenpipelineEventsOutput
}

func (*OpenpipelineEvents) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineEvents)(nil)).Elem()
}

func (i *OpenpipelineEvents) ToOpenpipelineEventsOutput() OpenpipelineEventsOutput {
	return i.ToOpenpipelineEventsOutputWithContext(context.Background())
}

func (i *OpenpipelineEvents) ToOpenpipelineEventsOutputWithContext(ctx context.Context) OpenpipelineEventsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineEventsOutput)
}

// OpenpipelineEventsArrayInput is an input type that accepts OpenpipelineEventsArray and OpenpipelineEventsArrayOutput values.
// You can construct a concrete instance of `OpenpipelineEventsArrayInput` via:
//
//	OpenpipelineEventsArray{ OpenpipelineEventsArgs{...} }
type OpenpipelineEventsArrayInput interface {
	pulumi.Input

	ToOpenpipelineEventsArrayOutput() OpenpipelineEventsArrayOutput
	ToOpenpipelineEventsArrayOutputWithContext(context.Context) OpenpipelineEventsArrayOutput
}

type OpenpipelineEventsArray []OpenpipelineEventsInput

func (OpenpipelineEventsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineEvents)(nil)).Elem()
}

func (i OpenpipelineEventsArray) ToOpenpipelineEventsArrayOutput() OpenpipelineEventsArrayOutput {
	return i.ToOpenpipelineEventsArrayOutputWithContext(context.Background())
}

func (i OpenpipelineEventsArray) ToOpenpipelineEventsArrayOutputWithContext(ctx context.Context) OpenpipelineEventsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineEventsArrayOutput)
}

// OpenpipelineEventsMapInput is an input type that accepts OpenpipelineEventsMap and OpenpipelineEventsMapOutput values.
// You can construct a concrete instance of `OpenpipelineEventsMapInput` via:
//
//	OpenpipelineEventsMap{ "key": OpenpipelineEventsArgs{...} }
type OpenpipelineEventsMapInput interface {
	pulumi.Input

	ToOpenpipelineEventsMapOutput() OpenpipelineEventsMapOutput
	ToOpenpipelineEventsMapOutputWithContext(context.Context) OpenpipelineEventsMapOutput
}

type OpenpipelineEventsMap map[string]OpenpipelineEventsInput

func (OpenpipelineEventsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineEvents)(nil)).Elem()
}

func (i OpenpipelineEventsMap) ToOpenpipelineEventsMapOutput() OpenpipelineEventsMapOutput {
	return i.ToOpenpipelineEventsMapOutputWithContext(context.Background())
}

func (i OpenpipelineEventsMap) ToOpenpipelineEventsMapOutputWithContext(ctx context.Context) OpenpipelineEventsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineEventsMapOutput)
}

type OpenpipelineEventsOutput struct{ *pulumi.OutputState }

func (OpenpipelineEventsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineEvents)(nil)).Elem()
}

func (o OpenpipelineEventsOutput) ToOpenpipelineEventsOutput() OpenpipelineEventsOutput {
	return o
}

func (o OpenpipelineEventsOutput) ToOpenpipelineEventsOutputWithContext(ctx context.Context) OpenpipelineEventsOutput {
	return o
}

// List of all ingest sources of the configuration
func (o OpenpipelineEventsOutput) Endpoints() OpenpipelineEventsEndpointsPtrOutput {
	return o.ApplyT(func(v *OpenpipelineEvents) OpenpipelineEventsEndpointsPtrOutput { return v.Endpoints }).(OpenpipelineEventsEndpointsPtrOutput)
}

// List of all pipelines of the configuration
func (o OpenpipelineEventsOutput) Pipelines() OpenpipelineEventsPipelinesPtrOutput {
	return o.ApplyT(func(v *OpenpipelineEvents) OpenpipelineEventsPipelinesPtrOutput { return v.Pipelines }).(OpenpipelineEventsPipelinesPtrOutput)
}

// Dynamic routing definition
func (o OpenpipelineEventsOutput) Routing() OpenpipelineEventsRoutingPtrOutput {
	return o.ApplyT(func(v *OpenpipelineEvents) OpenpipelineEventsRoutingPtrOutput { return v.Routing }).(OpenpipelineEventsRoutingPtrOutput)
}

type OpenpipelineEventsArrayOutput struct{ *pulumi.OutputState }

func (OpenpipelineEventsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineEvents)(nil)).Elem()
}

func (o OpenpipelineEventsArrayOutput) ToOpenpipelineEventsArrayOutput() OpenpipelineEventsArrayOutput {
	return o
}

func (o OpenpipelineEventsArrayOutput) ToOpenpipelineEventsArrayOutputWithContext(ctx context.Context) OpenpipelineEventsArrayOutput {
	return o
}

func (o OpenpipelineEventsArrayOutput) Index(i pulumi.IntInput) OpenpipelineEventsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenpipelineEvents {
		return vs[0].([]*OpenpipelineEvents)[vs[1].(int)]
	}).(OpenpipelineEventsOutput)
}

type OpenpipelineEventsMapOutput struct{ *pulumi.OutputState }

func (OpenpipelineEventsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineEvents)(nil)).Elem()
}

func (o OpenpipelineEventsMapOutput) ToOpenpipelineEventsMapOutput() OpenpipelineEventsMapOutput {
	return o
}

func (o OpenpipelineEventsMapOutput) ToOpenpipelineEventsMapOutputWithContext(ctx context.Context) OpenpipelineEventsMapOutput {
	return o
}

func (o OpenpipelineEventsMapOutput) MapIndex(k pulumi.StringInput) OpenpipelineEventsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenpipelineEvents {
		return vs[0].(map[string]*OpenpipelineEvents)[vs[1].(string)]
	}).(OpenpipelineEventsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineEventsInput)(nil)).Elem(), &OpenpipelineEvents{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineEventsArrayInput)(nil)).Elem(), OpenpipelineEventsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineEventsMapInput)(nil)).Elem(), OpenpipelineEventsMap{})
	pulumi.RegisterOutputType(OpenpipelineEventsOutput{})
	pulumi.RegisterOutputType(OpenpipelineEventsArrayOutput{})
	pulumi.RegisterOutputType(OpenpipelineEventsMapOutput{})
}
