// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type GenericRelationships struct {
	pulumi.CustomResourceState

	// The user or extension that created this relationship.
	CreatedBy pulumi.StringOutput `pulumi:"createdBy"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Specify a role for the source entity. If both source and destination type are the same, referring different roles will allow identification of a relationships direction. If role is left blank, any role of the source type is considered for the relationship.
	FromRole pulumi.StringPtrOutput `pulumi:"fromRole"`
	// Define an entity type as the source of the relationship.
	FromType pulumi.StringOutput `pulumi:"fromType"`
	// Specify all sources which should be evaluated for this relationship rule. The relationship is only created when any of the filters match.
	Sources GenericRelationshipsSourcesOutput `pulumi:"sources"`
	// Specify a role for the destination entity. If both source and destination type are the same, referring different roles will allow identification of a relationships direction. If role is left blank, any role of the destination type is considered for the relationship.
	ToRole pulumi.StringPtrOutput `pulumi:"toRole"`
	// Define an entity type as the destination of the relationship. You can choose the same type as the source type. In this case you also may assign different roles for source and destination for having directed relationships.
	ToType pulumi.StringOutput `pulumi:"toType"`
	// Possible Values: `CALLS`, `CHILD_OF`, `INSTANCE_OF`, `PART_OF`, `RUNS_ON`, `SAME_AS`
	TypeOfRelation pulumi.StringOutput `pulumi:"typeOfRelation"`
}

// NewGenericRelationships registers a new resource with the given unique name, arguments, and options.
func NewGenericRelationships(ctx *pulumi.Context,
	name string, args *GenericRelationshipsArgs, opts ...pulumi.ResourceOption) (*GenericRelationships, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CreatedBy == nil {
		return nil, errors.New("invalid value for required argument 'CreatedBy'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.FromType == nil {
		return nil, errors.New("invalid value for required argument 'FromType'")
	}
	if args.Sources == nil {
		return nil, errors.New("invalid value for required argument 'Sources'")
	}
	if args.ToType == nil {
		return nil, errors.New("invalid value for required argument 'ToType'")
	}
	if args.TypeOfRelation == nil {
		return nil, errors.New("invalid value for required argument 'TypeOfRelation'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GenericRelationships
	err := ctx.RegisterResource("dynatrace:index/genericRelationships:GenericRelationships", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGenericRelationships gets an existing GenericRelationships resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGenericRelationships(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GenericRelationshipsState, opts ...pulumi.ResourceOption) (*GenericRelationships, error) {
	var resource GenericRelationships
	err := ctx.ReadResource("dynatrace:index/genericRelationships:GenericRelationships", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GenericRelationships resources.
type genericRelationshipsState struct {
	// The user or extension that created this relationship.
	CreatedBy *string `pulumi:"createdBy"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// Specify a role for the source entity. If both source and destination type are the same, referring different roles will allow identification of a relationships direction. If role is left blank, any role of the source type is considered for the relationship.
	FromRole *string `pulumi:"fromRole"`
	// Define an entity type as the source of the relationship.
	FromType *string `pulumi:"fromType"`
	// Specify all sources which should be evaluated for this relationship rule. The relationship is only created when any of the filters match.
	Sources *GenericRelationshipsSources `pulumi:"sources"`
	// Specify a role for the destination entity. If both source and destination type are the same, referring different roles will allow identification of a relationships direction. If role is left blank, any role of the destination type is considered for the relationship.
	ToRole *string `pulumi:"toRole"`
	// Define an entity type as the destination of the relationship. You can choose the same type as the source type. In this case you also may assign different roles for source and destination for having directed relationships.
	ToType *string `pulumi:"toType"`
	// Possible Values: `CALLS`, `CHILD_OF`, `INSTANCE_OF`, `PART_OF`, `RUNS_ON`, `SAME_AS`
	TypeOfRelation *string `pulumi:"typeOfRelation"`
}

type GenericRelationshipsState struct {
	// The user or extension that created this relationship.
	CreatedBy pulumi.StringPtrInput
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// Specify a role for the source entity. If both source and destination type are the same, referring different roles will allow identification of a relationships direction. If role is left blank, any role of the source type is considered for the relationship.
	FromRole pulumi.StringPtrInput
	// Define an entity type as the source of the relationship.
	FromType pulumi.StringPtrInput
	// Specify all sources which should be evaluated for this relationship rule. The relationship is only created when any of the filters match.
	Sources GenericRelationshipsSourcesPtrInput
	// Specify a role for the destination entity. If both source and destination type are the same, referring different roles will allow identification of a relationships direction. If role is left blank, any role of the destination type is considered for the relationship.
	ToRole pulumi.StringPtrInput
	// Define an entity type as the destination of the relationship. You can choose the same type as the source type. In this case you also may assign different roles for source and destination for having directed relationships.
	ToType pulumi.StringPtrInput
	// Possible Values: `CALLS`, `CHILD_OF`, `INSTANCE_OF`, `PART_OF`, `RUNS_ON`, `SAME_AS`
	TypeOfRelation pulumi.StringPtrInput
}

func (GenericRelationshipsState) ElementType() reflect.Type {
	return reflect.TypeOf((*genericRelationshipsState)(nil)).Elem()
}

type genericRelationshipsArgs struct {
	// The user or extension that created this relationship.
	CreatedBy string `pulumi:"createdBy"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// Specify a role for the source entity. If both source and destination type are the same, referring different roles will allow identification of a relationships direction. If role is left blank, any role of the source type is considered for the relationship.
	FromRole *string `pulumi:"fromRole"`
	// Define an entity type as the source of the relationship.
	FromType string `pulumi:"fromType"`
	// Specify all sources which should be evaluated for this relationship rule. The relationship is only created when any of the filters match.
	Sources GenericRelationshipsSources `pulumi:"sources"`
	// Specify a role for the destination entity. If both source and destination type are the same, referring different roles will allow identification of a relationships direction. If role is left blank, any role of the destination type is considered for the relationship.
	ToRole *string `pulumi:"toRole"`
	// Define an entity type as the destination of the relationship. You can choose the same type as the source type. In this case you also may assign different roles for source and destination for having directed relationships.
	ToType string `pulumi:"toType"`
	// Possible Values: `CALLS`, `CHILD_OF`, `INSTANCE_OF`, `PART_OF`, `RUNS_ON`, `SAME_AS`
	TypeOfRelation string `pulumi:"typeOfRelation"`
}

// The set of arguments for constructing a GenericRelationships resource.
type GenericRelationshipsArgs struct {
	// The user or extension that created this relationship.
	CreatedBy pulumi.StringInput
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// Specify a role for the source entity. If both source and destination type are the same, referring different roles will allow identification of a relationships direction. If role is left blank, any role of the source type is considered for the relationship.
	FromRole pulumi.StringPtrInput
	// Define an entity type as the source of the relationship.
	FromType pulumi.StringInput
	// Specify all sources which should be evaluated for this relationship rule. The relationship is only created when any of the filters match.
	Sources GenericRelationshipsSourcesInput
	// Specify a role for the destination entity. If both source and destination type are the same, referring different roles will allow identification of a relationships direction. If role is left blank, any role of the destination type is considered for the relationship.
	ToRole pulumi.StringPtrInput
	// Define an entity type as the destination of the relationship. You can choose the same type as the source type. In this case you also may assign different roles for source and destination for having directed relationships.
	ToType pulumi.StringInput
	// Possible Values: `CALLS`, `CHILD_OF`, `INSTANCE_OF`, `PART_OF`, `RUNS_ON`, `SAME_AS`
	TypeOfRelation pulumi.StringInput
}

func (GenericRelationshipsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*genericRelationshipsArgs)(nil)).Elem()
}

type GenericRelationshipsInput interface {
	pulumi.Input

	ToGenericRelationshipsOutput() GenericRelationshipsOutput
	ToGenericRelationshipsOutputWithContext(ctx context.Context) GenericRelationshipsOutput
}

func (*GenericRelationships) ElementType() reflect.Type {
	return reflect.TypeOf((**GenericRelationships)(nil)).Elem()
}

func (i *GenericRelationships) ToGenericRelationshipsOutput() GenericRelationshipsOutput {
	return i.ToGenericRelationshipsOutputWithContext(context.Background())
}

func (i *GenericRelationships) ToGenericRelationshipsOutputWithContext(ctx context.Context) GenericRelationshipsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenericRelationshipsOutput)
}

// GenericRelationshipsArrayInput is an input type that accepts GenericRelationshipsArray and GenericRelationshipsArrayOutput values.
// You can construct a concrete instance of `GenericRelationshipsArrayInput` via:
//
//	GenericRelationshipsArray{ GenericRelationshipsArgs{...} }
type GenericRelationshipsArrayInput interface {
	pulumi.Input

	ToGenericRelationshipsArrayOutput() GenericRelationshipsArrayOutput
	ToGenericRelationshipsArrayOutputWithContext(context.Context) GenericRelationshipsArrayOutput
}

type GenericRelationshipsArray []GenericRelationshipsInput

func (GenericRelationshipsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GenericRelationships)(nil)).Elem()
}

func (i GenericRelationshipsArray) ToGenericRelationshipsArrayOutput() GenericRelationshipsArrayOutput {
	return i.ToGenericRelationshipsArrayOutputWithContext(context.Background())
}

func (i GenericRelationshipsArray) ToGenericRelationshipsArrayOutputWithContext(ctx context.Context) GenericRelationshipsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenericRelationshipsArrayOutput)
}

// GenericRelationshipsMapInput is an input type that accepts GenericRelationshipsMap and GenericRelationshipsMapOutput values.
// You can construct a concrete instance of `GenericRelationshipsMapInput` via:
//
//	GenericRelationshipsMap{ "key": GenericRelationshipsArgs{...} }
type GenericRelationshipsMapInput interface {
	pulumi.Input

	ToGenericRelationshipsMapOutput() GenericRelationshipsMapOutput
	ToGenericRelationshipsMapOutputWithContext(context.Context) GenericRelationshipsMapOutput
}

type GenericRelationshipsMap map[string]GenericRelationshipsInput

func (GenericRelationshipsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GenericRelationships)(nil)).Elem()
}

func (i GenericRelationshipsMap) ToGenericRelationshipsMapOutput() GenericRelationshipsMapOutput {
	return i.ToGenericRelationshipsMapOutputWithContext(context.Background())
}

func (i GenericRelationshipsMap) ToGenericRelationshipsMapOutputWithContext(ctx context.Context) GenericRelationshipsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenericRelationshipsMapOutput)
}

type GenericRelationshipsOutput struct{ *pulumi.OutputState }

func (GenericRelationshipsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GenericRelationships)(nil)).Elem()
}

func (o GenericRelationshipsOutput) ToGenericRelationshipsOutput() GenericRelationshipsOutput {
	return o
}

func (o GenericRelationshipsOutput) ToGenericRelationshipsOutputWithContext(ctx context.Context) GenericRelationshipsOutput {
	return o
}

// The user or extension that created this relationship.
func (o GenericRelationshipsOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *GenericRelationships) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// This setting is enabled (`true`) or disabled (`false`)
func (o GenericRelationshipsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *GenericRelationships) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Specify a role for the source entity. If both source and destination type are the same, referring different roles will allow identification of a relationships direction. If role is left blank, any role of the source type is considered for the relationship.
func (o GenericRelationshipsOutput) FromRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GenericRelationships) pulumi.StringPtrOutput { return v.FromRole }).(pulumi.StringPtrOutput)
}

// Define an entity type as the source of the relationship.
func (o GenericRelationshipsOutput) FromType() pulumi.StringOutput {
	return o.ApplyT(func(v *GenericRelationships) pulumi.StringOutput { return v.FromType }).(pulumi.StringOutput)
}

// Specify all sources which should be evaluated for this relationship rule. The relationship is only created when any of the filters match.
func (o GenericRelationshipsOutput) Sources() GenericRelationshipsSourcesOutput {
	return o.ApplyT(func(v *GenericRelationships) GenericRelationshipsSourcesOutput { return v.Sources }).(GenericRelationshipsSourcesOutput)
}

// Specify a role for the destination entity. If both source and destination type are the same, referring different roles will allow identification of a relationships direction. If role is left blank, any role of the destination type is considered for the relationship.
func (o GenericRelationshipsOutput) ToRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GenericRelationships) pulumi.StringPtrOutput { return v.ToRole }).(pulumi.StringPtrOutput)
}

// Define an entity type as the destination of the relationship. You can choose the same type as the source type. In this case you also may assign different roles for source and destination for having directed relationships.
func (o GenericRelationshipsOutput) ToType() pulumi.StringOutput {
	return o.ApplyT(func(v *GenericRelationships) pulumi.StringOutput { return v.ToType }).(pulumi.StringOutput)
}

// Possible Values: `CALLS`, `CHILD_OF`, `INSTANCE_OF`, `PART_OF`, `RUNS_ON`, `SAME_AS`
func (o GenericRelationshipsOutput) TypeOfRelation() pulumi.StringOutput {
	return o.ApplyT(func(v *GenericRelationships) pulumi.StringOutput { return v.TypeOfRelation }).(pulumi.StringOutput)
}

type GenericRelationshipsArrayOutput struct{ *pulumi.OutputState }

func (GenericRelationshipsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GenericRelationships)(nil)).Elem()
}

func (o GenericRelationshipsArrayOutput) ToGenericRelationshipsArrayOutput() GenericRelationshipsArrayOutput {
	return o
}

func (o GenericRelationshipsArrayOutput) ToGenericRelationshipsArrayOutputWithContext(ctx context.Context) GenericRelationshipsArrayOutput {
	return o
}

func (o GenericRelationshipsArrayOutput) Index(i pulumi.IntInput) GenericRelationshipsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GenericRelationships {
		return vs[0].([]*GenericRelationships)[vs[1].(int)]
	}).(GenericRelationshipsOutput)
}

type GenericRelationshipsMapOutput struct{ *pulumi.OutputState }

func (GenericRelationshipsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GenericRelationships)(nil)).Elem()
}

func (o GenericRelationshipsMapOutput) ToGenericRelationshipsMapOutput() GenericRelationshipsMapOutput {
	return o
}

func (o GenericRelationshipsMapOutput) ToGenericRelationshipsMapOutputWithContext(ctx context.Context) GenericRelationshipsMapOutput {
	return o
}

func (o GenericRelationshipsMapOutput) MapIndex(k pulumi.StringInput) GenericRelationshipsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GenericRelationships {
		return vs[0].(map[string]*GenericRelationships)[vs[1].(string)]
	}).(GenericRelationshipsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GenericRelationshipsInput)(nil)).Elem(), &GenericRelationships{})
	pulumi.RegisterInputType(reflect.TypeOf((*GenericRelationshipsArrayInput)(nil)).Elem(), GenericRelationshipsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GenericRelationshipsMapInput)(nil)).Elem(), GenericRelationshipsMap{})
	pulumi.RegisterOutputType(GenericRelationshipsOutput{})
	pulumi.RegisterOutputType(GenericRelationshipsArrayOutput{})
	pulumi.RegisterOutputType(GenericRelationshipsMapOutput{})
}
