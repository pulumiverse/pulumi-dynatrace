// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

// > This resource requires the API token scopes **Read settings** (`settings.read`) and **Write settings** (`settings.write`)
//
// ## Dynatrace Documentation
//
// - Services - https://docs.dynatrace.com/docs/observe/applications-and-microservices/services
//
// - Settings API - https://www.dynatrace.com/support/help/dynatrace-api/environment-api/settings (schemaId: `builtin:service-detection-rules`)
//
// ## Resource Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dynatrace.NewServiceDetectionRules(ctx, "#name#", &dynatrace.ServiceDetectionRulesArgs{
//				Enabled: pulumi.Bool(false),
//				Rule: &dynatrace.ServiceDetectionRulesRuleArgs{
//					AdditionalRequiredAttributes: pulumi.StringArray{
//						pulumi.String("attribute-1"),
//						pulumi.String("attribute-2"),
//					},
//					Condition:           pulumi.String("matchesValue(k8s.cluster.name,\"terraform\")"),
//					Description:         pulumi.String("Example description"),
//					RuleName:            pulumi.String("#name#"),
//					ServiceNameTemplate: pulumi.String("{k8s.workload.name}"),
//				},
//				Scope: pulumi.String("environment"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ServiceDetectionRules struct {
	pulumi.CustomResourceState

	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringOutput `pulumi:"insertAfter"`
	// Rule
	Rule ServiceDetectionRulesRuleOutput `pulumi:"rule"`
	// The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
}

// NewServiceDetectionRules registers a new resource with the given unique name, arguments, and options.
func NewServiceDetectionRules(ctx *pulumi.Context,
	name string, args *ServiceDetectionRulesArgs, opts ...pulumi.ResourceOption) (*ServiceDetectionRules, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Rule == nil {
		return nil, errors.New("invalid value for required argument 'Rule'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceDetectionRules
	err := ctx.RegisterResource("dynatrace:index/serviceDetectionRules:ServiceDetectionRules", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceDetectionRules gets an existing ServiceDetectionRules resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceDetectionRules(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceDetectionRulesState, opts ...pulumi.ResourceOption) (*ServiceDetectionRules, error) {
	var resource ServiceDetectionRules
	err := ctx.ReadResource("dynatrace:index/serviceDetectionRules:ServiceDetectionRules", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceDetectionRules resources.
type serviceDetectionRulesState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `pulumi:"insertAfter"`
	// Rule
	Rule *ServiceDetectionRulesRule `pulumi:"rule"`
	// The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
}

type ServiceDetectionRulesState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringPtrInput
	// Rule
	Rule ServiceDetectionRulesRulePtrInput
	// The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
}

func (ServiceDetectionRulesState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceDetectionRulesState)(nil)).Elem()
}

type serviceDetectionRulesArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `pulumi:"insertAfter"`
	// Rule
	Rule ServiceDetectionRulesRule `pulumi:"rule"`
	// The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
}

// The set of arguments for constructing a ServiceDetectionRules resource.
type ServiceDetectionRulesArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringPtrInput
	// Rule
	Rule ServiceDetectionRulesRuleInput
	// The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
}

func (ServiceDetectionRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceDetectionRulesArgs)(nil)).Elem()
}

type ServiceDetectionRulesInput interface {
	pulumi.Input

	ToServiceDetectionRulesOutput() ServiceDetectionRulesOutput
	ToServiceDetectionRulesOutputWithContext(ctx context.Context) ServiceDetectionRulesOutput
}

func (*ServiceDetectionRules) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDetectionRules)(nil)).Elem()
}

func (i *ServiceDetectionRules) ToServiceDetectionRulesOutput() ServiceDetectionRulesOutput {
	return i.ToServiceDetectionRulesOutputWithContext(context.Background())
}

func (i *ServiceDetectionRules) ToServiceDetectionRulesOutputWithContext(ctx context.Context) ServiceDetectionRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDetectionRulesOutput)
}

// ServiceDetectionRulesArrayInput is an input type that accepts ServiceDetectionRulesArray and ServiceDetectionRulesArrayOutput values.
// You can construct a concrete instance of `ServiceDetectionRulesArrayInput` via:
//
//	ServiceDetectionRulesArray{ ServiceDetectionRulesArgs{...} }
type ServiceDetectionRulesArrayInput interface {
	pulumi.Input

	ToServiceDetectionRulesArrayOutput() ServiceDetectionRulesArrayOutput
	ToServiceDetectionRulesArrayOutputWithContext(context.Context) ServiceDetectionRulesArrayOutput
}

type ServiceDetectionRulesArray []ServiceDetectionRulesInput

func (ServiceDetectionRulesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceDetectionRules)(nil)).Elem()
}

func (i ServiceDetectionRulesArray) ToServiceDetectionRulesArrayOutput() ServiceDetectionRulesArrayOutput {
	return i.ToServiceDetectionRulesArrayOutputWithContext(context.Background())
}

func (i ServiceDetectionRulesArray) ToServiceDetectionRulesArrayOutputWithContext(ctx context.Context) ServiceDetectionRulesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDetectionRulesArrayOutput)
}

// ServiceDetectionRulesMapInput is an input type that accepts ServiceDetectionRulesMap and ServiceDetectionRulesMapOutput values.
// You can construct a concrete instance of `ServiceDetectionRulesMapInput` via:
//
//	ServiceDetectionRulesMap{ "key": ServiceDetectionRulesArgs{...} }
type ServiceDetectionRulesMapInput interface {
	pulumi.Input

	ToServiceDetectionRulesMapOutput() ServiceDetectionRulesMapOutput
	ToServiceDetectionRulesMapOutputWithContext(context.Context) ServiceDetectionRulesMapOutput
}

type ServiceDetectionRulesMap map[string]ServiceDetectionRulesInput

func (ServiceDetectionRulesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceDetectionRules)(nil)).Elem()
}

func (i ServiceDetectionRulesMap) ToServiceDetectionRulesMapOutput() ServiceDetectionRulesMapOutput {
	return i.ToServiceDetectionRulesMapOutputWithContext(context.Background())
}

func (i ServiceDetectionRulesMap) ToServiceDetectionRulesMapOutputWithContext(ctx context.Context) ServiceDetectionRulesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDetectionRulesMapOutput)
}

type ServiceDetectionRulesOutput struct{ *pulumi.OutputState }

func (ServiceDetectionRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDetectionRules)(nil)).Elem()
}

func (o ServiceDetectionRulesOutput) ToServiceDetectionRulesOutput() ServiceDetectionRulesOutput {
	return o
}

func (o ServiceDetectionRulesOutput) ToServiceDetectionRulesOutputWithContext(ctx context.Context) ServiceDetectionRulesOutput {
	return o
}

// This setting is enabled (`true`) or disabled (`false`)
func (o ServiceDetectionRulesOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ServiceDetectionRules) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
func (o ServiceDetectionRulesOutput) InsertAfter() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceDetectionRules) pulumi.StringOutput { return v.InsertAfter }).(pulumi.StringOutput)
}

// Rule
func (o ServiceDetectionRulesOutput) Rule() ServiceDetectionRulesRuleOutput {
	return o.ApplyT(func(v *ServiceDetectionRules) ServiceDetectionRulesRuleOutput { return v.Rule }).(ServiceDetectionRulesRuleOutput)
}

// The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
func (o ServiceDetectionRulesOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceDetectionRules) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

type ServiceDetectionRulesArrayOutput struct{ *pulumi.OutputState }

func (ServiceDetectionRulesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceDetectionRules)(nil)).Elem()
}

func (o ServiceDetectionRulesArrayOutput) ToServiceDetectionRulesArrayOutput() ServiceDetectionRulesArrayOutput {
	return o
}

func (o ServiceDetectionRulesArrayOutput) ToServiceDetectionRulesArrayOutputWithContext(ctx context.Context) ServiceDetectionRulesArrayOutput {
	return o
}

func (o ServiceDetectionRulesArrayOutput) Index(i pulumi.IntInput) ServiceDetectionRulesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceDetectionRules {
		return vs[0].([]*ServiceDetectionRules)[vs[1].(int)]
	}).(ServiceDetectionRulesOutput)
}

type ServiceDetectionRulesMapOutput struct{ *pulumi.OutputState }

func (ServiceDetectionRulesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceDetectionRules)(nil)).Elem()
}

func (o ServiceDetectionRulesMapOutput) ToServiceDetectionRulesMapOutput() ServiceDetectionRulesMapOutput {
	return o
}

func (o ServiceDetectionRulesMapOutput) ToServiceDetectionRulesMapOutputWithContext(ctx context.Context) ServiceDetectionRulesMapOutput {
	return o
}

func (o ServiceDetectionRulesMapOutput) MapIndex(k pulumi.StringInput) ServiceDetectionRulesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceDetectionRules {
		return vs[0].(map[string]*ServiceDetectionRules)[vs[1].(string)]
	}).(ServiceDetectionRulesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDetectionRulesInput)(nil)).Elem(), &ServiceDetectionRules{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDetectionRulesArrayInput)(nil)).Elem(), ServiceDetectionRulesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDetectionRulesMapInput)(nil)).Elem(), ServiceDetectionRulesMap{})
	pulumi.RegisterOutputType(ServiceDetectionRulesOutput{})
	pulumi.RegisterOutputType(ServiceDetectionRulesArrayOutput{})
	pulumi.RegisterOutputType(ServiceDetectionRulesMapOutput{})
}
