// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type GrailMetricsAllowall struct {
	pulumi.CustomResourceState

	// When enabled every custom metric will be ingested to Grail. Warning: this setting can cause [unexpected billing!](https://docs.dynatrace.com/docs/dynatrace-api/environment-api/metric-v2/best-practices#avoid-high-cardinality-limits)
	AllowAll pulumi.BoolOutput `pulumi:"allowAll"`
}

// NewGrailMetricsAllowall registers a new resource with the given unique name, arguments, and options.
func NewGrailMetricsAllowall(ctx *pulumi.Context,
	name string, args *GrailMetricsAllowallArgs, opts ...pulumi.ResourceOption) (*GrailMetricsAllowall, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AllowAll == nil {
		return nil, errors.New("invalid value for required argument 'AllowAll'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GrailMetricsAllowall
	err := ctx.RegisterResource("dynatrace:index/grailMetricsAllowall:GrailMetricsAllowall", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGrailMetricsAllowall gets an existing GrailMetricsAllowall resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGrailMetricsAllowall(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GrailMetricsAllowallState, opts ...pulumi.ResourceOption) (*GrailMetricsAllowall, error) {
	var resource GrailMetricsAllowall
	err := ctx.ReadResource("dynatrace:index/grailMetricsAllowall:GrailMetricsAllowall", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GrailMetricsAllowall resources.
type grailMetricsAllowallState struct {
	// When enabled every custom metric will be ingested to Grail. Warning: this setting can cause [unexpected billing!](https://docs.dynatrace.com/docs/dynatrace-api/environment-api/metric-v2/best-practices#avoid-high-cardinality-limits)
	AllowAll *bool `pulumi:"allowAll"`
}

type GrailMetricsAllowallState struct {
	// When enabled every custom metric will be ingested to Grail. Warning: this setting can cause [unexpected billing!](https://docs.dynatrace.com/docs/dynatrace-api/environment-api/metric-v2/best-practices#avoid-high-cardinality-limits)
	AllowAll pulumi.BoolPtrInput
}

func (GrailMetricsAllowallState) ElementType() reflect.Type {
	return reflect.TypeOf((*grailMetricsAllowallState)(nil)).Elem()
}

type grailMetricsAllowallArgs struct {
	// When enabled every custom metric will be ingested to Grail. Warning: this setting can cause [unexpected billing!](https://docs.dynatrace.com/docs/dynatrace-api/environment-api/metric-v2/best-practices#avoid-high-cardinality-limits)
	AllowAll bool `pulumi:"allowAll"`
}

// The set of arguments for constructing a GrailMetricsAllowall resource.
type GrailMetricsAllowallArgs struct {
	// When enabled every custom metric will be ingested to Grail. Warning: this setting can cause [unexpected billing!](https://docs.dynatrace.com/docs/dynatrace-api/environment-api/metric-v2/best-practices#avoid-high-cardinality-limits)
	AllowAll pulumi.BoolInput
}

func (GrailMetricsAllowallArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*grailMetricsAllowallArgs)(nil)).Elem()
}

type GrailMetricsAllowallInput interface {
	pulumi.Input

	ToGrailMetricsAllowallOutput() GrailMetricsAllowallOutput
	ToGrailMetricsAllowallOutputWithContext(ctx context.Context) GrailMetricsAllowallOutput
}

func (*GrailMetricsAllowall) ElementType() reflect.Type {
	return reflect.TypeOf((**GrailMetricsAllowall)(nil)).Elem()
}

func (i *GrailMetricsAllowall) ToGrailMetricsAllowallOutput() GrailMetricsAllowallOutput {
	return i.ToGrailMetricsAllowallOutputWithContext(context.Background())
}

func (i *GrailMetricsAllowall) ToGrailMetricsAllowallOutputWithContext(ctx context.Context) GrailMetricsAllowallOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrailMetricsAllowallOutput)
}

// GrailMetricsAllowallArrayInput is an input type that accepts GrailMetricsAllowallArray and GrailMetricsAllowallArrayOutput values.
// You can construct a concrete instance of `GrailMetricsAllowallArrayInput` via:
//
//	GrailMetricsAllowallArray{ GrailMetricsAllowallArgs{...} }
type GrailMetricsAllowallArrayInput interface {
	pulumi.Input

	ToGrailMetricsAllowallArrayOutput() GrailMetricsAllowallArrayOutput
	ToGrailMetricsAllowallArrayOutputWithContext(context.Context) GrailMetricsAllowallArrayOutput
}

type GrailMetricsAllowallArray []GrailMetricsAllowallInput

func (GrailMetricsAllowallArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GrailMetricsAllowall)(nil)).Elem()
}

func (i GrailMetricsAllowallArray) ToGrailMetricsAllowallArrayOutput() GrailMetricsAllowallArrayOutput {
	return i.ToGrailMetricsAllowallArrayOutputWithContext(context.Background())
}

func (i GrailMetricsAllowallArray) ToGrailMetricsAllowallArrayOutputWithContext(ctx context.Context) GrailMetricsAllowallArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrailMetricsAllowallArrayOutput)
}

// GrailMetricsAllowallMapInput is an input type that accepts GrailMetricsAllowallMap and GrailMetricsAllowallMapOutput values.
// You can construct a concrete instance of `GrailMetricsAllowallMapInput` via:
//
//	GrailMetricsAllowallMap{ "key": GrailMetricsAllowallArgs{...} }
type GrailMetricsAllowallMapInput interface {
	pulumi.Input

	ToGrailMetricsAllowallMapOutput() GrailMetricsAllowallMapOutput
	ToGrailMetricsAllowallMapOutputWithContext(context.Context) GrailMetricsAllowallMapOutput
}

type GrailMetricsAllowallMap map[string]GrailMetricsAllowallInput

func (GrailMetricsAllowallMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GrailMetricsAllowall)(nil)).Elem()
}

func (i GrailMetricsAllowallMap) ToGrailMetricsAllowallMapOutput() GrailMetricsAllowallMapOutput {
	return i.ToGrailMetricsAllowallMapOutputWithContext(context.Background())
}

func (i GrailMetricsAllowallMap) ToGrailMetricsAllowallMapOutputWithContext(ctx context.Context) GrailMetricsAllowallMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrailMetricsAllowallMapOutput)
}

type GrailMetricsAllowallOutput struct{ *pulumi.OutputState }

func (GrailMetricsAllowallOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrailMetricsAllowall)(nil)).Elem()
}

func (o GrailMetricsAllowallOutput) ToGrailMetricsAllowallOutput() GrailMetricsAllowallOutput {
	return o
}

func (o GrailMetricsAllowallOutput) ToGrailMetricsAllowallOutputWithContext(ctx context.Context) GrailMetricsAllowallOutput {
	return o
}

// When enabled every custom metric will be ingested to Grail. Warning: this setting can cause [unexpected billing!](https://docs.dynatrace.com/docs/dynatrace-api/environment-api/metric-v2/best-practices#avoid-high-cardinality-limits)
func (o GrailMetricsAllowallOutput) AllowAll() pulumi.BoolOutput {
	return o.ApplyT(func(v *GrailMetricsAllowall) pulumi.BoolOutput { return v.AllowAll }).(pulumi.BoolOutput)
}

type GrailMetricsAllowallArrayOutput struct{ *pulumi.OutputState }

func (GrailMetricsAllowallArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GrailMetricsAllowall)(nil)).Elem()
}

func (o GrailMetricsAllowallArrayOutput) ToGrailMetricsAllowallArrayOutput() GrailMetricsAllowallArrayOutput {
	return o
}

func (o GrailMetricsAllowallArrayOutput) ToGrailMetricsAllowallArrayOutputWithContext(ctx context.Context) GrailMetricsAllowallArrayOutput {
	return o
}

func (o GrailMetricsAllowallArrayOutput) Index(i pulumi.IntInput) GrailMetricsAllowallOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GrailMetricsAllowall {
		return vs[0].([]*GrailMetricsAllowall)[vs[1].(int)]
	}).(GrailMetricsAllowallOutput)
}

type GrailMetricsAllowallMapOutput struct{ *pulumi.OutputState }

func (GrailMetricsAllowallMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GrailMetricsAllowall)(nil)).Elem()
}

func (o GrailMetricsAllowallMapOutput) ToGrailMetricsAllowallMapOutput() GrailMetricsAllowallMapOutput {
	return o
}

func (o GrailMetricsAllowallMapOutput) ToGrailMetricsAllowallMapOutputWithContext(ctx context.Context) GrailMetricsAllowallMapOutput {
	return o
}

func (o GrailMetricsAllowallMapOutput) MapIndex(k pulumi.StringInput) GrailMetricsAllowallOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GrailMetricsAllowall {
		return vs[0].(map[string]*GrailMetricsAllowall)[vs[1].(string)]
	}).(GrailMetricsAllowallOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GrailMetricsAllowallInput)(nil)).Elem(), &GrailMetricsAllowall{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrailMetricsAllowallArrayInput)(nil)).Elem(), GrailMetricsAllowallArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrailMetricsAllowallMapInput)(nil)).Elem(), GrailMetricsAllowallMap{})
	pulumi.RegisterOutputType(GrailMetricsAllowallOutput{})
	pulumi.RegisterOutputType(GrailMetricsAllowallArrayOutput{})
	pulumi.RegisterOutputType(GrailMetricsAllowallMapOutput{})
}
