// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type DatabaseAnomalies struct {
	pulumi.CustomResourceState

	// Parameters of the failed database connections detection.  The alert is triggered when failed connections number exceeds **connectionFailsCount** during any **timePeriodMinutes** minutes period
	DbConnectFailures DatabaseAnomaliesDbConnectFailuresPtrOutput `pulumi:"dbConnectFailures"`
	// Configuration of failure rate increase detection
	FailureRate DatabaseAnomaliesFailureRatePtrOutput `pulumi:"failureRate"`
	// Configuration for anomalies regarding load drops and spikes
	Load DatabaseAnomaliesLoadPtrOutput `pulumi:"load"`
	// Configuration of response time degradation detection
	ResponseTime DatabaseAnomaliesResponseTimePtrOutput `pulumi:"responseTime"`
}

// NewDatabaseAnomalies registers a new resource with the given unique name, arguments, and options.
func NewDatabaseAnomalies(ctx *pulumi.Context,
	name string, args *DatabaseAnomaliesArgs, opts ...pulumi.ResourceOption) (*DatabaseAnomalies, error) {
	if args == nil {
		args = &DatabaseAnomaliesArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatabaseAnomalies
	err := ctx.RegisterResource("dynatrace:index/databaseAnomalies:DatabaseAnomalies", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseAnomalies gets an existing DatabaseAnomalies resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseAnomalies(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseAnomaliesState, opts ...pulumi.ResourceOption) (*DatabaseAnomalies, error) {
	var resource DatabaseAnomalies
	err := ctx.ReadResource("dynatrace:index/databaseAnomalies:DatabaseAnomalies", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseAnomalies resources.
type databaseAnomaliesState struct {
	// Parameters of the failed database connections detection.  The alert is triggered when failed connections number exceeds **connectionFailsCount** during any **timePeriodMinutes** minutes period
	DbConnectFailures *DatabaseAnomaliesDbConnectFailures `pulumi:"dbConnectFailures"`
	// Configuration of failure rate increase detection
	FailureRate *DatabaseAnomaliesFailureRate `pulumi:"failureRate"`
	// Configuration for anomalies regarding load drops and spikes
	Load *DatabaseAnomaliesLoad `pulumi:"load"`
	// Configuration of response time degradation detection
	ResponseTime *DatabaseAnomaliesResponseTime `pulumi:"responseTime"`
}

type DatabaseAnomaliesState struct {
	// Parameters of the failed database connections detection.  The alert is triggered when failed connections number exceeds **connectionFailsCount** during any **timePeriodMinutes** minutes period
	DbConnectFailures DatabaseAnomaliesDbConnectFailuresPtrInput
	// Configuration of failure rate increase detection
	FailureRate DatabaseAnomaliesFailureRatePtrInput
	// Configuration for anomalies regarding load drops and spikes
	Load DatabaseAnomaliesLoadPtrInput
	// Configuration of response time degradation detection
	ResponseTime DatabaseAnomaliesResponseTimePtrInput
}

func (DatabaseAnomaliesState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseAnomaliesState)(nil)).Elem()
}

type databaseAnomaliesArgs struct {
	// Parameters of the failed database connections detection.  The alert is triggered when failed connections number exceeds **connectionFailsCount** during any **timePeriodMinutes** minutes period
	DbConnectFailures *DatabaseAnomaliesDbConnectFailures `pulumi:"dbConnectFailures"`
	// Configuration of failure rate increase detection
	FailureRate *DatabaseAnomaliesFailureRate `pulumi:"failureRate"`
	// Configuration for anomalies regarding load drops and spikes
	Load *DatabaseAnomaliesLoad `pulumi:"load"`
	// Configuration of response time degradation detection
	ResponseTime *DatabaseAnomaliesResponseTime `pulumi:"responseTime"`
}

// The set of arguments for constructing a DatabaseAnomalies resource.
type DatabaseAnomaliesArgs struct {
	// Parameters of the failed database connections detection.  The alert is triggered when failed connections number exceeds **connectionFailsCount** during any **timePeriodMinutes** minutes period
	DbConnectFailures DatabaseAnomaliesDbConnectFailuresPtrInput
	// Configuration of failure rate increase detection
	FailureRate DatabaseAnomaliesFailureRatePtrInput
	// Configuration for anomalies regarding load drops and spikes
	Load DatabaseAnomaliesLoadPtrInput
	// Configuration of response time degradation detection
	ResponseTime DatabaseAnomaliesResponseTimePtrInput
}

func (DatabaseAnomaliesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseAnomaliesArgs)(nil)).Elem()
}

type DatabaseAnomaliesInput interface {
	pulumi.Input

	ToDatabaseAnomaliesOutput() DatabaseAnomaliesOutput
	ToDatabaseAnomaliesOutputWithContext(ctx context.Context) DatabaseAnomaliesOutput
}

func (*DatabaseAnomalies) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseAnomalies)(nil)).Elem()
}

func (i *DatabaseAnomalies) ToDatabaseAnomaliesOutput() DatabaseAnomaliesOutput {
	return i.ToDatabaseAnomaliesOutputWithContext(context.Background())
}

func (i *DatabaseAnomalies) ToDatabaseAnomaliesOutputWithContext(ctx context.Context) DatabaseAnomaliesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseAnomaliesOutput)
}

// DatabaseAnomaliesArrayInput is an input type that accepts DatabaseAnomaliesArray and DatabaseAnomaliesArrayOutput values.
// You can construct a concrete instance of `DatabaseAnomaliesArrayInput` via:
//
//	DatabaseAnomaliesArray{ DatabaseAnomaliesArgs{...} }
type DatabaseAnomaliesArrayInput interface {
	pulumi.Input

	ToDatabaseAnomaliesArrayOutput() DatabaseAnomaliesArrayOutput
	ToDatabaseAnomaliesArrayOutputWithContext(context.Context) DatabaseAnomaliesArrayOutput
}

type DatabaseAnomaliesArray []DatabaseAnomaliesInput

func (DatabaseAnomaliesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseAnomalies)(nil)).Elem()
}

func (i DatabaseAnomaliesArray) ToDatabaseAnomaliesArrayOutput() DatabaseAnomaliesArrayOutput {
	return i.ToDatabaseAnomaliesArrayOutputWithContext(context.Background())
}

func (i DatabaseAnomaliesArray) ToDatabaseAnomaliesArrayOutputWithContext(ctx context.Context) DatabaseAnomaliesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseAnomaliesArrayOutput)
}

// DatabaseAnomaliesMapInput is an input type that accepts DatabaseAnomaliesMap and DatabaseAnomaliesMapOutput values.
// You can construct a concrete instance of `DatabaseAnomaliesMapInput` via:
//
//	DatabaseAnomaliesMap{ "key": DatabaseAnomaliesArgs{...} }
type DatabaseAnomaliesMapInput interface {
	pulumi.Input

	ToDatabaseAnomaliesMapOutput() DatabaseAnomaliesMapOutput
	ToDatabaseAnomaliesMapOutputWithContext(context.Context) DatabaseAnomaliesMapOutput
}

type DatabaseAnomaliesMap map[string]DatabaseAnomaliesInput

func (DatabaseAnomaliesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseAnomalies)(nil)).Elem()
}

func (i DatabaseAnomaliesMap) ToDatabaseAnomaliesMapOutput() DatabaseAnomaliesMapOutput {
	return i.ToDatabaseAnomaliesMapOutputWithContext(context.Background())
}

func (i DatabaseAnomaliesMap) ToDatabaseAnomaliesMapOutputWithContext(ctx context.Context) DatabaseAnomaliesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseAnomaliesMapOutput)
}

type DatabaseAnomaliesOutput struct{ *pulumi.OutputState }

func (DatabaseAnomaliesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseAnomalies)(nil)).Elem()
}

func (o DatabaseAnomaliesOutput) ToDatabaseAnomaliesOutput() DatabaseAnomaliesOutput {
	return o
}

func (o DatabaseAnomaliesOutput) ToDatabaseAnomaliesOutputWithContext(ctx context.Context) DatabaseAnomaliesOutput {
	return o
}

// Parameters of the failed database connections detection.  The alert is triggered when failed connections number exceeds **connectionFailsCount** during any **timePeriodMinutes** minutes period
func (o DatabaseAnomaliesOutput) DbConnectFailures() DatabaseAnomaliesDbConnectFailuresPtrOutput {
	return o.ApplyT(func(v *DatabaseAnomalies) DatabaseAnomaliesDbConnectFailuresPtrOutput { return v.DbConnectFailures }).(DatabaseAnomaliesDbConnectFailuresPtrOutput)
}

// Configuration of failure rate increase detection
func (o DatabaseAnomaliesOutput) FailureRate() DatabaseAnomaliesFailureRatePtrOutput {
	return o.ApplyT(func(v *DatabaseAnomalies) DatabaseAnomaliesFailureRatePtrOutput { return v.FailureRate }).(DatabaseAnomaliesFailureRatePtrOutput)
}

// Configuration for anomalies regarding load drops and spikes
func (o DatabaseAnomaliesOutput) Load() DatabaseAnomaliesLoadPtrOutput {
	return o.ApplyT(func(v *DatabaseAnomalies) DatabaseAnomaliesLoadPtrOutput { return v.Load }).(DatabaseAnomaliesLoadPtrOutput)
}

// Configuration of response time degradation detection
func (o DatabaseAnomaliesOutput) ResponseTime() DatabaseAnomaliesResponseTimePtrOutput {
	return o.ApplyT(func(v *DatabaseAnomalies) DatabaseAnomaliesResponseTimePtrOutput { return v.ResponseTime }).(DatabaseAnomaliesResponseTimePtrOutput)
}

type DatabaseAnomaliesArrayOutput struct{ *pulumi.OutputState }

func (DatabaseAnomaliesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseAnomalies)(nil)).Elem()
}

func (o DatabaseAnomaliesArrayOutput) ToDatabaseAnomaliesArrayOutput() DatabaseAnomaliesArrayOutput {
	return o
}

func (o DatabaseAnomaliesArrayOutput) ToDatabaseAnomaliesArrayOutputWithContext(ctx context.Context) DatabaseAnomaliesArrayOutput {
	return o
}

func (o DatabaseAnomaliesArrayOutput) Index(i pulumi.IntInput) DatabaseAnomaliesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatabaseAnomalies {
		return vs[0].([]*DatabaseAnomalies)[vs[1].(int)]
	}).(DatabaseAnomaliesOutput)
}

type DatabaseAnomaliesMapOutput struct{ *pulumi.OutputState }

func (DatabaseAnomaliesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseAnomalies)(nil)).Elem()
}

func (o DatabaseAnomaliesMapOutput) ToDatabaseAnomaliesMapOutput() DatabaseAnomaliesMapOutput {
	return o
}

func (o DatabaseAnomaliesMapOutput) ToDatabaseAnomaliesMapOutputWithContext(ctx context.Context) DatabaseAnomaliesMapOutput {
	return o
}

func (o DatabaseAnomaliesMapOutput) MapIndex(k pulumi.StringInput) DatabaseAnomaliesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatabaseAnomalies {
		return vs[0].(map[string]*DatabaseAnomalies)[vs[1].(string)]
	}).(DatabaseAnomaliesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseAnomaliesInput)(nil)).Elem(), &DatabaseAnomalies{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseAnomaliesArrayInput)(nil)).Elem(), DatabaseAnomaliesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseAnomaliesMapInput)(nil)).Elem(), DatabaseAnomaliesMap{})
	pulumi.RegisterOutputType(DatabaseAnomaliesOutput{})
	pulumi.RegisterOutputType(DatabaseAnomaliesArrayOutput{})
	pulumi.RegisterOutputType(DatabaseAnomaliesMapOutput{})
}
