// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type TransactionStartFilters struct {
	pulumi.CustomResourceState

	// You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
	CicsTerminalTransactionIds pulumi.StringArrayOutput `pulumi:"cicsTerminalTransactionIds"`
	// You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
	CicsTransactionIds pulumi.StringArrayOutput `pulumi:"cicsTransactionIds"`
	// You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
	ImsTerminalTransactionIds pulumi.StringArrayOutput `pulumi:"imsTerminalTransactionIds"`
	// You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
	ImsTransactionIds pulumi.StringArrayOutput `pulumi:"imsTransactionIds"`
}

// NewTransactionStartFilters registers a new resource with the given unique name, arguments, and options.
func NewTransactionStartFilters(ctx *pulumi.Context,
	name string, args *TransactionStartFiltersArgs, opts ...pulumi.ResourceOption) (*TransactionStartFilters, error) {
	if args == nil {
		args = &TransactionStartFiltersArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TransactionStartFilters
	err := ctx.RegisterResource("dynatrace:index/transactionStartFilters:TransactionStartFilters", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTransactionStartFilters gets an existing TransactionStartFilters resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTransactionStartFilters(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TransactionStartFiltersState, opts ...pulumi.ResourceOption) (*TransactionStartFilters, error) {
	var resource TransactionStartFilters
	err := ctx.ReadResource("dynatrace:index/transactionStartFilters:TransactionStartFilters", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TransactionStartFilters resources.
type transactionStartFiltersState struct {
	// You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
	CicsTerminalTransactionIds []string `pulumi:"cicsTerminalTransactionIds"`
	// You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
	CicsTransactionIds []string `pulumi:"cicsTransactionIds"`
	// You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
	ImsTerminalTransactionIds []string `pulumi:"imsTerminalTransactionIds"`
	// You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
	ImsTransactionIds []string `pulumi:"imsTransactionIds"`
}

type TransactionStartFiltersState struct {
	// You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
	CicsTerminalTransactionIds pulumi.StringArrayInput
	// You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
	CicsTransactionIds pulumi.StringArrayInput
	// You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
	ImsTerminalTransactionIds pulumi.StringArrayInput
	// You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
	ImsTransactionIds pulumi.StringArrayInput
}

func (TransactionStartFiltersState) ElementType() reflect.Type {
	return reflect.TypeOf((*transactionStartFiltersState)(nil)).Elem()
}

type transactionStartFiltersArgs struct {
	// You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
	CicsTerminalTransactionIds []string `pulumi:"cicsTerminalTransactionIds"`
	// You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
	CicsTransactionIds []string `pulumi:"cicsTransactionIds"`
	// You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
	ImsTerminalTransactionIds []string `pulumi:"imsTerminalTransactionIds"`
	// You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
	ImsTransactionIds []string `pulumi:"imsTransactionIds"`
}

// The set of arguments for constructing a TransactionStartFilters resource.
type TransactionStartFiltersArgs struct {
	// You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
	CicsTerminalTransactionIds pulumi.StringArrayInput
	// You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
	CicsTransactionIds pulumi.StringArrayInput
	// You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
	ImsTerminalTransactionIds pulumi.StringArrayInput
	// You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
	ImsTransactionIds pulumi.StringArrayInput
}

func (TransactionStartFiltersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*transactionStartFiltersArgs)(nil)).Elem()
}

type TransactionStartFiltersInput interface {
	pulumi.Input

	ToTransactionStartFiltersOutput() TransactionStartFiltersOutput
	ToTransactionStartFiltersOutputWithContext(ctx context.Context) TransactionStartFiltersOutput
}

func (*TransactionStartFilters) ElementType() reflect.Type {
	return reflect.TypeOf((**TransactionStartFilters)(nil)).Elem()
}

func (i *TransactionStartFilters) ToTransactionStartFiltersOutput() TransactionStartFiltersOutput {
	return i.ToTransactionStartFiltersOutputWithContext(context.Background())
}

func (i *TransactionStartFilters) ToTransactionStartFiltersOutputWithContext(ctx context.Context) TransactionStartFiltersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransactionStartFiltersOutput)
}

// TransactionStartFiltersArrayInput is an input type that accepts TransactionStartFiltersArray and TransactionStartFiltersArrayOutput values.
// You can construct a concrete instance of `TransactionStartFiltersArrayInput` via:
//
//	TransactionStartFiltersArray{ TransactionStartFiltersArgs{...} }
type TransactionStartFiltersArrayInput interface {
	pulumi.Input

	ToTransactionStartFiltersArrayOutput() TransactionStartFiltersArrayOutput
	ToTransactionStartFiltersArrayOutputWithContext(context.Context) TransactionStartFiltersArrayOutput
}

type TransactionStartFiltersArray []TransactionStartFiltersInput

func (TransactionStartFiltersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TransactionStartFilters)(nil)).Elem()
}

func (i TransactionStartFiltersArray) ToTransactionStartFiltersArrayOutput() TransactionStartFiltersArrayOutput {
	return i.ToTransactionStartFiltersArrayOutputWithContext(context.Background())
}

func (i TransactionStartFiltersArray) ToTransactionStartFiltersArrayOutputWithContext(ctx context.Context) TransactionStartFiltersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransactionStartFiltersArrayOutput)
}

// TransactionStartFiltersMapInput is an input type that accepts TransactionStartFiltersMap and TransactionStartFiltersMapOutput values.
// You can construct a concrete instance of `TransactionStartFiltersMapInput` via:
//
//	TransactionStartFiltersMap{ "key": TransactionStartFiltersArgs{...} }
type TransactionStartFiltersMapInput interface {
	pulumi.Input

	ToTransactionStartFiltersMapOutput() TransactionStartFiltersMapOutput
	ToTransactionStartFiltersMapOutputWithContext(context.Context) TransactionStartFiltersMapOutput
}

type TransactionStartFiltersMap map[string]TransactionStartFiltersInput

func (TransactionStartFiltersMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TransactionStartFilters)(nil)).Elem()
}

func (i TransactionStartFiltersMap) ToTransactionStartFiltersMapOutput() TransactionStartFiltersMapOutput {
	return i.ToTransactionStartFiltersMapOutputWithContext(context.Background())
}

func (i TransactionStartFiltersMap) ToTransactionStartFiltersMapOutputWithContext(ctx context.Context) TransactionStartFiltersMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransactionStartFiltersMapOutput)
}

type TransactionStartFiltersOutput struct{ *pulumi.OutputState }

func (TransactionStartFiltersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransactionStartFilters)(nil)).Elem()
}

func (o TransactionStartFiltersOutput) ToTransactionStartFiltersOutput() TransactionStartFiltersOutput {
	return o
}

func (o TransactionStartFiltersOutput) ToTransactionStartFiltersOutputWithContext(ctx context.Context) TransactionStartFiltersOutput {
	return o
}

// You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
func (o TransactionStartFiltersOutput) CicsTerminalTransactionIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TransactionStartFilters) pulumi.StringArrayOutput { return v.CicsTerminalTransactionIds }).(pulumi.StringArrayOutput)
}

// You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
func (o TransactionStartFiltersOutput) CicsTransactionIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TransactionStartFilters) pulumi.StringArrayOutput { return v.CicsTransactionIds }).(pulumi.StringArrayOutput)
}

// You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
func (o TransactionStartFiltersOutput) ImsTerminalTransactionIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TransactionStartFilters) pulumi.StringArrayOutput { return v.ImsTerminalTransactionIds }).(pulumi.StringArrayOutput)
}

// You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
func (o TransactionStartFiltersOutput) ImsTransactionIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TransactionStartFilters) pulumi.StringArrayOutput { return v.ImsTransactionIds }).(pulumi.StringArrayOutput)
}

type TransactionStartFiltersArrayOutput struct{ *pulumi.OutputState }

func (TransactionStartFiltersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TransactionStartFilters)(nil)).Elem()
}

func (o TransactionStartFiltersArrayOutput) ToTransactionStartFiltersArrayOutput() TransactionStartFiltersArrayOutput {
	return o
}

func (o TransactionStartFiltersArrayOutput) ToTransactionStartFiltersArrayOutputWithContext(ctx context.Context) TransactionStartFiltersArrayOutput {
	return o
}

func (o TransactionStartFiltersArrayOutput) Index(i pulumi.IntInput) TransactionStartFiltersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TransactionStartFilters {
		return vs[0].([]*TransactionStartFilters)[vs[1].(int)]
	}).(TransactionStartFiltersOutput)
}

type TransactionStartFiltersMapOutput struct{ *pulumi.OutputState }

func (TransactionStartFiltersMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TransactionStartFilters)(nil)).Elem()
}

func (o TransactionStartFiltersMapOutput) ToTransactionStartFiltersMapOutput() TransactionStartFiltersMapOutput {
	return o
}

func (o TransactionStartFiltersMapOutput) ToTransactionStartFiltersMapOutputWithContext(ctx context.Context) TransactionStartFiltersMapOutput {
	return o
}

func (o TransactionStartFiltersMapOutput) MapIndex(k pulumi.StringInput) TransactionStartFiltersOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TransactionStartFilters {
		return vs[0].(map[string]*TransactionStartFilters)[vs[1].(string)]
	}).(TransactionStartFiltersOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TransactionStartFiltersInput)(nil)).Elem(), &TransactionStartFilters{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransactionStartFiltersArrayInput)(nil)).Elem(), TransactionStartFiltersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransactionStartFiltersMapInput)(nil)).Elem(), TransactionStartFiltersMap{})
	pulumi.RegisterOutputType(TransactionStartFiltersOutput{})
	pulumi.RegisterOutputType(TransactionStartFiltersArrayOutput{})
	pulumi.RegisterOutputType(TransactionStartFiltersMapOutput{})
}
