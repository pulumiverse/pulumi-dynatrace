// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type AixExtension struct {
	pulumi.CustomResourceState

	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId pulumi.StringOutput `pulumi:"hostId"`
	// Use global settings
	UseGlobalSettings pulumi.BoolOutput `pulumi:"useGlobalSettings"`
}

// NewAixExtension registers a new resource with the given unique name, arguments, and options.
func NewAixExtension(ctx *pulumi.Context,
	name string, args *AixExtensionArgs, opts ...pulumi.ResourceOption) (*AixExtension, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HostId == nil {
		return nil, errors.New("invalid value for required argument 'HostId'")
	}
	if args.UseGlobalSettings == nil {
		return nil, errors.New("invalid value for required argument 'UseGlobalSettings'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AixExtension
	err := ctx.RegisterResource("dynatrace:index/aixExtension:AixExtension", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAixExtension gets an existing AixExtension resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAixExtension(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AixExtensionState, opts ...pulumi.ResourceOption) (*AixExtension, error) {
	var resource AixExtension
	err := ctx.ReadResource("dynatrace:index/aixExtension:AixExtension", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AixExtension resources.
type aixExtensionState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId *string `pulumi:"hostId"`
	// Use global settings
	UseGlobalSettings *bool `pulumi:"useGlobalSettings"`
}

type AixExtensionState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId pulumi.StringPtrInput
	// Use global settings
	UseGlobalSettings pulumi.BoolPtrInput
}

func (AixExtensionState) ElementType() reflect.Type {
	return reflect.TypeOf((*aixExtensionState)(nil)).Elem()
}

type aixExtensionArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId string `pulumi:"hostId"`
	// Use global settings
	UseGlobalSettings bool `pulumi:"useGlobalSettings"`
}

// The set of arguments for constructing a AixExtension resource.
type AixExtensionArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId pulumi.StringInput
	// Use global settings
	UseGlobalSettings pulumi.BoolInput
}

func (AixExtensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aixExtensionArgs)(nil)).Elem()
}

type AixExtensionInput interface {
	pulumi.Input

	ToAixExtensionOutput() AixExtensionOutput
	ToAixExtensionOutputWithContext(ctx context.Context) AixExtensionOutput
}

func (*AixExtension) ElementType() reflect.Type {
	return reflect.TypeOf((**AixExtension)(nil)).Elem()
}

func (i *AixExtension) ToAixExtensionOutput() AixExtensionOutput {
	return i.ToAixExtensionOutputWithContext(context.Background())
}

func (i *AixExtension) ToAixExtensionOutputWithContext(ctx context.Context) AixExtensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AixExtensionOutput)
}

// AixExtensionArrayInput is an input type that accepts AixExtensionArray and AixExtensionArrayOutput values.
// You can construct a concrete instance of `AixExtensionArrayInput` via:
//
//	AixExtensionArray{ AixExtensionArgs{...} }
type AixExtensionArrayInput interface {
	pulumi.Input

	ToAixExtensionArrayOutput() AixExtensionArrayOutput
	ToAixExtensionArrayOutputWithContext(context.Context) AixExtensionArrayOutput
}

type AixExtensionArray []AixExtensionInput

func (AixExtensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AixExtension)(nil)).Elem()
}

func (i AixExtensionArray) ToAixExtensionArrayOutput() AixExtensionArrayOutput {
	return i.ToAixExtensionArrayOutputWithContext(context.Background())
}

func (i AixExtensionArray) ToAixExtensionArrayOutputWithContext(ctx context.Context) AixExtensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AixExtensionArrayOutput)
}

// AixExtensionMapInput is an input type that accepts AixExtensionMap and AixExtensionMapOutput values.
// You can construct a concrete instance of `AixExtensionMapInput` via:
//
//	AixExtensionMap{ "key": AixExtensionArgs{...} }
type AixExtensionMapInput interface {
	pulumi.Input

	ToAixExtensionMapOutput() AixExtensionMapOutput
	ToAixExtensionMapOutputWithContext(context.Context) AixExtensionMapOutput
}

type AixExtensionMap map[string]AixExtensionInput

func (AixExtensionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AixExtension)(nil)).Elem()
}

func (i AixExtensionMap) ToAixExtensionMapOutput() AixExtensionMapOutput {
	return i.ToAixExtensionMapOutputWithContext(context.Background())
}

func (i AixExtensionMap) ToAixExtensionMapOutputWithContext(ctx context.Context) AixExtensionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AixExtensionMapOutput)
}

type AixExtensionOutput struct{ *pulumi.OutputState }

func (AixExtensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AixExtension)(nil)).Elem()
}

func (o AixExtensionOutput) ToAixExtensionOutput() AixExtensionOutput {
	return o
}

func (o AixExtensionOutput) ToAixExtensionOutputWithContext(ctx context.Context) AixExtensionOutput {
	return o
}

// This setting is enabled (`true`) or disabled (`false`)
func (o AixExtensionOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AixExtension) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
func (o AixExtensionOutput) HostId() pulumi.StringOutput {
	return o.ApplyT(func(v *AixExtension) pulumi.StringOutput { return v.HostId }).(pulumi.StringOutput)
}

// Use global settings
func (o AixExtensionOutput) UseGlobalSettings() pulumi.BoolOutput {
	return o.ApplyT(func(v *AixExtension) pulumi.BoolOutput { return v.UseGlobalSettings }).(pulumi.BoolOutput)
}

type AixExtensionArrayOutput struct{ *pulumi.OutputState }

func (AixExtensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AixExtension)(nil)).Elem()
}

func (o AixExtensionArrayOutput) ToAixExtensionArrayOutput() AixExtensionArrayOutput {
	return o
}

func (o AixExtensionArrayOutput) ToAixExtensionArrayOutputWithContext(ctx context.Context) AixExtensionArrayOutput {
	return o
}

func (o AixExtensionArrayOutput) Index(i pulumi.IntInput) AixExtensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AixExtension {
		return vs[0].([]*AixExtension)[vs[1].(int)]
	}).(AixExtensionOutput)
}

type AixExtensionMapOutput struct{ *pulumi.OutputState }

func (AixExtensionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AixExtension)(nil)).Elem()
}

func (o AixExtensionMapOutput) ToAixExtensionMapOutput() AixExtensionMapOutput {
	return o
}

func (o AixExtensionMapOutput) ToAixExtensionMapOutputWithContext(ctx context.Context) AixExtensionMapOutput {
	return o
}

func (o AixExtensionMapOutput) MapIndex(k pulumi.StringInput) AixExtensionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AixExtension {
		return vs[0].(map[string]*AixExtension)[vs[1].(string)]
	}).(AixExtensionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AixExtensionInput)(nil)).Elem(), &AixExtension{})
	pulumi.RegisterInputType(reflect.TypeOf((*AixExtensionArrayInput)(nil)).Elem(), AixExtensionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AixExtensionMapInput)(nil)).Elem(), AixExtensionMap{})
	pulumi.RegisterOutputType(AixExtensionOutput{})
	pulumi.RegisterOutputType(AixExtensionArrayOutput{})
	pulumi.RegisterOutputType(AixExtensionMapOutput{})
}
