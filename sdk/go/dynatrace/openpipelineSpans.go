// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OpenpipelineSpans struct {
	pulumi.CustomResourceState

	// List of all ingest sources of the configuration
	Endpoints OpenpipelineSpansEndpointsPtrOutput `pulumi:"endpoints"`
	// List of all pipelines of the configuration
	Pipelines OpenpipelineSpansPipelinesPtrOutput `pulumi:"pipelines"`
	// Dynamic routing definition
	Routing OpenpipelineSpansRoutingPtrOutput `pulumi:"routing"`
}

// NewOpenpipelineSpans registers a new resource with the given unique name, arguments, and options.
func NewOpenpipelineSpans(ctx *pulumi.Context,
	name string, args *OpenpipelineSpansArgs, opts ...pulumi.ResourceOption) (*OpenpipelineSpans, error) {
	if args == nil {
		args = &OpenpipelineSpansArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenpipelineSpans
	err := ctx.RegisterResource("dynatrace:index/openpipelineSpans:OpenpipelineSpans", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenpipelineSpans gets an existing OpenpipelineSpans resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenpipelineSpans(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenpipelineSpansState, opts ...pulumi.ResourceOption) (*OpenpipelineSpans, error) {
	var resource OpenpipelineSpans
	err := ctx.ReadResource("dynatrace:index/openpipelineSpans:OpenpipelineSpans", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenpipelineSpans resources.
type openpipelineSpansState struct {
	// List of all ingest sources of the configuration
	Endpoints *OpenpipelineSpansEndpoints `pulumi:"endpoints"`
	// List of all pipelines of the configuration
	Pipelines *OpenpipelineSpansPipelines `pulumi:"pipelines"`
	// Dynamic routing definition
	Routing *OpenpipelineSpansRouting `pulumi:"routing"`
}

type OpenpipelineSpansState struct {
	// List of all ingest sources of the configuration
	Endpoints OpenpipelineSpansEndpointsPtrInput
	// List of all pipelines of the configuration
	Pipelines OpenpipelineSpansPipelinesPtrInput
	// Dynamic routing definition
	Routing OpenpipelineSpansRoutingPtrInput
}

func (OpenpipelineSpansState) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineSpansState)(nil)).Elem()
}

type openpipelineSpansArgs struct {
	// List of all ingest sources of the configuration
	Endpoints *OpenpipelineSpansEndpoints `pulumi:"endpoints"`
	// List of all pipelines of the configuration
	Pipelines *OpenpipelineSpansPipelines `pulumi:"pipelines"`
	// Dynamic routing definition
	Routing *OpenpipelineSpansRouting `pulumi:"routing"`
}

// The set of arguments for constructing a OpenpipelineSpans resource.
type OpenpipelineSpansArgs struct {
	// List of all ingest sources of the configuration
	Endpoints OpenpipelineSpansEndpointsPtrInput
	// List of all pipelines of the configuration
	Pipelines OpenpipelineSpansPipelinesPtrInput
	// Dynamic routing definition
	Routing OpenpipelineSpansRoutingPtrInput
}

func (OpenpipelineSpansArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineSpansArgs)(nil)).Elem()
}

type OpenpipelineSpansInput interface {
	pulumi.Input

	ToOpenpipelineSpansOutput() OpenpipelineSpansOutput
	ToOpenpipelineSpansOutputWithContext(ctx context.Context) OpenpipelineSpansOutput
}

func (*OpenpipelineSpans) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineSpans)(nil)).Elem()
}

func (i *OpenpipelineSpans) ToOpenpipelineSpansOutput() OpenpipelineSpansOutput {
	return i.ToOpenpipelineSpansOutputWithContext(context.Background())
}

func (i *OpenpipelineSpans) ToOpenpipelineSpansOutputWithContext(ctx context.Context) OpenpipelineSpansOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineSpansOutput)
}

// OpenpipelineSpansArrayInput is an input type that accepts OpenpipelineSpansArray and OpenpipelineSpansArrayOutput values.
// You can construct a concrete instance of `OpenpipelineSpansArrayInput` via:
//
//	OpenpipelineSpansArray{ OpenpipelineSpansArgs{...} }
type OpenpipelineSpansArrayInput interface {
	pulumi.Input

	ToOpenpipelineSpansArrayOutput() OpenpipelineSpansArrayOutput
	ToOpenpipelineSpansArrayOutputWithContext(context.Context) OpenpipelineSpansArrayOutput
}

type OpenpipelineSpansArray []OpenpipelineSpansInput

func (OpenpipelineSpansArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineSpans)(nil)).Elem()
}

func (i OpenpipelineSpansArray) ToOpenpipelineSpansArrayOutput() OpenpipelineSpansArrayOutput {
	return i.ToOpenpipelineSpansArrayOutputWithContext(context.Background())
}

func (i OpenpipelineSpansArray) ToOpenpipelineSpansArrayOutputWithContext(ctx context.Context) OpenpipelineSpansArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineSpansArrayOutput)
}

// OpenpipelineSpansMapInput is an input type that accepts OpenpipelineSpansMap and OpenpipelineSpansMapOutput values.
// You can construct a concrete instance of `OpenpipelineSpansMapInput` via:
//
//	OpenpipelineSpansMap{ "key": OpenpipelineSpansArgs{...} }
type OpenpipelineSpansMapInput interface {
	pulumi.Input

	ToOpenpipelineSpansMapOutput() OpenpipelineSpansMapOutput
	ToOpenpipelineSpansMapOutputWithContext(context.Context) OpenpipelineSpansMapOutput
}

type OpenpipelineSpansMap map[string]OpenpipelineSpansInput

func (OpenpipelineSpansMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineSpans)(nil)).Elem()
}

func (i OpenpipelineSpansMap) ToOpenpipelineSpansMapOutput() OpenpipelineSpansMapOutput {
	return i.ToOpenpipelineSpansMapOutputWithContext(context.Background())
}

func (i OpenpipelineSpansMap) ToOpenpipelineSpansMapOutputWithContext(ctx context.Context) OpenpipelineSpansMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineSpansMapOutput)
}

type OpenpipelineSpansOutput struct{ *pulumi.OutputState }

func (OpenpipelineSpansOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineSpans)(nil)).Elem()
}

func (o OpenpipelineSpansOutput) ToOpenpipelineSpansOutput() OpenpipelineSpansOutput {
	return o
}

func (o OpenpipelineSpansOutput) ToOpenpipelineSpansOutputWithContext(ctx context.Context) OpenpipelineSpansOutput {
	return o
}

// List of all ingest sources of the configuration
func (o OpenpipelineSpansOutput) Endpoints() OpenpipelineSpansEndpointsPtrOutput {
	return o.ApplyT(func(v *OpenpipelineSpans) OpenpipelineSpansEndpointsPtrOutput { return v.Endpoints }).(OpenpipelineSpansEndpointsPtrOutput)
}

// List of all pipelines of the configuration
func (o OpenpipelineSpansOutput) Pipelines() OpenpipelineSpansPipelinesPtrOutput {
	return o.ApplyT(func(v *OpenpipelineSpans) OpenpipelineSpansPipelinesPtrOutput { return v.Pipelines }).(OpenpipelineSpansPipelinesPtrOutput)
}

// Dynamic routing definition
func (o OpenpipelineSpansOutput) Routing() OpenpipelineSpansRoutingPtrOutput {
	return o.ApplyT(func(v *OpenpipelineSpans) OpenpipelineSpansRoutingPtrOutput { return v.Routing }).(OpenpipelineSpansRoutingPtrOutput)
}

type OpenpipelineSpansArrayOutput struct{ *pulumi.OutputState }

func (OpenpipelineSpansArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineSpans)(nil)).Elem()
}

func (o OpenpipelineSpansArrayOutput) ToOpenpipelineSpansArrayOutput() OpenpipelineSpansArrayOutput {
	return o
}

func (o OpenpipelineSpansArrayOutput) ToOpenpipelineSpansArrayOutputWithContext(ctx context.Context) OpenpipelineSpansArrayOutput {
	return o
}

func (o OpenpipelineSpansArrayOutput) Index(i pulumi.IntInput) OpenpipelineSpansOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenpipelineSpans {
		return vs[0].([]*OpenpipelineSpans)[vs[1].(int)]
	}).(OpenpipelineSpansOutput)
}

type OpenpipelineSpansMapOutput struct{ *pulumi.OutputState }

func (OpenpipelineSpansMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineSpans)(nil)).Elem()
}

func (o OpenpipelineSpansMapOutput) ToOpenpipelineSpansMapOutput() OpenpipelineSpansMapOutput {
	return o
}

func (o OpenpipelineSpansMapOutput) ToOpenpipelineSpansMapOutputWithContext(ctx context.Context) OpenpipelineSpansMapOutput {
	return o
}

func (o OpenpipelineSpansMapOutput) MapIndex(k pulumi.StringInput) OpenpipelineSpansOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenpipelineSpans {
		return vs[0].(map[string]*OpenpipelineSpans)[vs[1].(string)]
	}).(OpenpipelineSpansOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineSpansInput)(nil)).Elem(), &OpenpipelineSpans{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineSpansArrayInput)(nil)).Elem(), OpenpipelineSpansArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineSpansMapInput)(nil)).Elem(), OpenpipelineSpansMap{})
	pulumi.RegisterOutputType(OpenpipelineSpansOutput{})
	pulumi.RegisterOutputType(OpenpipelineSpansArrayOutput{})
	pulumi.RegisterOutputType(OpenpipelineSpansMapOutput{})
}
