// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OpsGenieNotification struct {
	pulumi.CustomResourceState

	// The configuration is enabled (`true`) or disabled (`false`)
	Active pulumi.BoolOutput `pulumi:"active"`
	// The API key to access OpsGenie
	ApiKey pulumi.StringPtrOutput `pulumi:"apiKey"`
	// The region domain of the OpsGenie
	Domain pulumi.StringOutput `pulumi:"domain"`
	// The ID of these settings when referred to from resources requiring the REST API V1 keys
	LegacyId pulumi.StringOutput `pulumi:"legacyId"`
	// The content of the message.  You can use the following placeholders:  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem
	Message pulumi.StringOutput `pulumi:"message"`
	// The name of the notification configuration
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the associated alerting profile
	Profile pulumi.StringOutput `pulumi:"profile"`
}

// NewOpsGenieNotification registers a new resource with the given unique name, arguments, and options.
func NewOpsGenieNotification(ctx *pulumi.Context,
	name string, args *OpsGenieNotificationArgs, opts ...pulumi.ResourceOption) (*OpsGenieNotification, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Active == nil {
		return nil, errors.New("invalid value for required argument 'Active'")
	}
	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.Message == nil {
		return nil, errors.New("invalid value for required argument 'Message'")
	}
	if args.Profile == nil {
		return nil, errors.New("invalid value for required argument 'Profile'")
	}
	if args.ApiKey != nil {
		args.ApiKey = pulumi.ToSecret(args.ApiKey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"apiKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpsGenieNotification
	err := ctx.RegisterResource("dynatrace:index/opsGenieNotification:OpsGenieNotification", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpsGenieNotification gets an existing OpsGenieNotification resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpsGenieNotification(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpsGenieNotificationState, opts ...pulumi.ResourceOption) (*OpsGenieNotification, error) {
	var resource OpsGenieNotification
	err := ctx.ReadResource("dynatrace:index/opsGenieNotification:OpsGenieNotification", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpsGenieNotification resources.
type opsGenieNotificationState struct {
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `pulumi:"active"`
	// The API key to access OpsGenie
	ApiKey *string `pulumi:"apiKey"`
	// The region domain of the OpsGenie
	Domain *string `pulumi:"domain"`
	// The ID of these settings when referred to from resources requiring the REST API V1 keys
	LegacyId *string `pulumi:"legacyId"`
	// The content of the message.  You can use the following placeholders:  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem
	Message *string `pulumi:"message"`
	// The name of the notification configuration
	Name *string `pulumi:"name"`
	// The ID of the associated alerting profile
	Profile *string `pulumi:"profile"`
}

type OpsGenieNotificationState struct {
	// The configuration is enabled (`true`) or disabled (`false`)
	Active pulumi.BoolPtrInput
	// The API key to access OpsGenie
	ApiKey pulumi.StringPtrInput
	// The region domain of the OpsGenie
	Domain pulumi.StringPtrInput
	// The ID of these settings when referred to from resources requiring the REST API V1 keys
	LegacyId pulumi.StringPtrInput
	// The content of the message.  You can use the following placeholders:  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem
	Message pulumi.StringPtrInput
	// The name of the notification configuration
	Name pulumi.StringPtrInput
	// The ID of the associated alerting profile
	Profile pulumi.StringPtrInput
}

func (OpsGenieNotificationState) ElementType() reflect.Type {
	return reflect.TypeOf((*opsGenieNotificationState)(nil)).Elem()
}

type opsGenieNotificationArgs struct {
	// The configuration is enabled (`true`) or disabled (`false`)
	Active bool `pulumi:"active"`
	// The API key to access OpsGenie
	ApiKey *string `pulumi:"apiKey"`
	// The region domain of the OpsGenie
	Domain string `pulumi:"domain"`
	// The ID of these settings when referred to from resources requiring the REST API V1 keys
	LegacyId *string `pulumi:"legacyId"`
	// The content of the message.  You can use the following placeholders:  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem
	Message string `pulumi:"message"`
	// The name of the notification configuration
	Name *string `pulumi:"name"`
	// The ID of the associated alerting profile
	Profile string `pulumi:"profile"`
}

// The set of arguments for constructing a OpsGenieNotification resource.
type OpsGenieNotificationArgs struct {
	// The configuration is enabled (`true`) or disabled (`false`)
	Active pulumi.BoolInput
	// The API key to access OpsGenie
	ApiKey pulumi.StringPtrInput
	// The region domain of the OpsGenie
	Domain pulumi.StringInput
	// The ID of these settings when referred to from resources requiring the REST API V1 keys
	LegacyId pulumi.StringPtrInput
	// The content of the message.  You can use the following placeholders:  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem
	Message pulumi.StringInput
	// The name of the notification configuration
	Name pulumi.StringPtrInput
	// The ID of the associated alerting profile
	Profile pulumi.StringInput
}

func (OpsGenieNotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*opsGenieNotificationArgs)(nil)).Elem()
}

type OpsGenieNotificationInput interface {
	pulumi.Input

	ToOpsGenieNotificationOutput() OpsGenieNotificationOutput
	ToOpsGenieNotificationOutputWithContext(ctx context.Context) OpsGenieNotificationOutput
}

func (*OpsGenieNotification) ElementType() reflect.Type {
	return reflect.TypeOf((**OpsGenieNotification)(nil)).Elem()
}

func (i *OpsGenieNotification) ToOpsGenieNotificationOutput() OpsGenieNotificationOutput {
	return i.ToOpsGenieNotificationOutputWithContext(context.Background())
}

func (i *OpsGenieNotification) ToOpsGenieNotificationOutputWithContext(ctx context.Context) OpsGenieNotificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpsGenieNotificationOutput)
}

// OpsGenieNotificationArrayInput is an input type that accepts OpsGenieNotificationArray and OpsGenieNotificationArrayOutput values.
// You can construct a concrete instance of `OpsGenieNotificationArrayInput` via:
//
//	OpsGenieNotificationArray{ OpsGenieNotificationArgs{...} }
type OpsGenieNotificationArrayInput interface {
	pulumi.Input

	ToOpsGenieNotificationArrayOutput() OpsGenieNotificationArrayOutput
	ToOpsGenieNotificationArrayOutputWithContext(context.Context) OpsGenieNotificationArrayOutput
}

type OpsGenieNotificationArray []OpsGenieNotificationInput

func (OpsGenieNotificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpsGenieNotification)(nil)).Elem()
}

func (i OpsGenieNotificationArray) ToOpsGenieNotificationArrayOutput() OpsGenieNotificationArrayOutput {
	return i.ToOpsGenieNotificationArrayOutputWithContext(context.Background())
}

func (i OpsGenieNotificationArray) ToOpsGenieNotificationArrayOutputWithContext(ctx context.Context) OpsGenieNotificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpsGenieNotificationArrayOutput)
}

// OpsGenieNotificationMapInput is an input type that accepts OpsGenieNotificationMap and OpsGenieNotificationMapOutput values.
// You can construct a concrete instance of `OpsGenieNotificationMapInput` via:
//
//	OpsGenieNotificationMap{ "key": OpsGenieNotificationArgs{...} }
type OpsGenieNotificationMapInput interface {
	pulumi.Input

	ToOpsGenieNotificationMapOutput() OpsGenieNotificationMapOutput
	ToOpsGenieNotificationMapOutputWithContext(context.Context) OpsGenieNotificationMapOutput
}

type OpsGenieNotificationMap map[string]OpsGenieNotificationInput

func (OpsGenieNotificationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpsGenieNotification)(nil)).Elem()
}

func (i OpsGenieNotificationMap) ToOpsGenieNotificationMapOutput() OpsGenieNotificationMapOutput {
	return i.ToOpsGenieNotificationMapOutputWithContext(context.Background())
}

func (i OpsGenieNotificationMap) ToOpsGenieNotificationMapOutputWithContext(ctx context.Context) OpsGenieNotificationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpsGenieNotificationMapOutput)
}

type OpsGenieNotificationOutput struct{ *pulumi.OutputState }

func (OpsGenieNotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpsGenieNotification)(nil)).Elem()
}

func (o OpsGenieNotificationOutput) ToOpsGenieNotificationOutput() OpsGenieNotificationOutput {
	return o
}

func (o OpsGenieNotificationOutput) ToOpsGenieNotificationOutputWithContext(ctx context.Context) OpsGenieNotificationOutput {
	return o
}

// The configuration is enabled (`true`) or disabled (`false`)
func (o OpsGenieNotificationOutput) Active() pulumi.BoolOutput {
	return o.ApplyT(func(v *OpsGenieNotification) pulumi.BoolOutput { return v.Active }).(pulumi.BoolOutput)
}

// The API key to access OpsGenie
func (o OpsGenieNotificationOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpsGenieNotification) pulumi.StringPtrOutput { return v.ApiKey }).(pulumi.StringPtrOutput)
}

// The region domain of the OpsGenie
func (o OpsGenieNotificationOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *OpsGenieNotification) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// The ID of these settings when referred to from resources requiring the REST API V1 keys
func (o OpsGenieNotificationOutput) LegacyId() pulumi.StringOutput {
	return o.ApplyT(func(v *OpsGenieNotification) pulumi.StringOutput { return v.LegacyId }).(pulumi.StringOutput)
}

// The content of the message.  You can use the following placeholders:  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem
func (o OpsGenieNotificationOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v *OpsGenieNotification) pulumi.StringOutput { return v.Message }).(pulumi.StringOutput)
}

// The name of the notification configuration
func (o OpsGenieNotificationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OpsGenieNotification) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the associated alerting profile
func (o OpsGenieNotificationOutput) Profile() pulumi.StringOutput {
	return o.ApplyT(func(v *OpsGenieNotification) pulumi.StringOutput { return v.Profile }).(pulumi.StringOutput)
}

type OpsGenieNotificationArrayOutput struct{ *pulumi.OutputState }

func (OpsGenieNotificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpsGenieNotification)(nil)).Elem()
}

func (o OpsGenieNotificationArrayOutput) ToOpsGenieNotificationArrayOutput() OpsGenieNotificationArrayOutput {
	return o
}

func (o OpsGenieNotificationArrayOutput) ToOpsGenieNotificationArrayOutputWithContext(ctx context.Context) OpsGenieNotificationArrayOutput {
	return o
}

func (o OpsGenieNotificationArrayOutput) Index(i pulumi.IntInput) OpsGenieNotificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpsGenieNotification {
		return vs[0].([]*OpsGenieNotification)[vs[1].(int)]
	}).(OpsGenieNotificationOutput)
}

type OpsGenieNotificationMapOutput struct{ *pulumi.OutputState }

func (OpsGenieNotificationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpsGenieNotification)(nil)).Elem()
}

func (o OpsGenieNotificationMapOutput) ToOpsGenieNotificationMapOutput() OpsGenieNotificationMapOutput {
	return o
}

func (o OpsGenieNotificationMapOutput) ToOpsGenieNotificationMapOutputWithContext(ctx context.Context) OpsGenieNotificationMapOutput {
	return o
}

func (o OpsGenieNotificationMapOutput) MapIndex(k pulumi.StringInput) OpsGenieNotificationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpsGenieNotification {
		return vs[0].(map[string]*OpsGenieNotification)[vs[1].(string)]
	}).(OpsGenieNotificationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpsGenieNotificationInput)(nil)).Elem(), &OpsGenieNotification{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpsGenieNotificationArrayInput)(nil)).Elem(), OpsGenieNotificationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpsGenieNotificationMapInput)(nil)).Elem(), OpsGenieNotificationMap{})
	pulumi.RegisterOutputType(OpsGenieNotificationOutput{})
	pulumi.RegisterOutputType(OpsGenieNotificationArrayOutput{})
	pulumi.RegisterOutputType(OpsGenieNotificationMapOutput{})
}
