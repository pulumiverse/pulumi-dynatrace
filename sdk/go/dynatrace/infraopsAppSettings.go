// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type InfraopsAppSettings struct {
	pulumi.CustomResourceState

	// The threshold at which a network device interface is deemed to be saturated.
	InterfaceSaturationThreshold pulumi.Float64PtrOutput `pulumi:"interfaceSaturationThreshold"`
	// Limit the number of results returned from Grail for Data center, Host, and Network device entities.
	InvexDqlQueryLimit pulumi.IntPtrOutput `pulumi:"invexDqlQueryLimit"`
	// Limit for server-side sorting in Data center, Host, and Network device inventories. Sorting is disabled when the row count exceeds the configured threshold.
	InvexDqlSortLimit pulumi.IntPtrOutput `pulumi:"invexDqlSortLimit"`
	// When set to true, the app will display monitoring candidates in the Hosts table
	ShowMonitoringCandidates pulumi.BoolOutput `pulumi:"showMonitoringCandidates"`
	// When set to true, the app will display app only hosts in the Hosts table
	ShowStandaloneHosts pulumi.BoolOutput `pulumi:"showStandaloneHosts"`
}

// NewInfraopsAppSettings registers a new resource with the given unique name, arguments, and options.
func NewInfraopsAppSettings(ctx *pulumi.Context,
	name string, args *InfraopsAppSettingsArgs, opts ...pulumi.ResourceOption) (*InfraopsAppSettings, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ShowMonitoringCandidates == nil {
		return nil, errors.New("invalid value for required argument 'ShowMonitoringCandidates'")
	}
	if args.ShowStandaloneHosts == nil {
		return nil, errors.New("invalid value for required argument 'ShowStandaloneHosts'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InfraopsAppSettings
	err := ctx.RegisterResource("dynatrace:index/infraopsAppSettings:InfraopsAppSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInfraopsAppSettings gets an existing InfraopsAppSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInfraopsAppSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InfraopsAppSettingsState, opts ...pulumi.ResourceOption) (*InfraopsAppSettings, error) {
	var resource InfraopsAppSettings
	err := ctx.ReadResource("dynatrace:index/infraopsAppSettings:InfraopsAppSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InfraopsAppSettings resources.
type infraopsAppSettingsState struct {
	// The threshold at which a network device interface is deemed to be saturated.
	InterfaceSaturationThreshold *float64 `pulumi:"interfaceSaturationThreshold"`
	// Limit the number of results returned from Grail for Data center, Host, and Network device entities.
	InvexDqlQueryLimit *int `pulumi:"invexDqlQueryLimit"`
	// Limit for server-side sorting in Data center, Host, and Network device inventories. Sorting is disabled when the row count exceeds the configured threshold.
	InvexDqlSortLimit *int `pulumi:"invexDqlSortLimit"`
	// When set to true, the app will display monitoring candidates in the Hosts table
	ShowMonitoringCandidates *bool `pulumi:"showMonitoringCandidates"`
	// When set to true, the app will display app only hosts in the Hosts table
	ShowStandaloneHosts *bool `pulumi:"showStandaloneHosts"`
}

type InfraopsAppSettingsState struct {
	// The threshold at which a network device interface is deemed to be saturated.
	InterfaceSaturationThreshold pulumi.Float64PtrInput
	// Limit the number of results returned from Grail for Data center, Host, and Network device entities.
	InvexDqlQueryLimit pulumi.IntPtrInput
	// Limit for server-side sorting in Data center, Host, and Network device inventories. Sorting is disabled when the row count exceeds the configured threshold.
	InvexDqlSortLimit pulumi.IntPtrInput
	// When set to true, the app will display monitoring candidates in the Hosts table
	ShowMonitoringCandidates pulumi.BoolPtrInput
	// When set to true, the app will display app only hosts in the Hosts table
	ShowStandaloneHosts pulumi.BoolPtrInput
}

func (InfraopsAppSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*infraopsAppSettingsState)(nil)).Elem()
}

type infraopsAppSettingsArgs struct {
	// The threshold at which a network device interface is deemed to be saturated.
	InterfaceSaturationThreshold *float64 `pulumi:"interfaceSaturationThreshold"`
	// Limit the number of results returned from Grail for Data center, Host, and Network device entities.
	InvexDqlQueryLimit *int `pulumi:"invexDqlQueryLimit"`
	// Limit for server-side sorting in Data center, Host, and Network device inventories. Sorting is disabled when the row count exceeds the configured threshold.
	InvexDqlSortLimit *int `pulumi:"invexDqlSortLimit"`
	// When set to true, the app will display monitoring candidates in the Hosts table
	ShowMonitoringCandidates bool `pulumi:"showMonitoringCandidates"`
	// When set to true, the app will display app only hosts in the Hosts table
	ShowStandaloneHosts bool `pulumi:"showStandaloneHosts"`
}

// The set of arguments for constructing a InfraopsAppSettings resource.
type InfraopsAppSettingsArgs struct {
	// The threshold at which a network device interface is deemed to be saturated.
	InterfaceSaturationThreshold pulumi.Float64PtrInput
	// Limit the number of results returned from Grail for Data center, Host, and Network device entities.
	InvexDqlQueryLimit pulumi.IntPtrInput
	// Limit for server-side sorting in Data center, Host, and Network device inventories. Sorting is disabled when the row count exceeds the configured threshold.
	InvexDqlSortLimit pulumi.IntPtrInput
	// When set to true, the app will display monitoring candidates in the Hosts table
	ShowMonitoringCandidates pulumi.BoolInput
	// When set to true, the app will display app only hosts in the Hosts table
	ShowStandaloneHosts pulumi.BoolInput
}

func (InfraopsAppSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*infraopsAppSettingsArgs)(nil)).Elem()
}

type InfraopsAppSettingsInput interface {
	pulumi.Input

	ToInfraopsAppSettingsOutput() InfraopsAppSettingsOutput
	ToInfraopsAppSettingsOutputWithContext(ctx context.Context) InfraopsAppSettingsOutput
}

func (*InfraopsAppSettings) ElementType() reflect.Type {
	return reflect.TypeOf((**InfraopsAppSettings)(nil)).Elem()
}

func (i *InfraopsAppSettings) ToInfraopsAppSettingsOutput() InfraopsAppSettingsOutput {
	return i.ToInfraopsAppSettingsOutputWithContext(context.Background())
}

func (i *InfraopsAppSettings) ToInfraopsAppSettingsOutputWithContext(ctx context.Context) InfraopsAppSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfraopsAppSettingsOutput)
}

// InfraopsAppSettingsArrayInput is an input type that accepts InfraopsAppSettingsArray and InfraopsAppSettingsArrayOutput values.
// You can construct a concrete instance of `InfraopsAppSettingsArrayInput` via:
//
//	InfraopsAppSettingsArray{ InfraopsAppSettingsArgs{...} }
type InfraopsAppSettingsArrayInput interface {
	pulumi.Input

	ToInfraopsAppSettingsArrayOutput() InfraopsAppSettingsArrayOutput
	ToInfraopsAppSettingsArrayOutputWithContext(context.Context) InfraopsAppSettingsArrayOutput
}

type InfraopsAppSettingsArray []InfraopsAppSettingsInput

func (InfraopsAppSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InfraopsAppSettings)(nil)).Elem()
}

func (i InfraopsAppSettingsArray) ToInfraopsAppSettingsArrayOutput() InfraopsAppSettingsArrayOutput {
	return i.ToInfraopsAppSettingsArrayOutputWithContext(context.Background())
}

func (i InfraopsAppSettingsArray) ToInfraopsAppSettingsArrayOutputWithContext(ctx context.Context) InfraopsAppSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfraopsAppSettingsArrayOutput)
}

// InfraopsAppSettingsMapInput is an input type that accepts InfraopsAppSettingsMap and InfraopsAppSettingsMapOutput values.
// You can construct a concrete instance of `InfraopsAppSettingsMapInput` via:
//
//	InfraopsAppSettingsMap{ "key": InfraopsAppSettingsArgs{...} }
type InfraopsAppSettingsMapInput interface {
	pulumi.Input

	ToInfraopsAppSettingsMapOutput() InfraopsAppSettingsMapOutput
	ToInfraopsAppSettingsMapOutputWithContext(context.Context) InfraopsAppSettingsMapOutput
}

type InfraopsAppSettingsMap map[string]InfraopsAppSettingsInput

func (InfraopsAppSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InfraopsAppSettings)(nil)).Elem()
}

func (i InfraopsAppSettingsMap) ToInfraopsAppSettingsMapOutput() InfraopsAppSettingsMapOutput {
	return i.ToInfraopsAppSettingsMapOutputWithContext(context.Background())
}

func (i InfraopsAppSettingsMap) ToInfraopsAppSettingsMapOutputWithContext(ctx context.Context) InfraopsAppSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfraopsAppSettingsMapOutput)
}

type InfraopsAppSettingsOutput struct{ *pulumi.OutputState }

func (InfraopsAppSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InfraopsAppSettings)(nil)).Elem()
}

func (o InfraopsAppSettingsOutput) ToInfraopsAppSettingsOutput() InfraopsAppSettingsOutput {
	return o
}

func (o InfraopsAppSettingsOutput) ToInfraopsAppSettingsOutputWithContext(ctx context.Context) InfraopsAppSettingsOutput {
	return o
}

// The threshold at which a network device interface is deemed to be saturated.
func (o InfraopsAppSettingsOutput) InterfaceSaturationThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *InfraopsAppSettings) pulumi.Float64PtrOutput { return v.InterfaceSaturationThreshold }).(pulumi.Float64PtrOutput)
}

// Limit the number of results returned from Grail for Data center, Host, and Network device entities.
func (o InfraopsAppSettingsOutput) InvexDqlQueryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InfraopsAppSettings) pulumi.IntPtrOutput { return v.InvexDqlQueryLimit }).(pulumi.IntPtrOutput)
}

// Limit for server-side sorting in Data center, Host, and Network device inventories. Sorting is disabled when the row count exceeds the configured threshold.
func (o InfraopsAppSettingsOutput) InvexDqlSortLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InfraopsAppSettings) pulumi.IntPtrOutput { return v.InvexDqlSortLimit }).(pulumi.IntPtrOutput)
}

// When set to true, the app will display monitoring candidates in the Hosts table
func (o InfraopsAppSettingsOutput) ShowMonitoringCandidates() pulumi.BoolOutput {
	return o.ApplyT(func(v *InfraopsAppSettings) pulumi.BoolOutput { return v.ShowMonitoringCandidates }).(pulumi.BoolOutput)
}

// When set to true, the app will display app only hosts in the Hosts table
func (o InfraopsAppSettingsOutput) ShowStandaloneHosts() pulumi.BoolOutput {
	return o.ApplyT(func(v *InfraopsAppSettings) pulumi.BoolOutput { return v.ShowStandaloneHosts }).(pulumi.BoolOutput)
}

type InfraopsAppSettingsArrayOutput struct{ *pulumi.OutputState }

func (InfraopsAppSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InfraopsAppSettings)(nil)).Elem()
}

func (o InfraopsAppSettingsArrayOutput) ToInfraopsAppSettingsArrayOutput() InfraopsAppSettingsArrayOutput {
	return o
}

func (o InfraopsAppSettingsArrayOutput) ToInfraopsAppSettingsArrayOutputWithContext(ctx context.Context) InfraopsAppSettingsArrayOutput {
	return o
}

func (o InfraopsAppSettingsArrayOutput) Index(i pulumi.IntInput) InfraopsAppSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InfraopsAppSettings {
		return vs[0].([]*InfraopsAppSettings)[vs[1].(int)]
	}).(InfraopsAppSettingsOutput)
}

type InfraopsAppSettingsMapOutput struct{ *pulumi.OutputState }

func (InfraopsAppSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InfraopsAppSettings)(nil)).Elem()
}

func (o InfraopsAppSettingsMapOutput) ToInfraopsAppSettingsMapOutput() InfraopsAppSettingsMapOutput {
	return o
}

func (o InfraopsAppSettingsMapOutput) ToInfraopsAppSettingsMapOutputWithContext(ctx context.Context) InfraopsAppSettingsMapOutput {
	return o
}

func (o InfraopsAppSettingsMapOutput) MapIndex(k pulumi.StringInput) InfraopsAppSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InfraopsAppSettings {
		return vs[0].(map[string]*InfraopsAppSettings)[vs[1].(string)]
	}).(InfraopsAppSettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InfraopsAppSettingsInput)(nil)).Elem(), &InfraopsAppSettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfraopsAppSettingsArrayInput)(nil)).Elem(), InfraopsAppSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfraopsAppSettingsMapInput)(nil)).Elem(), InfraopsAppSettingsMap{})
	pulumi.RegisterOutputType(InfraopsAppSettingsOutput{})
	pulumi.RegisterOutputType(InfraopsAppSettingsArrayOutput{})
	pulumi.RegisterOutputType(InfraopsAppSettingsMapOutput{})
}
