// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OpenpipelineV2MetricsRouting struct {
	pulumi.CustomResourceState

	// Routing for pipelines
	RoutingEntries OpenpipelineV2MetricsRoutingRoutingEntriesPtrOutput `pulumi:"routingEntries"`
}

// NewOpenpipelineV2MetricsRouting registers a new resource with the given unique name, arguments, and options.
func NewOpenpipelineV2MetricsRouting(ctx *pulumi.Context,
	name string, args *OpenpipelineV2MetricsRoutingArgs, opts ...pulumi.ResourceOption) (*OpenpipelineV2MetricsRouting, error) {
	if args == nil {
		args = &OpenpipelineV2MetricsRoutingArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenpipelineV2MetricsRouting
	err := ctx.RegisterResource("dynatrace:index/openpipelineV2MetricsRouting:OpenpipelineV2MetricsRouting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenpipelineV2MetricsRouting gets an existing OpenpipelineV2MetricsRouting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenpipelineV2MetricsRouting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenpipelineV2MetricsRoutingState, opts ...pulumi.ResourceOption) (*OpenpipelineV2MetricsRouting, error) {
	var resource OpenpipelineV2MetricsRouting
	err := ctx.ReadResource("dynatrace:index/openpipelineV2MetricsRouting:OpenpipelineV2MetricsRouting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenpipelineV2MetricsRouting resources.
type openpipelineV2MetricsRoutingState struct {
	// Routing for pipelines
	RoutingEntries *OpenpipelineV2MetricsRoutingRoutingEntries `pulumi:"routingEntries"`
}

type OpenpipelineV2MetricsRoutingState struct {
	// Routing for pipelines
	RoutingEntries OpenpipelineV2MetricsRoutingRoutingEntriesPtrInput
}

func (OpenpipelineV2MetricsRoutingState) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2MetricsRoutingState)(nil)).Elem()
}

type openpipelineV2MetricsRoutingArgs struct {
	// Routing for pipelines
	RoutingEntries *OpenpipelineV2MetricsRoutingRoutingEntries `pulumi:"routingEntries"`
}

// The set of arguments for constructing a OpenpipelineV2MetricsRouting resource.
type OpenpipelineV2MetricsRoutingArgs struct {
	// Routing for pipelines
	RoutingEntries OpenpipelineV2MetricsRoutingRoutingEntriesPtrInput
}

func (OpenpipelineV2MetricsRoutingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2MetricsRoutingArgs)(nil)).Elem()
}

type OpenpipelineV2MetricsRoutingInput interface {
	pulumi.Input

	ToOpenpipelineV2MetricsRoutingOutput() OpenpipelineV2MetricsRoutingOutput
	ToOpenpipelineV2MetricsRoutingOutputWithContext(ctx context.Context) OpenpipelineV2MetricsRoutingOutput
}

func (*OpenpipelineV2MetricsRouting) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2MetricsRouting)(nil)).Elem()
}

func (i *OpenpipelineV2MetricsRouting) ToOpenpipelineV2MetricsRoutingOutput() OpenpipelineV2MetricsRoutingOutput {
	return i.ToOpenpipelineV2MetricsRoutingOutputWithContext(context.Background())
}

func (i *OpenpipelineV2MetricsRouting) ToOpenpipelineV2MetricsRoutingOutputWithContext(ctx context.Context) OpenpipelineV2MetricsRoutingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2MetricsRoutingOutput)
}

// OpenpipelineV2MetricsRoutingArrayInput is an input type that accepts OpenpipelineV2MetricsRoutingArray and OpenpipelineV2MetricsRoutingArrayOutput values.
// You can construct a concrete instance of `OpenpipelineV2MetricsRoutingArrayInput` via:
//
//	OpenpipelineV2MetricsRoutingArray{ OpenpipelineV2MetricsRoutingArgs{...} }
type OpenpipelineV2MetricsRoutingArrayInput interface {
	pulumi.Input

	ToOpenpipelineV2MetricsRoutingArrayOutput() OpenpipelineV2MetricsRoutingArrayOutput
	ToOpenpipelineV2MetricsRoutingArrayOutputWithContext(context.Context) OpenpipelineV2MetricsRoutingArrayOutput
}

type OpenpipelineV2MetricsRoutingArray []OpenpipelineV2MetricsRoutingInput

func (OpenpipelineV2MetricsRoutingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2MetricsRouting)(nil)).Elem()
}

func (i OpenpipelineV2MetricsRoutingArray) ToOpenpipelineV2MetricsRoutingArrayOutput() OpenpipelineV2MetricsRoutingArrayOutput {
	return i.ToOpenpipelineV2MetricsRoutingArrayOutputWithContext(context.Background())
}

func (i OpenpipelineV2MetricsRoutingArray) ToOpenpipelineV2MetricsRoutingArrayOutputWithContext(ctx context.Context) OpenpipelineV2MetricsRoutingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2MetricsRoutingArrayOutput)
}

// OpenpipelineV2MetricsRoutingMapInput is an input type that accepts OpenpipelineV2MetricsRoutingMap and OpenpipelineV2MetricsRoutingMapOutput values.
// You can construct a concrete instance of `OpenpipelineV2MetricsRoutingMapInput` via:
//
//	OpenpipelineV2MetricsRoutingMap{ "key": OpenpipelineV2MetricsRoutingArgs{...} }
type OpenpipelineV2MetricsRoutingMapInput interface {
	pulumi.Input

	ToOpenpipelineV2MetricsRoutingMapOutput() OpenpipelineV2MetricsRoutingMapOutput
	ToOpenpipelineV2MetricsRoutingMapOutputWithContext(context.Context) OpenpipelineV2MetricsRoutingMapOutput
}

type OpenpipelineV2MetricsRoutingMap map[string]OpenpipelineV2MetricsRoutingInput

func (OpenpipelineV2MetricsRoutingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2MetricsRouting)(nil)).Elem()
}

func (i OpenpipelineV2MetricsRoutingMap) ToOpenpipelineV2MetricsRoutingMapOutput() OpenpipelineV2MetricsRoutingMapOutput {
	return i.ToOpenpipelineV2MetricsRoutingMapOutputWithContext(context.Background())
}

func (i OpenpipelineV2MetricsRoutingMap) ToOpenpipelineV2MetricsRoutingMapOutputWithContext(ctx context.Context) OpenpipelineV2MetricsRoutingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2MetricsRoutingMapOutput)
}

type OpenpipelineV2MetricsRoutingOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2MetricsRoutingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2MetricsRouting)(nil)).Elem()
}

func (o OpenpipelineV2MetricsRoutingOutput) ToOpenpipelineV2MetricsRoutingOutput() OpenpipelineV2MetricsRoutingOutput {
	return o
}

func (o OpenpipelineV2MetricsRoutingOutput) ToOpenpipelineV2MetricsRoutingOutputWithContext(ctx context.Context) OpenpipelineV2MetricsRoutingOutput {
	return o
}

// Routing for pipelines
func (o OpenpipelineV2MetricsRoutingOutput) RoutingEntries() OpenpipelineV2MetricsRoutingRoutingEntriesPtrOutput {
	return o.ApplyT(func(v *OpenpipelineV2MetricsRouting) OpenpipelineV2MetricsRoutingRoutingEntriesPtrOutput {
		return v.RoutingEntries
	}).(OpenpipelineV2MetricsRoutingRoutingEntriesPtrOutput)
}

type OpenpipelineV2MetricsRoutingArrayOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2MetricsRoutingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2MetricsRouting)(nil)).Elem()
}

func (o OpenpipelineV2MetricsRoutingArrayOutput) ToOpenpipelineV2MetricsRoutingArrayOutput() OpenpipelineV2MetricsRoutingArrayOutput {
	return o
}

func (o OpenpipelineV2MetricsRoutingArrayOutput) ToOpenpipelineV2MetricsRoutingArrayOutputWithContext(ctx context.Context) OpenpipelineV2MetricsRoutingArrayOutput {
	return o
}

func (o OpenpipelineV2MetricsRoutingArrayOutput) Index(i pulumi.IntInput) OpenpipelineV2MetricsRoutingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenpipelineV2MetricsRouting {
		return vs[0].([]*OpenpipelineV2MetricsRouting)[vs[1].(int)]
	}).(OpenpipelineV2MetricsRoutingOutput)
}

type OpenpipelineV2MetricsRoutingMapOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2MetricsRoutingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2MetricsRouting)(nil)).Elem()
}

func (o OpenpipelineV2MetricsRoutingMapOutput) ToOpenpipelineV2MetricsRoutingMapOutput() OpenpipelineV2MetricsRoutingMapOutput {
	return o
}

func (o OpenpipelineV2MetricsRoutingMapOutput) ToOpenpipelineV2MetricsRoutingMapOutputWithContext(ctx context.Context) OpenpipelineV2MetricsRoutingMapOutput {
	return o
}

func (o OpenpipelineV2MetricsRoutingMapOutput) MapIndex(k pulumi.StringInput) OpenpipelineV2MetricsRoutingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenpipelineV2MetricsRouting {
		return vs[0].(map[string]*OpenpipelineV2MetricsRouting)[vs[1].(string)]
	}).(OpenpipelineV2MetricsRoutingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2MetricsRoutingInput)(nil)).Elem(), &OpenpipelineV2MetricsRouting{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2MetricsRoutingArrayInput)(nil)).Elem(), OpenpipelineV2MetricsRoutingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2MetricsRoutingMapInput)(nil)).Elem(), OpenpipelineV2MetricsRoutingMap{})
	pulumi.RegisterOutputType(OpenpipelineV2MetricsRoutingOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2MetricsRoutingArrayOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2MetricsRoutingMapOutput{})
}
