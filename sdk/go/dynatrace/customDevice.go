// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

// > This resource requires the API token scopes **Read entities** (`entities.read`) and **Write entities** (`entities.write`)
//
// ## Dynatrace Documentation
//
// - Monitored entities API - https://www.dynatrace.com/support/help/dynatrace-api/environment-api/entity-v2
//
// ## Resource Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dynatrace.NewCustomDevice(ctx, "#name#", &dynatrace.CustomDeviceArgs{
//				CustomDeviceId: pulumi.String("customDeviceId"),
//				DisplayName:    pulumi.String("customDevicename"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type CustomDevice struct {
	pulumi.CustomResourceState

	// The URL of a configuration web page for the custom device, such as a login page for a firewall or router.
	ConfigUrl      pulumi.StringPtrOutput `pulumi:"configUrl"`
	CustomDeviceId pulumi.StringOutput    `pulumi:"customDeviceId"`
	// The name of the custom device, displayed in the UI.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The list of DNS names related to the custom device.
	DnsNames pulumi.StringArrayOutput `pulumi:"dnsNames"`
	// The Dynatrace EntityID of this resource. If you need to refer to this custom device within other resources you want to use this ID
	EntityId pulumi.StringOutput `pulumi:"entityId"`
	// The icon to be displayed for your custom component within Smartscape. Provide the full URL of the icon file.
	FaviconUrl pulumi.StringPtrOutput `pulumi:"faviconUrl"`
	// User defined group of entity. Changing the group requires a new custom device to be created.
	Group pulumi.StringOutput `pulumi:"group"`
	// The list of IP addresses that belong to the custom device.
	IpAddresses pulumi.StringArrayOutput `pulumi:"ipAddresses"`
	// The list of ports the custom devices listens to.
	ListenPorts pulumi.IntArrayOutput `pulumi:"listenPorts"`
	// The list of key-value pair properties that will be shown beneath the infographics of your custom device.
	//
	// Deprecated: Please use the attribute `props` instead
	Properties pulumi.StringMapOutput `pulumi:"properties"`
	// The list of key-value pair properties that will be shown beneath the infographics of your custom device.
	Props pulumi.StringPtrOutput `pulumi:"props"`
	// The technology type definition of the custom device.
	Type pulumi.StringOutput `pulumi:"type"`
	// If `true` the custom device will be handled as if it was created via UI. It will be refreshed automatically and won't age out. This attribute is taken into consideration when creating the custom device. Changing it afterwards won't have an effect.
	UiBased pulumi.BoolPtrOutput `pulumi:"uiBased"`
}

// NewCustomDevice registers a new resource with the given unique name, arguments, and options.
func NewCustomDevice(ctx *pulumi.Context,
	name string, args *CustomDeviceArgs, opts ...pulumi.ResourceOption) (*CustomDevice, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CustomDevice
	err := ctx.RegisterResource("dynatrace:index/customDevice:CustomDevice", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCustomDevice gets an existing CustomDevice resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCustomDevice(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CustomDeviceState, opts ...pulumi.ResourceOption) (*CustomDevice, error) {
	var resource CustomDevice
	err := ctx.ReadResource("dynatrace:index/customDevice:CustomDevice", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CustomDevice resources.
type customDeviceState struct {
	// The URL of a configuration web page for the custom device, such as a login page for a firewall or router.
	ConfigUrl      *string `pulumi:"configUrl"`
	CustomDeviceId *string `pulumi:"customDeviceId"`
	// The name of the custom device, displayed in the UI.
	DisplayName *string `pulumi:"displayName"`
	// The list of DNS names related to the custom device.
	DnsNames []string `pulumi:"dnsNames"`
	// The Dynatrace EntityID of this resource. If you need to refer to this custom device within other resources you want to use this ID
	EntityId *string `pulumi:"entityId"`
	// The icon to be displayed for your custom component within Smartscape. Provide the full URL of the icon file.
	FaviconUrl *string `pulumi:"faviconUrl"`
	// User defined group of entity. Changing the group requires a new custom device to be created.
	Group *string `pulumi:"group"`
	// The list of IP addresses that belong to the custom device.
	IpAddresses []string `pulumi:"ipAddresses"`
	// The list of ports the custom devices listens to.
	ListenPorts []int `pulumi:"listenPorts"`
	// The list of key-value pair properties that will be shown beneath the infographics of your custom device.
	//
	// Deprecated: Please use the attribute `props` instead
	Properties map[string]string `pulumi:"properties"`
	// The list of key-value pair properties that will be shown beneath the infographics of your custom device.
	Props *string `pulumi:"props"`
	// The technology type definition of the custom device.
	Type *string `pulumi:"type"`
	// If `true` the custom device will be handled as if it was created via UI. It will be refreshed automatically and won't age out. This attribute is taken into consideration when creating the custom device. Changing it afterwards won't have an effect.
	UiBased *bool `pulumi:"uiBased"`
}

type CustomDeviceState struct {
	// The URL of a configuration web page for the custom device, such as a login page for a firewall or router.
	ConfigUrl      pulumi.StringPtrInput
	CustomDeviceId pulumi.StringPtrInput
	// The name of the custom device, displayed in the UI.
	DisplayName pulumi.StringPtrInput
	// The list of DNS names related to the custom device.
	DnsNames pulumi.StringArrayInput
	// The Dynatrace EntityID of this resource. If you need to refer to this custom device within other resources you want to use this ID
	EntityId pulumi.StringPtrInput
	// The icon to be displayed for your custom component within Smartscape. Provide the full URL of the icon file.
	FaviconUrl pulumi.StringPtrInput
	// User defined group of entity. Changing the group requires a new custom device to be created.
	Group pulumi.StringPtrInput
	// The list of IP addresses that belong to the custom device.
	IpAddresses pulumi.StringArrayInput
	// The list of ports the custom devices listens to.
	ListenPorts pulumi.IntArrayInput
	// The list of key-value pair properties that will be shown beneath the infographics of your custom device.
	//
	// Deprecated: Please use the attribute `props` instead
	Properties pulumi.StringMapInput
	// The list of key-value pair properties that will be shown beneath the infographics of your custom device.
	Props pulumi.StringPtrInput
	// The technology type definition of the custom device.
	Type pulumi.StringPtrInput
	// If `true` the custom device will be handled as if it was created via UI. It will be refreshed automatically and won't age out. This attribute is taken into consideration when creating the custom device. Changing it afterwards won't have an effect.
	UiBased pulumi.BoolPtrInput
}

func (CustomDeviceState) ElementType() reflect.Type {
	return reflect.TypeOf((*customDeviceState)(nil)).Elem()
}

type customDeviceArgs struct {
	// The URL of a configuration web page for the custom device, such as a login page for a firewall or router.
	ConfigUrl      *string `pulumi:"configUrl"`
	CustomDeviceId *string `pulumi:"customDeviceId"`
	// The name of the custom device, displayed in the UI.
	DisplayName string `pulumi:"displayName"`
	// The list of DNS names related to the custom device.
	DnsNames []string `pulumi:"dnsNames"`
	// The icon to be displayed for your custom component within Smartscape. Provide the full URL of the icon file.
	FaviconUrl *string `pulumi:"faviconUrl"`
	// User defined group of entity. Changing the group requires a new custom device to be created.
	Group *string `pulumi:"group"`
	// The list of IP addresses that belong to the custom device.
	IpAddresses []string `pulumi:"ipAddresses"`
	// The list of ports the custom devices listens to.
	ListenPorts []int `pulumi:"listenPorts"`
	// The list of key-value pair properties that will be shown beneath the infographics of your custom device.
	//
	// Deprecated: Please use the attribute `props` instead
	Properties map[string]string `pulumi:"properties"`
	// The list of key-value pair properties that will be shown beneath the infographics of your custom device.
	Props *string `pulumi:"props"`
	// The technology type definition of the custom device.
	Type *string `pulumi:"type"`
	// If `true` the custom device will be handled as if it was created via UI. It will be refreshed automatically and won't age out. This attribute is taken into consideration when creating the custom device. Changing it afterwards won't have an effect.
	UiBased *bool `pulumi:"uiBased"`
}

// The set of arguments for constructing a CustomDevice resource.
type CustomDeviceArgs struct {
	// The URL of a configuration web page for the custom device, such as a login page for a firewall or router.
	ConfigUrl      pulumi.StringPtrInput
	CustomDeviceId pulumi.StringPtrInput
	// The name of the custom device, displayed in the UI.
	DisplayName pulumi.StringInput
	// The list of DNS names related to the custom device.
	DnsNames pulumi.StringArrayInput
	// The icon to be displayed for your custom component within Smartscape. Provide the full URL of the icon file.
	FaviconUrl pulumi.StringPtrInput
	// User defined group of entity. Changing the group requires a new custom device to be created.
	Group pulumi.StringPtrInput
	// The list of IP addresses that belong to the custom device.
	IpAddresses pulumi.StringArrayInput
	// The list of ports the custom devices listens to.
	ListenPorts pulumi.IntArrayInput
	// The list of key-value pair properties that will be shown beneath the infographics of your custom device.
	//
	// Deprecated: Please use the attribute `props` instead
	Properties pulumi.StringMapInput
	// The list of key-value pair properties that will be shown beneath the infographics of your custom device.
	Props pulumi.StringPtrInput
	// The technology type definition of the custom device.
	Type pulumi.StringPtrInput
	// If `true` the custom device will be handled as if it was created via UI. It will be refreshed automatically and won't age out. This attribute is taken into consideration when creating the custom device. Changing it afterwards won't have an effect.
	UiBased pulumi.BoolPtrInput
}

func (CustomDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*customDeviceArgs)(nil)).Elem()
}

type CustomDeviceInput interface {
	pulumi.Input

	ToCustomDeviceOutput() CustomDeviceOutput
	ToCustomDeviceOutputWithContext(ctx context.Context) CustomDeviceOutput
}

func (*CustomDevice) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomDevice)(nil)).Elem()
}

func (i *CustomDevice) ToCustomDeviceOutput() CustomDeviceOutput {
	return i.ToCustomDeviceOutputWithContext(context.Background())
}

func (i *CustomDevice) ToCustomDeviceOutputWithContext(ctx context.Context) CustomDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomDeviceOutput)
}

// CustomDeviceArrayInput is an input type that accepts CustomDeviceArray and CustomDeviceArrayOutput values.
// You can construct a concrete instance of `CustomDeviceArrayInput` via:
//
//	CustomDeviceArray{ CustomDeviceArgs{...} }
type CustomDeviceArrayInput interface {
	pulumi.Input

	ToCustomDeviceArrayOutput() CustomDeviceArrayOutput
	ToCustomDeviceArrayOutputWithContext(context.Context) CustomDeviceArrayOutput
}

type CustomDeviceArray []CustomDeviceInput

func (CustomDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomDevice)(nil)).Elem()
}

func (i CustomDeviceArray) ToCustomDeviceArrayOutput() CustomDeviceArrayOutput {
	return i.ToCustomDeviceArrayOutputWithContext(context.Background())
}

func (i CustomDeviceArray) ToCustomDeviceArrayOutputWithContext(ctx context.Context) CustomDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomDeviceArrayOutput)
}

// CustomDeviceMapInput is an input type that accepts CustomDeviceMap and CustomDeviceMapOutput values.
// You can construct a concrete instance of `CustomDeviceMapInput` via:
//
//	CustomDeviceMap{ "key": CustomDeviceArgs{...} }
type CustomDeviceMapInput interface {
	pulumi.Input

	ToCustomDeviceMapOutput() CustomDeviceMapOutput
	ToCustomDeviceMapOutputWithContext(context.Context) CustomDeviceMapOutput
}

type CustomDeviceMap map[string]CustomDeviceInput

func (CustomDeviceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomDevice)(nil)).Elem()
}

func (i CustomDeviceMap) ToCustomDeviceMapOutput() CustomDeviceMapOutput {
	return i.ToCustomDeviceMapOutputWithContext(context.Background())
}

func (i CustomDeviceMap) ToCustomDeviceMapOutputWithContext(ctx context.Context) CustomDeviceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomDeviceMapOutput)
}

type CustomDeviceOutput struct{ *pulumi.OutputState }

func (CustomDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomDevice)(nil)).Elem()
}

func (o CustomDeviceOutput) ToCustomDeviceOutput() CustomDeviceOutput {
	return o
}

func (o CustomDeviceOutput) ToCustomDeviceOutputWithContext(ctx context.Context) CustomDeviceOutput {
	return o
}

// The URL of a configuration web page for the custom device, such as a login page for a firewall or router.
func (o CustomDeviceOutput) ConfigUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomDevice) pulumi.StringPtrOutput { return v.ConfigUrl }).(pulumi.StringPtrOutput)
}

func (o CustomDeviceOutput) CustomDeviceId() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomDevice) pulumi.StringOutput { return v.CustomDeviceId }).(pulumi.StringOutput)
}

// The name of the custom device, displayed in the UI.
func (o CustomDeviceOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomDevice) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The list of DNS names related to the custom device.
func (o CustomDeviceOutput) DnsNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CustomDevice) pulumi.StringArrayOutput { return v.DnsNames }).(pulumi.StringArrayOutput)
}

// The Dynatrace EntityID of this resource. If you need to refer to this custom device within other resources you want to use this ID
func (o CustomDeviceOutput) EntityId() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomDevice) pulumi.StringOutput { return v.EntityId }).(pulumi.StringOutput)
}

// The icon to be displayed for your custom component within Smartscape. Provide the full URL of the icon file.
func (o CustomDeviceOutput) FaviconUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomDevice) pulumi.StringPtrOutput { return v.FaviconUrl }).(pulumi.StringPtrOutput)
}

// User defined group of entity. Changing the group requires a new custom device to be created.
func (o CustomDeviceOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomDevice) pulumi.StringOutput { return v.Group }).(pulumi.StringOutput)
}

// The list of IP addresses that belong to the custom device.
func (o CustomDeviceOutput) IpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CustomDevice) pulumi.StringArrayOutput { return v.IpAddresses }).(pulumi.StringArrayOutput)
}

// The list of ports the custom devices listens to.
func (o CustomDeviceOutput) ListenPorts() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *CustomDevice) pulumi.IntArrayOutput { return v.ListenPorts }).(pulumi.IntArrayOutput)
}

// The list of key-value pair properties that will be shown beneath the infographics of your custom device.
//
// Deprecated: Please use the attribute `props` instead
func (o CustomDeviceOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CustomDevice) pulumi.StringMapOutput { return v.Properties }).(pulumi.StringMapOutput)
}

// The list of key-value pair properties that will be shown beneath the infographics of your custom device.
func (o CustomDeviceOutput) Props() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomDevice) pulumi.StringPtrOutput { return v.Props }).(pulumi.StringPtrOutput)
}

// The technology type definition of the custom device.
func (o CustomDeviceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomDevice) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// If `true` the custom device will be handled as if it was created via UI. It will be refreshed automatically and won't age out. This attribute is taken into consideration when creating the custom device. Changing it afterwards won't have an effect.
func (o CustomDeviceOutput) UiBased() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CustomDevice) pulumi.BoolPtrOutput { return v.UiBased }).(pulumi.BoolPtrOutput)
}

type CustomDeviceArrayOutput struct{ *pulumi.OutputState }

func (CustomDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomDevice)(nil)).Elem()
}

func (o CustomDeviceArrayOutput) ToCustomDeviceArrayOutput() CustomDeviceArrayOutput {
	return o
}

func (o CustomDeviceArrayOutput) ToCustomDeviceArrayOutputWithContext(ctx context.Context) CustomDeviceArrayOutput {
	return o
}

func (o CustomDeviceArrayOutput) Index(i pulumi.IntInput) CustomDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CustomDevice {
		return vs[0].([]*CustomDevice)[vs[1].(int)]
	}).(CustomDeviceOutput)
}

type CustomDeviceMapOutput struct{ *pulumi.OutputState }

func (CustomDeviceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomDevice)(nil)).Elem()
}

func (o CustomDeviceMapOutput) ToCustomDeviceMapOutput() CustomDeviceMapOutput {
	return o
}

func (o CustomDeviceMapOutput) ToCustomDeviceMapOutputWithContext(ctx context.Context) CustomDeviceMapOutput {
	return o
}

func (o CustomDeviceMapOutput) MapIndex(k pulumi.StringInput) CustomDeviceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CustomDevice {
		return vs[0].(map[string]*CustomDevice)[vs[1].(string)]
	}).(CustomDeviceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CustomDeviceInput)(nil)).Elem(), &CustomDevice{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomDeviceArrayInput)(nil)).Elem(), CustomDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomDeviceMapInput)(nil)).Elem(), CustomDeviceMap{})
	pulumi.RegisterOutputType(CustomDeviceOutput{})
	pulumi.RegisterOutputType(CustomDeviceArrayOutput{})
	pulumi.RegisterOutputType(CustomDeviceMapOutput{})
}
