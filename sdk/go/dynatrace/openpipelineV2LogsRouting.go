// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OpenpipelineV2LogsRouting struct {
	pulumi.CustomResourceState

	// Routing for pipelines
	RoutingEntries OpenpipelineV2LogsRoutingRoutingEntriesPtrOutput `pulumi:"routingEntries"`
}

// NewOpenpipelineV2LogsRouting registers a new resource with the given unique name, arguments, and options.
func NewOpenpipelineV2LogsRouting(ctx *pulumi.Context,
	name string, args *OpenpipelineV2LogsRoutingArgs, opts ...pulumi.ResourceOption) (*OpenpipelineV2LogsRouting, error) {
	if args == nil {
		args = &OpenpipelineV2LogsRoutingArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenpipelineV2LogsRouting
	err := ctx.RegisterResource("dynatrace:index/openpipelineV2LogsRouting:OpenpipelineV2LogsRouting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenpipelineV2LogsRouting gets an existing OpenpipelineV2LogsRouting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenpipelineV2LogsRouting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenpipelineV2LogsRoutingState, opts ...pulumi.ResourceOption) (*OpenpipelineV2LogsRouting, error) {
	var resource OpenpipelineV2LogsRouting
	err := ctx.ReadResource("dynatrace:index/openpipelineV2LogsRouting:OpenpipelineV2LogsRouting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenpipelineV2LogsRouting resources.
type openpipelineV2LogsRoutingState struct {
	// Routing for pipelines
	RoutingEntries *OpenpipelineV2LogsRoutingRoutingEntries `pulumi:"routingEntries"`
}

type OpenpipelineV2LogsRoutingState struct {
	// Routing for pipelines
	RoutingEntries OpenpipelineV2LogsRoutingRoutingEntriesPtrInput
}

func (OpenpipelineV2LogsRoutingState) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2LogsRoutingState)(nil)).Elem()
}

type openpipelineV2LogsRoutingArgs struct {
	// Routing for pipelines
	RoutingEntries *OpenpipelineV2LogsRoutingRoutingEntries `pulumi:"routingEntries"`
}

// The set of arguments for constructing a OpenpipelineV2LogsRouting resource.
type OpenpipelineV2LogsRoutingArgs struct {
	// Routing for pipelines
	RoutingEntries OpenpipelineV2LogsRoutingRoutingEntriesPtrInput
}

func (OpenpipelineV2LogsRoutingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2LogsRoutingArgs)(nil)).Elem()
}

type OpenpipelineV2LogsRoutingInput interface {
	pulumi.Input

	ToOpenpipelineV2LogsRoutingOutput() OpenpipelineV2LogsRoutingOutput
	ToOpenpipelineV2LogsRoutingOutputWithContext(ctx context.Context) OpenpipelineV2LogsRoutingOutput
}

func (*OpenpipelineV2LogsRouting) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2LogsRouting)(nil)).Elem()
}

func (i *OpenpipelineV2LogsRouting) ToOpenpipelineV2LogsRoutingOutput() OpenpipelineV2LogsRoutingOutput {
	return i.ToOpenpipelineV2LogsRoutingOutputWithContext(context.Background())
}

func (i *OpenpipelineV2LogsRouting) ToOpenpipelineV2LogsRoutingOutputWithContext(ctx context.Context) OpenpipelineV2LogsRoutingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2LogsRoutingOutput)
}

// OpenpipelineV2LogsRoutingArrayInput is an input type that accepts OpenpipelineV2LogsRoutingArray and OpenpipelineV2LogsRoutingArrayOutput values.
// You can construct a concrete instance of `OpenpipelineV2LogsRoutingArrayInput` via:
//
//	OpenpipelineV2LogsRoutingArray{ OpenpipelineV2LogsRoutingArgs{...} }
type OpenpipelineV2LogsRoutingArrayInput interface {
	pulumi.Input

	ToOpenpipelineV2LogsRoutingArrayOutput() OpenpipelineV2LogsRoutingArrayOutput
	ToOpenpipelineV2LogsRoutingArrayOutputWithContext(context.Context) OpenpipelineV2LogsRoutingArrayOutput
}

type OpenpipelineV2LogsRoutingArray []OpenpipelineV2LogsRoutingInput

func (OpenpipelineV2LogsRoutingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2LogsRouting)(nil)).Elem()
}

func (i OpenpipelineV2LogsRoutingArray) ToOpenpipelineV2LogsRoutingArrayOutput() OpenpipelineV2LogsRoutingArrayOutput {
	return i.ToOpenpipelineV2LogsRoutingArrayOutputWithContext(context.Background())
}

func (i OpenpipelineV2LogsRoutingArray) ToOpenpipelineV2LogsRoutingArrayOutputWithContext(ctx context.Context) OpenpipelineV2LogsRoutingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2LogsRoutingArrayOutput)
}

// OpenpipelineV2LogsRoutingMapInput is an input type that accepts OpenpipelineV2LogsRoutingMap and OpenpipelineV2LogsRoutingMapOutput values.
// You can construct a concrete instance of `OpenpipelineV2LogsRoutingMapInput` via:
//
//	OpenpipelineV2LogsRoutingMap{ "key": OpenpipelineV2LogsRoutingArgs{...} }
type OpenpipelineV2LogsRoutingMapInput interface {
	pulumi.Input

	ToOpenpipelineV2LogsRoutingMapOutput() OpenpipelineV2LogsRoutingMapOutput
	ToOpenpipelineV2LogsRoutingMapOutputWithContext(context.Context) OpenpipelineV2LogsRoutingMapOutput
}

type OpenpipelineV2LogsRoutingMap map[string]OpenpipelineV2LogsRoutingInput

func (OpenpipelineV2LogsRoutingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2LogsRouting)(nil)).Elem()
}

func (i OpenpipelineV2LogsRoutingMap) ToOpenpipelineV2LogsRoutingMapOutput() OpenpipelineV2LogsRoutingMapOutput {
	return i.ToOpenpipelineV2LogsRoutingMapOutputWithContext(context.Background())
}

func (i OpenpipelineV2LogsRoutingMap) ToOpenpipelineV2LogsRoutingMapOutputWithContext(ctx context.Context) OpenpipelineV2LogsRoutingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2LogsRoutingMapOutput)
}

type OpenpipelineV2LogsRoutingOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2LogsRoutingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2LogsRouting)(nil)).Elem()
}

func (o OpenpipelineV2LogsRoutingOutput) ToOpenpipelineV2LogsRoutingOutput() OpenpipelineV2LogsRoutingOutput {
	return o
}

func (o OpenpipelineV2LogsRoutingOutput) ToOpenpipelineV2LogsRoutingOutputWithContext(ctx context.Context) OpenpipelineV2LogsRoutingOutput {
	return o
}

// Routing for pipelines
func (o OpenpipelineV2LogsRoutingOutput) RoutingEntries() OpenpipelineV2LogsRoutingRoutingEntriesPtrOutput {
	return o.ApplyT(func(v *OpenpipelineV2LogsRouting) OpenpipelineV2LogsRoutingRoutingEntriesPtrOutput {
		return v.RoutingEntries
	}).(OpenpipelineV2LogsRoutingRoutingEntriesPtrOutput)
}

type OpenpipelineV2LogsRoutingArrayOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2LogsRoutingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2LogsRouting)(nil)).Elem()
}

func (o OpenpipelineV2LogsRoutingArrayOutput) ToOpenpipelineV2LogsRoutingArrayOutput() OpenpipelineV2LogsRoutingArrayOutput {
	return o
}

func (o OpenpipelineV2LogsRoutingArrayOutput) ToOpenpipelineV2LogsRoutingArrayOutputWithContext(ctx context.Context) OpenpipelineV2LogsRoutingArrayOutput {
	return o
}

func (o OpenpipelineV2LogsRoutingArrayOutput) Index(i pulumi.IntInput) OpenpipelineV2LogsRoutingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenpipelineV2LogsRouting {
		return vs[0].([]*OpenpipelineV2LogsRouting)[vs[1].(int)]
	}).(OpenpipelineV2LogsRoutingOutput)
}

type OpenpipelineV2LogsRoutingMapOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2LogsRoutingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2LogsRouting)(nil)).Elem()
}

func (o OpenpipelineV2LogsRoutingMapOutput) ToOpenpipelineV2LogsRoutingMapOutput() OpenpipelineV2LogsRoutingMapOutput {
	return o
}

func (o OpenpipelineV2LogsRoutingMapOutput) ToOpenpipelineV2LogsRoutingMapOutputWithContext(ctx context.Context) OpenpipelineV2LogsRoutingMapOutput {
	return o
}

func (o OpenpipelineV2LogsRoutingMapOutput) MapIndex(k pulumi.StringInput) OpenpipelineV2LogsRoutingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenpipelineV2LogsRouting {
		return vs[0].(map[string]*OpenpipelineV2LogsRouting)[vs[1].(string)]
	}).(OpenpipelineV2LogsRoutingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2LogsRoutingInput)(nil)).Elem(), &OpenpipelineV2LogsRouting{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2LogsRoutingArrayInput)(nil)).Elem(), OpenpipelineV2LogsRoutingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2LogsRoutingMapInput)(nil)).Elem(), OpenpipelineV2LogsRoutingMap{})
	pulumi.RegisterOutputType(OpenpipelineV2LogsRoutingOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2LogsRoutingArrayOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2LogsRoutingMapOutput{})
}
