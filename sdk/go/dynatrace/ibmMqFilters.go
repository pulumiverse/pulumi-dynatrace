// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type IbmMqFilters struct {
	pulumi.CustomResourceState

	// CICS: Excluded MQ queues
	CicsMqQueueIdExcludes pulumi.StringArrayOutput `pulumi:"cicsMqQueueIdExcludes"`
	// CICS: Included MQ queues
	CicsMqQueueIdIncludes pulumi.StringArrayOutput `pulumi:"cicsMqQueueIdIncludes"`
	// When you add a transaction ID to the exclude list remaining transactions are still monitored.
	ImsCrTrnIdExcludes pulumi.StringArrayOutput `pulumi:"imsCrTrnIdExcludes"`
	// When you add a transaction ID to the include list, all the remaining transactions are ignored.
	ImsCrTrnIdIncludes pulumi.StringArrayOutput `pulumi:"imsCrTrnIdIncludes"`
	// IMS: Excluded MQ queues
	ImsMqQueueIdExcludes pulumi.StringArrayOutput `pulumi:"imsMqQueueIdExcludes"`
	// IMS: Included MQ queues
	ImsMqQueueIdIncludes pulumi.StringArrayOutput `pulumi:"imsMqQueueIdIncludes"`
}

// NewIbmMqFilters registers a new resource with the given unique name, arguments, and options.
func NewIbmMqFilters(ctx *pulumi.Context,
	name string, args *IbmMqFiltersArgs, opts ...pulumi.ResourceOption) (*IbmMqFilters, error) {
	if args == nil {
		args = &IbmMqFiltersArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IbmMqFilters
	err := ctx.RegisterResource("dynatrace:index/ibmMqFilters:IbmMqFilters", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIbmMqFilters gets an existing IbmMqFilters resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIbmMqFilters(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IbmMqFiltersState, opts ...pulumi.ResourceOption) (*IbmMqFilters, error) {
	var resource IbmMqFilters
	err := ctx.ReadResource("dynatrace:index/ibmMqFilters:IbmMqFilters", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IbmMqFilters resources.
type ibmMqFiltersState struct {
	// CICS: Excluded MQ queues
	CicsMqQueueIdExcludes []string `pulumi:"cicsMqQueueIdExcludes"`
	// CICS: Included MQ queues
	CicsMqQueueIdIncludes []string `pulumi:"cicsMqQueueIdIncludes"`
	// When you add a transaction ID to the exclude list remaining transactions are still monitored.
	ImsCrTrnIdExcludes []string `pulumi:"imsCrTrnIdExcludes"`
	// When you add a transaction ID to the include list, all the remaining transactions are ignored.
	ImsCrTrnIdIncludes []string `pulumi:"imsCrTrnIdIncludes"`
	// IMS: Excluded MQ queues
	ImsMqQueueIdExcludes []string `pulumi:"imsMqQueueIdExcludes"`
	// IMS: Included MQ queues
	ImsMqQueueIdIncludes []string `pulumi:"imsMqQueueIdIncludes"`
}

type IbmMqFiltersState struct {
	// CICS: Excluded MQ queues
	CicsMqQueueIdExcludes pulumi.StringArrayInput
	// CICS: Included MQ queues
	CicsMqQueueIdIncludes pulumi.StringArrayInput
	// When you add a transaction ID to the exclude list remaining transactions are still monitored.
	ImsCrTrnIdExcludes pulumi.StringArrayInput
	// When you add a transaction ID to the include list, all the remaining transactions are ignored.
	ImsCrTrnIdIncludes pulumi.StringArrayInput
	// IMS: Excluded MQ queues
	ImsMqQueueIdExcludes pulumi.StringArrayInput
	// IMS: Included MQ queues
	ImsMqQueueIdIncludes pulumi.StringArrayInput
}

func (IbmMqFiltersState) ElementType() reflect.Type {
	return reflect.TypeOf((*ibmMqFiltersState)(nil)).Elem()
}

type ibmMqFiltersArgs struct {
	// CICS: Excluded MQ queues
	CicsMqQueueIdExcludes []string `pulumi:"cicsMqQueueIdExcludes"`
	// CICS: Included MQ queues
	CicsMqQueueIdIncludes []string `pulumi:"cicsMqQueueIdIncludes"`
	// When you add a transaction ID to the exclude list remaining transactions are still monitored.
	ImsCrTrnIdExcludes []string `pulumi:"imsCrTrnIdExcludes"`
	// When you add a transaction ID to the include list, all the remaining transactions are ignored.
	ImsCrTrnIdIncludes []string `pulumi:"imsCrTrnIdIncludes"`
	// IMS: Excluded MQ queues
	ImsMqQueueIdExcludes []string `pulumi:"imsMqQueueIdExcludes"`
	// IMS: Included MQ queues
	ImsMqQueueIdIncludes []string `pulumi:"imsMqQueueIdIncludes"`
}

// The set of arguments for constructing a IbmMqFilters resource.
type IbmMqFiltersArgs struct {
	// CICS: Excluded MQ queues
	CicsMqQueueIdExcludes pulumi.StringArrayInput
	// CICS: Included MQ queues
	CicsMqQueueIdIncludes pulumi.StringArrayInput
	// When you add a transaction ID to the exclude list remaining transactions are still monitored.
	ImsCrTrnIdExcludes pulumi.StringArrayInput
	// When you add a transaction ID to the include list, all the remaining transactions are ignored.
	ImsCrTrnIdIncludes pulumi.StringArrayInput
	// IMS: Excluded MQ queues
	ImsMqQueueIdExcludes pulumi.StringArrayInput
	// IMS: Included MQ queues
	ImsMqQueueIdIncludes pulumi.StringArrayInput
}

func (IbmMqFiltersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ibmMqFiltersArgs)(nil)).Elem()
}

type IbmMqFiltersInput interface {
	pulumi.Input

	ToIbmMqFiltersOutput() IbmMqFiltersOutput
	ToIbmMqFiltersOutputWithContext(ctx context.Context) IbmMqFiltersOutput
}

func (*IbmMqFilters) ElementType() reflect.Type {
	return reflect.TypeOf((**IbmMqFilters)(nil)).Elem()
}

func (i *IbmMqFilters) ToIbmMqFiltersOutput() IbmMqFiltersOutput {
	return i.ToIbmMqFiltersOutputWithContext(context.Background())
}

func (i *IbmMqFilters) ToIbmMqFiltersOutputWithContext(ctx context.Context) IbmMqFiltersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IbmMqFiltersOutput)
}

// IbmMqFiltersArrayInput is an input type that accepts IbmMqFiltersArray and IbmMqFiltersArrayOutput values.
// You can construct a concrete instance of `IbmMqFiltersArrayInput` via:
//
//	IbmMqFiltersArray{ IbmMqFiltersArgs{...} }
type IbmMqFiltersArrayInput interface {
	pulumi.Input

	ToIbmMqFiltersArrayOutput() IbmMqFiltersArrayOutput
	ToIbmMqFiltersArrayOutputWithContext(context.Context) IbmMqFiltersArrayOutput
}

type IbmMqFiltersArray []IbmMqFiltersInput

func (IbmMqFiltersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IbmMqFilters)(nil)).Elem()
}

func (i IbmMqFiltersArray) ToIbmMqFiltersArrayOutput() IbmMqFiltersArrayOutput {
	return i.ToIbmMqFiltersArrayOutputWithContext(context.Background())
}

func (i IbmMqFiltersArray) ToIbmMqFiltersArrayOutputWithContext(ctx context.Context) IbmMqFiltersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IbmMqFiltersArrayOutput)
}

// IbmMqFiltersMapInput is an input type that accepts IbmMqFiltersMap and IbmMqFiltersMapOutput values.
// You can construct a concrete instance of `IbmMqFiltersMapInput` via:
//
//	IbmMqFiltersMap{ "key": IbmMqFiltersArgs{...} }
type IbmMqFiltersMapInput interface {
	pulumi.Input

	ToIbmMqFiltersMapOutput() IbmMqFiltersMapOutput
	ToIbmMqFiltersMapOutputWithContext(context.Context) IbmMqFiltersMapOutput
}

type IbmMqFiltersMap map[string]IbmMqFiltersInput

func (IbmMqFiltersMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IbmMqFilters)(nil)).Elem()
}

func (i IbmMqFiltersMap) ToIbmMqFiltersMapOutput() IbmMqFiltersMapOutput {
	return i.ToIbmMqFiltersMapOutputWithContext(context.Background())
}

func (i IbmMqFiltersMap) ToIbmMqFiltersMapOutputWithContext(ctx context.Context) IbmMqFiltersMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IbmMqFiltersMapOutput)
}

type IbmMqFiltersOutput struct{ *pulumi.OutputState }

func (IbmMqFiltersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IbmMqFilters)(nil)).Elem()
}

func (o IbmMqFiltersOutput) ToIbmMqFiltersOutput() IbmMqFiltersOutput {
	return o
}

func (o IbmMqFiltersOutput) ToIbmMqFiltersOutputWithContext(ctx context.Context) IbmMqFiltersOutput {
	return o
}

// CICS: Excluded MQ queues
func (o IbmMqFiltersOutput) CicsMqQueueIdExcludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IbmMqFilters) pulumi.StringArrayOutput { return v.CicsMqQueueIdExcludes }).(pulumi.StringArrayOutput)
}

// CICS: Included MQ queues
func (o IbmMqFiltersOutput) CicsMqQueueIdIncludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IbmMqFilters) pulumi.StringArrayOutput { return v.CicsMqQueueIdIncludes }).(pulumi.StringArrayOutput)
}

// When you add a transaction ID to the exclude list remaining transactions are still monitored.
func (o IbmMqFiltersOutput) ImsCrTrnIdExcludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IbmMqFilters) pulumi.StringArrayOutput { return v.ImsCrTrnIdExcludes }).(pulumi.StringArrayOutput)
}

// When you add a transaction ID to the include list, all the remaining transactions are ignored.
func (o IbmMqFiltersOutput) ImsCrTrnIdIncludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IbmMqFilters) pulumi.StringArrayOutput { return v.ImsCrTrnIdIncludes }).(pulumi.StringArrayOutput)
}

// IMS: Excluded MQ queues
func (o IbmMqFiltersOutput) ImsMqQueueIdExcludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IbmMqFilters) pulumi.StringArrayOutput { return v.ImsMqQueueIdExcludes }).(pulumi.StringArrayOutput)
}

// IMS: Included MQ queues
func (o IbmMqFiltersOutput) ImsMqQueueIdIncludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IbmMqFilters) pulumi.StringArrayOutput { return v.ImsMqQueueIdIncludes }).(pulumi.StringArrayOutput)
}

type IbmMqFiltersArrayOutput struct{ *pulumi.OutputState }

func (IbmMqFiltersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IbmMqFilters)(nil)).Elem()
}

func (o IbmMqFiltersArrayOutput) ToIbmMqFiltersArrayOutput() IbmMqFiltersArrayOutput {
	return o
}

func (o IbmMqFiltersArrayOutput) ToIbmMqFiltersArrayOutputWithContext(ctx context.Context) IbmMqFiltersArrayOutput {
	return o
}

func (o IbmMqFiltersArrayOutput) Index(i pulumi.IntInput) IbmMqFiltersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IbmMqFilters {
		return vs[0].([]*IbmMqFilters)[vs[1].(int)]
	}).(IbmMqFiltersOutput)
}

type IbmMqFiltersMapOutput struct{ *pulumi.OutputState }

func (IbmMqFiltersMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IbmMqFilters)(nil)).Elem()
}

func (o IbmMqFiltersMapOutput) ToIbmMqFiltersMapOutput() IbmMqFiltersMapOutput {
	return o
}

func (o IbmMqFiltersMapOutput) ToIbmMqFiltersMapOutputWithContext(ctx context.Context) IbmMqFiltersMapOutput {
	return o
}

func (o IbmMqFiltersMapOutput) MapIndex(k pulumi.StringInput) IbmMqFiltersOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IbmMqFilters {
		return vs[0].(map[string]*IbmMqFilters)[vs[1].(string)]
	}).(IbmMqFiltersOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IbmMqFiltersInput)(nil)).Elem(), &IbmMqFilters{})
	pulumi.RegisterInputType(reflect.TypeOf((*IbmMqFiltersArrayInput)(nil)).Elem(), IbmMqFiltersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IbmMqFiltersMapInput)(nil)).Elem(), IbmMqFiltersMap{})
	pulumi.RegisterOutputType(IbmMqFiltersOutput{})
	pulumi.RegisterOutputType(IbmMqFiltersArrayOutput{})
	pulumi.RegisterOutputType(IbmMqFiltersMapOutput{})
}
