// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type ResourceAttributes struct {
	pulumi.CustomResourceState

	// Attribute key allow-list
	Keys ResourceAttributesKeysPtrOutput `pulumi:"keys"`
}

// NewResourceAttributes registers a new resource with the given unique name, arguments, and options.
func NewResourceAttributes(ctx *pulumi.Context,
	name string, args *ResourceAttributesArgs, opts ...pulumi.ResourceOption) (*ResourceAttributes, error) {
	if args == nil {
		args = &ResourceAttributesArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResourceAttributes
	err := ctx.RegisterResource("dynatrace:index/resourceAttributes:ResourceAttributes", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceAttributes gets an existing ResourceAttributes resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceAttributes(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceAttributesState, opts ...pulumi.ResourceOption) (*ResourceAttributes, error) {
	var resource ResourceAttributes
	err := ctx.ReadResource("dynatrace:index/resourceAttributes:ResourceAttributes", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceAttributes resources.
type resourceAttributesState struct {
	// Attribute key allow-list
	Keys *ResourceAttributesKeys `pulumi:"keys"`
}

type ResourceAttributesState struct {
	// Attribute key allow-list
	Keys ResourceAttributesKeysPtrInput
}

func (ResourceAttributesState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceAttributesState)(nil)).Elem()
}

type resourceAttributesArgs struct {
	// Attribute key allow-list
	Keys *ResourceAttributesKeys `pulumi:"keys"`
}

// The set of arguments for constructing a ResourceAttributes resource.
type ResourceAttributesArgs struct {
	// Attribute key allow-list
	Keys ResourceAttributesKeysPtrInput
}

func (ResourceAttributesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceAttributesArgs)(nil)).Elem()
}

type ResourceAttributesInput interface {
	pulumi.Input

	ToResourceAttributesOutput() ResourceAttributesOutput
	ToResourceAttributesOutputWithContext(ctx context.Context) ResourceAttributesOutput
}

func (*ResourceAttributes) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAttributes)(nil)).Elem()
}

func (i *ResourceAttributes) ToResourceAttributesOutput() ResourceAttributesOutput {
	return i.ToResourceAttributesOutputWithContext(context.Background())
}

func (i *ResourceAttributes) ToResourceAttributesOutputWithContext(ctx context.Context) ResourceAttributesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAttributesOutput)
}

// ResourceAttributesArrayInput is an input type that accepts ResourceAttributesArray and ResourceAttributesArrayOutput values.
// You can construct a concrete instance of `ResourceAttributesArrayInput` via:
//
//	ResourceAttributesArray{ ResourceAttributesArgs{...} }
type ResourceAttributesArrayInput interface {
	pulumi.Input

	ToResourceAttributesArrayOutput() ResourceAttributesArrayOutput
	ToResourceAttributesArrayOutputWithContext(context.Context) ResourceAttributesArrayOutput
}

type ResourceAttributesArray []ResourceAttributesInput

func (ResourceAttributesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceAttributes)(nil)).Elem()
}

func (i ResourceAttributesArray) ToResourceAttributesArrayOutput() ResourceAttributesArrayOutput {
	return i.ToResourceAttributesArrayOutputWithContext(context.Background())
}

func (i ResourceAttributesArray) ToResourceAttributesArrayOutputWithContext(ctx context.Context) ResourceAttributesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAttributesArrayOutput)
}

// ResourceAttributesMapInput is an input type that accepts ResourceAttributesMap and ResourceAttributesMapOutput values.
// You can construct a concrete instance of `ResourceAttributesMapInput` via:
//
//	ResourceAttributesMap{ "key": ResourceAttributesArgs{...} }
type ResourceAttributesMapInput interface {
	pulumi.Input

	ToResourceAttributesMapOutput() ResourceAttributesMapOutput
	ToResourceAttributesMapOutputWithContext(context.Context) ResourceAttributesMapOutput
}

type ResourceAttributesMap map[string]ResourceAttributesInput

func (ResourceAttributesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceAttributes)(nil)).Elem()
}

func (i ResourceAttributesMap) ToResourceAttributesMapOutput() ResourceAttributesMapOutput {
	return i.ToResourceAttributesMapOutputWithContext(context.Background())
}

func (i ResourceAttributesMap) ToResourceAttributesMapOutputWithContext(ctx context.Context) ResourceAttributesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAttributesMapOutput)
}

type ResourceAttributesOutput struct{ *pulumi.OutputState }

func (ResourceAttributesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAttributes)(nil)).Elem()
}

func (o ResourceAttributesOutput) ToResourceAttributesOutput() ResourceAttributesOutput {
	return o
}

func (o ResourceAttributesOutput) ToResourceAttributesOutputWithContext(ctx context.Context) ResourceAttributesOutput {
	return o
}

// Attribute key allow-list
func (o ResourceAttributesOutput) Keys() ResourceAttributesKeysPtrOutput {
	return o.ApplyT(func(v *ResourceAttributes) ResourceAttributesKeysPtrOutput { return v.Keys }).(ResourceAttributesKeysPtrOutput)
}

type ResourceAttributesArrayOutput struct{ *pulumi.OutputState }

func (ResourceAttributesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceAttributes)(nil)).Elem()
}

func (o ResourceAttributesArrayOutput) ToResourceAttributesArrayOutput() ResourceAttributesArrayOutput {
	return o
}

func (o ResourceAttributesArrayOutput) ToResourceAttributesArrayOutputWithContext(ctx context.Context) ResourceAttributesArrayOutput {
	return o
}

func (o ResourceAttributesArrayOutput) Index(i pulumi.IntInput) ResourceAttributesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResourceAttributes {
		return vs[0].([]*ResourceAttributes)[vs[1].(int)]
	}).(ResourceAttributesOutput)
}

type ResourceAttributesMapOutput struct{ *pulumi.OutputState }

func (ResourceAttributesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceAttributes)(nil)).Elem()
}

func (o ResourceAttributesMapOutput) ToResourceAttributesMapOutput() ResourceAttributesMapOutput {
	return o
}

func (o ResourceAttributesMapOutput) ToResourceAttributesMapOutputWithContext(ctx context.Context) ResourceAttributesMapOutput {
	return o
}

func (o ResourceAttributesMapOutput) MapIndex(k pulumi.StringInput) ResourceAttributesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResourceAttributes {
		return vs[0].(map[string]*ResourceAttributes)[vs[1].(string)]
	}).(ResourceAttributesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAttributesInput)(nil)).Elem(), &ResourceAttributes{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAttributesArrayInput)(nil)).Elem(), ResourceAttributesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAttributesMapInput)(nil)).Elem(), ResourceAttributesMap{})
	pulumi.RegisterOutputType(ResourceAttributesOutput{})
	pulumi.RegisterOutputType(ResourceAttributesArrayOutput{})
	pulumi.RegisterOutputType(ResourceAttributesMapOutput{})
}
