// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OpenpipelineV2UserEventsRouting struct {
	pulumi.CustomResourceState

	// Routing for pipelines
	RoutingEntries OpenpipelineV2UserEventsRoutingRoutingEntriesPtrOutput `pulumi:"routingEntries"`
}

// NewOpenpipelineV2UserEventsRouting registers a new resource with the given unique name, arguments, and options.
func NewOpenpipelineV2UserEventsRouting(ctx *pulumi.Context,
	name string, args *OpenpipelineV2UserEventsRoutingArgs, opts ...pulumi.ResourceOption) (*OpenpipelineV2UserEventsRouting, error) {
	if args == nil {
		args = &OpenpipelineV2UserEventsRoutingArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenpipelineV2UserEventsRouting
	err := ctx.RegisterResource("dynatrace:index/openpipelineV2UserEventsRouting:OpenpipelineV2UserEventsRouting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenpipelineV2UserEventsRouting gets an existing OpenpipelineV2UserEventsRouting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenpipelineV2UserEventsRouting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenpipelineV2UserEventsRoutingState, opts ...pulumi.ResourceOption) (*OpenpipelineV2UserEventsRouting, error) {
	var resource OpenpipelineV2UserEventsRouting
	err := ctx.ReadResource("dynatrace:index/openpipelineV2UserEventsRouting:OpenpipelineV2UserEventsRouting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenpipelineV2UserEventsRouting resources.
type openpipelineV2UserEventsRoutingState struct {
	// Routing for pipelines
	RoutingEntries *OpenpipelineV2UserEventsRoutingRoutingEntries `pulumi:"routingEntries"`
}

type OpenpipelineV2UserEventsRoutingState struct {
	// Routing for pipelines
	RoutingEntries OpenpipelineV2UserEventsRoutingRoutingEntriesPtrInput
}

func (OpenpipelineV2UserEventsRoutingState) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2UserEventsRoutingState)(nil)).Elem()
}

type openpipelineV2UserEventsRoutingArgs struct {
	// Routing for pipelines
	RoutingEntries *OpenpipelineV2UserEventsRoutingRoutingEntries `pulumi:"routingEntries"`
}

// The set of arguments for constructing a OpenpipelineV2UserEventsRouting resource.
type OpenpipelineV2UserEventsRoutingArgs struct {
	// Routing for pipelines
	RoutingEntries OpenpipelineV2UserEventsRoutingRoutingEntriesPtrInput
}

func (OpenpipelineV2UserEventsRoutingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2UserEventsRoutingArgs)(nil)).Elem()
}

type OpenpipelineV2UserEventsRoutingInput interface {
	pulumi.Input

	ToOpenpipelineV2UserEventsRoutingOutput() OpenpipelineV2UserEventsRoutingOutput
	ToOpenpipelineV2UserEventsRoutingOutputWithContext(ctx context.Context) OpenpipelineV2UserEventsRoutingOutput
}

func (*OpenpipelineV2UserEventsRouting) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2UserEventsRouting)(nil)).Elem()
}

func (i *OpenpipelineV2UserEventsRouting) ToOpenpipelineV2UserEventsRoutingOutput() OpenpipelineV2UserEventsRoutingOutput {
	return i.ToOpenpipelineV2UserEventsRoutingOutputWithContext(context.Background())
}

func (i *OpenpipelineV2UserEventsRouting) ToOpenpipelineV2UserEventsRoutingOutputWithContext(ctx context.Context) OpenpipelineV2UserEventsRoutingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2UserEventsRoutingOutput)
}

// OpenpipelineV2UserEventsRoutingArrayInput is an input type that accepts OpenpipelineV2UserEventsRoutingArray and OpenpipelineV2UserEventsRoutingArrayOutput values.
// You can construct a concrete instance of `OpenpipelineV2UserEventsRoutingArrayInput` via:
//
//	OpenpipelineV2UserEventsRoutingArray{ OpenpipelineV2UserEventsRoutingArgs{...} }
type OpenpipelineV2UserEventsRoutingArrayInput interface {
	pulumi.Input

	ToOpenpipelineV2UserEventsRoutingArrayOutput() OpenpipelineV2UserEventsRoutingArrayOutput
	ToOpenpipelineV2UserEventsRoutingArrayOutputWithContext(context.Context) OpenpipelineV2UserEventsRoutingArrayOutput
}

type OpenpipelineV2UserEventsRoutingArray []OpenpipelineV2UserEventsRoutingInput

func (OpenpipelineV2UserEventsRoutingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2UserEventsRouting)(nil)).Elem()
}

func (i OpenpipelineV2UserEventsRoutingArray) ToOpenpipelineV2UserEventsRoutingArrayOutput() OpenpipelineV2UserEventsRoutingArrayOutput {
	return i.ToOpenpipelineV2UserEventsRoutingArrayOutputWithContext(context.Background())
}

func (i OpenpipelineV2UserEventsRoutingArray) ToOpenpipelineV2UserEventsRoutingArrayOutputWithContext(ctx context.Context) OpenpipelineV2UserEventsRoutingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2UserEventsRoutingArrayOutput)
}

// OpenpipelineV2UserEventsRoutingMapInput is an input type that accepts OpenpipelineV2UserEventsRoutingMap and OpenpipelineV2UserEventsRoutingMapOutput values.
// You can construct a concrete instance of `OpenpipelineV2UserEventsRoutingMapInput` via:
//
//	OpenpipelineV2UserEventsRoutingMap{ "key": OpenpipelineV2UserEventsRoutingArgs{...} }
type OpenpipelineV2UserEventsRoutingMapInput interface {
	pulumi.Input

	ToOpenpipelineV2UserEventsRoutingMapOutput() OpenpipelineV2UserEventsRoutingMapOutput
	ToOpenpipelineV2UserEventsRoutingMapOutputWithContext(context.Context) OpenpipelineV2UserEventsRoutingMapOutput
}

type OpenpipelineV2UserEventsRoutingMap map[string]OpenpipelineV2UserEventsRoutingInput

func (OpenpipelineV2UserEventsRoutingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2UserEventsRouting)(nil)).Elem()
}

func (i OpenpipelineV2UserEventsRoutingMap) ToOpenpipelineV2UserEventsRoutingMapOutput() OpenpipelineV2UserEventsRoutingMapOutput {
	return i.ToOpenpipelineV2UserEventsRoutingMapOutputWithContext(context.Background())
}

func (i OpenpipelineV2UserEventsRoutingMap) ToOpenpipelineV2UserEventsRoutingMapOutputWithContext(ctx context.Context) OpenpipelineV2UserEventsRoutingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2UserEventsRoutingMapOutput)
}

type OpenpipelineV2UserEventsRoutingOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2UserEventsRoutingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2UserEventsRouting)(nil)).Elem()
}

func (o OpenpipelineV2UserEventsRoutingOutput) ToOpenpipelineV2UserEventsRoutingOutput() OpenpipelineV2UserEventsRoutingOutput {
	return o
}

func (o OpenpipelineV2UserEventsRoutingOutput) ToOpenpipelineV2UserEventsRoutingOutputWithContext(ctx context.Context) OpenpipelineV2UserEventsRoutingOutput {
	return o
}

// Routing for pipelines
func (o OpenpipelineV2UserEventsRoutingOutput) RoutingEntries() OpenpipelineV2UserEventsRoutingRoutingEntriesPtrOutput {
	return o.ApplyT(func(v *OpenpipelineV2UserEventsRouting) OpenpipelineV2UserEventsRoutingRoutingEntriesPtrOutput {
		return v.RoutingEntries
	}).(OpenpipelineV2UserEventsRoutingRoutingEntriesPtrOutput)
}

type OpenpipelineV2UserEventsRoutingArrayOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2UserEventsRoutingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2UserEventsRouting)(nil)).Elem()
}

func (o OpenpipelineV2UserEventsRoutingArrayOutput) ToOpenpipelineV2UserEventsRoutingArrayOutput() OpenpipelineV2UserEventsRoutingArrayOutput {
	return o
}

func (o OpenpipelineV2UserEventsRoutingArrayOutput) ToOpenpipelineV2UserEventsRoutingArrayOutputWithContext(ctx context.Context) OpenpipelineV2UserEventsRoutingArrayOutput {
	return o
}

func (o OpenpipelineV2UserEventsRoutingArrayOutput) Index(i pulumi.IntInput) OpenpipelineV2UserEventsRoutingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenpipelineV2UserEventsRouting {
		return vs[0].([]*OpenpipelineV2UserEventsRouting)[vs[1].(int)]
	}).(OpenpipelineV2UserEventsRoutingOutput)
}

type OpenpipelineV2UserEventsRoutingMapOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2UserEventsRoutingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2UserEventsRouting)(nil)).Elem()
}

func (o OpenpipelineV2UserEventsRoutingMapOutput) ToOpenpipelineV2UserEventsRoutingMapOutput() OpenpipelineV2UserEventsRoutingMapOutput {
	return o
}

func (o OpenpipelineV2UserEventsRoutingMapOutput) ToOpenpipelineV2UserEventsRoutingMapOutputWithContext(ctx context.Context) OpenpipelineV2UserEventsRoutingMapOutput {
	return o
}

func (o OpenpipelineV2UserEventsRoutingMapOutput) MapIndex(k pulumi.StringInput) OpenpipelineV2UserEventsRoutingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenpipelineV2UserEventsRouting {
		return vs[0].(map[string]*OpenpipelineV2UserEventsRouting)[vs[1].(string)]
	}).(OpenpipelineV2UserEventsRoutingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2UserEventsRoutingInput)(nil)).Elem(), &OpenpipelineV2UserEventsRouting{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2UserEventsRoutingArrayInput)(nil)).Elem(), OpenpipelineV2UserEventsRoutingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2UserEventsRoutingMapInput)(nil)).Elem(), OpenpipelineV2UserEventsRoutingMap{})
	pulumi.RegisterOutputType(OpenpipelineV2UserEventsRoutingOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2UserEventsRoutingArrayOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2UserEventsRoutingMapOutput{})
}
