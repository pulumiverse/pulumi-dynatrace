// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OpenpipelineV2EventsPipelines struct {
	pulumi.CustomResourceState

	// Cost allocation stage
	CostAllocation OpenpipelineV2EventsPipelinesCostAllocationOutput `pulumi:"costAllocation"`
	// Custom pipeline id
	CustomId pulumi.StringOutput `pulumi:"customId"`
	// Data extraction stage
	DataExtraction OpenpipelineV2EventsPipelinesDataExtractionOutput `pulumi:"dataExtraction"`
	// Davis event extraction stage
	Davis OpenpipelineV2EventsPipelinesDavisOutput `pulumi:"davis"`
	// Display name
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Metrics extraction stage
	MetricExtraction OpenpipelineV2EventsPipelinesMetricExtractionOutput `pulumi:"metricExtraction"`
	// Processing stage
	Processing OpenpipelineV2EventsPipelinesProcessingOutput `pulumi:"processing"`
	// Product allocation stage
	ProductAllocation OpenpipelineV2EventsPipelinesProductAllocationOutput `pulumi:"productAllocation"`
	// Security context stage
	SecurityContext OpenpipelineV2EventsPipelinesSecurityContextOutput `pulumi:"securityContext"`
	// Storage stage
	Storage OpenpipelineV2EventsPipelinesStorageOutput `pulumi:"storage"`
}

// NewOpenpipelineV2EventsPipelines registers a new resource with the given unique name, arguments, and options.
func NewOpenpipelineV2EventsPipelines(ctx *pulumi.Context,
	name string, args *OpenpipelineV2EventsPipelinesArgs, opts ...pulumi.ResourceOption) (*OpenpipelineV2EventsPipelines, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CostAllocation == nil {
		return nil, errors.New("invalid value for required argument 'CostAllocation'")
	}
	if args.CustomId == nil {
		return nil, errors.New("invalid value for required argument 'CustomId'")
	}
	if args.DataExtraction == nil {
		return nil, errors.New("invalid value for required argument 'DataExtraction'")
	}
	if args.Davis == nil {
		return nil, errors.New("invalid value for required argument 'Davis'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.MetricExtraction == nil {
		return nil, errors.New("invalid value for required argument 'MetricExtraction'")
	}
	if args.Processing == nil {
		return nil, errors.New("invalid value for required argument 'Processing'")
	}
	if args.ProductAllocation == nil {
		return nil, errors.New("invalid value for required argument 'ProductAllocation'")
	}
	if args.SecurityContext == nil {
		return nil, errors.New("invalid value for required argument 'SecurityContext'")
	}
	if args.Storage == nil {
		return nil, errors.New("invalid value for required argument 'Storage'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenpipelineV2EventsPipelines
	err := ctx.RegisterResource("dynatrace:index/openpipelineV2EventsPipelines:OpenpipelineV2EventsPipelines", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenpipelineV2EventsPipelines gets an existing OpenpipelineV2EventsPipelines resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenpipelineV2EventsPipelines(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenpipelineV2EventsPipelinesState, opts ...pulumi.ResourceOption) (*OpenpipelineV2EventsPipelines, error) {
	var resource OpenpipelineV2EventsPipelines
	err := ctx.ReadResource("dynatrace:index/openpipelineV2EventsPipelines:OpenpipelineV2EventsPipelines", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenpipelineV2EventsPipelines resources.
type openpipelineV2EventsPipelinesState struct {
	// Cost allocation stage
	CostAllocation *OpenpipelineV2EventsPipelinesCostAllocation `pulumi:"costAllocation"`
	// Custom pipeline id
	CustomId *string `pulumi:"customId"`
	// Data extraction stage
	DataExtraction *OpenpipelineV2EventsPipelinesDataExtraction `pulumi:"dataExtraction"`
	// Davis event extraction stage
	Davis *OpenpipelineV2EventsPipelinesDavis `pulumi:"davis"`
	// Display name
	DisplayName *string `pulumi:"displayName"`
	// Metrics extraction stage
	MetricExtraction *OpenpipelineV2EventsPipelinesMetricExtraction `pulumi:"metricExtraction"`
	// Processing stage
	Processing *OpenpipelineV2EventsPipelinesProcessing `pulumi:"processing"`
	// Product allocation stage
	ProductAllocation *OpenpipelineV2EventsPipelinesProductAllocation `pulumi:"productAllocation"`
	// Security context stage
	SecurityContext *OpenpipelineV2EventsPipelinesSecurityContext `pulumi:"securityContext"`
	// Storage stage
	Storage *OpenpipelineV2EventsPipelinesStorage `pulumi:"storage"`
}

type OpenpipelineV2EventsPipelinesState struct {
	// Cost allocation stage
	CostAllocation OpenpipelineV2EventsPipelinesCostAllocationPtrInput
	// Custom pipeline id
	CustomId pulumi.StringPtrInput
	// Data extraction stage
	DataExtraction OpenpipelineV2EventsPipelinesDataExtractionPtrInput
	// Davis event extraction stage
	Davis OpenpipelineV2EventsPipelinesDavisPtrInput
	// Display name
	DisplayName pulumi.StringPtrInput
	// Metrics extraction stage
	MetricExtraction OpenpipelineV2EventsPipelinesMetricExtractionPtrInput
	// Processing stage
	Processing OpenpipelineV2EventsPipelinesProcessingPtrInput
	// Product allocation stage
	ProductAllocation OpenpipelineV2EventsPipelinesProductAllocationPtrInput
	// Security context stage
	SecurityContext OpenpipelineV2EventsPipelinesSecurityContextPtrInput
	// Storage stage
	Storage OpenpipelineV2EventsPipelinesStoragePtrInput
}

func (OpenpipelineV2EventsPipelinesState) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2EventsPipelinesState)(nil)).Elem()
}

type openpipelineV2EventsPipelinesArgs struct {
	// Cost allocation stage
	CostAllocation OpenpipelineV2EventsPipelinesCostAllocation `pulumi:"costAllocation"`
	// Custom pipeline id
	CustomId string `pulumi:"customId"`
	// Data extraction stage
	DataExtraction OpenpipelineV2EventsPipelinesDataExtraction `pulumi:"dataExtraction"`
	// Davis event extraction stage
	Davis OpenpipelineV2EventsPipelinesDavis `pulumi:"davis"`
	// Display name
	DisplayName string `pulumi:"displayName"`
	// Metrics extraction stage
	MetricExtraction OpenpipelineV2EventsPipelinesMetricExtraction `pulumi:"metricExtraction"`
	// Processing stage
	Processing OpenpipelineV2EventsPipelinesProcessing `pulumi:"processing"`
	// Product allocation stage
	ProductAllocation OpenpipelineV2EventsPipelinesProductAllocation `pulumi:"productAllocation"`
	// Security context stage
	SecurityContext OpenpipelineV2EventsPipelinesSecurityContext `pulumi:"securityContext"`
	// Storage stage
	Storage OpenpipelineV2EventsPipelinesStorage `pulumi:"storage"`
}

// The set of arguments for constructing a OpenpipelineV2EventsPipelines resource.
type OpenpipelineV2EventsPipelinesArgs struct {
	// Cost allocation stage
	CostAllocation OpenpipelineV2EventsPipelinesCostAllocationInput
	// Custom pipeline id
	CustomId pulumi.StringInput
	// Data extraction stage
	DataExtraction OpenpipelineV2EventsPipelinesDataExtractionInput
	// Davis event extraction stage
	Davis OpenpipelineV2EventsPipelinesDavisInput
	// Display name
	DisplayName pulumi.StringInput
	// Metrics extraction stage
	MetricExtraction OpenpipelineV2EventsPipelinesMetricExtractionInput
	// Processing stage
	Processing OpenpipelineV2EventsPipelinesProcessingInput
	// Product allocation stage
	ProductAllocation OpenpipelineV2EventsPipelinesProductAllocationInput
	// Security context stage
	SecurityContext OpenpipelineV2EventsPipelinesSecurityContextInput
	// Storage stage
	Storage OpenpipelineV2EventsPipelinesStorageInput
}

func (OpenpipelineV2EventsPipelinesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2EventsPipelinesArgs)(nil)).Elem()
}

type OpenpipelineV2EventsPipelinesInput interface {
	pulumi.Input

	ToOpenpipelineV2EventsPipelinesOutput() OpenpipelineV2EventsPipelinesOutput
	ToOpenpipelineV2EventsPipelinesOutputWithContext(ctx context.Context) OpenpipelineV2EventsPipelinesOutput
}

func (*OpenpipelineV2EventsPipelines) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2EventsPipelines)(nil)).Elem()
}

func (i *OpenpipelineV2EventsPipelines) ToOpenpipelineV2EventsPipelinesOutput() OpenpipelineV2EventsPipelinesOutput {
	return i.ToOpenpipelineV2EventsPipelinesOutputWithContext(context.Background())
}

func (i *OpenpipelineV2EventsPipelines) ToOpenpipelineV2EventsPipelinesOutputWithContext(ctx context.Context) OpenpipelineV2EventsPipelinesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2EventsPipelinesOutput)
}

// OpenpipelineV2EventsPipelinesArrayInput is an input type that accepts OpenpipelineV2EventsPipelinesArray and OpenpipelineV2EventsPipelinesArrayOutput values.
// You can construct a concrete instance of `OpenpipelineV2EventsPipelinesArrayInput` via:
//
//	OpenpipelineV2EventsPipelinesArray{ OpenpipelineV2EventsPipelinesArgs{...} }
type OpenpipelineV2EventsPipelinesArrayInput interface {
	pulumi.Input

	ToOpenpipelineV2EventsPipelinesArrayOutput() OpenpipelineV2EventsPipelinesArrayOutput
	ToOpenpipelineV2EventsPipelinesArrayOutputWithContext(context.Context) OpenpipelineV2EventsPipelinesArrayOutput
}

type OpenpipelineV2EventsPipelinesArray []OpenpipelineV2EventsPipelinesInput

func (OpenpipelineV2EventsPipelinesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2EventsPipelines)(nil)).Elem()
}

func (i OpenpipelineV2EventsPipelinesArray) ToOpenpipelineV2EventsPipelinesArrayOutput() OpenpipelineV2EventsPipelinesArrayOutput {
	return i.ToOpenpipelineV2EventsPipelinesArrayOutputWithContext(context.Background())
}

func (i OpenpipelineV2EventsPipelinesArray) ToOpenpipelineV2EventsPipelinesArrayOutputWithContext(ctx context.Context) OpenpipelineV2EventsPipelinesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2EventsPipelinesArrayOutput)
}

// OpenpipelineV2EventsPipelinesMapInput is an input type that accepts OpenpipelineV2EventsPipelinesMap and OpenpipelineV2EventsPipelinesMapOutput values.
// You can construct a concrete instance of `OpenpipelineV2EventsPipelinesMapInput` via:
//
//	OpenpipelineV2EventsPipelinesMap{ "key": OpenpipelineV2EventsPipelinesArgs{...} }
type OpenpipelineV2EventsPipelinesMapInput interface {
	pulumi.Input

	ToOpenpipelineV2EventsPipelinesMapOutput() OpenpipelineV2EventsPipelinesMapOutput
	ToOpenpipelineV2EventsPipelinesMapOutputWithContext(context.Context) OpenpipelineV2EventsPipelinesMapOutput
}

type OpenpipelineV2EventsPipelinesMap map[string]OpenpipelineV2EventsPipelinesInput

func (OpenpipelineV2EventsPipelinesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2EventsPipelines)(nil)).Elem()
}

func (i OpenpipelineV2EventsPipelinesMap) ToOpenpipelineV2EventsPipelinesMapOutput() OpenpipelineV2EventsPipelinesMapOutput {
	return i.ToOpenpipelineV2EventsPipelinesMapOutputWithContext(context.Background())
}

func (i OpenpipelineV2EventsPipelinesMap) ToOpenpipelineV2EventsPipelinesMapOutputWithContext(ctx context.Context) OpenpipelineV2EventsPipelinesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2EventsPipelinesMapOutput)
}

type OpenpipelineV2EventsPipelinesOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2EventsPipelinesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2EventsPipelines)(nil)).Elem()
}

func (o OpenpipelineV2EventsPipelinesOutput) ToOpenpipelineV2EventsPipelinesOutput() OpenpipelineV2EventsPipelinesOutput {
	return o
}

func (o OpenpipelineV2EventsPipelinesOutput) ToOpenpipelineV2EventsPipelinesOutputWithContext(ctx context.Context) OpenpipelineV2EventsPipelinesOutput {
	return o
}

// Cost allocation stage
func (o OpenpipelineV2EventsPipelinesOutput) CostAllocation() OpenpipelineV2EventsPipelinesCostAllocationOutput {
	return o.ApplyT(func(v *OpenpipelineV2EventsPipelines) OpenpipelineV2EventsPipelinesCostAllocationOutput {
		return v.CostAllocation
	}).(OpenpipelineV2EventsPipelinesCostAllocationOutput)
}

// Custom pipeline id
func (o OpenpipelineV2EventsPipelinesOutput) CustomId() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenpipelineV2EventsPipelines) pulumi.StringOutput { return v.CustomId }).(pulumi.StringOutput)
}

// Data extraction stage
func (o OpenpipelineV2EventsPipelinesOutput) DataExtraction() OpenpipelineV2EventsPipelinesDataExtractionOutput {
	return o.ApplyT(func(v *OpenpipelineV2EventsPipelines) OpenpipelineV2EventsPipelinesDataExtractionOutput {
		return v.DataExtraction
	}).(OpenpipelineV2EventsPipelinesDataExtractionOutput)
}

// Davis event extraction stage
func (o OpenpipelineV2EventsPipelinesOutput) Davis() OpenpipelineV2EventsPipelinesDavisOutput {
	return o.ApplyT(func(v *OpenpipelineV2EventsPipelines) OpenpipelineV2EventsPipelinesDavisOutput { return v.Davis }).(OpenpipelineV2EventsPipelinesDavisOutput)
}

// Display name
func (o OpenpipelineV2EventsPipelinesOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenpipelineV2EventsPipelines) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Metrics extraction stage
func (o OpenpipelineV2EventsPipelinesOutput) MetricExtraction() OpenpipelineV2EventsPipelinesMetricExtractionOutput {
	return o.ApplyT(func(v *OpenpipelineV2EventsPipelines) OpenpipelineV2EventsPipelinesMetricExtractionOutput {
		return v.MetricExtraction
	}).(OpenpipelineV2EventsPipelinesMetricExtractionOutput)
}

// Processing stage
func (o OpenpipelineV2EventsPipelinesOutput) Processing() OpenpipelineV2EventsPipelinesProcessingOutput {
	return o.ApplyT(func(v *OpenpipelineV2EventsPipelines) OpenpipelineV2EventsPipelinesProcessingOutput {
		return v.Processing
	}).(OpenpipelineV2EventsPipelinesProcessingOutput)
}

// Product allocation stage
func (o OpenpipelineV2EventsPipelinesOutput) ProductAllocation() OpenpipelineV2EventsPipelinesProductAllocationOutput {
	return o.ApplyT(func(v *OpenpipelineV2EventsPipelines) OpenpipelineV2EventsPipelinesProductAllocationOutput {
		return v.ProductAllocation
	}).(OpenpipelineV2EventsPipelinesProductAllocationOutput)
}

// Security context stage
func (o OpenpipelineV2EventsPipelinesOutput) SecurityContext() OpenpipelineV2EventsPipelinesSecurityContextOutput {
	return o.ApplyT(func(v *OpenpipelineV2EventsPipelines) OpenpipelineV2EventsPipelinesSecurityContextOutput {
		return v.SecurityContext
	}).(OpenpipelineV2EventsPipelinesSecurityContextOutput)
}

// Storage stage
func (o OpenpipelineV2EventsPipelinesOutput) Storage() OpenpipelineV2EventsPipelinesStorageOutput {
	return o.ApplyT(func(v *OpenpipelineV2EventsPipelines) OpenpipelineV2EventsPipelinesStorageOutput { return v.Storage }).(OpenpipelineV2EventsPipelinesStorageOutput)
}

type OpenpipelineV2EventsPipelinesArrayOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2EventsPipelinesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2EventsPipelines)(nil)).Elem()
}

func (o OpenpipelineV2EventsPipelinesArrayOutput) ToOpenpipelineV2EventsPipelinesArrayOutput() OpenpipelineV2EventsPipelinesArrayOutput {
	return o
}

func (o OpenpipelineV2EventsPipelinesArrayOutput) ToOpenpipelineV2EventsPipelinesArrayOutputWithContext(ctx context.Context) OpenpipelineV2EventsPipelinesArrayOutput {
	return o
}

func (o OpenpipelineV2EventsPipelinesArrayOutput) Index(i pulumi.IntInput) OpenpipelineV2EventsPipelinesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenpipelineV2EventsPipelines {
		return vs[0].([]*OpenpipelineV2EventsPipelines)[vs[1].(int)]
	}).(OpenpipelineV2EventsPipelinesOutput)
}

type OpenpipelineV2EventsPipelinesMapOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2EventsPipelinesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2EventsPipelines)(nil)).Elem()
}

func (o OpenpipelineV2EventsPipelinesMapOutput) ToOpenpipelineV2EventsPipelinesMapOutput() OpenpipelineV2EventsPipelinesMapOutput {
	return o
}

func (o OpenpipelineV2EventsPipelinesMapOutput) ToOpenpipelineV2EventsPipelinesMapOutputWithContext(ctx context.Context) OpenpipelineV2EventsPipelinesMapOutput {
	return o
}

func (o OpenpipelineV2EventsPipelinesMapOutput) MapIndex(k pulumi.StringInput) OpenpipelineV2EventsPipelinesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenpipelineV2EventsPipelines {
		return vs[0].(map[string]*OpenpipelineV2EventsPipelines)[vs[1].(string)]
	}).(OpenpipelineV2EventsPipelinesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2EventsPipelinesInput)(nil)).Elem(), &OpenpipelineV2EventsPipelines{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2EventsPipelinesArrayInput)(nil)).Elem(), OpenpipelineV2EventsPipelinesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2EventsPipelinesMapInput)(nil)).Elem(), OpenpipelineV2EventsPipelinesMap{})
	pulumi.RegisterOutputType(OpenpipelineV2EventsPipelinesOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2EventsPipelinesArrayOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2EventsPipelinesMapOutput{})
}
