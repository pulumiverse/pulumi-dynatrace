// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type GitlabConnection struct {
	pulumi.CustomResourceState

	// A unique and clearly identifiable connection name to your GitLab instance.
	Name pulumi.StringOutput `pulumi:"name"`
	// The GitLab token to use for authentication. Please note that this token is not refreshed and can expire.
	Token pulumi.StringOutput `pulumi:"token"`
	// The GitLab URL instance you want to connect. For example, https://gitlab.com
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewGitlabConnection registers a new resource with the given unique name, arguments, and options.
func NewGitlabConnection(ctx *pulumi.Context,
	name string, args *GitlabConnectionArgs, opts ...pulumi.ResourceOption) (*GitlabConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Token == nil {
		return nil, errors.New("invalid value for required argument 'Token'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	if args.Token != nil {
		args.Token = pulumi.ToSecret(args.Token).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"token",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GitlabConnection
	err := ctx.RegisterResource("dynatrace:index/gitlabConnection:GitlabConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGitlabConnection gets an existing GitlabConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGitlabConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GitlabConnectionState, opts ...pulumi.ResourceOption) (*GitlabConnection, error) {
	var resource GitlabConnection
	err := ctx.ReadResource("dynatrace:index/gitlabConnection:GitlabConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GitlabConnection resources.
type gitlabConnectionState struct {
	// A unique and clearly identifiable connection name to your GitLab instance.
	Name *string `pulumi:"name"`
	// The GitLab token to use for authentication. Please note that this token is not refreshed and can expire.
	Token *string `pulumi:"token"`
	// The GitLab URL instance you want to connect. For example, https://gitlab.com
	Url *string `pulumi:"url"`
}

type GitlabConnectionState struct {
	// A unique and clearly identifiable connection name to your GitLab instance.
	Name pulumi.StringPtrInput
	// The GitLab token to use for authentication. Please note that this token is not refreshed and can expire.
	Token pulumi.StringPtrInput
	// The GitLab URL instance you want to connect. For example, https://gitlab.com
	Url pulumi.StringPtrInput
}

func (GitlabConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*gitlabConnectionState)(nil)).Elem()
}

type gitlabConnectionArgs struct {
	// A unique and clearly identifiable connection name to your GitLab instance.
	Name *string `pulumi:"name"`
	// The GitLab token to use for authentication. Please note that this token is not refreshed and can expire.
	Token string `pulumi:"token"`
	// The GitLab URL instance you want to connect. For example, https://gitlab.com
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a GitlabConnection resource.
type GitlabConnectionArgs struct {
	// A unique and clearly identifiable connection name to your GitLab instance.
	Name pulumi.StringPtrInput
	// The GitLab token to use for authentication. Please note that this token is not refreshed and can expire.
	Token pulumi.StringInput
	// The GitLab URL instance you want to connect. For example, https://gitlab.com
	Url pulumi.StringInput
}

func (GitlabConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gitlabConnectionArgs)(nil)).Elem()
}

type GitlabConnectionInput interface {
	pulumi.Input

	ToGitlabConnectionOutput() GitlabConnectionOutput
	ToGitlabConnectionOutputWithContext(ctx context.Context) GitlabConnectionOutput
}

func (*GitlabConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**GitlabConnection)(nil)).Elem()
}

func (i *GitlabConnection) ToGitlabConnectionOutput() GitlabConnectionOutput {
	return i.ToGitlabConnectionOutputWithContext(context.Background())
}

func (i *GitlabConnection) ToGitlabConnectionOutputWithContext(ctx context.Context) GitlabConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitlabConnectionOutput)
}

// GitlabConnectionArrayInput is an input type that accepts GitlabConnectionArray and GitlabConnectionArrayOutput values.
// You can construct a concrete instance of `GitlabConnectionArrayInput` via:
//
//	GitlabConnectionArray{ GitlabConnectionArgs{...} }
type GitlabConnectionArrayInput interface {
	pulumi.Input

	ToGitlabConnectionArrayOutput() GitlabConnectionArrayOutput
	ToGitlabConnectionArrayOutputWithContext(context.Context) GitlabConnectionArrayOutput
}

type GitlabConnectionArray []GitlabConnectionInput

func (GitlabConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitlabConnection)(nil)).Elem()
}

func (i GitlabConnectionArray) ToGitlabConnectionArrayOutput() GitlabConnectionArrayOutput {
	return i.ToGitlabConnectionArrayOutputWithContext(context.Background())
}

func (i GitlabConnectionArray) ToGitlabConnectionArrayOutputWithContext(ctx context.Context) GitlabConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitlabConnectionArrayOutput)
}

// GitlabConnectionMapInput is an input type that accepts GitlabConnectionMap and GitlabConnectionMapOutput values.
// You can construct a concrete instance of `GitlabConnectionMapInput` via:
//
//	GitlabConnectionMap{ "key": GitlabConnectionArgs{...} }
type GitlabConnectionMapInput interface {
	pulumi.Input

	ToGitlabConnectionMapOutput() GitlabConnectionMapOutput
	ToGitlabConnectionMapOutputWithContext(context.Context) GitlabConnectionMapOutput
}

type GitlabConnectionMap map[string]GitlabConnectionInput

func (GitlabConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitlabConnection)(nil)).Elem()
}

func (i GitlabConnectionMap) ToGitlabConnectionMapOutput() GitlabConnectionMapOutput {
	return i.ToGitlabConnectionMapOutputWithContext(context.Background())
}

func (i GitlabConnectionMap) ToGitlabConnectionMapOutputWithContext(ctx context.Context) GitlabConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitlabConnectionMapOutput)
}

type GitlabConnectionOutput struct{ *pulumi.OutputState }

func (GitlabConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitlabConnection)(nil)).Elem()
}

func (o GitlabConnectionOutput) ToGitlabConnectionOutput() GitlabConnectionOutput {
	return o
}

func (o GitlabConnectionOutput) ToGitlabConnectionOutputWithContext(ctx context.Context) GitlabConnectionOutput {
	return o
}

// A unique and clearly identifiable connection name to your GitLab instance.
func (o GitlabConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GitlabConnection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The GitLab token to use for authentication. Please note that this token is not refreshed and can expire.
func (o GitlabConnectionOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *GitlabConnection) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

// The GitLab URL instance you want to connect. For example, https://gitlab.com
func (o GitlabConnectionOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *GitlabConnection) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type GitlabConnectionArrayOutput struct{ *pulumi.OutputState }

func (GitlabConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitlabConnection)(nil)).Elem()
}

func (o GitlabConnectionArrayOutput) ToGitlabConnectionArrayOutput() GitlabConnectionArrayOutput {
	return o
}

func (o GitlabConnectionArrayOutput) ToGitlabConnectionArrayOutputWithContext(ctx context.Context) GitlabConnectionArrayOutput {
	return o
}

func (o GitlabConnectionArrayOutput) Index(i pulumi.IntInput) GitlabConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GitlabConnection {
		return vs[0].([]*GitlabConnection)[vs[1].(int)]
	}).(GitlabConnectionOutput)
}

type GitlabConnectionMapOutput struct{ *pulumi.OutputState }

func (GitlabConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitlabConnection)(nil)).Elem()
}

func (o GitlabConnectionMapOutput) ToGitlabConnectionMapOutput() GitlabConnectionMapOutput {
	return o
}

func (o GitlabConnectionMapOutput) ToGitlabConnectionMapOutputWithContext(ctx context.Context) GitlabConnectionMapOutput {
	return o
}

func (o GitlabConnectionMapOutput) MapIndex(k pulumi.StringInput) GitlabConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GitlabConnection {
		return vs[0].(map[string]*GitlabConnection)[vs[1].(string)]
	}).(GitlabConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GitlabConnectionInput)(nil)).Elem(), &GitlabConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitlabConnectionArrayInput)(nil)).Elem(), GitlabConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitlabConnectionMapInput)(nil)).Elem(), GitlabConnectionMap{})
	pulumi.RegisterOutputType(GitlabConnectionOutput{})
	pulumi.RegisterOutputType(GitlabConnectionArrayOutput{})
	pulumi.RegisterOutputType(GitlabConnectionMapOutput{})
}
