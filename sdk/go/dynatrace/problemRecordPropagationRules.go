// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type ProblemRecordPropagationRules struct {
	pulumi.CustomResourceState

	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Attribute key from the event that will be propagated.
	SourceAttributeKey pulumi.StringOutput `pulumi:"sourceAttributeKey"`
	// Attribute key under which the propagated event data will be stored on the problem.
	TargetAttributeKey pulumi.StringOutput `pulumi:"targetAttributeKey"`
}

// NewProblemRecordPropagationRules registers a new resource with the given unique name, arguments, and options.
func NewProblemRecordPropagationRules(ctx *pulumi.Context,
	name string, args *ProblemRecordPropagationRulesArgs, opts ...pulumi.ResourceOption) (*ProblemRecordPropagationRules, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.SourceAttributeKey == nil {
		return nil, errors.New("invalid value for required argument 'SourceAttributeKey'")
	}
	if args.TargetAttributeKey == nil {
		return nil, errors.New("invalid value for required argument 'TargetAttributeKey'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProblemRecordPropagationRules
	err := ctx.RegisterResource("dynatrace:index/problemRecordPropagationRules:ProblemRecordPropagationRules", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProblemRecordPropagationRules gets an existing ProblemRecordPropagationRules resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProblemRecordPropagationRules(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProblemRecordPropagationRulesState, opts ...pulumi.ResourceOption) (*ProblemRecordPropagationRules, error) {
	var resource ProblemRecordPropagationRules
	err := ctx.ReadResource("dynatrace:index/problemRecordPropagationRules:ProblemRecordPropagationRules", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProblemRecordPropagationRules resources.
type problemRecordPropagationRulesState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// Attribute key from the event that will be propagated.
	SourceAttributeKey *string `pulumi:"sourceAttributeKey"`
	// Attribute key under which the propagated event data will be stored on the problem.
	TargetAttributeKey *string `pulumi:"targetAttributeKey"`
}

type ProblemRecordPropagationRulesState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// Attribute key from the event that will be propagated.
	SourceAttributeKey pulumi.StringPtrInput
	// Attribute key under which the propagated event data will be stored on the problem.
	TargetAttributeKey pulumi.StringPtrInput
}

func (ProblemRecordPropagationRulesState) ElementType() reflect.Type {
	return reflect.TypeOf((*problemRecordPropagationRulesState)(nil)).Elem()
}

type problemRecordPropagationRulesArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// Attribute key from the event that will be propagated.
	SourceAttributeKey string `pulumi:"sourceAttributeKey"`
	// Attribute key under which the propagated event data will be stored on the problem.
	TargetAttributeKey string `pulumi:"targetAttributeKey"`
}

// The set of arguments for constructing a ProblemRecordPropagationRules resource.
type ProblemRecordPropagationRulesArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// Attribute key from the event that will be propagated.
	SourceAttributeKey pulumi.StringInput
	// Attribute key under which the propagated event data will be stored on the problem.
	TargetAttributeKey pulumi.StringInput
}

func (ProblemRecordPropagationRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*problemRecordPropagationRulesArgs)(nil)).Elem()
}

type ProblemRecordPropagationRulesInput interface {
	pulumi.Input

	ToProblemRecordPropagationRulesOutput() ProblemRecordPropagationRulesOutput
	ToProblemRecordPropagationRulesOutputWithContext(ctx context.Context) ProblemRecordPropagationRulesOutput
}

func (*ProblemRecordPropagationRules) ElementType() reflect.Type {
	return reflect.TypeOf((**ProblemRecordPropagationRules)(nil)).Elem()
}

func (i *ProblemRecordPropagationRules) ToProblemRecordPropagationRulesOutput() ProblemRecordPropagationRulesOutput {
	return i.ToProblemRecordPropagationRulesOutputWithContext(context.Background())
}

func (i *ProblemRecordPropagationRules) ToProblemRecordPropagationRulesOutputWithContext(ctx context.Context) ProblemRecordPropagationRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProblemRecordPropagationRulesOutput)
}

// ProblemRecordPropagationRulesArrayInput is an input type that accepts ProblemRecordPropagationRulesArray and ProblemRecordPropagationRulesArrayOutput values.
// You can construct a concrete instance of `ProblemRecordPropagationRulesArrayInput` via:
//
//	ProblemRecordPropagationRulesArray{ ProblemRecordPropagationRulesArgs{...} }
type ProblemRecordPropagationRulesArrayInput interface {
	pulumi.Input

	ToProblemRecordPropagationRulesArrayOutput() ProblemRecordPropagationRulesArrayOutput
	ToProblemRecordPropagationRulesArrayOutputWithContext(context.Context) ProblemRecordPropagationRulesArrayOutput
}

type ProblemRecordPropagationRulesArray []ProblemRecordPropagationRulesInput

func (ProblemRecordPropagationRulesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProblemRecordPropagationRules)(nil)).Elem()
}

func (i ProblemRecordPropagationRulesArray) ToProblemRecordPropagationRulesArrayOutput() ProblemRecordPropagationRulesArrayOutput {
	return i.ToProblemRecordPropagationRulesArrayOutputWithContext(context.Background())
}

func (i ProblemRecordPropagationRulesArray) ToProblemRecordPropagationRulesArrayOutputWithContext(ctx context.Context) ProblemRecordPropagationRulesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProblemRecordPropagationRulesArrayOutput)
}

// ProblemRecordPropagationRulesMapInput is an input type that accepts ProblemRecordPropagationRulesMap and ProblemRecordPropagationRulesMapOutput values.
// You can construct a concrete instance of `ProblemRecordPropagationRulesMapInput` via:
//
//	ProblemRecordPropagationRulesMap{ "key": ProblemRecordPropagationRulesArgs{...} }
type ProblemRecordPropagationRulesMapInput interface {
	pulumi.Input

	ToProblemRecordPropagationRulesMapOutput() ProblemRecordPropagationRulesMapOutput
	ToProblemRecordPropagationRulesMapOutputWithContext(context.Context) ProblemRecordPropagationRulesMapOutput
}

type ProblemRecordPropagationRulesMap map[string]ProblemRecordPropagationRulesInput

func (ProblemRecordPropagationRulesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProblemRecordPropagationRules)(nil)).Elem()
}

func (i ProblemRecordPropagationRulesMap) ToProblemRecordPropagationRulesMapOutput() ProblemRecordPropagationRulesMapOutput {
	return i.ToProblemRecordPropagationRulesMapOutputWithContext(context.Background())
}

func (i ProblemRecordPropagationRulesMap) ToProblemRecordPropagationRulesMapOutputWithContext(ctx context.Context) ProblemRecordPropagationRulesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProblemRecordPropagationRulesMapOutput)
}

type ProblemRecordPropagationRulesOutput struct{ *pulumi.OutputState }

func (ProblemRecordPropagationRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProblemRecordPropagationRules)(nil)).Elem()
}

func (o ProblemRecordPropagationRulesOutput) ToProblemRecordPropagationRulesOutput() ProblemRecordPropagationRulesOutput {
	return o
}

func (o ProblemRecordPropagationRulesOutput) ToProblemRecordPropagationRulesOutputWithContext(ctx context.Context) ProblemRecordPropagationRulesOutput {
	return o
}

// This setting is enabled (`true`) or disabled (`false`)
func (o ProblemRecordPropagationRulesOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProblemRecordPropagationRules) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Attribute key from the event that will be propagated.
func (o ProblemRecordPropagationRulesOutput) SourceAttributeKey() pulumi.StringOutput {
	return o.ApplyT(func(v *ProblemRecordPropagationRules) pulumi.StringOutput { return v.SourceAttributeKey }).(pulumi.StringOutput)
}

// Attribute key under which the propagated event data will be stored on the problem.
func (o ProblemRecordPropagationRulesOutput) TargetAttributeKey() pulumi.StringOutput {
	return o.ApplyT(func(v *ProblemRecordPropagationRules) pulumi.StringOutput { return v.TargetAttributeKey }).(pulumi.StringOutput)
}

type ProblemRecordPropagationRulesArrayOutput struct{ *pulumi.OutputState }

func (ProblemRecordPropagationRulesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProblemRecordPropagationRules)(nil)).Elem()
}

func (o ProblemRecordPropagationRulesArrayOutput) ToProblemRecordPropagationRulesArrayOutput() ProblemRecordPropagationRulesArrayOutput {
	return o
}

func (o ProblemRecordPropagationRulesArrayOutput) ToProblemRecordPropagationRulesArrayOutputWithContext(ctx context.Context) ProblemRecordPropagationRulesArrayOutput {
	return o
}

func (o ProblemRecordPropagationRulesArrayOutput) Index(i pulumi.IntInput) ProblemRecordPropagationRulesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProblemRecordPropagationRules {
		return vs[0].([]*ProblemRecordPropagationRules)[vs[1].(int)]
	}).(ProblemRecordPropagationRulesOutput)
}

type ProblemRecordPropagationRulesMapOutput struct{ *pulumi.OutputState }

func (ProblemRecordPropagationRulesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProblemRecordPropagationRules)(nil)).Elem()
}

func (o ProblemRecordPropagationRulesMapOutput) ToProblemRecordPropagationRulesMapOutput() ProblemRecordPropagationRulesMapOutput {
	return o
}

func (o ProblemRecordPropagationRulesMapOutput) ToProblemRecordPropagationRulesMapOutputWithContext(ctx context.Context) ProblemRecordPropagationRulesMapOutput {
	return o
}

func (o ProblemRecordPropagationRulesMapOutput) MapIndex(k pulumi.StringInput) ProblemRecordPropagationRulesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProblemRecordPropagationRules {
		return vs[0].(map[string]*ProblemRecordPropagationRules)[vs[1].(string)]
	}).(ProblemRecordPropagationRulesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProblemRecordPropagationRulesInput)(nil)).Elem(), &ProblemRecordPropagationRules{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProblemRecordPropagationRulesArrayInput)(nil)).Elem(), ProblemRecordPropagationRulesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProblemRecordPropagationRulesMapInput)(nil)).Elem(), ProblemRecordPropagationRulesMap{})
	pulumi.RegisterOutputType(ProblemRecordPropagationRulesOutput{})
	pulumi.RegisterOutputType(ProblemRecordPropagationRulesArrayOutput{})
	pulumi.RegisterOutputType(ProblemRecordPropagationRulesMapOutput{})
}
