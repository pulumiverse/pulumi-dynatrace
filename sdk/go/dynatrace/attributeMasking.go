// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type AttributeMasking struct {
	pulumi.CustomResourceState

	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Key of the attribute
	Key pulumi.StringOutput `pulumi:"key"`
	// Possible Values: `MASK_ENTIRE_VALUE`, `MASK_ONLY_CONFIDENTIAL_DATA`
	Masking pulumi.StringOutput `pulumi:"masking"`
}

// NewAttributeMasking registers a new resource with the given unique name, arguments, and options.
func NewAttributeMasking(ctx *pulumi.Context,
	name string, args *AttributeMaskingArgs, opts ...pulumi.ResourceOption) (*AttributeMasking, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.Masking == nil {
		return nil, errors.New("invalid value for required argument 'Masking'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AttributeMasking
	err := ctx.RegisterResource("dynatrace:index/attributeMasking:AttributeMasking", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAttributeMasking gets an existing AttributeMasking resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAttributeMasking(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AttributeMaskingState, opts ...pulumi.ResourceOption) (*AttributeMasking, error) {
	var resource AttributeMasking
	err := ctx.ReadResource("dynatrace:index/attributeMasking:AttributeMasking", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AttributeMasking resources.
type attributeMaskingState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// Key of the attribute
	Key *string `pulumi:"key"`
	// Possible Values: `MASK_ENTIRE_VALUE`, `MASK_ONLY_CONFIDENTIAL_DATA`
	Masking *string `pulumi:"masking"`
}

type AttributeMaskingState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// Key of the attribute
	Key pulumi.StringPtrInput
	// Possible Values: `MASK_ENTIRE_VALUE`, `MASK_ONLY_CONFIDENTIAL_DATA`
	Masking pulumi.StringPtrInput
}

func (AttributeMaskingState) ElementType() reflect.Type {
	return reflect.TypeOf((*attributeMaskingState)(nil)).Elem()
}

type attributeMaskingArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// Key of the attribute
	Key string `pulumi:"key"`
	// Possible Values: `MASK_ENTIRE_VALUE`, `MASK_ONLY_CONFIDENTIAL_DATA`
	Masking string `pulumi:"masking"`
}

// The set of arguments for constructing a AttributeMasking resource.
type AttributeMaskingArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// Key of the attribute
	Key pulumi.StringInput
	// Possible Values: `MASK_ENTIRE_VALUE`, `MASK_ONLY_CONFIDENTIAL_DATA`
	Masking pulumi.StringInput
}

func (AttributeMaskingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*attributeMaskingArgs)(nil)).Elem()
}

type AttributeMaskingInput interface {
	pulumi.Input

	ToAttributeMaskingOutput() AttributeMaskingOutput
	ToAttributeMaskingOutputWithContext(ctx context.Context) AttributeMaskingOutput
}

func (*AttributeMasking) ElementType() reflect.Type {
	return reflect.TypeOf((**AttributeMasking)(nil)).Elem()
}

func (i *AttributeMasking) ToAttributeMaskingOutput() AttributeMaskingOutput {
	return i.ToAttributeMaskingOutputWithContext(context.Background())
}

func (i *AttributeMasking) ToAttributeMaskingOutputWithContext(ctx context.Context) AttributeMaskingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttributeMaskingOutput)
}

// AttributeMaskingArrayInput is an input type that accepts AttributeMaskingArray and AttributeMaskingArrayOutput values.
// You can construct a concrete instance of `AttributeMaskingArrayInput` via:
//
//	AttributeMaskingArray{ AttributeMaskingArgs{...} }
type AttributeMaskingArrayInput interface {
	pulumi.Input

	ToAttributeMaskingArrayOutput() AttributeMaskingArrayOutput
	ToAttributeMaskingArrayOutputWithContext(context.Context) AttributeMaskingArrayOutput
}

type AttributeMaskingArray []AttributeMaskingInput

func (AttributeMaskingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AttributeMasking)(nil)).Elem()
}

func (i AttributeMaskingArray) ToAttributeMaskingArrayOutput() AttributeMaskingArrayOutput {
	return i.ToAttributeMaskingArrayOutputWithContext(context.Background())
}

func (i AttributeMaskingArray) ToAttributeMaskingArrayOutputWithContext(ctx context.Context) AttributeMaskingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttributeMaskingArrayOutput)
}

// AttributeMaskingMapInput is an input type that accepts AttributeMaskingMap and AttributeMaskingMapOutput values.
// You can construct a concrete instance of `AttributeMaskingMapInput` via:
//
//	AttributeMaskingMap{ "key": AttributeMaskingArgs{...} }
type AttributeMaskingMapInput interface {
	pulumi.Input

	ToAttributeMaskingMapOutput() AttributeMaskingMapOutput
	ToAttributeMaskingMapOutputWithContext(context.Context) AttributeMaskingMapOutput
}

type AttributeMaskingMap map[string]AttributeMaskingInput

func (AttributeMaskingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AttributeMasking)(nil)).Elem()
}

func (i AttributeMaskingMap) ToAttributeMaskingMapOutput() AttributeMaskingMapOutput {
	return i.ToAttributeMaskingMapOutputWithContext(context.Background())
}

func (i AttributeMaskingMap) ToAttributeMaskingMapOutputWithContext(ctx context.Context) AttributeMaskingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttributeMaskingMapOutput)
}

type AttributeMaskingOutput struct{ *pulumi.OutputState }

func (AttributeMaskingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AttributeMasking)(nil)).Elem()
}

func (o AttributeMaskingOutput) ToAttributeMaskingOutput() AttributeMaskingOutput {
	return o
}

func (o AttributeMaskingOutput) ToAttributeMaskingOutputWithContext(ctx context.Context) AttributeMaskingOutput {
	return o
}

// This setting is enabled (`true`) or disabled (`false`)
func (o AttributeMaskingOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *AttributeMasking) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Key of the attribute
func (o AttributeMaskingOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *AttributeMasking) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// Possible Values: `MASK_ENTIRE_VALUE`, `MASK_ONLY_CONFIDENTIAL_DATA`
func (o AttributeMaskingOutput) Masking() pulumi.StringOutput {
	return o.ApplyT(func(v *AttributeMasking) pulumi.StringOutput { return v.Masking }).(pulumi.StringOutput)
}

type AttributeMaskingArrayOutput struct{ *pulumi.OutputState }

func (AttributeMaskingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AttributeMasking)(nil)).Elem()
}

func (o AttributeMaskingArrayOutput) ToAttributeMaskingArrayOutput() AttributeMaskingArrayOutput {
	return o
}

func (o AttributeMaskingArrayOutput) ToAttributeMaskingArrayOutputWithContext(ctx context.Context) AttributeMaskingArrayOutput {
	return o
}

func (o AttributeMaskingArrayOutput) Index(i pulumi.IntInput) AttributeMaskingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AttributeMasking {
		return vs[0].([]*AttributeMasking)[vs[1].(int)]
	}).(AttributeMaskingOutput)
}

type AttributeMaskingMapOutput struct{ *pulumi.OutputState }

func (AttributeMaskingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AttributeMasking)(nil)).Elem()
}

func (o AttributeMaskingMapOutput) ToAttributeMaskingMapOutput() AttributeMaskingMapOutput {
	return o
}

func (o AttributeMaskingMapOutput) ToAttributeMaskingMapOutputWithContext(ctx context.Context) AttributeMaskingMapOutput {
	return o
}

func (o AttributeMaskingMapOutput) MapIndex(k pulumi.StringInput) AttributeMaskingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AttributeMasking {
		return vs[0].(map[string]*AttributeMasking)[vs[1].(string)]
	}).(AttributeMaskingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AttributeMaskingInput)(nil)).Elem(), &AttributeMasking{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttributeMaskingArrayInput)(nil)).Elem(), AttributeMaskingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttributeMaskingMapInput)(nil)).Elem(), AttributeMaskingMap{})
	pulumi.RegisterOutputType(AttributeMaskingOutput{})
	pulumi.RegisterOutputType(AttributeMaskingArrayOutput{})
	pulumi.RegisterOutputType(AttributeMaskingMapOutput{})
}
