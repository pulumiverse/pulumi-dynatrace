// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type PlatformBucket struct {
	pulumi.CustomResourceState

	// The name of the bucket definition when visualized within the UI
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// The name / id of the bucket definition
	Name pulumi.StringOutput `pulumi:"name"`
	// The retention of stored data in days
	Retention pulumi.IntOutput `pulumi:"retention"`
	// The status of the bucket definition. Usually has the value `active` unless an update or delete is currently happening
	Status pulumi.StringOutput `pulumi:"status"`
	// The table the bucket definition applies to. Possible values are `logs`, `spans`,	`events` and `bizevents`. Changing this attribute will result in deleting and re-creating the bucket definition
	Table pulumi.StringOutput `pulumi:"table"`
}

// NewPlatformBucket registers a new resource with the given unique name, arguments, and options.
func NewPlatformBucket(ctx *pulumi.Context,
	name string, args *PlatformBucketArgs, opts ...pulumi.ResourceOption) (*PlatformBucket, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Retention == nil {
		return nil, errors.New("invalid value for required argument 'Retention'")
	}
	if args.Table == nil {
		return nil, errors.New("invalid value for required argument 'Table'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PlatformBucket
	err := ctx.RegisterResource("dynatrace:index/platformBucket:PlatformBucket", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPlatformBucket gets an existing PlatformBucket resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPlatformBucket(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PlatformBucketState, opts ...pulumi.ResourceOption) (*PlatformBucket, error) {
	var resource PlatformBucket
	err := ctx.ReadResource("dynatrace:index/platformBucket:PlatformBucket", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PlatformBucket resources.
type platformBucketState struct {
	// The name of the bucket definition when visualized within the UI
	DisplayName *string `pulumi:"displayName"`
	// The name / id of the bucket definition
	Name *string `pulumi:"name"`
	// The retention of stored data in days
	Retention *int `pulumi:"retention"`
	// The status of the bucket definition. Usually has the value `active` unless an update or delete is currently happening
	Status *string `pulumi:"status"`
	// The table the bucket definition applies to. Possible values are `logs`, `spans`,	`events` and `bizevents`. Changing this attribute will result in deleting and re-creating the bucket definition
	Table *string `pulumi:"table"`
}

type PlatformBucketState struct {
	// The name of the bucket definition when visualized within the UI
	DisplayName pulumi.StringPtrInput
	// The name / id of the bucket definition
	Name pulumi.StringPtrInput
	// The retention of stored data in days
	Retention pulumi.IntPtrInput
	// The status of the bucket definition. Usually has the value `active` unless an update or delete is currently happening
	Status pulumi.StringPtrInput
	// The table the bucket definition applies to. Possible values are `logs`, `spans`,	`events` and `bizevents`. Changing this attribute will result in deleting and re-creating the bucket definition
	Table pulumi.StringPtrInput
}

func (PlatformBucketState) ElementType() reflect.Type {
	return reflect.TypeOf((*platformBucketState)(nil)).Elem()
}

type platformBucketArgs struct {
	// The name of the bucket definition when visualized within the UI
	DisplayName *string `pulumi:"displayName"`
	// The name / id of the bucket definition
	Name *string `pulumi:"name"`
	// The retention of stored data in days
	Retention int `pulumi:"retention"`
	// The table the bucket definition applies to. Possible values are `logs`, `spans`,	`events` and `bizevents`. Changing this attribute will result in deleting and re-creating the bucket definition
	Table string `pulumi:"table"`
}

// The set of arguments for constructing a PlatformBucket resource.
type PlatformBucketArgs struct {
	// The name of the bucket definition when visualized within the UI
	DisplayName pulumi.StringPtrInput
	// The name / id of the bucket definition
	Name pulumi.StringPtrInput
	// The retention of stored data in days
	Retention pulumi.IntInput
	// The table the bucket definition applies to. Possible values are `logs`, `spans`,	`events` and `bizevents`. Changing this attribute will result in deleting and re-creating the bucket definition
	Table pulumi.StringInput
}

func (PlatformBucketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*platformBucketArgs)(nil)).Elem()
}

type PlatformBucketInput interface {
	pulumi.Input

	ToPlatformBucketOutput() PlatformBucketOutput
	ToPlatformBucketOutputWithContext(ctx context.Context) PlatformBucketOutput
}

func (*PlatformBucket) ElementType() reflect.Type {
	return reflect.TypeOf((**PlatformBucket)(nil)).Elem()
}

func (i *PlatformBucket) ToPlatformBucketOutput() PlatformBucketOutput {
	return i.ToPlatformBucketOutputWithContext(context.Background())
}

func (i *PlatformBucket) ToPlatformBucketOutputWithContext(ctx context.Context) PlatformBucketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlatformBucketOutput)
}

// PlatformBucketArrayInput is an input type that accepts PlatformBucketArray and PlatformBucketArrayOutput values.
// You can construct a concrete instance of `PlatformBucketArrayInput` via:
//
//	PlatformBucketArray{ PlatformBucketArgs{...} }
type PlatformBucketArrayInput interface {
	pulumi.Input

	ToPlatformBucketArrayOutput() PlatformBucketArrayOutput
	ToPlatformBucketArrayOutputWithContext(context.Context) PlatformBucketArrayOutput
}

type PlatformBucketArray []PlatformBucketInput

func (PlatformBucketArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PlatformBucket)(nil)).Elem()
}

func (i PlatformBucketArray) ToPlatformBucketArrayOutput() PlatformBucketArrayOutput {
	return i.ToPlatformBucketArrayOutputWithContext(context.Background())
}

func (i PlatformBucketArray) ToPlatformBucketArrayOutputWithContext(ctx context.Context) PlatformBucketArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlatformBucketArrayOutput)
}

// PlatformBucketMapInput is an input type that accepts PlatformBucketMap and PlatformBucketMapOutput values.
// You can construct a concrete instance of `PlatformBucketMapInput` via:
//
//	PlatformBucketMap{ "key": PlatformBucketArgs{...} }
type PlatformBucketMapInput interface {
	pulumi.Input

	ToPlatformBucketMapOutput() PlatformBucketMapOutput
	ToPlatformBucketMapOutputWithContext(context.Context) PlatformBucketMapOutput
}

type PlatformBucketMap map[string]PlatformBucketInput

func (PlatformBucketMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PlatformBucket)(nil)).Elem()
}

func (i PlatformBucketMap) ToPlatformBucketMapOutput() PlatformBucketMapOutput {
	return i.ToPlatformBucketMapOutputWithContext(context.Background())
}

func (i PlatformBucketMap) ToPlatformBucketMapOutputWithContext(ctx context.Context) PlatformBucketMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlatformBucketMapOutput)
}

type PlatformBucketOutput struct{ *pulumi.OutputState }

func (PlatformBucketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlatformBucket)(nil)).Elem()
}

func (o PlatformBucketOutput) ToPlatformBucketOutput() PlatformBucketOutput {
	return o
}

func (o PlatformBucketOutput) ToPlatformBucketOutputWithContext(ctx context.Context) PlatformBucketOutput {
	return o
}

// The name of the bucket definition when visualized within the UI
func (o PlatformBucketOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlatformBucket) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The name / id of the bucket definition
func (o PlatformBucketOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PlatformBucket) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The retention of stored data in days
func (o PlatformBucketOutput) Retention() pulumi.IntOutput {
	return o.ApplyT(func(v *PlatformBucket) pulumi.IntOutput { return v.Retention }).(pulumi.IntOutput)
}

// The status of the bucket definition. Usually has the value `active` unless an update or delete is currently happening
func (o PlatformBucketOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *PlatformBucket) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The table the bucket definition applies to. Possible values are `logs`, `spans`,	`events` and `bizevents`. Changing this attribute will result in deleting and re-creating the bucket definition
func (o PlatformBucketOutput) Table() pulumi.StringOutput {
	return o.ApplyT(func(v *PlatformBucket) pulumi.StringOutput { return v.Table }).(pulumi.StringOutput)
}

type PlatformBucketArrayOutput struct{ *pulumi.OutputState }

func (PlatformBucketArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PlatformBucket)(nil)).Elem()
}

func (o PlatformBucketArrayOutput) ToPlatformBucketArrayOutput() PlatformBucketArrayOutput {
	return o
}

func (o PlatformBucketArrayOutput) ToPlatformBucketArrayOutputWithContext(ctx context.Context) PlatformBucketArrayOutput {
	return o
}

func (o PlatformBucketArrayOutput) Index(i pulumi.IntInput) PlatformBucketOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PlatformBucket {
		return vs[0].([]*PlatformBucket)[vs[1].(int)]
	}).(PlatformBucketOutput)
}

type PlatformBucketMapOutput struct{ *pulumi.OutputState }

func (PlatformBucketMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PlatformBucket)(nil)).Elem()
}

func (o PlatformBucketMapOutput) ToPlatformBucketMapOutput() PlatformBucketMapOutput {
	return o
}

func (o PlatformBucketMapOutput) ToPlatformBucketMapOutputWithContext(ctx context.Context) PlatformBucketMapOutput {
	return o
}

func (o PlatformBucketMapOutput) MapIndex(k pulumi.StringInput) PlatformBucketOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PlatformBucket {
		return vs[0].(map[string]*PlatformBucket)[vs[1].(string)]
	}).(PlatformBucketOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PlatformBucketInput)(nil)).Elem(), &PlatformBucket{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlatformBucketArrayInput)(nil)).Elem(), PlatformBucketArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlatformBucketMapInput)(nil)).Elem(), PlatformBucketMap{})
	pulumi.RegisterOutputType(PlatformBucketOutput{})
	pulumi.RegisterOutputType(PlatformBucketArrayOutput{})
	pulumi.RegisterOutputType(PlatformBucketMapOutput{})
}
