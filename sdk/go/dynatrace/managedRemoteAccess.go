// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type ManagedRemoteAccess struct {
	pulumi.CustomResourceState

	// Request reason description, cannot be changed once created
	Reason pulumi.StringOutput `pulumi:"reason"`
	// For how many days access is requested, cannot be changed once created
	RequestedDays pulumi.IntOutput `pulumi:"requestedDays"`
	// Requested role, cannot be changed once created
	Role pulumi.StringOutput `pulumi:"role"`
	// Access request state. Automatically set as `ACCEPTED` on create, state can be changed in subsequent updates.
	State pulumi.StringPtrOutput `pulumi:"state"`
	// User id, cannot be changed once created
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewManagedRemoteAccess registers a new resource with the given unique name, arguments, and options.
func NewManagedRemoteAccess(ctx *pulumi.Context,
	name string, args *ManagedRemoteAccessArgs, opts ...pulumi.ResourceOption) (*ManagedRemoteAccess, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Reason == nil {
		return nil, errors.New("invalid value for required argument 'Reason'")
	}
	if args.RequestedDays == nil {
		return nil, errors.New("invalid value for required argument 'RequestedDays'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ManagedRemoteAccess
	err := ctx.RegisterResource("dynatrace:index/managedRemoteAccess:ManagedRemoteAccess", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedRemoteAccess gets an existing ManagedRemoteAccess resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedRemoteAccess(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedRemoteAccessState, opts ...pulumi.ResourceOption) (*ManagedRemoteAccess, error) {
	var resource ManagedRemoteAccess
	err := ctx.ReadResource("dynatrace:index/managedRemoteAccess:ManagedRemoteAccess", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedRemoteAccess resources.
type managedRemoteAccessState struct {
	// Request reason description, cannot be changed once created
	Reason *string `pulumi:"reason"`
	// For how many days access is requested, cannot be changed once created
	RequestedDays *int `pulumi:"requestedDays"`
	// Requested role, cannot be changed once created
	Role *string `pulumi:"role"`
	// Access request state. Automatically set as `ACCEPTED` on create, state can be changed in subsequent updates.
	State *string `pulumi:"state"`
	// User id, cannot be changed once created
	UserId *string `pulumi:"userId"`
}

type ManagedRemoteAccessState struct {
	// Request reason description, cannot be changed once created
	Reason pulumi.StringPtrInput
	// For how many days access is requested, cannot be changed once created
	RequestedDays pulumi.IntPtrInput
	// Requested role, cannot be changed once created
	Role pulumi.StringPtrInput
	// Access request state. Automatically set as `ACCEPTED` on create, state can be changed in subsequent updates.
	State pulumi.StringPtrInput
	// User id, cannot be changed once created
	UserId pulumi.StringPtrInput
}

func (ManagedRemoteAccessState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedRemoteAccessState)(nil)).Elem()
}

type managedRemoteAccessArgs struct {
	// Request reason description, cannot be changed once created
	Reason string `pulumi:"reason"`
	// For how many days access is requested, cannot be changed once created
	RequestedDays int `pulumi:"requestedDays"`
	// Requested role, cannot be changed once created
	Role string `pulumi:"role"`
	// Access request state. Automatically set as `ACCEPTED` on create, state can be changed in subsequent updates.
	State *string `pulumi:"state"`
	// User id, cannot be changed once created
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a ManagedRemoteAccess resource.
type ManagedRemoteAccessArgs struct {
	// Request reason description, cannot be changed once created
	Reason pulumi.StringInput
	// For how many days access is requested, cannot be changed once created
	RequestedDays pulumi.IntInput
	// Requested role, cannot be changed once created
	Role pulumi.StringInput
	// Access request state. Automatically set as `ACCEPTED` on create, state can be changed in subsequent updates.
	State pulumi.StringPtrInput
	// User id, cannot be changed once created
	UserId pulumi.StringInput
}

func (ManagedRemoteAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedRemoteAccessArgs)(nil)).Elem()
}

type ManagedRemoteAccessInput interface {
	pulumi.Input

	ToManagedRemoteAccessOutput() ManagedRemoteAccessOutput
	ToManagedRemoteAccessOutputWithContext(ctx context.Context) ManagedRemoteAccessOutput
}

func (*ManagedRemoteAccess) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedRemoteAccess)(nil)).Elem()
}

func (i *ManagedRemoteAccess) ToManagedRemoteAccessOutput() ManagedRemoteAccessOutput {
	return i.ToManagedRemoteAccessOutputWithContext(context.Background())
}

func (i *ManagedRemoteAccess) ToManagedRemoteAccessOutputWithContext(ctx context.Context) ManagedRemoteAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedRemoteAccessOutput)
}

// ManagedRemoteAccessArrayInput is an input type that accepts ManagedRemoteAccessArray and ManagedRemoteAccessArrayOutput values.
// You can construct a concrete instance of `ManagedRemoteAccessArrayInput` via:
//
//	ManagedRemoteAccessArray{ ManagedRemoteAccessArgs{...} }
type ManagedRemoteAccessArrayInput interface {
	pulumi.Input

	ToManagedRemoteAccessArrayOutput() ManagedRemoteAccessArrayOutput
	ToManagedRemoteAccessArrayOutputWithContext(context.Context) ManagedRemoteAccessArrayOutput
}

type ManagedRemoteAccessArray []ManagedRemoteAccessInput

func (ManagedRemoteAccessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedRemoteAccess)(nil)).Elem()
}

func (i ManagedRemoteAccessArray) ToManagedRemoteAccessArrayOutput() ManagedRemoteAccessArrayOutput {
	return i.ToManagedRemoteAccessArrayOutputWithContext(context.Background())
}

func (i ManagedRemoteAccessArray) ToManagedRemoteAccessArrayOutputWithContext(ctx context.Context) ManagedRemoteAccessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedRemoteAccessArrayOutput)
}

// ManagedRemoteAccessMapInput is an input type that accepts ManagedRemoteAccessMap and ManagedRemoteAccessMapOutput values.
// You can construct a concrete instance of `ManagedRemoteAccessMapInput` via:
//
//	ManagedRemoteAccessMap{ "key": ManagedRemoteAccessArgs{...} }
type ManagedRemoteAccessMapInput interface {
	pulumi.Input

	ToManagedRemoteAccessMapOutput() ManagedRemoteAccessMapOutput
	ToManagedRemoteAccessMapOutputWithContext(context.Context) ManagedRemoteAccessMapOutput
}

type ManagedRemoteAccessMap map[string]ManagedRemoteAccessInput

func (ManagedRemoteAccessMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedRemoteAccess)(nil)).Elem()
}

func (i ManagedRemoteAccessMap) ToManagedRemoteAccessMapOutput() ManagedRemoteAccessMapOutput {
	return i.ToManagedRemoteAccessMapOutputWithContext(context.Background())
}

func (i ManagedRemoteAccessMap) ToManagedRemoteAccessMapOutputWithContext(ctx context.Context) ManagedRemoteAccessMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedRemoteAccessMapOutput)
}

type ManagedRemoteAccessOutput struct{ *pulumi.OutputState }

func (ManagedRemoteAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedRemoteAccess)(nil)).Elem()
}

func (o ManagedRemoteAccessOutput) ToManagedRemoteAccessOutput() ManagedRemoteAccessOutput {
	return o
}

func (o ManagedRemoteAccessOutput) ToManagedRemoteAccessOutputWithContext(ctx context.Context) ManagedRemoteAccessOutput {
	return o
}

// Request reason description, cannot be changed once created
func (o ManagedRemoteAccessOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedRemoteAccess) pulumi.StringOutput { return v.Reason }).(pulumi.StringOutput)
}

// For how many days access is requested, cannot be changed once created
func (o ManagedRemoteAccessOutput) RequestedDays() pulumi.IntOutput {
	return o.ApplyT(func(v *ManagedRemoteAccess) pulumi.IntOutput { return v.RequestedDays }).(pulumi.IntOutput)
}

// Requested role, cannot be changed once created
func (o ManagedRemoteAccessOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedRemoteAccess) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

// Access request state. Automatically set as `ACCEPTED` on create, state can be changed in subsequent updates.
func (o ManagedRemoteAccessOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedRemoteAccess) pulumi.StringPtrOutput { return v.State }).(pulumi.StringPtrOutput)
}

// User id, cannot be changed once created
func (o ManagedRemoteAccessOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedRemoteAccess) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

type ManagedRemoteAccessArrayOutput struct{ *pulumi.OutputState }

func (ManagedRemoteAccessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedRemoteAccess)(nil)).Elem()
}

func (o ManagedRemoteAccessArrayOutput) ToManagedRemoteAccessArrayOutput() ManagedRemoteAccessArrayOutput {
	return o
}

func (o ManagedRemoteAccessArrayOutput) ToManagedRemoteAccessArrayOutputWithContext(ctx context.Context) ManagedRemoteAccessArrayOutput {
	return o
}

func (o ManagedRemoteAccessArrayOutput) Index(i pulumi.IntInput) ManagedRemoteAccessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ManagedRemoteAccess {
		return vs[0].([]*ManagedRemoteAccess)[vs[1].(int)]
	}).(ManagedRemoteAccessOutput)
}

type ManagedRemoteAccessMapOutput struct{ *pulumi.OutputState }

func (ManagedRemoteAccessMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedRemoteAccess)(nil)).Elem()
}

func (o ManagedRemoteAccessMapOutput) ToManagedRemoteAccessMapOutput() ManagedRemoteAccessMapOutput {
	return o
}

func (o ManagedRemoteAccessMapOutput) ToManagedRemoteAccessMapOutputWithContext(ctx context.Context) ManagedRemoteAccessMapOutput {
	return o
}

func (o ManagedRemoteAccessMapOutput) MapIndex(k pulumi.StringInput) ManagedRemoteAccessOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ManagedRemoteAccess {
		return vs[0].(map[string]*ManagedRemoteAccess)[vs[1].(string)]
	}).(ManagedRemoteAccessOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedRemoteAccessInput)(nil)).Elem(), &ManagedRemoteAccess{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedRemoteAccessArrayInput)(nil)).Elem(), ManagedRemoteAccessArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedRemoteAccessMapInput)(nil)).Elem(), ManagedRemoteAccessMap{})
	pulumi.RegisterOutputType(ManagedRemoteAccessOutput{})
	pulumi.RegisterOutputType(ManagedRemoteAccessArrayOutput{})
	pulumi.RegisterOutputType(ManagedRemoteAccessMapOutput{})
}
