// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type WebAppResourceCleanup struct {
	pulumi.CustomResourceState

	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringOutput `pulumi:"insertAfter"`
	// For example: *Mask journeyId*
	Name pulumi.StringOutput `pulumi:"name"`
	// For example: `(.*)(journeyId=)-?\d+(.*)`
	RegularExpression pulumi.StringOutput `pulumi:"regularExpression"`
	// For example: `$1$2\*$3`
	ReplaceWith pulumi.StringOutput `pulumi:"replaceWith"`
}

// NewWebAppResourceCleanup registers a new resource with the given unique name, arguments, and options.
func NewWebAppResourceCleanup(ctx *pulumi.Context,
	name string, args *WebAppResourceCleanupArgs, opts ...pulumi.ResourceOption) (*WebAppResourceCleanup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RegularExpression == nil {
		return nil, errors.New("invalid value for required argument 'RegularExpression'")
	}
	if args.ReplaceWith == nil {
		return nil, errors.New("invalid value for required argument 'ReplaceWith'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WebAppResourceCleanup
	err := ctx.RegisterResource("dynatrace:index/webAppResourceCleanup:WebAppResourceCleanup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebAppResourceCleanup gets an existing WebAppResourceCleanup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebAppResourceCleanup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebAppResourceCleanupState, opts ...pulumi.ResourceOption) (*WebAppResourceCleanup, error) {
	var resource WebAppResourceCleanup
	err := ctx.ReadResource("dynatrace:index/webAppResourceCleanup:WebAppResourceCleanup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WebAppResourceCleanup resources.
type webAppResourceCleanupState struct {
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `pulumi:"insertAfter"`
	// For example: *Mask journeyId*
	Name *string `pulumi:"name"`
	// For example: `(.*)(journeyId=)-?\d+(.*)`
	RegularExpression *string `pulumi:"regularExpression"`
	// For example: `$1$2\*$3`
	ReplaceWith *string `pulumi:"replaceWith"`
}

type WebAppResourceCleanupState struct {
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringPtrInput
	// For example: *Mask journeyId*
	Name pulumi.StringPtrInput
	// For example: `(.*)(journeyId=)-?\d+(.*)`
	RegularExpression pulumi.StringPtrInput
	// For example: `$1$2\*$3`
	ReplaceWith pulumi.StringPtrInput
}

func (WebAppResourceCleanupState) ElementType() reflect.Type {
	return reflect.TypeOf((*webAppResourceCleanupState)(nil)).Elem()
}

type webAppResourceCleanupArgs struct {
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `pulumi:"insertAfter"`
	// For example: *Mask journeyId*
	Name *string `pulumi:"name"`
	// For example: `(.*)(journeyId=)-?\d+(.*)`
	RegularExpression string `pulumi:"regularExpression"`
	// For example: `$1$2\*$3`
	ReplaceWith string `pulumi:"replaceWith"`
}

// The set of arguments for constructing a WebAppResourceCleanup resource.
type WebAppResourceCleanupArgs struct {
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringPtrInput
	// For example: *Mask journeyId*
	Name pulumi.StringPtrInput
	// For example: `(.*)(journeyId=)-?\d+(.*)`
	RegularExpression pulumi.StringInput
	// For example: `$1$2\*$3`
	ReplaceWith pulumi.StringInput
}

func (WebAppResourceCleanupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webAppResourceCleanupArgs)(nil)).Elem()
}

type WebAppResourceCleanupInput interface {
	pulumi.Input

	ToWebAppResourceCleanupOutput() WebAppResourceCleanupOutput
	ToWebAppResourceCleanupOutputWithContext(ctx context.Context) WebAppResourceCleanupOutput
}

func (*WebAppResourceCleanup) ElementType() reflect.Type {
	return reflect.TypeOf((**WebAppResourceCleanup)(nil)).Elem()
}

func (i *WebAppResourceCleanup) ToWebAppResourceCleanupOutput() WebAppResourceCleanupOutput {
	return i.ToWebAppResourceCleanupOutputWithContext(context.Background())
}

func (i *WebAppResourceCleanup) ToWebAppResourceCleanupOutputWithContext(ctx context.Context) WebAppResourceCleanupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAppResourceCleanupOutput)
}

// WebAppResourceCleanupArrayInput is an input type that accepts WebAppResourceCleanupArray and WebAppResourceCleanupArrayOutput values.
// You can construct a concrete instance of `WebAppResourceCleanupArrayInput` via:
//
//	WebAppResourceCleanupArray{ WebAppResourceCleanupArgs{...} }
type WebAppResourceCleanupArrayInput interface {
	pulumi.Input

	ToWebAppResourceCleanupArrayOutput() WebAppResourceCleanupArrayOutput
	ToWebAppResourceCleanupArrayOutputWithContext(context.Context) WebAppResourceCleanupArrayOutput
}

type WebAppResourceCleanupArray []WebAppResourceCleanupInput

func (WebAppResourceCleanupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebAppResourceCleanup)(nil)).Elem()
}

func (i WebAppResourceCleanupArray) ToWebAppResourceCleanupArrayOutput() WebAppResourceCleanupArrayOutput {
	return i.ToWebAppResourceCleanupArrayOutputWithContext(context.Background())
}

func (i WebAppResourceCleanupArray) ToWebAppResourceCleanupArrayOutputWithContext(ctx context.Context) WebAppResourceCleanupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAppResourceCleanupArrayOutput)
}

// WebAppResourceCleanupMapInput is an input type that accepts WebAppResourceCleanupMap and WebAppResourceCleanupMapOutput values.
// You can construct a concrete instance of `WebAppResourceCleanupMapInput` via:
//
//	WebAppResourceCleanupMap{ "key": WebAppResourceCleanupArgs{...} }
type WebAppResourceCleanupMapInput interface {
	pulumi.Input

	ToWebAppResourceCleanupMapOutput() WebAppResourceCleanupMapOutput
	ToWebAppResourceCleanupMapOutputWithContext(context.Context) WebAppResourceCleanupMapOutput
}

type WebAppResourceCleanupMap map[string]WebAppResourceCleanupInput

func (WebAppResourceCleanupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebAppResourceCleanup)(nil)).Elem()
}

func (i WebAppResourceCleanupMap) ToWebAppResourceCleanupMapOutput() WebAppResourceCleanupMapOutput {
	return i.ToWebAppResourceCleanupMapOutputWithContext(context.Background())
}

func (i WebAppResourceCleanupMap) ToWebAppResourceCleanupMapOutputWithContext(ctx context.Context) WebAppResourceCleanupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAppResourceCleanupMapOutput)
}

type WebAppResourceCleanupOutput struct{ *pulumi.OutputState }

func (WebAppResourceCleanupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebAppResourceCleanup)(nil)).Elem()
}

func (o WebAppResourceCleanupOutput) ToWebAppResourceCleanupOutput() WebAppResourceCleanupOutput {
	return o
}

func (o WebAppResourceCleanupOutput) ToWebAppResourceCleanupOutputWithContext(ctx context.Context) WebAppResourceCleanupOutput {
	return o
}

// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
func (o WebAppResourceCleanupOutput) InsertAfter() pulumi.StringOutput {
	return o.ApplyT(func(v *WebAppResourceCleanup) pulumi.StringOutput { return v.InsertAfter }).(pulumi.StringOutput)
}

// For example: *Mask journeyId*
func (o WebAppResourceCleanupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WebAppResourceCleanup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// For example: `(.*)(journeyId=)-?\d+(.*)`
func (o WebAppResourceCleanupOutput) RegularExpression() pulumi.StringOutput {
	return o.ApplyT(func(v *WebAppResourceCleanup) pulumi.StringOutput { return v.RegularExpression }).(pulumi.StringOutput)
}

// For example: `$1$2\*$3`
func (o WebAppResourceCleanupOutput) ReplaceWith() pulumi.StringOutput {
	return o.ApplyT(func(v *WebAppResourceCleanup) pulumi.StringOutput { return v.ReplaceWith }).(pulumi.StringOutput)
}

type WebAppResourceCleanupArrayOutput struct{ *pulumi.OutputState }

func (WebAppResourceCleanupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebAppResourceCleanup)(nil)).Elem()
}

func (o WebAppResourceCleanupArrayOutput) ToWebAppResourceCleanupArrayOutput() WebAppResourceCleanupArrayOutput {
	return o
}

func (o WebAppResourceCleanupArrayOutput) ToWebAppResourceCleanupArrayOutputWithContext(ctx context.Context) WebAppResourceCleanupArrayOutput {
	return o
}

func (o WebAppResourceCleanupArrayOutput) Index(i pulumi.IntInput) WebAppResourceCleanupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WebAppResourceCleanup {
		return vs[0].([]*WebAppResourceCleanup)[vs[1].(int)]
	}).(WebAppResourceCleanupOutput)
}

type WebAppResourceCleanupMapOutput struct{ *pulumi.OutputState }

func (WebAppResourceCleanupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebAppResourceCleanup)(nil)).Elem()
}

func (o WebAppResourceCleanupMapOutput) ToWebAppResourceCleanupMapOutput() WebAppResourceCleanupMapOutput {
	return o
}

func (o WebAppResourceCleanupMapOutput) ToWebAppResourceCleanupMapOutputWithContext(ctx context.Context) WebAppResourceCleanupMapOutput {
	return o
}

func (o WebAppResourceCleanupMapOutput) MapIndex(k pulumi.StringInput) WebAppResourceCleanupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WebAppResourceCleanup {
		return vs[0].(map[string]*WebAppResourceCleanup)[vs[1].(string)]
	}).(WebAppResourceCleanupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WebAppResourceCleanupInput)(nil)).Elem(), &WebAppResourceCleanup{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebAppResourceCleanupArrayInput)(nil)).Elem(), WebAppResourceCleanupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebAppResourceCleanupMapInput)(nil)).Elem(), WebAppResourceCleanupMap{})
	pulumi.RegisterOutputType(WebAppResourceCleanupOutput{})
	pulumi.RegisterOutputType(WebAppResourceCleanupArrayOutput{})
	pulumi.RegisterOutputType(WebAppResourceCleanupMapOutput{})
}
