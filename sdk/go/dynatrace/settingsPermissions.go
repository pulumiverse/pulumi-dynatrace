// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type SettingsPermissions struct {
	pulumi.CustomResourceState

	// Defines the default access level granted to all users in this environment. Allowed values are `read`, `write`, or `none`
	AllUsers pulumi.StringPtrOutput             `pulumi:"allUsers"`
	Groups   SettingsPermissionsGroupsPtrOutput `pulumi:"groups"`
	// The ID of the settings object for which access is to be granted. Here, you can use the `id` attribute of the respective settings object resource
	SettingsObjectId pulumi.StringOutput               `pulumi:"settingsObjectId"`
	Users            SettingsPermissionsUsersPtrOutput `pulumi:"users"`
}

// NewSettingsPermissions registers a new resource with the given unique name, arguments, and options.
func NewSettingsPermissions(ctx *pulumi.Context,
	name string, args *SettingsPermissionsArgs, opts ...pulumi.ResourceOption) (*SettingsPermissions, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SettingsObjectId == nil {
		return nil, errors.New("invalid value for required argument 'SettingsObjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SettingsPermissions
	err := ctx.RegisterResource("dynatrace:index/settingsPermissions:SettingsPermissions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSettingsPermissions gets an existing SettingsPermissions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSettingsPermissions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SettingsPermissionsState, opts ...pulumi.ResourceOption) (*SettingsPermissions, error) {
	var resource SettingsPermissions
	err := ctx.ReadResource("dynatrace:index/settingsPermissions:SettingsPermissions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SettingsPermissions resources.
type settingsPermissionsState struct {
	// Defines the default access level granted to all users in this environment. Allowed values are `read`, `write`, or `none`
	AllUsers *string                    `pulumi:"allUsers"`
	Groups   *SettingsPermissionsGroups `pulumi:"groups"`
	// The ID of the settings object for which access is to be granted. Here, you can use the `id` attribute of the respective settings object resource
	SettingsObjectId *string                   `pulumi:"settingsObjectId"`
	Users            *SettingsPermissionsUsers `pulumi:"users"`
}

type SettingsPermissionsState struct {
	// Defines the default access level granted to all users in this environment. Allowed values are `read`, `write`, or `none`
	AllUsers pulumi.StringPtrInput
	Groups   SettingsPermissionsGroupsPtrInput
	// The ID of the settings object for which access is to be granted. Here, you can use the `id` attribute of the respective settings object resource
	SettingsObjectId pulumi.StringPtrInput
	Users            SettingsPermissionsUsersPtrInput
}

func (SettingsPermissionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*settingsPermissionsState)(nil)).Elem()
}

type settingsPermissionsArgs struct {
	// Defines the default access level granted to all users in this environment. Allowed values are `read`, `write`, or `none`
	AllUsers *string                    `pulumi:"allUsers"`
	Groups   *SettingsPermissionsGroups `pulumi:"groups"`
	// The ID of the settings object for which access is to be granted. Here, you can use the `id` attribute of the respective settings object resource
	SettingsObjectId string                    `pulumi:"settingsObjectId"`
	Users            *SettingsPermissionsUsers `pulumi:"users"`
}

// The set of arguments for constructing a SettingsPermissions resource.
type SettingsPermissionsArgs struct {
	// Defines the default access level granted to all users in this environment. Allowed values are `read`, `write`, or `none`
	AllUsers pulumi.StringPtrInput
	Groups   SettingsPermissionsGroupsPtrInput
	// The ID of the settings object for which access is to be granted. Here, you can use the `id` attribute of the respective settings object resource
	SettingsObjectId pulumi.StringInput
	Users            SettingsPermissionsUsersPtrInput
}

func (SettingsPermissionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*settingsPermissionsArgs)(nil)).Elem()
}

type SettingsPermissionsInput interface {
	pulumi.Input

	ToSettingsPermissionsOutput() SettingsPermissionsOutput
	ToSettingsPermissionsOutputWithContext(ctx context.Context) SettingsPermissionsOutput
}

func (*SettingsPermissions) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingsPermissions)(nil)).Elem()
}

func (i *SettingsPermissions) ToSettingsPermissionsOutput() SettingsPermissionsOutput {
	return i.ToSettingsPermissionsOutputWithContext(context.Background())
}

func (i *SettingsPermissions) ToSettingsPermissionsOutputWithContext(ctx context.Context) SettingsPermissionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingsPermissionsOutput)
}

// SettingsPermissionsArrayInput is an input type that accepts SettingsPermissionsArray and SettingsPermissionsArrayOutput values.
// You can construct a concrete instance of `SettingsPermissionsArrayInput` via:
//
//	SettingsPermissionsArray{ SettingsPermissionsArgs{...} }
type SettingsPermissionsArrayInput interface {
	pulumi.Input

	ToSettingsPermissionsArrayOutput() SettingsPermissionsArrayOutput
	ToSettingsPermissionsArrayOutputWithContext(context.Context) SettingsPermissionsArrayOutput
}

type SettingsPermissionsArray []SettingsPermissionsInput

func (SettingsPermissionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SettingsPermissions)(nil)).Elem()
}

func (i SettingsPermissionsArray) ToSettingsPermissionsArrayOutput() SettingsPermissionsArrayOutput {
	return i.ToSettingsPermissionsArrayOutputWithContext(context.Background())
}

func (i SettingsPermissionsArray) ToSettingsPermissionsArrayOutputWithContext(ctx context.Context) SettingsPermissionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingsPermissionsArrayOutput)
}

// SettingsPermissionsMapInput is an input type that accepts SettingsPermissionsMap and SettingsPermissionsMapOutput values.
// You can construct a concrete instance of `SettingsPermissionsMapInput` via:
//
//	SettingsPermissionsMap{ "key": SettingsPermissionsArgs{...} }
type SettingsPermissionsMapInput interface {
	pulumi.Input

	ToSettingsPermissionsMapOutput() SettingsPermissionsMapOutput
	ToSettingsPermissionsMapOutputWithContext(context.Context) SettingsPermissionsMapOutput
}

type SettingsPermissionsMap map[string]SettingsPermissionsInput

func (SettingsPermissionsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SettingsPermissions)(nil)).Elem()
}

func (i SettingsPermissionsMap) ToSettingsPermissionsMapOutput() SettingsPermissionsMapOutput {
	return i.ToSettingsPermissionsMapOutputWithContext(context.Background())
}

func (i SettingsPermissionsMap) ToSettingsPermissionsMapOutputWithContext(ctx context.Context) SettingsPermissionsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingsPermissionsMapOutput)
}

type SettingsPermissionsOutput struct{ *pulumi.OutputState }

func (SettingsPermissionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingsPermissions)(nil)).Elem()
}

func (o SettingsPermissionsOutput) ToSettingsPermissionsOutput() SettingsPermissionsOutput {
	return o
}

func (o SettingsPermissionsOutput) ToSettingsPermissionsOutputWithContext(ctx context.Context) SettingsPermissionsOutput {
	return o
}

// Defines the default access level granted to all users in this environment. Allowed values are `read`, `write`, or `none`
func (o SettingsPermissionsOutput) AllUsers() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingsPermissions) pulumi.StringPtrOutput { return v.AllUsers }).(pulumi.StringPtrOutput)
}

func (o SettingsPermissionsOutput) Groups() SettingsPermissionsGroupsPtrOutput {
	return o.ApplyT(func(v *SettingsPermissions) SettingsPermissionsGroupsPtrOutput { return v.Groups }).(SettingsPermissionsGroupsPtrOutput)
}

// The ID of the settings object for which access is to be granted. Here, you can use the `id` attribute of the respective settings object resource
func (o SettingsPermissionsOutput) SettingsObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SettingsPermissions) pulumi.StringOutput { return v.SettingsObjectId }).(pulumi.StringOutput)
}

func (o SettingsPermissionsOutput) Users() SettingsPermissionsUsersPtrOutput {
	return o.ApplyT(func(v *SettingsPermissions) SettingsPermissionsUsersPtrOutput { return v.Users }).(SettingsPermissionsUsersPtrOutput)
}

type SettingsPermissionsArrayOutput struct{ *pulumi.OutputState }

func (SettingsPermissionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SettingsPermissions)(nil)).Elem()
}

func (o SettingsPermissionsArrayOutput) ToSettingsPermissionsArrayOutput() SettingsPermissionsArrayOutput {
	return o
}

func (o SettingsPermissionsArrayOutput) ToSettingsPermissionsArrayOutputWithContext(ctx context.Context) SettingsPermissionsArrayOutput {
	return o
}

func (o SettingsPermissionsArrayOutput) Index(i pulumi.IntInput) SettingsPermissionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SettingsPermissions {
		return vs[0].([]*SettingsPermissions)[vs[1].(int)]
	}).(SettingsPermissionsOutput)
}

type SettingsPermissionsMapOutput struct{ *pulumi.OutputState }

func (SettingsPermissionsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SettingsPermissions)(nil)).Elem()
}

func (o SettingsPermissionsMapOutput) ToSettingsPermissionsMapOutput() SettingsPermissionsMapOutput {
	return o
}

func (o SettingsPermissionsMapOutput) ToSettingsPermissionsMapOutputWithContext(ctx context.Context) SettingsPermissionsMapOutput {
	return o
}

func (o SettingsPermissionsMapOutput) MapIndex(k pulumi.StringInput) SettingsPermissionsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SettingsPermissions {
		return vs[0].(map[string]*SettingsPermissions)[vs[1].(string)]
	}).(SettingsPermissionsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SettingsPermissionsInput)(nil)).Elem(), &SettingsPermissions{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingsPermissionsArrayInput)(nil)).Elem(), SettingsPermissionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingsPermissionsMapInput)(nil)).Elem(), SettingsPermissionsMap{})
	pulumi.RegisterOutputType(SettingsPermissionsOutput{})
	pulumi.RegisterOutputType(SettingsPermissionsArrayOutput{})
	pulumi.RegisterOutputType(SettingsPermissionsMapOutput{})
}
