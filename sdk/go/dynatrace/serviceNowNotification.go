// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type ServiceNowNotification struct {
	pulumi.CustomResourceState

	// The configuration is enabled (`true`) or disabled (`false`)
	Active pulumi.BoolOutput `pulumi:"active"`
	// Send events into ServiceNow ITOM
	Events pulumi.BoolPtrOutput `pulumi:"events"`
	// Use text format for problem details instead of HTML.
	FormatProblemDetailsAsText pulumi.BoolPtrOutput `pulumi:"formatProblemDetailsAsText"`
	// Send incidents into ServiceNow ITSM
	Incidents pulumi.BoolOutput `pulumi:"incidents"`
	// The ServiceNow instance identifier. It refers to the first part of your own ServiceNow URL. This field is mutually exclusive with the **url** field. You can only use one of them
	Instance pulumi.StringPtrOutput `pulumi:"instance"`
	// The ID of these settings when referred to from resources requiring the REST API V1 keys
	LegacyId pulumi.StringOutput `pulumi:"legacyId"`
	// The content of the ServiceNow description. You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	Message pulumi.StringOutput `pulumi:"message"`
	// The name of the notification configuration
	Name pulumi.StringOutput `pulumi:"name"`
	// The password to the ServiceNow account
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// The ID of the associated alerting profile
	Profile pulumi.StringOutput `pulumi:"profile"`
	// The URL of the on-premise ServiceNow installation. This field is mutually exclusive with the **instance** field. You can only use one of them
	Url pulumi.StringPtrOutput `pulumi:"url"`
	// The username of the ServiceNow account.   Make sure that your user account has the `restService`, `webRequestAdmin`, and `x_dynat_ruxit.Integration` roles
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewServiceNowNotification registers a new resource with the given unique name, arguments, and options.
func NewServiceNowNotification(ctx *pulumi.Context,
	name string, args *ServiceNowNotificationArgs, opts ...pulumi.ResourceOption) (*ServiceNowNotification, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Active == nil {
		return nil, errors.New("invalid value for required argument 'Active'")
	}
	if args.Incidents == nil {
		return nil, errors.New("invalid value for required argument 'Incidents'")
	}
	if args.Message == nil {
		return nil, errors.New("invalid value for required argument 'Message'")
	}
	if args.Profile == nil {
		return nil, errors.New("invalid value for required argument 'Profile'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceNowNotification
	err := ctx.RegisterResource("dynatrace:index/serviceNowNotification:ServiceNowNotification", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceNowNotification gets an existing ServiceNowNotification resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceNowNotification(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceNowNotificationState, opts ...pulumi.ResourceOption) (*ServiceNowNotification, error) {
	var resource ServiceNowNotification
	err := ctx.ReadResource("dynatrace:index/serviceNowNotification:ServiceNowNotification", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceNowNotification resources.
type serviceNowNotificationState struct {
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `pulumi:"active"`
	// Send events into ServiceNow ITOM
	Events *bool `pulumi:"events"`
	// Use text format for problem details instead of HTML.
	FormatProblemDetailsAsText *bool `pulumi:"formatProblemDetailsAsText"`
	// Send incidents into ServiceNow ITSM
	Incidents *bool `pulumi:"incidents"`
	// The ServiceNow instance identifier. It refers to the first part of your own ServiceNow URL. This field is mutually exclusive with the **url** field. You can only use one of them
	Instance *string `pulumi:"instance"`
	// The ID of these settings when referred to from resources requiring the REST API V1 keys
	LegacyId *string `pulumi:"legacyId"`
	// The content of the ServiceNow description. You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	Message *string `pulumi:"message"`
	// The name of the notification configuration
	Name *string `pulumi:"name"`
	// The password to the ServiceNow account
	Password *string `pulumi:"password"`
	// The ID of the associated alerting profile
	Profile *string `pulumi:"profile"`
	// The URL of the on-premise ServiceNow installation. This field is mutually exclusive with the **instance** field. You can only use one of them
	Url *string `pulumi:"url"`
	// The username of the ServiceNow account.   Make sure that your user account has the `restService`, `webRequestAdmin`, and `x_dynat_ruxit.Integration` roles
	Username *string `pulumi:"username"`
}

type ServiceNowNotificationState struct {
	// The configuration is enabled (`true`) or disabled (`false`)
	Active pulumi.BoolPtrInput
	// Send events into ServiceNow ITOM
	Events pulumi.BoolPtrInput
	// Use text format for problem details instead of HTML.
	FormatProblemDetailsAsText pulumi.BoolPtrInput
	// Send incidents into ServiceNow ITSM
	Incidents pulumi.BoolPtrInput
	// The ServiceNow instance identifier. It refers to the first part of your own ServiceNow URL. This field is mutually exclusive with the **url** field. You can only use one of them
	Instance pulumi.StringPtrInput
	// The ID of these settings when referred to from resources requiring the REST API V1 keys
	LegacyId pulumi.StringPtrInput
	// The content of the ServiceNow description. You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	Message pulumi.StringPtrInput
	// The name of the notification configuration
	Name pulumi.StringPtrInput
	// The password to the ServiceNow account
	Password pulumi.StringPtrInput
	// The ID of the associated alerting profile
	Profile pulumi.StringPtrInput
	// The URL of the on-premise ServiceNow installation. This field is mutually exclusive with the **instance** field. You can only use one of them
	Url pulumi.StringPtrInput
	// The username of the ServiceNow account.   Make sure that your user account has the `restService`, `webRequestAdmin`, and `x_dynat_ruxit.Integration` roles
	Username pulumi.StringPtrInput
}

func (ServiceNowNotificationState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceNowNotificationState)(nil)).Elem()
}

type serviceNowNotificationArgs struct {
	// The configuration is enabled (`true`) or disabled (`false`)
	Active bool `pulumi:"active"`
	// Send events into ServiceNow ITOM
	Events *bool `pulumi:"events"`
	// Use text format for problem details instead of HTML.
	FormatProblemDetailsAsText *bool `pulumi:"formatProblemDetailsAsText"`
	// Send incidents into ServiceNow ITSM
	Incidents bool `pulumi:"incidents"`
	// The ServiceNow instance identifier. It refers to the first part of your own ServiceNow URL. This field is mutually exclusive with the **url** field. You can only use one of them
	Instance *string `pulumi:"instance"`
	// The ID of these settings when referred to from resources requiring the REST API V1 keys
	LegacyId *string `pulumi:"legacyId"`
	// The content of the ServiceNow description. You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	Message string `pulumi:"message"`
	// The name of the notification configuration
	Name *string `pulumi:"name"`
	// The password to the ServiceNow account
	Password *string `pulumi:"password"`
	// The ID of the associated alerting profile
	Profile string `pulumi:"profile"`
	// The URL of the on-premise ServiceNow installation. This field is mutually exclusive with the **instance** field. You can only use one of them
	Url *string `pulumi:"url"`
	// The username of the ServiceNow account.   Make sure that your user account has the `restService`, `webRequestAdmin`, and `x_dynat_ruxit.Integration` roles
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a ServiceNowNotification resource.
type ServiceNowNotificationArgs struct {
	// The configuration is enabled (`true`) or disabled (`false`)
	Active pulumi.BoolInput
	// Send events into ServiceNow ITOM
	Events pulumi.BoolPtrInput
	// Use text format for problem details instead of HTML.
	FormatProblemDetailsAsText pulumi.BoolPtrInput
	// Send incidents into ServiceNow ITSM
	Incidents pulumi.BoolInput
	// The ServiceNow instance identifier. It refers to the first part of your own ServiceNow URL. This field is mutually exclusive with the **url** field. You can only use one of them
	Instance pulumi.StringPtrInput
	// The ID of these settings when referred to from resources requiring the REST API V1 keys
	LegacyId pulumi.StringPtrInput
	// The content of the ServiceNow description. You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	Message pulumi.StringInput
	// The name of the notification configuration
	Name pulumi.StringPtrInput
	// The password to the ServiceNow account
	Password pulumi.StringPtrInput
	// The ID of the associated alerting profile
	Profile pulumi.StringInput
	// The URL of the on-premise ServiceNow installation. This field is mutually exclusive with the **instance** field. You can only use one of them
	Url pulumi.StringPtrInput
	// The username of the ServiceNow account.   Make sure that your user account has the `restService`, `webRequestAdmin`, and `x_dynat_ruxit.Integration` roles
	Username pulumi.StringInput
}

func (ServiceNowNotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceNowNotificationArgs)(nil)).Elem()
}

type ServiceNowNotificationInput interface {
	pulumi.Input

	ToServiceNowNotificationOutput() ServiceNowNotificationOutput
	ToServiceNowNotificationOutputWithContext(ctx context.Context) ServiceNowNotificationOutput
}

func (*ServiceNowNotification) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceNowNotification)(nil)).Elem()
}

func (i *ServiceNowNotification) ToServiceNowNotificationOutput() ServiceNowNotificationOutput {
	return i.ToServiceNowNotificationOutputWithContext(context.Background())
}

func (i *ServiceNowNotification) ToServiceNowNotificationOutputWithContext(ctx context.Context) ServiceNowNotificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNowNotificationOutput)
}

// ServiceNowNotificationArrayInput is an input type that accepts ServiceNowNotificationArray and ServiceNowNotificationArrayOutput values.
// You can construct a concrete instance of `ServiceNowNotificationArrayInput` via:
//
//	ServiceNowNotificationArray{ ServiceNowNotificationArgs{...} }
type ServiceNowNotificationArrayInput interface {
	pulumi.Input

	ToServiceNowNotificationArrayOutput() ServiceNowNotificationArrayOutput
	ToServiceNowNotificationArrayOutputWithContext(context.Context) ServiceNowNotificationArrayOutput
}

type ServiceNowNotificationArray []ServiceNowNotificationInput

func (ServiceNowNotificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceNowNotification)(nil)).Elem()
}

func (i ServiceNowNotificationArray) ToServiceNowNotificationArrayOutput() ServiceNowNotificationArrayOutput {
	return i.ToServiceNowNotificationArrayOutputWithContext(context.Background())
}

func (i ServiceNowNotificationArray) ToServiceNowNotificationArrayOutputWithContext(ctx context.Context) ServiceNowNotificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNowNotificationArrayOutput)
}

// ServiceNowNotificationMapInput is an input type that accepts ServiceNowNotificationMap and ServiceNowNotificationMapOutput values.
// You can construct a concrete instance of `ServiceNowNotificationMapInput` via:
//
//	ServiceNowNotificationMap{ "key": ServiceNowNotificationArgs{...} }
type ServiceNowNotificationMapInput interface {
	pulumi.Input

	ToServiceNowNotificationMapOutput() ServiceNowNotificationMapOutput
	ToServiceNowNotificationMapOutputWithContext(context.Context) ServiceNowNotificationMapOutput
}

type ServiceNowNotificationMap map[string]ServiceNowNotificationInput

func (ServiceNowNotificationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceNowNotification)(nil)).Elem()
}

func (i ServiceNowNotificationMap) ToServiceNowNotificationMapOutput() ServiceNowNotificationMapOutput {
	return i.ToServiceNowNotificationMapOutputWithContext(context.Background())
}

func (i ServiceNowNotificationMap) ToServiceNowNotificationMapOutputWithContext(ctx context.Context) ServiceNowNotificationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNowNotificationMapOutput)
}

type ServiceNowNotificationOutput struct{ *pulumi.OutputState }

func (ServiceNowNotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceNowNotification)(nil)).Elem()
}

func (o ServiceNowNotificationOutput) ToServiceNowNotificationOutput() ServiceNowNotificationOutput {
	return o
}

func (o ServiceNowNotificationOutput) ToServiceNowNotificationOutputWithContext(ctx context.Context) ServiceNowNotificationOutput {
	return o
}

// The configuration is enabled (`true`) or disabled (`false`)
func (o ServiceNowNotificationOutput) Active() pulumi.BoolOutput {
	return o.ApplyT(func(v *ServiceNowNotification) pulumi.BoolOutput { return v.Active }).(pulumi.BoolOutput)
}

// Send events into ServiceNow ITOM
func (o ServiceNowNotificationOutput) Events() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceNowNotification) pulumi.BoolPtrOutput { return v.Events }).(pulumi.BoolPtrOutput)
}

// Use text format for problem details instead of HTML.
func (o ServiceNowNotificationOutput) FormatProblemDetailsAsText() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceNowNotification) pulumi.BoolPtrOutput { return v.FormatProblemDetailsAsText }).(pulumi.BoolPtrOutput)
}

// Send incidents into ServiceNow ITSM
func (o ServiceNowNotificationOutput) Incidents() pulumi.BoolOutput {
	return o.ApplyT(func(v *ServiceNowNotification) pulumi.BoolOutput { return v.Incidents }).(pulumi.BoolOutput)
}

// The ServiceNow instance identifier. It refers to the first part of your own ServiceNow URL. This field is mutually exclusive with the **url** field. You can only use one of them
func (o ServiceNowNotificationOutput) Instance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceNowNotification) pulumi.StringPtrOutput { return v.Instance }).(pulumi.StringPtrOutput)
}

// The ID of these settings when referred to from resources requiring the REST API V1 keys
func (o ServiceNowNotificationOutput) LegacyId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceNowNotification) pulumi.StringOutput { return v.LegacyId }).(pulumi.StringOutput)
}

// The content of the ServiceNow description. You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
func (o ServiceNowNotificationOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceNowNotification) pulumi.StringOutput { return v.Message }).(pulumi.StringOutput)
}

// The name of the notification configuration
func (o ServiceNowNotificationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceNowNotification) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The password to the ServiceNow account
func (o ServiceNowNotificationOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceNowNotification) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// The ID of the associated alerting profile
func (o ServiceNowNotificationOutput) Profile() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceNowNotification) pulumi.StringOutput { return v.Profile }).(pulumi.StringOutput)
}

// The URL of the on-premise ServiceNow installation. This field is mutually exclusive with the **instance** field. You can only use one of them
func (o ServiceNowNotificationOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceNowNotification) pulumi.StringPtrOutput { return v.Url }).(pulumi.StringPtrOutput)
}

// The username of the ServiceNow account.   Make sure that your user account has the `restService`, `webRequestAdmin`, and `x_dynat_ruxit.Integration` roles
func (o ServiceNowNotificationOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceNowNotification) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type ServiceNowNotificationArrayOutput struct{ *pulumi.OutputState }

func (ServiceNowNotificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceNowNotification)(nil)).Elem()
}

func (o ServiceNowNotificationArrayOutput) ToServiceNowNotificationArrayOutput() ServiceNowNotificationArrayOutput {
	return o
}

func (o ServiceNowNotificationArrayOutput) ToServiceNowNotificationArrayOutputWithContext(ctx context.Context) ServiceNowNotificationArrayOutput {
	return o
}

func (o ServiceNowNotificationArrayOutput) Index(i pulumi.IntInput) ServiceNowNotificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceNowNotification {
		return vs[0].([]*ServiceNowNotification)[vs[1].(int)]
	}).(ServiceNowNotificationOutput)
}

type ServiceNowNotificationMapOutput struct{ *pulumi.OutputState }

func (ServiceNowNotificationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceNowNotification)(nil)).Elem()
}

func (o ServiceNowNotificationMapOutput) ToServiceNowNotificationMapOutput() ServiceNowNotificationMapOutput {
	return o
}

func (o ServiceNowNotificationMapOutput) ToServiceNowNotificationMapOutputWithContext(ctx context.Context) ServiceNowNotificationMapOutput {
	return o
}

func (o ServiceNowNotificationMapOutput) MapIndex(k pulumi.StringInput) ServiceNowNotificationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceNowNotification {
		return vs[0].(map[string]*ServiceNowNotification)[vs[1].(string)]
	}).(ServiceNowNotificationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceNowNotificationInput)(nil)).Elem(), &ServiceNowNotification{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceNowNotificationArrayInput)(nil)).Elem(), ServiceNowNotificationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceNowNotificationMapInput)(nil)).Elem(), ServiceNowNotificationMap{})
	pulumi.RegisterOutputType(ServiceNowNotificationOutput{})
	pulumi.RegisterOutputType(ServiceNowNotificationArrayOutput{})
	pulumi.RegisterOutputType(ServiceNowNotificationMapOutput{})
}
