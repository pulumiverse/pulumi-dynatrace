// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type MgmzPermission struct {
	pulumi.CustomResourceState

	// The UUID of the environment
	Environment pulumi.StringOutput `pulumi:"environment"`
	// The ID of the group the permissions are valid for. You may refer to the id of a resource `UserGroup` here
	Group pulumi.StringOutput `pulumi:"group"`
	// The ID of the management zone the permissions are valid for. When referring to resource `ManagementZoneV2` or data source `ManagementZone` you need to refer to the attribute `legacyId`.
	ManagementZone pulumi.StringOutput `pulumi:"managementZone"`
	// The permissions to assign for that management zone. Allowed values are `DEMO_USER`, `LOG_VIEWER`, `MANAGE_SECURITY_PROBLEMS`, `MANAGE_SETTINGS`, `REPLAY_SESSION_DATA`, `REPLAY_SESSION_DATA_WITHOUT_MASKING`, `VIEWER`, `VIEW_SENSITIVE_REQUEST_DATA`.
	// Note: In order to produce non-empty plans specifying at least the permission `VIEWER` is recommended. Your Dynatrace Cluster will enforce that permission, regardless of whether it has been specified or not.
	Permissions pulumi.StringArrayOutput `pulumi:"permissions"`
}

// NewMgmzPermission registers a new resource with the given unique name, arguments, and options.
func NewMgmzPermission(ctx *pulumi.Context,
	name string, args *MgmzPermissionArgs, opts ...pulumi.ResourceOption) (*MgmzPermission, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.Group == nil {
		return nil, errors.New("invalid value for required argument 'Group'")
	}
	if args.ManagementZone == nil {
		return nil, errors.New("invalid value for required argument 'ManagementZone'")
	}
	if args.Permissions == nil {
		return nil, errors.New("invalid value for required argument 'Permissions'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MgmzPermission
	err := ctx.RegisterResource("dynatrace:index/mgmzPermission:MgmzPermission", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMgmzPermission gets an existing MgmzPermission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMgmzPermission(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MgmzPermissionState, opts ...pulumi.ResourceOption) (*MgmzPermission, error) {
	var resource MgmzPermission
	err := ctx.ReadResource("dynatrace:index/mgmzPermission:MgmzPermission", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MgmzPermission resources.
type mgmzPermissionState struct {
	// The UUID of the environment
	Environment *string `pulumi:"environment"`
	// The ID of the group the permissions are valid for. You may refer to the id of a resource `UserGroup` here
	Group *string `pulumi:"group"`
	// The ID of the management zone the permissions are valid for. When referring to resource `ManagementZoneV2` or data source `ManagementZone` you need to refer to the attribute `legacyId`.
	ManagementZone *string `pulumi:"managementZone"`
	// The permissions to assign for that management zone. Allowed values are `DEMO_USER`, `LOG_VIEWER`, `MANAGE_SECURITY_PROBLEMS`, `MANAGE_SETTINGS`, `REPLAY_SESSION_DATA`, `REPLAY_SESSION_DATA_WITHOUT_MASKING`, `VIEWER`, `VIEW_SENSITIVE_REQUEST_DATA`.
	// Note: In order to produce non-empty plans specifying at least the permission `VIEWER` is recommended. Your Dynatrace Cluster will enforce that permission, regardless of whether it has been specified or not.
	Permissions []string `pulumi:"permissions"`
}

type MgmzPermissionState struct {
	// The UUID of the environment
	Environment pulumi.StringPtrInput
	// The ID of the group the permissions are valid for. You may refer to the id of a resource `UserGroup` here
	Group pulumi.StringPtrInput
	// The ID of the management zone the permissions are valid for. When referring to resource `ManagementZoneV2` or data source `ManagementZone` you need to refer to the attribute `legacyId`.
	ManagementZone pulumi.StringPtrInput
	// The permissions to assign for that management zone. Allowed values are `DEMO_USER`, `LOG_VIEWER`, `MANAGE_SECURITY_PROBLEMS`, `MANAGE_SETTINGS`, `REPLAY_SESSION_DATA`, `REPLAY_SESSION_DATA_WITHOUT_MASKING`, `VIEWER`, `VIEW_SENSITIVE_REQUEST_DATA`.
	// Note: In order to produce non-empty plans specifying at least the permission `VIEWER` is recommended. Your Dynatrace Cluster will enforce that permission, regardless of whether it has been specified or not.
	Permissions pulumi.StringArrayInput
}

func (MgmzPermissionState) ElementType() reflect.Type {
	return reflect.TypeOf((*mgmzPermissionState)(nil)).Elem()
}

type mgmzPermissionArgs struct {
	// The UUID of the environment
	Environment string `pulumi:"environment"`
	// The ID of the group the permissions are valid for. You may refer to the id of a resource `UserGroup` here
	Group string `pulumi:"group"`
	// The ID of the management zone the permissions are valid for. When referring to resource `ManagementZoneV2` or data source `ManagementZone` you need to refer to the attribute `legacyId`.
	ManagementZone string `pulumi:"managementZone"`
	// The permissions to assign for that management zone. Allowed values are `DEMO_USER`, `LOG_VIEWER`, `MANAGE_SECURITY_PROBLEMS`, `MANAGE_SETTINGS`, `REPLAY_SESSION_DATA`, `REPLAY_SESSION_DATA_WITHOUT_MASKING`, `VIEWER`, `VIEW_SENSITIVE_REQUEST_DATA`.
	// Note: In order to produce non-empty plans specifying at least the permission `VIEWER` is recommended. Your Dynatrace Cluster will enforce that permission, regardless of whether it has been specified or not.
	Permissions []string `pulumi:"permissions"`
}

// The set of arguments for constructing a MgmzPermission resource.
type MgmzPermissionArgs struct {
	// The UUID of the environment
	Environment pulumi.StringInput
	// The ID of the group the permissions are valid for. You may refer to the id of a resource `UserGroup` here
	Group pulumi.StringInput
	// The ID of the management zone the permissions are valid for. When referring to resource `ManagementZoneV2` or data source `ManagementZone` you need to refer to the attribute `legacyId`.
	ManagementZone pulumi.StringInput
	// The permissions to assign for that management zone. Allowed values are `DEMO_USER`, `LOG_VIEWER`, `MANAGE_SECURITY_PROBLEMS`, `MANAGE_SETTINGS`, `REPLAY_SESSION_DATA`, `REPLAY_SESSION_DATA_WITHOUT_MASKING`, `VIEWER`, `VIEW_SENSITIVE_REQUEST_DATA`.
	// Note: In order to produce non-empty plans specifying at least the permission `VIEWER` is recommended. Your Dynatrace Cluster will enforce that permission, regardless of whether it has been specified or not.
	Permissions pulumi.StringArrayInput
}

func (MgmzPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mgmzPermissionArgs)(nil)).Elem()
}

type MgmzPermissionInput interface {
	pulumi.Input

	ToMgmzPermissionOutput() MgmzPermissionOutput
	ToMgmzPermissionOutputWithContext(ctx context.Context) MgmzPermissionOutput
}

func (*MgmzPermission) ElementType() reflect.Type {
	return reflect.TypeOf((**MgmzPermission)(nil)).Elem()
}

func (i *MgmzPermission) ToMgmzPermissionOutput() MgmzPermissionOutput {
	return i.ToMgmzPermissionOutputWithContext(context.Background())
}

func (i *MgmzPermission) ToMgmzPermissionOutputWithContext(ctx context.Context) MgmzPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MgmzPermissionOutput)
}

// MgmzPermissionArrayInput is an input type that accepts MgmzPermissionArray and MgmzPermissionArrayOutput values.
// You can construct a concrete instance of `MgmzPermissionArrayInput` via:
//
//	MgmzPermissionArray{ MgmzPermissionArgs{...} }
type MgmzPermissionArrayInput interface {
	pulumi.Input

	ToMgmzPermissionArrayOutput() MgmzPermissionArrayOutput
	ToMgmzPermissionArrayOutputWithContext(context.Context) MgmzPermissionArrayOutput
}

type MgmzPermissionArray []MgmzPermissionInput

func (MgmzPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MgmzPermission)(nil)).Elem()
}

func (i MgmzPermissionArray) ToMgmzPermissionArrayOutput() MgmzPermissionArrayOutput {
	return i.ToMgmzPermissionArrayOutputWithContext(context.Background())
}

func (i MgmzPermissionArray) ToMgmzPermissionArrayOutputWithContext(ctx context.Context) MgmzPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MgmzPermissionArrayOutput)
}

// MgmzPermissionMapInput is an input type that accepts MgmzPermissionMap and MgmzPermissionMapOutput values.
// You can construct a concrete instance of `MgmzPermissionMapInput` via:
//
//	MgmzPermissionMap{ "key": MgmzPermissionArgs{...} }
type MgmzPermissionMapInput interface {
	pulumi.Input

	ToMgmzPermissionMapOutput() MgmzPermissionMapOutput
	ToMgmzPermissionMapOutputWithContext(context.Context) MgmzPermissionMapOutput
}

type MgmzPermissionMap map[string]MgmzPermissionInput

func (MgmzPermissionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MgmzPermission)(nil)).Elem()
}

func (i MgmzPermissionMap) ToMgmzPermissionMapOutput() MgmzPermissionMapOutput {
	return i.ToMgmzPermissionMapOutputWithContext(context.Background())
}

func (i MgmzPermissionMap) ToMgmzPermissionMapOutputWithContext(ctx context.Context) MgmzPermissionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MgmzPermissionMapOutput)
}

type MgmzPermissionOutput struct{ *pulumi.OutputState }

func (MgmzPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MgmzPermission)(nil)).Elem()
}

func (o MgmzPermissionOutput) ToMgmzPermissionOutput() MgmzPermissionOutput {
	return o
}

func (o MgmzPermissionOutput) ToMgmzPermissionOutputWithContext(ctx context.Context) MgmzPermissionOutput {
	return o
}

// The UUID of the environment
func (o MgmzPermissionOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *MgmzPermission) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// The ID of the group the permissions are valid for. You may refer to the id of a resource `UserGroup` here
func (o MgmzPermissionOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v *MgmzPermission) pulumi.StringOutput { return v.Group }).(pulumi.StringOutput)
}

// The ID of the management zone the permissions are valid for. When referring to resource `ManagementZoneV2` or data source `ManagementZone` you need to refer to the attribute `legacyId`.
func (o MgmzPermissionOutput) ManagementZone() pulumi.StringOutput {
	return o.ApplyT(func(v *MgmzPermission) pulumi.StringOutput { return v.ManagementZone }).(pulumi.StringOutput)
}

// The permissions to assign for that management zone. Allowed values are `DEMO_USER`, `LOG_VIEWER`, `MANAGE_SECURITY_PROBLEMS`, `MANAGE_SETTINGS`, `REPLAY_SESSION_DATA`, `REPLAY_SESSION_DATA_WITHOUT_MASKING`, `VIEWER`, `VIEW_SENSITIVE_REQUEST_DATA`.
// Note: In order to produce non-empty plans specifying at least the permission `VIEWER` is recommended. Your Dynatrace Cluster will enforce that permission, regardless of whether it has been specified or not.
func (o MgmzPermissionOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MgmzPermission) pulumi.StringArrayOutput { return v.Permissions }).(pulumi.StringArrayOutput)
}

type MgmzPermissionArrayOutput struct{ *pulumi.OutputState }

func (MgmzPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MgmzPermission)(nil)).Elem()
}

func (o MgmzPermissionArrayOutput) ToMgmzPermissionArrayOutput() MgmzPermissionArrayOutput {
	return o
}

func (o MgmzPermissionArrayOutput) ToMgmzPermissionArrayOutputWithContext(ctx context.Context) MgmzPermissionArrayOutput {
	return o
}

func (o MgmzPermissionArrayOutput) Index(i pulumi.IntInput) MgmzPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MgmzPermission {
		return vs[0].([]*MgmzPermission)[vs[1].(int)]
	}).(MgmzPermissionOutput)
}

type MgmzPermissionMapOutput struct{ *pulumi.OutputState }

func (MgmzPermissionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MgmzPermission)(nil)).Elem()
}

func (o MgmzPermissionMapOutput) ToMgmzPermissionMapOutput() MgmzPermissionMapOutput {
	return o
}

func (o MgmzPermissionMapOutput) ToMgmzPermissionMapOutputWithContext(ctx context.Context) MgmzPermissionMapOutput {
	return o
}

func (o MgmzPermissionMapOutput) MapIndex(k pulumi.StringInput) MgmzPermissionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MgmzPermission {
		return vs[0].(map[string]*MgmzPermission)[vs[1].(string)]
	}).(MgmzPermissionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MgmzPermissionInput)(nil)).Elem(), &MgmzPermission{})
	pulumi.RegisterInputType(reflect.TypeOf((*MgmzPermissionArrayInput)(nil)).Elem(), MgmzPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MgmzPermissionMapInput)(nil)).Elem(), MgmzPermissionMap{})
	pulumi.RegisterOutputType(MgmzPermissionOutput{})
	pulumi.RegisterOutputType(MgmzPermissionArrayOutput{})
	pulumi.RegisterOutputType(MgmzPermissionMapOutput{})
}
