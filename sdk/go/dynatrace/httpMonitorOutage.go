// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type HttpMonitorOutage struct {
	pulumi.CustomResourceState

	// (Field has overlap with `HttpMonitor`) Alert if all locations are unable to access my web application
	GlobalConsecutiveOutageCountThreshold pulumi.IntPtrOutput `pulumi:"globalConsecutiveOutageCountThreshold"`
	// (Field has overlap with `HttpMonitor`) Generate a problem and send an alert when the monitor is unavailable at all configured locations.
	GlobalOutages pulumi.BoolOutput `pulumi:"globalOutages"`
	// (Field has overlap with `HttpMonitor`) are unable to access my web application
	LocalConsecutiveOutageCountThreshold pulumi.IntPtrOutput `pulumi:"localConsecutiveOutageCountThreshold"`
	// (Field has overlap with `HttpMonitor`) Alert if at least
	LocalLocationOutageCountThreshold pulumi.IntPtrOutput `pulumi:"localLocationOutageCountThreshold"`
	// (Field has overlap with `HttpMonitor`) Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
	LocalOutages pulumi.BoolOutput `pulumi:"localOutages"`
	// The scope of this setting (HTTP_CHECK). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
}

// NewHttpMonitorOutage registers a new resource with the given unique name, arguments, and options.
func NewHttpMonitorOutage(ctx *pulumi.Context,
	name string, args *HttpMonitorOutageArgs, opts ...pulumi.ResourceOption) (*HttpMonitorOutage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GlobalOutages == nil {
		return nil, errors.New("invalid value for required argument 'GlobalOutages'")
	}
	if args.LocalOutages == nil {
		return nil, errors.New("invalid value for required argument 'LocalOutages'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HttpMonitorOutage
	err := ctx.RegisterResource("dynatrace:index/httpMonitorOutage:HttpMonitorOutage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHttpMonitorOutage gets an existing HttpMonitorOutage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHttpMonitorOutage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HttpMonitorOutageState, opts ...pulumi.ResourceOption) (*HttpMonitorOutage, error) {
	var resource HttpMonitorOutage
	err := ctx.ReadResource("dynatrace:index/httpMonitorOutage:HttpMonitorOutage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HttpMonitorOutage resources.
type httpMonitorOutageState struct {
	// (Field has overlap with `HttpMonitor`) Alert if all locations are unable to access my web application
	GlobalConsecutiveOutageCountThreshold *int `pulumi:"globalConsecutiveOutageCountThreshold"`
	// (Field has overlap with `HttpMonitor`) Generate a problem and send an alert when the monitor is unavailable at all configured locations.
	GlobalOutages *bool `pulumi:"globalOutages"`
	// (Field has overlap with `HttpMonitor`) are unable to access my web application
	LocalConsecutiveOutageCountThreshold *int `pulumi:"localConsecutiveOutageCountThreshold"`
	// (Field has overlap with `HttpMonitor`) Alert if at least
	LocalLocationOutageCountThreshold *int `pulumi:"localLocationOutageCountThreshold"`
	// (Field has overlap with `HttpMonitor`) Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
	LocalOutages *bool `pulumi:"localOutages"`
	// The scope of this setting (HTTP_CHECK). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
}

type HttpMonitorOutageState struct {
	// (Field has overlap with `HttpMonitor`) Alert if all locations are unable to access my web application
	GlobalConsecutiveOutageCountThreshold pulumi.IntPtrInput
	// (Field has overlap with `HttpMonitor`) Generate a problem and send an alert when the monitor is unavailable at all configured locations.
	GlobalOutages pulumi.BoolPtrInput
	// (Field has overlap with `HttpMonitor`) are unable to access my web application
	LocalConsecutiveOutageCountThreshold pulumi.IntPtrInput
	// (Field has overlap with `HttpMonitor`) Alert if at least
	LocalLocationOutageCountThreshold pulumi.IntPtrInput
	// (Field has overlap with `HttpMonitor`) Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
	LocalOutages pulumi.BoolPtrInput
	// The scope of this setting (HTTP_CHECK). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
}

func (HttpMonitorOutageState) ElementType() reflect.Type {
	return reflect.TypeOf((*httpMonitorOutageState)(nil)).Elem()
}

type httpMonitorOutageArgs struct {
	// (Field has overlap with `HttpMonitor`) Alert if all locations are unable to access my web application
	GlobalConsecutiveOutageCountThreshold *int `pulumi:"globalConsecutiveOutageCountThreshold"`
	// (Field has overlap with `HttpMonitor`) Generate a problem and send an alert when the monitor is unavailable at all configured locations.
	GlobalOutages bool `pulumi:"globalOutages"`
	// (Field has overlap with `HttpMonitor`) are unable to access my web application
	LocalConsecutiveOutageCountThreshold *int `pulumi:"localConsecutiveOutageCountThreshold"`
	// (Field has overlap with `HttpMonitor`) Alert if at least
	LocalLocationOutageCountThreshold *int `pulumi:"localLocationOutageCountThreshold"`
	// (Field has overlap with `HttpMonitor`) Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
	LocalOutages bool `pulumi:"localOutages"`
	// The scope of this setting (HTTP_CHECK). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
}

// The set of arguments for constructing a HttpMonitorOutage resource.
type HttpMonitorOutageArgs struct {
	// (Field has overlap with `HttpMonitor`) Alert if all locations are unable to access my web application
	GlobalConsecutiveOutageCountThreshold pulumi.IntPtrInput
	// (Field has overlap with `HttpMonitor`) Generate a problem and send an alert when the monitor is unavailable at all configured locations.
	GlobalOutages pulumi.BoolInput
	// (Field has overlap with `HttpMonitor`) are unable to access my web application
	LocalConsecutiveOutageCountThreshold pulumi.IntPtrInput
	// (Field has overlap with `HttpMonitor`) Alert if at least
	LocalLocationOutageCountThreshold pulumi.IntPtrInput
	// (Field has overlap with `HttpMonitor`) Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
	LocalOutages pulumi.BoolInput
	// The scope of this setting (HTTP_CHECK). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
}

func (HttpMonitorOutageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*httpMonitorOutageArgs)(nil)).Elem()
}

type HttpMonitorOutageInput interface {
	pulumi.Input

	ToHttpMonitorOutageOutput() HttpMonitorOutageOutput
	ToHttpMonitorOutageOutputWithContext(ctx context.Context) HttpMonitorOutageOutput
}

func (*HttpMonitorOutage) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpMonitorOutage)(nil)).Elem()
}

func (i *HttpMonitorOutage) ToHttpMonitorOutageOutput() HttpMonitorOutageOutput {
	return i.ToHttpMonitorOutageOutputWithContext(context.Background())
}

func (i *HttpMonitorOutage) ToHttpMonitorOutageOutputWithContext(ctx context.Context) HttpMonitorOutageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpMonitorOutageOutput)
}

// HttpMonitorOutageArrayInput is an input type that accepts HttpMonitorOutageArray and HttpMonitorOutageArrayOutput values.
// You can construct a concrete instance of `HttpMonitorOutageArrayInput` via:
//
//	HttpMonitorOutageArray{ HttpMonitorOutageArgs{...} }
type HttpMonitorOutageArrayInput interface {
	pulumi.Input

	ToHttpMonitorOutageArrayOutput() HttpMonitorOutageArrayOutput
	ToHttpMonitorOutageArrayOutputWithContext(context.Context) HttpMonitorOutageArrayOutput
}

type HttpMonitorOutageArray []HttpMonitorOutageInput

func (HttpMonitorOutageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HttpMonitorOutage)(nil)).Elem()
}

func (i HttpMonitorOutageArray) ToHttpMonitorOutageArrayOutput() HttpMonitorOutageArrayOutput {
	return i.ToHttpMonitorOutageArrayOutputWithContext(context.Background())
}

func (i HttpMonitorOutageArray) ToHttpMonitorOutageArrayOutputWithContext(ctx context.Context) HttpMonitorOutageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpMonitorOutageArrayOutput)
}

// HttpMonitorOutageMapInput is an input type that accepts HttpMonitorOutageMap and HttpMonitorOutageMapOutput values.
// You can construct a concrete instance of `HttpMonitorOutageMapInput` via:
//
//	HttpMonitorOutageMap{ "key": HttpMonitorOutageArgs{...} }
type HttpMonitorOutageMapInput interface {
	pulumi.Input

	ToHttpMonitorOutageMapOutput() HttpMonitorOutageMapOutput
	ToHttpMonitorOutageMapOutputWithContext(context.Context) HttpMonitorOutageMapOutput
}

type HttpMonitorOutageMap map[string]HttpMonitorOutageInput

func (HttpMonitorOutageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HttpMonitorOutage)(nil)).Elem()
}

func (i HttpMonitorOutageMap) ToHttpMonitorOutageMapOutput() HttpMonitorOutageMapOutput {
	return i.ToHttpMonitorOutageMapOutputWithContext(context.Background())
}

func (i HttpMonitorOutageMap) ToHttpMonitorOutageMapOutputWithContext(ctx context.Context) HttpMonitorOutageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpMonitorOutageMapOutput)
}

type HttpMonitorOutageOutput struct{ *pulumi.OutputState }

func (HttpMonitorOutageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpMonitorOutage)(nil)).Elem()
}

func (o HttpMonitorOutageOutput) ToHttpMonitorOutageOutput() HttpMonitorOutageOutput {
	return o
}

func (o HttpMonitorOutageOutput) ToHttpMonitorOutageOutputWithContext(ctx context.Context) HttpMonitorOutageOutput {
	return o
}

// (Field has overlap with `HttpMonitor`) Alert if all locations are unable to access my web application
func (o HttpMonitorOutageOutput) GlobalConsecutiveOutageCountThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HttpMonitorOutage) pulumi.IntPtrOutput { return v.GlobalConsecutiveOutageCountThreshold }).(pulumi.IntPtrOutput)
}

// (Field has overlap with `HttpMonitor`) Generate a problem and send an alert when the monitor is unavailable at all configured locations.
func (o HttpMonitorOutageOutput) GlobalOutages() pulumi.BoolOutput {
	return o.ApplyT(func(v *HttpMonitorOutage) pulumi.BoolOutput { return v.GlobalOutages }).(pulumi.BoolOutput)
}

// (Field has overlap with `HttpMonitor`) are unable to access my web application
func (o HttpMonitorOutageOutput) LocalConsecutiveOutageCountThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HttpMonitorOutage) pulumi.IntPtrOutput { return v.LocalConsecutiveOutageCountThreshold }).(pulumi.IntPtrOutput)
}

// (Field has overlap with `HttpMonitor`) Alert if at least
func (o HttpMonitorOutageOutput) LocalLocationOutageCountThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HttpMonitorOutage) pulumi.IntPtrOutput { return v.LocalLocationOutageCountThreshold }).(pulumi.IntPtrOutput)
}

// (Field has overlap with `HttpMonitor`) Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
func (o HttpMonitorOutageOutput) LocalOutages() pulumi.BoolOutput {
	return o.ApplyT(func(v *HttpMonitorOutage) pulumi.BoolOutput { return v.LocalOutages }).(pulumi.BoolOutput)
}

// The scope of this setting (HTTP_CHECK). Omit this property if you want to cover the whole environment.
func (o HttpMonitorOutageOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpMonitorOutage) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

type HttpMonitorOutageArrayOutput struct{ *pulumi.OutputState }

func (HttpMonitorOutageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HttpMonitorOutage)(nil)).Elem()
}

func (o HttpMonitorOutageArrayOutput) ToHttpMonitorOutageArrayOutput() HttpMonitorOutageArrayOutput {
	return o
}

func (o HttpMonitorOutageArrayOutput) ToHttpMonitorOutageArrayOutputWithContext(ctx context.Context) HttpMonitorOutageArrayOutput {
	return o
}

func (o HttpMonitorOutageArrayOutput) Index(i pulumi.IntInput) HttpMonitorOutageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HttpMonitorOutage {
		return vs[0].([]*HttpMonitorOutage)[vs[1].(int)]
	}).(HttpMonitorOutageOutput)
}

type HttpMonitorOutageMapOutput struct{ *pulumi.OutputState }

func (HttpMonitorOutageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HttpMonitorOutage)(nil)).Elem()
}

func (o HttpMonitorOutageMapOutput) ToHttpMonitorOutageMapOutput() HttpMonitorOutageMapOutput {
	return o
}

func (o HttpMonitorOutageMapOutput) ToHttpMonitorOutageMapOutputWithContext(ctx context.Context) HttpMonitorOutageMapOutput {
	return o
}

func (o HttpMonitorOutageMapOutput) MapIndex(k pulumi.StringInput) HttpMonitorOutageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HttpMonitorOutage {
		return vs[0].(map[string]*HttpMonitorOutage)[vs[1].(string)]
	}).(HttpMonitorOutageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HttpMonitorOutageInput)(nil)).Elem(), &HttpMonitorOutage{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpMonitorOutageArrayInput)(nil)).Elem(), HttpMonitorOutageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpMonitorOutageMapInput)(nil)).Elem(), HttpMonitorOutageMap{})
	pulumi.RegisterOutputType(HttpMonitorOutageOutput{})
	pulumi.RegisterOutputType(HttpMonitorOutageArrayOutput{})
	pulumi.RegisterOutputType(HttpMonitorOutageMapOutput{})
}
