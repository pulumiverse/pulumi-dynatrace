// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type ServiceNamingOrder struct {
	pulumi.CustomResourceState

	// The IDs of the naming rules to define the order for
	NamingRuleIds pulumi.StringArrayOutput `pulumi:"namingRuleIds"`
}

// NewServiceNamingOrder registers a new resource with the given unique name, arguments, and options.
func NewServiceNamingOrder(ctx *pulumi.Context,
	name string, args *ServiceNamingOrderArgs, opts ...pulumi.ResourceOption) (*ServiceNamingOrder, error) {
	if args == nil {
		args = &ServiceNamingOrderArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceNamingOrder
	err := ctx.RegisterResource("dynatrace:index/serviceNamingOrder:ServiceNamingOrder", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceNamingOrder gets an existing ServiceNamingOrder resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceNamingOrder(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceNamingOrderState, opts ...pulumi.ResourceOption) (*ServiceNamingOrder, error) {
	var resource ServiceNamingOrder
	err := ctx.ReadResource("dynatrace:index/serviceNamingOrder:ServiceNamingOrder", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceNamingOrder resources.
type serviceNamingOrderState struct {
	// The IDs of the naming rules to define the order for
	NamingRuleIds []string `pulumi:"namingRuleIds"`
}

type ServiceNamingOrderState struct {
	// The IDs of the naming rules to define the order for
	NamingRuleIds pulumi.StringArrayInput
}

func (ServiceNamingOrderState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceNamingOrderState)(nil)).Elem()
}

type serviceNamingOrderArgs struct {
	// The IDs of the naming rules to define the order for
	NamingRuleIds []string `pulumi:"namingRuleIds"`
}

// The set of arguments for constructing a ServiceNamingOrder resource.
type ServiceNamingOrderArgs struct {
	// The IDs of the naming rules to define the order for
	NamingRuleIds pulumi.StringArrayInput
}

func (ServiceNamingOrderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceNamingOrderArgs)(nil)).Elem()
}

type ServiceNamingOrderInput interface {
	pulumi.Input

	ToServiceNamingOrderOutput() ServiceNamingOrderOutput
	ToServiceNamingOrderOutputWithContext(ctx context.Context) ServiceNamingOrderOutput
}

func (*ServiceNamingOrder) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceNamingOrder)(nil)).Elem()
}

func (i *ServiceNamingOrder) ToServiceNamingOrderOutput() ServiceNamingOrderOutput {
	return i.ToServiceNamingOrderOutputWithContext(context.Background())
}

func (i *ServiceNamingOrder) ToServiceNamingOrderOutputWithContext(ctx context.Context) ServiceNamingOrderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNamingOrderOutput)
}

// ServiceNamingOrderArrayInput is an input type that accepts ServiceNamingOrderArray and ServiceNamingOrderArrayOutput values.
// You can construct a concrete instance of `ServiceNamingOrderArrayInput` via:
//
//	ServiceNamingOrderArray{ ServiceNamingOrderArgs{...} }
type ServiceNamingOrderArrayInput interface {
	pulumi.Input

	ToServiceNamingOrderArrayOutput() ServiceNamingOrderArrayOutput
	ToServiceNamingOrderArrayOutputWithContext(context.Context) ServiceNamingOrderArrayOutput
}

type ServiceNamingOrderArray []ServiceNamingOrderInput

func (ServiceNamingOrderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceNamingOrder)(nil)).Elem()
}

func (i ServiceNamingOrderArray) ToServiceNamingOrderArrayOutput() ServiceNamingOrderArrayOutput {
	return i.ToServiceNamingOrderArrayOutputWithContext(context.Background())
}

func (i ServiceNamingOrderArray) ToServiceNamingOrderArrayOutputWithContext(ctx context.Context) ServiceNamingOrderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNamingOrderArrayOutput)
}

// ServiceNamingOrderMapInput is an input type that accepts ServiceNamingOrderMap and ServiceNamingOrderMapOutput values.
// You can construct a concrete instance of `ServiceNamingOrderMapInput` via:
//
//	ServiceNamingOrderMap{ "key": ServiceNamingOrderArgs{...} }
type ServiceNamingOrderMapInput interface {
	pulumi.Input

	ToServiceNamingOrderMapOutput() ServiceNamingOrderMapOutput
	ToServiceNamingOrderMapOutputWithContext(context.Context) ServiceNamingOrderMapOutput
}

type ServiceNamingOrderMap map[string]ServiceNamingOrderInput

func (ServiceNamingOrderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceNamingOrder)(nil)).Elem()
}

func (i ServiceNamingOrderMap) ToServiceNamingOrderMapOutput() ServiceNamingOrderMapOutput {
	return i.ToServiceNamingOrderMapOutputWithContext(context.Background())
}

func (i ServiceNamingOrderMap) ToServiceNamingOrderMapOutputWithContext(ctx context.Context) ServiceNamingOrderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNamingOrderMapOutput)
}

type ServiceNamingOrderOutput struct{ *pulumi.OutputState }

func (ServiceNamingOrderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceNamingOrder)(nil)).Elem()
}

func (o ServiceNamingOrderOutput) ToServiceNamingOrderOutput() ServiceNamingOrderOutput {
	return o
}

func (o ServiceNamingOrderOutput) ToServiceNamingOrderOutputWithContext(ctx context.Context) ServiceNamingOrderOutput {
	return o
}

// The IDs of the naming rules to define the order for
func (o ServiceNamingOrderOutput) NamingRuleIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceNamingOrder) pulumi.StringArrayOutput { return v.NamingRuleIds }).(pulumi.StringArrayOutput)
}

type ServiceNamingOrderArrayOutput struct{ *pulumi.OutputState }

func (ServiceNamingOrderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceNamingOrder)(nil)).Elem()
}

func (o ServiceNamingOrderArrayOutput) ToServiceNamingOrderArrayOutput() ServiceNamingOrderArrayOutput {
	return o
}

func (o ServiceNamingOrderArrayOutput) ToServiceNamingOrderArrayOutputWithContext(ctx context.Context) ServiceNamingOrderArrayOutput {
	return o
}

func (o ServiceNamingOrderArrayOutput) Index(i pulumi.IntInput) ServiceNamingOrderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceNamingOrder {
		return vs[0].([]*ServiceNamingOrder)[vs[1].(int)]
	}).(ServiceNamingOrderOutput)
}

type ServiceNamingOrderMapOutput struct{ *pulumi.OutputState }

func (ServiceNamingOrderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceNamingOrder)(nil)).Elem()
}

func (o ServiceNamingOrderMapOutput) ToServiceNamingOrderMapOutput() ServiceNamingOrderMapOutput {
	return o
}

func (o ServiceNamingOrderMapOutput) ToServiceNamingOrderMapOutputWithContext(ctx context.Context) ServiceNamingOrderMapOutput {
	return o
}

func (o ServiceNamingOrderMapOutput) MapIndex(k pulumi.StringInput) ServiceNamingOrderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceNamingOrder {
		return vs[0].(map[string]*ServiceNamingOrder)[vs[1].(string)]
	}).(ServiceNamingOrderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceNamingOrderInput)(nil)).Elem(), &ServiceNamingOrder{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceNamingOrderArrayInput)(nil)).Elem(), ServiceNamingOrderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceNamingOrderMapInput)(nil)).Elem(), ServiceNamingOrderMap{})
	pulumi.RegisterOutputType(ServiceNamingOrderOutput{})
	pulumi.RegisterOutputType(ServiceNamingOrderArrayOutput{})
	pulumi.RegisterOutputType(ServiceNamingOrderMapOutput{})
}
