// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type BusinessEventsSecurityContext struct {
	pulumi.CustomResourceState

	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringOutput `pulumi:"insertAfter"`
	// no documentation available
	SecurityContextRule BusinessEventsSecurityContextSecurityContextRuleOutput `pulumi:"securityContextRule"`
}

// NewBusinessEventsSecurityContext registers a new resource with the given unique name, arguments, and options.
func NewBusinessEventsSecurityContext(ctx *pulumi.Context,
	name string, args *BusinessEventsSecurityContextArgs, opts ...pulumi.ResourceOption) (*BusinessEventsSecurityContext, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SecurityContextRule == nil {
		return nil, errors.New("invalid value for required argument 'SecurityContextRule'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BusinessEventsSecurityContext
	err := ctx.RegisterResource("dynatrace:index/businessEventsSecurityContext:BusinessEventsSecurityContext", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBusinessEventsSecurityContext gets an existing BusinessEventsSecurityContext resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBusinessEventsSecurityContext(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BusinessEventsSecurityContextState, opts ...pulumi.ResourceOption) (*BusinessEventsSecurityContext, error) {
	var resource BusinessEventsSecurityContext
	err := ctx.ReadResource("dynatrace:index/businessEventsSecurityContext:BusinessEventsSecurityContext", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BusinessEventsSecurityContext resources.
type businessEventsSecurityContextState struct {
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `pulumi:"insertAfter"`
	// no documentation available
	SecurityContextRule *BusinessEventsSecurityContextSecurityContextRule `pulumi:"securityContextRule"`
}

type BusinessEventsSecurityContextState struct {
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringPtrInput
	// no documentation available
	SecurityContextRule BusinessEventsSecurityContextSecurityContextRulePtrInput
}

func (BusinessEventsSecurityContextState) ElementType() reflect.Type {
	return reflect.TypeOf((*businessEventsSecurityContextState)(nil)).Elem()
}

type businessEventsSecurityContextArgs struct {
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `pulumi:"insertAfter"`
	// no documentation available
	SecurityContextRule BusinessEventsSecurityContextSecurityContextRule `pulumi:"securityContextRule"`
}

// The set of arguments for constructing a BusinessEventsSecurityContext resource.
type BusinessEventsSecurityContextArgs struct {
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringPtrInput
	// no documentation available
	SecurityContextRule BusinessEventsSecurityContextSecurityContextRuleInput
}

func (BusinessEventsSecurityContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*businessEventsSecurityContextArgs)(nil)).Elem()
}

type BusinessEventsSecurityContextInput interface {
	pulumi.Input

	ToBusinessEventsSecurityContextOutput() BusinessEventsSecurityContextOutput
	ToBusinessEventsSecurityContextOutputWithContext(ctx context.Context) BusinessEventsSecurityContextOutput
}

func (*BusinessEventsSecurityContext) ElementType() reflect.Type {
	return reflect.TypeOf((**BusinessEventsSecurityContext)(nil)).Elem()
}

func (i *BusinessEventsSecurityContext) ToBusinessEventsSecurityContextOutput() BusinessEventsSecurityContextOutput {
	return i.ToBusinessEventsSecurityContextOutputWithContext(context.Background())
}

func (i *BusinessEventsSecurityContext) ToBusinessEventsSecurityContextOutputWithContext(ctx context.Context) BusinessEventsSecurityContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessEventsSecurityContextOutput)
}

// BusinessEventsSecurityContextArrayInput is an input type that accepts BusinessEventsSecurityContextArray and BusinessEventsSecurityContextArrayOutput values.
// You can construct a concrete instance of `BusinessEventsSecurityContextArrayInput` via:
//
//	BusinessEventsSecurityContextArray{ BusinessEventsSecurityContextArgs{...} }
type BusinessEventsSecurityContextArrayInput interface {
	pulumi.Input

	ToBusinessEventsSecurityContextArrayOutput() BusinessEventsSecurityContextArrayOutput
	ToBusinessEventsSecurityContextArrayOutputWithContext(context.Context) BusinessEventsSecurityContextArrayOutput
}

type BusinessEventsSecurityContextArray []BusinessEventsSecurityContextInput

func (BusinessEventsSecurityContextArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BusinessEventsSecurityContext)(nil)).Elem()
}

func (i BusinessEventsSecurityContextArray) ToBusinessEventsSecurityContextArrayOutput() BusinessEventsSecurityContextArrayOutput {
	return i.ToBusinessEventsSecurityContextArrayOutputWithContext(context.Background())
}

func (i BusinessEventsSecurityContextArray) ToBusinessEventsSecurityContextArrayOutputWithContext(ctx context.Context) BusinessEventsSecurityContextArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessEventsSecurityContextArrayOutput)
}

// BusinessEventsSecurityContextMapInput is an input type that accepts BusinessEventsSecurityContextMap and BusinessEventsSecurityContextMapOutput values.
// You can construct a concrete instance of `BusinessEventsSecurityContextMapInput` via:
//
//	BusinessEventsSecurityContextMap{ "key": BusinessEventsSecurityContextArgs{...} }
type BusinessEventsSecurityContextMapInput interface {
	pulumi.Input

	ToBusinessEventsSecurityContextMapOutput() BusinessEventsSecurityContextMapOutput
	ToBusinessEventsSecurityContextMapOutputWithContext(context.Context) BusinessEventsSecurityContextMapOutput
}

type BusinessEventsSecurityContextMap map[string]BusinessEventsSecurityContextInput

func (BusinessEventsSecurityContextMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BusinessEventsSecurityContext)(nil)).Elem()
}

func (i BusinessEventsSecurityContextMap) ToBusinessEventsSecurityContextMapOutput() BusinessEventsSecurityContextMapOutput {
	return i.ToBusinessEventsSecurityContextMapOutputWithContext(context.Background())
}

func (i BusinessEventsSecurityContextMap) ToBusinessEventsSecurityContextMapOutputWithContext(ctx context.Context) BusinessEventsSecurityContextMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessEventsSecurityContextMapOutput)
}

type BusinessEventsSecurityContextOutput struct{ *pulumi.OutputState }

func (BusinessEventsSecurityContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BusinessEventsSecurityContext)(nil)).Elem()
}

func (o BusinessEventsSecurityContextOutput) ToBusinessEventsSecurityContextOutput() BusinessEventsSecurityContextOutput {
	return o
}

func (o BusinessEventsSecurityContextOutput) ToBusinessEventsSecurityContextOutputWithContext(ctx context.Context) BusinessEventsSecurityContextOutput {
	return o
}

// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
func (o BusinessEventsSecurityContextOutput) InsertAfter() pulumi.StringOutput {
	return o.ApplyT(func(v *BusinessEventsSecurityContext) pulumi.StringOutput { return v.InsertAfter }).(pulumi.StringOutput)
}

// no documentation available
func (o BusinessEventsSecurityContextOutput) SecurityContextRule() BusinessEventsSecurityContextSecurityContextRuleOutput {
	return o.ApplyT(func(v *BusinessEventsSecurityContext) BusinessEventsSecurityContextSecurityContextRuleOutput {
		return v.SecurityContextRule
	}).(BusinessEventsSecurityContextSecurityContextRuleOutput)
}

type BusinessEventsSecurityContextArrayOutput struct{ *pulumi.OutputState }

func (BusinessEventsSecurityContextArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BusinessEventsSecurityContext)(nil)).Elem()
}

func (o BusinessEventsSecurityContextArrayOutput) ToBusinessEventsSecurityContextArrayOutput() BusinessEventsSecurityContextArrayOutput {
	return o
}

func (o BusinessEventsSecurityContextArrayOutput) ToBusinessEventsSecurityContextArrayOutputWithContext(ctx context.Context) BusinessEventsSecurityContextArrayOutput {
	return o
}

func (o BusinessEventsSecurityContextArrayOutput) Index(i pulumi.IntInput) BusinessEventsSecurityContextOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BusinessEventsSecurityContext {
		return vs[0].([]*BusinessEventsSecurityContext)[vs[1].(int)]
	}).(BusinessEventsSecurityContextOutput)
}

type BusinessEventsSecurityContextMapOutput struct{ *pulumi.OutputState }

func (BusinessEventsSecurityContextMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BusinessEventsSecurityContext)(nil)).Elem()
}

func (o BusinessEventsSecurityContextMapOutput) ToBusinessEventsSecurityContextMapOutput() BusinessEventsSecurityContextMapOutput {
	return o
}

func (o BusinessEventsSecurityContextMapOutput) ToBusinessEventsSecurityContextMapOutputWithContext(ctx context.Context) BusinessEventsSecurityContextMapOutput {
	return o
}

func (o BusinessEventsSecurityContextMapOutput) MapIndex(k pulumi.StringInput) BusinessEventsSecurityContextOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BusinessEventsSecurityContext {
		return vs[0].(map[string]*BusinessEventsSecurityContext)[vs[1].(string)]
	}).(BusinessEventsSecurityContextOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BusinessEventsSecurityContextInput)(nil)).Elem(), &BusinessEventsSecurityContext{})
	pulumi.RegisterInputType(reflect.TypeOf((*BusinessEventsSecurityContextArrayInput)(nil)).Elem(), BusinessEventsSecurityContextArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BusinessEventsSecurityContextMapInput)(nil)).Elem(), BusinessEventsSecurityContextMap{})
	pulumi.RegisterOutputType(BusinessEventsSecurityContextOutput{})
	pulumi.RegisterOutputType(BusinessEventsSecurityContextArrayOutput{})
	pulumi.RegisterOutputType(BusinessEventsSecurityContextMapOutput{})
}
