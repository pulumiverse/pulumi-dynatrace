// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type ManagedPreferences struct {
	pulumi.CustomResourceState

	// Default: `false`
	CertificateManagementEnabled pulumi.BoolPtrOutput `pulumi:"certificateManagementEnabled"`
	// Default: `true`
	CertificateManagementPossible pulumi.BoolPtrOutput `pulumi:"certificateManagementPossible"`
	// If true, each new user will get an invitation to set up a Dynatrace user account to access Dynatrace support resources user upon first login. Default: `false`
	CommunityCreateUser pulumi.BoolPtrOutput `pulumi:"communityCreateUser"`
	// If true, results from Documentation are included in platform search. Default: `false`
	CommunityExternalSearch pulumi.BoolPtrOutput `pulumi:"communityExternalSearch"`
	// If true, live, in-product assistance with our Product Experts is enabled. Default: `false`
	HelpChatEnabled pulumi.BoolPtrOutput `pulumi:"helpChatEnabled"`
	// If true, audited, read-only remote access to your Dynatrace configuration settings is allowed. Default: `false`
	ReadOnlyRemoteAccessAllowed pulumi.BoolPtrOutput `pulumi:"readOnlyRemoteAccessAllowed"`
	// If true, audited access to your Dynatrace cluster is allowed by approved Dynatrace employees otherwise by privileged Dynatrace employees. Default: `false`
	RemoteAccessOnDemandOnly pulumi.BoolPtrOutput `pulumi:"remoteAccessOnDemandOnly"`
	// If true, Dynatrace OneAgent monitors Dynatrace. Default: `true`
	RuxitMonitorsRuxit pulumi.BoolOutput `pulumi:"ruxitMonitorsRuxit"`
	// If true, audited remote-access to your Dynatrace configuration is allowed settings. Default: `true`
	SupportAllowRemoteAccess pulumi.BoolPtrOutput `pulumi:"supportAllowRemoteAccess"`
	// If true, usage and billing information will be reported.
	SupportSendBilling pulumi.BoolOutput `pulumi:"supportSendBilling"`
	// If true, Dynatrace cluster health will be reported.
	SupportSendClusterHealth pulumi.BoolOutput `pulumi:"supportSendClusterHealth"`
	// If true, Dynatrace cluster health and OneAgent events will be reported. Default: `true`
	SupportSendEvents pulumi.BoolPtrOutput `pulumi:"supportSendEvents"`
	// If true, usage and billing information will NOT be reported.
	SuppressNonBillingRelevantData pulumi.BoolOutput `pulumi:"suppressNonBillingRelevantData"`
	// Default: `false`
	TelemetrySharing pulumi.BoolPtrOutput `pulumi:"telemetrySharing"`
}

// NewManagedPreferences registers a new resource with the given unique name, arguments, and options.
func NewManagedPreferences(ctx *pulumi.Context,
	name string, args *ManagedPreferencesArgs, opts ...pulumi.ResourceOption) (*ManagedPreferences, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RuxitMonitorsRuxit == nil {
		return nil, errors.New("invalid value for required argument 'RuxitMonitorsRuxit'")
	}
	if args.SupportSendBilling == nil {
		return nil, errors.New("invalid value for required argument 'SupportSendBilling'")
	}
	if args.SupportSendClusterHealth == nil {
		return nil, errors.New("invalid value for required argument 'SupportSendClusterHealth'")
	}
	if args.SuppressNonBillingRelevantData == nil {
		return nil, errors.New("invalid value for required argument 'SuppressNonBillingRelevantData'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ManagedPreferences
	err := ctx.RegisterResource("dynatrace:index/managedPreferences:ManagedPreferences", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedPreferences gets an existing ManagedPreferences resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedPreferences(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedPreferencesState, opts ...pulumi.ResourceOption) (*ManagedPreferences, error) {
	var resource ManagedPreferences
	err := ctx.ReadResource("dynatrace:index/managedPreferences:ManagedPreferences", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedPreferences resources.
type managedPreferencesState struct {
	// Default: `false`
	CertificateManagementEnabled *bool `pulumi:"certificateManagementEnabled"`
	// Default: `true`
	CertificateManagementPossible *bool `pulumi:"certificateManagementPossible"`
	// If true, each new user will get an invitation to set up a Dynatrace user account to access Dynatrace support resources user upon first login. Default: `false`
	CommunityCreateUser *bool `pulumi:"communityCreateUser"`
	// If true, results from Documentation are included in platform search. Default: `false`
	CommunityExternalSearch *bool `pulumi:"communityExternalSearch"`
	// If true, live, in-product assistance with our Product Experts is enabled. Default: `false`
	HelpChatEnabled *bool `pulumi:"helpChatEnabled"`
	// If true, audited, read-only remote access to your Dynatrace configuration settings is allowed. Default: `false`
	ReadOnlyRemoteAccessAllowed *bool `pulumi:"readOnlyRemoteAccessAllowed"`
	// If true, audited access to your Dynatrace cluster is allowed by approved Dynatrace employees otherwise by privileged Dynatrace employees. Default: `false`
	RemoteAccessOnDemandOnly *bool `pulumi:"remoteAccessOnDemandOnly"`
	// If true, Dynatrace OneAgent monitors Dynatrace. Default: `true`
	RuxitMonitorsRuxit *bool `pulumi:"ruxitMonitorsRuxit"`
	// If true, audited remote-access to your Dynatrace configuration is allowed settings. Default: `true`
	SupportAllowRemoteAccess *bool `pulumi:"supportAllowRemoteAccess"`
	// If true, usage and billing information will be reported.
	SupportSendBilling *bool `pulumi:"supportSendBilling"`
	// If true, Dynatrace cluster health will be reported.
	SupportSendClusterHealth *bool `pulumi:"supportSendClusterHealth"`
	// If true, Dynatrace cluster health and OneAgent events will be reported. Default: `true`
	SupportSendEvents *bool `pulumi:"supportSendEvents"`
	// If true, usage and billing information will NOT be reported.
	SuppressNonBillingRelevantData *bool `pulumi:"suppressNonBillingRelevantData"`
	// Default: `false`
	TelemetrySharing *bool `pulumi:"telemetrySharing"`
}

type ManagedPreferencesState struct {
	// Default: `false`
	CertificateManagementEnabled pulumi.BoolPtrInput
	// Default: `true`
	CertificateManagementPossible pulumi.BoolPtrInput
	// If true, each new user will get an invitation to set up a Dynatrace user account to access Dynatrace support resources user upon first login. Default: `false`
	CommunityCreateUser pulumi.BoolPtrInput
	// If true, results from Documentation are included in platform search. Default: `false`
	CommunityExternalSearch pulumi.BoolPtrInput
	// If true, live, in-product assistance with our Product Experts is enabled. Default: `false`
	HelpChatEnabled pulumi.BoolPtrInput
	// If true, audited, read-only remote access to your Dynatrace configuration settings is allowed. Default: `false`
	ReadOnlyRemoteAccessAllowed pulumi.BoolPtrInput
	// If true, audited access to your Dynatrace cluster is allowed by approved Dynatrace employees otherwise by privileged Dynatrace employees. Default: `false`
	RemoteAccessOnDemandOnly pulumi.BoolPtrInput
	// If true, Dynatrace OneAgent monitors Dynatrace. Default: `true`
	RuxitMonitorsRuxit pulumi.BoolPtrInput
	// If true, audited remote-access to your Dynatrace configuration is allowed settings. Default: `true`
	SupportAllowRemoteAccess pulumi.BoolPtrInput
	// If true, usage and billing information will be reported.
	SupportSendBilling pulumi.BoolPtrInput
	// If true, Dynatrace cluster health will be reported.
	SupportSendClusterHealth pulumi.BoolPtrInput
	// If true, Dynatrace cluster health and OneAgent events will be reported. Default: `true`
	SupportSendEvents pulumi.BoolPtrInput
	// If true, usage and billing information will NOT be reported.
	SuppressNonBillingRelevantData pulumi.BoolPtrInput
	// Default: `false`
	TelemetrySharing pulumi.BoolPtrInput
}

func (ManagedPreferencesState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedPreferencesState)(nil)).Elem()
}

type managedPreferencesArgs struct {
	// Default: `false`
	CertificateManagementEnabled *bool `pulumi:"certificateManagementEnabled"`
	// Default: `true`
	CertificateManagementPossible *bool `pulumi:"certificateManagementPossible"`
	// If true, each new user will get an invitation to set up a Dynatrace user account to access Dynatrace support resources user upon first login. Default: `false`
	CommunityCreateUser *bool `pulumi:"communityCreateUser"`
	// If true, results from Documentation are included in platform search. Default: `false`
	CommunityExternalSearch *bool `pulumi:"communityExternalSearch"`
	// If true, live, in-product assistance with our Product Experts is enabled. Default: `false`
	HelpChatEnabled *bool `pulumi:"helpChatEnabled"`
	// If true, audited, read-only remote access to your Dynatrace configuration settings is allowed. Default: `false`
	ReadOnlyRemoteAccessAllowed *bool `pulumi:"readOnlyRemoteAccessAllowed"`
	// If true, audited access to your Dynatrace cluster is allowed by approved Dynatrace employees otherwise by privileged Dynatrace employees. Default: `false`
	RemoteAccessOnDemandOnly *bool `pulumi:"remoteAccessOnDemandOnly"`
	// If true, Dynatrace OneAgent monitors Dynatrace. Default: `true`
	RuxitMonitorsRuxit bool `pulumi:"ruxitMonitorsRuxit"`
	// If true, audited remote-access to your Dynatrace configuration is allowed settings. Default: `true`
	SupportAllowRemoteAccess *bool `pulumi:"supportAllowRemoteAccess"`
	// If true, usage and billing information will be reported.
	SupportSendBilling bool `pulumi:"supportSendBilling"`
	// If true, Dynatrace cluster health will be reported.
	SupportSendClusterHealth bool `pulumi:"supportSendClusterHealth"`
	// If true, Dynatrace cluster health and OneAgent events will be reported. Default: `true`
	SupportSendEvents *bool `pulumi:"supportSendEvents"`
	// If true, usage and billing information will NOT be reported.
	SuppressNonBillingRelevantData bool `pulumi:"suppressNonBillingRelevantData"`
	// Default: `false`
	TelemetrySharing *bool `pulumi:"telemetrySharing"`
}

// The set of arguments for constructing a ManagedPreferences resource.
type ManagedPreferencesArgs struct {
	// Default: `false`
	CertificateManagementEnabled pulumi.BoolPtrInput
	// Default: `true`
	CertificateManagementPossible pulumi.BoolPtrInput
	// If true, each new user will get an invitation to set up a Dynatrace user account to access Dynatrace support resources user upon first login. Default: `false`
	CommunityCreateUser pulumi.BoolPtrInput
	// If true, results from Documentation are included in platform search. Default: `false`
	CommunityExternalSearch pulumi.BoolPtrInput
	// If true, live, in-product assistance with our Product Experts is enabled. Default: `false`
	HelpChatEnabled pulumi.BoolPtrInput
	// If true, audited, read-only remote access to your Dynatrace configuration settings is allowed. Default: `false`
	ReadOnlyRemoteAccessAllowed pulumi.BoolPtrInput
	// If true, audited access to your Dynatrace cluster is allowed by approved Dynatrace employees otherwise by privileged Dynatrace employees. Default: `false`
	RemoteAccessOnDemandOnly pulumi.BoolPtrInput
	// If true, Dynatrace OneAgent monitors Dynatrace. Default: `true`
	RuxitMonitorsRuxit pulumi.BoolInput
	// If true, audited remote-access to your Dynatrace configuration is allowed settings. Default: `true`
	SupportAllowRemoteAccess pulumi.BoolPtrInput
	// If true, usage and billing information will be reported.
	SupportSendBilling pulumi.BoolInput
	// If true, Dynatrace cluster health will be reported.
	SupportSendClusterHealth pulumi.BoolInput
	// If true, Dynatrace cluster health and OneAgent events will be reported. Default: `true`
	SupportSendEvents pulumi.BoolPtrInput
	// If true, usage and billing information will NOT be reported.
	SuppressNonBillingRelevantData pulumi.BoolInput
	// Default: `false`
	TelemetrySharing pulumi.BoolPtrInput
}

func (ManagedPreferencesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedPreferencesArgs)(nil)).Elem()
}

type ManagedPreferencesInput interface {
	pulumi.Input

	ToManagedPreferencesOutput() ManagedPreferencesOutput
	ToManagedPreferencesOutputWithContext(ctx context.Context) ManagedPreferencesOutput
}

func (*ManagedPreferences) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedPreferences)(nil)).Elem()
}

func (i *ManagedPreferences) ToManagedPreferencesOutput() ManagedPreferencesOutput {
	return i.ToManagedPreferencesOutputWithContext(context.Background())
}

func (i *ManagedPreferences) ToManagedPreferencesOutputWithContext(ctx context.Context) ManagedPreferencesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedPreferencesOutput)
}

// ManagedPreferencesArrayInput is an input type that accepts ManagedPreferencesArray and ManagedPreferencesArrayOutput values.
// You can construct a concrete instance of `ManagedPreferencesArrayInput` via:
//
//	ManagedPreferencesArray{ ManagedPreferencesArgs{...} }
type ManagedPreferencesArrayInput interface {
	pulumi.Input

	ToManagedPreferencesArrayOutput() ManagedPreferencesArrayOutput
	ToManagedPreferencesArrayOutputWithContext(context.Context) ManagedPreferencesArrayOutput
}

type ManagedPreferencesArray []ManagedPreferencesInput

func (ManagedPreferencesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedPreferences)(nil)).Elem()
}

func (i ManagedPreferencesArray) ToManagedPreferencesArrayOutput() ManagedPreferencesArrayOutput {
	return i.ToManagedPreferencesArrayOutputWithContext(context.Background())
}

func (i ManagedPreferencesArray) ToManagedPreferencesArrayOutputWithContext(ctx context.Context) ManagedPreferencesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedPreferencesArrayOutput)
}

// ManagedPreferencesMapInput is an input type that accepts ManagedPreferencesMap and ManagedPreferencesMapOutput values.
// You can construct a concrete instance of `ManagedPreferencesMapInput` via:
//
//	ManagedPreferencesMap{ "key": ManagedPreferencesArgs{...} }
type ManagedPreferencesMapInput interface {
	pulumi.Input

	ToManagedPreferencesMapOutput() ManagedPreferencesMapOutput
	ToManagedPreferencesMapOutputWithContext(context.Context) ManagedPreferencesMapOutput
}

type ManagedPreferencesMap map[string]ManagedPreferencesInput

func (ManagedPreferencesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedPreferences)(nil)).Elem()
}

func (i ManagedPreferencesMap) ToManagedPreferencesMapOutput() ManagedPreferencesMapOutput {
	return i.ToManagedPreferencesMapOutputWithContext(context.Background())
}

func (i ManagedPreferencesMap) ToManagedPreferencesMapOutputWithContext(ctx context.Context) ManagedPreferencesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedPreferencesMapOutput)
}

type ManagedPreferencesOutput struct{ *pulumi.OutputState }

func (ManagedPreferencesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedPreferences)(nil)).Elem()
}

func (o ManagedPreferencesOutput) ToManagedPreferencesOutput() ManagedPreferencesOutput {
	return o
}

func (o ManagedPreferencesOutput) ToManagedPreferencesOutputWithContext(ctx context.Context) ManagedPreferencesOutput {
	return o
}

// Default: `false`
func (o ManagedPreferencesOutput) CertificateManagementEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedPreferences) pulumi.BoolPtrOutput { return v.CertificateManagementEnabled }).(pulumi.BoolPtrOutput)
}

// Default: `true`
func (o ManagedPreferencesOutput) CertificateManagementPossible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedPreferences) pulumi.BoolPtrOutput { return v.CertificateManagementPossible }).(pulumi.BoolPtrOutput)
}

// If true, each new user will get an invitation to set up a Dynatrace user account to access Dynatrace support resources user upon first login. Default: `false`
func (o ManagedPreferencesOutput) CommunityCreateUser() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedPreferences) pulumi.BoolPtrOutput { return v.CommunityCreateUser }).(pulumi.BoolPtrOutput)
}

// If true, results from Documentation are included in platform search. Default: `false`
func (o ManagedPreferencesOutput) CommunityExternalSearch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedPreferences) pulumi.BoolPtrOutput { return v.CommunityExternalSearch }).(pulumi.BoolPtrOutput)
}

// If true, live, in-product assistance with our Product Experts is enabled. Default: `false`
func (o ManagedPreferencesOutput) HelpChatEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedPreferences) pulumi.BoolPtrOutput { return v.HelpChatEnabled }).(pulumi.BoolPtrOutput)
}

// If true, audited, read-only remote access to your Dynatrace configuration settings is allowed. Default: `false`
func (o ManagedPreferencesOutput) ReadOnlyRemoteAccessAllowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedPreferences) pulumi.BoolPtrOutput { return v.ReadOnlyRemoteAccessAllowed }).(pulumi.BoolPtrOutput)
}

// If true, audited access to your Dynatrace cluster is allowed by approved Dynatrace employees otherwise by privileged Dynatrace employees. Default: `false`
func (o ManagedPreferencesOutput) RemoteAccessOnDemandOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedPreferences) pulumi.BoolPtrOutput { return v.RemoteAccessOnDemandOnly }).(pulumi.BoolPtrOutput)
}

// If true, Dynatrace OneAgent monitors Dynatrace. Default: `true`
func (o ManagedPreferencesOutput) RuxitMonitorsRuxit() pulumi.BoolOutput {
	return o.ApplyT(func(v *ManagedPreferences) pulumi.BoolOutput { return v.RuxitMonitorsRuxit }).(pulumi.BoolOutput)
}

// If true, audited remote-access to your Dynatrace configuration is allowed settings. Default: `true`
func (o ManagedPreferencesOutput) SupportAllowRemoteAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedPreferences) pulumi.BoolPtrOutput { return v.SupportAllowRemoteAccess }).(pulumi.BoolPtrOutput)
}

// If true, usage and billing information will be reported.
func (o ManagedPreferencesOutput) SupportSendBilling() pulumi.BoolOutput {
	return o.ApplyT(func(v *ManagedPreferences) pulumi.BoolOutput { return v.SupportSendBilling }).(pulumi.BoolOutput)
}

// If true, Dynatrace cluster health will be reported.
func (o ManagedPreferencesOutput) SupportSendClusterHealth() pulumi.BoolOutput {
	return o.ApplyT(func(v *ManagedPreferences) pulumi.BoolOutput { return v.SupportSendClusterHealth }).(pulumi.BoolOutput)
}

// If true, Dynatrace cluster health and OneAgent events will be reported. Default: `true`
func (o ManagedPreferencesOutput) SupportSendEvents() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedPreferences) pulumi.BoolPtrOutput { return v.SupportSendEvents }).(pulumi.BoolPtrOutput)
}

// If true, usage and billing information will NOT be reported.
func (o ManagedPreferencesOutput) SuppressNonBillingRelevantData() pulumi.BoolOutput {
	return o.ApplyT(func(v *ManagedPreferences) pulumi.BoolOutput { return v.SuppressNonBillingRelevantData }).(pulumi.BoolOutput)
}

// Default: `false`
func (o ManagedPreferencesOutput) TelemetrySharing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedPreferences) pulumi.BoolPtrOutput { return v.TelemetrySharing }).(pulumi.BoolPtrOutput)
}

type ManagedPreferencesArrayOutput struct{ *pulumi.OutputState }

func (ManagedPreferencesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedPreferences)(nil)).Elem()
}

func (o ManagedPreferencesArrayOutput) ToManagedPreferencesArrayOutput() ManagedPreferencesArrayOutput {
	return o
}

func (o ManagedPreferencesArrayOutput) ToManagedPreferencesArrayOutputWithContext(ctx context.Context) ManagedPreferencesArrayOutput {
	return o
}

func (o ManagedPreferencesArrayOutput) Index(i pulumi.IntInput) ManagedPreferencesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ManagedPreferences {
		return vs[0].([]*ManagedPreferences)[vs[1].(int)]
	}).(ManagedPreferencesOutput)
}

type ManagedPreferencesMapOutput struct{ *pulumi.OutputState }

func (ManagedPreferencesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedPreferences)(nil)).Elem()
}

func (o ManagedPreferencesMapOutput) ToManagedPreferencesMapOutput() ManagedPreferencesMapOutput {
	return o
}

func (o ManagedPreferencesMapOutput) ToManagedPreferencesMapOutputWithContext(ctx context.Context) ManagedPreferencesMapOutput {
	return o
}

func (o ManagedPreferencesMapOutput) MapIndex(k pulumi.StringInput) ManagedPreferencesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ManagedPreferences {
		return vs[0].(map[string]*ManagedPreferences)[vs[1].(string)]
	}).(ManagedPreferencesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedPreferencesInput)(nil)).Elem(), &ManagedPreferences{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedPreferencesArrayInput)(nil)).Elem(), ManagedPreferencesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedPreferencesMapInput)(nil)).Elem(), ManagedPreferencesMap{})
	pulumi.RegisterOutputType(ManagedPreferencesOutput{})
	pulumi.RegisterOutputType(ManagedPreferencesArrayOutput{})
	pulumi.RegisterOutputType(ManagedPreferencesMapOutput{})
}
