// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OpenpipelineV2UserEventsIngestsources struct {
	pulumi.CustomResourceState

	// Default Bucket
	DefaultBucket pulumi.StringPtrOutput `pulumi:"defaultBucket"`
	// Endpoint display name
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Endpoint segment
	PathSegment pulumi.StringOutput `pulumi:"pathSegment"`
	// Processing stage
	Processing OpenpipelineV2UserEventsIngestsourcesProcessingOutput `pulumi:"processing"`
	// Static routing of endpoint
	StaticRouting OpenpipelineV2UserEventsIngestsourcesStaticRoutingPtrOutput `pulumi:"staticRouting"`
}

// NewOpenpipelineV2UserEventsIngestsources registers a new resource with the given unique name, arguments, and options.
func NewOpenpipelineV2UserEventsIngestsources(ctx *pulumi.Context,
	name string, args *OpenpipelineV2UserEventsIngestsourcesArgs, opts ...pulumi.ResourceOption) (*OpenpipelineV2UserEventsIngestsources, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.PathSegment == nil {
		return nil, errors.New("invalid value for required argument 'PathSegment'")
	}
	if args.Processing == nil {
		return nil, errors.New("invalid value for required argument 'Processing'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenpipelineV2UserEventsIngestsources
	err := ctx.RegisterResource("dynatrace:index/openpipelineV2UserEventsIngestsources:OpenpipelineV2UserEventsIngestsources", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenpipelineV2UserEventsIngestsources gets an existing OpenpipelineV2UserEventsIngestsources resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenpipelineV2UserEventsIngestsources(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenpipelineV2UserEventsIngestsourcesState, opts ...pulumi.ResourceOption) (*OpenpipelineV2UserEventsIngestsources, error) {
	var resource OpenpipelineV2UserEventsIngestsources
	err := ctx.ReadResource("dynatrace:index/openpipelineV2UserEventsIngestsources:OpenpipelineV2UserEventsIngestsources", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenpipelineV2UserEventsIngestsources resources.
type openpipelineV2UserEventsIngestsourcesState struct {
	// Default Bucket
	DefaultBucket *string `pulumi:"defaultBucket"`
	// Endpoint display name
	DisplayName *string `pulumi:"displayName"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// Endpoint segment
	PathSegment *string `pulumi:"pathSegment"`
	// Processing stage
	Processing *OpenpipelineV2UserEventsIngestsourcesProcessing `pulumi:"processing"`
	// Static routing of endpoint
	StaticRouting *OpenpipelineV2UserEventsIngestsourcesStaticRouting `pulumi:"staticRouting"`
}

type OpenpipelineV2UserEventsIngestsourcesState struct {
	// Default Bucket
	DefaultBucket pulumi.StringPtrInput
	// Endpoint display name
	DisplayName pulumi.StringPtrInput
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// Endpoint segment
	PathSegment pulumi.StringPtrInput
	// Processing stage
	Processing OpenpipelineV2UserEventsIngestsourcesProcessingPtrInput
	// Static routing of endpoint
	StaticRouting OpenpipelineV2UserEventsIngestsourcesStaticRoutingPtrInput
}

func (OpenpipelineV2UserEventsIngestsourcesState) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2UserEventsIngestsourcesState)(nil)).Elem()
}

type openpipelineV2UserEventsIngestsourcesArgs struct {
	// Default Bucket
	DefaultBucket *string `pulumi:"defaultBucket"`
	// Endpoint display name
	DisplayName string `pulumi:"displayName"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// Endpoint segment
	PathSegment string `pulumi:"pathSegment"`
	// Processing stage
	Processing OpenpipelineV2UserEventsIngestsourcesProcessing `pulumi:"processing"`
	// Static routing of endpoint
	StaticRouting *OpenpipelineV2UserEventsIngestsourcesStaticRouting `pulumi:"staticRouting"`
}

// The set of arguments for constructing a OpenpipelineV2UserEventsIngestsources resource.
type OpenpipelineV2UserEventsIngestsourcesArgs struct {
	// Default Bucket
	DefaultBucket pulumi.StringPtrInput
	// Endpoint display name
	DisplayName pulumi.StringInput
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// Endpoint segment
	PathSegment pulumi.StringInput
	// Processing stage
	Processing OpenpipelineV2UserEventsIngestsourcesProcessingInput
	// Static routing of endpoint
	StaticRouting OpenpipelineV2UserEventsIngestsourcesStaticRoutingPtrInput
}

func (OpenpipelineV2UserEventsIngestsourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2UserEventsIngestsourcesArgs)(nil)).Elem()
}

type OpenpipelineV2UserEventsIngestsourcesInput interface {
	pulumi.Input

	ToOpenpipelineV2UserEventsIngestsourcesOutput() OpenpipelineV2UserEventsIngestsourcesOutput
	ToOpenpipelineV2UserEventsIngestsourcesOutputWithContext(ctx context.Context) OpenpipelineV2UserEventsIngestsourcesOutput
}

func (*OpenpipelineV2UserEventsIngestsources) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2UserEventsIngestsources)(nil)).Elem()
}

func (i *OpenpipelineV2UserEventsIngestsources) ToOpenpipelineV2UserEventsIngestsourcesOutput() OpenpipelineV2UserEventsIngestsourcesOutput {
	return i.ToOpenpipelineV2UserEventsIngestsourcesOutputWithContext(context.Background())
}

func (i *OpenpipelineV2UserEventsIngestsources) ToOpenpipelineV2UserEventsIngestsourcesOutputWithContext(ctx context.Context) OpenpipelineV2UserEventsIngestsourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2UserEventsIngestsourcesOutput)
}

// OpenpipelineV2UserEventsIngestsourcesArrayInput is an input type that accepts OpenpipelineV2UserEventsIngestsourcesArray and OpenpipelineV2UserEventsIngestsourcesArrayOutput values.
// You can construct a concrete instance of `OpenpipelineV2UserEventsIngestsourcesArrayInput` via:
//
//	OpenpipelineV2UserEventsIngestsourcesArray{ OpenpipelineV2UserEventsIngestsourcesArgs{...} }
type OpenpipelineV2UserEventsIngestsourcesArrayInput interface {
	pulumi.Input

	ToOpenpipelineV2UserEventsIngestsourcesArrayOutput() OpenpipelineV2UserEventsIngestsourcesArrayOutput
	ToOpenpipelineV2UserEventsIngestsourcesArrayOutputWithContext(context.Context) OpenpipelineV2UserEventsIngestsourcesArrayOutput
}

type OpenpipelineV2UserEventsIngestsourcesArray []OpenpipelineV2UserEventsIngestsourcesInput

func (OpenpipelineV2UserEventsIngestsourcesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2UserEventsIngestsources)(nil)).Elem()
}

func (i OpenpipelineV2UserEventsIngestsourcesArray) ToOpenpipelineV2UserEventsIngestsourcesArrayOutput() OpenpipelineV2UserEventsIngestsourcesArrayOutput {
	return i.ToOpenpipelineV2UserEventsIngestsourcesArrayOutputWithContext(context.Background())
}

func (i OpenpipelineV2UserEventsIngestsourcesArray) ToOpenpipelineV2UserEventsIngestsourcesArrayOutputWithContext(ctx context.Context) OpenpipelineV2UserEventsIngestsourcesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2UserEventsIngestsourcesArrayOutput)
}

// OpenpipelineV2UserEventsIngestsourcesMapInput is an input type that accepts OpenpipelineV2UserEventsIngestsourcesMap and OpenpipelineV2UserEventsIngestsourcesMapOutput values.
// You can construct a concrete instance of `OpenpipelineV2UserEventsIngestsourcesMapInput` via:
//
//	OpenpipelineV2UserEventsIngestsourcesMap{ "key": OpenpipelineV2UserEventsIngestsourcesArgs{...} }
type OpenpipelineV2UserEventsIngestsourcesMapInput interface {
	pulumi.Input

	ToOpenpipelineV2UserEventsIngestsourcesMapOutput() OpenpipelineV2UserEventsIngestsourcesMapOutput
	ToOpenpipelineV2UserEventsIngestsourcesMapOutputWithContext(context.Context) OpenpipelineV2UserEventsIngestsourcesMapOutput
}

type OpenpipelineV2UserEventsIngestsourcesMap map[string]OpenpipelineV2UserEventsIngestsourcesInput

func (OpenpipelineV2UserEventsIngestsourcesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2UserEventsIngestsources)(nil)).Elem()
}

func (i OpenpipelineV2UserEventsIngestsourcesMap) ToOpenpipelineV2UserEventsIngestsourcesMapOutput() OpenpipelineV2UserEventsIngestsourcesMapOutput {
	return i.ToOpenpipelineV2UserEventsIngestsourcesMapOutputWithContext(context.Background())
}

func (i OpenpipelineV2UserEventsIngestsourcesMap) ToOpenpipelineV2UserEventsIngestsourcesMapOutputWithContext(ctx context.Context) OpenpipelineV2UserEventsIngestsourcesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2UserEventsIngestsourcesMapOutput)
}

type OpenpipelineV2UserEventsIngestsourcesOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2UserEventsIngestsourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2UserEventsIngestsources)(nil)).Elem()
}

func (o OpenpipelineV2UserEventsIngestsourcesOutput) ToOpenpipelineV2UserEventsIngestsourcesOutput() OpenpipelineV2UserEventsIngestsourcesOutput {
	return o
}

func (o OpenpipelineV2UserEventsIngestsourcesOutput) ToOpenpipelineV2UserEventsIngestsourcesOutputWithContext(ctx context.Context) OpenpipelineV2UserEventsIngestsourcesOutput {
	return o
}

// Default Bucket
func (o OpenpipelineV2UserEventsIngestsourcesOutput) DefaultBucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenpipelineV2UserEventsIngestsources) pulumi.StringPtrOutput { return v.DefaultBucket }).(pulumi.StringPtrOutput)
}

// Endpoint display name
func (o OpenpipelineV2UserEventsIngestsourcesOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenpipelineV2UserEventsIngestsources) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// This setting is enabled (`true`) or disabled (`false`)
func (o OpenpipelineV2UserEventsIngestsourcesOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *OpenpipelineV2UserEventsIngestsources) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Endpoint segment
func (o OpenpipelineV2UserEventsIngestsourcesOutput) PathSegment() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenpipelineV2UserEventsIngestsources) pulumi.StringOutput { return v.PathSegment }).(pulumi.StringOutput)
}

// Processing stage
func (o OpenpipelineV2UserEventsIngestsourcesOutput) Processing() OpenpipelineV2UserEventsIngestsourcesProcessingOutput {
	return o.ApplyT(func(v *OpenpipelineV2UserEventsIngestsources) OpenpipelineV2UserEventsIngestsourcesProcessingOutput {
		return v.Processing
	}).(OpenpipelineV2UserEventsIngestsourcesProcessingOutput)
}

// Static routing of endpoint
func (o OpenpipelineV2UserEventsIngestsourcesOutput) StaticRouting() OpenpipelineV2UserEventsIngestsourcesStaticRoutingPtrOutput {
	return o.ApplyT(func(v *OpenpipelineV2UserEventsIngestsources) OpenpipelineV2UserEventsIngestsourcesStaticRoutingPtrOutput {
		return v.StaticRouting
	}).(OpenpipelineV2UserEventsIngestsourcesStaticRoutingPtrOutput)
}

type OpenpipelineV2UserEventsIngestsourcesArrayOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2UserEventsIngestsourcesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2UserEventsIngestsources)(nil)).Elem()
}

func (o OpenpipelineV2UserEventsIngestsourcesArrayOutput) ToOpenpipelineV2UserEventsIngestsourcesArrayOutput() OpenpipelineV2UserEventsIngestsourcesArrayOutput {
	return o
}

func (o OpenpipelineV2UserEventsIngestsourcesArrayOutput) ToOpenpipelineV2UserEventsIngestsourcesArrayOutputWithContext(ctx context.Context) OpenpipelineV2UserEventsIngestsourcesArrayOutput {
	return o
}

func (o OpenpipelineV2UserEventsIngestsourcesArrayOutput) Index(i pulumi.IntInput) OpenpipelineV2UserEventsIngestsourcesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenpipelineV2UserEventsIngestsources {
		return vs[0].([]*OpenpipelineV2UserEventsIngestsources)[vs[1].(int)]
	}).(OpenpipelineV2UserEventsIngestsourcesOutput)
}

type OpenpipelineV2UserEventsIngestsourcesMapOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2UserEventsIngestsourcesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2UserEventsIngestsources)(nil)).Elem()
}

func (o OpenpipelineV2UserEventsIngestsourcesMapOutput) ToOpenpipelineV2UserEventsIngestsourcesMapOutput() OpenpipelineV2UserEventsIngestsourcesMapOutput {
	return o
}

func (o OpenpipelineV2UserEventsIngestsourcesMapOutput) ToOpenpipelineV2UserEventsIngestsourcesMapOutputWithContext(ctx context.Context) OpenpipelineV2UserEventsIngestsourcesMapOutput {
	return o
}

func (o OpenpipelineV2UserEventsIngestsourcesMapOutput) MapIndex(k pulumi.StringInput) OpenpipelineV2UserEventsIngestsourcesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenpipelineV2UserEventsIngestsources {
		return vs[0].(map[string]*OpenpipelineV2UserEventsIngestsources)[vs[1].(string)]
	}).(OpenpipelineV2UserEventsIngestsourcesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2UserEventsIngestsourcesInput)(nil)).Elem(), &OpenpipelineV2UserEventsIngestsources{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2UserEventsIngestsourcesArrayInput)(nil)).Elem(), OpenpipelineV2UserEventsIngestsourcesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2UserEventsIngestsourcesMapInput)(nil)).Elem(), OpenpipelineV2UserEventsIngestsourcesMap{})
	pulumi.RegisterOutputType(OpenpipelineV2UserEventsIngestsourcesOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2UserEventsIngestsourcesArrayOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2UserEventsIngestsourcesMapOutput{})
}
