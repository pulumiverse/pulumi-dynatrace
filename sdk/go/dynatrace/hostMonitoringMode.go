// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type HostMonitoringMode struct {
	pulumi.CustomResourceState

	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId pulumi.StringOutput `pulumi:"hostId"`
	// Possible Values: `DISCOVERY`, `FULL_STACK`, `INFRA_ONLY`
	MonitoringMode pulumi.StringOutput `pulumi:"monitoringMode"`
}

// NewHostMonitoringMode registers a new resource with the given unique name, arguments, and options.
func NewHostMonitoringMode(ctx *pulumi.Context,
	name string, args *HostMonitoringModeArgs, opts ...pulumi.ResourceOption) (*HostMonitoringMode, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HostId == nil {
		return nil, errors.New("invalid value for required argument 'HostId'")
	}
	if args.MonitoringMode == nil {
		return nil, errors.New("invalid value for required argument 'MonitoringMode'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HostMonitoringMode
	err := ctx.RegisterResource("dynatrace:index/hostMonitoringMode:HostMonitoringMode", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHostMonitoringMode gets an existing HostMonitoringMode resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHostMonitoringMode(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HostMonitoringModeState, opts ...pulumi.ResourceOption) (*HostMonitoringMode, error) {
	var resource HostMonitoringMode
	err := ctx.ReadResource("dynatrace:index/hostMonitoringMode:HostMonitoringMode", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HostMonitoringMode resources.
type hostMonitoringModeState struct {
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId *string `pulumi:"hostId"`
	// Possible Values: `DISCOVERY`, `FULL_STACK`, `INFRA_ONLY`
	MonitoringMode *string `pulumi:"monitoringMode"`
}

type HostMonitoringModeState struct {
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId pulumi.StringPtrInput
	// Possible Values: `DISCOVERY`, `FULL_STACK`, `INFRA_ONLY`
	MonitoringMode pulumi.StringPtrInput
}

func (HostMonitoringModeState) ElementType() reflect.Type {
	return reflect.TypeOf((*hostMonitoringModeState)(nil)).Elem()
}

type hostMonitoringModeArgs struct {
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId string `pulumi:"hostId"`
	// Possible Values: `DISCOVERY`, `FULL_STACK`, `INFRA_ONLY`
	MonitoringMode string `pulumi:"monitoringMode"`
}

// The set of arguments for constructing a HostMonitoringMode resource.
type HostMonitoringModeArgs struct {
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId pulumi.StringInput
	// Possible Values: `DISCOVERY`, `FULL_STACK`, `INFRA_ONLY`
	MonitoringMode pulumi.StringInput
}

func (HostMonitoringModeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hostMonitoringModeArgs)(nil)).Elem()
}

type HostMonitoringModeInput interface {
	pulumi.Input

	ToHostMonitoringModeOutput() HostMonitoringModeOutput
	ToHostMonitoringModeOutputWithContext(ctx context.Context) HostMonitoringModeOutput
}

func (*HostMonitoringMode) ElementType() reflect.Type {
	return reflect.TypeOf((**HostMonitoringMode)(nil)).Elem()
}

func (i *HostMonitoringMode) ToHostMonitoringModeOutput() HostMonitoringModeOutput {
	return i.ToHostMonitoringModeOutputWithContext(context.Background())
}

func (i *HostMonitoringMode) ToHostMonitoringModeOutputWithContext(ctx context.Context) HostMonitoringModeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostMonitoringModeOutput)
}

// HostMonitoringModeArrayInput is an input type that accepts HostMonitoringModeArray and HostMonitoringModeArrayOutput values.
// You can construct a concrete instance of `HostMonitoringModeArrayInput` via:
//
//	HostMonitoringModeArray{ HostMonitoringModeArgs{...} }
type HostMonitoringModeArrayInput interface {
	pulumi.Input

	ToHostMonitoringModeArrayOutput() HostMonitoringModeArrayOutput
	ToHostMonitoringModeArrayOutputWithContext(context.Context) HostMonitoringModeArrayOutput
}

type HostMonitoringModeArray []HostMonitoringModeInput

func (HostMonitoringModeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HostMonitoringMode)(nil)).Elem()
}

func (i HostMonitoringModeArray) ToHostMonitoringModeArrayOutput() HostMonitoringModeArrayOutput {
	return i.ToHostMonitoringModeArrayOutputWithContext(context.Background())
}

func (i HostMonitoringModeArray) ToHostMonitoringModeArrayOutputWithContext(ctx context.Context) HostMonitoringModeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostMonitoringModeArrayOutput)
}

// HostMonitoringModeMapInput is an input type that accepts HostMonitoringModeMap and HostMonitoringModeMapOutput values.
// You can construct a concrete instance of `HostMonitoringModeMapInput` via:
//
//	HostMonitoringModeMap{ "key": HostMonitoringModeArgs{...} }
type HostMonitoringModeMapInput interface {
	pulumi.Input

	ToHostMonitoringModeMapOutput() HostMonitoringModeMapOutput
	ToHostMonitoringModeMapOutputWithContext(context.Context) HostMonitoringModeMapOutput
}

type HostMonitoringModeMap map[string]HostMonitoringModeInput

func (HostMonitoringModeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HostMonitoringMode)(nil)).Elem()
}

func (i HostMonitoringModeMap) ToHostMonitoringModeMapOutput() HostMonitoringModeMapOutput {
	return i.ToHostMonitoringModeMapOutputWithContext(context.Background())
}

func (i HostMonitoringModeMap) ToHostMonitoringModeMapOutputWithContext(ctx context.Context) HostMonitoringModeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostMonitoringModeMapOutput)
}

type HostMonitoringModeOutput struct{ *pulumi.OutputState }

func (HostMonitoringModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostMonitoringMode)(nil)).Elem()
}

func (o HostMonitoringModeOutput) ToHostMonitoringModeOutput() HostMonitoringModeOutput {
	return o
}

func (o HostMonitoringModeOutput) ToHostMonitoringModeOutputWithContext(ctx context.Context) HostMonitoringModeOutput {
	return o
}

// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
func (o HostMonitoringModeOutput) HostId() pulumi.StringOutput {
	return o.ApplyT(func(v *HostMonitoringMode) pulumi.StringOutput { return v.HostId }).(pulumi.StringOutput)
}

// Possible Values: `DISCOVERY`, `FULL_STACK`, `INFRA_ONLY`
func (o HostMonitoringModeOutput) MonitoringMode() pulumi.StringOutput {
	return o.ApplyT(func(v *HostMonitoringMode) pulumi.StringOutput { return v.MonitoringMode }).(pulumi.StringOutput)
}

type HostMonitoringModeArrayOutput struct{ *pulumi.OutputState }

func (HostMonitoringModeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HostMonitoringMode)(nil)).Elem()
}

func (o HostMonitoringModeArrayOutput) ToHostMonitoringModeArrayOutput() HostMonitoringModeArrayOutput {
	return o
}

func (o HostMonitoringModeArrayOutput) ToHostMonitoringModeArrayOutputWithContext(ctx context.Context) HostMonitoringModeArrayOutput {
	return o
}

func (o HostMonitoringModeArrayOutput) Index(i pulumi.IntInput) HostMonitoringModeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HostMonitoringMode {
		return vs[0].([]*HostMonitoringMode)[vs[1].(int)]
	}).(HostMonitoringModeOutput)
}

type HostMonitoringModeMapOutput struct{ *pulumi.OutputState }

func (HostMonitoringModeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HostMonitoringMode)(nil)).Elem()
}

func (o HostMonitoringModeMapOutput) ToHostMonitoringModeMapOutput() HostMonitoringModeMapOutput {
	return o
}

func (o HostMonitoringModeMapOutput) ToHostMonitoringModeMapOutputWithContext(ctx context.Context) HostMonitoringModeMapOutput {
	return o
}

func (o HostMonitoringModeMapOutput) MapIndex(k pulumi.StringInput) HostMonitoringModeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HostMonitoringMode {
		return vs[0].(map[string]*HostMonitoringMode)[vs[1].(string)]
	}).(HostMonitoringModeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HostMonitoringModeInput)(nil)).Elem(), &HostMonitoringMode{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostMonitoringModeArrayInput)(nil)).Elem(), HostMonitoringModeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostMonitoringModeMapInput)(nil)).Elem(), HostMonitoringModeMap{})
	pulumi.RegisterOutputType(HostMonitoringModeOutput{})
	pulumi.RegisterOutputType(HostMonitoringModeArrayOutput{})
	pulumi.RegisterOutputType(HostMonitoringModeMapOutput{})
}
