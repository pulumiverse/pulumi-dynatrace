// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OpenpipelineV2EventsSdlcIngestsources struct {
	pulumi.CustomResourceState

	// Default Bucket
	DefaultBucket pulumi.StringPtrOutput `pulumi:"defaultBucket"`
	// Endpoint display name
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Endpoint segment
	PathSegment pulumi.StringOutput `pulumi:"pathSegment"`
	// Processing stage
	Processing OpenpipelineV2EventsSdlcIngestsourcesProcessingOutput `pulumi:"processing"`
	// Static routing of endpoint
	StaticRouting OpenpipelineV2EventsSdlcIngestsourcesStaticRoutingPtrOutput `pulumi:"staticRouting"`
}

// NewOpenpipelineV2EventsSdlcIngestsources registers a new resource with the given unique name, arguments, and options.
func NewOpenpipelineV2EventsSdlcIngestsources(ctx *pulumi.Context,
	name string, args *OpenpipelineV2EventsSdlcIngestsourcesArgs, opts ...pulumi.ResourceOption) (*OpenpipelineV2EventsSdlcIngestsources, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.PathSegment == nil {
		return nil, errors.New("invalid value for required argument 'PathSegment'")
	}
	if args.Processing == nil {
		return nil, errors.New("invalid value for required argument 'Processing'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenpipelineV2EventsSdlcIngestsources
	err := ctx.RegisterResource("dynatrace:index/openpipelineV2EventsSdlcIngestsources:OpenpipelineV2EventsSdlcIngestsources", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenpipelineV2EventsSdlcIngestsources gets an existing OpenpipelineV2EventsSdlcIngestsources resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenpipelineV2EventsSdlcIngestsources(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenpipelineV2EventsSdlcIngestsourcesState, opts ...pulumi.ResourceOption) (*OpenpipelineV2EventsSdlcIngestsources, error) {
	var resource OpenpipelineV2EventsSdlcIngestsources
	err := ctx.ReadResource("dynatrace:index/openpipelineV2EventsSdlcIngestsources:OpenpipelineV2EventsSdlcIngestsources", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenpipelineV2EventsSdlcIngestsources resources.
type openpipelineV2EventsSdlcIngestsourcesState struct {
	// Default Bucket
	DefaultBucket *string `pulumi:"defaultBucket"`
	// Endpoint display name
	DisplayName *string `pulumi:"displayName"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// Endpoint segment
	PathSegment *string `pulumi:"pathSegment"`
	// Processing stage
	Processing *OpenpipelineV2EventsSdlcIngestsourcesProcessing `pulumi:"processing"`
	// Static routing of endpoint
	StaticRouting *OpenpipelineV2EventsSdlcIngestsourcesStaticRouting `pulumi:"staticRouting"`
}

type OpenpipelineV2EventsSdlcIngestsourcesState struct {
	// Default Bucket
	DefaultBucket pulumi.StringPtrInput
	// Endpoint display name
	DisplayName pulumi.StringPtrInput
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// Endpoint segment
	PathSegment pulumi.StringPtrInput
	// Processing stage
	Processing OpenpipelineV2EventsSdlcIngestsourcesProcessingPtrInput
	// Static routing of endpoint
	StaticRouting OpenpipelineV2EventsSdlcIngestsourcesStaticRoutingPtrInput
}

func (OpenpipelineV2EventsSdlcIngestsourcesState) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2EventsSdlcIngestsourcesState)(nil)).Elem()
}

type openpipelineV2EventsSdlcIngestsourcesArgs struct {
	// Default Bucket
	DefaultBucket *string `pulumi:"defaultBucket"`
	// Endpoint display name
	DisplayName string `pulumi:"displayName"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// Endpoint segment
	PathSegment string `pulumi:"pathSegment"`
	// Processing stage
	Processing OpenpipelineV2EventsSdlcIngestsourcesProcessing `pulumi:"processing"`
	// Static routing of endpoint
	StaticRouting *OpenpipelineV2EventsSdlcIngestsourcesStaticRouting `pulumi:"staticRouting"`
}

// The set of arguments for constructing a OpenpipelineV2EventsSdlcIngestsources resource.
type OpenpipelineV2EventsSdlcIngestsourcesArgs struct {
	// Default Bucket
	DefaultBucket pulumi.StringPtrInput
	// Endpoint display name
	DisplayName pulumi.StringInput
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// Endpoint segment
	PathSegment pulumi.StringInput
	// Processing stage
	Processing OpenpipelineV2EventsSdlcIngestsourcesProcessingInput
	// Static routing of endpoint
	StaticRouting OpenpipelineV2EventsSdlcIngestsourcesStaticRoutingPtrInput
}

func (OpenpipelineV2EventsSdlcIngestsourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2EventsSdlcIngestsourcesArgs)(nil)).Elem()
}

type OpenpipelineV2EventsSdlcIngestsourcesInput interface {
	pulumi.Input

	ToOpenpipelineV2EventsSdlcIngestsourcesOutput() OpenpipelineV2EventsSdlcIngestsourcesOutput
	ToOpenpipelineV2EventsSdlcIngestsourcesOutputWithContext(ctx context.Context) OpenpipelineV2EventsSdlcIngestsourcesOutput
}

func (*OpenpipelineV2EventsSdlcIngestsources) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2EventsSdlcIngestsources)(nil)).Elem()
}

func (i *OpenpipelineV2EventsSdlcIngestsources) ToOpenpipelineV2EventsSdlcIngestsourcesOutput() OpenpipelineV2EventsSdlcIngestsourcesOutput {
	return i.ToOpenpipelineV2EventsSdlcIngestsourcesOutputWithContext(context.Background())
}

func (i *OpenpipelineV2EventsSdlcIngestsources) ToOpenpipelineV2EventsSdlcIngestsourcesOutputWithContext(ctx context.Context) OpenpipelineV2EventsSdlcIngestsourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2EventsSdlcIngestsourcesOutput)
}

// OpenpipelineV2EventsSdlcIngestsourcesArrayInput is an input type that accepts OpenpipelineV2EventsSdlcIngestsourcesArray and OpenpipelineV2EventsSdlcIngestsourcesArrayOutput values.
// You can construct a concrete instance of `OpenpipelineV2EventsSdlcIngestsourcesArrayInput` via:
//
//	OpenpipelineV2EventsSdlcIngestsourcesArray{ OpenpipelineV2EventsSdlcIngestsourcesArgs{...} }
type OpenpipelineV2EventsSdlcIngestsourcesArrayInput interface {
	pulumi.Input

	ToOpenpipelineV2EventsSdlcIngestsourcesArrayOutput() OpenpipelineV2EventsSdlcIngestsourcesArrayOutput
	ToOpenpipelineV2EventsSdlcIngestsourcesArrayOutputWithContext(context.Context) OpenpipelineV2EventsSdlcIngestsourcesArrayOutput
}

type OpenpipelineV2EventsSdlcIngestsourcesArray []OpenpipelineV2EventsSdlcIngestsourcesInput

func (OpenpipelineV2EventsSdlcIngestsourcesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2EventsSdlcIngestsources)(nil)).Elem()
}

func (i OpenpipelineV2EventsSdlcIngestsourcesArray) ToOpenpipelineV2EventsSdlcIngestsourcesArrayOutput() OpenpipelineV2EventsSdlcIngestsourcesArrayOutput {
	return i.ToOpenpipelineV2EventsSdlcIngestsourcesArrayOutputWithContext(context.Background())
}

func (i OpenpipelineV2EventsSdlcIngestsourcesArray) ToOpenpipelineV2EventsSdlcIngestsourcesArrayOutputWithContext(ctx context.Context) OpenpipelineV2EventsSdlcIngestsourcesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2EventsSdlcIngestsourcesArrayOutput)
}

// OpenpipelineV2EventsSdlcIngestsourcesMapInput is an input type that accepts OpenpipelineV2EventsSdlcIngestsourcesMap and OpenpipelineV2EventsSdlcIngestsourcesMapOutput values.
// You can construct a concrete instance of `OpenpipelineV2EventsSdlcIngestsourcesMapInput` via:
//
//	OpenpipelineV2EventsSdlcIngestsourcesMap{ "key": OpenpipelineV2EventsSdlcIngestsourcesArgs{...} }
type OpenpipelineV2EventsSdlcIngestsourcesMapInput interface {
	pulumi.Input

	ToOpenpipelineV2EventsSdlcIngestsourcesMapOutput() OpenpipelineV2EventsSdlcIngestsourcesMapOutput
	ToOpenpipelineV2EventsSdlcIngestsourcesMapOutputWithContext(context.Context) OpenpipelineV2EventsSdlcIngestsourcesMapOutput
}

type OpenpipelineV2EventsSdlcIngestsourcesMap map[string]OpenpipelineV2EventsSdlcIngestsourcesInput

func (OpenpipelineV2EventsSdlcIngestsourcesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2EventsSdlcIngestsources)(nil)).Elem()
}

func (i OpenpipelineV2EventsSdlcIngestsourcesMap) ToOpenpipelineV2EventsSdlcIngestsourcesMapOutput() OpenpipelineV2EventsSdlcIngestsourcesMapOutput {
	return i.ToOpenpipelineV2EventsSdlcIngestsourcesMapOutputWithContext(context.Background())
}

func (i OpenpipelineV2EventsSdlcIngestsourcesMap) ToOpenpipelineV2EventsSdlcIngestsourcesMapOutputWithContext(ctx context.Context) OpenpipelineV2EventsSdlcIngestsourcesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2EventsSdlcIngestsourcesMapOutput)
}

type OpenpipelineV2EventsSdlcIngestsourcesOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2EventsSdlcIngestsourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2EventsSdlcIngestsources)(nil)).Elem()
}

func (o OpenpipelineV2EventsSdlcIngestsourcesOutput) ToOpenpipelineV2EventsSdlcIngestsourcesOutput() OpenpipelineV2EventsSdlcIngestsourcesOutput {
	return o
}

func (o OpenpipelineV2EventsSdlcIngestsourcesOutput) ToOpenpipelineV2EventsSdlcIngestsourcesOutputWithContext(ctx context.Context) OpenpipelineV2EventsSdlcIngestsourcesOutput {
	return o
}

// Default Bucket
func (o OpenpipelineV2EventsSdlcIngestsourcesOutput) DefaultBucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenpipelineV2EventsSdlcIngestsources) pulumi.StringPtrOutput { return v.DefaultBucket }).(pulumi.StringPtrOutput)
}

// Endpoint display name
func (o OpenpipelineV2EventsSdlcIngestsourcesOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenpipelineV2EventsSdlcIngestsources) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// This setting is enabled (`true`) or disabled (`false`)
func (o OpenpipelineV2EventsSdlcIngestsourcesOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *OpenpipelineV2EventsSdlcIngestsources) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Endpoint segment
func (o OpenpipelineV2EventsSdlcIngestsourcesOutput) PathSegment() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenpipelineV2EventsSdlcIngestsources) pulumi.StringOutput { return v.PathSegment }).(pulumi.StringOutput)
}

// Processing stage
func (o OpenpipelineV2EventsSdlcIngestsourcesOutput) Processing() OpenpipelineV2EventsSdlcIngestsourcesProcessingOutput {
	return o.ApplyT(func(v *OpenpipelineV2EventsSdlcIngestsources) OpenpipelineV2EventsSdlcIngestsourcesProcessingOutput {
		return v.Processing
	}).(OpenpipelineV2EventsSdlcIngestsourcesProcessingOutput)
}

// Static routing of endpoint
func (o OpenpipelineV2EventsSdlcIngestsourcesOutput) StaticRouting() OpenpipelineV2EventsSdlcIngestsourcesStaticRoutingPtrOutput {
	return o.ApplyT(func(v *OpenpipelineV2EventsSdlcIngestsources) OpenpipelineV2EventsSdlcIngestsourcesStaticRoutingPtrOutput {
		return v.StaticRouting
	}).(OpenpipelineV2EventsSdlcIngestsourcesStaticRoutingPtrOutput)
}

type OpenpipelineV2EventsSdlcIngestsourcesArrayOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2EventsSdlcIngestsourcesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2EventsSdlcIngestsources)(nil)).Elem()
}

func (o OpenpipelineV2EventsSdlcIngestsourcesArrayOutput) ToOpenpipelineV2EventsSdlcIngestsourcesArrayOutput() OpenpipelineV2EventsSdlcIngestsourcesArrayOutput {
	return o
}

func (o OpenpipelineV2EventsSdlcIngestsourcesArrayOutput) ToOpenpipelineV2EventsSdlcIngestsourcesArrayOutputWithContext(ctx context.Context) OpenpipelineV2EventsSdlcIngestsourcesArrayOutput {
	return o
}

func (o OpenpipelineV2EventsSdlcIngestsourcesArrayOutput) Index(i pulumi.IntInput) OpenpipelineV2EventsSdlcIngestsourcesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenpipelineV2EventsSdlcIngestsources {
		return vs[0].([]*OpenpipelineV2EventsSdlcIngestsources)[vs[1].(int)]
	}).(OpenpipelineV2EventsSdlcIngestsourcesOutput)
}

type OpenpipelineV2EventsSdlcIngestsourcesMapOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2EventsSdlcIngestsourcesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2EventsSdlcIngestsources)(nil)).Elem()
}

func (o OpenpipelineV2EventsSdlcIngestsourcesMapOutput) ToOpenpipelineV2EventsSdlcIngestsourcesMapOutput() OpenpipelineV2EventsSdlcIngestsourcesMapOutput {
	return o
}

func (o OpenpipelineV2EventsSdlcIngestsourcesMapOutput) ToOpenpipelineV2EventsSdlcIngestsourcesMapOutputWithContext(ctx context.Context) OpenpipelineV2EventsSdlcIngestsourcesMapOutput {
	return o
}

func (o OpenpipelineV2EventsSdlcIngestsourcesMapOutput) MapIndex(k pulumi.StringInput) OpenpipelineV2EventsSdlcIngestsourcesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenpipelineV2EventsSdlcIngestsources {
		return vs[0].(map[string]*OpenpipelineV2EventsSdlcIngestsources)[vs[1].(string)]
	}).(OpenpipelineV2EventsSdlcIngestsourcesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2EventsSdlcIngestsourcesInput)(nil)).Elem(), &OpenpipelineV2EventsSdlcIngestsources{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2EventsSdlcIngestsourcesArrayInput)(nil)).Elem(), OpenpipelineV2EventsSdlcIngestsourcesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2EventsSdlcIngestsourcesMapInput)(nil)).Elem(), OpenpipelineV2EventsSdlcIngestsourcesMap{})
	pulumi.RegisterOutputType(OpenpipelineV2EventsSdlcIngestsourcesOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2EventsSdlcIngestsourcesArrayOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2EventsSdlcIngestsourcesMapOutput{})
}
