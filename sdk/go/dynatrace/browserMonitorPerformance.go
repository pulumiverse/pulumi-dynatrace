// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type BrowserMonitorPerformance struct {
	pulumi.CustomResourceState

	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The scope of this setting (SYNTHETIC_TEST)
	Scope pulumi.StringOutput `pulumi:"scope"`
	// Performance thresholds
	Thresholds BrowserMonitorPerformanceThresholdsPtrOutput `pulumi:"thresholds"`
}

// NewBrowserMonitorPerformance registers a new resource with the given unique name, arguments, and options.
func NewBrowserMonitorPerformance(ctx *pulumi.Context,
	name string, args *BrowserMonitorPerformanceArgs, opts ...pulumi.ResourceOption) (*BrowserMonitorPerformance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Scope == nil {
		return nil, errors.New("invalid value for required argument 'Scope'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BrowserMonitorPerformance
	err := ctx.RegisterResource("dynatrace:index/browserMonitorPerformance:BrowserMonitorPerformance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBrowserMonitorPerformance gets an existing BrowserMonitorPerformance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBrowserMonitorPerformance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BrowserMonitorPerformanceState, opts ...pulumi.ResourceOption) (*BrowserMonitorPerformance, error) {
	var resource BrowserMonitorPerformance
	err := ctx.ReadResource("dynatrace:index/browserMonitorPerformance:BrowserMonitorPerformance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BrowserMonitorPerformance resources.
type browserMonitorPerformanceState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// The scope of this setting (SYNTHETIC_TEST)
	Scope *string `pulumi:"scope"`
	// Performance thresholds
	Thresholds *BrowserMonitorPerformanceThresholds `pulumi:"thresholds"`
}

type BrowserMonitorPerformanceState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// The scope of this setting (SYNTHETIC_TEST)
	Scope pulumi.StringPtrInput
	// Performance thresholds
	Thresholds BrowserMonitorPerformanceThresholdsPtrInput
}

func (BrowserMonitorPerformanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*browserMonitorPerformanceState)(nil)).Elem()
}

type browserMonitorPerformanceArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// The scope of this setting (SYNTHETIC_TEST)
	Scope string `pulumi:"scope"`
	// Performance thresholds
	Thresholds *BrowserMonitorPerformanceThresholds `pulumi:"thresholds"`
}

// The set of arguments for constructing a BrowserMonitorPerformance resource.
type BrowserMonitorPerformanceArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// The scope of this setting (SYNTHETIC_TEST)
	Scope pulumi.StringInput
	// Performance thresholds
	Thresholds BrowserMonitorPerformanceThresholdsPtrInput
}

func (BrowserMonitorPerformanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*browserMonitorPerformanceArgs)(nil)).Elem()
}

type BrowserMonitorPerformanceInput interface {
	pulumi.Input

	ToBrowserMonitorPerformanceOutput() BrowserMonitorPerformanceOutput
	ToBrowserMonitorPerformanceOutputWithContext(ctx context.Context) BrowserMonitorPerformanceOutput
}

func (*BrowserMonitorPerformance) ElementType() reflect.Type {
	return reflect.TypeOf((**BrowserMonitorPerformance)(nil)).Elem()
}

func (i *BrowserMonitorPerformance) ToBrowserMonitorPerformanceOutput() BrowserMonitorPerformanceOutput {
	return i.ToBrowserMonitorPerformanceOutputWithContext(context.Background())
}

func (i *BrowserMonitorPerformance) ToBrowserMonitorPerformanceOutputWithContext(ctx context.Context) BrowserMonitorPerformanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrowserMonitorPerformanceOutput)
}

// BrowserMonitorPerformanceArrayInput is an input type that accepts BrowserMonitorPerformanceArray and BrowserMonitorPerformanceArrayOutput values.
// You can construct a concrete instance of `BrowserMonitorPerformanceArrayInput` via:
//
//	BrowserMonitorPerformanceArray{ BrowserMonitorPerformanceArgs{...} }
type BrowserMonitorPerformanceArrayInput interface {
	pulumi.Input

	ToBrowserMonitorPerformanceArrayOutput() BrowserMonitorPerformanceArrayOutput
	ToBrowserMonitorPerformanceArrayOutputWithContext(context.Context) BrowserMonitorPerformanceArrayOutput
}

type BrowserMonitorPerformanceArray []BrowserMonitorPerformanceInput

func (BrowserMonitorPerformanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BrowserMonitorPerformance)(nil)).Elem()
}

func (i BrowserMonitorPerformanceArray) ToBrowserMonitorPerformanceArrayOutput() BrowserMonitorPerformanceArrayOutput {
	return i.ToBrowserMonitorPerformanceArrayOutputWithContext(context.Background())
}

func (i BrowserMonitorPerformanceArray) ToBrowserMonitorPerformanceArrayOutputWithContext(ctx context.Context) BrowserMonitorPerformanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrowserMonitorPerformanceArrayOutput)
}

// BrowserMonitorPerformanceMapInput is an input type that accepts BrowserMonitorPerformanceMap and BrowserMonitorPerformanceMapOutput values.
// You can construct a concrete instance of `BrowserMonitorPerformanceMapInput` via:
//
//	BrowserMonitorPerformanceMap{ "key": BrowserMonitorPerformanceArgs{...} }
type BrowserMonitorPerformanceMapInput interface {
	pulumi.Input

	ToBrowserMonitorPerformanceMapOutput() BrowserMonitorPerformanceMapOutput
	ToBrowserMonitorPerformanceMapOutputWithContext(context.Context) BrowserMonitorPerformanceMapOutput
}

type BrowserMonitorPerformanceMap map[string]BrowserMonitorPerformanceInput

func (BrowserMonitorPerformanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BrowserMonitorPerformance)(nil)).Elem()
}

func (i BrowserMonitorPerformanceMap) ToBrowserMonitorPerformanceMapOutput() BrowserMonitorPerformanceMapOutput {
	return i.ToBrowserMonitorPerformanceMapOutputWithContext(context.Background())
}

func (i BrowserMonitorPerformanceMap) ToBrowserMonitorPerformanceMapOutputWithContext(ctx context.Context) BrowserMonitorPerformanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrowserMonitorPerformanceMapOutput)
}

type BrowserMonitorPerformanceOutput struct{ *pulumi.OutputState }

func (BrowserMonitorPerformanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrowserMonitorPerformance)(nil)).Elem()
}

func (o BrowserMonitorPerformanceOutput) ToBrowserMonitorPerformanceOutput() BrowserMonitorPerformanceOutput {
	return o
}

func (o BrowserMonitorPerformanceOutput) ToBrowserMonitorPerformanceOutputWithContext(ctx context.Context) BrowserMonitorPerformanceOutput {
	return o
}

// This setting is enabled (`true`) or disabled (`false`)
func (o BrowserMonitorPerformanceOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *BrowserMonitorPerformance) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The scope of this setting (SYNTHETIC_TEST)
func (o BrowserMonitorPerformanceOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v *BrowserMonitorPerformance) pulumi.StringOutput { return v.Scope }).(pulumi.StringOutput)
}

// Performance thresholds
func (o BrowserMonitorPerformanceOutput) Thresholds() BrowserMonitorPerformanceThresholdsPtrOutput {
	return o.ApplyT(func(v *BrowserMonitorPerformance) BrowserMonitorPerformanceThresholdsPtrOutput { return v.Thresholds }).(BrowserMonitorPerformanceThresholdsPtrOutput)
}

type BrowserMonitorPerformanceArrayOutput struct{ *pulumi.OutputState }

func (BrowserMonitorPerformanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BrowserMonitorPerformance)(nil)).Elem()
}

func (o BrowserMonitorPerformanceArrayOutput) ToBrowserMonitorPerformanceArrayOutput() BrowserMonitorPerformanceArrayOutput {
	return o
}

func (o BrowserMonitorPerformanceArrayOutput) ToBrowserMonitorPerformanceArrayOutputWithContext(ctx context.Context) BrowserMonitorPerformanceArrayOutput {
	return o
}

func (o BrowserMonitorPerformanceArrayOutput) Index(i pulumi.IntInput) BrowserMonitorPerformanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BrowserMonitorPerformance {
		return vs[0].([]*BrowserMonitorPerformance)[vs[1].(int)]
	}).(BrowserMonitorPerformanceOutput)
}

type BrowserMonitorPerformanceMapOutput struct{ *pulumi.OutputState }

func (BrowserMonitorPerformanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BrowserMonitorPerformance)(nil)).Elem()
}

func (o BrowserMonitorPerformanceMapOutput) ToBrowserMonitorPerformanceMapOutput() BrowserMonitorPerformanceMapOutput {
	return o
}

func (o BrowserMonitorPerformanceMapOutput) ToBrowserMonitorPerformanceMapOutputWithContext(ctx context.Context) BrowserMonitorPerformanceMapOutput {
	return o
}

func (o BrowserMonitorPerformanceMapOutput) MapIndex(k pulumi.StringInput) BrowserMonitorPerformanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BrowserMonitorPerformance {
		return vs[0].(map[string]*BrowserMonitorPerformance)[vs[1].(string)]
	}).(BrowserMonitorPerformanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BrowserMonitorPerformanceInput)(nil)).Elem(), &BrowserMonitorPerformance{})
	pulumi.RegisterInputType(reflect.TypeOf((*BrowserMonitorPerformanceArrayInput)(nil)).Elem(), BrowserMonitorPerformanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BrowserMonitorPerformanceMapInput)(nil)).Elem(), BrowserMonitorPerformanceMap{})
	pulumi.RegisterOutputType(BrowserMonitorPerformanceOutput{})
	pulumi.RegisterOutputType(BrowserMonitorPerformanceArrayOutput{})
	pulumi.RegisterOutputType(BrowserMonitorPerformanceMapOutput{})
}
