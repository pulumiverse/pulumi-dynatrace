// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type AttributeBlockList struct {
	pulumi.CustomResourceState

	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Key of the attribute that should not be persisted
	Key pulumi.StringOutput `pulumi:"key"`
}

// NewAttributeBlockList registers a new resource with the given unique name, arguments, and options.
func NewAttributeBlockList(ctx *pulumi.Context,
	name string, args *AttributeBlockListArgs, opts ...pulumi.ResourceOption) (*AttributeBlockList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AttributeBlockList
	err := ctx.RegisterResource("dynatrace:index/attributeBlockList:AttributeBlockList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAttributeBlockList gets an existing AttributeBlockList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAttributeBlockList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AttributeBlockListState, opts ...pulumi.ResourceOption) (*AttributeBlockList, error) {
	var resource AttributeBlockList
	err := ctx.ReadResource("dynatrace:index/attributeBlockList:AttributeBlockList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AttributeBlockList resources.
type attributeBlockListState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// Key of the attribute that should not be persisted
	Key *string `pulumi:"key"`
}

type AttributeBlockListState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// Key of the attribute that should not be persisted
	Key pulumi.StringPtrInput
}

func (AttributeBlockListState) ElementType() reflect.Type {
	return reflect.TypeOf((*attributeBlockListState)(nil)).Elem()
}

type attributeBlockListArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// Key of the attribute that should not be persisted
	Key string `pulumi:"key"`
}

// The set of arguments for constructing a AttributeBlockList resource.
type AttributeBlockListArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// Key of the attribute that should not be persisted
	Key pulumi.StringInput
}

func (AttributeBlockListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*attributeBlockListArgs)(nil)).Elem()
}

type AttributeBlockListInput interface {
	pulumi.Input

	ToAttributeBlockListOutput() AttributeBlockListOutput
	ToAttributeBlockListOutputWithContext(ctx context.Context) AttributeBlockListOutput
}

func (*AttributeBlockList) ElementType() reflect.Type {
	return reflect.TypeOf((**AttributeBlockList)(nil)).Elem()
}

func (i *AttributeBlockList) ToAttributeBlockListOutput() AttributeBlockListOutput {
	return i.ToAttributeBlockListOutputWithContext(context.Background())
}

func (i *AttributeBlockList) ToAttributeBlockListOutputWithContext(ctx context.Context) AttributeBlockListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttributeBlockListOutput)
}

// AttributeBlockListArrayInput is an input type that accepts AttributeBlockListArray and AttributeBlockListArrayOutput values.
// You can construct a concrete instance of `AttributeBlockListArrayInput` via:
//
//	AttributeBlockListArray{ AttributeBlockListArgs{...} }
type AttributeBlockListArrayInput interface {
	pulumi.Input

	ToAttributeBlockListArrayOutput() AttributeBlockListArrayOutput
	ToAttributeBlockListArrayOutputWithContext(context.Context) AttributeBlockListArrayOutput
}

type AttributeBlockListArray []AttributeBlockListInput

func (AttributeBlockListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AttributeBlockList)(nil)).Elem()
}

func (i AttributeBlockListArray) ToAttributeBlockListArrayOutput() AttributeBlockListArrayOutput {
	return i.ToAttributeBlockListArrayOutputWithContext(context.Background())
}

func (i AttributeBlockListArray) ToAttributeBlockListArrayOutputWithContext(ctx context.Context) AttributeBlockListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttributeBlockListArrayOutput)
}

// AttributeBlockListMapInput is an input type that accepts AttributeBlockListMap and AttributeBlockListMapOutput values.
// You can construct a concrete instance of `AttributeBlockListMapInput` via:
//
//	AttributeBlockListMap{ "key": AttributeBlockListArgs{...} }
type AttributeBlockListMapInput interface {
	pulumi.Input

	ToAttributeBlockListMapOutput() AttributeBlockListMapOutput
	ToAttributeBlockListMapOutputWithContext(context.Context) AttributeBlockListMapOutput
}

type AttributeBlockListMap map[string]AttributeBlockListInput

func (AttributeBlockListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AttributeBlockList)(nil)).Elem()
}

func (i AttributeBlockListMap) ToAttributeBlockListMapOutput() AttributeBlockListMapOutput {
	return i.ToAttributeBlockListMapOutputWithContext(context.Background())
}

func (i AttributeBlockListMap) ToAttributeBlockListMapOutputWithContext(ctx context.Context) AttributeBlockListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttributeBlockListMapOutput)
}

type AttributeBlockListOutput struct{ *pulumi.OutputState }

func (AttributeBlockListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AttributeBlockList)(nil)).Elem()
}

func (o AttributeBlockListOutput) ToAttributeBlockListOutput() AttributeBlockListOutput {
	return o
}

func (o AttributeBlockListOutput) ToAttributeBlockListOutputWithContext(ctx context.Context) AttributeBlockListOutput {
	return o
}

// This setting is enabled (`true`) or disabled (`false`)
func (o AttributeBlockListOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *AttributeBlockList) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Key of the attribute that should not be persisted
func (o AttributeBlockListOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *AttributeBlockList) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

type AttributeBlockListArrayOutput struct{ *pulumi.OutputState }

func (AttributeBlockListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AttributeBlockList)(nil)).Elem()
}

func (o AttributeBlockListArrayOutput) ToAttributeBlockListArrayOutput() AttributeBlockListArrayOutput {
	return o
}

func (o AttributeBlockListArrayOutput) ToAttributeBlockListArrayOutputWithContext(ctx context.Context) AttributeBlockListArrayOutput {
	return o
}

func (o AttributeBlockListArrayOutput) Index(i pulumi.IntInput) AttributeBlockListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AttributeBlockList {
		return vs[0].([]*AttributeBlockList)[vs[1].(int)]
	}).(AttributeBlockListOutput)
}

type AttributeBlockListMapOutput struct{ *pulumi.OutputState }

func (AttributeBlockListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AttributeBlockList)(nil)).Elem()
}

func (o AttributeBlockListMapOutput) ToAttributeBlockListMapOutput() AttributeBlockListMapOutput {
	return o
}

func (o AttributeBlockListMapOutput) ToAttributeBlockListMapOutputWithContext(ctx context.Context) AttributeBlockListMapOutput {
	return o
}

func (o AttributeBlockListMapOutput) MapIndex(k pulumi.StringInput) AttributeBlockListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AttributeBlockList {
		return vs[0].(map[string]*AttributeBlockList)[vs[1].(string)]
	}).(AttributeBlockListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AttributeBlockListInput)(nil)).Elem(), &AttributeBlockList{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttributeBlockListArrayInput)(nil)).Elem(), AttributeBlockListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttributeBlockListMapInput)(nil)).Elem(), AttributeBlockListMap{})
	pulumi.RegisterOutputType(AttributeBlockListOutput{})
	pulumi.RegisterOutputType(AttributeBlockListArrayOutput{})
	pulumi.RegisterOutputType(AttributeBlockListMapOutput{})
}
