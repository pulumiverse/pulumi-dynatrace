// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type ApplicationDetectionRule struct {
	pulumi.CustomResourceState

	// The Dynatrace entity ID of the application, for example APPLICATION-4A3B43
	ApplicationIdentifier pulumi.StringOutput `pulumi:"applicationIdentifier"`
	// The condition of an application detection rule
	FilterConfig ApplicationDetectionRuleFilterConfigOutput `pulumi:"filterConfig"`
	// The unique name of the Application detection rule
	//
	// Deprecated: Dynatrace computes that value automatically. Any attempts to specify that value will are getting ignored.
	Name pulumi.StringOutput `pulumi:"name"`
	// The order of the rule in the rules list
	Order pulumi.StringPtrOutput `pulumi:"order"`
}

// NewApplicationDetectionRule registers a new resource with the given unique name, arguments, and options.
func NewApplicationDetectionRule(ctx *pulumi.Context,
	name string, args *ApplicationDetectionRuleArgs, opts ...pulumi.ResourceOption) (*ApplicationDetectionRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationIdentifier'")
	}
	if args.FilterConfig == nil {
		return nil, errors.New("invalid value for required argument 'FilterConfig'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApplicationDetectionRule
	err := ctx.RegisterResource("dynatrace:index/applicationDetectionRule:ApplicationDetectionRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplicationDetectionRule gets an existing ApplicationDetectionRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplicationDetectionRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationDetectionRuleState, opts ...pulumi.ResourceOption) (*ApplicationDetectionRule, error) {
	var resource ApplicationDetectionRule
	err := ctx.ReadResource("dynatrace:index/applicationDetectionRule:ApplicationDetectionRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplicationDetectionRule resources.
type applicationDetectionRuleState struct {
	// The Dynatrace entity ID of the application, for example APPLICATION-4A3B43
	ApplicationIdentifier *string `pulumi:"applicationIdentifier"`
	// The condition of an application detection rule
	FilterConfig *ApplicationDetectionRuleFilterConfig `pulumi:"filterConfig"`
	// The unique name of the Application detection rule
	//
	// Deprecated: Dynatrace computes that value automatically. Any attempts to specify that value will are getting ignored.
	Name *string `pulumi:"name"`
	// The order of the rule in the rules list
	Order *string `pulumi:"order"`
}

type ApplicationDetectionRuleState struct {
	// The Dynatrace entity ID of the application, for example APPLICATION-4A3B43
	ApplicationIdentifier pulumi.StringPtrInput
	// The condition of an application detection rule
	FilterConfig ApplicationDetectionRuleFilterConfigPtrInput
	// The unique name of the Application detection rule
	//
	// Deprecated: Dynatrace computes that value automatically. Any attempts to specify that value will are getting ignored.
	Name pulumi.StringPtrInput
	// The order of the rule in the rules list
	Order pulumi.StringPtrInput
}

func (ApplicationDetectionRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationDetectionRuleState)(nil)).Elem()
}

type applicationDetectionRuleArgs struct {
	// The Dynatrace entity ID of the application, for example APPLICATION-4A3B43
	ApplicationIdentifier string `pulumi:"applicationIdentifier"`
	// The condition of an application detection rule
	FilterConfig ApplicationDetectionRuleFilterConfig `pulumi:"filterConfig"`
	// The unique name of the Application detection rule
	//
	// Deprecated: Dynatrace computes that value automatically. Any attempts to specify that value will are getting ignored.
	Name *string `pulumi:"name"`
	// The order of the rule in the rules list
	Order *string `pulumi:"order"`
}

// The set of arguments for constructing a ApplicationDetectionRule resource.
type ApplicationDetectionRuleArgs struct {
	// The Dynatrace entity ID of the application, for example APPLICATION-4A3B43
	ApplicationIdentifier pulumi.StringInput
	// The condition of an application detection rule
	FilterConfig ApplicationDetectionRuleFilterConfigInput
	// The unique name of the Application detection rule
	//
	// Deprecated: Dynatrace computes that value automatically. Any attempts to specify that value will are getting ignored.
	Name pulumi.StringPtrInput
	// The order of the rule in the rules list
	Order pulumi.StringPtrInput
}

func (ApplicationDetectionRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationDetectionRuleArgs)(nil)).Elem()
}

type ApplicationDetectionRuleInput interface {
	pulumi.Input

	ToApplicationDetectionRuleOutput() ApplicationDetectionRuleOutput
	ToApplicationDetectionRuleOutputWithContext(ctx context.Context) ApplicationDetectionRuleOutput
}

func (*ApplicationDetectionRule) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationDetectionRule)(nil)).Elem()
}

func (i *ApplicationDetectionRule) ToApplicationDetectionRuleOutput() ApplicationDetectionRuleOutput {
	return i.ToApplicationDetectionRuleOutputWithContext(context.Background())
}

func (i *ApplicationDetectionRule) ToApplicationDetectionRuleOutputWithContext(ctx context.Context) ApplicationDetectionRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationDetectionRuleOutput)
}

// ApplicationDetectionRuleArrayInput is an input type that accepts ApplicationDetectionRuleArray and ApplicationDetectionRuleArrayOutput values.
// You can construct a concrete instance of `ApplicationDetectionRuleArrayInput` via:
//
//	ApplicationDetectionRuleArray{ ApplicationDetectionRuleArgs{...} }
type ApplicationDetectionRuleArrayInput interface {
	pulumi.Input

	ToApplicationDetectionRuleArrayOutput() ApplicationDetectionRuleArrayOutput
	ToApplicationDetectionRuleArrayOutputWithContext(context.Context) ApplicationDetectionRuleArrayOutput
}

type ApplicationDetectionRuleArray []ApplicationDetectionRuleInput

func (ApplicationDetectionRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationDetectionRule)(nil)).Elem()
}

func (i ApplicationDetectionRuleArray) ToApplicationDetectionRuleArrayOutput() ApplicationDetectionRuleArrayOutput {
	return i.ToApplicationDetectionRuleArrayOutputWithContext(context.Background())
}

func (i ApplicationDetectionRuleArray) ToApplicationDetectionRuleArrayOutputWithContext(ctx context.Context) ApplicationDetectionRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationDetectionRuleArrayOutput)
}

// ApplicationDetectionRuleMapInput is an input type that accepts ApplicationDetectionRuleMap and ApplicationDetectionRuleMapOutput values.
// You can construct a concrete instance of `ApplicationDetectionRuleMapInput` via:
//
//	ApplicationDetectionRuleMap{ "key": ApplicationDetectionRuleArgs{...} }
type ApplicationDetectionRuleMapInput interface {
	pulumi.Input

	ToApplicationDetectionRuleMapOutput() ApplicationDetectionRuleMapOutput
	ToApplicationDetectionRuleMapOutputWithContext(context.Context) ApplicationDetectionRuleMapOutput
}

type ApplicationDetectionRuleMap map[string]ApplicationDetectionRuleInput

func (ApplicationDetectionRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationDetectionRule)(nil)).Elem()
}

func (i ApplicationDetectionRuleMap) ToApplicationDetectionRuleMapOutput() ApplicationDetectionRuleMapOutput {
	return i.ToApplicationDetectionRuleMapOutputWithContext(context.Background())
}

func (i ApplicationDetectionRuleMap) ToApplicationDetectionRuleMapOutputWithContext(ctx context.Context) ApplicationDetectionRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationDetectionRuleMapOutput)
}

type ApplicationDetectionRuleOutput struct{ *pulumi.OutputState }

func (ApplicationDetectionRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationDetectionRule)(nil)).Elem()
}

func (o ApplicationDetectionRuleOutput) ToApplicationDetectionRuleOutput() ApplicationDetectionRuleOutput {
	return o
}

func (o ApplicationDetectionRuleOutput) ToApplicationDetectionRuleOutputWithContext(ctx context.Context) ApplicationDetectionRuleOutput {
	return o
}

// The Dynatrace entity ID of the application, for example APPLICATION-4A3B43
func (o ApplicationDetectionRuleOutput) ApplicationIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationDetectionRule) pulumi.StringOutput { return v.ApplicationIdentifier }).(pulumi.StringOutput)
}

// The condition of an application detection rule
func (o ApplicationDetectionRuleOutput) FilterConfig() ApplicationDetectionRuleFilterConfigOutput {
	return o.ApplyT(func(v *ApplicationDetectionRule) ApplicationDetectionRuleFilterConfigOutput { return v.FilterConfig }).(ApplicationDetectionRuleFilterConfigOutput)
}

// The unique name of the Application detection rule
//
// Deprecated: Dynatrace computes that value automatically. Any attempts to specify that value will are getting ignored.
func (o ApplicationDetectionRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationDetectionRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The order of the rule in the rules list
func (o ApplicationDetectionRuleOutput) Order() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationDetectionRule) pulumi.StringPtrOutput { return v.Order }).(pulumi.StringPtrOutput)
}

type ApplicationDetectionRuleArrayOutput struct{ *pulumi.OutputState }

func (ApplicationDetectionRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationDetectionRule)(nil)).Elem()
}

func (o ApplicationDetectionRuleArrayOutput) ToApplicationDetectionRuleArrayOutput() ApplicationDetectionRuleArrayOutput {
	return o
}

func (o ApplicationDetectionRuleArrayOutput) ToApplicationDetectionRuleArrayOutputWithContext(ctx context.Context) ApplicationDetectionRuleArrayOutput {
	return o
}

func (o ApplicationDetectionRuleArrayOutput) Index(i pulumi.IntInput) ApplicationDetectionRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApplicationDetectionRule {
		return vs[0].([]*ApplicationDetectionRule)[vs[1].(int)]
	}).(ApplicationDetectionRuleOutput)
}

type ApplicationDetectionRuleMapOutput struct{ *pulumi.OutputState }

func (ApplicationDetectionRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationDetectionRule)(nil)).Elem()
}

func (o ApplicationDetectionRuleMapOutput) ToApplicationDetectionRuleMapOutput() ApplicationDetectionRuleMapOutput {
	return o
}

func (o ApplicationDetectionRuleMapOutput) ToApplicationDetectionRuleMapOutputWithContext(ctx context.Context) ApplicationDetectionRuleMapOutput {
	return o
}

func (o ApplicationDetectionRuleMapOutput) MapIndex(k pulumi.StringInput) ApplicationDetectionRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApplicationDetectionRule {
		return vs[0].(map[string]*ApplicationDetectionRule)[vs[1].(string)]
	}).(ApplicationDetectionRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationDetectionRuleInput)(nil)).Elem(), &ApplicationDetectionRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationDetectionRuleArrayInput)(nil)).Elem(), ApplicationDetectionRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationDetectionRuleMapInput)(nil)).Elem(), ApplicationDetectionRuleMap{})
	pulumi.RegisterOutputType(ApplicationDetectionRuleOutput{})
	pulumi.RegisterOutputType(ApplicationDetectionRuleArrayOutput{})
	pulumi.RegisterOutputType(ApplicationDetectionRuleMapOutput{})
}
