// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type BusinessEventsMetrics struct {
	pulumi.CustomResourceState

	// no documentation available
	Dimensions pulumi.StringArrayOutput `pulumi:"dimensions"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Key
	Key pulumi.StringOutput `pulumi:"key"`
	// [See our documentation](https://dt-url.net/bp234rv)
	Matcher pulumi.StringOutput `pulumi:"matcher"`
	// Possible Values: `ATTRIBUTE`, `OCCURRENCE`
	Measure pulumi.StringOutput `pulumi:"measure"`
	// Attribute
	MeasureAttribute pulumi.StringPtrOutput `pulumi:"measureAttribute"`
}

// NewBusinessEventsMetrics registers a new resource with the given unique name, arguments, and options.
func NewBusinessEventsMetrics(ctx *pulumi.Context,
	name string, args *BusinessEventsMetricsArgs, opts ...pulumi.ResourceOption) (*BusinessEventsMetrics, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.Matcher == nil {
		return nil, errors.New("invalid value for required argument 'Matcher'")
	}
	if args.Measure == nil {
		return nil, errors.New("invalid value for required argument 'Measure'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BusinessEventsMetrics
	err := ctx.RegisterResource("dynatrace:index/businessEventsMetrics:BusinessEventsMetrics", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBusinessEventsMetrics gets an existing BusinessEventsMetrics resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBusinessEventsMetrics(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BusinessEventsMetricsState, opts ...pulumi.ResourceOption) (*BusinessEventsMetrics, error) {
	var resource BusinessEventsMetrics
	err := ctx.ReadResource("dynatrace:index/businessEventsMetrics:BusinessEventsMetrics", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BusinessEventsMetrics resources.
type businessEventsMetricsState struct {
	// no documentation available
	Dimensions []string `pulumi:"dimensions"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// Key
	Key *string `pulumi:"key"`
	// [See our documentation](https://dt-url.net/bp234rv)
	Matcher *string `pulumi:"matcher"`
	// Possible Values: `ATTRIBUTE`, `OCCURRENCE`
	Measure *string `pulumi:"measure"`
	// Attribute
	MeasureAttribute *string `pulumi:"measureAttribute"`
}

type BusinessEventsMetricsState struct {
	// no documentation available
	Dimensions pulumi.StringArrayInput
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// Key
	Key pulumi.StringPtrInput
	// [See our documentation](https://dt-url.net/bp234rv)
	Matcher pulumi.StringPtrInput
	// Possible Values: `ATTRIBUTE`, `OCCURRENCE`
	Measure pulumi.StringPtrInput
	// Attribute
	MeasureAttribute pulumi.StringPtrInput
}

func (BusinessEventsMetricsState) ElementType() reflect.Type {
	return reflect.TypeOf((*businessEventsMetricsState)(nil)).Elem()
}

type businessEventsMetricsArgs struct {
	// no documentation available
	Dimensions []string `pulumi:"dimensions"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// Key
	Key string `pulumi:"key"`
	// [See our documentation](https://dt-url.net/bp234rv)
	Matcher string `pulumi:"matcher"`
	// Possible Values: `ATTRIBUTE`, `OCCURRENCE`
	Measure string `pulumi:"measure"`
	// Attribute
	MeasureAttribute *string `pulumi:"measureAttribute"`
}

// The set of arguments for constructing a BusinessEventsMetrics resource.
type BusinessEventsMetricsArgs struct {
	// no documentation available
	Dimensions pulumi.StringArrayInput
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// Key
	Key pulumi.StringInput
	// [See our documentation](https://dt-url.net/bp234rv)
	Matcher pulumi.StringInput
	// Possible Values: `ATTRIBUTE`, `OCCURRENCE`
	Measure pulumi.StringInput
	// Attribute
	MeasureAttribute pulumi.StringPtrInput
}

func (BusinessEventsMetricsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*businessEventsMetricsArgs)(nil)).Elem()
}

type BusinessEventsMetricsInput interface {
	pulumi.Input

	ToBusinessEventsMetricsOutput() BusinessEventsMetricsOutput
	ToBusinessEventsMetricsOutputWithContext(ctx context.Context) BusinessEventsMetricsOutput
}

func (*BusinessEventsMetrics) ElementType() reflect.Type {
	return reflect.TypeOf((**BusinessEventsMetrics)(nil)).Elem()
}

func (i *BusinessEventsMetrics) ToBusinessEventsMetricsOutput() BusinessEventsMetricsOutput {
	return i.ToBusinessEventsMetricsOutputWithContext(context.Background())
}

func (i *BusinessEventsMetrics) ToBusinessEventsMetricsOutputWithContext(ctx context.Context) BusinessEventsMetricsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessEventsMetricsOutput)
}

// BusinessEventsMetricsArrayInput is an input type that accepts BusinessEventsMetricsArray and BusinessEventsMetricsArrayOutput values.
// You can construct a concrete instance of `BusinessEventsMetricsArrayInput` via:
//
//	BusinessEventsMetricsArray{ BusinessEventsMetricsArgs{...} }
type BusinessEventsMetricsArrayInput interface {
	pulumi.Input

	ToBusinessEventsMetricsArrayOutput() BusinessEventsMetricsArrayOutput
	ToBusinessEventsMetricsArrayOutputWithContext(context.Context) BusinessEventsMetricsArrayOutput
}

type BusinessEventsMetricsArray []BusinessEventsMetricsInput

func (BusinessEventsMetricsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BusinessEventsMetrics)(nil)).Elem()
}

func (i BusinessEventsMetricsArray) ToBusinessEventsMetricsArrayOutput() BusinessEventsMetricsArrayOutput {
	return i.ToBusinessEventsMetricsArrayOutputWithContext(context.Background())
}

func (i BusinessEventsMetricsArray) ToBusinessEventsMetricsArrayOutputWithContext(ctx context.Context) BusinessEventsMetricsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessEventsMetricsArrayOutput)
}

// BusinessEventsMetricsMapInput is an input type that accepts BusinessEventsMetricsMap and BusinessEventsMetricsMapOutput values.
// You can construct a concrete instance of `BusinessEventsMetricsMapInput` via:
//
//	BusinessEventsMetricsMap{ "key": BusinessEventsMetricsArgs{...} }
type BusinessEventsMetricsMapInput interface {
	pulumi.Input

	ToBusinessEventsMetricsMapOutput() BusinessEventsMetricsMapOutput
	ToBusinessEventsMetricsMapOutputWithContext(context.Context) BusinessEventsMetricsMapOutput
}

type BusinessEventsMetricsMap map[string]BusinessEventsMetricsInput

func (BusinessEventsMetricsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BusinessEventsMetrics)(nil)).Elem()
}

func (i BusinessEventsMetricsMap) ToBusinessEventsMetricsMapOutput() BusinessEventsMetricsMapOutput {
	return i.ToBusinessEventsMetricsMapOutputWithContext(context.Background())
}

func (i BusinessEventsMetricsMap) ToBusinessEventsMetricsMapOutputWithContext(ctx context.Context) BusinessEventsMetricsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessEventsMetricsMapOutput)
}

type BusinessEventsMetricsOutput struct{ *pulumi.OutputState }

func (BusinessEventsMetricsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BusinessEventsMetrics)(nil)).Elem()
}

func (o BusinessEventsMetricsOutput) ToBusinessEventsMetricsOutput() BusinessEventsMetricsOutput {
	return o
}

func (o BusinessEventsMetricsOutput) ToBusinessEventsMetricsOutputWithContext(ctx context.Context) BusinessEventsMetricsOutput {
	return o
}

// no documentation available
func (o BusinessEventsMetricsOutput) Dimensions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BusinessEventsMetrics) pulumi.StringArrayOutput { return v.Dimensions }).(pulumi.StringArrayOutput)
}

// This setting is enabled (`true`) or disabled (`false`)
func (o BusinessEventsMetricsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *BusinessEventsMetrics) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Key
func (o BusinessEventsMetricsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *BusinessEventsMetrics) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// [See our documentation](https://dt-url.net/bp234rv)
func (o BusinessEventsMetricsOutput) Matcher() pulumi.StringOutput {
	return o.ApplyT(func(v *BusinessEventsMetrics) pulumi.StringOutput { return v.Matcher }).(pulumi.StringOutput)
}

// Possible Values: `ATTRIBUTE`, `OCCURRENCE`
func (o BusinessEventsMetricsOutput) Measure() pulumi.StringOutput {
	return o.ApplyT(func(v *BusinessEventsMetrics) pulumi.StringOutput { return v.Measure }).(pulumi.StringOutput)
}

// Attribute
func (o BusinessEventsMetricsOutput) MeasureAttribute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BusinessEventsMetrics) pulumi.StringPtrOutput { return v.MeasureAttribute }).(pulumi.StringPtrOutput)
}

type BusinessEventsMetricsArrayOutput struct{ *pulumi.OutputState }

func (BusinessEventsMetricsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BusinessEventsMetrics)(nil)).Elem()
}

func (o BusinessEventsMetricsArrayOutput) ToBusinessEventsMetricsArrayOutput() BusinessEventsMetricsArrayOutput {
	return o
}

func (o BusinessEventsMetricsArrayOutput) ToBusinessEventsMetricsArrayOutputWithContext(ctx context.Context) BusinessEventsMetricsArrayOutput {
	return o
}

func (o BusinessEventsMetricsArrayOutput) Index(i pulumi.IntInput) BusinessEventsMetricsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BusinessEventsMetrics {
		return vs[0].([]*BusinessEventsMetrics)[vs[1].(int)]
	}).(BusinessEventsMetricsOutput)
}

type BusinessEventsMetricsMapOutput struct{ *pulumi.OutputState }

func (BusinessEventsMetricsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BusinessEventsMetrics)(nil)).Elem()
}

func (o BusinessEventsMetricsMapOutput) ToBusinessEventsMetricsMapOutput() BusinessEventsMetricsMapOutput {
	return o
}

func (o BusinessEventsMetricsMapOutput) ToBusinessEventsMetricsMapOutputWithContext(ctx context.Context) BusinessEventsMetricsMapOutput {
	return o
}

func (o BusinessEventsMetricsMapOutput) MapIndex(k pulumi.StringInput) BusinessEventsMetricsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BusinessEventsMetrics {
		return vs[0].(map[string]*BusinessEventsMetrics)[vs[1].(string)]
	}).(BusinessEventsMetricsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BusinessEventsMetricsInput)(nil)).Elem(), &BusinessEventsMetrics{})
	pulumi.RegisterInputType(reflect.TypeOf((*BusinessEventsMetricsArrayInput)(nil)).Elem(), BusinessEventsMetricsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BusinessEventsMetricsMapInput)(nil)).Elem(), BusinessEventsMetricsMap{})
	pulumi.RegisterOutputType(BusinessEventsMetricsOutput{})
	pulumi.RegisterOutputType(BusinessEventsMetricsArrayOutput{})
	pulumi.RegisterOutputType(BusinessEventsMetricsMapOutput{})
}
