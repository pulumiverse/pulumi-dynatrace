// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type MonitoredTechnologiesWsmb struct {
	pulumi.CustomResourceState

	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId pulumi.StringPtrOutput `pulumi:"hostId"`
}

// NewMonitoredTechnologiesWsmb registers a new resource with the given unique name, arguments, and options.
func NewMonitoredTechnologiesWsmb(ctx *pulumi.Context,
	name string, args *MonitoredTechnologiesWsmbArgs, opts ...pulumi.ResourceOption) (*MonitoredTechnologiesWsmb, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MonitoredTechnologiesWsmb
	err := ctx.RegisterResource("dynatrace:index/monitoredTechnologiesWsmb:MonitoredTechnologiesWsmb", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMonitoredTechnologiesWsmb gets an existing MonitoredTechnologiesWsmb resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMonitoredTechnologiesWsmb(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MonitoredTechnologiesWsmbState, opts ...pulumi.ResourceOption) (*MonitoredTechnologiesWsmb, error) {
	var resource MonitoredTechnologiesWsmb
	err := ctx.ReadResource("dynatrace:index/monitoredTechnologiesWsmb:MonitoredTechnologiesWsmb", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MonitoredTechnologiesWsmb resources.
type monitoredTechnologiesWsmbState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId *string `pulumi:"hostId"`
}

type MonitoredTechnologiesWsmbState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId pulumi.StringPtrInput
}

func (MonitoredTechnologiesWsmbState) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoredTechnologiesWsmbState)(nil)).Elem()
}

type monitoredTechnologiesWsmbArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId *string `pulumi:"hostId"`
}

// The set of arguments for constructing a MonitoredTechnologiesWsmb resource.
type MonitoredTechnologiesWsmbArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostId pulumi.StringPtrInput
}

func (MonitoredTechnologiesWsmbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoredTechnologiesWsmbArgs)(nil)).Elem()
}

type MonitoredTechnologiesWsmbInput interface {
	pulumi.Input

	ToMonitoredTechnologiesWsmbOutput() MonitoredTechnologiesWsmbOutput
	ToMonitoredTechnologiesWsmbOutputWithContext(ctx context.Context) MonitoredTechnologiesWsmbOutput
}

func (*MonitoredTechnologiesWsmb) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoredTechnologiesWsmb)(nil)).Elem()
}

func (i *MonitoredTechnologiesWsmb) ToMonitoredTechnologiesWsmbOutput() MonitoredTechnologiesWsmbOutput {
	return i.ToMonitoredTechnologiesWsmbOutputWithContext(context.Background())
}

func (i *MonitoredTechnologiesWsmb) ToMonitoredTechnologiesWsmbOutputWithContext(ctx context.Context) MonitoredTechnologiesWsmbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoredTechnologiesWsmbOutput)
}

// MonitoredTechnologiesWsmbArrayInput is an input type that accepts MonitoredTechnologiesWsmbArray and MonitoredTechnologiesWsmbArrayOutput values.
// You can construct a concrete instance of `MonitoredTechnologiesWsmbArrayInput` via:
//
//	MonitoredTechnologiesWsmbArray{ MonitoredTechnologiesWsmbArgs{...} }
type MonitoredTechnologiesWsmbArrayInput interface {
	pulumi.Input

	ToMonitoredTechnologiesWsmbArrayOutput() MonitoredTechnologiesWsmbArrayOutput
	ToMonitoredTechnologiesWsmbArrayOutputWithContext(context.Context) MonitoredTechnologiesWsmbArrayOutput
}

type MonitoredTechnologiesWsmbArray []MonitoredTechnologiesWsmbInput

func (MonitoredTechnologiesWsmbArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MonitoredTechnologiesWsmb)(nil)).Elem()
}

func (i MonitoredTechnologiesWsmbArray) ToMonitoredTechnologiesWsmbArrayOutput() MonitoredTechnologiesWsmbArrayOutput {
	return i.ToMonitoredTechnologiesWsmbArrayOutputWithContext(context.Background())
}

func (i MonitoredTechnologiesWsmbArray) ToMonitoredTechnologiesWsmbArrayOutputWithContext(ctx context.Context) MonitoredTechnologiesWsmbArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoredTechnologiesWsmbArrayOutput)
}

// MonitoredTechnologiesWsmbMapInput is an input type that accepts MonitoredTechnologiesWsmbMap and MonitoredTechnologiesWsmbMapOutput values.
// You can construct a concrete instance of `MonitoredTechnologiesWsmbMapInput` via:
//
//	MonitoredTechnologiesWsmbMap{ "key": MonitoredTechnologiesWsmbArgs{...} }
type MonitoredTechnologiesWsmbMapInput interface {
	pulumi.Input

	ToMonitoredTechnologiesWsmbMapOutput() MonitoredTechnologiesWsmbMapOutput
	ToMonitoredTechnologiesWsmbMapOutputWithContext(context.Context) MonitoredTechnologiesWsmbMapOutput
}

type MonitoredTechnologiesWsmbMap map[string]MonitoredTechnologiesWsmbInput

func (MonitoredTechnologiesWsmbMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MonitoredTechnologiesWsmb)(nil)).Elem()
}

func (i MonitoredTechnologiesWsmbMap) ToMonitoredTechnologiesWsmbMapOutput() MonitoredTechnologiesWsmbMapOutput {
	return i.ToMonitoredTechnologiesWsmbMapOutputWithContext(context.Background())
}

func (i MonitoredTechnologiesWsmbMap) ToMonitoredTechnologiesWsmbMapOutputWithContext(ctx context.Context) MonitoredTechnologiesWsmbMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoredTechnologiesWsmbMapOutput)
}

type MonitoredTechnologiesWsmbOutput struct{ *pulumi.OutputState }

func (MonitoredTechnologiesWsmbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoredTechnologiesWsmb)(nil)).Elem()
}

func (o MonitoredTechnologiesWsmbOutput) ToMonitoredTechnologiesWsmbOutput() MonitoredTechnologiesWsmbOutput {
	return o
}

func (o MonitoredTechnologiesWsmbOutput) ToMonitoredTechnologiesWsmbOutputWithContext(ctx context.Context) MonitoredTechnologiesWsmbOutput {
	return o
}

// This setting is enabled (`true`) or disabled (`false`)
func (o MonitoredTechnologiesWsmbOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *MonitoredTechnologiesWsmb) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
func (o MonitoredTechnologiesWsmbOutput) HostId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitoredTechnologiesWsmb) pulumi.StringPtrOutput { return v.HostId }).(pulumi.StringPtrOutput)
}

type MonitoredTechnologiesWsmbArrayOutput struct{ *pulumi.OutputState }

func (MonitoredTechnologiesWsmbArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MonitoredTechnologiesWsmb)(nil)).Elem()
}

func (o MonitoredTechnologiesWsmbArrayOutput) ToMonitoredTechnologiesWsmbArrayOutput() MonitoredTechnologiesWsmbArrayOutput {
	return o
}

func (o MonitoredTechnologiesWsmbArrayOutput) ToMonitoredTechnologiesWsmbArrayOutputWithContext(ctx context.Context) MonitoredTechnologiesWsmbArrayOutput {
	return o
}

func (o MonitoredTechnologiesWsmbArrayOutput) Index(i pulumi.IntInput) MonitoredTechnologiesWsmbOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MonitoredTechnologiesWsmb {
		return vs[0].([]*MonitoredTechnologiesWsmb)[vs[1].(int)]
	}).(MonitoredTechnologiesWsmbOutput)
}

type MonitoredTechnologiesWsmbMapOutput struct{ *pulumi.OutputState }

func (MonitoredTechnologiesWsmbMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MonitoredTechnologiesWsmb)(nil)).Elem()
}

func (o MonitoredTechnologiesWsmbMapOutput) ToMonitoredTechnologiesWsmbMapOutput() MonitoredTechnologiesWsmbMapOutput {
	return o
}

func (o MonitoredTechnologiesWsmbMapOutput) ToMonitoredTechnologiesWsmbMapOutputWithContext(ctx context.Context) MonitoredTechnologiesWsmbMapOutput {
	return o
}

func (o MonitoredTechnologiesWsmbMapOutput) MapIndex(k pulumi.StringInput) MonitoredTechnologiesWsmbOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MonitoredTechnologiesWsmb {
		return vs[0].(map[string]*MonitoredTechnologiesWsmb)[vs[1].(string)]
	}).(MonitoredTechnologiesWsmbOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoredTechnologiesWsmbInput)(nil)).Elem(), &MonitoredTechnologiesWsmb{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoredTechnologiesWsmbArrayInput)(nil)).Elem(), MonitoredTechnologiesWsmbArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoredTechnologiesWsmbMapInput)(nil)).Elem(), MonitoredTechnologiesWsmbMap{})
	pulumi.RegisterOutputType(MonitoredTechnologiesWsmbOutput{})
	pulumi.RegisterOutputType(MonitoredTechnologiesWsmbArrayOutput{})
	pulumi.RegisterOutputType(MonitoredTechnologiesWsmbMapOutput{})
}
