// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OpenpipelineV2UsersessionsRouting struct {
	pulumi.CustomResourceState

	// Routing for pipelines
	RoutingEntries OpenpipelineV2UsersessionsRoutingRoutingEntriesPtrOutput `pulumi:"routingEntries"`
}

// NewOpenpipelineV2UsersessionsRouting registers a new resource with the given unique name, arguments, and options.
func NewOpenpipelineV2UsersessionsRouting(ctx *pulumi.Context,
	name string, args *OpenpipelineV2UsersessionsRoutingArgs, opts ...pulumi.ResourceOption) (*OpenpipelineV2UsersessionsRouting, error) {
	if args == nil {
		args = &OpenpipelineV2UsersessionsRoutingArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenpipelineV2UsersessionsRouting
	err := ctx.RegisterResource("dynatrace:index/openpipelineV2UsersessionsRouting:OpenpipelineV2UsersessionsRouting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenpipelineV2UsersessionsRouting gets an existing OpenpipelineV2UsersessionsRouting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenpipelineV2UsersessionsRouting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenpipelineV2UsersessionsRoutingState, opts ...pulumi.ResourceOption) (*OpenpipelineV2UsersessionsRouting, error) {
	var resource OpenpipelineV2UsersessionsRouting
	err := ctx.ReadResource("dynatrace:index/openpipelineV2UsersessionsRouting:OpenpipelineV2UsersessionsRouting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenpipelineV2UsersessionsRouting resources.
type openpipelineV2UsersessionsRoutingState struct {
	// Routing for pipelines
	RoutingEntries *OpenpipelineV2UsersessionsRoutingRoutingEntries `pulumi:"routingEntries"`
}

type OpenpipelineV2UsersessionsRoutingState struct {
	// Routing for pipelines
	RoutingEntries OpenpipelineV2UsersessionsRoutingRoutingEntriesPtrInput
}

func (OpenpipelineV2UsersessionsRoutingState) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2UsersessionsRoutingState)(nil)).Elem()
}

type openpipelineV2UsersessionsRoutingArgs struct {
	// Routing for pipelines
	RoutingEntries *OpenpipelineV2UsersessionsRoutingRoutingEntries `pulumi:"routingEntries"`
}

// The set of arguments for constructing a OpenpipelineV2UsersessionsRouting resource.
type OpenpipelineV2UsersessionsRoutingArgs struct {
	// Routing for pipelines
	RoutingEntries OpenpipelineV2UsersessionsRoutingRoutingEntriesPtrInput
}

func (OpenpipelineV2UsersessionsRoutingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2UsersessionsRoutingArgs)(nil)).Elem()
}

type OpenpipelineV2UsersessionsRoutingInput interface {
	pulumi.Input

	ToOpenpipelineV2UsersessionsRoutingOutput() OpenpipelineV2UsersessionsRoutingOutput
	ToOpenpipelineV2UsersessionsRoutingOutputWithContext(ctx context.Context) OpenpipelineV2UsersessionsRoutingOutput
}

func (*OpenpipelineV2UsersessionsRouting) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2UsersessionsRouting)(nil)).Elem()
}

func (i *OpenpipelineV2UsersessionsRouting) ToOpenpipelineV2UsersessionsRoutingOutput() OpenpipelineV2UsersessionsRoutingOutput {
	return i.ToOpenpipelineV2UsersessionsRoutingOutputWithContext(context.Background())
}

func (i *OpenpipelineV2UsersessionsRouting) ToOpenpipelineV2UsersessionsRoutingOutputWithContext(ctx context.Context) OpenpipelineV2UsersessionsRoutingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2UsersessionsRoutingOutput)
}

// OpenpipelineV2UsersessionsRoutingArrayInput is an input type that accepts OpenpipelineV2UsersessionsRoutingArray and OpenpipelineV2UsersessionsRoutingArrayOutput values.
// You can construct a concrete instance of `OpenpipelineV2UsersessionsRoutingArrayInput` via:
//
//	OpenpipelineV2UsersessionsRoutingArray{ OpenpipelineV2UsersessionsRoutingArgs{...} }
type OpenpipelineV2UsersessionsRoutingArrayInput interface {
	pulumi.Input

	ToOpenpipelineV2UsersessionsRoutingArrayOutput() OpenpipelineV2UsersessionsRoutingArrayOutput
	ToOpenpipelineV2UsersessionsRoutingArrayOutputWithContext(context.Context) OpenpipelineV2UsersessionsRoutingArrayOutput
}

type OpenpipelineV2UsersessionsRoutingArray []OpenpipelineV2UsersessionsRoutingInput

func (OpenpipelineV2UsersessionsRoutingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2UsersessionsRouting)(nil)).Elem()
}

func (i OpenpipelineV2UsersessionsRoutingArray) ToOpenpipelineV2UsersessionsRoutingArrayOutput() OpenpipelineV2UsersessionsRoutingArrayOutput {
	return i.ToOpenpipelineV2UsersessionsRoutingArrayOutputWithContext(context.Background())
}

func (i OpenpipelineV2UsersessionsRoutingArray) ToOpenpipelineV2UsersessionsRoutingArrayOutputWithContext(ctx context.Context) OpenpipelineV2UsersessionsRoutingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2UsersessionsRoutingArrayOutput)
}

// OpenpipelineV2UsersessionsRoutingMapInput is an input type that accepts OpenpipelineV2UsersessionsRoutingMap and OpenpipelineV2UsersessionsRoutingMapOutput values.
// You can construct a concrete instance of `OpenpipelineV2UsersessionsRoutingMapInput` via:
//
//	OpenpipelineV2UsersessionsRoutingMap{ "key": OpenpipelineV2UsersessionsRoutingArgs{...} }
type OpenpipelineV2UsersessionsRoutingMapInput interface {
	pulumi.Input

	ToOpenpipelineV2UsersessionsRoutingMapOutput() OpenpipelineV2UsersessionsRoutingMapOutput
	ToOpenpipelineV2UsersessionsRoutingMapOutputWithContext(context.Context) OpenpipelineV2UsersessionsRoutingMapOutput
}

type OpenpipelineV2UsersessionsRoutingMap map[string]OpenpipelineV2UsersessionsRoutingInput

func (OpenpipelineV2UsersessionsRoutingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2UsersessionsRouting)(nil)).Elem()
}

func (i OpenpipelineV2UsersessionsRoutingMap) ToOpenpipelineV2UsersessionsRoutingMapOutput() OpenpipelineV2UsersessionsRoutingMapOutput {
	return i.ToOpenpipelineV2UsersessionsRoutingMapOutputWithContext(context.Background())
}

func (i OpenpipelineV2UsersessionsRoutingMap) ToOpenpipelineV2UsersessionsRoutingMapOutputWithContext(ctx context.Context) OpenpipelineV2UsersessionsRoutingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2UsersessionsRoutingMapOutput)
}

type OpenpipelineV2UsersessionsRoutingOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2UsersessionsRoutingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2UsersessionsRouting)(nil)).Elem()
}

func (o OpenpipelineV2UsersessionsRoutingOutput) ToOpenpipelineV2UsersessionsRoutingOutput() OpenpipelineV2UsersessionsRoutingOutput {
	return o
}

func (o OpenpipelineV2UsersessionsRoutingOutput) ToOpenpipelineV2UsersessionsRoutingOutputWithContext(ctx context.Context) OpenpipelineV2UsersessionsRoutingOutput {
	return o
}

// Routing for pipelines
func (o OpenpipelineV2UsersessionsRoutingOutput) RoutingEntries() OpenpipelineV2UsersessionsRoutingRoutingEntriesPtrOutput {
	return o.ApplyT(func(v *OpenpipelineV2UsersessionsRouting) OpenpipelineV2UsersessionsRoutingRoutingEntriesPtrOutput {
		return v.RoutingEntries
	}).(OpenpipelineV2UsersessionsRoutingRoutingEntriesPtrOutput)
}

type OpenpipelineV2UsersessionsRoutingArrayOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2UsersessionsRoutingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2UsersessionsRouting)(nil)).Elem()
}

func (o OpenpipelineV2UsersessionsRoutingArrayOutput) ToOpenpipelineV2UsersessionsRoutingArrayOutput() OpenpipelineV2UsersessionsRoutingArrayOutput {
	return o
}

func (o OpenpipelineV2UsersessionsRoutingArrayOutput) ToOpenpipelineV2UsersessionsRoutingArrayOutputWithContext(ctx context.Context) OpenpipelineV2UsersessionsRoutingArrayOutput {
	return o
}

func (o OpenpipelineV2UsersessionsRoutingArrayOutput) Index(i pulumi.IntInput) OpenpipelineV2UsersessionsRoutingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenpipelineV2UsersessionsRouting {
		return vs[0].([]*OpenpipelineV2UsersessionsRouting)[vs[1].(int)]
	}).(OpenpipelineV2UsersessionsRoutingOutput)
}

type OpenpipelineV2UsersessionsRoutingMapOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2UsersessionsRoutingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2UsersessionsRouting)(nil)).Elem()
}

func (o OpenpipelineV2UsersessionsRoutingMapOutput) ToOpenpipelineV2UsersessionsRoutingMapOutput() OpenpipelineV2UsersessionsRoutingMapOutput {
	return o
}

func (o OpenpipelineV2UsersessionsRoutingMapOutput) ToOpenpipelineV2UsersessionsRoutingMapOutputWithContext(ctx context.Context) OpenpipelineV2UsersessionsRoutingMapOutput {
	return o
}

func (o OpenpipelineV2UsersessionsRoutingMapOutput) MapIndex(k pulumi.StringInput) OpenpipelineV2UsersessionsRoutingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenpipelineV2UsersessionsRouting {
		return vs[0].(map[string]*OpenpipelineV2UsersessionsRouting)[vs[1].(string)]
	}).(OpenpipelineV2UsersessionsRoutingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2UsersessionsRoutingInput)(nil)).Elem(), &OpenpipelineV2UsersessionsRouting{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2UsersessionsRoutingArrayInput)(nil)).Elem(), OpenpipelineV2UsersessionsRoutingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2UsersessionsRoutingMapInput)(nil)).Elem(), OpenpipelineV2UsersessionsRoutingMap{})
	pulumi.RegisterOutputType(OpenpipelineV2UsersessionsRoutingOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2UsersessionsRoutingArrayOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2UsersessionsRoutingMapOutput{})
}
