// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

// The `getGeoRegions` data source retrieves the list of regions and their codes based on country code.
//
// - `countryCode` (String) - The ISO code of the required country
//
// Geographic regions API: GET regions of a country - https://docs.dynatrace.com/docs/shortlink/api-v2-rum-geographic-regions-get-regions-country
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := dynatrace.GetGeoRegions(ctx, &dynatrace.GetGeoRegionsArgs{
//				CountryCode: "FR",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("test", example)
//			return nil
//		})
//	}
//
// ```
func GetGeoRegions(ctx *pulumi.Context, args *GetGeoRegionsArgs, opts ...pulumi.InvokeOption) (*GetGeoRegionsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetGeoRegionsResult
	err := ctx.Invoke("dynatrace:index/getGeoRegions:getGeoRegions", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGeoRegions.
type GetGeoRegionsArgs struct {
	// The ISO code of the required country
	CountryCode string `pulumi:"countryCode"`
}

// A collection of values returned by getGeoRegions.
type GetGeoRegionsResult struct {
	// The ISO code of the required country
	CountryCode string `pulumi:"countryCode"`
	// The provider-assigned unique ID for this managed resource.
	Id      string                `pulumi:"id"`
	Regions []GetGeoRegionsRegion `pulumi:"regions"`
}

func GetGeoRegionsOutput(ctx *pulumi.Context, args GetGeoRegionsOutputArgs, opts ...pulumi.InvokeOption) GetGeoRegionsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetGeoRegionsResultOutput, error) {
			args := v.(GetGeoRegionsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("dynatrace:index/getGeoRegions:getGeoRegions", args, GetGeoRegionsResultOutput{}, options).(GetGeoRegionsResultOutput), nil
		}).(GetGeoRegionsResultOutput)
}

// A collection of arguments for invoking getGeoRegions.
type GetGeoRegionsOutputArgs struct {
	// The ISO code of the required country
	CountryCode pulumi.StringInput `pulumi:"countryCode"`
}

func (GetGeoRegionsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGeoRegionsArgs)(nil)).Elem()
}

// A collection of values returned by getGeoRegions.
type GetGeoRegionsResultOutput struct{ *pulumi.OutputState }

func (GetGeoRegionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGeoRegionsResult)(nil)).Elem()
}

func (o GetGeoRegionsResultOutput) ToGetGeoRegionsResultOutput() GetGeoRegionsResultOutput {
	return o
}

func (o GetGeoRegionsResultOutput) ToGetGeoRegionsResultOutputWithContext(ctx context.Context) GetGeoRegionsResultOutput {
	return o
}

// The ISO code of the required country
func (o GetGeoRegionsResultOutput) CountryCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetGeoRegionsResult) string { return v.CountryCode }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetGeoRegionsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetGeoRegionsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetGeoRegionsResultOutput) Regions() GetGeoRegionsRegionArrayOutput {
	return o.ApplyT(func(v GetGeoRegionsResult) []GetGeoRegionsRegion { return v.Regions }).(GetGeoRegionsRegionArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetGeoRegionsResultOutput{})
}
