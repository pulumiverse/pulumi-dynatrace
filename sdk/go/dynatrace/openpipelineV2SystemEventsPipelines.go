// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OpenpipelineV2SystemEventsPipelines struct {
	pulumi.CustomResourceState

	// Cost allocation stage
	CostAllocation OpenpipelineV2SystemEventsPipelinesCostAllocationOutput `pulumi:"costAllocation"`
	// Custom pipeline id
	CustomId pulumi.StringOutput `pulumi:"customId"`
	// Data extraction stage
	DataExtraction OpenpipelineV2SystemEventsPipelinesDataExtractionOutput `pulumi:"dataExtraction"`
	// Davis event extraction stage
	Davis OpenpipelineV2SystemEventsPipelinesDavisOutput `pulumi:"davis"`
	// Display name
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Metrics extraction stage
	MetricExtraction OpenpipelineV2SystemEventsPipelinesMetricExtractionOutput `pulumi:"metricExtraction"`
	// Processing stage
	Processing OpenpipelineV2SystemEventsPipelinesProcessingOutput `pulumi:"processing"`
	// Product allocation stage
	ProductAllocation OpenpipelineV2SystemEventsPipelinesProductAllocationOutput `pulumi:"productAllocation"`
	// Security context stage
	SecurityContext OpenpipelineV2SystemEventsPipelinesSecurityContextOutput `pulumi:"securityContext"`
	// Storage stage
	Storage OpenpipelineV2SystemEventsPipelinesStorageOutput `pulumi:"storage"`
}

// NewOpenpipelineV2SystemEventsPipelines registers a new resource with the given unique name, arguments, and options.
func NewOpenpipelineV2SystemEventsPipelines(ctx *pulumi.Context,
	name string, args *OpenpipelineV2SystemEventsPipelinesArgs, opts ...pulumi.ResourceOption) (*OpenpipelineV2SystemEventsPipelines, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CostAllocation == nil {
		return nil, errors.New("invalid value for required argument 'CostAllocation'")
	}
	if args.CustomId == nil {
		return nil, errors.New("invalid value for required argument 'CustomId'")
	}
	if args.DataExtraction == nil {
		return nil, errors.New("invalid value for required argument 'DataExtraction'")
	}
	if args.Davis == nil {
		return nil, errors.New("invalid value for required argument 'Davis'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.MetricExtraction == nil {
		return nil, errors.New("invalid value for required argument 'MetricExtraction'")
	}
	if args.Processing == nil {
		return nil, errors.New("invalid value for required argument 'Processing'")
	}
	if args.ProductAllocation == nil {
		return nil, errors.New("invalid value for required argument 'ProductAllocation'")
	}
	if args.SecurityContext == nil {
		return nil, errors.New("invalid value for required argument 'SecurityContext'")
	}
	if args.Storage == nil {
		return nil, errors.New("invalid value for required argument 'Storage'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenpipelineV2SystemEventsPipelines
	err := ctx.RegisterResource("dynatrace:index/openpipelineV2SystemEventsPipelines:OpenpipelineV2SystemEventsPipelines", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenpipelineV2SystemEventsPipelines gets an existing OpenpipelineV2SystemEventsPipelines resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenpipelineV2SystemEventsPipelines(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenpipelineV2SystemEventsPipelinesState, opts ...pulumi.ResourceOption) (*OpenpipelineV2SystemEventsPipelines, error) {
	var resource OpenpipelineV2SystemEventsPipelines
	err := ctx.ReadResource("dynatrace:index/openpipelineV2SystemEventsPipelines:OpenpipelineV2SystemEventsPipelines", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenpipelineV2SystemEventsPipelines resources.
type openpipelineV2SystemEventsPipelinesState struct {
	// Cost allocation stage
	CostAllocation *OpenpipelineV2SystemEventsPipelinesCostAllocation `pulumi:"costAllocation"`
	// Custom pipeline id
	CustomId *string `pulumi:"customId"`
	// Data extraction stage
	DataExtraction *OpenpipelineV2SystemEventsPipelinesDataExtraction `pulumi:"dataExtraction"`
	// Davis event extraction stage
	Davis *OpenpipelineV2SystemEventsPipelinesDavis `pulumi:"davis"`
	// Display name
	DisplayName *string `pulumi:"displayName"`
	// Metrics extraction stage
	MetricExtraction *OpenpipelineV2SystemEventsPipelinesMetricExtraction `pulumi:"metricExtraction"`
	// Processing stage
	Processing *OpenpipelineV2SystemEventsPipelinesProcessing `pulumi:"processing"`
	// Product allocation stage
	ProductAllocation *OpenpipelineV2SystemEventsPipelinesProductAllocation `pulumi:"productAllocation"`
	// Security context stage
	SecurityContext *OpenpipelineV2SystemEventsPipelinesSecurityContext `pulumi:"securityContext"`
	// Storage stage
	Storage *OpenpipelineV2SystemEventsPipelinesStorage `pulumi:"storage"`
}

type OpenpipelineV2SystemEventsPipelinesState struct {
	// Cost allocation stage
	CostAllocation OpenpipelineV2SystemEventsPipelinesCostAllocationPtrInput
	// Custom pipeline id
	CustomId pulumi.StringPtrInput
	// Data extraction stage
	DataExtraction OpenpipelineV2SystemEventsPipelinesDataExtractionPtrInput
	// Davis event extraction stage
	Davis OpenpipelineV2SystemEventsPipelinesDavisPtrInput
	// Display name
	DisplayName pulumi.StringPtrInput
	// Metrics extraction stage
	MetricExtraction OpenpipelineV2SystemEventsPipelinesMetricExtractionPtrInput
	// Processing stage
	Processing OpenpipelineV2SystemEventsPipelinesProcessingPtrInput
	// Product allocation stage
	ProductAllocation OpenpipelineV2SystemEventsPipelinesProductAllocationPtrInput
	// Security context stage
	SecurityContext OpenpipelineV2SystemEventsPipelinesSecurityContextPtrInput
	// Storage stage
	Storage OpenpipelineV2SystemEventsPipelinesStoragePtrInput
}

func (OpenpipelineV2SystemEventsPipelinesState) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2SystemEventsPipelinesState)(nil)).Elem()
}

type openpipelineV2SystemEventsPipelinesArgs struct {
	// Cost allocation stage
	CostAllocation OpenpipelineV2SystemEventsPipelinesCostAllocation `pulumi:"costAllocation"`
	// Custom pipeline id
	CustomId string `pulumi:"customId"`
	// Data extraction stage
	DataExtraction OpenpipelineV2SystemEventsPipelinesDataExtraction `pulumi:"dataExtraction"`
	// Davis event extraction stage
	Davis OpenpipelineV2SystemEventsPipelinesDavis `pulumi:"davis"`
	// Display name
	DisplayName string `pulumi:"displayName"`
	// Metrics extraction stage
	MetricExtraction OpenpipelineV2SystemEventsPipelinesMetricExtraction `pulumi:"metricExtraction"`
	// Processing stage
	Processing OpenpipelineV2SystemEventsPipelinesProcessing `pulumi:"processing"`
	// Product allocation stage
	ProductAllocation OpenpipelineV2SystemEventsPipelinesProductAllocation `pulumi:"productAllocation"`
	// Security context stage
	SecurityContext OpenpipelineV2SystemEventsPipelinesSecurityContext `pulumi:"securityContext"`
	// Storage stage
	Storage OpenpipelineV2SystemEventsPipelinesStorage `pulumi:"storage"`
}

// The set of arguments for constructing a OpenpipelineV2SystemEventsPipelines resource.
type OpenpipelineV2SystemEventsPipelinesArgs struct {
	// Cost allocation stage
	CostAllocation OpenpipelineV2SystemEventsPipelinesCostAllocationInput
	// Custom pipeline id
	CustomId pulumi.StringInput
	// Data extraction stage
	DataExtraction OpenpipelineV2SystemEventsPipelinesDataExtractionInput
	// Davis event extraction stage
	Davis OpenpipelineV2SystemEventsPipelinesDavisInput
	// Display name
	DisplayName pulumi.StringInput
	// Metrics extraction stage
	MetricExtraction OpenpipelineV2SystemEventsPipelinesMetricExtractionInput
	// Processing stage
	Processing OpenpipelineV2SystemEventsPipelinesProcessingInput
	// Product allocation stage
	ProductAllocation OpenpipelineV2SystemEventsPipelinesProductAllocationInput
	// Security context stage
	SecurityContext OpenpipelineV2SystemEventsPipelinesSecurityContextInput
	// Storage stage
	Storage OpenpipelineV2SystemEventsPipelinesStorageInput
}

func (OpenpipelineV2SystemEventsPipelinesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineV2SystemEventsPipelinesArgs)(nil)).Elem()
}

type OpenpipelineV2SystemEventsPipelinesInput interface {
	pulumi.Input

	ToOpenpipelineV2SystemEventsPipelinesOutput() OpenpipelineV2SystemEventsPipelinesOutput
	ToOpenpipelineV2SystemEventsPipelinesOutputWithContext(ctx context.Context) OpenpipelineV2SystemEventsPipelinesOutput
}

func (*OpenpipelineV2SystemEventsPipelines) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2SystemEventsPipelines)(nil)).Elem()
}

func (i *OpenpipelineV2SystemEventsPipelines) ToOpenpipelineV2SystemEventsPipelinesOutput() OpenpipelineV2SystemEventsPipelinesOutput {
	return i.ToOpenpipelineV2SystemEventsPipelinesOutputWithContext(context.Background())
}

func (i *OpenpipelineV2SystemEventsPipelines) ToOpenpipelineV2SystemEventsPipelinesOutputWithContext(ctx context.Context) OpenpipelineV2SystemEventsPipelinesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2SystemEventsPipelinesOutput)
}

// OpenpipelineV2SystemEventsPipelinesArrayInput is an input type that accepts OpenpipelineV2SystemEventsPipelinesArray and OpenpipelineV2SystemEventsPipelinesArrayOutput values.
// You can construct a concrete instance of `OpenpipelineV2SystemEventsPipelinesArrayInput` via:
//
//	OpenpipelineV2SystemEventsPipelinesArray{ OpenpipelineV2SystemEventsPipelinesArgs{...} }
type OpenpipelineV2SystemEventsPipelinesArrayInput interface {
	pulumi.Input

	ToOpenpipelineV2SystemEventsPipelinesArrayOutput() OpenpipelineV2SystemEventsPipelinesArrayOutput
	ToOpenpipelineV2SystemEventsPipelinesArrayOutputWithContext(context.Context) OpenpipelineV2SystemEventsPipelinesArrayOutput
}

type OpenpipelineV2SystemEventsPipelinesArray []OpenpipelineV2SystemEventsPipelinesInput

func (OpenpipelineV2SystemEventsPipelinesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2SystemEventsPipelines)(nil)).Elem()
}

func (i OpenpipelineV2SystemEventsPipelinesArray) ToOpenpipelineV2SystemEventsPipelinesArrayOutput() OpenpipelineV2SystemEventsPipelinesArrayOutput {
	return i.ToOpenpipelineV2SystemEventsPipelinesArrayOutputWithContext(context.Background())
}

func (i OpenpipelineV2SystemEventsPipelinesArray) ToOpenpipelineV2SystemEventsPipelinesArrayOutputWithContext(ctx context.Context) OpenpipelineV2SystemEventsPipelinesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2SystemEventsPipelinesArrayOutput)
}

// OpenpipelineV2SystemEventsPipelinesMapInput is an input type that accepts OpenpipelineV2SystemEventsPipelinesMap and OpenpipelineV2SystemEventsPipelinesMapOutput values.
// You can construct a concrete instance of `OpenpipelineV2SystemEventsPipelinesMapInput` via:
//
//	OpenpipelineV2SystemEventsPipelinesMap{ "key": OpenpipelineV2SystemEventsPipelinesArgs{...} }
type OpenpipelineV2SystemEventsPipelinesMapInput interface {
	pulumi.Input

	ToOpenpipelineV2SystemEventsPipelinesMapOutput() OpenpipelineV2SystemEventsPipelinesMapOutput
	ToOpenpipelineV2SystemEventsPipelinesMapOutputWithContext(context.Context) OpenpipelineV2SystemEventsPipelinesMapOutput
}

type OpenpipelineV2SystemEventsPipelinesMap map[string]OpenpipelineV2SystemEventsPipelinesInput

func (OpenpipelineV2SystemEventsPipelinesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2SystemEventsPipelines)(nil)).Elem()
}

func (i OpenpipelineV2SystemEventsPipelinesMap) ToOpenpipelineV2SystemEventsPipelinesMapOutput() OpenpipelineV2SystemEventsPipelinesMapOutput {
	return i.ToOpenpipelineV2SystemEventsPipelinesMapOutputWithContext(context.Background())
}

func (i OpenpipelineV2SystemEventsPipelinesMap) ToOpenpipelineV2SystemEventsPipelinesMapOutputWithContext(ctx context.Context) OpenpipelineV2SystemEventsPipelinesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineV2SystemEventsPipelinesMapOutput)
}

type OpenpipelineV2SystemEventsPipelinesOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2SystemEventsPipelinesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineV2SystemEventsPipelines)(nil)).Elem()
}

func (o OpenpipelineV2SystemEventsPipelinesOutput) ToOpenpipelineV2SystemEventsPipelinesOutput() OpenpipelineV2SystemEventsPipelinesOutput {
	return o
}

func (o OpenpipelineV2SystemEventsPipelinesOutput) ToOpenpipelineV2SystemEventsPipelinesOutputWithContext(ctx context.Context) OpenpipelineV2SystemEventsPipelinesOutput {
	return o
}

// Cost allocation stage
func (o OpenpipelineV2SystemEventsPipelinesOutput) CostAllocation() OpenpipelineV2SystemEventsPipelinesCostAllocationOutput {
	return o.ApplyT(func(v *OpenpipelineV2SystemEventsPipelines) OpenpipelineV2SystemEventsPipelinesCostAllocationOutput {
		return v.CostAllocation
	}).(OpenpipelineV2SystemEventsPipelinesCostAllocationOutput)
}

// Custom pipeline id
func (o OpenpipelineV2SystemEventsPipelinesOutput) CustomId() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenpipelineV2SystemEventsPipelines) pulumi.StringOutput { return v.CustomId }).(pulumi.StringOutput)
}

// Data extraction stage
func (o OpenpipelineV2SystemEventsPipelinesOutput) DataExtraction() OpenpipelineV2SystemEventsPipelinesDataExtractionOutput {
	return o.ApplyT(func(v *OpenpipelineV2SystemEventsPipelines) OpenpipelineV2SystemEventsPipelinesDataExtractionOutput {
		return v.DataExtraction
	}).(OpenpipelineV2SystemEventsPipelinesDataExtractionOutput)
}

// Davis event extraction stage
func (o OpenpipelineV2SystemEventsPipelinesOutput) Davis() OpenpipelineV2SystemEventsPipelinesDavisOutput {
	return o.ApplyT(func(v *OpenpipelineV2SystemEventsPipelines) OpenpipelineV2SystemEventsPipelinesDavisOutput {
		return v.Davis
	}).(OpenpipelineV2SystemEventsPipelinesDavisOutput)
}

// Display name
func (o OpenpipelineV2SystemEventsPipelinesOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenpipelineV2SystemEventsPipelines) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Metrics extraction stage
func (o OpenpipelineV2SystemEventsPipelinesOutput) MetricExtraction() OpenpipelineV2SystemEventsPipelinesMetricExtractionOutput {
	return o.ApplyT(func(v *OpenpipelineV2SystemEventsPipelines) OpenpipelineV2SystemEventsPipelinesMetricExtractionOutput {
		return v.MetricExtraction
	}).(OpenpipelineV2SystemEventsPipelinesMetricExtractionOutput)
}

// Processing stage
func (o OpenpipelineV2SystemEventsPipelinesOutput) Processing() OpenpipelineV2SystemEventsPipelinesProcessingOutput {
	return o.ApplyT(func(v *OpenpipelineV2SystemEventsPipelines) OpenpipelineV2SystemEventsPipelinesProcessingOutput {
		return v.Processing
	}).(OpenpipelineV2SystemEventsPipelinesProcessingOutput)
}

// Product allocation stage
func (o OpenpipelineV2SystemEventsPipelinesOutput) ProductAllocation() OpenpipelineV2SystemEventsPipelinesProductAllocationOutput {
	return o.ApplyT(func(v *OpenpipelineV2SystemEventsPipelines) OpenpipelineV2SystemEventsPipelinesProductAllocationOutput {
		return v.ProductAllocation
	}).(OpenpipelineV2SystemEventsPipelinesProductAllocationOutput)
}

// Security context stage
func (o OpenpipelineV2SystemEventsPipelinesOutput) SecurityContext() OpenpipelineV2SystemEventsPipelinesSecurityContextOutput {
	return o.ApplyT(func(v *OpenpipelineV2SystemEventsPipelines) OpenpipelineV2SystemEventsPipelinesSecurityContextOutput {
		return v.SecurityContext
	}).(OpenpipelineV2SystemEventsPipelinesSecurityContextOutput)
}

// Storage stage
func (o OpenpipelineV2SystemEventsPipelinesOutput) Storage() OpenpipelineV2SystemEventsPipelinesStorageOutput {
	return o.ApplyT(func(v *OpenpipelineV2SystemEventsPipelines) OpenpipelineV2SystemEventsPipelinesStorageOutput {
		return v.Storage
	}).(OpenpipelineV2SystemEventsPipelinesStorageOutput)
}

type OpenpipelineV2SystemEventsPipelinesArrayOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2SystemEventsPipelinesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineV2SystemEventsPipelines)(nil)).Elem()
}

func (o OpenpipelineV2SystemEventsPipelinesArrayOutput) ToOpenpipelineV2SystemEventsPipelinesArrayOutput() OpenpipelineV2SystemEventsPipelinesArrayOutput {
	return o
}

func (o OpenpipelineV2SystemEventsPipelinesArrayOutput) ToOpenpipelineV2SystemEventsPipelinesArrayOutputWithContext(ctx context.Context) OpenpipelineV2SystemEventsPipelinesArrayOutput {
	return o
}

func (o OpenpipelineV2SystemEventsPipelinesArrayOutput) Index(i pulumi.IntInput) OpenpipelineV2SystemEventsPipelinesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenpipelineV2SystemEventsPipelines {
		return vs[0].([]*OpenpipelineV2SystemEventsPipelines)[vs[1].(int)]
	}).(OpenpipelineV2SystemEventsPipelinesOutput)
}

type OpenpipelineV2SystemEventsPipelinesMapOutput struct{ *pulumi.OutputState }

func (OpenpipelineV2SystemEventsPipelinesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineV2SystemEventsPipelines)(nil)).Elem()
}

func (o OpenpipelineV2SystemEventsPipelinesMapOutput) ToOpenpipelineV2SystemEventsPipelinesMapOutput() OpenpipelineV2SystemEventsPipelinesMapOutput {
	return o
}

func (o OpenpipelineV2SystemEventsPipelinesMapOutput) ToOpenpipelineV2SystemEventsPipelinesMapOutputWithContext(ctx context.Context) OpenpipelineV2SystemEventsPipelinesMapOutput {
	return o
}

func (o OpenpipelineV2SystemEventsPipelinesMapOutput) MapIndex(k pulumi.StringInput) OpenpipelineV2SystemEventsPipelinesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenpipelineV2SystemEventsPipelines {
		return vs[0].(map[string]*OpenpipelineV2SystemEventsPipelines)[vs[1].(string)]
	}).(OpenpipelineV2SystemEventsPipelinesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2SystemEventsPipelinesInput)(nil)).Elem(), &OpenpipelineV2SystemEventsPipelines{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2SystemEventsPipelinesArrayInput)(nil)).Elem(), OpenpipelineV2SystemEventsPipelinesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineV2SystemEventsPipelinesMapInput)(nil)).Elem(), OpenpipelineV2SystemEventsPipelinesMap{})
	pulumi.RegisterOutputType(OpenpipelineV2SystemEventsPipelinesOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2SystemEventsPipelinesArrayOutput{})
	pulumi.RegisterOutputType(OpenpipelineV2SystemEventsPipelinesMapOutput{})
}
