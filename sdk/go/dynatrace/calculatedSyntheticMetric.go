// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type CalculatedSyntheticMetric struct {
	pulumi.CustomResourceState

	// Descriptor of a calculated synthetic metric.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Dimension of the calculated synthetic metric.
	Dimensions CalculatedSyntheticMetricDimensionArrayOutput `pulumi:"dimensions"`
	// The metric is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Filter of the calculated synthetic metric.
	Filter CalculatedSyntheticMetricFilterPtrOutput `pulumi:"filter"`
	// The type of the synthetic metric. Possible values: [ ApplicationCache, Callback, CumulativeLayoutShift, DNSLookup, DOMComplete, DOMContentLoaded, DOMInteractive, FailedRequestsResources, FirstContentfulPaint, FirstInputDelay, FirstInputStart, FirstPaint, HTMLDownloaded, HttpErrors, JavaScriptErrors, LargestContentfulPaint, LoadEventEnd, LoadEventStart, LongTasks, NavigationStart, OnDOMContentLoaded, OnLoad, Processing, RedirectTime, Request, RequestStart, ResourceCount, Response, SecureConnect, SpeedIndex, TCPConnect, TimeToFirstByte, TotalDuration, TransferSize, UserActionDuration, VisuallyComplete ]
	Metric pulumi.StringOutput `pulumi:"metric"`
	// The unique key of the calculated synthetic metric.
	MetricKey pulumi.StringOutput `pulumi:"metricKey"`
	// The Dynatrace entity ID of the monitor to which the metric belongs.
	MonitorIdentifier pulumi.StringOutput `pulumi:"monitorIdentifier"`
	// The displayed name of the metric.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewCalculatedSyntheticMetric registers a new resource with the given unique name, arguments, and options.
func NewCalculatedSyntheticMetric(ctx *pulumi.Context,
	name string, args *CalculatedSyntheticMetricArgs, opts ...pulumi.ResourceOption) (*CalculatedSyntheticMetric, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Metric == nil {
		return nil, errors.New("invalid value for required argument 'Metric'")
	}
	if args.MetricKey == nil {
		return nil, errors.New("invalid value for required argument 'MetricKey'")
	}
	if args.MonitorIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'MonitorIdentifier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CalculatedSyntheticMetric
	err := ctx.RegisterResource("dynatrace:index/calculatedSyntheticMetric:CalculatedSyntheticMetric", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCalculatedSyntheticMetric gets an existing CalculatedSyntheticMetric resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCalculatedSyntheticMetric(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CalculatedSyntheticMetricState, opts ...pulumi.ResourceOption) (*CalculatedSyntheticMetric, error) {
	var resource CalculatedSyntheticMetric
	err := ctx.ReadResource("dynatrace:index/calculatedSyntheticMetric:CalculatedSyntheticMetric", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CalculatedSyntheticMetric resources.
type calculatedSyntheticMetricState struct {
	// Descriptor of a calculated synthetic metric.
	Description *string `pulumi:"description"`
	// Dimension of the calculated synthetic metric.
	Dimensions []CalculatedSyntheticMetricDimension `pulumi:"dimensions"`
	// The metric is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// Filter of the calculated synthetic metric.
	Filter *CalculatedSyntheticMetricFilter `pulumi:"filter"`
	// The type of the synthetic metric. Possible values: [ ApplicationCache, Callback, CumulativeLayoutShift, DNSLookup, DOMComplete, DOMContentLoaded, DOMInteractive, FailedRequestsResources, FirstContentfulPaint, FirstInputDelay, FirstInputStart, FirstPaint, HTMLDownloaded, HttpErrors, JavaScriptErrors, LargestContentfulPaint, LoadEventEnd, LoadEventStart, LongTasks, NavigationStart, OnDOMContentLoaded, OnLoad, Processing, RedirectTime, Request, RequestStart, ResourceCount, Response, SecureConnect, SpeedIndex, TCPConnect, TimeToFirstByte, TotalDuration, TransferSize, UserActionDuration, VisuallyComplete ]
	Metric *string `pulumi:"metric"`
	// The unique key of the calculated synthetic metric.
	MetricKey *string `pulumi:"metricKey"`
	// The Dynatrace entity ID of the monitor to which the metric belongs.
	MonitorIdentifier *string `pulumi:"monitorIdentifier"`
	// The displayed name of the metric.
	Name *string `pulumi:"name"`
}

type CalculatedSyntheticMetricState struct {
	// Descriptor of a calculated synthetic metric.
	Description pulumi.StringPtrInput
	// Dimension of the calculated synthetic metric.
	Dimensions CalculatedSyntheticMetricDimensionArrayInput
	// The metric is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// Filter of the calculated synthetic metric.
	Filter CalculatedSyntheticMetricFilterPtrInput
	// The type of the synthetic metric. Possible values: [ ApplicationCache, Callback, CumulativeLayoutShift, DNSLookup, DOMComplete, DOMContentLoaded, DOMInteractive, FailedRequestsResources, FirstContentfulPaint, FirstInputDelay, FirstInputStart, FirstPaint, HTMLDownloaded, HttpErrors, JavaScriptErrors, LargestContentfulPaint, LoadEventEnd, LoadEventStart, LongTasks, NavigationStart, OnDOMContentLoaded, OnLoad, Processing, RedirectTime, Request, RequestStart, ResourceCount, Response, SecureConnect, SpeedIndex, TCPConnect, TimeToFirstByte, TotalDuration, TransferSize, UserActionDuration, VisuallyComplete ]
	Metric pulumi.StringPtrInput
	// The unique key of the calculated synthetic metric.
	MetricKey pulumi.StringPtrInput
	// The Dynatrace entity ID of the monitor to which the metric belongs.
	MonitorIdentifier pulumi.StringPtrInput
	// The displayed name of the metric.
	Name pulumi.StringPtrInput
}

func (CalculatedSyntheticMetricState) ElementType() reflect.Type {
	return reflect.TypeOf((*calculatedSyntheticMetricState)(nil)).Elem()
}

type calculatedSyntheticMetricArgs struct {
	// Descriptor of a calculated synthetic metric.
	Description *string `pulumi:"description"`
	// Dimension of the calculated synthetic metric.
	Dimensions []CalculatedSyntheticMetricDimension `pulumi:"dimensions"`
	// The metric is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// Filter of the calculated synthetic metric.
	Filter *CalculatedSyntheticMetricFilter `pulumi:"filter"`
	// The type of the synthetic metric. Possible values: [ ApplicationCache, Callback, CumulativeLayoutShift, DNSLookup, DOMComplete, DOMContentLoaded, DOMInteractive, FailedRequestsResources, FirstContentfulPaint, FirstInputDelay, FirstInputStart, FirstPaint, HTMLDownloaded, HttpErrors, JavaScriptErrors, LargestContentfulPaint, LoadEventEnd, LoadEventStart, LongTasks, NavigationStart, OnDOMContentLoaded, OnLoad, Processing, RedirectTime, Request, RequestStart, ResourceCount, Response, SecureConnect, SpeedIndex, TCPConnect, TimeToFirstByte, TotalDuration, TransferSize, UserActionDuration, VisuallyComplete ]
	Metric string `pulumi:"metric"`
	// The unique key of the calculated synthetic metric.
	MetricKey string `pulumi:"metricKey"`
	// The Dynatrace entity ID of the monitor to which the metric belongs.
	MonitorIdentifier string `pulumi:"monitorIdentifier"`
	// The displayed name of the metric.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a CalculatedSyntheticMetric resource.
type CalculatedSyntheticMetricArgs struct {
	// Descriptor of a calculated synthetic metric.
	Description pulumi.StringPtrInput
	// Dimension of the calculated synthetic metric.
	Dimensions CalculatedSyntheticMetricDimensionArrayInput
	// The metric is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// Filter of the calculated synthetic metric.
	Filter CalculatedSyntheticMetricFilterPtrInput
	// The type of the synthetic metric. Possible values: [ ApplicationCache, Callback, CumulativeLayoutShift, DNSLookup, DOMComplete, DOMContentLoaded, DOMInteractive, FailedRequestsResources, FirstContentfulPaint, FirstInputDelay, FirstInputStart, FirstPaint, HTMLDownloaded, HttpErrors, JavaScriptErrors, LargestContentfulPaint, LoadEventEnd, LoadEventStart, LongTasks, NavigationStart, OnDOMContentLoaded, OnLoad, Processing, RedirectTime, Request, RequestStart, ResourceCount, Response, SecureConnect, SpeedIndex, TCPConnect, TimeToFirstByte, TotalDuration, TransferSize, UserActionDuration, VisuallyComplete ]
	Metric pulumi.StringInput
	// The unique key of the calculated synthetic metric.
	MetricKey pulumi.StringInput
	// The Dynatrace entity ID of the monitor to which the metric belongs.
	MonitorIdentifier pulumi.StringInput
	// The displayed name of the metric.
	Name pulumi.StringPtrInput
}

func (CalculatedSyntheticMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*calculatedSyntheticMetricArgs)(nil)).Elem()
}

type CalculatedSyntheticMetricInput interface {
	pulumi.Input

	ToCalculatedSyntheticMetricOutput() CalculatedSyntheticMetricOutput
	ToCalculatedSyntheticMetricOutputWithContext(ctx context.Context) CalculatedSyntheticMetricOutput
}

func (*CalculatedSyntheticMetric) ElementType() reflect.Type {
	return reflect.TypeOf((**CalculatedSyntheticMetric)(nil)).Elem()
}

func (i *CalculatedSyntheticMetric) ToCalculatedSyntheticMetricOutput() CalculatedSyntheticMetricOutput {
	return i.ToCalculatedSyntheticMetricOutputWithContext(context.Background())
}

func (i *CalculatedSyntheticMetric) ToCalculatedSyntheticMetricOutputWithContext(ctx context.Context) CalculatedSyntheticMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CalculatedSyntheticMetricOutput)
}

// CalculatedSyntheticMetricArrayInput is an input type that accepts CalculatedSyntheticMetricArray and CalculatedSyntheticMetricArrayOutput values.
// You can construct a concrete instance of `CalculatedSyntheticMetricArrayInput` via:
//
//	CalculatedSyntheticMetricArray{ CalculatedSyntheticMetricArgs{...} }
type CalculatedSyntheticMetricArrayInput interface {
	pulumi.Input

	ToCalculatedSyntheticMetricArrayOutput() CalculatedSyntheticMetricArrayOutput
	ToCalculatedSyntheticMetricArrayOutputWithContext(context.Context) CalculatedSyntheticMetricArrayOutput
}

type CalculatedSyntheticMetricArray []CalculatedSyntheticMetricInput

func (CalculatedSyntheticMetricArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CalculatedSyntheticMetric)(nil)).Elem()
}

func (i CalculatedSyntheticMetricArray) ToCalculatedSyntheticMetricArrayOutput() CalculatedSyntheticMetricArrayOutput {
	return i.ToCalculatedSyntheticMetricArrayOutputWithContext(context.Background())
}

func (i CalculatedSyntheticMetricArray) ToCalculatedSyntheticMetricArrayOutputWithContext(ctx context.Context) CalculatedSyntheticMetricArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CalculatedSyntheticMetricArrayOutput)
}

// CalculatedSyntheticMetricMapInput is an input type that accepts CalculatedSyntheticMetricMap and CalculatedSyntheticMetricMapOutput values.
// You can construct a concrete instance of `CalculatedSyntheticMetricMapInput` via:
//
//	CalculatedSyntheticMetricMap{ "key": CalculatedSyntheticMetricArgs{...} }
type CalculatedSyntheticMetricMapInput interface {
	pulumi.Input

	ToCalculatedSyntheticMetricMapOutput() CalculatedSyntheticMetricMapOutput
	ToCalculatedSyntheticMetricMapOutputWithContext(context.Context) CalculatedSyntheticMetricMapOutput
}

type CalculatedSyntheticMetricMap map[string]CalculatedSyntheticMetricInput

func (CalculatedSyntheticMetricMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CalculatedSyntheticMetric)(nil)).Elem()
}

func (i CalculatedSyntheticMetricMap) ToCalculatedSyntheticMetricMapOutput() CalculatedSyntheticMetricMapOutput {
	return i.ToCalculatedSyntheticMetricMapOutputWithContext(context.Background())
}

func (i CalculatedSyntheticMetricMap) ToCalculatedSyntheticMetricMapOutputWithContext(ctx context.Context) CalculatedSyntheticMetricMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CalculatedSyntheticMetricMapOutput)
}

type CalculatedSyntheticMetricOutput struct{ *pulumi.OutputState }

func (CalculatedSyntheticMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CalculatedSyntheticMetric)(nil)).Elem()
}

func (o CalculatedSyntheticMetricOutput) ToCalculatedSyntheticMetricOutput() CalculatedSyntheticMetricOutput {
	return o
}

func (o CalculatedSyntheticMetricOutput) ToCalculatedSyntheticMetricOutputWithContext(ctx context.Context) CalculatedSyntheticMetricOutput {
	return o
}

// Descriptor of a calculated synthetic metric.
func (o CalculatedSyntheticMetricOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CalculatedSyntheticMetric) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Dimension of the calculated synthetic metric.
func (o CalculatedSyntheticMetricOutput) Dimensions() CalculatedSyntheticMetricDimensionArrayOutput {
	return o.ApplyT(func(v *CalculatedSyntheticMetric) CalculatedSyntheticMetricDimensionArrayOutput { return v.Dimensions }).(CalculatedSyntheticMetricDimensionArrayOutput)
}

// The metric is enabled (`true`) or disabled (`false`)
func (o CalculatedSyntheticMetricOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *CalculatedSyntheticMetric) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Filter of the calculated synthetic metric.
func (o CalculatedSyntheticMetricOutput) Filter() CalculatedSyntheticMetricFilterPtrOutput {
	return o.ApplyT(func(v *CalculatedSyntheticMetric) CalculatedSyntheticMetricFilterPtrOutput { return v.Filter }).(CalculatedSyntheticMetricFilterPtrOutput)
}

// The type of the synthetic metric. Possible values: [ ApplicationCache, Callback, CumulativeLayoutShift, DNSLookup, DOMComplete, DOMContentLoaded, DOMInteractive, FailedRequestsResources, FirstContentfulPaint, FirstInputDelay, FirstInputStart, FirstPaint, HTMLDownloaded, HttpErrors, JavaScriptErrors, LargestContentfulPaint, LoadEventEnd, LoadEventStart, LongTasks, NavigationStart, OnDOMContentLoaded, OnLoad, Processing, RedirectTime, Request, RequestStart, ResourceCount, Response, SecureConnect, SpeedIndex, TCPConnect, TimeToFirstByte, TotalDuration, TransferSize, UserActionDuration, VisuallyComplete ]
func (o CalculatedSyntheticMetricOutput) Metric() pulumi.StringOutput {
	return o.ApplyT(func(v *CalculatedSyntheticMetric) pulumi.StringOutput { return v.Metric }).(pulumi.StringOutput)
}

// The unique key of the calculated synthetic metric.
func (o CalculatedSyntheticMetricOutput) MetricKey() pulumi.StringOutput {
	return o.ApplyT(func(v *CalculatedSyntheticMetric) pulumi.StringOutput { return v.MetricKey }).(pulumi.StringOutput)
}

// The Dynatrace entity ID of the monitor to which the metric belongs.
func (o CalculatedSyntheticMetricOutput) MonitorIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *CalculatedSyntheticMetric) pulumi.StringOutput { return v.MonitorIdentifier }).(pulumi.StringOutput)
}

// The displayed name of the metric.
func (o CalculatedSyntheticMetricOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CalculatedSyntheticMetric) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type CalculatedSyntheticMetricArrayOutput struct{ *pulumi.OutputState }

func (CalculatedSyntheticMetricArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CalculatedSyntheticMetric)(nil)).Elem()
}

func (o CalculatedSyntheticMetricArrayOutput) ToCalculatedSyntheticMetricArrayOutput() CalculatedSyntheticMetricArrayOutput {
	return o
}

func (o CalculatedSyntheticMetricArrayOutput) ToCalculatedSyntheticMetricArrayOutputWithContext(ctx context.Context) CalculatedSyntheticMetricArrayOutput {
	return o
}

func (o CalculatedSyntheticMetricArrayOutput) Index(i pulumi.IntInput) CalculatedSyntheticMetricOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CalculatedSyntheticMetric {
		return vs[0].([]*CalculatedSyntheticMetric)[vs[1].(int)]
	}).(CalculatedSyntheticMetricOutput)
}

type CalculatedSyntheticMetricMapOutput struct{ *pulumi.OutputState }

func (CalculatedSyntheticMetricMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CalculatedSyntheticMetric)(nil)).Elem()
}

func (o CalculatedSyntheticMetricMapOutput) ToCalculatedSyntheticMetricMapOutput() CalculatedSyntheticMetricMapOutput {
	return o
}

func (o CalculatedSyntheticMetricMapOutput) ToCalculatedSyntheticMetricMapOutputWithContext(ctx context.Context) CalculatedSyntheticMetricMapOutput {
	return o
}

func (o CalculatedSyntheticMetricMapOutput) MapIndex(k pulumi.StringInput) CalculatedSyntheticMetricOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CalculatedSyntheticMetric {
		return vs[0].(map[string]*CalculatedSyntheticMetric)[vs[1].(string)]
	}).(CalculatedSyntheticMetricOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CalculatedSyntheticMetricInput)(nil)).Elem(), &CalculatedSyntheticMetric{})
	pulumi.RegisterInputType(reflect.TypeOf((*CalculatedSyntheticMetricArrayInput)(nil)).Elem(), CalculatedSyntheticMetricArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CalculatedSyntheticMetricMapInput)(nil)).Elem(), CalculatedSyntheticMetricMap{})
	pulumi.RegisterOutputType(CalculatedSyntheticMetricOutput{})
	pulumi.RegisterOutputType(CalculatedSyntheticMetricArrayOutput{})
	pulumi.RegisterOutputType(CalculatedSyntheticMetricMapOutput{})
}
