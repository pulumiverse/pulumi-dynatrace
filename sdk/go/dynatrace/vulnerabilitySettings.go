// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type VulnerabilitySettings struct {
	pulumi.CustomResourceState

	// Enable Code-level Vulnerability Analytics
	EnableCodeLevelVulnerabilityDetection pulumi.BoolOutput `pulumi:"enableCodeLevelVulnerabilityDetection"`
	// When new monitoring rules are enabled, classic rules are disabled. To re-enable classic rules, disable the new monitoring rules.
	EnableResourceAttributeRules pulumi.BoolPtrOutput `pulumi:"enableResourceAttributeRules"`
	// Enable Third-party Vulnerability Analytics
	EnableRuntimeVulnerabilityDetection pulumi.BoolOutput `pulumi:"enableRuntimeVulnerabilityDetection"`
	// (v1.290) Global .NET code-level vulnerability detection control defines the default for all process groups. You can use monitoring rules to override the default for certain processes. Possible Values: `MONITORING_OFF`, `MONITORING_ON`
	GlobalMonitoringModeDotNet pulumi.StringPtrOutput `pulumi:"globalMonitoringModeDotNet"`
	// Global Go code-level vulnerability detection control defines the default for all process groups. You can use monitoring rules to override the default for certain processes.
	GlobalMonitoringModeGo pulumi.StringPtrOutput `pulumi:"globalMonitoringModeGo"`
	// Global Java code-level vulnerability detection control defines the default for all process groups. You can use monitoring rules to override the default for certain processes. Possible Values: `MONITORING_OFF`, `MONITORING_ON`
	GlobalMonitoringModeJava pulumi.StringOutput `pulumi:"globalMonitoringModeJava"`
	// Global third-party vulnerability detection control defines the default for all processes. Possible Values: `MONITORING_OFF`, `MONITORING_ON`
	GlobalMonitoringModeTpv pulumi.StringPtrOutput `pulumi:"globalMonitoringModeTpv"`
	// Vulnerability Analytics can be enabled/disabled per supported technology.
	Technologies VulnerabilitySettingsTechnologiesOutput `pulumi:"technologies"`
}

// NewVulnerabilitySettings registers a new resource with the given unique name, arguments, and options.
func NewVulnerabilitySettings(ctx *pulumi.Context,
	name string, args *VulnerabilitySettingsArgs, opts ...pulumi.ResourceOption) (*VulnerabilitySettings, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnableCodeLevelVulnerabilityDetection == nil {
		return nil, errors.New("invalid value for required argument 'EnableCodeLevelVulnerabilityDetection'")
	}
	if args.EnableRuntimeVulnerabilityDetection == nil {
		return nil, errors.New("invalid value for required argument 'EnableRuntimeVulnerabilityDetection'")
	}
	if args.GlobalMonitoringModeJava == nil {
		return nil, errors.New("invalid value for required argument 'GlobalMonitoringModeJava'")
	}
	if args.Technologies == nil {
		return nil, errors.New("invalid value for required argument 'Technologies'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VulnerabilitySettings
	err := ctx.RegisterResource("dynatrace:index/vulnerabilitySettings:VulnerabilitySettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVulnerabilitySettings gets an existing VulnerabilitySettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVulnerabilitySettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VulnerabilitySettingsState, opts ...pulumi.ResourceOption) (*VulnerabilitySettings, error) {
	var resource VulnerabilitySettings
	err := ctx.ReadResource("dynatrace:index/vulnerabilitySettings:VulnerabilitySettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VulnerabilitySettings resources.
type vulnerabilitySettingsState struct {
	// Enable Code-level Vulnerability Analytics
	EnableCodeLevelVulnerabilityDetection *bool `pulumi:"enableCodeLevelVulnerabilityDetection"`
	// When new monitoring rules are enabled, classic rules are disabled. To re-enable classic rules, disable the new monitoring rules.
	EnableResourceAttributeRules *bool `pulumi:"enableResourceAttributeRules"`
	// Enable Third-party Vulnerability Analytics
	EnableRuntimeVulnerabilityDetection *bool `pulumi:"enableRuntimeVulnerabilityDetection"`
	// (v1.290) Global .NET code-level vulnerability detection control defines the default for all process groups. You can use monitoring rules to override the default for certain processes. Possible Values: `MONITORING_OFF`, `MONITORING_ON`
	GlobalMonitoringModeDotNet *string `pulumi:"globalMonitoringModeDotNet"`
	// Global Go code-level vulnerability detection control defines the default for all process groups. You can use monitoring rules to override the default for certain processes.
	GlobalMonitoringModeGo *string `pulumi:"globalMonitoringModeGo"`
	// Global Java code-level vulnerability detection control defines the default for all process groups. You can use monitoring rules to override the default for certain processes. Possible Values: `MONITORING_OFF`, `MONITORING_ON`
	GlobalMonitoringModeJava *string `pulumi:"globalMonitoringModeJava"`
	// Global third-party vulnerability detection control defines the default for all processes. Possible Values: `MONITORING_OFF`, `MONITORING_ON`
	GlobalMonitoringModeTpv *string `pulumi:"globalMonitoringModeTpv"`
	// Vulnerability Analytics can be enabled/disabled per supported technology.
	Technologies *VulnerabilitySettingsTechnologies `pulumi:"technologies"`
}

type VulnerabilitySettingsState struct {
	// Enable Code-level Vulnerability Analytics
	EnableCodeLevelVulnerabilityDetection pulumi.BoolPtrInput
	// When new monitoring rules are enabled, classic rules are disabled. To re-enable classic rules, disable the new monitoring rules.
	EnableResourceAttributeRules pulumi.BoolPtrInput
	// Enable Third-party Vulnerability Analytics
	EnableRuntimeVulnerabilityDetection pulumi.BoolPtrInput
	// (v1.290) Global .NET code-level vulnerability detection control defines the default for all process groups. You can use monitoring rules to override the default for certain processes. Possible Values: `MONITORING_OFF`, `MONITORING_ON`
	GlobalMonitoringModeDotNet pulumi.StringPtrInput
	// Global Go code-level vulnerability detection control defines the default for all process groups. You can use monitoring rules to override the default for certain processes.
	GlobalMonitoringModeGo pulumi.StringPtrInput
	// Global Java code-level vulnerability detection control defines the default for all process groups. You can use monitoring rules to override the default for certain processes. Possible Values: `MONITORING_OFF`, `MONITORING_ON`
	GlobalMonitoringModeJava pulumi.StringPtrInput
	// Global third-party vulnerability detection control defines the default for all processes. Possible Values: `MONITORING_OFF`, `MONITORING_ON`
	GlobalMonitoringModeTpv pulumi.StringPtrInput
	// Vulnerability Analytics can be enabled/disabled per supported technology.
	Technologies VulnerabilitySettingsTechnologiesPtrInput
}

func (VulnerabilitySettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*vulnerabilitySettingsState)(nil)).Elem()
}

type vulnerabilitySettingsArgs struct {
	// Enable Code-level Vulnerability Analytics
	EnableCodeLevelVulnerabilityDetection bool `pulumi:"enableCodeLevelVulnerabilityDetection"`
	// When new monitoring rules are enabled, classic rules are disabled. To re-enable classic rules, disable the new monitoring rules.
	EnableResourceAttributeRules *bool `pulumi:"enableResourceAttributeRules"`
	// Enable Third-party Vulnerability Analytics
	EnableRuntimeVulnerabilityDetection bool `pulumi:"enableRuntimeVulnerabilityDetection"`
	// (v1.290) Global .NET code-level vulnerability detection control defines the default for all process groups. You can use monitoring rules to override the default for certain processes. Possible Values: `MONITORING_OFF`, `MONITORING_ON`
	GlobalMonitoringModeDotNet *string `pulumi:"globalMonitoringModeDotNet"`
	// Global Go code-level vulnerability detection control defines the default for all process groups. You can use monitoring rules to override the default for certain processes.
	GlobalMonitoringModeGo *string `pulumi:"globalMonitoringModeGo"`
	// Global Java code-level vulnerability detection control defines the default for all process groups. You can use monitoring rules to override the default for certain processes. Possible Values: `MONITORING_OFF`, `MONITORING_ON`
	GlobalMonitoringModeJava string `pulumi:"globalMonitoringModeJava"`
	// Global third-party vulnerability detection control defines the default for all processes. Possible Values: `MONITORING_OFF`, `MONITORING_ON`
	GlobalMonitoringModeTpv *string `pulumi:"globalMonitoringModeTpv"`
	// Vulnerability Analytics can be enabled/disabled per supported technology.
	Technologies VulnerabilitySettingsTechnologies `pulumi:"technologies"`
}

// The set of arguments for constructing a VulnerabilitySettings resource.
type VulnerabilitySettingsArgs struct {
	// Enable Code-level Vulnerability Analytics
	EnableCodeLevelVulnerabilityDetection pulumi.BoolInput
	// When new monitoring rules are enabled, classic rules are disabled. To re-enable classic rules, disable the new monitoring rules.
	EnableResourceAttributeRules pulumi.BoolPtrInput
	// Enable Third-party Vulnerability Analytics
	EnableRuntimeVulnerabilityDetection pulumi.BoolInput
	// (v1.290) Global .NET code-level vulnerability detection control defines the default for all process groups. You can use monitoring rules to override the default for certain processes. Possible Values: `MONITORING_OFF`, `MONITORING_ON`
	GlobalMonitoringModeDotNet pulumi.StringPtrInput
	// Global Go code-level vulnerability detection control defines the default for all process groups. You can use monitoring rules to override the default for certain processes.
	GlobalMonitoringModeGo pulumi.StringPtrInput
	// Global Java code-level vulnerability detection control defines the default for all process groups. You can use monitoring rules to override the default for certain processes. Possible Values: `MONITORING_OFF`, `MONITORING_ON`
	GlobalMonitoringModeJava pulumi.StringInput
	// Global third-party vulnerability detection control defines the default for all processes. Possible Values: `MONITORING_OFF`, `MONITORING_ON`
	GlobalMonitoringModeTpv pulumi.StringPtrInput
	// Vulnerability Analytics can be enabled/disabled per supported technology.
	Technologies VulnerabilitySettingsTechnologiesInput
}

func (VulnerabilitySettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vulnerabilitySettingsArgs)(nil)).Elem()
}

type VulnerabilitySettingsInput interface {
	pulumi.Input

	ToVulnerabilitySettingsOutput() VulnerabilitySettingsOutput
	ToVulnerabilitySettingsOutputWithContext(ctx context.Context) VulnerabilitySettingsOutput
}

func (*VulnerabilitySettings) ElementType() reflect.Type {
	return reflect.TypeOf((**VulnerabilitySettings)(nil)).Elem()
}

func (i *VulnerabilitySettings) ToVulnerabilitySettingsOutput() VulnerabilitySettingsOutput {
	return i.ToVulnerabilitySettingsOutputWithContext(context.Background())
}

func (i *VulnerabilitySettings) ToVulnerabilitySettingsOutputWithContext(ctx context.Context) VulnerabilitySettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilitySettingsOutput)
}

// VulnerabilitySettingsArrayInput is an input type that accepts VulnerabilitySettingsArray and VulnerabilitySettingsArrayOutput values.
// You can construct a concrete instance of `VulnerabilitySettingsArrayInput` via:
//
//	VulnerabilitySettingsArray{ VulnerabilitySettingsArgs{...} }
type VulnerabilitySettingsArrayInput interface {
	pulumi.Input

	ToVulnerabilitySettingsArrayOutput() VulnerabilitySettingsArrayOutput
	ToVulnerabilitySettingsArrayOutputWithContext(context.Context) VulnerabilitySettingsArrayOutput
}

type VulnerabilitySettingsArray []VulnerabilitySettingsInput

func (VulnerabilitySettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VulnerabilitySettings)(nil)).Elem()
}

func (i VulnerabilitySettingsArray) ToVulnerabilitySettingsArrayOutput() VulnerabilitySettingsArrayOutput {
	return i.ToVulnerabilitySettingsArrayOutputWithContext(context.Background())
}

func (i VulnerabilitySettingsArray) ToVulnerabilitySettingsArrayOutputWithContext(ctx context.Context) VulnerabilitySettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilitySettingsArrayOutput)
}

// VulnerabilitySettingsMapInput is an input type that accepts VulnerabilitySettingsMap and VulnerabilitySettingsMapOutput values.
// You can construct a concrete instance of `VulnerabilitySettingsMapInput` via:
//
//	VulnerabilitySettingsMap{ "key": VulnerabilitySettingsArgs{...} }
type VulnerabilitySettingsMapInput interface {
	pulumi.Input

	ToVulnerabilitySettingsMapOutput() VulnerabilitySettingsMapOutput
	ToVulnerabilitySettingsMapOutputWithContext(context.Context) VulnerabilitySettingsMapOutput
}

type VulnerabilitySettingsMap map[string]VulnerabilitySettingsInput

func (VulnerabilitySettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VulnerabilitySettings)(nil)).Elem()
}

func (i VulnerabilitySettingsMap) ToVulnerabilitySettingsMapOutput() VulnerabilitySettingsMapOutput {
	return i.ToVulnerabilitySettingsMapOutputWithContext(context.Background())
}

func (i VulnerabilitySettingsMap) ToVulnerabilitySettingsMapOutputWithContext(ctx context.Context) VulnerabilitySettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilitySettingsMapOutput)
}

type VulnerabilitySettingsOutput struct{ *pulumi.OutputState }

func (VulnerabilitySettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VulnerabilitySettings)(nil)).Elem()
}

func (o VulnerabilitySettingsOutput) ToVulnerabilitySettingsOutput() VulnerabilitySettingsOutput {
	return o
}

func (o VulnerabilitySettingsOutput) ToVulnerabilitySettingsOutputWithContext(ctx context.Context) VulnerabilitySettingsOutput {
	return o
}

// Enable Code-level Vulnerability Analytics
func (o VulnerabilitySettingsOutput) EnableCodeLevelVulnerabilityDetection() pulumi.BoolOutput {
	return o.ApplyT(func(v *VulnerabilitySettings) pulumi.BoolOutput { return v.EnableCodeLevelVulnerabilityDetection }).(pulumi.BoolOutput)
}

// When new monitoring rules are enabled, classic rules are disabled. To re-enable classic rules, disable the new monitoring rules.
func (o VulnerabilitySettingsOutput) EnableResourceAttributeRules() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VulnerabilitySettings) pulumi.BoolPtrOutput { return v.EnableResourceAttributeRules }).(pulumi.BoolPtrOutput)
}

// Enable Third-party Vulnerability Analytics
func (o VulnerabilitySettingsOutput) EnableRuntimeVulnerabilityDetection() pulumi.BoolOutput {
	return o.ApplyT(func(v *VulnerabilitySettings) pulumi.BoolOutput { return v.EnableRuntimeVulnerabilityDetection }).(pulumi.BoolOutput)
}

// (v1.290) Global .NET code-level vulnerability detection control defines the default for all process groups. You can use monitoring rules to override the default for certain processes. Possible Values: `MONITORING_OFF`, `MONITORING_ON`
func (o VulnerabilitySettingsOutput) GlobalMonitoringModeDotNet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VulnerabilitySettings) pulumi.StringPtrOutput { return v.GlobalMonitoringModeDotNet }).(pulumi.StringPtrOutput)
}

// Global Go code-level vulnerability detection control defines the default for all process groups. You can use monitoring rules to override the default for certain processes.
func (o VulnerabilitySettingsOutput) GlobalMonitoringModeGo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VulnerabilitySettings) pulumi.StringPtrOutput { return v.GlobalMonitoringModeGo }).(pulumi.StringPtrOutput)
}

// Global Java code-level vulnerability detection control defines the default for all process groups. You can use monitoring rules to override the default for certain processes. Possible Values: `MONITORING_OFF`, `MONITORING_ON`
func (o VulnerabilitySettingsOutput) GlobalMonitoringModeJava() pulumi.StringOutput {
	return o.ApplyT(func(v *VulnerabilitySettings) pulumi.StringOutput { return v.GlobalMonitoringModeJava }).(pulumi.StringOutput)
}

// Global third-party vulnerability detection control defines the default for all processes. Possible Values: `MONITORING_OFF`, `MONITORING_ON`
func (o VulnerabilitySettingsOutput) GlobalMonitoringModeTpv() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VulnerabilitySettings) pulumi.StringPtrOutput { return v.GlobalMonitoringModeTpv }).(pulumi.StringPtrOutput)
}

// Vulnerability Analytics can be enabled/disabled per supported technology.
func (o VulnerabilitySettingsOutput) Technologies() VulnerabilitySettingsTechnologiesOutput {
	return o.ApplyT(func(v *VulnerabilitySettings) VulnerabilitySettingsTechnologiesOutput { return v.Technologies }).(VulnerabilitySettingsTechnologiesOutput)
}

type VulnerabilitySettingsArrayOutput struct{ *pulumi.OutputState }

func (VulnerabilitySettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VulnerabilitySettings)(nil)).Elem()
}

func (o VulnerabilitySettingsArrayOutput) ToVulnerabilitySettingsArrayOutput() VulnerabilitySettingsArrayOutput {
	return o
}

func (o VulnerabilitySettingsArrayOutput) ToVulnerabilitySettingsArrayOutputWithContext(ctx context.Context) VulnerabilitySettingsArrayOutput {
	return o
}

func (o VulnerabilitySettingsArrayOutput) Index(i pulumi.IntInput) VulnerabilitySettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VulnerabilitySettings {
		return vs[0].([]*VulnerabilitySettings)[vs[1].(int)]
	}).(VulnerabilitySettingsOutput)
}

type VulnerabilitySettingsMapOutput struct{ *pulumi.OutputState }

func (VulnerabilitySettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VulnerabilitySettings)(nil)).Elem()
}

func (o VulnerabilitySettingsMapOutput) ToVulnerabilitySettingsMapOutput() VulnerabilitySettingsMapOutput {
	return o
}

func (o VulnerabilitySettingsMapOutput) ToVulnerabilitySettingsMapOutputWithContext(ctx context.Context) VulnerabilitySettingsMapOutput {
	return o
}

func (o VulnerabilitySettingsMapOutput) MapIndex(k pulumi.StringInput) VulnerabilitySettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VulnerabilitySettings {
		return vs[0].(map[string]*VulnerabilitySettings)[vs[1].(string)]
	}).(VulnerabilitySettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VulnerabilitySettingsInput)(nil)).Elem(), &VulnerabilitySettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*VulnerabilitySettingsArrayInput)(nil)).Elem(), VulnerabilitySettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VulnerabilitySettingsMapInput)(nil)).Elem(), VulnerabilitySettingsMap{})
	pulumi.RegisterOutputType(VulnerabilitySettingsOutput{})
	pulumi.RegisterOutputType(VulnerabilitySettingsArrayOutput{})
	pulumi.RegisterOutputType(VulnerabilitySettingsMapOutput{})
}
