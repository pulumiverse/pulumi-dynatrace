// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

// > **Dynatrace SaaS only**
//
// > To utilize this resource, please define the environment variables `DT_CLIENT_ID`, `DT_CLIENT_SECRET`, `DT_ACCOUNT_ID` with an OAuth client including the following permissions: **Allow IAM policy configuration for environments** (`iam-policies-management`) and **View environments** (`account-env-read`).
//
// You can use the attributes `environments`, `accounts` and `globals` to refine which policies you want to query for.
// * The attribute `global` indicates whether the results should also contain global (Dynatrace defined) policies
// * The attribute `environment` is an array of environment IDs.
// * The results won't contain any environment specific policies if the attribute `environments` has been omitted
// * The results will contain policies for all environments reachable via the given credentials if `environments` is set to `["*"]`
// * The attribute `accounts` is an array of accounts UUIDs. Set this to `["*"]` if you want to receive account specific policies.
// * The results won't contain any account specific policies if the attribute `accounts` has been omitted
// ## Example Usage
//
// The following example queries for polices of all environments reachable via the given credentials, all accounts and all global policies.
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dynatrace.GetIamPolicies(ctx, &dynatrace.GetIamPoliciesArgs{
//				Accounts: []string{
//					"*",
//				},
//				Environments: []string{
//					"*",
//				},
//				Global: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// The following example queries for policies that are defined for the environment with the id `abce234`. No account specific or global policies will be included.
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dynatrace.GetIamPolicies(ctx, &dynatrace.GetIamPoliciesArgs{
//				Environments: []string{
//					"abce234",
//				},
//				Global: pulumi.BoolRef(false),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Example Output
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			all, err := dynatrace.GetIamPolicies(ctx, &dynatrace.GetIamPoliciesArgs{
//				Environments: []string{
//					"*",
//				},
//				Accounts: []string{
//					"*",
//				},
//				Global: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("policies", all.Policies)
//			return nil
//		})
//	}
//
// ```
func GetIamPolicies(ctx *pulumi.Context, args *GetIamPoliciesArgs, opts ...pulumi.InvokeOption) (*GetIamPoliciesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetIamPoliciesResult
	err := ctx.Invoke("dynatrace:index/getIamPolicies:getIamPolicies", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIamPolicies.
type GetIamPoliciesArgs struct {
	// The results will contain policies defined for the given accountID. If one of the entries contains `*` the results will contain policies for all accounts
	Accounts []string `pulumi:"accounts"`
	// The results will contain policies defined for the given environments. If one of the entries contains `*` the results will contain policies for all environments
	Environments []string `pulumi:"environments"`
	// If `true` the results will contain global policies
	Global *bool `pulumi:"global"`
	// The results will only contain policies that are bound to the specified groups. Omit this attribute if you want to retrieve all policies
	Groups []string `pulumi:"groups"`
}

// A collection of values returned by getIamPolicies.
type GetIamPoliciesResult struct {
	// The results will contain policies defined for the given accountID. If one of the entries contains `*` the results will contain policies for all accounts
	Accounts []string `pulumi:"accounts"`
	// The results will contain policies defined for the given environments. If one of the entries contains `*` the results will contain policies for all environments
	Environments []string `pulumi:"environments"`
	// If `true` the results will contain global policies
	Global *bool `pulumi:"global"`
	// The results will only contain policies that are bound to the specified groups. Omit this attribute if you want to retrieve all policies
	Groups []string `pulumi:"groups"`
	// The provider-assigned unique ID for this managed resource.
	Id       string                 `pulumi:"id"`
	Policies []GetIamPoliciesPolicy `pulumi:"policies"`
}

func GetIamPoliciesOutput(ctx *pulumi.Context, args GetIamPoliciesOutputArgs, opts ...pulumi.InvokeOption) GetIamPoliciesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetIamPoliciesResultOutput, error) {
			args := v.(GetIamPoliciesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("dynatrace:index/getIamPolicies:getIamPolicies", args, GetIamPoliciesResultOutput{}, options).(GetIamPoliciesResultOutput), nil
		}).(GetIamPoliciesResultOutput)
}

// A collection of arguments for invoking getIamPolicies.
type GetIamPoliciesOutputArgs struct {
	// The results will contain policies defined for the given accountID. If one of the entries contains `*` the results will contain policies for all accounts
	Accounts pulumi.StringArrayInput `pulumi:"accounts"`
	// The results will contain policies defined for the given environments. If one of the entries contains `*` the results will contain policies for all environments
	Environments pulumi.StringArrayInput `pulumi:"environments"`
	// If `true` the results will contain global policies
	Global pulumi.BoolPtrInput `pulumi:"global"`
	// The results will only contain policies that are bound to the specified groups. Omit this attribute if you want to retrieve all policies
	Groups pulumi.StringArrayInput `pulumi:"groups"`
}

func (GetIamPoliciesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIamPoliciesArgs)(nil)).Elem()
}

// A collection of values returned by getIamPolicies.
type GetIamPoliciesResultOutput struct{ *pulumi.OutputState }

func (GetIamPoliciesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIamPoliciesResult)(nil)).Elem()
}

func (o GetIamPoliciesResultOutput) ToGetIamPoliciesResultOutput() GetIamPoliciesResultOutput {
	return o
}

func (o GetIamPoliciesResultOutput) ToGetIamPoliciesResultOutputWithContext(ctx context.Context) GetIamPoliciesResultOutput {
	return o
}

// The results will contain policies defined for the given accountID. If one of the entries contains `*` the results will contain policies for all accounts
func (o GetIamPoliciesResultOutput) Accounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetIamPoliciesResult) []string { return v.Accounts }).(pulumi.StringArrayOutput)
}

// The results will contain policies defined for the given environments. If one of the entries contains `*` the results will contain policies for all environments
func (o GetIamPoliciesResultOutput) Environments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetIamPoliciesResult) []string { return v.Environments }).(pulumi.StringArrayOutput)
}

// If `true` the results will contain global policies
func (o GetIamPoliciesResultOutput) Global() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetIamPoliciesResult) *bool { return v.Global }).(pulumi.BoolPtrOutput)
}

// The results will only contain policies that are bound to the specified groups. Omit this attribute if you want to retrieve all policies
func (o GetIamPoliciesResultOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetIamPoliciesResult) []string { return v.Groups }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetIamPoliciesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetIamPoliciesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetIamPoliciesResultOutput) Policies() GetIamPoliciesPolicyArrayOutput {
	return o.ApplyT(func(v GetIamPoliciesResult) []GetIamPoliciesPolicy { return v.Policies }).(GetIamPoliciesPolicyArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetIamPoliciesResultOutput{})
}
