// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

// > **Dynatrace SaaS only**
//
// > To utilize this resource, please define the environment variables `DT_CLIENT_ID`, `DT_CLIENT_SECRET`, `DT_ACCOUNT_ID` with an OAuth client including the following permissions: **View SLOs** (`slo:slos:read`) and **Create and edit SLOs** (`slo:slos:write`).
//
// > This resource is excluded by default in the export utility, please explicitly specify the resource to retrieve existing configuration.
//
// ## Dynatrace Documentation
//
// - Service-Level Objectives overview - hhttps://docs.dynatrace.com/docs/deliver/service-level-objectives
//
// - SLO Service Public API - https://########.apps.dynatrace.com/platform/swagger-ui/index.html?urls.primaryName=Service-Level+Objectives
//
// ## Resource Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dynatrace.NewPlatformSlo(ctx, "#name#", &dynatrace.PlatformSloArgs{
//				Criteria: &dynatrace.PlatformSloCriteriaArgs{
//					CriteriaDetails: dynatrace.PlatformSloCriteriaCriteriaDetailArray{
//						&dynatrace.PlatformSloCriteriaCriteriaDetailArgs{
//							Target:        pulumi.Float64(96),
//							TimeframeFrom: pulumi.String("now-30d"),
//							TimeframeTo:   pulumi.String("now"),
//							Warning:       pulumi.Float64(99),
//						},
//					},
//				},
//				CustomSli: &dynatrace.PlatformSloCustomSliArgs{
//					Indicator: pulumi.String(`  timeseries { total=sum(dt.service.request.count) ,failures=sum(dt.service.request.failure_count) }, by: { dt.entity.service }
//	  | fieldsAdd tags=entityAttr(dt.entity.service, "tags")
//	  | filter in(tags, "criticality:Gold")
//	  | fieldsAdd entityName = entityName(dt.entity.service)
//	  | fieldsAdd sli=(((total[]-failures[])/total[])*(100))
//	  | fieldsRemove total, failures, tags
//
// `),
//
//				},
//				Description: pulumi.String("Sample custom SLO"),
//				Tags: pulumi.StringArray{
//					pulumi.String("ExampleKey:ExampleValue"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type PlatformSlo struct {
	pulumi.CustomResourceState

	// Criteria of the SLO
	Criteria PlatformSloCriteriaOutput `pulumi:"criteria"`
	// Custom SLI of the SLO
	CustomSli PlatformSloCustomSliPtrOutput `pulumi:"customSli"`
	// Description of the SLO
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Name of the SLO
	Name pulumi.StringOutput `pulumi:"name"`
	// SLI reference of the SLO
	SliReference PlatformSloSliReferencePtrOutput `pulumi:"sliReference"`
	// Tags of the SLO. Example: `Stage:DEV`
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewPlatformSlo registers a new resource with the given unique name, arguments, and options.
func NewPlatformSlo(ctx *pulumi.Context,
	name string, args *PlatformSloArgs, opts ...pulumi.ResourceOption) (*PlatformSlo, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Criteria == nil {
		return nil, errors.New("invalid value for required argument 'Criteria'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PlatformSlo
	err := ctx.RegisterResource("dynatrace:index/platformSlo:PlatformSlo", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPlatformSlo gets an existing PlatformSlo resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPlatformSlo(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PlatformSloState, opts ...pulumi.ResourceOption) (*PlatformSlo, error) {
	var resource PlatformSlo
	err := ctx.ReadResource("dynatrace:index/platformSlo:PlatformSlo", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PlatformSlo resources.
type platformSloState struct {
	// Criteria of the SLO
	Criteria *PlatformSloCriteria `pulumi:"criteria"`
	// Custom SLI of the SLO
	CustomSli *PlatformSloCustomSli `pulumi:"customSli"`
	// Description of the SLO
	Description *string `pulumi:"description"`
	// Name of the SLO
	Name *string `pulumi:"name"`
	// SLI reference of the SLO
	SliReference *PlatformSloSliReference `pulumi:"sliReference"`
	// Tags of the SLO. Example: `Stage:DEV`
	Tags []string `pulumi:"tags"`
}

type PlatformSloState struct {
	// Criteria of the SLO
	Criteria PlatformSloCriteriaPtrInput
	// Custom SLI of the SLO
	CustomSli PlatformSloCustomSliPtrInput
	// Description of the SLO
	Description pulumi.StringPtrInput
	// Name of the SLO
	Name pulumi.StringPtrInput
	// SLI reference of the SLO
	SliReference PlatformSloSliReferencePtrInput
	// Tags of the SLO. Example: `Stage:DEV`
	Tags pulumi.StringArrayInput
}

func (PlatformSloState) ElementType() reflect.Type {
	return reflect.TypeOf((*platformSloState)(nil)).Elem()
}

type platformSloArgs struct {
	// Criteria of the SLO
	Criteria PlatformSloCriteria `pulumi:"criteria"`
	// Custom SLI of the SLO
	CustomSli *PlatformSloCustomSli `pulumi:"customSli"`
	// Description of the SLO
	Description *string `pulumi:"description"`
	// Name of the SLO
	Name *string `pulumi:"name"`
	// SLI reference of the SLO
	SliReference *PlatformSloSliReference `pulumi:"sliReference"`
	// Tags of the SLO. Example: `Stage:DEV`
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a PlatformSlo resource.
type PlatformSloArgs struct {
	// Criteria of the SLO
	Criteria PlatformSloCriteriaInput
	// Custom SLI of the SLO
	CustomSli PlatformSloCustomSliPtrInput
	// Description of the SLO
	Description pulumi.StringPtrInput
	// Name of the SLO
	Name pulumi.StringPtrInput
	// SLI reference of the SLO
	SliReference PlatformSloSliReferencePtrInput
	// Tags of the SLO. Example: `Stage:DEV`
	Tags pulumi.StringArrayInput
}

func (PlatformSloArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*platformSloArgs)(nil)).Elem()
}

type PlatformSloInput interface {
	pulumi.Input

	ToPlatformSloOutput() PlatformSloOutput
	ToPlatformSloOutputWithContext(ctx context.Context) PlatformSloOutput
}

func (*PlatformSlo) ElementType() reflect.Type {
	return reflect.TypeOf((**PlatformSlo)(nil)).Elem()
}

func (i *PlatformSlo) ToPlatformSloOutput() PlatformSloOutput {
	return i.ToPlatformSloOutputWithContext(context.Background())
}

func (i *PlatformSlo) ToPlatformSloOutputWithContext(ctx context.Context) PlatformSloOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlatformSloOutput)
}

// PlatformSloArrayInput is an input type that accepts PlatformSloArray and PlatformSloArrayOutput values.
// You can construct a concrete instance of `PlatformSloArrayInput` via:
//
//	PlatformSloArray{ PlatformSloArgs{...} }
type PlatformSloArrayInput interface {
	pulumi.Input

	ToPlatformSloArrayOutput() PlatformSloArrayOutput
	ToPlatformSloArrayOutputWithContext(context.Context) PlatformSloArrayOutput
}

type PlatformSloArray []PlatformSloInput

func (PlatformSloArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PlatformSlo)(nil)).Elem()
}

func (i PlatformSloArray) ToPlatformSloArrayOutput() PlatformSloArrayOutput {
	return i.ToPlatformSloArrayOutputWithContext(context.Background())
}

func (i PlatformSloArray) ToPlatformSloArrayOutputWithContext(ctx context.Context) PlatformSloArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlatformSloArrayOutput)
}

// PlatformSloMapInput is an input type that accepts PlatformSloMap and PlatformSloMapOutput values.
// You can construct a concrete instance of `PlatformSloMapInput` via:
//
//	PlatformSloMap{ "key": PlatformSloArgs{...} }
type PlatformSloMapInput interface {
	pulumi.Input

	ToPlatformSloMapOutput() PlatformSloMapOutput
	ToPlatformSloMapOutputWithContext(context.Context) PlatformSloMapOutput
}

type PlatformSloMap map[string]PlatformSloInput

func (PlatformSloMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PlatformSlo)(nil)).Elem()
}

func (i PlatformSloMap) ToPlatformSloMapOutput() PlatformSloMapOutput {
	return i.ToPlatformSloMapOutputWithContext(context.Background())
}

func (i PlatformSloMap) ToPlatformSloMapOutputWithContext(ctx context.Context) PlatformSloMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlatformSloMapOutput)
}

type PlatformSloOutput struct{ *pulumi.OutputState }

func (PlatformSloOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlatformSlo)(nil)).Elem()
}

func (o PlatformSloOutput) ToPlatformSloOutput() PlatformSloOutput {
	return o
}

func (o PlatformSloOutput) ToPlatformSloOutputWithContext(ctx context.Context) PlatformSloOutput {
	return o
}

// Criteria of the SLO
func (o PlatformSloOutput) Criteria() PlatformSloCriteriaOutput {
	return o.ApplyT(func(v *PlatformSlo) PlatformSloCriteriaOutput { return v.Criteria }).(PlatformSloCriteriaOutput)
}

// Custom SLI of the SLO
func (o PlatformSloOutput) CustomSli() PlatformSloCustomSliPtrOutput {
	return o.ApplyT(func(v *PlatformSlo) PlatformSloCustomSliPtrOutput { return v.CustomSli }).(PlatformSloCustomSliPtrOutput)
}

// Description of the SLO
func (o PlatformSloOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlatformSlo) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Name of the SLO
func (o PlatformSloOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PlatformSlo) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// SLI reference of the SLO
func (o PlatformSloOutput) SliReference() PlatformSloSliReferencePtrOutput {
	return o.ApplyT(func(v *PlatformSlo) PlatformSloSliReferencePtrOutput { return v.SliReference }).(PlatformSloSliReferencePtrOutput)
}

// Tags of the SLO. Example: `Stage:DEV`
func (o PlatformSloOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PlatformSlo) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type PlatformSloArrayOutput struct{ *pulumi.OutputState }

func (PlatformSloArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PlatformSlo)(nil)).Elem()
}

func (o PlatformSloArrayOutput) ToPlatformSloArrayOutput() PlatformSloArrayOutput {
	return o
}

func (o PlatformSloArrayOutput) ToPlatformSloArrayOutputWithContext(ctx context.Context) PlatformSloArrayOutput {
	return o
}

func (o PlatformSloArrayOutput) Index(i pulumi.IntInput) PlatformSloOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PlatformSlo {
		return vs[0].([]*PlatformSlo)[vs[1].(int)]
	}).(PlatformSloOutput)
}

type PlatformSloMapOutput struct{ *pulumi.OutputState }

func (PlatformSloMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PlatformSlo)(nil)).Elem()
}

func (o PlatformSloMapOutput) ToPlatformSloMapOutput() PlatformSloMapOutput {
	return o
}

func (o PlatformSloMapOutput) ToPlatformSloMapOutputWithContext(ctx context.Context) PlatformSloMapOutput {
	return o
}

func (o PlatformSloMapOutput) MapIndex(k pulumi.StringInput) PlatformSloOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PlatformSlo {
		return vs[0].(map[string]*PlatformSlo)[vs[1].(string)]
	}).(PlatformSloOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PlatformSloInput)(nil)).Elem(), &PlatformSlo{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlatformSloArrayInput)(nil)).Elem(), PlatformSloArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlatformSloMapInput)(nil)).Elem(), PlatformSloMap{})
	pulumi.RegisterOutputType(PlatformSloOutput{})
	pulumi.RegisterOutputType(PlatformSloArrayOutput{})
	pulumi.RegisterOutputType(PlatformSloMapOutput{})
}
