// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type IpAddressMasking struct {
	pulumi.CustomResourceState

	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The scope of this setting (MOBILE*APPLICATION, CUSTOM*APPLICATION, APPLICATION). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
	// Possible Values: `all`, `public`
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewIpAddressMasking registers a new resource with the given unique name, arguments, and options.
func NewIpAddressMasking(ctx *pulumi.Context,
	name string, args *IpAddressMaskingArgs, opts ...pulumi.ResourceOption) (*IpAddressMasking, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IpAddressMasking
	err := ctx.RegisterResource("dynatrace:index/ipAddressMasking:IpAddressMasking", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpAddressMasking gets an existing IpAddressMasking resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpAddressMasking(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpAddressMaskingState, opts ...pulumi.ResourceOption) (*IpAddressMasking, error) {
	var resource IpAddressMasking
	err := ctx.ReadResource("dynatrace:index/ipAddressMasking:IpAddressMasking", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpAddressMasking resources.
type ipAddressMaskingState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// The scope of this setting (MOBILE*APPLICATION, CUSTOM*APPLICATION, APPLICATION). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
	// Possible Values: `all`, `public`
	Type *string `pulumi:"type"`
}

type IpAddressMaskingState struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// The scope of this setting (MOBILE*APPLICATION, CUSTOM*APPLICATION, APPLICATION). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
	// Possible Values: `all`, `public`
	Type pulumi.StringPtrInput
}

func (IpAddressMaskingState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipAddressMaskingState)(nil)).Elem()
}

type ipAddressMaskingArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// The scope of this setting (MOBILE*APPLICATION, CUSTOM*APPLICATION, APPLICATION). Omit this property if you want to cover the whole environment.
	Scope *string `pulumi:"scope"`
	// Possible Values: `all`, `public`
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a IpAddressMasking resource.
type IpAddressMaskingArgs struct {
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// The scope of this setting (MOBILE*APPLICATION, CUSTOM*APPLICATION, APPLICATION). Omit this property if you want to cover the whole environment.
	Scope pulumi.StringPtrInput
	// Possible Values: `all`, `public`
	Type pulumi.StringPtrInput
}

func (IpAddressMaskingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipAddressMaskingArgs)(nil)).Elem()
}

type IpAddressMaskingInput interface {
	pulumi.Input

	ToIpAddressMaskingOutput() IpAddressMaskingOutput
	ToIpAddressMaskingOutputWithContext(ctx context.Context) IpAddressMaskingOutput
}

func (*IpAddressMasking) ElementType() reflect.Type {
	return reflect.TypeOf((**IpAddressMasking)(nil)).Elem()
}

func (i *IpAddressMasking) ToIpAddressMaskingOutput() IpAddressMaskingOutput {
	return i.ToIpAddressMaskingOutputWithContext(context.Background())
}

func (i *IpAddressMasking) ToIpAddressMaskingOutputWithContext(ctx context.Context) IpAddressMaskingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpAddressMaskingOutput)
}

// IpAddressMaskingArrayInput is an input type that accepts IpAddressMaskingArray and IpAddressMaskingArrayOutput values.
// You can construct a concrete instance of `IpAddressMaskingArrayInput` via:
//
//	IpAddressMaskingArray{ IpAddressMaskingArgs{...} }
type IpAddressMaskingArrayInput interface {
	pulumi.Input

	ToIpAddressMaskingArrayOutput() IpAddressMaskingArrayOutput
	ToIpAddressMaskingArrayOutputWithContext(context.Context) IpAddressMaskingArrayOutput
}

type IpAddressMaskingArray []IpAddressMaskingInput

func (IpAddressMaskingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpAddressMasking)(nil)).Elem()
}

func (i IpAddressMaskingArray) ToIpAddressMaskingArrayOutput() IpAddressMaskingArrayOutput {
	return i.ToIpAddressMaskingArrayOutputWithContext(context.Background())
}

func (i IpAddressMaskingArray) ToIpAddressMaskingArrayOutputWithContext(ctx context.Context) IpAddressMaskingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpAddressMaskingArrayOutput)
}

// IpAddressMaskingMapInput is an input type that accepts IpAddressMaskingMap and IpAddressMaskingMapOutput values.
// You can construct a concrete instance of `IpAddressMaskingMapInput` via:
//
//	IpAddressMaskingMap{ "key": IpAddressMaskingArgs{...} }
type IpAddressMaskingMapInput interface {
	pulumi.Input

	ToIpAddressMaskingMapOutput() IpAddressMaskingMapOutput
	ToIpAddressMaskingMapOutputWithContext(context.Context) IpAddressMaskingMapOutput
}

type IpAddressMaskingMap map[string]IpAddressMaskingInput

func (IpAddressMaskingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpAddressMasking)(nil)).Elem()
}

func (i IpAddressMaskingMap) ToIpAddressMaskingMapOutput() IpAddressMaskingMapOutput {
	return i.ToIpAddressMaskingMapOutputWithContext(context.Background())
}

func (i IpAddressMaskingMap) ToIpAddressMaskingMapOutputWithContext(ctx context.Context) IpAddressMaskingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpAddressMaskingMapOutput)
}

type IpAddressMaskingOutput struct{ *pulumi.OutputState }

func (IpAddressMaskingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpAddressMasking)(nil)).Elem()
}

func (o IpAddressMaskingOutput) ToIpAddressMaskingOutput() IpAddressMaskingOutput {
	return o
}

func (o IpAddressMaskingOutput) ToIpAddressMaskingOutputWithContext(ctx context.Context) IpAddressMaskingOutput {
	return o
}

// This setting is enabled (`true`) or disabled (`false`)
func (o IpAddressMaskingOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *IpAddressMasking) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The scope of this setting (MOBILE*APPLICATION, CUSTOM*APPLICATION, APPLICATION). Omit this property if you want to cover the whole environment.
func (o IpAddressMaskingOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpAddressMasking) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

// Possible Values: `all`, `public`
func (o IpAddressMaskingOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpAddressMasking) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

type IpAddressMaskingArrayOutput struct{ *pulumi.OutputState }

func (IpAddressMaskingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpAddressMasking)(nil)).Elem()
}

func (o IpAddressMaskingArrayOutput) ToIpAddressMaskingArrayOutput() IpAddressMaskingArrayOutput {
	return o
}

func (o IpAddressMaskingArrayOutput) ToIpAddressMaskingArrayOutputWithContext(ctx context.Context) IpAddressMaskingArrayOutput {
	return o
}

func (o IpAddressMaskingArrayOutput) Index(i pulumi.IntInput) IpAddressMaskingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IpAddressMasking {
		return vs[0].([]*IpAddressMasking)[vs[1].(int)]
	}).(IpAddressMaskingOutput)
}

type IpAddressMaskingMapOutput struct{ *pulumi.OutputState }

func (IpAddressMaskingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpAddressMasking)(nil)).Elem()
}

func (o IpAddressMaskingMapOutput) ToIpAddressMaskingMapOutput() IpAddressMaskingMapOutput {
	return o
}

func (o IpAddressMaskingMapOutput) ToIpAddressMaskingMapOutputWithContext(ctx context.Context) IpAddressMaskingMapOutput {
	return o
}

func (o IpAddressMaskingMapOutput) MapIndex(k pulumi.StringInput) IpAddressMaskingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IpAddressMasking {
		return vs[0].(map[string]*IpAddressMasking)[vs[1].(string)]
	}).(IpAddressMaskingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpAddressMaskingInput)(nil)).Elem(), &IpAddressMasking{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpAddressMaskingArrayInput)(nil)).Elem(), IpAddressMaskingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpAddressMaskingMapInput)(nil)).Elem(), IpAddressMaskingMap{})
	pulumi.RegisterOutputType(IpAddressMaskingOutput{})
	pulumi.RegisterOutputType(IpAddressMaskingArrayOutput{})
	pulumi.RegisterOutputType(IpAddressMaskingMapOutput{})
}
