// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-dynatrace/sdk/go/dynatrace/internal"
)

type OpenpipelineSdlcEvents struct {
	pulumi.CustomResourceState

	// List of all ingest sources of the configuration
	Endpoints OpenpipelineSdlcEventsEndpointsPtrOutput `pulumi:"endpoints"`
	// List of all pipelines of the configuration
	Pipelines OpenpipelineSdlcEventsPipelinesPtrOutput `pulumi:"pipelines"`
	// Dynamic routing definition
	Routing OpenpipelineSdlcEventsRoutingPtrOutput `pulumi:"routing"`
}

// NewOpenpipelineSdlcEvents registers a new resource with the given unique name, arguments, and options.
func NewOpenpipelineSdlcEvents(ctx *pulumi.Context,
	name string, args *OpenpipelineSdlcEventsArgs, opts ...pulumi.ResourceOption) (*OpenpipelineSdlcEvents, error) {
	if args == nil {
		args = &OpenpipelineSdlcEventsArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OpenpipelineSdlcEvents
	err := ctx.RegisterResource("dynatrace:index/openpipelineSdlcEvents:OpenpipelineSdlcEvents", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenpipelineSdlcEvents gets an existing OpenpipelineSdlcEvents resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenpipelineSdlcEvents(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenpipelineSdlcEventsState, opts ...pulumi.ResourceOption) (*OpenpipelineSdlcEvents, error) {
	var resource OpenpipelineSdlcEvents
	err := ctx.ReadResource("dynatrace:index/openpipelineSdlcEvents:OpenpipelineSdlcEvents", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenpipelineSdlcEvents resources.
type openpipelineSdlcEventsState struct {
	// List of all ingest sources of the configuration
	Endpoints *OpenpipelineSdlcEventsEndpoints `pulumi:"endpoints"`
	// List of all pipelines of the configuration
	Pipelines *OpenpipelineSdlcEventsPipelines `pulumi:"pipelines"`
	// Dynamic routing definition
	Routing *OpenpipelineSdlcEventsRouting `pulumi:"routing"`
}

type OpenpipelineSdlcEventsState struct {
	// List of all ingest sources of the configuration
	Endpoints OpenpipelineSdlcEventsEndpointsPtrInput
	// List of all pipelines of the configuration
	Pipelines OpenpipelineSdlcEventsPipelinesPtrInput
	// Dynamic routing definition
	Routing OpenpipelineSdlcEventsRoutingPtrInput
}

func (OpenpipelineSdlcEventsState) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineSdlcEventsState)(nil)).Elem()
}

type openpipelineSdlcEventsArgs struct {
	// List of all ingest sources of the configuration
	Endpoints *OpenpipelineSdlcEventsEndpoints `pulumi:"endpoints"`
	// List of all pipelines of the configuration
	Pipelines *OpenpipelineSdlcEventsPipelines `pulumi:"pipelines"`
	// Dynamic routing definition
	Routing *OpenpipelineSdlcEventsRouting `pulumi:"routing"`
}

// The set of arguments for constructing a OpenpipelineSdlcEvents resource.
type OpenpipelineSdlcEventsArgs struct {
	// List of all ingest sources of the configuration
	Endpoints OpenpipelineSdlcEventsEndpointsPtrInput
	// List of all pipelines of the configuration
	Pipelines OpenpipelineSdlcEventsPipelinesPtrInput
	// Dynamic routing definition
	Routing OpenpipelineSdlcEventsRoutingPtrInput
}

func (OpenpipelineSdlcEventsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openpipelineSdlcEventsArgs)(nil)).Elem()
}

type OpenpipelineSdlcEventsInput interface {
	pulumi.Input

	ToOpenpipelineSdlcEventsOutput() OpenpipelineSdlcEventsOutput
	ToOpenpipelineSdlcEventsOutputWithContext(ctx context.Context) OpenpipelineSdlcEventsOutput
}

func (*OpenpipelineSdlcEvents) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineSdlcEvents)(nil)).Elem()
}

func (i *OpenpipelineSdlcEvents) ToOpenpipelineSdlcEventsOutput() OpenpipelineSdlcEventsOutput {
	return i.ToOpenpipelineSdlcEventsOutputWithContext(context.Background())
}

func (i *OpenpipelineSdlcEvents) ToOpenpipelineSdlcEventsOutputWithContext(ctx context.Context) OpenpipelineSdlcEventsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineSdlcEventsOutput)
}

// OpenpipelineSdlcEventsArrayInput is an input type that accepts OpenpipelineSdlcEventsArray and OpenpipelineSdlcEventsArrayOutput values.
// You can construct a concrete instance of `OpenpipelineSdlcEventsArrayInput` via:
//
//	OpenpipelineSdlcEventsArray{ OpenpipelineSdlcEventsArgs{...} }
type OpenpipelineSdlcEventsArrayInput interface {
	pulumi.Input

	ToOpenpipelineSdlcEventsArrayOutput() OpenpipelineSdlcEventsArrayOutput
	ToOpenpipelineSdlcEventsArrayOutputWithContext(context.Context) OpenpipelineSdlcEventsArrayOutput
}

type OpenpipelineSdlcEventsArray []OpenpipelineSdlcEventsInput

func (OpenpipelineSdlcEventsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineSdlcEvents)(nil)).Elem()
}

func (i OpenpipelineSdlcEventsArray) ToOpenpipelineSdlcEventsArrayOutput() OpenpipelineSdlcEventsArrayOutput {
	return i.ToOpenpipelineSdlcEventsArrayOutputWithContext(context.Background())
}

func (i OpenpipelineSdlcEventsArray) ToOpenpipelineSdlcEventsArrayOutputWithContext(ctx context.Context) OpenpipelineSdlcEventsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineSdlcEventsArrayOutput)
}

// OpenpipelineSdlcEventsMapInput is an input type that accepts OpenpipelineSdlcEventsMap and OpenpipelineSdlcEventsMapOutput values.
// You can construct a concrete instance of `OpenpipelineSdlcEventsMapInput` via:
//
//	OpenpipelineSdlcEventsMap{ "key": OpenpipelineSdlcEventsArgs{...} }
type OpenpipelineSdlcEventsMapInput interface {
	pulumi.Input

	ToOpenpipelineSdlcEventsMapOutput() OpenpipelineSdlcEventsMapOutput
	ToOpenpipelineSdlcEventsMapOutputWithContext(context.Context) OpenpipelineSdlcEventsMapOutput
}

type OpenpipelineSdlcEventsMap map[string]OpenpipelineSdlcEventsInput

func (OpenpipelineSdlcEventsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineSdlcEvents)(nil)).Elem()
}

func (i OpenpipelineSdlcEventsMap) ToOpenpipelineSdlcEventsMapOutput() OpenpipelineSdlcEventsMapOutput {
	return i.ToOpenpipelineSdlcEventsMapOutputWithContext(context.Background())
}

func (i OpenpipelineSdlcEventsMap) ToOpenpipelineSdlcEventsMapOutputWithContext(ctx context.Context) OpenpipelineSdlcEventsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenpipelineSdlcEventsMapOutput)
}

type OpenpipelineSdlcEventsOutput struct{ *pulumi.OutputState }

func (OpenpipelineSdlcEventsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenpipelineSdlcEvents)(nil)).Elem()
}

func (o OpenpipelineSdlcEventsOutput) ToOpenpipelineSdlcEventsOutput() OpenpipelineSdlcEventsOutput {
	return o
}

func (o OpenpipelineSdlcEventsOutput) ToOpenpipelineSdlcEventsOutputWithContext(ctx context.Context) OpenpipelineSdlcEventsOutput {
	return o
}

// List of all ingest sources of the configuration
func (o OpenpipelineSdlcEventsOutput) Endpoints() OpenpipelineSdlcEventsEndpointsPtrOutput {
	return o.ApplyT(func(v *OpenpipelineSdlcEvents) OpenpipelineSdlcEventsEndpointsPtrOutput { return v.Endpoints }).(OpenpipelineSdlcEventsEndpointsPtrOutput)
}

// List of all pipelines of the configuration
func (o OpenpipelineSdlcEventsOutput) Pipelines() OpenpipelineSdlcEventsPipelinesPtrOutput {
	return o.ApplyT(func(v *OpenpipelineSdlcEvents) OpenpipelineSdlcEventsPipelinesPtrOutput { return v.Pipelines }).(OpenpipelineSdlcEventsPipelinesPtrOutput)
}

// Dynamic routing definition
func (o OpenpipelineSdlcEventsOutput) Routing() OpenpipelineSdlcEventsRoutingPtrOutput {
	return o.ApplyT(func(v *OpenpipelineSdlcEvents) OpenpipelineSdlcEventsRoutingPtrOutput { return v.Routing }).(OpenpipelineSdlcEventsRoutingPtrOutput)
}

type OpenpipelineSdlcEventsArrayOutput struct{ *pulumi.OutputState }

func (OpenpipelineSdlcEventsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenpipelineSdlcEvents)(nil)).Elem()
}

func (o OpenpipelineSdlcEventsArrayOutput) ToOpenpipelineSdlcEventsArrayOutput() OpenpipelineSdlcEventsArrayOutput {
	return o
}

func (o OpenpipelineSdlcEventsArrayOutput) ToOpenpipelineSdlcEventsArrayOutputWithContext(ctx context.Context) OpenpipelineSdlcEventsArrayOutput {
	return o
}

func (o OpenpipelineSdlcEventsArrayOutput) Index(i pulumi.IntInput) OpenpipelineSdlcEventsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenpipelineSdlcEvents {
		return vs[0].([]*OpenpipelineSdlcEvents)[vs[1].(int)]
	}).(OpenpipelineSdlcEventsOutput)
}

type OpenpipelineSdlcEventsMapOutput struct{ *pulumi.OutputState }

func (OpenpipelineSdlcEventsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenpipelineSdlcEvents)(nil)).Elem()
}

func (o OpenpipelineSdlcEventsMapOutput) ToOpenpipelineSdlcEventsMapOutput() OpenpipelineSdlcEventsMapOutput {
	return o
}

func (o OpenpipelineSdlcEventsMapOutput) ToOpenpipelineSdlcEventsMapOutputWithContext(ctx context.Context) OpenpipelineSdlcEventsMapOutput {
	return o
}

func (o OpenpipelineSdlcEventsMapOutput) MapIndex(k pulumi.StringInput) OpenpipelineSdlcEventsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenpipelineSdlcEvents {
		return vs[0].(map[string]*OpenpipelineSdlcEvents)[vs[1].(string)]
	}).(OpenpipelineSdlcEventsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineSdlcEventsInput)(nil)).Elem(), &OpenpipelineSdlcEvents{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineSdlcEventsArrayInput)(nil)).Elem(), OpenpipelineSdlcEventsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenpipelineSdlcEventsMapInput)(nil)).Elem(), OpenpipelineSdlcEventsMap{})
	pulumi.RegisterOutputType(OpenpipelineSdlcEventsOutput{})
	pulumi.RegisterOutputType(OpenpipelineSdlcEventsArrayOutput{})
	pulumi.RegisterOutputType(OpenpipelineSdlcEventsMapOutput{})
}
