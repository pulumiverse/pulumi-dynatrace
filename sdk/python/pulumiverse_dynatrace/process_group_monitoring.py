# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ProcessGroupMonitoringArgs', 'ProcessGroupMonitoring']

@pulumi.input_type
class ProcessGroupMonitoringArgs:
    def __init__(__self__, *,
                 monitoring_state: pulumi.Input[str],
                 process_group_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a ProcessGroupMonitoring resource.
        :param pulumi.Input[str] monitoring_state: Possible Values: `DEFAULT`, `MONITORING_OFF`, `MONITORING_ON`
        :param pulumi.Input[str] process_group_id: The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
        """
        pulumi.set(__self__, "monitoring_state", monitoring_state)
        pulumi.set(__self__, "process_group_id", process_group_id)

    @property
    @pulumi.getter(name="monitoringState")
    def monitoring_state(self) -> pulumi.Input[str]:
        """
        Possible Values: `DEFAULT`, `MONITORING_OFF`, `MONITORING_ON`
        """
        return pulumi.get(self, "monitoring_state")

    @monitoring_state.setter
    def monitoring_state(self, value: pulumi.Input[str]):
        pulumi.set(self, "monitoring_state", value)

    @property
    @pulumi.getter(name="processGroupId")
    def process_group_id(self) -> pulumi.Input[str]:
        """
        The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
        """
        return pulumi.get(self, "process_group_id")

    @process_group_id.setter
    def process_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "process_group_id", value)


@pulumi.input_type
class _ProcessGroupMonitoringState:
    def __init__(__self__, *,
                 monitoring_state: Optional[pulumi.Input[str]] = None,
                 process_group_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ProcessGroupMonitoring resources.
        :param pulumi.Input[str] monitoring_state: Possible Values: `DEFAULT`, `MONITORING_OFF`, `MONITORING_ON`
        :param pulumi.Input[str] process_group_id: The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
        """
        if monitoring_state is not None:
            pulumi.set(__self__, "monitoring_state", monitoring_state)
        if process_group_id is not None:
            pulumi.set(__self__, "process_group_id", process_group_id)

    @property
    @pulumi.getter(name="monitoringState")
    def monitoring_state(self) -> Optional[pulumi.Input[str]]:
        """
        Possible Values: `DEFAULT`, `MONITORING_OFF`, `MONITORING_ON`
        """
        return pulumi.get(self, "monitoring_state")

    @monitoring_state.setter
    def monitoring_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitoring_state", value)

    @property
    @pulumi.getter(name="processGroupId")
    def process_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
        """
        return pulumi.get(self, "process_group_id")

    @process_group_id.setter
    def process_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "process_group_id", value)


class ProcessGroupMonitoring(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 monitoring_state: Optional[pulumi.Input[str]] = None,
                 process_group_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a ProcessGroupMonitoring resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] monitoring_state: Possible Values: `DEFAULT`, `MONITORING_OFF`, `MONITORING_ON`
        :param pulumi.Input[str] process_group_id: The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProcessGroupMonitoringArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ProcessGroupMonitoring resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ProcessGroupMonitoringArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProcessGroupMonitoringArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 monitoring_state: Optional[pulumi.Input[str]] = None,
                 process_group_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProcessGroupMonitoringArgs.__new__(ProcessGroupMonitoringArgs)

            if monitoring_state is None and not opts.urn:
                raise TypeError("Missing required property 'monitoring_state'")
            __props__.__dict__["monitoring_state"] = monitoring_state
            if process_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'process_group_id'")
            __props__.__dict__["process_group_id"] = process_group_id
        super(ProcessGroupMonitoring, __self__).__init__(
            'dynatrace:index/processGroupMonitoring:ProcessGroupMonitoring',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            monitoring_state: Optional[pulumi.Input[str]] = None,
            process_group_id: Optional[pulumi.Input[str]] = None) -> 'ProcessGroupMonitoring':
        """
        Get an existing ProcessGroupMonitoring resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] monitoring_state: Possible Values: `DEFAULT`, `MONITORING_OFF`, `MONITORING_ON`
        :param pulumi.Input[str] process_group_id: The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProcessGroupMonitoringState.__new__(_ProcessGroupMonitoringState)

        __props__.__dict__["monitoring_state"] = monitoring_state
        __props__.__dict__["process_group_id"] = process_group_id
        return ProcessGroupMonitoring(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="monitoringState")
    def monitoring_state(self) -> pulumi.Output[str]:
        """
        Possible Values: `DEFAULT`, `MONITORING_OFF`, `MONITORING_ON`
        """
        return pulumi.get(self, "monitoring_state")

    @property
    @pulumi.getter(name="processGroupId")
    def process_group_id(self) -> pulumi.Output[str]:
        """
        The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
        """
        return pulumi.get(self, "process_group_id")

