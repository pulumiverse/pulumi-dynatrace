# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DavisAnomalyDetectorsArgs', 'DavisAnomalyDetectors']

@pulumi.input_type
class DavisAnomalyDetectorsArgs:
    def __init__(__self__, *,
                 analyzer: pulumi.Input['DavisAnomalyDetectorsAnalyzerArgs'],
                 description: pulumi.Input[str],
                 enabled: pulumi.Input[bool],
                 event_template: pulumi.Input['DavisAnomalyDetectorsEventTemplateArgs'],
                 execution_settings: pulumi.Input['DavisAnomalyDetectorsExecutionSettingsArgs'],
                 source: pulumi.Input[str],
                 title: pulumi.Input[str]):
        """
        The set of arguments for constructing a DavisAnomalyDetectors resource.
        :param pulumi.Input['DavisAnomalyDetectorsAnalyzerArgs'] analyzer: Analyzer input
        :param pulumi.Input[str] description: The description of the anomaly detector
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['DavisAnomalyDetectorsEventTemplateArgs'] event_template: Event template
        :param pulumi.Input['DavisAnomalyDetectorsExecutionSettingsArgs'] execution_settings: Execution settings
        :param pulumi.Input[str] source: Source
        :param pulumi.Input[str] title: The title of the anomaly detector
        """
        pulumi.set(__self__, "analyzer", analyzer)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "event_template", event_template)
        pulumi.set(__self__, "execution_settings", execution_settings)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def analyzer(self) -> pulumi.Input['DavisAnomalyDetectorsAnalyzerArgs']:
        """
        Analyzer input
        """
        return pulumi.get(self, "analyzer")

    @analyzer.setter
    def analyzer(self, value: pulumi.Input['DavisAnomalyDetectorsAnalyzerArgs']):
        pulumi.set(self, "analyzer", value)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        """
        The description of the anomaly detector
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="eventTemplate")
    def event_template(self) -> pulumi.Input['DavisAnomalyDetectorsEventTemplateArgs']:
        """
        Event template
        """
        return pulumi.get(self, "event_template")

    @event_template.setter
    def event_template(self, value: pulumi.Input['DavisAnomalyDetectorsEventTemplateArgs']):
        pulumi.set(self, "event_template", value)

    @property
    @pulumi.getter(name="executionSettings")
    def execution_settings(self) -> pulumi.Input['DavisAnomalyDetectorsExecutionSettingsArgs']:
        """
        Execution settings
        """
        return pulumi.get(self, "execution_settings")

    @execution_settings.setter
    def execution_settings(self, value: pulumi.Input['DavisAnomalyDetectorsExecutionSettingsArgs']):
        pulumi.set(self, "execution_settings", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        """
        Source
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        The title of the anomaly detector
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class _DavisAnomalyDetectorsState:
    def __init__(__self__, *,
                 analyzer: Optional[pulumi.Input['DavisAnomalyDetectorsAnalyzerArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 event_template: Optional[pulumi.Input['DavisAnomalyDetectorsEventTemplateArgs']] = None,
                 execution_settings: Optional[pulumi.Input['DavisAnomalyDetectorsExecutionSettingsArgs']] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering DavisAnomalyDetectors resources.
        :param pulumi.Input['DavisAnomalyDetectorsAnalyzerArgs'] analyzer: Analyzer input
        :param pulumi.Input[str] description: The description of the anomaly detector
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['DavisAnomalyDetectorsEventTemplateArgs'] event_template: Event template
        :param pulumi.Input['DavisAnomalyDetectorsExecutionSettingsArgs'] execution_settings: Execution settings
        :param pulumi.Input[str] source: Source
        :param pulumi.Input[str] title: The title of the anomaly detector
        """
        if analyzer is not None:
            pulumi.set(__self__, "analyzer", analyzer)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if event_template is not None:
            pulumi.set(__self__, "event_template", event_template)
        if execution_settings is not None:
            pulumi.set(__self__, "execution_settings", execution_settings)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def analyzer(self) -> Optional[pulumi.Input['DavisAnomalyDetectorsAnalyzerArgs']]:
        """
        Analyzer input
        """
        return pulumi.get(self, "analyzer")

    @analyzer.setter
    def analyzer(self, value: Optional[pulumi.Input['DavisAnomalyDetectorsAnalyzerArgs']]):
        pulumi.set(self, "analyzer", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the anomaly detector
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="eventTemplate")
    def event_template(self) -> Optional[pulumi.Input['DavisAnomalyDetectorsEventTemplateArgs']]:
        """
        Event template
        """
        return pulumi.get(self, "event_template")

    @event_template.setter
    def event_template(self, value: Optional[pulumi.Input['DavisAnomalyDetectorsEventTemplateArgs']]):
        pulumi.set(self, "event_template", value)

    @property
    @pulumi.getter(name="executionSettings")
    def execution_settings(self) -> Optional[pulumi.Input['DavisAnomalyDetectorsExecutionSettingsArgs']]:
        """
        Execution settings
        """
        return pulumi.get(self, "execution_settings")

    @execution_settings.setter
    def execution_settings(self, value: Optional[pulumi.Input['DavisAnomalyDetectorsExecutionSettingsArgs']]):
        pulumi.set(self, "execution_settings", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        """
        Source
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the anomaly detector
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


class DavisAnomalyDetectors(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 analyzer: Optional[pulumi.Input[Union['DavisAnomalyDetectorsAnalyzerArgs', 'DavisAnomalyDetectorsAnalyzerArgsDict']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 event_template: Optional[pulumi.Input[Union['DavisAnomalyDetectorsEventTemplateArgs', 'DavisAnomalyDetectorsEventTemplateArgsDict']]] = None,
                 execution_settings: Optional[pulumi.Input[Union['DavisAnomalyDetectorsExecutionSettingsArgs', 'DavisAnomalyDetectorsExecutionSettingsArgsDict']]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a DavisAnomalyDetectors resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['DavisAnomalyDetectorsAnalyzerArgs', 'DavisAnomalyDetectorsAnalyzerArgsDict']] analyzer: Analyzer input
        :param pulumi.Input[str] description: The description of the anomaly detector
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[Union['DavisAnomalyDetectorsEventTemplateArgs', 'DavisAnomalyDetectorsEventTemplateArgsDict']] event_template: Event template
        :param pulumi.Input[Union['DavisAnomalyDetectorsExecutionSettingsArgs', 'DavisAnomalyDetectorsExecutionSettingsArgsDict']] execution_settings: Execution settings
        :param pulumi.Input[str] source: Source
        :param pulumi.Input[str] title: The title of the anomaly detector
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DavisAnomalyDetectorsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DavisAnomalyDetectors resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DavisAnomalyDetectorsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DavisAnomalyDetectorsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 analyzer: Optional[pulumi.Input[Union['DavisAnomalyDetectorsAnalyzerArgs', 'DavisAnomalyDetectorsAnalyzerArgsDict']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 event_template: Optional[pulumi.Input[Union['DavisAnomalyDetectorsEventTemplateArgs', 'DavisAnomalyDetectorsEventTemplateArgsDict']]] = None,
                 execution_settings: Optional[pulumi.Input[Union['DavisAnomalyDetectorsExecutionSettingsArgs', 'DavisAnomalyDetectorsExecutionSettingsArgsDict']]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DavisAnomalyDetectorsArgs.__new__(DavisAnomalyDetectorsArgs)

            if analyzer is None and not opts.urn:
                raise TypeError("Missing required property 'analyzer'")
            __props__.__dict__["analyzer"] = analyzer
            if description is None and not opts.urn:
                raise TypeError("Missing required property 'description'")
            __props__.__dict__["description"] = description
            if enabled is None and not opts.urn:
                raise TypeError("Missing required property 'enabled'")
            __props__.__dict__["enabled"] = enabled
            if event_template is None and not opts.urn:
                raise TypeError("Missing required property 'event_template'")
            __props__.__dict__["event_template"] = event_template
            if execution_settings is None and not opts.urn:
                raise TypeError("Missing required property 'execution_settings'")
            __props__.__dict__["execution_settings"] = execution_settings
            if source is None and not opts.urn:
                raise TypeError("Missing required property 'source'")
            __props__.__dict__["source"] = source
            if title is None and not opts.urn:
                raise TypeError("Missing required property 'title'")
            __props__.__dict__["title"] = title
        super(DavisAnomalyDetectors, __self__).__init__(
            'dynatrace:index/davisAnomalyDetectors:DavisAnomalyDetectors',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            analyzer: Optional[pulumi.Input[Union['DavisAnomalyDetectorsAnalyzerArgs', 'DavisAnomalyDetectorsAnalyzerArgsDict']]] = None,
            description: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            event_template: Optional[pulumi.Input[Union['DavisAnomalyDetectorsEventTemplateArgs', 'DavisAnomalyDetectorsEventTemplateArgsDict']]] = None,
            execution_settings: Optional[pulumi.Input[Union['DavisAnomalyDetectorsExecutionSettingsArgs', 'DavisAnomalyDetectorsExecutionSettingsArgsDict']]] = None,
            source: Optional[pulumi.Input[str]] = None,
            title: Optional[pulumi.Input[str]] = None) -> 'DavisAnomalyDetectors':
        """
        Get an existing DavisAnomalyDetectors resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['DavisAnomalyDetectorsAnalyzerArgs', 'DavisAnomalyDetectorsAnalyzerArgsDict']] analyzer: Analyzer input
        :param pulumi.Input[str] description: The description of the anomaly detector
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[Union['DavisAnomalyDetectorsEventTemplateArgs', 'DavisAnomalyDetectorsEventTemplateArgsDict']] event_template: Event template
        :param pulumi.Input[Union['DavisAnomalyDetectorsExecutionSettingsArgs', 'DavisAnomalyDetectorsExecutionSettingsArgsDict']] execution_settings: Execution settings
        :param pulumi.Input[str] source: Source
        :param pulumi.Input[str] title: The title of the anomaly detector
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DavisAnomalyDetectorsState.__new__(_DavisAnomalyDetectorsState)

        __props__.__dict__["analyzer"] = analyzer
        __props__.__dict__["description"] = description
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["event_template"] = event_template
        __props__.__dict__["execution_settings"] = execution_settings
        __props__.__dict__["source"] = source
        __props__.__dict__["title"] = title
        return DavisAnomalyDetectors(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def analyzer(self) -> pulumi.Output['outputs.DavisAnomalyDetectorsAnalyzer']:
        """
        Analyzer input
        """
        return pulumi.get(self, "analyzer")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The description of the anomaly detector
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="eventTemplate")
    def event_template(self) -> pulumi.Output['outputs.DavisAnomalyDetectorsEventTemplate']:
        """
        Event template
        """
        return pulumi.get(self, "event_template")

    @property
    @pulumi.getter(name="executionSettings")
    def execution_settings(self) -> pulumi.Output['outputs.DavisAnomalyDetectorsExecutionSettings']:
        """
        Execution settings
        """
        return pulumi.get(self, "execution_settings")

    @property
    @pulumi.getter
    def source(self) -> pulumi.Output[str]:
        """
        Source
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def title(self) -> pulumi.Output[str]:
        """
        The title of the anomaly detector
        """
        return pulumi.get(self, "title")

