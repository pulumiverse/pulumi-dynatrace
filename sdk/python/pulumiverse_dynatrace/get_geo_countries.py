# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetGeoCountriesResult',
    'AwaitableGetGeoCountriesResult',
    'get_geo_countries',
    'get_geo_countries_output',
]

@pulumi.output_type
class GetGeoCountriesResult:
    """
    A collection of values returned by getGeoCountries.
    """
    def __init__(__self__, countries=None, id=None):
        if countries and not isinstance(countries, list):
            raise TypeError("Expected argument 'countries' to be a list")
        pulumi.set(__self__, "countries", countries)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def countries(self) -> Sequence['outputs.GetGeoCountriesCountryResult']:
        return pulumi.get(self, "countries")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetGeoCountriesResult(GetGeoCountriesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGeoCountriesResult(
            countries=self.countries,
            id=self.id)


def get_geo_countries(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGeoCountriesResult:
    """
    The `get_geo_countries` data source retrieves the list of countries and their codes.

    Geographic regions API: GET countries - https://docs.dynatrace.com/docs/shortlink/api-v2-rum-geographic-regions-get-countries

    ## Example Usage

    ```python
    import pulumi
    import pulumi_dynatrace as dynatrace

    example = dynatrace.get_geo_countries()
    pulumi.export("test", example)
    ```
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('dynatrace:index/getGeoCountries:getGeoCountries', __args__, opts=opts, typ=GetGeoCountriesResult).value

    return AwaitableGetGeoCountriesResult(
        countries=pulumi.get(__ret__, 'countries'),
        id=pulumi.get(__ret__, 'id'))
def get_geo_countries_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetGeoCountriesResult]:
    """
    The `get_geo_countries` data source retrieves the list of countries and their codes.

    Geographic regions API: GET countries - https://docs.dynatrace.com/docs/shortlink/api-v2-rum-geographic-regions-get-countries

    ## Example Usage

    ```python
    import pulumi
    import pulumi_dynatrace as dynatrace

    example = dynatrace.get_geo_countries()
    pulumi.export("test", example)
    ```
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('dynatrace:index/getGeoCountries:getGeoCountries', __args__, opts=opts, typ=GetGeoCountriesResult)
    return __ret__.apply(lambda __response__: GetGeoCountriesResult(
        countries=pulumi.get(__response__, 'countries'),
        id=pulumi.get(__response__, 'id')))
