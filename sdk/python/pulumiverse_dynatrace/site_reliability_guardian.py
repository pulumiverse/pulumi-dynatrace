# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SiteReliabilityGuardianArgs', 'SiteReliabilityGuardian']

@pulumi.input_type
class SiteReliabilityGuardianArgs:
    def __init__(__self__, *,
                 objectives: pulumi.Input['SiteReliabilityGuardianObjectivesArgs'],
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 variables: Optional[pulumi.Input['SiteReliabilityGuardianVariablesArgs']] = None):
        """
        The set of arguments for constructing a SiteReliabilityGuardian resource.
        :param pulumi.Input['SiteReliabilityGuardianObjectivesArgs'] objectives: Objectives
        :param pulumi.Input[str] description: Description
        :param pulumi.Input[str] name: Name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Define key/value pairs that further describe this guardian.
        :param pulumi.Input['SiteReliabilityGuardianVariablesArgs'] variables: Define variables for dynamically defining DQL queries
        """
        pulumi.set(__self__, "objectives", objectives)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def objectives(self) -> pulumi.Input['SiteReliabilityGuardianObjectivesArgs']:
        """
        Objectives
        """
        return pulumi.get(self, "objectives")

    @objectives.setter
    def objectives(self, value: pulumi.Input['SiteReliabilityGuardianObjectivesArgs']):
        pulumi.set(self, "objectives", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Define key/value pairs that further describe this guardian.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input['SiteReliabilityGuardianVariablesArgs']]:
        """
        Define variables for dynamically defining DQL queries
        """
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input['SiteReliabilityGuardianVariablesArgs']]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class _SiteReliabilityGuardianState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 objectives: Optional[pulumi.Input['SiteReliabilityGuardianObjectivesArgs']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 variables: Optional[pulumi.Input['SiteReliabilityGuardianVariablesArgs']] = None):
        """
        Input properties used for looking up and filtering SiteReliabilityGuardian resources.
        :param pulumi.Input[str] description: Description
        :param pulumi.Input[str] name: Name
        :param pulumi.Input['SiteReliabilityGuardianObjectivesArgs'] objectives: Objectives
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Define key/value pairs that further describe this guardian.
        :param pulumi.Input['SiteReliabilityGuardianVariablesArgs'] variables: Define variables for dynamically defining DQL queries
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if objectives is not None:
            pulumi.set(__self__, "objectives", objectives)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def objectives(self) -> Optional[pulumi.Input['SiteReliabilityGuardianObjectivesArgs']]:
        """
        Objectives
        """
        return pulumi.get(self, "objectives")

    @objectives.setter
    def objectives(self, value: Optional[pulumi.Input['SiteReliabilityGuardianObjectivesArgs']]):
        pulumi.set(self, "objectives", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Define key/value pairs that further describe this guardian.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input['SiteReliabilityGuardianVariablesArgs']]:
        """
        Define variables for dynamically defining DQL queries
        """
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input['SiteReliabilityGuardianVariablesArgs']]):
        pulumi.set(self, "variables", value)


class SiteReliabilityGuardian(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 objectives: Optional[pulumi.Input[Union['SiteReliabilityGuardianObjectivesArgs', 'SiteReliabilityGuardianObjectivesArgsDict']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 variables: Optional[pulumi.Input[Union['SiteReliabilityGuardianVariablesArgs', 'SiteReliabilityGuardianVariablesArgsDict']]] = None,
                 __props__=None):
        """
        Create a SiteReliabilityGuardian resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description
        :param pulumi.Input[str] name: Name
        :param pulumi.Input[Union['SiteReliabilityGuardianObjectivesArgs', 'SiteReliabilityGuardianObjectivesArgsDict']] objectives: Objectives
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Define key/value pairs that further describe this guardian.
        :param pulumi.Input[Union['SiteReliabilityGuardianVariablesArgs', 'SiteReliabilityGuardianVariablesArgsDict']] variables: Define variables for dynamically defining DQL queries
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SiteReliabilityGuardianArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SiteReliabilityGuardian resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SiteReliabilityGuardianArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SiteReliabilityGuardianArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 objectives: Optional[pulumi.Input[Union['SiteReliabilityGuardianObjectivesArgs', 'SiteReliabilityGuardianObjectivesArgsDict']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 variables: Optional[pulumi.Input[Union['SiteReliabilityGuardianVariablesArgs', 'SiteReliabilityGuardianVariablesArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SiteReliabilityGuardianArgs.__new__(SiteReliabilityGuardianArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            if objectives is None and not opts.urn:
                raise TypeError("Missing required property 'objectives'")
            __props__.__dict__["objectives"] = objectives
            __props__.__dict__["tags"] = tags
            __props__.__dict__["variables"] = variables
        super(SiteReliabilityGuardian, __self__).__init__(
            'dynatrace:index/siteReliabilityGuardian:SiteReliabilityGuardian',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            objectives: Optional[pulumi.Input[Union['SiteReliabilityGuardianObjectivesArgs', 'SiteReliabilityGuardianObjectivesArgsDict']]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            variables: Optional[pulumi.Input[Union['SiteReliabilityGuardianVariablesArgs', 'SiteReliabilityGuardianVariablesArgsDict']]] = None) -> 'SiteReliabilityGuardian':
        """
        Get an existing SiteReliabilityGuardian resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description
        :param pulumi.Input[str] name: Name
        :param pulumi.Input[Union['SiteReliabilityGuardianObjectivesArgs', 'SiteReliabilityGuardianObjectivesArgsDict']] objectives: Objectives
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Define key/value pairs that further describe this guardian.
        :param pulumi.Input[Union['SiteReliabilityGuardianVariablesArgs', 'SiteReliabilityGuardianVariablesArgsDict']] variables: Define variables for dynamically defining DQL queries
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SiteReliabilityGuardianState.__new__(_SiteReliabilityGuardianState)

        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["objectives"] = objectives
        __props__.__dict__["tags"] = tags
        __props__.__dict__["variables"] = variables
        return SiteReliabilityGuardian(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def objectives(self) -> pulumi.Output['outputs.SiteReliabilityGuardianObjectives']:
        """
        Objectives
        """
        return pulumi.get(self, "objectives")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Define key/value pairs that further describe this guardian.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def variables(self) -> pulumi.Output[Optional['outputs.SiteReliabilityGuardianVariables']]:
        """
        Define variables for dynamically defining DQL queries
        """
        return pulumi.get(self, "variables")

