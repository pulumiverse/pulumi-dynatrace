# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['TransactionStartFiltersArgs', 'TransactionStartFilters']

@pulumi.input_type
class TransactionStartFiltersArgs:
    def __init__(__self__, *,
                 cics_terminal_transaction_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cics_transaction_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ims_terminal_transaction_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ims_transaction_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a TransactionStartFilters resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cics_terminal_transaction_ids: You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cics_transaction_ids: You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ims_terminal_transaction_ids: You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ims_transaction_ids: You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
        """
        if cics_terminal_transaction_ids is not None:
            pulumi.set(__self__, "cics_terminal_transaction_ids", cics_terminal_transaction_ids)
        if cics_transaction_ids is not None:
            pulumi.set(__self__, "cics_transaction_ids", cics_transaction_ids)
        if ims_terminal_transaction_ids is not None:
            pulumi.set(__self__, "ims_terminal_transaction_ids", ims_terminal_transaction_ids)
        if ims_transaction_ids is not None:
            pulumi.set(__self__, "ims_transaction_ids", ims_transaction_ids)

    @property
    @pulumi.getter(name="cicsTerminalTransactionIds")
    def cics_terminal_transaction_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
        """
        return pulumi.get(self, "cics_terminal_transaction_ids")

    @cics_terminal_transaction_ids.setter
    def cics_terminal_transaction_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cics_terminal_transaction_ids", value)

    @property
    @pulumi.getter(name="cicsTransactionIds")
    def cics_transaction_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
        """
        return pulumi.get(self, "cics_transaction_ids")

    @cics_transaction_ids.setter
    def cics_transaction_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cics_transaction_ids", value)

    @property
    @pulumi.getter(name="imsTerminalTransactionIds")
    def ims_terminal_transaction_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
        """
        return pulumi.get(self, "ims_terminal_transaction_ids")

    @ims_terminal_transaction_ids.setter
    def ims_terminal_transaction_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ims_terminal_transaction_ids", value)

    @property
    @pulumi.getter(name="imsTransactionIds")
    def ims_transaction_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
        """
        return pulumi.get(self, "ims_transaction_ids")

    @ims_transaction_ids.setter
    def ims_transaction_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ims_transaction_ids", value)


@pulumi.input_type
class _TransactionStartFiltersState:
    def __init__(__self__, *,
                 cics_terminal_transaction_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cics_transaction_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ims_terminal_transaction_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ims_transaction_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering TransactionStartFilters resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cics_terminal_transaction_ids: You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cics_transaction_ids: You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ims_terminal_transaction_ids: You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ims_transaction_ids: You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
        """
        if cics_terminal_transaction_ids is not None:
            pulumi.set(__self__, "cics_terminal_transaction_ids", cics_terminal_transaction_ids)
        if cics_transaction_ids is not None:
            pulumi.set(__self__, "cics_transaction_ids", cics_transaction_ids)
        if ims_terminal_transaction_ids is not None:
            pulumi.set(__self__, "ims_terminal_transaction_ids", ims_terminal_transaction_ids)
        if ims_transaction_ids is not None:
            pulumi.set(__self__, "ims_transaction_ids", ims_transaction_ids)

    @property
    @pulumi.getter(name="cicsTerminalTransactionIds")
    def cics_terminal_transaction_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
        """
        return pulumi.get(self, "cics_terminal_transaction_ids")

    @cics_terminal_transaction_ids.setter
    def cics_terminal_transaction_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cics_terminal_transaction_ids", value)

    @property
    @pulumi.getter(name="cicsTransactionIds")
    def cics_transaction_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
        """
        return pulumi.get(self, "cics_transaction_ids")

    @cics_transaction_ids.setter
    def cics_transaction_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cics_transaction_ids", value)

    @property
    @pulumi.getter(name="imsTerminalTransactionIds")
    def ims_terminal_transaction_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
        """
        return pulumi.get(self, "ims_terminal_transaction_ids")

    @ims_terminal_transaction_ids.setter
    def ims_terminal_transaction_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ims_terminal_transaction_ids", value)

    @property
    @pulumi.getter(name="imsTransactionIds")
    def ims_transaction_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
        """
        return pulumi.get(self, "ims_transaction_ids")

    @ims_transaction_ids.setter
    def ims_transaction_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ims_transaction_ids", value)


class TransactionStartFilters(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cics_terminal_transaction_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cics_transaction_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ims_terminal_transaction_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ims_transaction_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Create a TransactionStartFilters resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cics_terminal_transaction_ids: You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cics_transaction_ids: You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ims_terminal_transaction_ids: You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ims_transaction_ids: You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[TransactionStartFiltersArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a TransactionStartFilters resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param TransactionStartFiltersArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TransactionStartFiltersArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cics_terminal_transaction_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cics_transaction_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ims_terminal_transaction_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ims_transaction_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TransactionStartFiltersArgs.__new__(TransactionStartFiltersArgs)

            __props__.__dict__["cics_terminal_transaction_ids"] = cics_terminal_transaction_ids
            __props__.__dict__["cics_transaction_ids"] = cics_transaction_ids
            __props__.__dict__["ims_terminal_transaction_ids"] = ims_terminal_transaction_ids
            __props__.__dict__["ims_transaction_ids"] = ims_transaction_ids
        super(TransactionStartFilters, __self__).__init__(
            'dynatrace:index/transactionStartFilters:TransactionStartFilters',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cics_terminal_transaction_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            cics_transaction_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            ims_terminal_transaction_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            ims_transaction_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'TransactionStartFilters':
        """
        Get an existing TransactionStartFilters resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cics_terminal_transaction_ids: You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cics_transaction_ids: You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ims_terminal_transaction_ids: You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ims_transaction_ids: You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TransactionStartFiltersState.__new__(_TransactionStartFiltersState)

        __props__.__dict__["cics_terminal_transaction_ids"] = cics_terminal_transaction_ids
        __props__.__dict__["cics_transaction_ids"] = cics_transaction_ids
        __props__.__dict__["ims_terminal_transaction_ids"] = ims_terminal_transaction_ids
        __props__.__dict__["ims_transaction_ids"] = ims_transaction_ids
        return TransactionStartFilters(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cicsTerminalTransactionIds")
    def cics_terminal_transaction_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
        """
        return pulumi.get(self, "cics_terminal_transaction_ids")

    @property
    @pulumi.getter(name="cicsTransactionIds")
    def cics_transaction_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
        """
        return pulumi.get(self, "cics_transaction_ids")

    @property
    @pulumi.getter(name="imsTerminalTransactionIds")
    def ims_terminal_transaction_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
        """
        return pulumi.get(self, "ims_terminal_transaction_ids")

    @property
    @pulumi.getter(name="imsTransactionIds")
    def ims_transaction_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.
        """
        return pulumi.get(self, "ims_transaction_ids")

