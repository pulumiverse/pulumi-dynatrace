# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['OpenpipelineV2SystemEventsIngestsourcesArgs', 'OpenpipelineV2SystemEventsIngestsources']

@pulumi.input_type
class OpenpipelineV2SystemEventsIngestsourcesArgs:
    def __init__(__self__, *,
                 display_name: pulumi.Input[_builtins.str],
                 enabled: pulumi.Input[_builtins.bool],
                 path_segment: pulumi.Input[_builtins.str],
                 processing: pulumi.Input['OpenpipelineV2SystemEventsIngestsourcesProcessingArgs'],
                 default_bucket: Optional[pulumi.Input[_builtins.str]] = None,
                 static_routing: Optional[pulumi.Input['OpenpipelineV2SystemEventsIngestsourcesStaticRoutingArgs']] = None):
        """
        The set of arguments for constructing a OpenpipelineV2SystemEventsIngestsources resource.
        :param pulumi.Input[_builtins.str] display_name: Endpoint display name
        :param pulumi.Input[_builtins.bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[_builtins.str] path_segment: Endpoint segment
        :param pulumi.Input['OpenpipelineV2SystemEventsIngestsourcesProcessingArgs'] processing: Processing stage
        :param pulumi.Input[_builtins.str] default_bucket: Default Bucket
        :param pulumi.Input['OpenpipelineV2SystemEventsIngestsourcesStaticRoutingArgs'] static_routing: Static routing of endpoint
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "path_segment", path_segment)
        pulumi.set(__self__, "processing", processing)
        if default_bucket is not None:
            pulumi.set(__self__, "default_bucket", default_bucket)
        if static_routing is not None:
            pulumi.set(__self__, "static_routing", static_routing)

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[_builtins.str]:
        """
        Endpoint display name
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "display_name", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[_builtins.bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="pathSegment")
    def path_segment(self) -> pulumi.Input[_builtins.str]:
        """
        Endpoint segment
        """
        return pulumi.get(self, "path_segment")

    @path_segment.setter
    def path_segment(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "path_segment", value)

    @_builtins.property
    @pulumi.getter
    def processing(self) -> pulumi.Input['OpenpipelineV2SystemEventsIngestsourcesProcessingArgs']:
        """
        Processing stage
        """
        return pulumi.get(self, "processing")

    @processing.setter
    def processing(self, value: pulumi.Input['OpenpipelineV2SystemEventsIngestsourcesProcessingArgs']):
        pulumi.set(self, "processing", value)

    @_builtins.property
    @pulumi.getter(name="defaultBucket")
    def default_bucket(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Default Bucket
        """
        return pulumi.get(self, "default_bucket")

    @default_bucket.setter
    def default_bucket(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_bucket", value)

    @_builtins.property
    @pulumi.getter(name="staticRouting")
    def static_routing(self) -> Optional[pulumi.Input['OpenpipelineV2SystemEventsIngestsourcesStaticRoutingArgs']]:
        """
        Static routing of endpoint
        """
        return pulumi.get(self, "static_routing")

    @static_routing.setter
    def static_routing(self, value: Optional[pulumi.Input['OpenpipelineV2SystemEventsIngestsourcesStaticRoutingArgs']]):
        pulumi.set(self, "static_routing", value)


@pulumi.input_type
class _OpenpipelineV2SystemEventsIngestsourcesState:
    def __init__(__self__, *,
                 default_bucket: Optional[pulumi.Input[_builtins.str]] = None,
                 display_name: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 path_segment: Optional[pulumi.Input[_builtins.str]] = None,
                 processing: Optional[pulumi.Input['OpenpipelineV2SystemEventsIngestsourcesProcessingArgs']] = None,
                 static_routing: Optional[pulumi.Input['OpenpipelineV2SystemEventsIngestsourcesStaticRoutingArgs']] = None):
        """
        Input properties used for looking up and filtering OpenpipelineV2SystemEventsIngestsources resources.
        :param pulumi.Input[_builtins.str] default_bucket: Default Bucket
        :param pulumi.Input[_builtins.str] display_name: Endpoint display name
        :param pulumi.Input[_builtins.bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[_builtins.str] path_segment: Endpoint segment
        :param pulumi.Input['OpenpipelineV2SystemEventsIngestsourcesProcessingArgs'] processing: Processing stage
        :param pulumi.Input['OpenpipelineV2SystemEventsIngestsourcesStaticRoutingArgs'] static_routing: Static routing of endpoint
        """
        if default_bucket is not None:
            pulumi.set(__self__, "default_bucket", default_bucket)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if path_segment is not None:
            pulumi.set(__self__, "path_segment", path_segment)
        if processing is not None:
            pulumi.set(__self__, "processing", processing)
        if static_routing is not None:
            pulumi.set(__self__, "static_routing", static_routing)

    @_builtins.property
    @pulumi.getter(name="defaultBucket")
    def default_bucket(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Default Bucket
        """
        return pulumi.get(self, "default_bucket")

    @default_bucket.setter
    def default_bucket(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_bucket", value)

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Endpoint display name
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "display_name", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="pathSegment")
    def path_segment(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Endpoint segment
        """
        return pulumi.get(self, "path_segment")

    @path_segment.setter
    def path_segment(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "path_segment", value)

    @_builtins.property
    @pulumi.getter
    def processing(self) -> Optional[pulumi.Input['OpenpipelineV2SystemEventsIngestsourcesProcessingArgs']]:
        """
        Processing stage
        """
        return pulumi.get(self, "processing")

    @processing.setter
    def processing(self, value: Optional[pulumi.Input['OpenpipelineV2SystemEventsIngestsourcesProcessingArgs']]):
        pulumi.set(self, "processing", value)

    @_builtins.property
    @pulumi.getter(name="staticRouting")
    def static_routing(self) -> Optional[pulumi.Input['OpenpipelineV2SystemEventsIngestsourcesStaticRoutingArgs']]:
        """
        Static routing of endpoint
        """
        return pulumi.get(self, "static_routing")

    @static_routing.setter
    def static_routing(self, value: Optional[pulumi.Input['OpenpipelineV2SystemEventsIngestsourcesStaticRoutingArgs']]):
        pulumi.set(self, "static_routing", value)


@pulumi.type_token("dynatrace:index/openpipelineV2SystemEventsIngestsources:OpenpipelineV2SystemEventsIngestsources")
class OpenpipelineV2SystemEventsIngestsources(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 default_bucket: Optional[pulumi.Input[_builtins.str]] = None,
                 display_name: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 path_segment: Optional[pulumi.Input[_builtins.str]] = None,
                 processing: Optional[pulumi.Input[Union['OpenpipelineV2SystemEventsIngestsourcesProcessingArgs', 'OpenpipelineV2SystemEventsIngestsourcesProcessingArgsDict']]] = None,
                 static_routing: Optional[pulumi.Input[Union['OpenpipelineV2SystemEventsIngestsourcesStaticRoutingArgs', 'OpenpipelineV2SystemEventsIngestsourcesStaticRoutingArgsDict']]] = None,
                 __props__=None):
        """
        Create a OpenpipelineV2SystemEventsIngestsources resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] default_bucket: Default Bucket
        :param pulumi.Input[_builtins.str] display_name: Endpoint display name
        :param pulumi.Input[_builtins.bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[_builtins.str] path_segment: Endpoint segment
        :param pulumi.Input[Union['OpenpipelineV2SystemEventsIngestsourcesProcessingArgs', 'OpenpipelineV2SystemEventsIngestsourcesProcessingArgsDict']] processing: Processing stage
        :param pulumi.Input[Union['OpenpipelineV2SystemEventsIngestsourcesStaticRoutingArgs', 'OpenpipelineV2SystemEventsIngestsourcesStaticRoutingArgsDict']] static_routing: Static routing of endpoint
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OpenpipelineV2SystemEventsIngestsourcesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a OpenpipelineV2SystemEventsIngestsources resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param OpenpipelineV2SystemEventsIngestsourcesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OpenpipelineV2SystemEventsIngestsourcesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 default_bucket: Optional[pulumi.Input[_builtins.str]] = None,
                 display_name: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 path_segment: Optional[pulumi.Input[_builtins.str]] = None,
                 processing: Optional[pulumi.Input[Union['OpenpipelineV2SystemEventsIngestsourcesProcessingArgs', 'OpenpipelineV2SystemEventsIngestsourcesProcessingArgsDict']]] = None,
                 static_routing: Optional[pulumi.Input[Union['OpenpipelineV2SystemEventsIngestsourcesStaticRoutingArgs', 'OpenpipelineV2SystemEventsIngestsourcesStaticRoutingArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OpenpipelineV2SystemEventsIngestsourcesArgs.__new__(OpenpipelineV2SystemEventsIngestsourcesArgs)

            __props__.__dict__["default_bucket"] = default_bucket
            if display_name is None and not opts.urn:
                raise TypeError("Missing required property 'display_name'")
            __props__.__dict__["display_name"] = display_name
            if enabled is None and not opts.urn:
                raise TypeError("Missing required property 'enabled'")
            __props__.__dict__["enabled"] = enabled
            if path_segment is None and not opts.urn:
                raise TypeError("Missing required property 'path_segment'")
            __props__.__dict__["path_segment"] = path_segment
            if processing is None and not opts.urn:
                raise TypeError("Missing required property 'processing'")
            __props__.__dict__["processing"] = processing
            __props__.__dict__["static_routing"] = static_routing
        super(OpenpipelineV2SystemEventsIngestsources, __self__).__init__(
            'dynatrace:index/openpipelineV2SystemEventsIngestsources:OpenpipelineV2SystemEventsIngestsources',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            default_bucket: Optional[pulumi.Input[_builtins.str]] = None,
            display_name: Optional[pulumi.Input[_builtins.str]] = None,
            enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            path_segment: Optional[pulumi.Input[_builtins.str]] = None,
            processing: Optional[pulumi.Input[Union['OpenpipelineV2SystemEventsIngestsourcesProcessingArgs', 'OpenpipelineV2SystemEventsIngestsourcesProcessingArgsDict']]] = None,
            static_routing: Optional[pulumi.Input[Union['OpenpipelineV2SystemEventsIngestsourcesStaticRoutingArgs', 'OpenpipelineV2SystemEventsIngestsourcesStaticRoutingArgsDict']]] = None) -> 'OpenpipelineV2SystemEventsIngestsources':
        """
        Get an existing OpenpipelineV2SystemEventsIngestsources resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] default_bucket: Default Bucket
        :param pulumi.Input[_builtins.str] display_name: Endpoint display name
        :param pulumi.Input[_builtins.bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[_builtins.str] path_segment: Endpoint segment
        :param pulumi.Input[Union['OpenpipelineV2SystemEventsIngestsourcesProcessingArgs', 'OpenpipelineV2SystemEventsIngestsourcesProcessingArgsDict']] processing: Processing stage
        :param pulumi.Input[Union['OpenpipelineV2SystemEventsIngestsourcesStaticRoutingArgs', 'OpenpipelineV2SystemEventsIngestsourcesStaticRoutingArgsDict']] static_routing: Static routing of endpoint
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OpenpipelineV2SystemEventsIngestsourcesState.__new__(_OpenpipelineV2SystemEventsIngestsourcesState)

        __props__.__dict__["default_bucket"] = default_bucket
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["path_segment"] = path_segment
        __props__.__dict__["processing"] = processing
        __props__.__dict__["static_routing"] = static_routing
        return OpenpipelineV2SystemEventsIngestsources(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="defaultBucket")
    def default_bucket(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Default Bucket
        """
        return pulumi.get(self, "default_bucket")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[_builtins.str]:
        """
        Endpoint display name
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="pathSegment")
    def path_segment(self) -> pulumi.Output[_builtins.str]:
        """
        Endpoint segment
        """
        return pulumi.get(self, "path_segment")

    @_builtins.property
    @pulumi.getter
    def processing(self) -> pulumi.Output['outputs.OpenpipelineV2SystemEventsIngestsourcesProcessing']:
        """
        Processing stage
        """
        return pulumi.get(self, "processing")

    @_builtins.property
    @pulumi.getter(name="staticRouting")
    def static_routing(self) -> pulumi.Output[Optional['outputs.OpenpipelineV2SystemEventsIngestsourcesStaticRouting']]:
        """
        Static routing of endpoint
        """
        return pulumi.get(self, "static_routing")

