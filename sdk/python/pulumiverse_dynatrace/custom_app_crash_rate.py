# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CustomAppCrashRateArgs', 'CustomAppCrashRate']

@pulumi.input_type
class CustomAppCrashRateArgs:
    def __init__(__self__, *,
                 crash_rate_increase: pulumi.Input['CustomAppCrashRateCrashRateIncreaseArgs'],
                 scope: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a CustomAppCrashRate resource.
        :param pulumi.Input['CustomAppCrashRateCrashRateIncreaseArgs'] crash_rate_increase: Crash rate increase
        :param pulumi.Input[str] scope: The scope of this setting (CUSTOM_APPLICATION environment)
        """
        pulumi.set(__self__, "crash_rate_increase", crash_rate_increase)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter(name="crashRateIncrease")
    def crash_rate_increase(self) -> pulumi.Input['CustomAppCrashRateCrashRateIncreaseArgs']:
        """
        Crash rate increase
        """
        return pulumi.get(self, "crash_rate_increase")

    @crash_rate_increase.setter
    def crash_rate_increase(self, value: pulumi.Input['CustomAppCrashRateCrashRateIncreaseArgs']):
        pulumi.set(self, "crash_rate_increase", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        The scope of this setting (CUSTOM_APPLICATION environment)
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)


@pulumi.input_type
class _CustomAppCrashRateState:
    def __init__(__self__, *,
                 crash_rate_increase: Optional[pulumi.Input['CustomAppCrashRateCrashRateIncreaseArgs']] = None,
                 scope: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CustomAppCrashRate resources.
        :param pulumi.Input['CustomAppCrashRateCrashRateIncreaseArgs'] crash_rate_increase: Crash rate increase
        :param pulumi.Input[str] scope: The scope of this setting (CUSTOM_APPLICATION environment)
        """
        if crash_rate_increase is not None:
            pulumi.set(__self__, "crash_rate_increase", crash_rate_increase)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter(name="crashRateIncrease")
    def crash_rate_increase(self) -> Optional[pulumi.Input['CustomAppCrashRateCrashRateIncreaseArgs']]:
        """
        Crash rate increase
        """
        return pulumi.get(self, "crash_rate_increase")

    @crash_rate_increase.setter
    def crash_rate_increase(self, value: Optional[pulumi.Input['CustomAppCrashRateCrashRateIncreaseArgs']]):
        pulumi.set(self, "crash_rate_increase", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        The scope of this setting (CUSTOM_APPLICATION environment)
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)


class CustomAppCrashRate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 crash_rate_increase: Optional[pulumi.Input[Union['CustomAppCrashRateCrashRateIncreaseArgs', 'CustomAppCrashRateCrashRateIncreaseArgsDict']]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a CustomAppCrashRate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['CustomAppCrashRateCrashRateIncreaseArgs', 'CustomAppCrashRateCrashRateIncreaseArgsDict']] crash_rate_increase: Crash rate increase
        :param pulumi.Input[str] scope: The scope of this setting (CUSTOM_APPLICATION environment)
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CustomAppCrashRateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CustomAppCrashRate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CustomAppCrashRateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CustomAppCrashRateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 crash_rate_increase: Optional[pulumi.Input[Union['CustomAppCrashRateCrashRateIncreaseArgs', 'CustomAppCrashRateCrashRateIncreaseArgsDict']]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CustomAppCrashRateArgs.__new__(CustomAppCrashRateArgs)

            if crash_rate_increase is None and not opts.urn:
                raise TypeError("Missing required property 'crash_rate_increase'")
            __props__.__dict__["crash_rate_increase"] = crash_rate_increase
            __props__.__dict__["scope"] = scope
        super(CustomAppCrashRate, __self__).__init__(
            'dynatrace:index/customAppCrashRate:CustomAppCrashRate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            crash_rate_increase: Optional[pulumi.Input[Union['CustomAppCrashRateCrashRateIncreaseArgs', 'CustomAppCrashRateCrashRateIncreaseArgsDict']]] = None,
            scope: Optional[pulumi.Input[str]] = None) -> 'CustomAppCrashRate':
        """
        Get an existing CustomAppCrashRate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['CustomAppCrashRateCrashRateIncreaseArgs', 'CustomAppCrashRateCrashRateIncreaseArgsDict']] crash_rate_increase: Crash rate increase
        :param pulumi.Input[str] scope: The scope of this setting (CUSTOM_APPLICATION environment)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CustomAppCrashRateState.__new__(_CustomAppCrashRateState)

        __props__.__dict__["crash_rate_increase"] = crash_rate_increase
        __props__.__dict__["scope"] = scope
        return CustomAppCrashRate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="crashRateIncrease")
    def crash_rate_increase(self) -> pulumi.Output['outputs.CustomAppCrashRateCrashRateIncrease']:
        """
        Crash rate increase
        """
        return pulumi.get(self, "crash_rate_increase")

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Output[Optional[str]]:
        """
        The scope of this setting (CUSTOM_APPLICATION environment)
        """
        return pulumi.get(self, "scope")

