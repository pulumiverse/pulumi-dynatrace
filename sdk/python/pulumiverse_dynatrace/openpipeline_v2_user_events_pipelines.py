# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['OpenpipelineV2UserEventsPipelinesArgs', 'OpenpipelineV2UserEventsPipelines']

@pulumi.input_type
class OpenpipelineV2UserEventsPipelinesArgs:
    def __init__(__self__, *,
                 cost_allocation: pulumi.Input['OpenpipelineV2UserEventsPipelinesCostAllocationArgs'],
                 custom_id: pulumi.Input[_builtins.str],
                 data_extraction: pulumi.Input['OpenpipelineV2UserEventsPipelinesDataExtractionArgs'],
                 davis: pulumi.Input['OpenpipelineV2UserEventsPipelinesDavisArgs'],
                 display_name: pulumi.Input[_builtins.str],
                 metric_extraction: pulumi.Input['OpenpipelineV2UserEventsPipelinesMetricExtractionArgs'],
                 processing: pulumi.Input['OpenpipelineV2UserEventsPipelinesProcessingArgs'],
                 product_allocation: pulumi.Input['OpenpipelineV2UserEventsPipelinesProductAllocationArgs'],
                 security_context: pulumi.Input['OpenpipelineV2UserEventsPipelinesSecurityContextArgs'],
                 storage: pulumi.Input['OpenpipelineV2UserEventsPipelinesStorageArgs']):
        """
        The set of arguments for constructing a OpenpipelineV2UserEventsPipelines resource.
        :param pulumi.Input['OpenpipelineV2UserEventsPipelinesCostAllocationArgs'] cost_allocation: Cost allocation stage
        :param pulumi.Input[_builtins.str] custom_id: Custom pipeline id
        :param pulumi.Input['OpenpipelineV2UserEventsPipelinesDataExtractionArgs'] data_extraction: Data extraction stage
        :param pulumi.Input['OpenpipelineV2UserEventsPipelinesDavisArgs'] davis: Davis event extraction stage
        :param pulumi.Input[_builtins.str] display_name: Display name
        :param pulumi.Input['OpenpipelineV2UserEventsPipelinesMetricExtractionArgs'] metric_extraction: Metrics extraction stage
        :param pulumi.Input['OpenpipelineV2UserEventsPipelinesProcessingArgs'] processing: Processing stage
        :param pulumi.Input['OpenpipelineV2UserEventsPipelinesProductAllocationArgs'] product_allocation: Product allocation stage
        :param pulumi.Input['OpenpipelineV2UserEventsPipelinesSecurityContextArgs'] security_context: Security context stage
        :param pulumi.Input['OpenpipelineV2UserEventsPipelinesStorageArgs'] storage: Storage stage
        """
        pulumi.set(__self__, "cost_allocation", cost_allocation)
        pulumi.set(__self__, "custom_id", custom_id)
        pulumi.set(__self__, "data_extraction", data_extraction)
        pulumi.set(__self__, "davis", davis)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "metric_extraction", metric_extraction)
        pulumi.set(__self__, "processing", processing)
        pulumi.set(__self__, "product_allocation", product_allocation)
        pulumi.set(__self__, "security_context", security_context)
        pulumi.set(__self__, "storage", storage)

    @_builtins.property
    @pulumi.getter(name="costAllocation")
    def cost_allocation(self) -> pulumi.Input['OpenpipelineV2UserEventsPipelinesCostAllocationArgs']:
        """
        Cost allocation stage
        """
        return pulumi.get(self, "cost_allocation")

    @cost_allocation.setter
    def cost_allocation(self, value: pulumi.Input['OpenpipelineV2UserEventsPipelinesCostAllocationArgs']):
        pulumi.set(self, "cost_allocation", value)

    @_builtins.property
    @pulumi.getter(name="customId")
    def custom_id(self) -> pulumi.Input[_builtins.str]:
        """
        Custom pipeline id
        """
        return pulumi.get(self, "custom_id")

    @custom_id.setter
    def custom_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "custom_id", value)

    @_builtins.property
    @pulumi.getter(name="dataExtraction")
    def data_extraction(self) -> pulumi.Input['OpenpipelineV2UserEventsPipelinesDataExtractionArgs']:
        """
        Data extraction stage
        """
        return pulumi.get(self, "data_extraction")

    @data_extraction.setter
    def data_extraction(self, value: pulumi.Input['OpenpipelineV2UserEventsPipelinesDataExtractionArgs']):
        pulumi.set(self, "data_extraction", value)

    @_builtins.property
    @pulumi.getter
    def davis(self) -> pulumi.Input['OpenpipelineV2UserEventsPipelinesDavisArgs']:
        """
        Davis event extraction stage
        """
        return pulumi.get(self, "davis")

    @davis.setter
    def davis(self, value: pulumi.Input['OpenpipelineV2UserEventsPipelinesDavisArgs']):
        pulumi.set(self, "davis", value)

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[_builtins.str]:
        """
        Display name
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "display_name", value)

    @_builtins.property
    @pulumi.getter(name="metricExtraction")
    def metric_extraction(self) -> pulumi.Input['OpenpipelineV2UserEventsPipelinesMetricExtractionArgs']:
        """
        Metrics extraction stage
        """
        return pulumi.get(self, "metric_extraction")

    @metric_extraction.setter
    def metric_extraction(self, value: pulumi.Input['OpenpipelineV2UserEventsPipelinesMetricExtractionArgs']):
        pulumi.set(self, "metric_extraction", value)

    @_builtins.property
    @pulumi.getter
    def processing(self) -> pulumi.Input['OpenpipelineV2UserEventsPipelinesProcessingArgs']:
        """
        Processing stage
        """
        return pulumi.get(self, "processing")

    @processing.setter
    def processing(self, value: pulumi.Input['OpenpipelineV2UserEventsPipelinesProcessingArgs']):
        pulumi.set(self, "processing", value)

    @_builtins.property
    @pulumi.getter(name="productAllocation")
    def product_allocation(self) -> pulumi.Input['OpenpipelineV2UserEventsPipelinesProductAllocationArgs']:
        """
        Product allocation stage
        """
        return pulumi.get(self, "product_allocation")

    @product_allocation.setter
    def product_allocation(self, value: pulumi.Input['OpenpipelineV2UserEventsPipelinesProductAllocationArgs']):
        pulumi.set(self, "product_allocation", value)

    @_builtins.property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> pulumi.Input['OpenpipelineV2UserEventsPipelinesSecurityContextArgs']:
        """
        Security context stage
        """
        return pulumi.get(self, "security_context")

    @security_context.setter
    def security_context(self, value: pulumi.Input['OpenpipelineV2UserEventsPipelinesSecurityContextArgs']):
        pulumi.set(self, "security_context", value)

    @_builtins.property
    @pulumi.getter
    def storage(self) -> pulumi.Input['OpenpipelineV2UserEventsPipelinesStorageArgs']:
        """
        Storage stage
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: pulumi.Input['OpenpipelineV2UserEventsPipelinesStorageArgs']):
        pulumi.set(self, "storage", value)


@pulumi.input_type
class _OpenpipelineV2UserEventsPipelinesState:
    def __init__(__self__, *,
                 cost_allocation: Optional[pulumi.Input['OpenpipelineV2UserEventsPipelinesCostAllocationArgs']] = None,
                 custom_id: Optional[pulumi.Input[_builtins.str]] = None,
                 data_extraction: Optional[pulumi.Input['OpenpipelineV2UserEventsPipelinesDataExtractionArgs']] = None,
                 davis: Optional[pulumi.Input['OpenpipelineV2UserEventsPipelinesDavisArgs']] = None,
                 display_name: Optional[pulumi.Input[_builtins.str]] = None,
                 metric_extraction: Optional[pulumi.Input['OpenpipelineV2UserEventsPipelinesMetricExtractionArgs']] = None,
                 processing: Optional[pulumi.Input['OpenpipelineV2UserEventsPipelinesProcessingArgs']] = None,
                 product_allocation: Optional[pulumi.Input['OpenpipelineV2UserEventsPipelinesProductAllocationArgs']] = None,
                 security_context: Optional[pulumi.Input['OpenpipelineV2UserEventsPipelinesSecurityContextArgs']] = None,
                 storage: Optional[pulumi.Input['OpenpipelineV2UserEventsPipelinesStorageArgs']] = None):
        """
        Input properties used for looking up and filtering OpenpipelineV2UserEventsPipelines resources.
        :param pulumi.Input['OpenpipelineV2UserEventsPipelinesCostAllocationArgs'] cost_allocation: Cost allocation stage
        :param pulumi.Input[_builtins.str] custom_id: Custom pipeline id
        :param pulumi.Input['OpenpipelineV2UserEventsPipelinesDataExtractionArgs'] data_extraction: Data extraction stage
        :param pulumi.Input['OpenpipelineV2UserEventsPipelinesDavisArgs'] davis: Davis event extraction stage
        :param pulumi.Input[_builtins.str] display_name: Display name
        :param pulumi.Input['OpenpipelineV2UserEventsPipelinesMetricExtractionArgs'] metric_extraction: Metrics extraction stage
        :param pulumi.Input['OpenpipelineV2UserEventsPipelinesProcessingArgs'] processing: Processing stage
        :param pulumi.Input['OpenpipelineV2UserEventsPipelinesProductAllocationArgs'] product_allocation: Product allocation stage
        :param pulumi.Input['OpenpipelineV2UserEventsPipelinesSecurityContextArgs'] security_context: Security context stage
        :param pulumi.Input['OpenpipelineV2UserEventsPipelinesStorageArgs'] storage: Storage stage
        """
        if cost_allocation is not None:
            pulumi.set(__self__, "cost_allocation", cost_allocation)
        if custom_id is not None:
            pulumi.set(__self__, "custom_id", custom_id)
        if data_extraction is not None:
            pulumi.set(__self__, "data_extraction", data_extraction)
        if davis is not None:
            pulumi.set(__self__, "davis", davis)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if metric_extraction is not None:
            pulumi.set(__self__, "metric_extraction", metric_extraction)
        if processing is not None:
            pulumi.set(__self__, "processing", processing)
        if product_allocation is not None:
            pulumi.set(__self__, "product_allocation", product_allocation)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @_builtins.property
    @pulumi.getter(name="costAllocation")
    def cost_allocation(self) -> Optional[pulumi.Input['OpenpipelineV2UserEventsPipelinesCostAllocationArgs']]:
        """
        Cost allocation stage
        """
        return pulumi.get(self, "cost_allocation")

    @cost_allocation.setter
    def cost_allocation(self, value: Optional[pulumi.Input['OpenpipelineV2UserEventsPipelinesCostAllocationArgs']]):
        pulumi.set(self, "cost_allocation", value)

    @_builtins.property
    @pulumi.getter(name="customId")
    def custom_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Custom pipeline id
        """
        return pulumi.get(self, "custom_id")

    @custom_id.setter
    def custom_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "custom_id", value)

    @_builtins.property
    @pulumi.getter(name="dataExtraction")
    def data_extraction(self) -> Optional[pulumi.Input['OpenpipelineV2UserEventsPipelinesDataExtractionArgs']]:
        """
        Data extraction stage
        """
        return pulumi.get(self, "data_extraction")

    @data_extraction.setter
    def data_extraction(self, value: Optional[pulumi.Input['OpenpipelineV2UserEventsPipelinesDataExtractionArgs']]):
        pulumi.set(self, "data_extraction", value)

    @_builtins.property
    @pulumi.getter
    def davis(self) -> Optional[pulumi.Input['OpenpipelineV2UserEventsPipelinesDavisArgs']]:
        """
        Davis event extraction stage
        """
        return pulumi.get(self, "davis")

    @davis.setter
    def davis(self, value: Optional[pulumi.Input['OpenpipelineV2UserEventsPipelinesDavisArgs']]):
        pulumi.set(self, "davis", value)

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Display name
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "display_name", value)

    @_builtins.property
    @pulumi.getter(name="metricExtraction")
    def metric_extraction(self) -> Optional[pulumi.Input['OpenpipelineV2UserEventsPipelinesMetricExtractionArgs']]:
        """
        Metrics extraction stage
        """
        return pulumi.get(self, "metric_extraction")

    @metric_extraction.setter
    def metric_extraction(self, value: Optional[pulumi.Input['OpenpipelineV2UserEventsPipelinesMetricExtractionArgs']]):
        pulumi.set(self, "metric_extraction", value)

    @_builtins.property
    @pulumi.getter
    def processing(self) -> Optional[pulumi.Input['OpenpipelineV2UserEventsPipelinesProcessingArgs']]:
        """
        Processing stage
        """
        return pulumi.get(self, "processing")

    @processing.setter
    def processing(self, value: Optional[pulumi.Input['OpenpipelineV2UserEventsPipelinesProcessingArgs']]):
        pulumi.set(self, "processing", value)

    @_builtins.property
    @pulumi.getter(name="productAllocation")
    def product_allocation(self) -> Optional[pulumi.Input['OpenpipelineV2UserEventsPipelinesProductAllocationArgs']]:
        """
        Product allocation stage
        """
        return pulumi.get(self, "product_allocation")

    @product_allocation.setter
    def product_allocation(self, value: Optional[pulumi.Input['OpenpipelineV2UserEventsPipelinesProductAllocationArgs']]):
        pulumi.set(self, "product_allocation", value)

    @_builtins.property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional[pulumi.Input['OpenpipelineV2UserEventsPipelinesSecurityContextArgs']]:
        """
        Security context stage
        """
        return pulumi.get(self, "security_context")

    @security_context.setter
    def security_context(self, value: Optional[pulumi.Input['OpenpipelineV2UserEventsPipelinesSecurityContextArgs']]):
        pulumi.set(self, "security_context", value)

    @_builtins.property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input['OpenpipelineV2UserEventsPipelinesStorageArgs']]:
        """
        Storage stage
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input['OpenpipelineV2UserEventsPipelinesStorageArgs']]):
        pulumi.set(self, "storage", value)


@pulumi.type_token("dynatrace:index/openpipelineV2UserEventsPipelines:OpenpipelineV2UserEventsPipelines")
class OpenpipelineV2UserEventsPipelines(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cost_allocation: Optional[pulumi.Input[Union['OpenpipelineV2UserEventsPipelinesCostAllocationArgs', 'OpenpipelineV2UserEventsPipelinesCostAllocationArgsDict']]] = None,
                 custom_id: Optional[pulumi.Input[_builtins.str]] = None,
                 data_extraction: Optional[pulumi.Input[Union['OpenpipelineV2UserEventsPipelinesDataExtractionArgs', 'OpenpipelineV2UserEventsPipelinesDataExtractionArgsDict']]] = None,
                 davis: Optional[pulumi.Input[Union['OpenpipelineV2UserEventsPipelinesDavisArgs', 'OpenpipelineV2UserEventsPipelinesDavisArgsDict']]] = None,
                 display_name: Optional[pulumi.Input[_builtins.str]] = None,
                 metric_extraction: Optional[pulumi.Input[Union['OpenpipelineV2UserEventsPipelinesMetricExtractionArgs', 'OpenpipelineV2UserEventsPipelinesMetricExtractionArgsDict']]] = None,
                 processing: Optional[pulumi.Input[Union['OpenpipelineV2UserEventsPipelinesProcessingArgs', 'OpenpipelineV2UserEventsPipelinesProcessingArgsDict']]] = None,
                 product_allocation: Optional[pulumi.Input[Union['OpenpipelineV2UserEventsPipelinesProductAllocationArgs', 'OpenpipelineV2UserEventsPipelinesProductAllocationArgsDict']]] = None,
                 security_context: Optional[pulumi.Input[Union['OpenpipelineV2UserEventsPipelinesSecurityContextArgs', 'OpenpipelineV2UserEventsPipelinesSecurityContextArgsDict']]] = None,
                 storage: Optional[pulumi.Input[Union['OpenpipelineV2UserEventsPipelinesStorageArgs', 'OpenpipelineV2UserEventsPipelinesStorageArgsDict']]] = None,
                 __props__=None):
        """
        Create a OpenpipelineV2UserEventsPipelines resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['OpenpipelineV2UserEventsPipelinesCostAllocationArgs', 'OpenpipelineV2UserEventsPipelinesCostAllocationArgsDict']] cost_allocation: Cost allocation stage
        :param pulumi.Input[_builtins.str] custom_id: Custom pipeline id
        :param pulumi.Input[Union['OpenpipelineV2UserEventsPipelinesDataExtractionArgs', 'OpenpipelineV2UserEventsPipelinesDataExtractionArgsDict']] data_extraction: Data extraction stage
        :param pulumi.Input[Union['OpenpipelineV2UserEventsPipelinesDavisArgs', 'OpenpipelineV2UserEventsPipelinesDavisArgsDict']] davis: Davis event extraction stage
        :param pulumi.Input[_builtins.str] display_name: Display name
        :param pulumi.Input[Union['OpenpipelineV2UserEventsPipelinesMetricExtractionArgs', 'OpenpipelineV2UserEventsPipelinesMetricExtractionArgsDict']] metric_extraction: Metrics extraction stage
        :param pulumi.Input[Union['OpenpipelineV2UserEventsPipelinesProcessingArgs', 'OpenpipelineV2UserEventsPipelinesProcessingArgsDict']] processing: Processing stage
        :param pulumi.Input[Union['OpenpipelineV2UserEventsPipelinesProductAllocationArgs', 'OpenpipelineV2UserEventsPipelinesProductAllocationArgsDict']] product_allocation: Product allocation stage
        :param pulumi.Input[Union['OpenpipelineV2UserEventsPipelinesSecurityContextArgs', 'OpenpipelineV2UserEventsPipelinesSecurityContextArgsDict']] security_context: Security context stage
        :param pulumi.Input[Union['OpenpipelineV2UserEventsPipelinesStorageArgs', 'OpenpipelineV2UserEventsPipelinesStorageArgsDict']] storage: Storage stage
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OpenpipelineV2UserEventsPipelinesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a OpenpipelineV2UserEventsPipelines resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param OpenpipelineV2UserEventsPipelinesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OpenpipelineV2UserEventsPipelinesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cost_allocation: Optional[pulumi.Input[Union['OpenpipelineV2UserEventsPipelinesCostAllocationArgs', 'OpenpipelineV2UserEventsPipelinesCostAllocationArgsDict']]] = None,
                 custom_id: Optional[pulumi.Input[_builtins.str]] = None,
                 data_extraction: Optional[pulumi.Input[Union['OpenpipelineV2UserEventsPipelinesDataExtractionArgs', 'OpenpipelineV2UserEventsPipelinesDataExtractionArgsDict']]] = None,
                 davis: Optional[pulumi.Input[Union['OpenpipelineV2UserEventsPipelinesDavisArgs', 'OpenpipelineV2UserEventsPipelinesDavisArgsDict']]] = None,
                 display_name: Optional[pulumi.Input[_builtins.str]] = None,
                 metric_extraction: Optional[pulumi.Input[Union['OpenpipelineV2UserEventsPipelinesMetricExtractionArgs', 'OpenpipelineV2UserEventsPipelinesMetricExtractionArgsDict']]] = None,
                 processing: Optional[pulumi.Input[Union['OpenpipelineV2UserEventsPipelinesProcessingArgs', 'OpenpipelineV2UserEventsPipelinesProcessingArgsDict']]] = None,
                 product_allocation: Optional[pulumi.Input[Union['OpenpipelineV2UserEventsPipelinesProductAllocationArgs', 'OpenpipelineV2UserEventsPipelinesProductAllocationArgsDict']]] = None,
                 security_context: Optional[pulumi.Input[Union['OpenpipelineV2UserEventsPipelinesSecurityContextArgs', 'OpenpipelineV2UserEventsPipelinesSecurityContextArgsDict']]] = None,
                 storage: Optional[pulumi.Input[Union['OpenpipelineV2UserEventsPipelinesStorageArgs', 'OpenpipelineV2UserEventsPipelinesStorageArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OpenpipelineV2UserEventsPipelinesArgs.__new__(OpenpipelineV2UserEventsPipelinesArgs)

            if cost_allocation is None and not opts.urn:
                raise TypeError("Missing required property 'cost_allocation'")
            __props__.__dict__["cost_allocation"] = cost_allocation
            if custom_id is None and not opts.urn:
                raise TypeError("Missing required property 'custom_id'")
            __props__.__dict__["custom_id"] = custom_id
            if data_extraction is None and not opts.urn:
                raise TypeError("Missing required property 'data_extraction'")
            __props__.__dict__["data_extraction"] = data_extraction
            if davis is None and not opts.urn:
                raise TypeError("Missing required property 'davis'")
            __props__.__dict__["davis"] = davis
            if display_name is None and not opts.urn:
                raise TypeError("Missing required property 'display_name'")
            __props__.__dict__["display_name"] = display_name
            if metric_extraction is None and not opts.urn:
                raise TypeError("Missing required property 'metric_extraction'")
            __props__.__dict__["metric_extraction"] = metric_extraction
            if processing is None and not opts.urn:
                raise TypeError("Missing required property 'processing'")
            __props__.__dict__["processing"] = processing
            if product_allocation is None and not opts.urn:
                raise TypeError("Missing required property 'product_allocation'")
            __props__.__dict__["product_allocation"] = product_allocation
            if security_context is None and not opts.urn:
                raise TypeError("Missing required property 'security_context'")
            __props__.__dict__["security_context"] = security_context
            if storage is None and not opts.urn:
                raise TypeError("Missing required property 'storage'")
            __props__.__dict__["storage"] = storage
        super(OpenpipelineV2UserEventsPipelines, __self__).__init__(
            'dynatrace:index/openpipelineV2UserEventsPipelines:OpenpipelineV2UserEventsPipelines',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cost_allocation: Optional[pulumi.Input[Union['OpenpipelineV2UserEventsPipelinesCostAllocationArgs', 'OpenpipelineV2UserEventsPipelinesCostAllocationArgsDict']]] = None,
            custom_id: Optional[pulumi.Input[_builtins.str]] = None,
            data_extraction: Optional[pulumi.Input[Union['OpenpipelineV2UserEventsPipelinesDataExtractionArgs', 'OpenpipelineV2UserEventsPipelinesDataExtractionArgsDict']]] = None,
            davis: Optional[pulumi.Input[Union['OpenpipelineV2UserEventsPipelinesDavisArgs', 'OpenpipelineV2UserEventsPipelinesDavisArgsDict']]] = None,
            display_name: Optional[pulumi.Input[_builtins.str]] = None,
            metric_extraction: Optional[pulumi.Input[Union['OpenpipelineV2UserEventsPipelinesMetricExtractionArgs', 'OpenpipelineV2UserEventsPipelinesMetricExtractionArgsDict']]] = None,
            processing: Optional[pulumi.Input[Union['OpenpipelineV2UserEventsPipelinesProcessingArgs', 'OpenpipelineV2UserEventsPipelinesProcessingArgsDict']]] = None,
            product_allocation: Optional[pulumi.Input[Union['OpenpipelineV2UserEventsPipelinesProductAllocationArgs', 'OpenpipelineV2UserEventsPipelinesProductAllocationArgsDict']]] = None,
            security_context: Optional[pulumi.Input[Union['OpenpipelineV2UserEventsPipelinesSecurityContextArgs', 'OpenpipelineV2UserEventsPipelinesSecurityContextArgsDict']]] = None,
            storage: Optional[pulumi.Input[Union['OpenpipelineV2UserEventsPipelinesStorageArgs', 'OpenpipelineV2UserEventsPipelinesStorageArgsDict']]] = None) -> 'OpenpipelineV2UserEventsPipelines':
        """
        Get an existing OpenpipelineV2UserEventsPipelines resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['OpenpipelineV2UserEventsPipelinesCostAllocationArgs', 'OpenpipelineV2UserEventsPipelinesCostAllocationArgsDict']] cost_allocation: Cost allocation stage
        :param pulumi.Input[_builtins.str] custom_id: Custom pipeline id
        :param pulumi.Input[Union['OpenpipelineV2UserEventsPipelinesDataExtractionArgs', 'OpenpipelineV2UserEventsPipelinesDataExtractionArgsDict']] data_extraction: Data extraction stage
        :param pulumi.Input[Union['OpenpipelineV2UserEventsPipelinesDavisArgs', 'OpenpipelineV2UserEventsPipelinesDavisArgsDict']] davis: Davis event extraction stage
        :param pulumi.Input[_builtins.str] display_name: Display name
        :param pulumi.Input[Union['OpenpipelineV2UserEventsPipelinesMetricExtractionArgs', 'OpenpipelineV2UserEventsPipelinesMetricExtractionArgsDict']] metric_extraction: Metrics extraction stage
        :param pulumi.Input[Union['OpenpipelineV2UserEventsPipelinesProcessingArgs', 'OpenpipelineV2UserEventsPipelinesProcessingArgsDict']] processing: Processing stage
        :param pulumi.Input[Union['OpenpipelineV2UserEventsPipelinesProductAllocationArgs', 'OpenpipelineV2UserEventsPipelinesProductAllocationArgsDict']] product_allocation: Product allocation stage
        :param pulumi.Input[Union['OpenpipelineV2UserEventsPipelinesSecurityContextArgs', 'OpenpipelineV2UserEventsPipelinesSecurityContextArgsDict']] security_context: Security context stage
        :param pulumi.Input[Union['OpenpipelineV2UserEventsPipelinesStorageArgs', 'OpenpipelineV2UserEventsPipelinesStorageArgsDict']] storage: Storage stage
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OpenpipelineV2UserEventsPipelinesState.__new__(_OpenpipelineV2UserEventsPipelinesState)

        __props__.__dict__["cost_allocation"] = cost_allocation
        __props__.__dict__["custom_id"] = custom_id
        __props__.__dict__["data_extraction"] = data_extraction
        __props__.__dict__["davis"] = davis
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["metric_extraction"] = metric_extraction
        __props__.__dict__["processing"] = processing
        __props__.__dict__["product_allocation"] = product_allocation
        __props__.__dict__["security_context"] = security_context
        __props__.__dict__["storage"] = storage
        return OpenpipelineV2UserEventsPipelines(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="costAllocation")
    def cost_allocation(self) -> pulumi.Output['outputs.OpenpipelineV2UserEventsPipelinesCostAllocation']:
        """
        Cost allocation stage
        """
        return pulumi.get(self, "cost_allocation")

    @_builtins.property
    @pulumi.getter(name="customId")
    def custom_id(self) -> pulumi.Output[_builtins.str]:
        """
        Custom pipeline id
        """
        return pulumi.get(self, "custom_id")

    @_builtins.property
    @pulumi.getter(name="dataExtraction")
    def data_extraction(self) -> pulumi.Output['outputs.OpenpipelineV2UserEventsPipelinesDataExtraction']:
        """
        Data extraction stage
        """
        return pulumi.get(self, "data_extraction")

    @_builtins.property
    @pulumi.getter
    def davis(self) -> pulumi.Output['outputs.OpenpipelineV2UserEventsPipelinesDavis']:
        """
        Davis event extraction stage
        """
        return pulumi.get(self, "davis")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[_builtins.str]:
        """
        Display name
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="metricExtraction")
    def metric_extraction(self) -> pulumi.Output['outputs.OpenpipelineV2UserEventsPipelinesMetricExtraction']:
        """
        Metrics extraction stage
        """
        return pulumi.get(self, "metric_extraction")

    @_builtins.property
    @pulumi.getter
    def processing(self) -> pulumi.Output['outputs.OpenpipelineV2UserEventsPipelinesProcessing']:
        """
        Processing stage
        """
        return pulumi.get(self, "processing")

    @_builtins.property
    @pulumi.getter(name="productAllocation")
    def product_allocation(self) -> pulumi.Output['outputs.OpenpipelineV2UserEventsPipelinesProductAllocation']:
        """
        Product allocation stage
        """
        return pulumi.get(self, "product_allocation")

    @_builtins.property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> pulumi.Output['outputs.OpenpipelineV2UserEventsPipelinesSecurityContext']:
        """
        Security context stage
        """
        return pulumi.get(self, "security_context")

    @_builtins.property
    @pulumi.getter
    def storage(self) -> pulumi.Output['outputs.OpenpipelineV2UserEventsPipelinesStorage']:
        """
        Storage stage
        """
        return pulumi.get(self, "storage")

