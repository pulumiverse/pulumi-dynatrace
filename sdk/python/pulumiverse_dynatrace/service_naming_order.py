# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ServiceNamingOrderArgs', 'ServiceNamingOrder']

@pulumi.input_type
class ServiceNamingOrderArgs:
    def __init__(__self__, *,
                 naming_rule_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        The set of arguments for constructing a ServiceNamingOrder resource.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] naming_rule_ids: The IDs of the naming rules to define the order for
        """
        if naming_rule_ids is not None:
            pulumi.set(__self__, "naming_rule_ids", naming_rule_ids)

    @property
    @pulumi.getter(name="namingRuleIds")
    def naming_rule_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The IDs of the naming rules to define the order for
        """
        return pulumi.get(self, "naming_rule_ids")

    @naming_rule_ids.setter
    def naming_rule_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "naming_rule_ids", value)


@pulumi.input_type
class _ServiceNamingOrderState:
    def __init__(__self__, *,
                 naming_rule_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering ServiceNamingOrder resources.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] naming_rule_ids: The IDs of the naming rules to define the order for
        """
        if naming_rule_ids is not None:
            pulumi.set(__self__, "naming_rule_ids", naming_rule_ids)

    @property
    @pulumi.getter(name="namingRuleIds")
    def naming_rule_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The IDs of the naming rules to define the order for
        """
        return pulumi.get(self, "naming_rule_ids")

    @naming_rule_ids.setter
    def naming_rule_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "naming_rule_ids", value)


class ServiceNamingOrder(pulumi.CustomResource):

    pulumi_type = "dynatrace:index/serviceNamingOrder:ServiceNamingOrder"

    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 naming_rule_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        """
        Create a ServiceNamingOrder resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] naming_rule_ids: The IDs of the naming rules to define the order for
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ServiceNamingOrderArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ServiceNamingOrder resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ServiceNamingOrderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServiceNamingOrderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 naming_rule_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServiceNamingOrderArgs.__new__(ServiceNamingOrderArgs)

            __props__.__dict__["naming_rule_ids"] = naming_rule_ids
        super(ServiceNamingOrder, __self__).__init__(
            'dynatrace:index/serviceNamingOrder:ServiceNamingOrder',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            naming_rule_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None) -> 'ServiceNamingOrder':
        """
        Get an existing ServiceNamingOrder resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] naming_rule_ids: The IDs of the naming rules to define the order for
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ServiceNamingOrderState.__new__(_ServiceNamingOrderState)

        __props__.__dict__["naming_rule_ids"] = naming_rule_ids
        return ServiceNamingOrder(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="namingRuleIds")
    def naming_rule_ids(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        """
        The IDs of the naming rules to define the order for
        """
        return pulumi.get(self, "naming_rule_ids")

