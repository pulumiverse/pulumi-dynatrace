# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetGenericSettingResult',
    'AwaitableGetGenericSettingResult',
    'get_generic_setting',
    'get_generic_setting_output',
]

@pulumi.output_type
class GetGenericSettingResult:
    """
    A collection of values returned by getGenericSetting.
    """
    def __init__(__self__, filter=None, id=None, schema=None, scope=None, value=None):
        if filter and not isinstance(filter, str):
            raise TypeError("Expected argument 'filter' to be a str")
        pulumi.set(__self__, "filter", filter)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if schema and not isinstance(schema, str):
            raise TypeError("Expected argument 'schema' to be a str")
        pulumi.set(__self__, "schema", schema)
        if scope and not isinstance(scope, str):
            raise TypeError("Expected argument 'scope' to be a str")
        pulumi.set(__self__, "scope", scope)
        if value and not isinstance(value, str):
            raise TypeError("Expected argument 'value' to be a str")
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def filter(self) -> Optional[_builtins.str]:
        """
        Filter of the requested objects
        """
        return pulumi.get(self, "filter")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def schema(self) -> _builtins.str:
        """
        Schema IDs to which the requested objects belong
        """
        return pulumi.get(self, "schema")

    @_builtins.property
    @pulumi.getter
    def scope(self) -> _builtins.str:
        """
        Scope that the requested objects target
        """
        return pulumi.get(self, "scope")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


class AwaitableGetGenericSettingResult(GetGenericSettingResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGenericSettingResult(
            filter=self.filter,
            id=self.id,
            schema=self.schema,
            scope=self.scope,
            value=self.value)


def get_generic_setting(filter: Optional[_builtins.str] = None,
                        schema: Optional[_builtins.str] = None,
                        scope: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGenericSettingResult:
    """
    The generic setting data source allows a single Settings 2.0 object to be retrieved by its schema ID, scope, and/or filter.

    If multiple objects match the given criteria, the first result will be retrieved.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_dynatrace as dynatrace

    example = dynatrace.get_generic_setting(schema="builtin:alerting.maintenance-window",
        filter="value.generalProperties.name = 'Terraform Example'")
    pulumi.export("genericSetting", example)
    ```


    :param _builtins.str filter: Filter of the requested objects
    :param _builtins.str schema: Schema IDs to which the requested objects belong
    :param _builtins.str scope: Scope that the requested objects target
    """
    __args__ = dict()
    __args__['filter'] = filter
    __args__['schema'] = schema
    __args__['scope'] = scope
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('dynatrace:index/getGenericSetting:getGenericSetting', __args__, opts=opts, typ=GetGenericSettingResult).value

    return AwaitableGetGenericSettingResult(
        filter=pulumi.get(__ret__, 'filter'),
        id=pulumi.get(__ret__, 'id'),
        schema=pulumi.get(__ret__, 'schema'),
        scope=pulumi.get(__ret__, 'scope'),
        value=pulumi.get(__ret__, 'value'))
def get_generic_setting_output(filter: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               schema: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               scope: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetGenericSettingResult]:
    """
    The generic setting data source allows a single Settings 2.0 object to be retrieved by its schema ID, scope, and/or filter.

    If multiple objects match the given criteria, the first result will be retrieved.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_dynatrace as dynatrace

    example = dynatrace.get_generic_setting(schema="builtin:alerting.maintenance-window",
        filter="value.generalProperties.name = 'Terraform Example'")
    pulumi.export("genericSetting", example)
    ```


    :param _builtins.str filter: Filter of the requested objects
    :param _builtins.str schema: Schema IDs to which the requested objects belong
    :param _builtins.str scope: Scope that the requested objects target
    """
    __args__ = dict()
    __args__['filter'] = filter
    __args__['schema'] = schema
    __args__['scope'] = scope
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('dynatrace:index/getGenericSetting:getGenericSetting', __args__, opts=opts, typ=GetGenericSettingResult)
    return __ret__.apply(lambda __response__: GetGenericSettingResult(
        filter=pulumi.get(__response__, 'filter'),
        id=pulumi.get(__response__, 'id'),
        schema=pulumi.get(__response__, 'schema'),
        scope=pulumi.get(__response__, 'scope'),
        value=pulumi.get(__response__, 'value')))
