# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['K8sNodeAnomaliesArgs', 'K8sNodeAnomalies']

@pulumi.input_type
class K8sNodeAnomaliesArgs:
    def __init__(__self__, *,
                 cpu_requests_saturation: pulumi.Input['K8sNodeAnomaliesCpuRequestsSaturationArgs'],
                 memory_requests_saturation: pulumi.Input['K8sNodeAnomaliesMemoryRequestsSaturationArgs'],
                 node_problematic_condition: pulumi.Input['K8sNodeAnomaliesNodeProblematicConditionArgs'],
                 pods_saturation: pulumi.Input['K8sNodeAnomaliesPodsSaturationArgs'],
                 readiness_issues: pulumi.Input['K8sNodeAnomaliesReadinessIssuesArgs'],
                 scope: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a K8sNodeAnomalies resource.
        :param pulumi.Input['K8sNodeAnomaliesCpuRequestsSaturationArgs'] cpu_requests_saturation: no documentation available
        :param pulumi.Input['K8sNodeAnomaliesMemoryRequestsSaturationArgs'] memory_requests_saturation: no documentation available
        :param pulumi.Input['K8sNodeAnomaliesNodeProblematicConditionArgs'] node_problematic_condition: no documentation available
        :param pulumi.Input['K8sNodeAnomaliesPodsSaturationArgs'] pods_saturation: no documentation available
        :param pulumi.Input['K8sNodeAnomaliesReadinessIssuesArgs'] readiness_issues: Alerts if node has not been available for a given amount of time
        :param pulumi.Input[str] scope: The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
        """
        pulumi.set(__self__, "cpu_requests_saturation", cpu_requests_saturation)
        pulumi.set(__self__, "memory_requests_saturation", memory_requests_saturation)
        pulumi.set(__self__, "node_problematic_condition", node_problematic_condition)
        pulumi.set(__self__, "pods_saturation", pods_saturation)
        pulumi.set(__self__, "readiness_issues", readiness_issues)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter(name="cpuRequestsSaturation")
    def cpu_requests_saturation(self) -> pulumi.Input['K8sNodeAnomaliesCpuRequestsSaturationArgs']:
        """
        no documentation available
        """
        return pulumi.get(self, "cpu_requests_saturation")

    @cpu_requests_saturation.setter
    def cpu_requests_saturation(self, value: pulumi.Input['K8sNodeAnomaliesCpuRequestsSaturationArgs']):
        pulumi.set(self, "cpu_requests_saturation", value)

    @property
    @pulumi.getter(name="memoryRequestsSaturation")
    def memory_requests_saturation(self) -> pulumi.Input['K8sNodeAnomaliesMemoryRequestsSaturationArgs']:
        """
        no documentation available
        """
        return pulumi.get(self, "memory_requests_saturation")

    @memory_requests_saturation.setter
    def memory_requests_saturation(self, value: pulumi.Input['K8sNodeAnomaliesMemoryRequestsSaturationArgs']):
        pulumi.set(self, "memory_requests_saturation", value)

    @property
    @pulumi.getter(name="nodeProblematicCondition")
    def node_problematic_condition(self) -> pulumi.Input['K8sNodeAnomaliesNodeProblematicConditionArgs']:
        """
        no documentation available
        """
        return pulumi.get(self, "node_problematic_condition")

    @node_problematic_condition.setter
    def node_problematic_condition(self, value: pulumi.Input['K8sNodeAnomaliesNodeProblematicConditionArgs']):
        pulumi.set(self, "node_problematic_condition", value)

    @property
    @pulumi.getter(name="podsSaturation")
    def pods_saturation(self) -> pulumi.Input['K8sNodeAnomaliesPodsSaturationArgs']:
        """
        no documentation available
        """
        return pulumi.get(self, "pods_saturation")

    @pods_saturation.setter
    def pods_saturation(self, value: pulumi.Input['K8sNodeAnomaliesPodsSaturationArgs']):
        pulumi.set(self, "pods_saturation", value)

    @property
    @pulumi.getter(name="readinessIssues")
    def readiness_issues(self) -> pulumi.Input['K8sNodeAnomaliesReadinessIssuesArgs']:
        """
        Alerts if node has not been available for a given amount of time
        """
        return pulumi.get(self, "readiness_issues")

    @readiness_issues.setter
    def readiness_issues(self, value: pulumi.Input['K8sNodeAnomaliesReadinessIssuesArgs']):
        pulumi.set(self, "readiness_issues", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)


@pulumi.input_type
class _K8sNodeAnomaliesState:
    def __init__(__self__, *,
                 cpu_requests_saturation: Optional[pulumi.Input['K8sNodeAnomaliesCpuRequestsSaturationArgs']] = None,
                 memory_requests_saturation: Optional[pulumi.Input['K8sNodeAnomaliesMemoryRequestsSaturationArgs']] = None,
                 node_problematic_condition: Optional[pulumi.Input['K8sNodeAnomaliesNodeProblematicConditionArgs']] = None,
                 pods_saturation: Optional[pulumi.Input['K8sNodeAnomaliesPodsSaturationArgs']] = None,
                 readiness_issues: Optional[pulumi.Input['K8sNodeAnomaliesReadinessIssuesArgs']] = None,
                 scope: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering K8sNodeAnomalies resources.
        :param pulumi.Input['K8sNodeAnomaliesCpuRequestsSaturationArgs'] cpu_requests_saturation: no documentation available
        :param pulumi.Input['K8sNodeAnomaliesMemoryRequestsSaturationArgs'] memory_requests_saturation: no documentation available
        :param pulumi.Input['K8sNodeAnomaliesNodeProblematicConditionArgs'] node_problematic_condition: no documentation available
        :param pulumi.Input['K8sNodeAnomaliesPodsSaturationArgs'] pods_saturation: no documentation available
        :param pulumi.Input['K8sNodeAnomaliesReadinessIssuesArgs'] readiness_issues: Alerts if node has not been available for a given amount of time
        :param pulumi.Input[str] scope: The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
        """
        if cpu_requests_saturation is not None:
            pulumi.set(__self__, "cpu_requests_saturation", cpu_requests_saturation)
        if memory_requests_saturation is not None:
            pulumi.set(__self__, "memory_requests_saturation", memory_requests_saturation)
        if node_problematic_condition is not None:
            pulumi.set(__self__, "node_problematic_condition", node_problematic_condition)
        if pods_saturation is not None:
            pulumi.set(__self__, "pods_saturation", pods_saturation)
        if readiness_issues is not None:
            pulumi.set(__self__, "readiness_issues", readiness_issues)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter(name="cpuRequestsSaturation")
    def cpu_requests_saturation(self) -> Optional[pulumi.Input['K8sNodeAnomaliesCpuRequestsSaturationArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "cpu_requests_saturation")

    @cpu_requests_saturation.setter
    def cpu_requests_saturation(self, value: Optional[pulumi.Input['K8sNodeAnomaliesCpuRequestsSaturationArgs']]):
        pulumi.set(self, "cpu_requests_saturation", value)

    @property
    @pulumi.getter(name="memoryRequestsSaturation")
    def memory_requests_saturation(self) -> Optional[pulumi.Input['K8sNodeAnomaliesMemoryRequestsSaturationArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "memory_requests_saturation")

    @memory_requests_saturation.setter
    def memory_requests_saturation(self, value: Optional[pulumi.Input['K8sNodeAnomaliesMemoryRequestsSaturationArgs']]):
        pulumi.set(self, "memory_requests_saturation", value)

    @property
    @pulumi.getter(name="nodeProblematicCondition")
    def node_problematic_condition(self) -> Optional[pulumi.Input['K8sNodeAnomaliesNodeProblematicConditionArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "node_problematic_condition")

    @node_problematic_condition.setter
    def node_problematic_condition(self, value: Optional[pulumi.Input['K8sNodeAnomaliesNodeProblematicConditionArgs']]):
        pulumi.set(self, "node_problematic_condition", value)

    @property
    @pulumi.getter(name="podsSaturation")
    def pods_saturation(self) -> Optional[pulumi.Input['K8sNodeAnomaliesPodsSaturationArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "pods_saturation")

    @pods_saturation.setter
    def pods_saturation(self, value: Optional[pulumi.Input['K8sNodeAnomaliesPodsSaturationArgs']]):
        pulumi.set(self, "pods_saturation", value)

    @property
    @pulumi.getter(name="readinessIssues")
    def readiness_issues(self) -> Optional[pulumi.Input['K8sNodeAnomaliesReadinessIssuesArgs']]:
        """
        Alerts if node has not been available for a given amount of time
        """
        return pulumi.get(self, "readiness_issues")

    @readiness_issues.setter
    def readiness_issues(self, value: Optional[pulumi.Input['K8sNodeAnomaliesReadinessIssuesArgs']]):
        pulumi.set(self, "readiness_issues", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)


class K8sNodeAnomalies(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cpu_requests_saturation: Optional[pulumi.Input[Union['K8sNodeAnomaliesCpuRequestsSaturationArgs', 'K8sNodeAnomaliesCpuRequestsSaturationArgsDict']]] = None,
                 memory_requests_saturation: Optional[pulumi.Input[Union['K8sNodeAnomaliesMemoryRequestsSaturationArgs', 'K8sNodeAnomaliesMemoryRequestsSaturationArgsDict']]] = None,
                 node_problematic_condition: Optional[pulumi.Input[Union['K8sNodeAnomaliesNodeProblematicConditionArgs', 'K8sNodeAnomaliesNodeProblematicConditionArgsDict']]] = None,
                 pods_saturation: Optional[pulumi.Input[Union['K8sNodeAnomaliesPodsSaturationArgs', 'K8sNodeAnomaliesPodsSaturationArgsDict']]] = None,
                 readiness_issues: Optional[pulumi.Input[Union['K8sNodeAnomaliesReadinessIssuesArgs', 'K8sNodeAnomaliesReadinessIssuesArgsDict']]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a K8sNodeAnomalies resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['K8sNodeAnomaliesCpuRequestsSaturationArgs', 'K8sNodeAnomaliesCpuRequestsSaturationArgsDict']] cpu_requests_saturation: no documentation available
        :param pulumi.Input[Union['K8sNodeAnomaliesMemoryRequestsSaturationArgs', 'K8sNodeAnomaliesMemoryRequestsSaturationArgsDict']] memory_requests_saturation: no documentation available
        :param pulumi.Input[Union['K8sNodeAnomaliesNodeProblematicConditionArgs', 'K8sNodeAnomaliesNodeProblematicConditionArgsDict']] node_problematic_condition: no documentation available
        :param pulumi.Input[Union['K8sNodeAnomaliesPodsSaturationArgs', 'K8sNodeAnomaliesPodsSaturationArgsDict']] pods_saturation: no documentation available
        :param pulumi.Input[Union['K8sNodeAnomaliesReadinessIssuesArgs', 'K8sNodeAnomaliesReadinessIssuesArgsDict']] readiness_issues: Alerts if node has not been available for a given amount of time
        :param pulumi.Input[str] scope: The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: K8sNodeAnomaliesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a K8sNodeAnomalies resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param K8sNodeAnomaliesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(K8sNodeAnomaliesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cpu_requests_saturation: Optional[pulumi.Input[Union['K8sNodeAnomaliesCpuRequestsSaturationArgs', 'K8sNodeAnomaliesCpuRequestsSaturationArgsDict']]] = None,
                 memory_requests_saturation: Optional[pulumi.Input[Union['K8sNodeAnomaliesMemoryRequestsSaturationArgs', 'K8sNodeAnomaliesMemoryRequestsSaturationArgsDict']]] = None,
                 node_problematic_condition: Optional[pulumi.Input[Union['K8sNodeAnomaliesNodeProblematicConditionArgs', 'K8sNodeAnomaliesNodeProblematicConditionArgsDict']]] = None,
                 pods_saturation: Optional[pulumi.Input[Union['K8sNodeAnomaliesPodsSaturationArgs', 'K8sNodeAnomaliesPodsSaturationArgsDict']]] = None,
                 readiness_issues: Optional[pulumi.Input[Union['K8sNodeAnomaliesReadinessIssuesArgs', 'K8sNodeAnomaliesReadinessIssuesArgsDict']]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = K8sNodeAnomaliesArgs.__new__(K8sNodeAnomaliesArgs)

            if cpu_requests_saturation is None and not opts.urn:
                raise TypeError("Missing required property 'cpu_requests_saturation'")
            __props__.__dict__["cpu_requests_saturation"] = cpu_requests_saturation
            if memory_requests_saturation is None and not opts.urn:
                raise TypeError("Missing required property 'memory_requests_saturation'")
            __props__.__dict__["memory_requests_saturation"] = memory_requests_saturation
            if node_problematic_condition is None and not opts.urn:
                raise TypeError("Missing required property 'node_problematic_condition'")
            __props__.__dict__["node_problematic_condition"] = node_problematic_condition
            if pods_saturation is None and not opts.urn:
                raise TypeError("Missing required property 'pods_saturation'")
            __props__.__dict__["pods_saturation"] = pods_saturation
            if readiness_issues is None and not opts.urn:
                raise TypeError("Missing required property 'readiness_issues'")
            __props__.__dict__["readiness_issues"] = readiness_issues
            __props__.__dict__["scope"] = scope
        super(K8sNodeAnomalies, __self__).__init__(
            'dynatrace:index/k8sNodeAnomalies:K8sNodeAnomalies',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cpu_requests_saturation: Optional[pulumi.Input[Union['K8sNodeAnomaliesCpuRequestsSaturationArgs', 'K8sNodeAnomaliesCpuRequestsSaturationArgsDict']]] = None,
            memory_requests_saturation: Optional[pulumi.Input[Union['K8sNodeAnomaliesMemoryRequestsSaturationArgs', 'K8sNodeAnomaliesMemoryRequestsSaturationArgsDict']]] = None,
            node_problematic_condition: Optional[pulumi.Input[Union['K8sNodeAnomaliesNodeProblematicConditionArgs', 'K8sNodeAnomaliesNodeProblematicConditionArgsDict']]] = None,
            pods_saturation: Optional[pulumi.Input[Union['K8sNodeAnomaliesPodsSaturationArgs', 'K8sNodeAnomaliesPodsSaturationArgsDict']]] = None,
            readiness_issues: Optional[pulumi.Input[Union['K8sNodeAnomaliesReadinessIssuesArgs', 'K8sNodeAnomaliesReadinessIssuesArgsDict']]] = None,
            scope: Optional[pulumi.Input[str]] = None) -> 'K8sNodeAnomalies':
        """
        Get an existing K8sNodeAnomalies resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['K8sNodeAnomaliesCpuRequestsSaturationArgs', 'K8sNodeAnomaliesCpuRequestsSaturationArgsDict']] cpu_requests_saturation: no documentation available
        :param pulumi.Input[Union['K8sNodeAnomaliesMemoryRequestsSaturationArgs', 'K8sNodeAnomaliesMemoryRequestsSaturationArgsDict']] memory_requests_saturation: no documentation available
        :param pulumi.Input[Union['K8sNodeAnomaliesNodeProblematicConditionArgs', 'K8sNodeAnomaliesNodeProblematicConditionArgsDict']] node_problematic_condition: no documentation available
        :param pulumi.Input[Union['K8sNodeAnomaliesPodsSaturationArgs', 'K8sNodeAnomaliesPodsSaturationArgsDict']] pods_saturation: no documentation available
        :param pulumi.Input[Union['K8sNodeAnomaliesReadinessIssuesArgs', 'K8sNodeAnomaliesReadinessIssuesArgsDict']] readiness_issues: Alerts if node has not been available for a given amount of time
        :param pulumi.Input[str] scope: The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _K8sNodeAnomaliesState.__new__(_K8sNodeAnomaliesState)

        __props__.__dict__["cpu_requests_saturation"] = cpu_requests_saturation
        __props__.__dict__["memory_requests_saturation"] = memory_requests_saturation
        __props__.__dict__["node_problematic_condition"] = node_problematic_condition
        __props__.__dict__["pods_saturation"] = pods_saturation
        __props__.__dict__["readiness_issues"] = readiness_issues
        __props__.__dict__["scope"] = scope
        return K8sNodeAnomalies(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cpuRequestsSaturation")
    def cpu_requests_saturation(self) -> pulumi.Output['outputs.K8sNodeAnomaliesCpuRequestsSaturation']:
        """
        no documentation available
        """
        return pulumi.get(self, "cpu_requests_saturation")

    @property
    @pulumi.getter(name="memoryRequestsSaturation")
    def memory_requests_saturation(self) -> pulumi.Output['outputs.K8sNodeAnomaliesMemoryRequestsSaturation']:
        """
        no documentation available
        """
        return pulumi.get(self, "memory_requests_saturation")

    @property
    @pulumi.getter(name="nodeProblematicCondition")
    def node_problematic_condition(self) -> pulumi.Output['outputs.K8sNodeAnomaliesNodeProblematicCondition']:
        """
        no documentation available
        """
        return pulumi.get(self, "node_problematic_condition")

    @property
    @pulumi.getter(name="podsSaturation")
    def pods_saturation(self) -> pulumi.Output['outputs.K8sNodeAnomaliesPodsSaturation']:
        """
        no documentation available
        """
        return pulumi.get(self, "pods_saturation")

    @property
    @pulumi.getter(name="readinessIssues")
    def readiness_issues(self) -> pulumi.Output['outputs.K8sNodeAnomaliesReadinessIssues']:
        """
        Alerts if node has not been available for a given amount of time
        """
        return pulumi.get(self, "readiness_issues")

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Output[Optional[str]]:
        """
        The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
        """
        return pulumi.get(self, "scope")

