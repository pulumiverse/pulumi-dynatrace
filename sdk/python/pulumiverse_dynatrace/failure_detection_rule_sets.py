# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FailureDetectionRuleSetsArgs', 'FailureDetectionRuleSets']

@pulumi.input_type
class FailureDetectionRuleSetsArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[_builtins.bool],
                 ruleset: pulumi.Input['FailureDetectionRuleSetsRulesetArgs'],
                 insert_after: Optional[pulumi.Input[_builtins.str]] = None,
                 scope: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a FailureDetectionRuleSets resource.
        :param pulumi.Input[_builtins.bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['FailureDetectionRuleSetsRulesetArgs'] ruleset: Ruleset
        :param pulumi.Input[_builtins.str] insert_after: Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        :param pulumi.Input[_builtins.str] scope: The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "ruleset", ruleset)
        if insert_after is not None:
            pulumi.set(__self__, "insert_after", insert_after)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[_builtins.bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter
    def ruleset(self) -> pulumi.Input['FailureDetectionRuleSetsRulesetArgs']:
        """
        Ruleset
        """
        return pulumi.get(self, "ruleset")

    @ruleset.setter
    def ruleset(self, value: pulumi.Input['FailureDetectionRuleSetsRulesetArgs']):
        pulumi.set(self, "ruleset", value)

    @_builtins.property
    @pulumi.getter(name="insertAfter")
    def insert_after(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        """
        return pulumi.get(self, "insert_after")

    @insert_after.setter
    def insert_after(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "insert_after", value)

    @_builtins.property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scope", value)


@pulumi.input_type
class _FailureDetectionRuleSetsState:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 insert_after: Optional[pulumi.Input[_builtins.str]] = None,
                 ruleset: Optional[pulumi.Input['FailureDetectionRuleSetsRulesetArgs']] = None,
                 scope: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering FailureDetectionRuleSets resources.
        :param pulumi.Input[_builtins.bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[_builtins.str] insert_after: Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        :param pulumi.Input['FailureDetectionRuleSetsRulesetArgs'] ruleset: Ruleset
        :param pulumi.Input[_builtins.str] scope: The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if insert_after is not None:
            pulumi.set(__self__, "insert_after", insert_after)
        if ruleset is not None:
            pulumi.set(__self__, "ruleset", ruleset)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="insertAfter")
    def insert_after(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        """
        return pulumi.get(self, "insert_after")

    @insert_after.setter
    def insert_after(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "insert_after", value)

    @_builtins.property
    @pulumi.getter
    def ruleset(self) -> Optional[pulumi.Input['FailureDetectionRuleSetsRulesetArgs']]:
        """
        Ruleset
        """
        return pulumi.get(self, "ruleset")

    @ruleset.setter
    def ruleset(self, value: Optional[pulumi.Input['FailureDetectionRuleSetsRulesetArgs']]):
        pulumi.set(self, "ruleset", value)

    @_builtins.property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scope", value)


@pulumi.type_token("dynatrace:index/failureDetectionRuleSets:FailureDetectionRuleSets")
class FailureDetectionRuleSets(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 insert_after: Optional[pulumi.Input[_builtins.str]] = None,
                 ruleset: Optional[pulumi.Input[Union['FailureDetectionRuleSetsRulesetArgs', 'FailureDetectionRuleSetsRulesetArgsDict']]] = None,
                 scope: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        > This resource requires the API token scopes **Read settings** (`settings.read`) and **Write settings** (`settings.write`)

        ## Dynatrace Documentation

        - Customize failure detection in Service Detection v2 - https://docs.dynatrace.com/docs/observe/applications-and-microservices/services/service-detection-v2/failure-detection-v2

        - Settings API - https://www.dynatrace.com/support/help/dynatrace-api/environment-api/settings (schemaId: `builtin:failure-detection-rulesets`)

        ## Resource Example Usage

        ```python
        import pulumi
        import pulumiverse_dynatrace as dynatrace

        _name_ = dynatrace.FailureDetectionRuleSets("#name#",
            enabled=False,
            ruleset={
                "condition": "matchesValue(k8s.cluster.name,\\"#name#\\")",
                "description": "This is a sample description",
                "fail_on_exceptions": {
                    "enabled": True,
                },
                "fail_on_grpc_status_codes": {
                    "status_codes": "2,4,12,13,14,15",
                },
                "fail_on_http_response_status_codes": {
                    "status_codes": "500-599",
                },
                "fail_on_span_status_error": {
                    "enabled": True,
                },
                "overrides": {
                    "force_success_on_span_status_ok": {
                        "enabled": False,
                    },
                },
                "ruleset_name": "#name#",
            },
            scope="environment")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[_builtins.str] insert_after: Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        :param pulumi.Input[Union['FailureDetectionRuleSetsRulesetArgs', 'FailureDetectionRuleSetsRulesetArgsDict']] ruleset: Ruleset
        :param pulumi.Input[_builtins.str] scope: The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FailureDetectionRuleSetsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        > This resource requires the API token scopes **Read settings** (`settings.read`) and **Write settings** (`settings.write`)

        ## Dynatrace Documentation

        - Customize failure detection in Service Detection v2 - https://docs.dynatrace.com/docs/observe/applications-and-microservices/services/service-detection-v2/failure-detection-v2

        - Settings API - https://www.dynatrace.com/support/help/dynatrace-api/environment-api/settings (schemaId: `builtin:failure-detection-rulesets`)

        ## Resource Example Usage

        ```python
        import pulumi
        import pulumiverse_dynatrace as dynatrace

        _name_ = dynatrace.FailureDetectionRuleSets("#name#",
            enabled=False,
            ruleset={
                "condition": "matchesValue(k8s.cluster.name,\\"#name#\\")",
                "description": "This is a sample description",
                "fail_on_exceptions": {
                    "enabled": True,
                },
                "fail_on_grpc_status_codes": {
                    "status_codes": "2,4,12,13,14,15",
                },
                "fail_on_http_response_status_codes": {
                    "status_codes": "500-599",
                },
                "fail_on_span_status_error": {
                    "enabled": True,
                },
                "overrides": {
                    "force_success_on_span_status_ok": {
                        "enabled": False,
                    },
                },
                "ruleset_name": "#name#",
            },
            scope="environment")
        ```

        :param str resource_name: The name of the resource.
        :param FailureDetectionRuleSetsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FailureDetectionRuleSetsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 insert_after: Optional[pulumi.Input[_builtins.str]] = None,
                 ruleset: Optional[pulumi.Input[Union['FailureDetectionRuleSetsRulesetArgs', 'FailureDetectionRuleSetsRulesetArgsDict']]] = None,
                 scope: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FailureDetectionRuleSetsArgs.__new__(FailureDetectionRuleSetsArgs)

            if enabled is None and not opts.urn:
                raise TypeError("Missing required property 'enabled'")
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["insert_after"] = insert_after
            if ruleset is None and not opts.urn:
                raise TypeError("Missing required property 'ruleset'")
            __props__.__dict__["ruleset"] = ruleset
            __props__.__dict__["scope"] = scope
        super(FailureDetectionRuleSets, __self__).__init__(
            'dynatrace:index/failureDetectionRuleSets:FailureDetectionRuleSets',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            insert_after: Optional[pulumi.Input[_builtins.str]] = None,
            ruleset: Optional[pulumi.Input[Union['FailureDetectionRuleSetsRulesetArgs', 'FailureDetectionRuleSetsRulesetArgsDict']]] = None,
            scope: Optional[pulumi.Input[_builtins.str]] = None) -> 'FailureDetectionRuleSets':
        """
        Get an existing FailureDetectionRuleSets resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[_builtins.str] insert_after: Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        :param pulumi.Input[Union['FailureDetectionRuleSetsRulesetArgs', 'FailureDetectionRuleSetsRulesetArgsDict']] ruleset: Ruleset
        :param pulumi.Input[_builtins.str] scope: The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FailureDetectionRuleSetsState.__new__(_FailureDetectionRuleSetsState)

        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["insert_after"] = insert_after
        __props__.__dict__["ruleset"] = ruleset
        __props__.__dict__["scope"] = scope
        return FailureDetectionRuleSets(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="insertAfter")
    def insert_after(self) -> pulumi.Output[_builtins.str]:
        """
        Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        """
        return pulumi.get(self, "insert_after")

    @_builtins.property
    @pulumi.getter
    def ruleset(self) -> pulumi.Output['outputs.FailureDetectionRuleSetsRuleset']:
        """
        Ruleset
        """
        return pulumi.get(self, "ruleset")

    @_builtins.property
    @pulumi.getter
    def scope(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES*CLUSTER, HOST*GROUP). Omit this property if you want to cover the whole environment.
        """
        return pulumi.get(self, "scope")

