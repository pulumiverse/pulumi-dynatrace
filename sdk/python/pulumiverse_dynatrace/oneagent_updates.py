# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['OneagentUpdatesArgs', 'OneagentUpdates']

@pulumi.input_type
class OneagentUpdatesArgs:
    def __init__(__self__, *,
                 update_mode: pulumi.Input[str],
                 maintenance_windows: Optional[pulumi.Input['OneagentUpdatesMaintenanceWindowsArgs']] = None,
                 revision: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 target_version: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a OneagentUpdates resource.
        :param pulumi.Input[str] update_mode: Possible Values: `AUTOMATIC`, `AUTOMATIC_DURING_MW`, `MANUAL`
        :param pulumi.Input['OneagentUpdatesMaintenanceWindowsArgs'] maintenance_windows: Maintenance windows
        :param pulumi.Input[str] revision: Revision
        :param pulumi.Input[str] scope: The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
        :param pulumi.Input[str] target_version: Target version
        """
        pulumi.set(__self__, "update_mode", update_mode)
        if maintenance_windows is not None:
            pulumi.set(__self__, "maintenance_windows", maintenance_windows)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if target_version is not None:
            pulumi.set(__self__, "target_version", target_version)

    @property
    @pulumi.getter(name="updateMode")
    def update_mode(self) -> pulumi.Input[str]:
        """
        Possible Values: `AUTOMATIC`, `AUTOMATIC_DURING_MW`, `MANUAL`
        """
        return pulumi.get(self, "update_mode")

    @update_mode.setter
    def update_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "update_mode", value)

    @property
    @pulumi.getter(name="maintenanceWindows")
    def maintenance_windows(self) -> Optional[pulumi.Input['OneagentUpdatesMaintenanceWindowsArgs']]:
        """
        Maintenance windows
        """
        return pulumi.get(self, "maintenance_windows")

    @maintenance_windows.setter
    def maintenance_windows(self, value: Optional[pulumi.Input['OneagentUpdatesMaintenanceWindowsArgs']]):
        pulumi.set(self, "maintenance_windows", value)

    @property
    @pulumi.getter
    def revision(self) -> Optional[pulumi.Input[str]]:
        """
        Revision
        """
        return pulumi.get(self, "revision")

    @revision.setter
    def revision(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revision", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="targetVersion")
    def target_version(self) -> Optional[pulumi.Input[str]]:
        """
        Target version
        """
        return pulumi.get(self, "target_version")

    @target_version.setter
    def target_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_version", value)


@pulumi.input_type
class _OneagentUpdatesState:
    def __init__(__self__, *,
                 maintenance_windows: Optional[pulumi.Input['OneagentUpdatesMaintenanceWindowsArgs']] = None,
                 revision: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 target_version: Optional[pulumi.Input[str]] = None,
                 update_mode: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering OneagentUpdates resources.
        :param pulumi.Input['OneagentUpdatesMaintenanceWindowsArgs'] maintenance_windows: Maintenance windows
        :param pulumi.Input[str] revision: Revision
        :param pulumi.Input[str] scope: The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
        :param pulumi.Input[str] target_version: Target version
        :param pulumi.Input[str] update_mode: Possible Values: `AUTOMATIC`, `AUTOMATIC_DURING_MW`, `MANUAL`
        """
        if maintenance_windows is not None:
            pulumi.set(__self__, "maintenance_windows", maintenance_windows)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if target_version is not None:
            pulumi.set(__self__, "target_version", target_version)
        if update_mode is not None:
            pulumi.set(__self__, "update_mode", update_mode)

    @property
    @pulumi.getter(name="maintenanceWindows")
    def maintenance_windows(self) -> Optional[pulumi.Input['OneagentUpdatesMaintenanceWindowsArgs']]:
        """
        Maintenance windows
        """
        return pulumi.get(self, "maintenance_windows")

    @maintenance_windows.setter
    def maintenance_windows(self, value: Optional[pulumi.Input['OneagentUpdatesMaintenanceWindowsArgs']]):
        pulumi.set(self, "maintenance_windows", value)

    @property
    @pulumi.getter
    def revision(self) -> Optional[pulumi.Input[str]]:
        """
        Revision
        """
        return pulumi.get(self, "revision")

    @revision.setter
    def revision(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revision", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="targetVersion")
    def target_version(self) -> Optional[pulumi.Input[str]]:
        """
        Target version
        """
        return pulumi.get(self, "target_version")

    @target_version.setter
    def target_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_version", value)

    @property
    @pulumi.getter(name="updateMode")
    def update_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Possible Values: `AUTOMATIC`, `AUTOMATIC_DURING_MW`, `MANUAL`
        """
        return pulumi.get(self, "update_mode")

    @update_mode.setter
    def update_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_mode", value)


class OneagentUpdates(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 maintenance_windows: Optional[pulumi.Input[Union['OneagentUpdatesMaintenanceWindowsArgs', 'OneagentUpdatesMaintenanceWindowsArgsDict']]] = None,
                 revision: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 target_version: Optional[pulumi.Input[str]] = None,
                 update_mode: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a OneagentUpdates resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['OneagentUpdatesMaintenanceWindowsArgs', 'OneagentUpdatesMaintenanceWindowsArgsDict']] maintenance_windows: Maintenance windows
        :param pulumi.Input[str] revision: Revision
        :param pulumi.Input[str] scope: The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
        :param pulumi.Input[str] target_version: Target version
        :param pulumi.Input[str] update_mode: Possible Values: `AUTOMATIC`, `AUTOMATIC_DURING_MW`, `MANUAL`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OneagentUpdatesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a OneagentUpdates resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param OneagentUpdatesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OneagentUpdatesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 maintenance_windows: Optional[pulumi.Input[Union['OneagentUpdatesMaintenanceWindowsArgs', 'OneagentUpdatesMaintenanceWindowsArgsDict']]] = None,
                 revision: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 target_version: Optional[pulumi.Input[str]] = None,
                 update_mode: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OneagentUpdatesArgs.__new__(OneagentUpdatesArgs)

            __props__.__dict__["maintenance_windows"] = maintenance_windows
            __props__.__dict__["revision"] = revision
            __props__.__dict__["scope"] = scope
            __props__.__dict__["target_version"] = target_version
            if update_mode is None and not opts.urn:
                raise TypeError("Missing required property 'update_mode'")
            __props__.__dict__["update_mode"] = update_mode
        super(OneagentUpdates, __self__).__init__(
            'dynatrace:index/oneagentUpdates:OneagentUpdates',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            maintenance_windows: Optional[pulumi.Input[Union['OneagentUpdatesMaintenanceWindowsArgs', 'OneagentUpdatesMaintenanceWindowsArgsDict']]] = None,
            revision: Optional[pulumi.Input[str]] = None,
            scope: Optional[pulumi.Input[str]] = None,
            target_version: Optional[pulumi.Input[str]] = None,
            update_mode: Optional[pulumi.Input[str]] = None) -> 'OneagentUpdates':
        """
        Get an existing OneagentUpdates resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['OneagentUpdatesMaintenanceWindowsArgs', 'OneagentUpdatesMaintenanceWindowsArgsDict']] maintenance_windows: Maintenance windows
        :param pulumi.Input[str] revision: Revision
        :param pulumi.Input[str] scope: The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
        :param pulumi.Input[str] target_version: Target version
        :param pulumi.Input[str] update_mode: Possible Values: `AUTOMATIC`, `AUTOMATIC_DURING_MW`, `MANUAL`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OneagentUpdatesState.__new__(_OneagentUpdatesState)

        __props__.__dict__["maintenance_windows"] = maintenance_windows
        __props__.__dict__["revision"] = revision
        __props__.__dict__["scope"] = scope
        __props__.__dict__["target_version"] = target_version
        __props__.__dict__["update_mode"] = update_mode
        return OneagentUpdates(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="maintenanceWindows")
    def maintenance_windows(self) -> pulumi.Output[Optional['outputs.OneagentUpdatesMaintenanceWindows']]:
        """
        Maintenance windows
        """
        return pulumi.get(self, "maintenance_windows")

    @property
    @pulumi.getter
    def revision(self) -> pulumi.Output[Optional[str]]:
        """
        Revision
        """
        return pulumi.get(self, "revision")

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Output[Optional[str]]:
        """
        The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="targetVersion")
    def target_version(self) -> pulumi.Output[Optional[str]]:
        """
        Target version
        """
        return pulumi.get(self, "target_version")

    @property
    @pulumi.getter(name="updateMode")
    def update_mode(self) -> pulumi.Output[str]:
        """
        Possible Values: `AUTOMATIC`, `AUTOMATIC_DURING_MW`, `MANUAL`
        """
        return pulumi.get(self, "update_mode")

