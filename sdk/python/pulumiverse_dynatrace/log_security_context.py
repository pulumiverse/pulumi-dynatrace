# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LogSecurityContextArgs', 'LogSecurityContext']

@pulumi.input_type
class LogSecurityContextArgs:
    def __init__(__self__, *,
                 security_context_rule: pulumi.Input['LogSecurityContextSecurityContextRuleArgs'],
                 insert_after: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a LogSecurityContext resource.
        :param pulumi.Input['LogSecurityContextSecurityContextRuleArgs'] security_context_rule: no documentation available
        :param pulumi.Input[str] insert_after: Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        """
        pulumi.set(__self__, "security_context_rule", security_context_rule)
        if insert_after is not None:
            pulumi.set(__self__, "insert_after", insert_after)

    @property
    @pulumi.getter(name="securityContextRule")
    def security_context_rule(self) -> pulumi.Input['LogSecurityContextSecurityContextRuleArgs']:
        """
        no documentation available
        """
        return pulumi.get(self, "security_context_rule")

    @security_context_rule.setter
    def security_context_rule(self, value: pulumi.Input['LogSecurityContextSecurityContextRuleArgs']):
        pulumi.set(self, "security_context_rule", value)

    @property
    @pulumi.getter(name="insertAfter")
    def insert_after(self) -> Optional[pulumi.Input[str]]:
        """
        Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        """
        return pulumi.get(self, "insert_after")

    @insert_after.setter
    def insert_after(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "insert_after", value)


@pulumi.input_type
class _LogSecurityContextState:
    def __init__(__self__, *,
                 insert_after: Optional[pulumi.Input[str]] = None,
                 security_context_rule: Optional[pulumi.Input['LogSecurityContextSecurityContextRuleArgs']] = None):
        """
        Input properties used for looking up and filtering LogSecurityContext resources.
        :param pulumi.Input[str] insert_after: Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        :param pulumi.Input['LogSecurityContextSecurityContextRuleArgs'] security_context_rule: no documentation available
        """
        if insert_after is not None:
            pulumi.set(__self__, "insert_after", insert_after)
        if security_context_rule is not None:
            pulumi.set(__self__, "security_context_rule", security_context_rule)

    @property
    @pulumi.getter(name="insertAfter")
    def insert_after(self) -> Optional[pulumi.Input[str]]:
        """
        Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        """
        return pulumi.get(self, "insert_after")

    @insert_after.setter
    def insert_after(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "insert_after", value)

    @property
    @pulumi.getter(name="securityContextRule")
    def security_context_rule(self) -> Optional[pulumi.Input['LogSecurityContextSecurityContextRuleArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "security_context_rule")

    @security_context_rule.setter
    def security_context_rule(self, value: Optional[pulumi.Input['LogSecurityContextSecurityContextRuleArgs']]):
        pulumi.set(self, "security_context_rule", value)


class LogSecurityContext(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 insert_after: Optional[pulumi.Input[str]] = None,
                 security_context_rule: Optional[pulumi.Input[Union['LogSecurityContextSecurityContextRuleArgs', 'LogSecurityContextSecurityContextRuleArgsDict']]] = None,
                 __props__=None):
        """
        Create a LogSecurityContext resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] insert_after: Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        :param pulumi.Input[Union['LogSecurityContextSecurityContextRuleArgs', 'LogSecurityContextSecurityContextRuleArgsDict']] security_context_rule: no documentation available
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LogSecurityContextArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a LogSecurityContext resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param LogSecurityContextArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LogSecurityContextArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 insert_after: Optional[pulumi.Input[str]] = None,
                 security_context_rule: Optional[pulumi.Input[Union['LogSecurityContextSecurityContextRuleArgs', 'LogSecurityContextSecurityContextRuleArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LogSecurityContextArgs.__new__(LogSecurityContextArgs)

            __props__.__dict__["insert_after"] = insert_after
            if security_context_rule is None and not opts.urn:
                raise TypeError("Missing required property 'security_context_rule'")
            __props__.__dict__["security_context_rule"] = security_context_rule
        super(LogSecurityContext, __self__).__init__(
            'dynatrace:index/logSecurityContext:LogSecurityContext',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            insert_after: Optional[pulumi.Input[str]] = None,
            security_context_rule: Optional[pulumi.Input[Union['LogSecurityContextSecurityContextRuleArgs', 'LogSecurityContextSecurityContextRuleArgsDict']]] = None) -> 'LogSecurityContext':
        """
        Get an existing LogSecurityContext resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] insert_after: Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        :param pulumi.Input[Union['LogSecurityContextSecurityContextRuleArgs', 'LogSecurityContextSecurityContextRuleArgsDict']] security_context_rule: no documentation available
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LogSecurityContextState.__new__(_LogSecurityContextState)

        __props__.__dict__["insert_after"] = insert_after
        __props__.__dict__["security_context_rule"] = security_context_rule
        return LogSecurityContext(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="insertAfter")
    def insert_after(self) -> pulumi.Output[str]:
        """
        Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        """
        return pulumi.get(self, "insert_after")

    @property
    @pulumi.getter(name="securityContextRule")
    def security_context_rule(self) -> pulumi.Output['outputs.LogSecurityContextSecurityContextRule']:
        """
        no documentation available
        """
        return pulumi.get(self, "security_context_rule")

