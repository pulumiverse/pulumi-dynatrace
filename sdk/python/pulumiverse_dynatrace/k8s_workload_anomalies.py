# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['K8sWorkloadAnomaliesArgs', 'K8sWorkloadAnomalies']

@pulumi.input_type
class K8sWorkloadAnomaliesArgs:
    def __init__(__self__, *,
                 container_restarts: pulumi.Input['K8sWorkloadAnomaliesContainerRestartsArgs'],
                 deployment_stuck: pulumi.Input['K8sWorkloadAnomaliesDeploymentStuckArgs'],
                 high_cpu_throttling: pulumi.Input['K8sWorkloadAnomaliesHighCpuThrottlingArgs'],
                 high_cpu_usage: pulumi.Input['K8sWorkloadAnomaliesHighCpuUsageArgs'],
                 high_memory_usage: pulumi.Input['K8sWorkloadAnomaliesHighMemoryUsageArgs'],
                 job_failure_events: pulumi.Input['K8sWorkloadAnomaliesJobFailureEventsArgs'],
                 not_all_pods_ready: pulumi.Input['K8sWorkloadAnomaliesNotAllPodsReadyArgs'],
                 oom_kills: pulumi.Input['K8sWorkloadAnomaliesOomKillsArgs'],
                 pending_pods: pulumi.Input['K8sWorkloadAnomaliesPendingPodsArgs'],
                 pod_backoff_events: pulumi.Input['K8sWorkloadAnomaliesPodBackoffEventsArgs'],
                 pod_eviction_events: pulumi.Input['K8sWorkloadAnomaliesPodEvictionEventsArgs'],
                 pod_preemption_events: pulumi.Input['K8sWorkloadAnomaliesPodPreemptionEventsArgs'],
                 pod_stuck_in_terminating: pulumi.Input['K8sWorkloadAnomaliesPodStuckInTerminatingArgs'],
                 workload_without_ready_pods: pulumi.Input['K8sWorkloadAnomaliesWorkloadWithoutReadyPodsArgs'],
                 scope: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a K8sWorkloadAnomalies resource.
        :param pulumi.Input['K8sWorkloadAnomaliesContainerRestartsArgs'] container_restarts: no documentation available
        :param pulumi.Input['K8sWorkloadAnomaliesDeploymentStuckArgs'] deployment_stuck: no documentation available
        :param pulumi.Input['K8sWorkloadAnomaliesHighCpuThrottlingArgs'] high_cpu_throttling: no documentation available
        :param pulumi.Input['K8sWorkloadAnomaliesHighCpuUsageArgs'] high_cpu_usage: no documentation available
        :param pulumi.Input['K8sWorkloadAnomaliesHighMemoryUsageArgs'] high_memory_usage: no documentation available
        :param pulumi.Input['K8sWorkloadAnomaliesJobFailureEventsArgs'] job_failure_events: no documentation available
        :param pulumi.Input['K8sWorkloadAnomaliesNotAllPodsReadyArgs'] not_all_pods_ready: no documentation available
        :param pulumi.Input['K8sWorkloadAnomaliesOomKillsArgs'] oom_kills: no documentation available
        :param pulumi.Input['K8sWorkloadAnomaliesPendingPodsArgs'] pending_pods: no documentation available
        :param pulumi.Input['K8sWorkloadAnomaliesPodBackoffEventsArgs'] pod_backoff_events: no documentation available
        :param pulumi.Input['K8sWorkloadAnomaliesPodEvictionEventsArgs'] pod_eviction_events: no documentation available
        :param pulumi.Input['K8sWorkloadAnomaliesPodPreemptionEventsArgs'] pod_preemption_events: no documentation available
        :param pulumi.Input['K8sWorkloadAnomaliesPodStuckInTerminatingArgs'] pod_stuck_in_terminating: no documentation available
        :param pulumi.Input['K8sWorkloadAnomaliesWorkloadWithoutReadyPodsArgs'] workload_without_ready_pods: no documentation available
        :param pulumi.Input[str] scope: The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
        """
        pulumi.set(__self__, "container_restarts", container_restarts)
        pulumi.set(__self__, "deployment_stuck", deployment_stuck)
        pulumi.set(__self__, "high_cpu_throttling", high_cpu_throttling)
        pulumi.set(__self__, "high_cpu_usage", high_cpu_usage)
        pulumi.set(__self__, "high_memory_usage", high_memory_usage)
        pulumi.set(__self__, "job_failure_events", job_failure_events)
        pulumi.set(__self__, "not_all_pods_ready", not_all_pods_ready)
        pulumi.set(__self__, "oom_kills", oom_kills)
        pulumi.set(__self__, "pending_pods", pending_pods)
        pulumi.set(__self__, "pod_backoff_events", pod_backoff_events)
        pulumi.set(__self__, "pod_eviction_events", pod_eviction_events)
        pulumi.set(__self__, "pod_preemption_events", pod_preemption_events)
        pulumi.set(__self__, "pod_stuck_in_terminating", pod_stuck_in_terminating)
        pulumi.set(__self__, "workload_without_ready_pods", workload_without_ready_pods)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter(name="containerRestarts")
    def container_restarts(self) -> pulumi.Input['K8sWorkloadAnomaliesContainerRestartsArgs']:
        """
        no documentation available
        """
        return pulumi.get(self, "container_restarts")

    @container_restarts.setter
    def container_restarts(self, value: pulumi.Input['K8sWorkloadAnomaliesContainerRestartsArgs']):
        pulumi.set(self, "container_restarts", value)

    @property
    @pulumi.getter(name="deploymentStuck")
    def deployment_stuck(self) -> pulumi.Input['K8sWorkloadAnomaliesDeploymentStuckArgs']:
        """
        no documentation available
        """
        return pulumi.get(self, "deployment_stuck")

    @deployment_stuck.setter
    def deployment_stuck(self, value: pulumi.Input['K8sWorkloadAnomaliesDeploymentStuckArgs']):
        pulumi.set(self, "deployment_stuck", value)

    @property
    @pulumi.getter(name="highCpuThrottling")
    def high_cpu_throttling(self) -> pulumi.Input['K8sWorkloadAnomaliesHighCpuThrottlingArgs']:
        """
        no documentation available
        """
        return pulumi.get(self, "high_cpu_throttling")

    @high_cpu_throttling.setter
    def high_cpu_throttling(self, value: pulumi.Input['K8sWorkloadAnomaliesHighCpuThrottlingArgs']):
        pulumi.set(self, "high_cpu_throttling", value)

    @property
    @pulumi.getter(name="highCpuUsage")
    def high_cpu_usage(self) -> pulumi.Input['K8sWorkloadAnomaliesHighCpuUsageArgs']:
        """
        no documentation available
        """
        return pulumi.get(self, "high_cpu_usage")

    @high_cpu_usage.setter
    def high_cpu_usage(self, value: pulumi.Input['K8sWorkloadAnomaliesHighCpuUsageArgs']):
        pulumi.set(self, "high_cpu_usage", value)

    @property
    @pulumi.getter(name="highMemoryUsage")
    def high_memory_usage(self) -> pulumi.Input['K8sWorkloadAnomaliesHighMemoryUsageArgs']:
        """
        no documentation available
        """
        return pulumi.get(self, "high_memory_usage")

    @high_memory_usage.setter
    def high_memory_usage(self, value: pulumi.Input['K8sWorkloadAnomaliesHighMemoryUsageArgs']):
        pulumi.set(self, "high_memory_usage", value)

    @property
    @pulumi.getter(name="jobFailureEvents")
    def job_failure_events(self) -> pulumi.Input['K8sWorkloadAnomaliesJobFailureEventsArgs']:
        """
        no documentation available
        """
        return pulumi.get(self, "job_failure_events")

    @job_failure_events.setter
    def job_failure_events(self, value: pulumi.Input['K8sWorkloadAnomaliesJobFailureEventsArgs']):
        pulumi.set(self, "job_failure_events", value)

    @property
    @pulumi.getter(name="notAllPodsReady")
    def not_all_pods_ready(self) -> pulumi.Input['K8sWorkloadAnomaliesNotAllPodsReadyArgs']:
        """
        no documentation available
        """
        return pulumi.get(self, "not_all_pods_ready")

    @not_all_pods_ready.setter
    def not_all_pods_ready(self, value: pulumi.Input['K8sWorkloadAnomaliesNotAllPodsReadyArgs']):
        pulumi.set(self, "not_all_pods_ready", value)

    @property
    @pulumi.getter(name="oomKills")
    def oom_kills(self) -> pulumi.Input['K8sWorkloadAnomaliesOomKillsArgs']:
        """
        no documentation available
        """
        return pulumi.get(self, "oom_kills")

    @oom_kills.setter
    def oom_kills(self, value: pulumi.Input['K8sWorkloadAnomaliesOomKillsArgs']):
        pulumi.set(self, "oom_kills", value)

    @property
    @pulumi.getter(name="pendingPods")
    def pending_pods(self) -> pulumi.Input['K8sWorkloadAnomaliesPendingPodsArgs']:
        """
        no documentation available
        """
        return pulumi.get(self, "pending_pods")

    @pending_pods.setter
    def pending_pods(self, value: pulumi.Input['K8sWorkloadAnomaliesPendingPodsArgs']):
        pulumi.set(self, "pending_pods", value)

    @property
    @pulumi.getter(name="podBackoffEvents")
    def pod_backoff_events(self) -> pulumi.Input['K8sWorkloadAnomaliesPodBackoffEventsArgs']:
        """
        no documentation available
        """
        return pulumi.get(self, "pod_backoff_events")

    @pod_backoff_events.setter
    def pod_backoff_events(self, value: pulumi.Input['K8sWorkloadAnomaliesPodBackoffEventsArgs']):
        pulumi.set(self, "pod_backoff_events", value)

    @property
    @pulumi.getter(name="podEvictionEvents")
    def pod_eviction_events(self) -> pulumi.Input['K8sWorkloadAnomaliesPodEvictionEventsArgs']:
        """
        no documentation available
        """
        return pulumi.get(self, "pod_eviction_events")

    @pod_eviction_events.setter
    def pod_eviction_events(self, value: pulumi.Input['K8sWorkloadAnomaliesPodEvictionEventsArgs']):
        pulumi.set(self, "pod_eviction_events", value)

    @property
    @pulumi.getter(name="podPreemptionEvents")
    def pod_preemption_events(self) -> pulumi.Input['K8sWorkloadAnomaliesPodPreemptionEventsArgs']:
        """
        no documentation available
        """
        return pulumi.get(self, "pod_preemption_events")

    @pod_preemption_events.setter
    def pod_preemption_events(self, value: pulumi.Input['K8sWorkloadAnomaliesPodPreemptionEventsArgs']):
        pulumi.set(self, "pod_preemption_events", value)

    @property
    @pulumi.getter(name="podStuckInTerminating")
    def pod_stuck_in_terminating(self) -> pulumi.Input['K8sWorkloadAnomaliesPodStuckInTerminatingArgs']:
        """
        no documentation available
        """
        return pulumi.get(self, "pod_stuck_in_terminating")

    @pod_stuck_in_terminating.setter
    def pod_stuck_in_terminating(self, value: pulumi.Input['K8sWorkloadAnomaliesPodStuckInTerminatingArgs']):
        pulumi.set(self, "pod_stuck_in_terminating", value)

    @property
    @pulumi.getter(name="workloadWithoutReadyPods")
    def workload_without_ready_pods(self) -> pulumi.Input['K8sWorkloadAnomaliesWorkloadWithoutReadyPodsArgs']:
        """
        no documentation available
        """
        return pulumi.get(self, "workload_without_ready_pods")

    @workload_without_ready_pods.setter
    def workload_without_ready_pods(self, value: pulumi.Input['K8sWorkloadAnomaliesWorkloadWithoutReadyPodsArgs']):
        pulumi.set(self, "workload_without_ready_pods", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)


@pulumi.input_type
class _K8sWorkloadAnomaliesState:
    def __init__(__self__, *,
                 container_restarts: Optional[pulumi.Input['K8sWorkloadAnomaliesContainerRestartsArgs']] = None,
                 deployment_stuck: Optional[pulumi.Input['K8sWorkloadAnomaliesDeploymentStuckArgs']] = None,
                 high_cpu_throttling: Optional[pulumi.Input['K8sWorkloadAnomaliesHighCpuThrottlingArgs']] = None,
                 high_cpu_usage: Optional[pulumi.Input['K8sWorkloadAnomaliesHighCpuUsageArgs']] = None,
                 high_memory_usage: Optional[pulumi.Input['K8sWorkloadAnomaliesHighMemoryUsageArgs']] = None,
                 job_failure_events: Optional[pulumi.Input['K8sWorkloadAnomaliesJobFailureEventsArgs']] = None,
                 not_all_pods_ready: Optional[pulumi.Input['K8sWorkloadAnomaliesNotAllPodsReadyArgs']] = None,
                 oom_kills: Optional[pulumi.Input['K8sWorkloadAnomaliesOomKillsArgs']] = None,
                 pending_pods: Optional[pulumi.Input['K8sWorkloadAnomaliesPendingPodsArgs']] = None,
                 pod_backoff_events: Optional[pulumi.Input['K8sWorkloadAnomaliesPodBackoffEventsArgs']] = None,
                 pod_eviction_events: Optional[pulumi.Input['K8sWorkloadAnomaliesPodEvictionEventsArgs']] = None,
                 pod_preemption_events: Optional[pulumi.Input['K8sWorkloadAnomaliesPodPreemptionEventsArgs']] = None,
                 pod_stuck_in_terminating: Optional[pulumi.Input['K8sWorkloadAnomaliesPodStuckInTerminatingArgs']] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 workload_without_ready_pods: Optional[pulumi.Input['K8sWorkloadAnomaliesWorkloadWithoutReadyPodsArgs']] = None):
        """
        Input properties used for looking up and filtering K8sWorkloadAnomalies resources.
        :param pulumi.Input['K8sWorkloadAnomaliesContainerRestartsArgs'] container_restarts: no documentation available
        :param pulumi.Input['K8sWorkloadAnomaliesDeploymentStuckArgs'] deployment_stuck: no documentation available
        :param pulumi.Input['K8sWorkloadAnomaliesHighCpuThrottlingArgs'] high_cpu_throttling: no documentation available
        :param pulumi.Input['K8sWorkloadAnomaliesHighCpuUsageArgs'] high_cpu_usage: no documentation available
        :param pulumi.Input['K8sWorkloadAnomaliesHighMemoryUsageArgs'] high_memory_usage: no documentation available
        :param pulumi.Input['K8sWorkloadAnomaliesJobFailureEventsArgs'] job_failure_events: no documentation available
        :param pulumi.Input['K8sWorkloadAnomaliesNotAllPodsReadyArgs'] not_all_pods_ready: no documentation available
        :param pulumi.Input['K8sWorkloadAnomaliesOomKillsArgs'] oom_kills: no documentation available
        :param pulumi.Input['K8sWorkloadAnomaliesPendingPodsArgs'] pending_pods: no documentation available
        :param pulumi.Input['K8sWorkloadAnomaliesPodBackoffEventsArgs'] pod_backoff_events: no documentation available
        :param pulumi.Input['K8sWorkloadAnomaliesPodEvictionEventsArgs'] pod_eviction_events: no documentation available
        :param pulumi.Input['K8sWorkloadAnomaliesPodPreemptionEventsArgs'] pod_preemption_events: no documentation available
        :param pulumi.Input['K8sWorkloadAnomaliesPodStuckInTerminatingArgs'] pod_stuck_in_terminating: no documentation available
        :param pulumi.Input[str] scope: The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
        :param pulumi.Input['K8sWorkloadAnomaliesWorkloadWithoutReadyPodsArgs'] workload_without_ready_pods: no documentation available
        """
        if container_restarts is not None:
            pulumi.set(__self__, "container_restarts", container_restarts)
        if deployment_stuck is not None:
            pulumi.set(__self__, "deployment_stuck", deployment_stuck)
        if high_cpu_throttling is not None:
            pulumi.set(__self__, "high_cpu_throttling", high_cpu_throttling)
        if high_cpu_usage is not None:
            pulumi.set(__self__, "high_cpu_usage", high_cpu_usage)
        if high_memory_usage is not None:
            pulumi.set(__self__, "high_memory_usage", high_memory_usage)
        if job_failure_events is not None:
            pulumi.set(__self__, "job_failure_events", job_failure_events)
        if not_all_pods_ready is not None:
            pulumi.set(__self__, "not_all_pods_ready", not_all_pods_ready)
        if oom_kills is not None:
            pulumi.set(__self__, "oom_kills", oom_kills)
        if pending_pods is not None:
            pulumi.set(__self__, "pending_pods", pending_pods)
        if pod_backoff_events is not None:
            pulumi.set(__self__, "pod_backoff_events", pod_backoff_events)
        if pod_eviction_events is not None:
            pulumi.set(__self__, "pod_eviction_events", pod_eviction_events)
        if pod_preemption_events is not None:
            pulumi.set(__self__, "pod_preemption_events", pod_preemption_events)
        if pod_stuck_in_terminating is not None:
            pulumi.set(__self__, "pod_stuck_in_terminating", pod_stuck_in_terminating)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if workload_without_ready_pods is not None:
            pulumi.set(__self__, "workload_without_ready_pods", workload_without_ready_pods)

    @property
    @pulumi.getter(name="containerRestarts")
    def container_restarts(self) -> Optional[pulumi.Input['K8sWorkloadAnomaliesContainerRestartsArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "container_restarts")

    @container_restarts.setter
    def container_restarts(self, value: Optional[pulumi.Input['K8sWorkloadAnomaliesContainerRestartsArgs']]):
        pulumi.set(self, "container_restarts", value)

    @property
    @pulumi.getter(name="deploymentStuck")
    def deployment_stuck(self) -> Optional[pulumi.Input['K8sWorkloadAnomaliesDeploymentStuckArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "deployment_stuck")

    @deployment_stuck.setter
    def deployment_stuck(self, value: Optional[pulumi.Input['K8sWorkloadAnomaliesDeploymentStuckArgs']]):
        pulumi.set(self, "deployment_stuck", value)

    @property
    @pulumi.getter(name="highCpuThrottling")
    def high_cpu_throttling(self) -> Optional[pulumi.Input['K8sWorkloadAnomaliesHighCpuThrottlingArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "high_cpu_throttling")

    @high_cpu_throttling.setter
    def high_cpu_throttling(self, value: Optional[pulumi.Input['K8sWorkloadAnomaliesHighCpuThrottlingArgs']]):
        pulumi.set(self, "high_cpu_throttling", value)

    @property
    @pulumi.getter(name="highCpuUsage")
    def high_cpu_usage(self) -> Optional[pulumi.Input['K8sWorkloadAnomaliesHighCpuUsageArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "high_cpu_usage")

    @high_cpu_usage.setter
    def high_cpu_usage(self, value: Optional[pulumi.Input['K8sWorkloadAnomaliesHighCpuUsageArgs']]):
        pulumi.set(self, "high_cpu_usage", value)

    @property
    @pulumi.getter(name="highMemoryUsage")
    def high_memory_usage(self) -> Optional[pulumi.Input['K8sWorkloadAnomaliesHighMemoryUsageArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "high_memory_usage")

    @high_memory_usage.setter
    def high_memory_usage(self, value: Optional[pulumi.Input['K8sWorkloadAnomaliesHighMemoryUsageArgs']]):
        pulumi.set(self, "high_memory_usage", value)

    @property
    @pulumi.getter(name="jobFailureEvents")
    def job_failure_events(self) -> Optional[pulumi.Input['K8sWorkloadAnomaliesJobFailureEventsArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "job_failure_events")

    @job_failure_events.setter
    def job_failure_events(self, value: Optional[pulumi.Input['K8sWorkloadAnomaliesJobFailureEventsArgs']]):
        pulumi.set(self, "job_failure_events", value)

    @property
    @pulumi.getter(name="notAllPodsReady")
    def not_all_pods_ready(self) -> Optional[pulumi.Input['K8sWorkloadAnomaliesNotAllPodsReadyArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "not_all_pods_ready")

    @not_all_pods_ready.setter
    def not_all_pods_ready(self, value: Optional[pulumi.Input['K8sWorkloadAnomaliesNotAllPodsReadyArgs']]):
        pulumi.set(self, "not_all_pods_ready", value)

    @property
    @pulumi.getter(name="oomKills")
    def oom_kills(self) -> Optional[pulumi.Input['K8sWorkloadAnomaliesOomKillsArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "oom_kills")

    @oom_kills.setter
    def oom_kills(self, value: Optional[pulumi.Input['K8sWorkloadAnomaliesOomKillsArgs']]):
        pulumi.set(self, "oom_kills", value)

    @property
    @pulumi.getter(name="pendingPods")
    def pending_pods(self) -> Optional[pulumi.Input['K8sWorkloadAnomaliesPendingPodsArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "pending_pods")

    @pending_pods.setter
    def pending_pods(self, value: Optional[pulumi.Input['K8sWorkloadAnomaliesPendingPodsArgs']]):
        pulumi.set(self, "pending_pods", value)

    @property
    @pulumi.getter(name="podBackoffEvents")
    def pod_backoff_events(self) -> Optional[pulumi.Input['K8sWorkloadAnomaliesPodBackoffEventsArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "pod_backoff_events")

    @pod_backoff_events.setter
    def pod_backoff_events(self, value: Optional[pulumi.Input['K8sWorkloadAnomaliesPodBackoffEventsArgs']]):
        pulumi.set(self, "pod_backoff_events", value)

    @property
    @pulumi.getter(name="podEvictionEvents")
    def pod_eviction_events(self) -> Optional[pulumi.Input['K8sWorkloadAnomaliesPodEvictionEventsArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "pod_eviction_events")

    @pod_eviction_events.setter
    def pod_eviction_events(self, value: Optional[pulumi.Input['K8sWorkloadAnomaliesPodEvictionEventsArgs']]):
        pulumi.set(self, "pod_eviction_events", value)

    @property
    @pulumi.getter(name="podPreemptionEvents")
    def pod_preemption_events(self) -> Optional[pulumi.Input['K8sWorkloadAnomaliesPodPreemptionEventsArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "pod_preemption_events")

    @pod_preemption_events.setter
    def pod_preemption_events(self, value: Optional[pulumi.Input['K8sWorkloadAnomaliesPodPreemptionEventsArgs']]):
        pulumi.set(self, "pod_preemption_events", value)

    @property
    @pulumi.getter(name="podStuckInTerminating")
    def pod_stuck_in_terminating(self) -> Optional[pulumi.Input['K8sWorkloadAnomaliesPodStuckInTerminatingArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "pod_stuck_in_terminating")

    @pod_stuck_in_terminating.setter
    def pod_stuck_in_terminating(self, value: Optional[pulumi.Input['K8sWorkloadAnomaliesPodStuckInTerminatingArgs']]):
        pulumi.set(self, "pod_stuck_in_terminating", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="workloadWithoutReadyPods")
    def workload_without_ready_pods(self) -> Optional[pulumi.Input['K8sWorkloadAnomaliesWorkloadWithoutReadyPodsArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "workload_without_ready_pods")

    @workload_without_ready_pods.setter
    def workload_without_ready_pods(self, value: Optional[pulumi.Input['K8sWorkloadAnomaliesWorkloadWithoutReadyPodsArgs']]):
        pulumi.set(self, "workload_without_ready_pods", value)


class K8sWorkloadAnomalies(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 container_restarts: Optional[pulumi.Input[Union['K8sWorkloadAnomaliesContainerRestartsArgs', 'K8sWorkloadAnomaliesContainerRestartsArgsDict']]] = None,
                 deployment_stuck: Optional[pulumi.Input[Union['K8sWorkloadAnomaliesDeploymentStuckArgs', 'K8sWorkloadAnomaliesDeploymentStuckArgsDict']]] = None,
                 high_cpu_throttling: Optional[pulumi.Input[Union['K8sWorkloadAnomaliesHighCpuThrottlingArgs', 'K8sWorkloadAnomaliesHighCpuThrottlingArgsDict']]] = None,
                 high_cpu_usage: Optional[pulumi.Input[Union['K8sWorkloadAnomaliesHighCpuUsageArgs', 'K8sWorkloadAnomaliesHighCpuUsageArgsDict']]] = None,
                 high_memory_usage: Optional[pulumi.Input[Union['K8sWorkloadAnomaliesHighMemoryUsageArgs', 'K8sWorkloadAnomaliesHighMemoryUsageArgsDict']]] = None,
                 job_failure_events: Optional[pulumi.Input[Union['K8sWorkloadAnomaliesJobFailureEventsArgs', 'K8sWorkloadAnomaliesJobFailureEventsArgsDict']]] = None,
                 not_all_pods_ready: Optional[pulumi.Input[Union['K8sWorkloadAnomaliesNotAllPodsReadyArgs', 'K8sWorkloadAnomaliesNotAllPodsReadyArgsDict']]] = None,
                 oom_kills: Optional[pulumi.Input[Union['K8sWorkloadAnomaliesOomKillsArgs', 'K8sWorkloadAnomaliesOomKillsArgsDict']]] = None,
                 pending_pods: Optional[pulumi.Input[Union['K8sWorkloadAnomaliesPendingPodsArgs', 'K8sWorkloadAnomaliesPendingPodsArgsDict']]] = None,
                 pod_backoff_events: Optional[pulumi.Input[Union['K8sWorkloadAnomaliesPodBackoffEventsArgs', 'K8sWorkloadAnomaliesPodBackoffEventsArgsDict']]] = None,
                 pod_eviction_events: Optional[pulumi.Input[Union['K8sWorkloadAnomaliesPodEvictionEventsArgs', 'K8sWorkloadAnomaliesPodEvictionEventsArgsDict']]] = None,
                 pod_preemption_events: Optional[pulumi.Input[Union['K8sWorkloadAnomaliesPodPreemptionEventsArgs', 'K8sWorkloadAnomaliesPodPreemptionEventsArgsDict']]] = None,
                 pod_stuck_in_terminating: Optional[pulumi.Input[Union['K8sWorkloadAnomaliesPodStuckInTerminatingArgs', 'K8sWorkloadAnomaliesPodStuckInTerminatingArgsDict']]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 workload_without_ready_pods: Optional[pulumi.Input[Union['K8sWorkloadAnomaliesWorkloadWithoutReadyPodsArgs', 'K8sWorkloadAnomaliesWorkloadWithoutReadyPodsArgsDict']]] = None,
                 __props__=None):
        """
        Create a K8sWorkloadAnomalies resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['K8sWorkloadAnomaliesContainerRestartsArgs', 'K8sWorkloadAnomaliesContainerRestartsArgsDict']] container_restarts: no documentation available
        :param pulumi.Input[Union['K8sWorkloadAnomaliesDeploymentStuckArgs', 'K8sWorkloadAnomaliesDeploymentStuckArgsDict']] deployment_stuck: no documentation available
        :param pulumi.Input[Union['K8sWorkloadAnomaliesHighCpuThrottlingArgs', 'K8sWorkloadAnomaliesHighCpuThrottlingArgsDict']] high_cpu_throttling: no documentation available
        :param pulumi.Input[Union['K8sWorkloadAnomaliesHighCpuUsageArgs', 'K8sWorkloadAnomaliesHighCpuUsageArgsDict']] high_cpu_usage: no documentation available
        :param pulumi.Input[Union['K8sWorkloadAnomaliesHighMemoryUsageArgs', 'K8sWorkloadAnomaliesHighMemoryUsageArgsDict']] high_memory_usage: no documentation available
        :param pulumi.Input[Union['K8sWorkloadAnomaliesJobFailureEventsArgs', 'K8sWorkloadAnomaliesJobFailureEventsArgsDict']] job_failure_events: no documentation available
        :param pulumi.Input[Union['K8sWorkloadAnomaliesNotAllPodsReadyArgs', 'K8sWorkloadAnomaliesNotAllPodsReadyArgsDict']] not_all_pods_ready: no documentation available
        :param pulumi.Input[Union['K8sWorkloadAnomaliesOomKillsArgs', 'K8sWorkloadAnomaliesOomKillsArgsDict']] oom_kills: no documentation available
        :param pulumi.Input[Union['K8sWorkloadAnomaliesPendingPodsArgs', 'K8sWorkloadAnomaliesPendingPodsArgsDict']] pending_pods: no documentation available
        :param pulumi.Input[Union['K8sWorkloadAnomaliesPodBackoffEventsArgs', 'K8sWorkloadAnomaliesPodBackoffEventsArgsDict']] pod_backoff_events: no documentation available
        :param pulumi.Input[Union['K8sWorkloadAnomaliesPodEvictionEventsArgs', 'K8sWorkloadAnomaliesPodEvictionEventsArgsDict']] pod_eviction_events: no documentation available
        :param pulumi.Input[Union['K8sWorkloadAnomaliesPodPreemptionEventsArgs', 'K8sWorkloadAnomaliesPodPreemptionEventsArgsDict']] pod_preemption_events: no documentation available
        :param pulumi.Input[Union['K8sWorkloadAnomaliesPodStuckInTerminatingArgs', 'K8sWorkloadAnomaliesPodStuckInTerminatingArgsDict']] pod_stuck_in_terminating: no documentation available
        :param pulumi.Input[str] scope: The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
        :param pulumi.Input[Union['K8sWorkloadAnomaliesWorkloadWithoutReadyPodsArgs', 'K8sWorkloadAnomaliesWorkloadWithoutReadyPodsArgsDict']] workload_without_ready_pods: no documentation available
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: K8sWorkloadAnomaliesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a K8sWorkloadAnomalies resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param K8sWorkloadAnomaliesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(K8sWorkloadAnomaliesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 container_restarts: Optional[pulumi.Input[Union['K8sWorkloadAnomaliesContainerRestartsArgs', 'K8sWorkloadAnomaliesContainerRestartsArgsDict']]] = None,
                 deployment_stuck: Optional[pulumi.Input[Union['K8sWorkloadAnomaliesDeploymentStuckArgs', 'K8sWorkloadAnomaliesDeploymentStuckArgsDict']]] = None,
                 high_cpu_throttling: Optional[pulumi.Input[Union['K8sWorkloadAnomaliesHighCpuThrottlingArgs', 'K8sWorkloadAnomaliesHighCpuThrottlingArgsDict']]] = None,
                 high_cpu_usage: Optional[pulumi.Input[Union['K8sWorkloadAnomaliesHighCpuUsageArgs', 'K8sWorkloadAnomaliesHighCpuUsageArgsDict']]] = None,
                 high_memory_usage: Optional[pulumi.Input[Union['K8sWorkloadAnomaliesHighMemoryUsageArgs', 'K8sWorkloadAnomaliesHighMemoryUsageArgsDict']]] = None,
                 job_failure_events: Optional[pulumi.Input[Union['K8sWorkloadAnomaliesJobFailureEventsArgs', 'K8sWorkloadAnomaliesJobFailureEventsArgsDict']]] = None,
                 not_all_pods_ready: Optional[pulumi.Input[Union['K8sWorkloadAnomaliesNotAllPodsReadyArgs', 'K8sWorkloadAnomaliesNotAllPodsReadyArgsDict']]] = None,
                 oom_kills: Optional[pulumi.Input[Union['K8sWorkloadAnomaliesOomKillsArgs', 'K8sWorkloadAnomaliesOomKillsArgsDict']]] = None,
                 pending_pods: Optional[pulumi.Input[Union['K8sWorkloadAnomaliesPendingPodsArgs', 'K8sWorkloadAnomaliesPendingPodsArgsDict']]] = None,
                 pod_backoff_events: Optional[pulumi.Input[Union['K8sWorkloadAnomaliesPodBackoffEventsArgs', 'K8sWorkloadAnomaliesPodBackoffEventsArgsDict']]] = None,
                 pod_eviction_events: Optional[pulumi.Input[Union['K8sWorkloadAnomaliesPodEvictionEventsArgs', 'K8sWorkloadAnomaliesPodEvictionEventsArgsDict']]] = None,
                 pod_preemption_events: Optional[pulumi.Input[Union['K8sWorkloadAnomaliesPodPreemptionEventsArgs', 'K8sWorkloadAnomaliesPodPreemptionEventsArgsDict']]] = None,
                 pod_stuck_in_terminating: Optional[pulumi.Input[Union['K8sWorkloadAnomaliesPodStuckInTerminatingArgs', 'K8sWorkloadAnomaliesPodStuckInTerminatingArgsDict']]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 workload_without_ready_pods: Optional[pulumi.Input[Union['K8sWorkloadAnomaliesWorkloadWithoutReadyPodsArgs', 'K8sWorkloadAnomaliesWorkloadWithoutReadyPodsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = K8sWorkloadAnomaliesArgs.__new__(K8sWorkloadAnomaliesArgs)

            if container_restarts is None and not opts.urn:
                raise TypeError("Missing required property 'container_restarts'")
            __props__.__dict__["container_restarts"] = container_restarts
            if deployment_stuck is None and not opts.urn:
                raise TypeError("Missing required property 'deployment_stuck'")
            __props__.__dict__["deployment_stuck"] = deployment_stuck
            if high_cpu_throttling is None and not opts.urn:
                raise TypeError("Missing required property 'high_cpu_throttling'")
            __props__.__dict__["high_cpu_throttling"] = high_cpu_throttling
            if high_cpu_usage is None and not opts.urn:
                raise TypeError("Missing required property 'high_cpu_usage'")
            __props__.__dict__["high_cpu_usage"] = high_cpu_usage
            if high_memory_usage is None and not opts.urn:
                raise TypeError("Missing required property 'high_memory_usage'")
            __props__.__dict__["high_memory_usage"] = high_memory_usage
            if job_failure_events is None and not opts.urn:
                raise TypeError("Missing required property 'job_failure_events'")
            __props__.__dict__["job_failure_events"] = job_failure_events
            if not_all_pods_ready is None and not opts.urn:
                raise TypeError("Missing required property 'not_all_pods_ready'")
            __props__.__dict__["not_all_pods_ready"] = not_all_pods_ready
            if oom_kills is None and not opts.urn:
                raise TypeError("Missing required property 'oom_kills'")
            __props__.__dict__["oom_kills"] = oom_kills
            if pending_pods is None and not opts.urn:
                raise TypeError("Missing required property 'pending_pods'")
            __props__.__dict__["pending_pods"] = pending_pods
            if pod_backoff_events is None and not opts.urn:
                raise TypeError("Missing required property 'pod_backoff_events'")
            __props__.__dict__["pod_backoff_events"] = pod_backoff_events
            if pod_eviction_events is None and not opts.urn:
                raise TypeError("Missing required property 'pod_eviction_events'")
            __props__.__dict__["pod_eviction_events"] = pod_eviction_events
            if pod_preemption_events is None and not opts.urn:
                raise TypeError("Missing required property 'pod_preemption_events'")
            __props__.__dict__["pod_preemption_events"] = pod_preemption_events
            if pod_stuck_in_terminating is None and not opts.urn:
                raise TypeError("Missing required property 'pod_stuck_in_terminating'")
            __props__.__dict__["pod_stuck_in_terminating"] = pod_stuck_in_terminating
            __props__.__dict__["scope"] = scope
            if workload_without_ready_pods is None and not opts.urn:
                raise TypeError("Missing required property 'workload_without_ready_pods'")
            __props__.__dict__["workload_without_ready_pods"] = workload_without_ready_pods
        super(K8sWorkloadAnomalies, __self__).__init__(
            'dynatrace:index/k8sWorkloadAnomalies:K8sWorkloadAnomalies',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            container_restarts: Optional[pulumi.Input[Union['K8sWorkloadAnomaliesContainerRestartsArgs', 'K8sWorkloadAnomaliesContainerRestartsArgsDict']]] = None,
            deployment_stuck: Optional[pulumi.Input[Union['K8sWorkloadAnomaliesDeploymentStuckArgs', 'K8sWorkloadAnomaliesDeploymentStuckArgsDict']]] = None,
            high_cpu_throttling: Optional[pulumi.Input[Union['K8sWorkloadAnomaliesHighCpuThrottlingArgs', 'K8sWorkloadAnomaliesHighCpuThrottlingArgsDict']]] = None,
            high_cpu_usage: Optional[pulumi.Input[Union['K8sWorkloadAnomaliesHighCpuUsageArgs', 'K8sWorkloadAnomaliesHighCpuUsageArgsDict']]] = None,
            high_memory_usage: Optional[pulumi.Input[Union['K8sWorkloadAnomaliesHighMemoryUsageArgs', 'K8sWorkloadAnomaliesHighMemoryUsageArgsDict']]] = None,
            job_failure_events: Optional[pulumi.Input[Union['K8sWorkloadAnomaliesJobFailureEventsArgs', 'K8sWorkloadAnomaliesJobFailureEventsArgsDict']]] = None,
            not_all_pods_ready: Optional[pulumi.Input[Union['K8sWorkloadAnomaliesNotAllPodsReadyArgs', 'K8sWorkloadAnomaliesNotAllPodsReadyArgsDict']]] = None,
            oom_kills: Optional[pulumi.Input[Union['K8sWorkloadAnomaliesOomKillsArgs', 'K8sWorkloadAnomaliesOomKillsArgsDict']]] = None,
            pending_pods: Optional[pulumi.Input[Union['K8sWorkloadAnomaliesPendingPodsArgs', 'K8sWorkloadAnomaliesPendingPodsArgsDict']]] = None,
            pod_backoff_events: Optional[pulumi.Input[Union['K8sWorkloadAnomaliesPodBackoffEventsArgs', 'K8sWorkloadAnomaliesPodBackoffEventsArgsDict']]] = None,
            pod_eviction_events: Optional[pulumi.Input[Union['K8sWorkloadAnomaliesPodEvictionEventsArgs', 'K8sWorkloadAnomaliesPodEvictionEventsArgsDict']]] = None,
            pod_preemption_events: Optional[pulumi.Input[Union['K8sWorkloadAnomaliesPodPreemptionEventsArgs', 'K8sWorkloadAnomaliesPodPreemptionEventsArgsDict']]] = None,
            pod_stuck_in_terminating: Optional[pulumi.Input[Union['K8sWorkloadAnomaliesPodStuckInTerminatingArgs', 'K8sWorkloadAnomaliesPodStuckInTerminatingArgsDict']]] = None,
            scope: Optional[pulumi.Input[str]] = None,
            workload_without_ready_pods: Optional[pulumi.Input[Union['K8sWorkloadAnomaliesWorkloadWithoutReadyPodsArgs', 'K8sWorkloadAnomaliesWorkloadWithoutReadyPodsArgsDict']]] = None) -> 'K8sWorkloadAnomalies':
        """
        Get an existing K8sWorkloadAnomalies resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['K8sWorkloadAnomaliesContainerRestartsArgs', 'K8sWorkloadAnomaliesContainerRestartsArgsDict']] container_restarts: no documentation available
        :param pulumi.Input[Union['K8sWorkloadAnomaliesDeploymentStuckArgs', 'K8sWorkloadAnomaliesDeploymentStuckArgsDict']] deployment_stuck: no documentation available
        :param pulumi.Input[Union['K8sWorkloadAnomaliesHighCpuThrottlingArgs', 'K8sWorkloadAnomaliesHighCpuThrottlingArgsDict']] high_cpu_throttling: no documentation available
        :param pulumi.Input[Union['K8sWorkloadAnomaliesHighCpuUsageArgs', 'K8sWorkloadAnomaliesHighCpuUsageArgsDict']] high_cpu_usage: no documentation available
        :param pulumi.Input[Union['K8sWorkloadAnomaliesHighMemoryUsageArgs', 'K8sWorkloadAnomaliesHighMemoryUsageArgsDict']] high_memory_usage: no documentation available
        :param pulumi.Input[Union['K8sWorkloadAnomaliesJobFailureEventsArgs', 'K8sWorkloadAnomaliesJobFailureEventsArgsDict']] job_failure_events: no documentation available
        :param pulumi.Input[Union['K8sWorkloadAnomaliesNotAllPodsReadyArgs', 'K8sWorkloadAnomaliesNotAllPodsReadyArgsDict']] not_all_pods_ready: no documentation available
        :param pulumi.Input[Union['K8sWorkloadAnomaliesOomKillsArgs', 'K8sWorkloadAnomaliesOomKillsArgsDict']] oom_kills: no documentation available
        :param pulumi.Input[Union['K8sWorkloadAnomaliesPendingPodsArgs', 'K8sWorkloadAnomaliesPendingPodsArgsDict']] pending_pods: no documentation available
        :param pulumi.Input[Union['K8sWorkloadAnomaliesPodBackoffEventsArgs', 'K8sWorkloadAnomaliesPodBackoffEventsArgsDict']] pod_backoff_events: no documentation available
        :param pulumi.Input[Union['K8sWorkloadAnomaliesPodEvictionEventsArgs', 'K8sWorkloadAnomaliesPodEvictionEventsArgsDict']] pod_eviction_events: no documentation available
        :param pulumi.Input[Union['K8sWorkloadAnomaliesPodPreemptionEventsArgs', 'K8sWorkloadAnomaliesPodPreemptionEventsArgsDict']] pod_preemption_events: no documentation available
        :param pulumi.Input[Union['K8sWorkloadAnomaliesPodStuckInTerminatingArgs', 'K8sWorkloadAnomaliesPodStuckInTerminatingArgsDict']] pod_stuck_in_terminating: no documentation available
        :param pulumi.Input[str] scope: The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
        :param pulumi.Input[Union['K8sWorkloadAnomaliesWorkloadWithoutReadyPodsArgs', 'K8sWorkloadAnomaliesWorkloadWithoutReadyPodsArgsDict']] workload_without_ready_pods: no documentation available
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _K8sWorkloadAnomaliesState.__new__(_K8sWorkloadAnomaliesState)

        __props__.__dict__["container_restarts"] = container_restarts
        __props__.__dict__["deployment_stuck"] = deployment_stuck
        __props__.__dict__["high_cpu_throttling"] = high_cpu_throttling
        __props__.__dict__["high_cpu_usage"] = high_cpu_usage
        __props__.__dict__["high_memory_usage"] = high_memory_usage
        __props__.__dict__["job_failure_events"] = job_failure_events
        __props__.__dict__["not_all_pods_ready"] = not_all_pods_ready
        __props__.__dict__["oom_kills"] = oom_kills
        __props__.__dict__["pending_pods"] = pending_pods
        __props__.__dict__["pod_backoff_events"] = pod_backoff_events
        __props__.__dict__["pod_eviction_events"] = pod_eviction_events
        __props__.__dict__["pod_preemption_events"] = pod_preemption_events
        __props__.__dict__["pod_stuck_in_terminating"] = pod_stuck_in_terminating
        __props__.__dict__["scope"] = scope
        __props__.__dict__["workload_without_ready_pods"] = workload_without_ready_pods
        return K8sWorkloadAnomalies(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="containerRestarts")
    def container_restarts(self) -> pulumi.Output['outputs.K8sWorkloadAnomaliesContainerRestarts']:
        """
        no documentation available
        """
        return pulumi.get(self, "container_restarts")

    @property
    @pulumi.getter(name="deploymentStuck")
    def deployment_stuck(self) -> pulumi.Output['outputs.K8sWorkloadAnomaliesDeploymentStuck']:
        """
        no documentation available
        """
        return pulumi.get(self, "deployment_stuck")

    @property
    @pulumi.getter(name="highCpuThrottling")
    def high_cpu_throttling(self) -> pulumi.Output['outputs.K8sWorkloadAnomaliesHighCpuThrottling']:
        """
        no documentation available
        """
        return pulumi.get(self, "high_cpu_throttling")

    @property
    @pulumi.getter(name="highCpuUsage")
    def high_cpu_usage(self) -> pulumi.Output['outputs.K8sWorkloadAnomaliesHighCpuUsage']:
        """
        no documentation available
        """
        return pulumi.get(self, "high_cpu_usage")

    @property
    @pulumi.getter(name="highMemoryUsage")
    def high_memory_usage(self) -> pulumi.Output['outputs.K8sWorkloadAnomaliesHighMemoryUsage']:
        """
        no documentation available
        """
        return pulumi.get(self, "high_memory_usage")

    @property
    @pulumi.getter(name="jobFailureEvents")
    def job_failure_events(self) -> pulumi.Output['outputs.K8sWorkloadAnomaliesJobFailureEvents']:
        """
        no documentation available
        """
        return pulumi.get(self, "job_failure_events")

    @property
    @pulumi.getter(name="notAllPodsReady")
    def not_all_pods_ready(self) -> pulumi.Output['outputs.K8sWorkloadAnomaliesNotAllPodsReady']:
        """
        no documentation available
        """
        return pulumi.get(self, "not_all_pods_ready")

    @property
    @pulumi.getter(name="oomKills")
    def oom_kills(self) -> pulumi.Output['outputs.K8sWorkloadAnomaliesOomKills']:
        """
        no documentation available
        """
        return pulumi.get(self, "oom_kills")

    @property
    @pulumi.getter(name="pendingPods")
    def pending_pods(self) -> pulumi.Output['outputs.K8sWorkloadAnomaliesPendingPods']:
        """
        no documentation available
        """
        return pulumi.get(self, "pending_pods")

    @property
    @pulumi.getter(name="podBackoffEvents")
    def pod_backoff_events(self) -> pulumi.Output['outputs.K8sWorkloadAnomaliesPodBackoffEvents']:
        """
        no documentation available
        """
        return pulumi.get(self, "pod_backoff_events")

    @property
    @pulumi.getter(name="podEvictionEvents")
    def pod_eviction_events(self) -> pulumi.Output['outputs.K8sWorkloadAnomaliesPodEvictionEvents']:
        """
        no documentation available
        """
        return pulumi.get(self, "pod_eviction_events")

    @property
    @pulumi.getter(name="podPreemptionEvents")
    def pod_preemption_events(self) -> pulumi.Output['outputs.K8sWorkloadAnomaliesPodPreemptionEvents']:
        """
        no documentation available
        """
        return pulumi.get(self, "pod_preemption_events")

    @property
    @pulumi.getter(name="podStuckInTerminating")
    def pod_stuck_in_terminating(self) -> pulumi.Output['outputs.K8sWorkloadAnomaliesPodStuckInTerminating']:
        """
        no documentation available
        """
        return pulumi.get(self, "pod_stuck_in_terminating")

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Output[Optional[str]]:
        """
        The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="workloadWithoutReadyPods")
    def workload_without_ready_pods(self) -> pulumi.Output['outputs.K8sWorkloadAnomaliesWorkloadWithoutReadyPods']:
        """
        no documentation available
        """
        return pulumi.get(self, "workload_without_ready_pods")

