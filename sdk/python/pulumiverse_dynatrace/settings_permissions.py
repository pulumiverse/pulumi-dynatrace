# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SettingsPermissionsArgs', 'SettingsPermissions']

@pulumi.input_type
class SettingsPermissionsArgs:
    def __init__(__self__, *,
                 settings_object_id: pulumi.Input[_builtins.str],
                 all_users: Optional[pulumi.Input[_builtins.str]] = None,
                 groups: Optional[pulumi.Input['SettingsPermissionsGroupsArgs']] = None,
                 users: Optional[pulumi.Input['SettingsPermissionsUsersArgs']] = None):
        """
        The set of arguments for constructing a SettingsPermissions resource.
        :param pulumi.Input[_builtins.str] settings_object_id: The ID of the settings object for which access is to be granted. Here, you can use the `id` attribute of the respective settings object resource
        :param pulumi.Input[_builtins.str] all_users: Defines the default access level granted to all users in this environment. Allowed values are `read`, `write`, or `none`
        """
        pulumi.set(__self__, "settings_object_id", settings_object_id)
        if all_users is not None:
            pulumi.set(__self__, "all_users", all_users)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @_builtins.property
    @pulumi.getter(name="settingsObjectId")
    def settings_object_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the settings object for which access is to be granted. Here, you can use the `id` attribute of the respective settings object resource
        """
        return pulumi.get(self, "settings_object_id")

    @settings_object_id.setter
    def settings_object_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "settings_object_id", value)

    @_builtins.property
    @pulumi.getter(name="allUsers")
    def all_users(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Defines the default access level granted to all users in this environment. Allowed values are `read`, `write`, or `none`
        """
        return pulumi.get(self, "all_users")

    @all_users.setter
    def all_users(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "all_users", value)

    @_builtins.property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input['SettingsPermissionsGroupsArgs']]:
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input['SettingsPermissionsGroupsArgs']]):
        pulumi.set(self, "groups", value)

    @_builtins.property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input['SettingsPermissionsUsersArgs']]:
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input['SettingsPermissionsUsersArgs']]):
        pulumi.set(self, "users", value)


@pulumi.input_type
class _SettingsPermissionsState:
    def __init__(__self__, *,
                 all_users: Optional[pulumi.Input[_builtins.str]] = None,
                 groups: Optional[pulumi.Input['SettingsPermissionsGroupsArgs']] = None,
                 settings_object_id: Optional[pulumi.Input[_builtins.str]] = None,
                 users: Optional[pulumi.Input['SettingsPermissionsUsersArgs']] = None):
        """
        Input properties used for looking up and filtering SettingsPermissions resources.
        :param pulumi.Input[_builtins.str] all_users: Defines the default access level granted to all users in this environment. Allowed values are `read`, `write`, or `none`
        :param pulumi.Input[_builtins.str] settings_object_id: The ID of the settings object for which access is to be granted. Here, you can use the `id` attribute of the respective settings object resource
        """
        if all_users is not None:
            pulumi.set(__self__, "all_users", all_users)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if settings_object_id is not None:
            pulumi.set(__self__, "settings_object_id", settings_object_id)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @_builtins.property
    @pulumi.getter(name="allUsers")
    def all_users(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Defines the default access level granted to all users in this environment. Allowed values are `read`, `write`, or `none`
        """
        return pulumi.get(self, "all_users")

    @all_users.setter
    def all_users(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "all_users", value)

    @_builtins.property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input['SettingsPermissionsGroupsArgs']]:
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input['SettingsPermissionsGroupsArgs']]):
        pulumi.set(self, "groups", value)

    @_builtins.property
    @pulumi.getter(name="settingsObjectId")
    def settings_object_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the settings object for which access is to be granted. Here, you can use the `id` attribute of the respective settings object resource
        """
        return pulumi.get(self, "settings_object_id")

    @settings_object_id.setter
    def settings_object_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "settings_object_id", value)

    @_builtins.property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input['SettingsPermissionsUsersArgs']]:
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input['SettingsPermissionsUsersArgs']]):
        pulumi.set(self, "users", value)


@pulumi.type_token("dynatrace:index/settingsPermissions:SettingsPermissions")
class SettingsPermissions(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 all_users: Optional[pulumi.Input[_builtins.str]] = None,
                 groups: Optional[pulumi.Input[Union['SettingsPermissionsGroupsArgs', 'SettingsPermissionsGroupsArgsDict']]] = None,
                 settings_object_id: Optional[pulumi.Input[_builtins.str]] = None,
                 users: Optional[pulumi.Input[Union['SettingsPermissionsUsersArgs', 'SettingsPermissionsUsersArgsDict']]] = None,
                 __props__=None):
        """
        Create a SettingsPermissions resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] all_users: Defines the default access level granted to all users in this environment. Allowed values are `read`, `write`, or `none`
        :param pulumi.Input[_builtins.str] settings_object_id: The ID of the settings object for which access is to be granted. Here, you can use the `id` attribute of the respective settings object resource
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SettingsPermissionsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SettingsPermissions resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SettingsPermissionsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SettingsPermissionsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 all_users: Optional[pulumi.Input[_builtins.str]] = None,
                 groups: Optional[pulumi.Input[Union['SettingsPermissionsGroupsArgs', 'SettingsPermissionsGroupsArgsDict']]] = None,
                 settings_object_id: Optional[pulumi.Input[_builtins.str]] = None,
                 users: Optional[pulumi.Input[Union['SettingsPermissionsUsersArgs', 'SettingsPermissionsUsersArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SettingsPermissionsArgs.__new__(SettingsPermissionsArgs)

            __props__.__dict__["all_users"] = all_users
            __props__.__dict__["groups"] = groups
            if settings_object_id is None and not opts.urn:
                raise TypeError("Missing required property 'settings_object_id'")
            __props__.__dict__["settings_object_id"] = settings_object_id
            __props__.__dict__["users"] = users
        super(SettingsPermissions, __self__).__init__(
            'dynatrace:index/settingsPermissions:SettingsPermissions',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            all_users: Optional[pulumi.Input[_builtins.str]] = None,
            groups: Optional[pulumi.Input[Union['SettingsPermissionsGroupsArgs', 'SettingsPermissionsGroupsArgsDict']]] = None,
            settings_object_id: Optional[pulumi.Input[_builtins.str]] = None,
            users: Optional[pulumi.Input[Union['SettingsPermissionsUsersArgs', 'SettingsPermissionsUsersArgsDict']]] = None) -> 'SettingsPermissions':
        """
        Get an existing SettingsPermissions resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] all_users: Defines the default access level granted to all users in this environment. Allowed values are `read`, `write`, or `none`
        :param pulumi.Input[_builtins.str] settings_object_id: The ID of the settings object for which access is to be granted. Here, you can use the `id` attribute of the respective settings object resource
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SettingsPermissionsState.__new__(_SettingsPermissionsState)

        __props__.__dict__["all_users"] = all_users
        __props__.__dict__["groups"] = groups
        __props__.__dict__["settings_object_id"] = settings_object_id
        __props__.__dict__["users"] = users
        return SettingsPermissions(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="allUsers")
    def all_users(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Defines the default access level granted to all users in this environment. Allowed values are `read`, `write`, or `none`
        """
        return pulumi.get(self, "all_users")

    @_builtins.property
    @pulumi.getter
    def groups(self) -> pulumi.Output[Optional['outputs.SettingsPermissionsGroups']]:
        return pulumi.get(self, "groups")

    @_builtins.property
    @pulumi.getter(name="settingsObjectId")
    def settings_object_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the settings object for which access is to be granted. Here, you can use the `id` attribute of the respective settings object resource
        """
        return pulumi.get(self, "settings_object_id")

    @_builtins.property
    @pulumi.getter
    def users(self) -> pulumi.Output[Optional['outputs.SettingsPermissionsUsers']]:
        return pulumi.get(self, "users")

