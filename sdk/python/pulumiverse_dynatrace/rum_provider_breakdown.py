# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RumProviderBreakdownArgs', 'RumProviderBreakdown']

@pulumi.input_type
class RumProviderBreakdownArgs:
    def __init__(__self__, *,
                 domain_name_pattern_list: pulumi.Input['RumProviderBreakdownDomainNamePatternListArgs'],
                 report_public_improvement: pulumi.Input[bool],
                 resource_name: pulumi.Input[str],
                 resource_type: pulumi.Input[str],
                 icon_url: Optional[pulumi.Input[str]] = None,
                 insert_after: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a RumProviderBreakdown resource.
        :param pulumi.Input['RumProviderBreakdownDomainNamePatternListArgs'] domain_name_pattern_list: Domain name pattern
        :param pulumi.Input[bool] report_public_improvement: Send the patterns of this provider to Dynatrace to help us improve 3rd-party detection.
        :param pulumi.Input[str] resource_name: Resource name
        :param pulumi.Input[str] resource_type: Possible Values: `FirstParty`, `ThirdParty`, `Cdn`
        :param pulumi.Input[str] icon_url: Specify an URL for the provider's brand icon
        :param pulumi.Input[str] insert_after: Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        """
        pulumi.set(__self__, "domain_name_pattern_list", domain_name_pattern_list)
        pulumi.set(__self__, "report_public_improvement", report_public_improvement)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "resource_type", resource_type)
        if icon_url is not None:
            pulumi.set(__self__, "icon_url", icon_url)
        if insert_after is not None:
            pulumi.set(__self__, "insert_after", insert_after)

    @property
    @pulumi.getter(name="domainNamePatternList")
    def domain_name_pattern_list(self) -> pulumi.Input['RumProviderBreakdownDomainNamePatternListArgs']:
        """
        Domain name pattern
        """
        return pulumi.get(self, "domain_name_pattern_list")

    @domain_name_pattern_list.setter
    def domain_name_pattern_list(self, value: pulumi.Input['RumProviderBreakdownDomainNamePatternListArgs']):
        pulumi.set(self, "domain_name_pattern_list", value)

    @property
    @pulumi.getter(name="reportPublicImprovement")
    def report_public_improvement(self) -> pulumi.Input[bool]:
        """
        Send the patterns of this provider to Dynatrace to help us improve 3rd-party detection.
        """
        return pulumi.get(self, "report_public_improvement")

    @report_public_improvement.setter
    def report_public_improvement(self, value: pulumi.Input[bool]):
        pulumi.set(self, "report_public_improvement", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Input[str]:
        """
        Resource name
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[str]:
        """
        Possible Values: `FirstParty`, `ThirdParty`, `Cdn`
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="iconUrl")
    def icon_url(self) -> Optional[pulumi.Input[str]]:
        """
        Specify an URL for the provider's brand icon
        """
        return pulumi.get(self, "icon_url")

    @icon_url.setter
    def icon_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon_url", value)

    @property
    @pulumi.getter(name="insertAfter")
    def insert_after(self) -> Optional[pulumi.Input[str]]:
        """
        Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        """
        return pulumi.get(self, "insert_after")

    @insert_after.setter
    def insert_after(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "insert_after", value)


@pulumi.input_type
class _RumProviderBreakdownState:
    def __init__(__self__, *,
                 domain_name_pattern_list: Optional[pulumi.Input['RumProviderBreakdownDomainNamePatternListArgs']] = None,
                 icon_url: Optional[pulumi.Input[str]] = None,
                 insert_after: Optional[pulumi.Input[str]] = None,
                 report_public_improvement: Optional[pulumi.Input[bool]] = None,
                 resource_name: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RumProviderBreakdown resources.
        :param pulumi.Input['RumProviderBreakdownDomainNamePatternListArgs'] domain_name_pattern_list: Domain name pattern
        :param pulumi.Input[str] icon_url: Specify an URL for the provider's brand icon
        :param pulumi.Input[str] insert_after: Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        :param pulumi.Input[bool] report_public_improvement: Send the patterns of this provider to Dynatrace to help us improve 3rd-party detection.
        :param pulumi.Input[str] resource_name: Resource name
        :param pulumi.Input[str] resource_type: Possible Values: `FirstParty`, `ThirdParty`, `Cdn`
        """
        if domain_name_pattern_list is not None:
            pulumi.set(__self__, "domain_name_pattern_list", domain_name_pattern_list)
        if icon_url is not None:
            pulumi.set(__self__, "icon_url", icon_url)
        if insert_after is not None:
            pulumi.set(__self__, "insert_after", insert_after)
        if report_public_improvement is not None:
            pulumi.set(__self__, "report_public_improvement", report_public_improvement)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="domainNamePatternList")
    def domain_name_pattern_list(self) -> Optional[pulumi.Input['RumProviderBreakdownDomainNamePatternListArgs']]:
        """
        Domain name pattern
        """
        return pulumi.get(self, "domain_name_pattern_list")

    @domain_name_pattern_list.setter
    def domain_name_pattern_list(self, value: Optional[pulumi.Input['RumProviderBreakdownDomainNamePatternListArgs']]):
        pulumi.set(self, "domain_name_pattern_list", value)

    @property
    @pulumi.getter(name="iconUrl")
    def icon_url(self) -> Optional[pulumi.Input[str]]:
        """
        Specify an URL for the provider's brand icon
        """
        return pulumi.get(self, "icon_url")

    @icon_url.setter
    def icon_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon_url", value)

    @property
    @pulumi.getter(name="insertAfter")
    def insert_after(self) -> Optional[pulumi.Input[str]]:
        """
        Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        """
        return pulumi.get(self, "insert_after")

    @insert_after.setter
    def insert_after(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "insert_after", value)

    @property
    @pulumi.getter(name="reportPublicImprovement")
    def report_public_improvement(self) -> Optional[pulumi.Input[bool]]:
        """
        Send the patterns of this provider to Dynatrace to help us improve 3rd-party detection.
        """
        return pulumi.get(self, "report_public_improvement")

    @report_public_improvement.setter
    def report_public_improvement(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "report_public_improvement", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[str]]:
        """
        Resource name
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[str]]:
        """
        Possible Values: `FirstParty`, `ThirdParty`, `Cdn`
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type", value)


class RumProviderBreakdown(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 domain_name_pattern_list: Optional[pulumi.Input[Union['RumProviderBreakdownDomainNamePatternListArgs', 'RumProviderBreakdownDomainNamePatternListArgsDict']]] = None,
                 icon_url: Optional[pulumi.Input[str]] = None,
                 insert_after: Optional[pulumi.Input[str]] = None,
                 report_public_improvement: Optional[pulumi.Input[bool]] = None,
                 resource_name_: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a RumProviderBreakdown resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['RumProviderBreakdownDomainNamePatternListArgs', 'RumProviderBreakdownDomainNamePatternListArgsDict']] domain_name_pattern_list: Domain name pattern
        :param pulumi.Input[str] icon_url: Specify an URL for the provider's brand icon
        :param pulumi.Input[str] insert_after: Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        :param pulumi.Input[bool] report_public_improvement: Send the patterns of this provider to Dynatrace to help us improve 3rd-party detection.
        :param pulumi.Input[str] resource_name_: Resource name
        :param pulumi.Input[str] resource_type: Possible Values: `FirstParty`, `ThirdParty`, `Cdn`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RumProviderBreakdownArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a RumProviderBreakdown resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param RumProviderBreakdownArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RumProviderBreakdownArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 domain_name_pattern_list: Optional[pulumi.Input[Union['RumProviderBreakdownDomainNamePatternListArgs', 'RumProviderBreakdownDomainNamePatternListArgsDict']]] = None,
                 icon_url: Optional[pulumi.Input[str]] = None,
                 insert_after: Optional[pulumi.Input[str]] = None,
                 report_public_improvement: Optional[pulumi.Input[bool]] = None,
                 resource_name_: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RumProviderBreakdownArgs.__new__(RumProviderBreakdownArgs)

            if domain_name_pattern_list is None and not opts.urn:
                raise TypeError("Missing required property 'domain_name_pattern_list'")
            __props__.__dict__["domain_name_pattern_list"] = domain_name_pattern_list
            __props__.__dict__["icon_url"] = icon_url
            __props__.__dict__["insert_after"] = insert_after
            if report_public_improvement is None and not opts.urn:
                raise TypeError("Missing required property 'report_public_improvement'")
            __props__.__dict__["report_public_improvement"] = report_public_improvement
            if resource_name_ is None and not opts.urn:
                raise TypeError("Missing required property 'resource_name_'")
            __props__.__dict__["resource_name"] = resource_name_
            if resource_type is None and not opts.urn:
                raise TypeError("Missing required property 'resource_type'")
            __props__.__dict__["resource_type"] = resource_type
        super(RumProviderBreakdown, __self__).__init__(
            'dynatrace:index/rumProviderBreakdown:RumProviderBreakdown',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            domain_name_pattern_list: Optional[pulumi.Input[Union['RumProviderBreakdownDomainNamePatternListArgs', 'RumProviderBreakdownDomainNamePatternListArgsDict']]] = None,
            icon_url: Optional[pulumi.Input[str]] = None,
            insert_after: Optional[pulumi.Input[str]] = None,
            report_public_improvement: Optional[pulumi.Input[bool]] = None,
            resource_name_: Optional[pulumi.Input[str]] = None,
            resource_type: Optional[pulumi.Input[str]] = None) -> 'RumProviderBreakdown':
        """
        Get an existing RumProviderBreakdown resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['RumProviderBreakdownDomainNamePatternListArgs', 'RumProviderBreakdownDomainNamePatternListArgsDict']] domain_name_pattern_list: Domain name pattern
        :param pulumi.Input[str] icon_url: Specify an URL for the provider's brand icon
        :param pulumi.Input[str] insert_after: Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        :param pulumi.Input[bool] report_public_improvement: Send the patterns of this provider to Dynatrace to help us improve 3rd-party detection.
        :param pulumi.Input[str] resource_name_: Resource name
        :param pulumi.Input[str] resource_type: Possible Values: `FirstParty`, `ThirdParty`, `Cdn`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RumProviderBreakdownState.__new__(_RumProviderBreakdownState)

        __props__.__dict__["domain_name_pattern_list"] = domain_name_pattern_list
        __props__.__dict__["icon_url"] = icon_url
        __props__.__dict__["insert_after"] = insert_after
        __props__.__dict__["report_public_improvement"] = report_public_improvement
        __props__.__dict__["resource_name"] = resource_name_
        __props__.__dict__["resource_type"] = resource_type
        return RumProviderBreakdown(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="domainNamePatternList")
    def domain_name_pattern_list(self) -> pulumi.Output['outputs.RumProviderBreakdownDomainNamePatternList']:
        """
        Domain name pattern
        """
        return pulumi.get(self, "domain_name_pattern_list")

    @property
    @pulumi.getter(name="iconUrl")
    def icon_url(self) -> pulumi.Output[Optional[str]]:
        """
        Specify an URL for the provider's brand icon
        """
        return pulumi.get(self, "icon_url")

    @property
    @pulumi.getter(name="insertAfter")
    def insert_after(self) -> pulumi.Output[str]:
        """
        Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        """
        return pulumi.get(self, "insert_after")

    @property
    @pulumi.getter(name="reportPublicImprovement")
    def report_public_improvement(self) -> pulumi.Output[bool]:
        """
        Send the patterns of this provider to Dynatrace to help us improve 3rd-party detection.
        """
        return pulumi.get(self, "report_public_improvement")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Output[str]:
        """
        Resource name
        """
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[str]:
        """
        Possible Values: `FirstParty`, `ThirdParty`, `Cdn`
        """
        return pulumi.get(self, "resource_type")

