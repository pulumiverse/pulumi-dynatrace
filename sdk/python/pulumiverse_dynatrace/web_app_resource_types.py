# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['WebAppResourceTypesArgs', 'WebAppResourceTypes']

@pulumi.input_type
class WebAppResourceTypesArgs:
    def __init__(__self__, *,
                 primary_resource_type: pulumi.Input[str],
                 regular_expression: pulumi.Input[str],
                 insert_after: Optional[pulumi.Input[str]] = None,
                 secondary_resource_type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a WebAppResourceTypes resource.
        :param pulumi.Input[str] primary_resource_type: Possible Values: `CSS`, `IMAGE`, `OTHER`, `SCRIPT`
        :param pulumi.Input[str] regular_expression: The regular expression to detect the resource.
        :param pulumi.Input[str] insert_after: Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        :param pulumi.Input[str] secondary_resource_type: The secondary type of the resource.
        """
        pulumi.set(__self__, "primary_resource_type", primary_resource_type)
        pulumi.set(__self__, "regular_expression", regular_expression)
        if insert_after is not None:
            pulumi.set(__self__, "insert_after", insert_after)
        if secondary_resource_type is not None:
            pulumi.set(__self__, "secondary_resource_type", secondary_resource_type)

    @property
    @pulumi.getter(name="primaryResourceType")
    def primary_resource_type(self) -> pulumi.Input[str]:
        """
        Possible Values: `CSS`, `IMAGE`, `OTHER`, `SCRIPT`
        """
        return pulumi.get(self, "primary_resource_type")

    @primary_resource_type.setter
    def primary_resource_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "primary_resource_type", value)

    @property
    @pulumi.getter(name="regularExpression")
    def regular_expression(self) -> pulumi.Input[str]:
        """
        The regular expression to detect the resource.
        """
        return pulumi.get(self, "regular_expression")

    @regular_expression.setter
    def regular_expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "regular_expression", value)

    @property
    @pulumi.getter(name="insertAfter")
    def insert_after(self) -> Optional[pulumi.Input[str]]:
        """
        Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        """
        return pulumi.get(self, "insert_after")

    @insert_after.setter
    def insert_after(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "insert_after", value)

    @property
    @pulumi.getter(name="secondaryResourceType")
    def secondary_resource_type(self) -> Optional[pulumi.Input[str]]:
        """
        The secondary type of the resource.
        """
        return pulumi.get(self, "secondary_resource_type")

    @secondary_resource_type.setter
    def secondary_resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_resource_type", value)


@pulumi.input_type
class _WebAppResourceTypesState:
    def __init__(__self__, *,
                 insert_after: Optional[pulumi.Input[str]] = None,
                 primary_resource_type: Optional[pulumi.Input[str]] = None,
                 regular_expression: Optional[pulumi.Input[str]] = None,
                 secondary_resource_type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering WebAppResourceTypes resources.
        :param pulumi.Input[str] insert_after: Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        :param pulumi.Input[str] primary_resource_type: Possible Values: `CSS`, `IMAGE`, `OTHER`, `SCRIPT`
        :param pulumi.Input[str] regular_expression: The regular expression to detect the resource.
        :param pulumi.Input[str] secondary_resource_type: The secondary type of the resource.
        """
        if insert_after is not None:
            pulumi.set(__self__, "insert_after", insert_after)
        if primary_resource_type is not None:
            pulumi.set(__self__, "primary_resource_type", primary_resource_type)
        if regular_expression is not None:
            pulumi.set(__self__, "regular_expression", regular_expression)
        if secondary_resource_type is not None:
            pulumi.set(__self__, "secondary_resource_type", secondary_resource_type)

    @property
    @pulumi.getter(name="insertAfter")
    def insert_after(self) -> Optional[pulumi.Input[str]]:
        """
        Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        """
        return pulumi.get(self, "insert_after")

    @insert_after.setter
    def insert_after(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "insert_after", value)

    @property
    @pulumi.getter(name="primaryResourceType")
    def primary_resource_type(self) -> Optional[pulumi.Input[str]]:
        """
        Possible Values: `CSS`, `IMAGE`, `OTHER`, `SCRIPT`
        """
        return pulumi.get(self, "primary_resource_type")

    @primary_resource_type.setter
    def primary_resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_resource_type", value)

    @property
    @pulumi.getter(name="regularExpression")
    def regular_expression(self) -> Optional[pulumi.Input[str]]:
        """
        The regular expression to detect the resource.
        """
        return pulumi.get(self, "regular_expression")

    @regular_expression.setter
    def regular_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regular_expression", value)

    @property
    @pulumi.getter(name="secondaryResourceType")
    def secondary_resource_type(self) -> Optional[pulumi.Input[str]]:
        """
        The secondary type of the resource.
        """
        return pulumi.get(self, "secondary_resource_type")

    @secondary_resource_type.setter
    def secondary_resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_resource_type", value)


class WebAppResourceTypes(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 insert_after: Optional[pulumi.Input[str]] = None,
                 primary_resource_type: Optional[pulumi.Input[str]] = None,
                 regular_expression: Optional[pulumi.Input[str]] = None,
                 secondary_resource_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a WebAppResourceTypes resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] insert_after: Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        :param pulumi.Input[str] primary_resource_type: Possible Values: `CSS`, `IMAGE`, `OTHER`, `SCRIPT`
        :param pulumi.Input[str] regular_expression: The regular expression to detect the resource.
        :param pulumi.Input[str] secondary_resource_type: The secondary type of the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WebAppResourceTypesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a WebAppResourceTypes resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param WebAppResourceTypesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WebAppResourceTypesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 insert_after: Optional[pulumi.Input[str]] = None,
                 primary_resource_type: Optional[pulumi.Input[str]] = None,
                 regular_expression: Optional[pulumi.Input[str]] = None,
                 secondary_resource_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WebAppResourceTypesArgs.__new__(WebAppResourceTypesArgs)

            __props__.__dict__["insert_after"] = insert_after
            if primary_resource_type is None and not opts.urn:
                raise TypeError("Missing required property 'primary_resource_type'")
            __props__.__dict__["primary_resource_type"] = primary_resource_type
            if regular_expression is None and not opts.urn:
                raise TypeError("Missing required property 'regular_expression'")
            __props__.__dict__["regular_expression"] = regular_expression
            __props__.__dict__["secondary_resource_type"] = secondary_resource_type
        super(WebAppResourceTypes, __self__).__init__(
            'dynatrace:index/webAppResourceTypes:WebAppResourceTypes',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            insert_after: Optional[pulumi.Input[str]] = None,
            primary_resource_type: Optional[pulumi.Input[str]] = None,
            regular_expression: Optional[pulumi.Input[str]] = None,
            secondary_resource_type: Optional[pulumi.Input[str]] = None) -> 'WebAppResourceTypes':
        """
        Get an existing WebAppResourceTypes resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] insert_after: Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        :param pulumi.Input[str] primary_resource_type: Possible Values: `CSS`, `IMAGE`, `OTHER`, `SCRIPT`
        :param pulumi.Input[str] regular_expression: The regular expression to detect the resource.
        :param pulumi.Input[str] secondary_resource_type: The secondary type of the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WebAppResourceTypesState.__new__(_WebAppResourceTypesState)

        __props__.__dict__["insert_after"] = insert_after
        __props__.__dict__["primary_resource_type"] = primary_resource_type
        __props__.__dict__["regular_expression"] = regular_expression
        __props__.__dict__["secondary_resource_type"] = secondary_resource_type
        return WebAppResourceTypes(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="insertAfter")
    def insert_after(self) -> pulumi.Output[str]:
        """
        Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        """
        return pulumi.get(self, "insert_after")

    @property
    @pulumi.getter(name="primaryResourceType")
    def primary_resource_type(self) -> pulumi.Output[str]:
        """
        Possible Values: `CSS`, `IMAGE`, `OTHER`, `SCRIPT`
        """
        return pulumi.get(self, "primary_resource_type")

    @property
    @pulumi.getter(name="regularExpression")
    def regular_expression(self) -> pulumi.Output[str]:
        """
        The regular expression to detect the resource.
        """
        return pulumi.get(self, "regular_expression")

    @property
    @pulumi.getter(name="secondaryResourceType")
    def secondary_resource_type(self) -> pulumi.Output[Optional[str]]:
        """
        The secondary type of the resource.
        """
        return pulumi.get(self, "secondary_resource_type")

