# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AttackSettingsArgs', 'AttackSettings']

@pulumi.input_type
class AttackSettingsArgs:
    def __init__(__self__, *,
                 default_attack_handling: pulumi.Input['AttackSettingsDefaultAttackHandlingArgs'],
                 enabled: pulumi.Input[bool]):
        """
        The set of arguments for constructing a AttackSettings resource.
        :param pulumi.Input['AttackSettingsDefaultAttackHandlingArgs'] default_attack_handling: Define global incoming attack control
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        """
        pulumi.set(__self__, "default_attack_handling", default_attack_handling)
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="defaultAttackHandling")
    def default_attack_handling(self) -> pulumi.Input['AttackSettingsDefaultAttackHandlingArgs']:
        """
        Define global incoming attack control
        """
        return pulumi.get(self, "default_attack_handling")

    @default_attack_handling.setter
    def default_attack_handling(self, value: pulumi.Input['AttackSettingsDefaultAttackHandlingArgs']):
        pulumi.set(self, "default_attack_handling", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class _AttackSettingsState:
    def __init__(__self__, *,
                 default_attack_handling: Optional[pulumi.Input['AttackSettingsDefaultAttackHandlingArgs']] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering AttackSettings resources.
        :param pulumi.Input['AttackSettingsDefaultAttackHandlingArgs'] default_attack_handling: Define global incoming attack control
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        """
        if default_attack_handling is not None:
            pulumi.set(__self__, "default_attack_handling", default_attack_handling)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="defaultAttackHandling")
    def default_attack_handling(self) -> Optional[pulumi.Input['AttackSettingsDefaultAttackHandlingArgs']]:
        """
        Define global incoming attack control
        """
        return pulumi.get(self, "default_attack_handling")

    @default_attack_handling.setter
    def default_attack_handling(self, value: Optional[pulumi.Input['AttackSettingsDefaultAttackHandlingArgs']]):
        pulumi.set(self, "default_attack_handling", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


class AttackSettings(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 default_attack_handling: Optional[pulumi.Input[Union['AttackSettingsDefaultAttackHandlingArgs', 'AttackSettingsDefaultAttackHandlingArgsDict']]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Create a AttackSettings resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['AttackSettingsDefaultAttackHandlingArgs', 'AttackSettingsDefaultAttackHandlingArgsDict']] default_attack_handling: Define global incoming attack control
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AttackSettingsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AttackSettings resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AttackSettingsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AttackSettingsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 default_attack_handling: Optional[pulumi.Input[Union['AttackSettingsDefaultAttackHandlingArgs', 'AttackSettingsDefaultAttackHandlingArgsDict']]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AttackSettingsArgs.__new__(AttackSettingsArgs)

            if default_attack_handling is None and not opts.urn:
                raise TypeError("Missing required property 'default_attack_handling'")
            __props__.__dict__["default_attack_handling"] = default_attack_handling
            if enabled is None and not opts.urn:
                raise TypeError("Missing required property 'enabled'")
            __props__.__dict__["enabled"] = enabled
        super(AttackSettings, __self__).__init__(
            'dynatrace:index/attackSettings:AttackSettings',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            default_attack_handling: Optional[pulumi.Input[Union['AttackSettingsDefaultAttackHandlingArgs', 'AttackSettingsDefaultAttackHandlingArgsDict']]] = None,
            enabled: Optional[pulumi.Input[bool]] = None) -> 'AttackSettings':
        """
        Get an existing AttackSettings resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['AttackSettingsDefaultAttackHandlingArgs', 'AttackSettingsDefaultAttackHandlingArgsDict']] default_attack_handling: Define global incoming attack control
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AttackSettingsState.__new__(_AttackSettingsState)

        __props__.__dict__["default_attack_handling"] = default_attack_handling
        __props__.__dict__["enabled"] = enabled
        return AttackSettings(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="defaultAttackHandling")
    def default_attack_handling(self) -> pulumi.Output['outputs.AttackSettingsDefaultAttackHandling']:
        """
        Define global incoming attack control
        """
        return pulumi.get(self, "default_attack_handling")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

