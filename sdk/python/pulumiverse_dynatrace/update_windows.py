# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['UpdateWindowsArgs', 'UpdateWindows']

@pulumi.input_type
class UpdateWindowsArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 recurrence: pulumi.Input[str],
                 daily_recurrence: Optional[pulumi.Input['UpdateWindowsDailyRecurrenceArgs']] = None,
                 monthly_recurrence: Optional[pulumi.Input['UpdateWindowsMonthlyRecurrenceArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 once_recurrence: Optional[pulumi.Input['UpdateWindowsOnceRecurrenceArgs']] = None,
                 weekly_recurrence: Optional[pulumi.Input['UpdateWindowsWeeklyRecurrenceArgs']] = None):
        """
        The set of arguments for constructing a UpdateWindows resource.
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[str] recurrence: Possible Values: `MONTHLY`, `ONCE`, `DAILY`, `WEEKLY`
        :param pulumi.Input['UpdateWindowsDailyRecurrenceArgs'] daily_recurrence: no documentation available
        :param pulumi.Input['UpdateWindowsMonthlyRecurrenceArgs'] monthly_recurrence: no documentation available
        :param pulumi.Input[str] name: Name
        :param pulumi.Input['UpdateWindowsOnceRecurrenceArgs'] once_recurrence: no documentation available
        :param pulumi.Input['UpdateWindowsWeeklyRecurrenceArgs'] weekly_recurrence: no documentation available
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "recurrence", recurrence)
        if daily_recurrence is not None:
            pulumi.set(__self__, "daily_recurrence", daily_recurrence)
        if monthly_recurrence is not None:
            pulumi.set(__self__, "monthly_recurrence", monthly_recurrence)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if once_recurrence is not None:
            pulumi.set(__self__, "once_recurrence", once_recurrence)
        if weekly_recurrence is not None:
            pulumi.set(__self__, "weekly_recurrence", weekly_recurrence)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def recurrence(self) -> pulumi.Input[str]:
        """
        Possible Values: `MONTHLY`, `ONCE`, `DAILY`, `WEEKLY`
        """
        return pulumi.get(self, "recurrence")

    @recurrence.setter
    def recurrence(self, value: pulumi.Input[str]):
        pulumi.set(self, "recurrence", value)

    @property
    @pulumi.getter(name="dailyRecurrence")
    def daily_recurrence(self) -> Optional[pulumi.Input['UpdateWindowsDailyRecurrenceArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "daily_recurrence")

    @daily_recurrence.setter
    def daily_recurrence(self, value: Optional[pulumi.Input['UpdateWindowsDailyRecurrenceArgs']]):
        pulumi.set(self, "daily_recurrence", value)

    @property
    @pulumi.getter(name="monthlyRecurrence")
    def monthly_recurrence(self) -> Optional[pulumi.Input['UpdateWindowsMonthlyRecurrenceArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "monthly_recurrence")

    @monthly_recurrence.setter
    def monthly_recurrence(self, value: Optional[pulumi.Input['UpdateWindowsMonthlyRecurrenceArgs']]):
        pulumi.set(self, "monthly_recurrence", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="onceRecurrence")
    def once_recurrence(self) -> Optional[pulumi.Input['UpdateWindowsOnceRecurrenceArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "once_recurrence")

    @once_recurrence.setter
    def once_recurrence(self, value: Optional[pulumi.Input['UpdateWindowsOnceRecurrenceArgs']]):
        pulumi.set(self, "once_recurrence", value)

    @property
    @pulumi.getter(name="weeklyRecurrence")
    def weekly_recurrence(self) -> Optional[pulumi.Input['UpdateWindowsWeeklyRecurrenceArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "weekly_recurrence")

    @weekly_recurrence.setter
    def weekly_recurrence(self, value: Optional[pulumi.Input['UpdateWindowsWeeklyRecurrenceArgs']]):
        pulumi.set(self, "weekly_recurrence", value)


@pulumi.input_type
class _UpdateWindowsState:
    def __init__(__self__, *,
                 daily_recurrence: Optional[pulumi.Input['UpdateWindowsDailyRecurrenceArgs']] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 monthly_recurrence: Optional[pulumi.Input['UpdateWindowsMonthlyRecurrenceArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 once_recurrence: Optional[pulumi.Input['UpdateWindowsOnceRecurrenceArgs']] = None,
                 recurrence: Optional[pulumi.Input[str]] = None,
                 weekly_recurrence: Optional[pulumi.Input['UpdateWindowsWeeklyRecurrenceArgs']] = None):
        """
        Input properties used for looking up and filtering UpdateWindows resources.
        :param pulumi.Input['UpdateWindowsDailyRecurrenceArgs'] daily_recurrence: no documentation available
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['UpdateWindowsMonthlyRecurrenceArgs'] monthly_recurrence: no documentation available
        :param pulumi.Input[str] name: Name
        :param pulumi.Input['UpdateWindowsOnceRecurrenceArgs'] once_recurrence: no documentation available
        :param pulumi.Input[str] recurrence: Possible Values: `MONTHLY`, `ONCE`, `DAILY`, `WEEKLY`
        :param pulumi.Input['UpdateWindowsWeeklyRecurrenceArgs'] weekly_recurrence: no documentation available
        """
        if daily_recurrence is not None:
            pulumi.set(__self__, "daily_recurrence", daily_recurrence)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if monthly_recurrence is not None:
            pulumi.set(__self__, "monthly_recurrence", monthly_recurrence)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if once_recurrence is not None:
            pulumi.set(__self__, "once_recurrence", once_recurrence)
        if recurrence is not None:
            pulumi.set(__self__, "recurrence", recurrence)
        if weekly_recurrence is not None:
            pulumi.set(__self__, "weekly_recurrence", weekly_recurrence)

    @property
    @pulumi.getter(name="dailyRecurrence")
    def daily_recurrence(self) -> Optional[pulumi.Input['UpdateWindowsDailyRecurrenceArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "daily_recurrence")

    @daily_recurrence.setter
    def daily_recurrence(self, value: Optional[pulumi.Input['UpdateWindowsDailyRecurrenceArgs']]):
        pulumi.set(self, "daily_recurrence", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="monthlyRecurrence")
    def monthly_recurrence(self) -> Optional[pulumi.Input['UpdateWindowsMonthlyRecurrenceArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "monthly_recurrence")

    @monthly_recurrence.setter
    def monthly_recurrence(self, value: Optional[pulumi.Input['UpdateWindowsMonthlyRecurrenceArgs']]):
        pulumi.set(self, "monthly_recurrence", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="onceRecurrence")
    def once_recurrence(self) -> Optional[pulumi.Input['UpdateWindowsOnceRecurrenceArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "once_recurrence")

    @once_recurrence.setter
    def once_recurrence(self, value: Optional[pulumi.Input['UpdateWindowsOnceRecurrenceArgs']]):
        pulumi.set(self, "once_recurrence", value)

    @property
    @pulumi.getter
    def recurrence(self) -> Optional[pulumi.Input[str]]:
        """
        Possible Values: `MONTHLY`, `ONCE`, `DAILY`, `WEEKLY`
        """
        return pulumi.get(self, "recurrence")

    @recurrence.setter
    def recurrence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recurrence", value)

    @property
    @pulumi.getter(name="weeklyRecurrence")
    def weekly_recurrence(self) -> Optional[pulumi.Input['UpdateWindowsWeeklyRecurrenceArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "weekly_recurrence")

    @weekly_recurrence.setter
    def weekly_recurrence(self, value: Optional[pulumi.Input['UpdateWindowsWeeklyRecurrenceArgs']]):
        pulumi.set(self, "weekly_recurrence", value)


class UpdateWindows(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 daily_recurrence: Optional[pulumi.Input[Union['UpdateWindowsDailyRecurrenceArgs', 'UpdateWindowsDailyRecurrenceArgsDict']]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 monthly_recurrence: Optional[pulumi.Input[Union['UpdateWindowsMonthlyRecurrenceArgs', 'UpdateWindowsMonthlyRecurrenceArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 once_recurrence: Optional[pulumi.Input[Union['UpdateWindowsOnceRecurrenceArgs', 'UpdateWindowsOnceRecurrenceArgsDict']]] = None,
                 recurrence: Optional[pulumi.Input[str]] = None,
                 weekly_recurrence: Optional[pulumi.Input[Union['UpdateWindowsWeeklyRecurrenceArgs', 'UpdateWindowsWeeklyRecurrenceArgsDict']]] = None,
                 __props__=None):
        """
        Create a UpdateWindows resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['UpdateWindowsDailyRecurrenceArgs', 'UpdateWindowsDailyRecurrenceArgsDict']] daily_recurrence: no documentation available
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[Union['UpdateWindowsMonthlyRecurrenceArgs', 'UpdateWindowsMonthlyRecurrenceArgsDict']] monthly_recurrence: no documentation available
        :param pulumi.Input[str] name: Name
        :param pulumi.Input[Union['UpdateWindowsOnceRecurrenceArgs', 'UpdateWindowsOnceRecurrenceArgsDict']] once_recurrence: no documentation available
        :param pulumi.Input[str] recurrence: Possible Values: `MONTHLY`, `ONCE`, `DAILY`, `WEEKLY`
        :param pulumi.Input[Union['UpdateWindowsWeeklyRecurrenceArgs', 'UpdateWindowsWeeklyRecurrenceArgsDict']] weekly_recurrence: no documentation available
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UpdateWindowsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a UpdateWindows resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param UpdateWindowsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UpdateWindowsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 daily_recurrence: Optional[pulumi.Input[Union['UpdateWindowsDailyRecurrenceArgs', 'UpdateWindowsDailyRecurrenceArgsDict']]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 monthly_recurrence: Optional[pulumi.Input[Union['UpdateWindowsMonthlyRecurrenceArgs', 'UpdateWindowsMonthlyRecurrenceArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 once_recurrence: Optional[pulumi.Input[Union['UpdateWindowsOnceRecurrenceArgs', 'UpdateWindowsOnceRecurrenceArgsDict']]] = None,
                 recurrence: Optional[pulumi.Input[str]] = None,
                 weekly_recurrence: Optional[pulumi.Input[Union['UpdateWindowsWeeklyRecurrenceArgs', 'UpdateWindowsWeeklyRecurrenceArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UpdateWindowsArgs.__new__(UpdateWindowsArgs)

            __props__.__dict__["daily_recurrence"] = daily_recurrence
            if enabled is None and not opts.urn:
                raise TypeError("Missing required property 'enabled'")
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["monthly_recurrence"] = monthly_recurrence
            __props__.__dict__["name"] = name
            __props__.__dict__["once_recurrence"] = once_recurrence
            if recurrence is None and not opts.urn:
                raise TypeError("Missing required property 'recurrence'")
            __props__.__dict__["recurrence"] = recurrence
            __props__.__dict__["weekly_recurrence"] = weekly_recurrence
        super(UpdateWindows, __self__).__init__(
            'dynatrace:index/updateWindows:UpdateWindows',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            daily_recurrence: Optional[pulumi.Input[Union['UpdateWindowsDailyRecurrenceArgs', 'UpdateWindowsDailyRecurrenceArgsDict']]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            monthly_recurrence: Optional[pulumi.Input[Union['UpdateWindowsMonthlyRecurrenceArgs', 'UpdateWindowsMonthlyRecurrenceArgsDict']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            once_recurrence: Optional[pulumi.Input[Union['UpdateWindowsOnceRecurrenceArgs', 'UpdateWindowsOnceRecurrenceArgsDict']]] = None,
            recurrence: Optional[pulumi.Input[str]] = None,
            weekly_recurrence: Optional[pulumi.Input[Union['UpdateWindowsWeeklyRecurrenceArgs', 'UpdateWindowsWeeklyRecurrenceArgsDict']]] = None) -> 'UpdateWindows':
        """
        Get an existing UpdateWindows resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['UpdateWindowsDailyRecurrenceArgs', 'UpdateWindowsDailyRecurrenceArgsDict']] daily_recurrence: no documentation available
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[Union['UpdateWindowsMonthlyRecurrenceArgs', 'UpdateWindowsMonthlyRecurrenceArgsDict']] monthly_recurrence: no documentation available
        :param pulumi.Input[str] name: Name
        :param pulumi.Input[Union['UpdateWindowsOnceRecurrenceArgs', 'UpdateWindowsOnceRecurrenceArgsDict']] once_recurrence: no documentation available
        :param pulumi.Input[str] recurrence: Possible Values: `MONTHLY`, `ONCE`, `DAILY`, `WEEKLY`
        :param pulumi.Input[Union['UpdateWindowsWeeklyRecurrenceArgs', 'UpdateWindowsWeeklyRecurrenceArgsDict']] weekly_recurrence: no documentation available
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UpdateWindowsState.__new__(_UpdateWindowsState)

        __props__.__dict__["daily_recurrence"] = daily_recurrence
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["monthly_recurrence"] = monthly_recurrence
        __props__.__dict__["name"] = name
        __props__.__dict__["once_recurrence"] = once_recurrence
        __props__.__dict__["recurrence"] = recurrence
        __props__.__dict__["weekly_recurrence"] = weekly_recurrence
        return UpdateWindows(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dailyRecurrence")
    def daily_recurrence(self) -> pulumi.Output[Optional['outputs.UpdateWindowsDailyRecurrence']]:
        """
        no documentation available
        """
        return pulumi.get(self, "daily_recurrence")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="monthlyRecurrence")
    def monthly_recurrence(self) -> pulumi.Output[Optional['outputs.UpdateWindowsMonthlyRecurrence']]:
        """
        no documentation available
        """
        return pulumi.get(self, "monthly_recurrence")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="onceRecurrence")
    def once_recurrence(self) -> pulumi.Output[Optional['outputs.UpdateWindowsOnceRecurrence']]:
        """
        no documentation available
        """
        return pulumi.get(self, "once_recurrence")

    @property
    @pulumi.getter
    def recurrence(self) -> pulumi.Output[str]:
        """
        Possible Values: `MONTHLY`, `ONCE`, `DAILY`, `WEEKLY`
        """
        return pulumi.get(self, "recurrence")

    @property
    @pulumi.getter(name="weeklyRecurrence")
    def weekly_recurrence(self) -> pulumi.Output[Optional['outputs.UpdateWindowsWeeklyRecurrence']]:
        """
        no documentation available
        """
        return pulumi.get(self, "weekly_recurrence")

