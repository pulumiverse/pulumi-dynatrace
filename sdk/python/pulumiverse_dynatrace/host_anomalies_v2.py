# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['HostAnomaliesV2Args', 'HostAnomaliesV2']

@pulumi.input_type
class HostAnomaliesV2Args:
    def __init__(__self__, *,
                 host: pulumi.Input['HostAnomaliesV2HostArgs'],
                 network: pulumi.Input['HostAnomaliesV2NetworkArgs'],
                 scope: pulumi.Input[str]):
        """
        The set of arguments for constructing a HostAnomaliesV2 resource.
        :param pulumi.Input['HostAnomaliesV2HostArgs'] host: Hosts
        :param pulumi.Input['HostAnomaliesV2NetworkArgs'] network: Network
        :param pulumi.Input[str] scope: The scope of this setting (HOST HOST_GROUP environment)
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input['HostAnomaliesV2HostArgs']:
        """
        Hosts
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input['HostAnomaliesV2HostArgs']):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def network(self) -> pulumi.Input['HostAnomaliesV2NetworkArgs']:
        """
        Network
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: pulumi.Input['HostAnomaliesV2NetworkArgs']):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Input[str]:
        """
        The scope of this setting (HOST HOST_GROUP environment)
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: pulumi.Input[str]):
        pulumi.set(self, "scope", value)


@pulumi.input_type
class _HostAnomaliesV2State:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input['HostAnomaliesV2HostArgs']] = None,
                 network: Optional[pulumi.Input['HostAnomaliesV2NetworkArgs']] = None,
                 scope: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering HostAnomaliesV2 resources.
        :param pulumi.Input['HostAnomaliesV2HostArgs'] host: Hosts
        :param pulumi.Input['HostAnomaliesV2NetworkArgs'] network: Network
        :param pulumi.Input[str] scope: The scope of this setting (HOST HOST_GROUP environment)
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input['HostAnomaliesV2HostArgs']]:
        """
        Hosts
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input['HostAnomaliesV2HostArgs']]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input['HostAnomaliesV2NetworkArgs']]:
        """
        Network
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input['HostAnomaliesV2NetworkArgs']]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        The scope of this setting (HOST HOST_GROUP environment)
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)


class HostAnomaliesV2(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 host: Optional[pulumi.Input[Union['HostAnomaliesV2HostArgs', 'HostAnomaliesV2HostArgsDict']]] = None,
                 network: Optional[pulumi.Input[Union['HostAnomaliesV2NetworkArgs', 'HostAnomaliesV2NetworkArgsDict']]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a HostAnomaliesV2 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['HostAnomaliesV2HostArgs', 'HostAnomaliesV2HostArgsDict']] host: Hosts
        :param pulumi.Input[Union['HostAnomaliesV2NetworkArgs', 'HostAnomaliesV2NetworkArgsDict']] network: Network
        :param pulumi.Input[str] scope: The scope of this setting (HOST HOST_GROUP environment)
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: HostAnomaliesV2Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a HostAnomaliesV2 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param HostAnomaliesV2Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(HostAnomaliesV2Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 host: Optional[pulumi.Input[Union['HostAnomaliesV2HostArgs', 'HostAnomaliesV2HostArgsDict']]] = None,
                 network: Optional[pulumi.Input[Union['HostAnomaliesV2NetworkArgs', 'HostAnomaliesV2NetworkArgsDict']]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = HostAnomaliesV2Args.__new__(HostAnomaliesV2Args)

            if host is None and not opts.urn:
                raise TypeError("Missing required property 'host'")
            __props__.__dict__["host"] = host
            if network is None and not opts.urn:
                raise TypeError("Missing required property 'network'")
            __props__.__dict__["network"] = network
            if scope is None and not opts.urn:
                raise TypeError("Missing required property 'scope'")
            __props__.__dict__["scope"] = scope
        super(HostAnomaliesV2, __self__).__init__(
            'dynatrace:index/hostAnomaliesV2:HostAnomaliesV2',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            host: Optional[pulumi.Input[Union['HostAnomaliesV2HostArgs', 'HostAnomaliesV2HostArgsDict']]] = None,
            network: Optional[pulumi.Input[Union['HostAnomaliesV2NetworkArgs', 'HostAnomaliesV2NetworkArgsDict']]] = None,
            scope: Optional[pulumi.Input[str]] = None) -> 'HostAnomaliesV2':
        """
        Get an existing HostAnomaliesV2 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['HostAnomaliesV2HostArgs', 'HostAnomaliesV2HostArgsDict']] host: Hosts
        :param pulumi.Input[Union['HostAnomaliesV2NetworkArgs', 'HostAnomaliesV2NetworkArgsDict']] network: Network
        :param pulumi.Input[str] scope: The scope of this setting (HOST HOST_GROUP environment)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _HostAnomaliesV2State.__new__(_HostAnomaliesV2State)

        __props__.__dict__["host"] = host
        __props__.__dict__["network"] = network
        __props__.__dict__["scope"] = scope
        return HostAnomaliesV2(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Output['outputs.HostAnomaliesV2Host']:
        """
        Hosts
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def network(self) -> pulumi.Output['outputs.HostAnomaliesV2Network']:
        """
        Network
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Output[str]:
        """
        The scope of this setting (HOST HOST_GROUP environment)
        """
        return pulumi.get(self, "scope")

