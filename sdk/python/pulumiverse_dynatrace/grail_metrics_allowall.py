# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['GrailMetricsAllowallArgs', 'GrailMetricsAllowall']

@pulumi.input_type
class GrailMetricsAllowallArgs:
    def __init__(__self__, *,
                 allow_all: pulumi.Input[bool]):
        """
        The set of arguments for constructing a GrailMetricsAllowall resource.
        :param pulumi.Input[bool] allow_all: When enabled every custom metric will be ingested to Grail. Warning: this setting can cause [unexpected billing!](https://docs.dynatrace.com/docs/dynatrace-api/environment-api/metric-v2/best-practices#avoid-high-cardinality-limits)
        """
        pulumi.set(__self__, "allow_all", allow_all)

    @property
    @pulumi.getter(name="allowAll")
    def allow_all(self) -> pulumi.Input[bool]:
        """
        When enabled every custom metric will be ingested to Grail. Warning: this setting can cause [unexpected billing!](https://docs.dynatrace.com/docs/dynatrace-api/environment-api/metric-v2/best-practices#avoid-high-cardinality-limits)
        """
        return pulumi.get(self, "allow_all")

    @allow_all.setter
    def allow_all(self, value: pulumi.Input[bool]):
        pulumi.set(self, "allow_all", value)


@pulumi.input_type
class _GrailMetricsAllowallState:
    def __init__(__self__, *,
                 allow_all: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering GrailMetricsAllowall resources.
        :param pulumi.Input[bool] allow_all: When enabled every custom metric will be ingested to Grail. Warning: this setting can cause [unexpected billing!](https://docs.dynatrace.com/docs/dynatrace-api/environment-api/metric-v2/best-practices#avoid-high-cardinality-limits)
        """
        if allow_all is not None:
            pulumi.set(__self__, "allow_all", allow_all)

    @property
    @pulumi.getter(name="allowAll")
    def allow_all(self) -> Optional[pulumi.Input[bool]]:
        """
        When enabled every custom metric will be ingested to Grail. Warning: this setting can cause [unexpected billing!](https://docs.dynatrace.com/docs/dynatrace-api/environment-api/metric-v2/best-practices#avoid-high-cardinality-limits)
        """
        return pulumi.get(self, "allow_all")

    @allow_all.setter
    def allow_all(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_all", value)


class GrailMetricsAllowall(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_all: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Create a GrailMetricsAllowall resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_all: When enabled every custom metric will be ingested to Grail. Warning: this setting can cause [unexpected billing!](https://docs.dynatrace.com/docs/dynatrace-api/environment-api/metric-v2/best-practices#avoid-high-cardinality-limits)
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GrailMetricsAllowallArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a GrailMetricsAllowall resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param GrailMetricsAllowallArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GrailMetricsAllowallArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_all: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GrailMetricsAllowallArgs.__new__(GrailMetricsAllowallArgs)

            if allow_all is None and not opts.urn:
                raise TypeError("Missing required property 'allow_all'")
            __props__.__dict__["allow_all"] = allow_all
        super(GrailMetricsAllowall, __self__).__init__(
            'dynatrace:index/grailMetricsAllowall:GrailMetricsAllowall',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_all: Optional[pulumi.Input[bool]] = None) -> 'GrailMetricsAllowall':
        """
        Get an existing GrailMetricsAllowall resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_all: When enabled every custom metric will be ingested to Grail. Warning: this setting can cause [unexpected billing!](https://docs.dynatrace.com/docs/dynatrace-api/environment-api/metric-v2/best-practices#avoid-high-cardinality-limits)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GrailMetricsAllowallState.__new__(_GrailMetricsAllowallState)

        __props__.__dict__["allow_all"] = allow_all
        return GrailMetricsAllowall(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowAll")
    def allow_all(self) -> pulumi.Output[bool]:
        """
        When enabled every custom metric will be ingested to Grail. Warning: this setting can cause [unexpected billing!](https://docs.dynatrace.com/docs/dynatrace-api/environment-api/metric-v2/best-practices#avoid-high-cardinality-limits)
        """
        return pulumi.get(self, "allow_all")

