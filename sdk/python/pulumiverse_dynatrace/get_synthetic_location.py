# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetSyntheticLocationResult',
    'AwaitableGetSyntheticLocationResult',
    'get_synthetic_location',
    'get_synthetic_location_output',
]

@pulumi.output_type
class GetSyntheticLocationResult:
    """
    A collection of values returned by getSyntheticLocation.
    """
    def __init__(__self__, cloud_platform=None, entity_id=None, id=None, ips=None, name=None, stage=None, status=None, type=None):
        if cloud_platform and not isinstance(cloud_platform, str):
            raise TypeError("Expected argument 'cloud_platform' to be a str")
        pulumi.set(__self__, "cloud_platform", cloud_platform)
        if entity_id and not isinstance(entity_id, str):
            raise TypeError("Expected argument 'entity_id' to be a str")
        pulumi.set(__self__, "entity_id", entity_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ips and not isinstance(ips, list):
            raise TypeError("Expected argument 'ips' to be a list")
        pulumi.set(__self__, "ips", ips)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if stage and not isinstance(stage, str):
            raise TypeError("Expected argument 'stage' to be a str")
        pulumi.set(__self__, "stage", stage)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="cloudPlatform")
    def cloud_platform(self) -> str:
        """
        The cloud provider where the location is hosted.
        """
        return pulumi.get(self, "cloud_platform")

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[str]:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ips(self) -> Sequence[str]:
        return pulumi.get(self, "ips")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def stage(self) -> str:
        return pulumi.get(self, "stage")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


class AwaitableGetSyntheticLocationResult(GetSyntheticLocationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSyntheticLocationResult(
            cloud_platform=self.cloud_platform,
            entity_id=self.entity_id,
            id=self.id,
            ips=self.ips,
            name=self.name,
            stage=self.stage,
            status=self.status,
            type=self.type)


def get_synthetic_location(cloud_platform: Optional[str] = None,
                           entity_id: Optional[str] = None,
                           ips: Optional[Sequence[str]] = None,
                           name: Optional[str] = None,
                           stage: Optional[str] = None,
                           status: Optional[str] = None,
                           type: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSyntheticLocationResult:
    """
    The synthetic location data source allows the location ID to be retrieved based off of provided parameters.


    :param str cloud_platform: The cloud provider where the location is hosted.
    """
    __args__ = dict()
    __args__['cloudPlatform'] = cloud_platform
    __args__['entityId'] = entity_id
    __args__['ips'] = ips
    __args__['name'] = name
    __args__['stage'] = stage
    __args__['status'] = status
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('dynatrace:index/getSyntheticLocation:getSyntheticLocation', __args__, opts=opts, typ=GetSyntheticLocationResult).value

    return AwaitableGetSyntheticLocationResult(
        cloud_platform=pulumi.get(__ret__, 'cloud_platform'),
        entity_id=pulumi.get(__ret__, 'entity_id'),
        id=pulumi.get(__ret__, 'id'),
        ips=pulumi.get(__ret__, 'ips'),
        name=pulumi.get(__ret__, 'name'),
        stage=pulumi.get(__ret__, 'stage'),
        status=pulumi.get(__ret__, 'status'),
        type=pulumi.get(__ret__, 'type'))
def get_synthetic_location_output(cloud_platform: Optional[pulumi.Input[Optional[str]]] = None,
                                  entity_id: Optional[pulumi.Input[Optional[str]]] = None,
                                  ips: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                  name: Optional[pulumi.Input[Optional[str]]] = None,
                                  stage: Optional[pulumi.Input[Optional[str]]] = None,
                                  status: Optional[pulumi.Input[Optional[str]]] = None,
                                  type: Optional[pulumi.Input[Optional[str]]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSyntheticLocationResult]:
    """
    The synthetic location data source allows the location ID to be retrieved based off of provided parameters.


    :param str cloud_platform: The cloud provider where the location is hosted.
    """
    __args__ = dict()
    __args__['cloudPlatform'] = cloud_platform
    __args__['entityId'] = entity_id
    __args__['ips'] = ips
    __args__['name'] = name
    __args__['stage'] = stage
    __args__['status'] = status
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('dynatrace:index/getSyntheticLocation:getSyntheticLocation', __args__, opts=opts, typ=GetSyntheticLocationResult)
    return __ret__.apply(lambda __response__: GetSyntheticLocationResult(
        cloud_platform=pulumi.get(__response__, 'cloud_platform'),
        entity_id=pulumi.get(__response__, 'entity_id'),
        id=pulumi.get(__response__, 'id'),
        ips=pulumi.get(__response__, 'ips'),
        name=pulumi.get(__response__, 'name'),
        stage=pulumi.get(__response__, 'stage'),
        status=pulumi.get(__response__, 'status'),
        type=pulumi.get(__response__, 'type')))
