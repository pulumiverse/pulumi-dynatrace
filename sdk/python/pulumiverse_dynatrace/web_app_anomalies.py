# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['WebAppAnomaliesArgs', 'WebAppAnomalies']

@pulumi.input_type
class WebAppAnomaliesArgs:
    def __init__(__self__, *,
                 error_rate: pulumi.Input['WebAppAnomaliesErrorRateArgs'],
                 response_time: pulumi.Input['WebAppAnomaliesResponseTimeArgs'],
                 traffic_drops: pulumi.Input['WebAppAnomaliesTrafficDropsArgs'],
                 traffic_spikes: pulumi.Input['WebAppAnomaliesTrafficSpikesArgs'],
                 scope: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a WebAppAnomalies resource.
        :param pulumi.Input['WebAppAnomaliesErrorRateArgs'] error_rate: Error rate
        :param pulumi.Input['WebAppAnomaliesResponseTimeArgs'] response_time: Response time
        :param pulumi.Input['WebAppAnomaliesTrafficDropsArgs'] traffic_drops: Detect traffic drops
        :param pulumi.Input['WebAppAnomaliesTrafficSpikesArgs'] traffic_spikes: Detect traffic spikes
        :param pulumi.Input[str] scope: The scope of this setting (APPLICATION_METHOD, APPLICATION). Omit this property if you want to cover the whole environment.
        """
        pulumi.set(__self__, "error_rate", error_rate)
        pulumi.set(__self__, "response_time", response_time)
        pulumi.set(__self__, "traffic_drops", traffic_drops)
        pulumi.set(__self__, "traffic_spikes", traffic_spikes)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter(name="errorRate")
    def error_rate(self) -> pulumi.Input['WebAppAnomaliesErrorRateArgs']:
        """
        Error rate
        """
        return pulumi.get(self, "error_rate")

    @error_rate.setter
    def error_rate(self, value: pulumi.Input['WebAppAnomaliesErrorRateArgs']):
        pulumi.set(self, "error_rate", value)

    @property
    @pulumi.getter(name="responseTime")
    def response_time(self) -> pulumi.Input['WebAppAnomaliesResponseTimeArgs']:
        """
        Response time
        """
        return pulumi.get(self, "response_time")

    @response_time.setter
    def response_time(self, value: pulumi.Input['WebAppAnomaliesResponseTimeArgs']):
        pulumi.set(self, "response_time", value)

    @property
    @pulumi.getter(name="trafficDrops")
    def traffic_drops(self) -> pulumi.Input['WebAppAnomaliesTrafficDropsArgs']:
        """
        Detect traffic drops
        """
        return pulumi.get(self, "traffic_drops")

    @traffic_drops.setter
    def traffic_drops(self, value: pulumi.Input['WebAppAnomaliesTrafficDropsArgs']):
        pulumi.set(self, "traffic_drops", value)

    @property
    @pulumi.getter(name="trafficSpikes")
    def traffic_spikes(self) -> pulumi.Input['WebAppAnomaliesTrafficSpikesArgs']:
        """
        Detect traffic spikes
        """
        return pulumi.get(self, "traffic_spikes")

    @traffic_spikes.setter
    def traffic_spikes(self, value: pulumi.Input['WebAppAnomaliesTrafficSpikesArgs']):
        pulumi.set(self, "traffic_spikes", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        The scope of this setting (APPLICATION_METHOD, APPLICATION). Omit this property if you want to cover the whole environment.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)


@pulumi.input_type
class _WebAppAnomaliesState:
    def __init__(__self__, *,
                 error_rate: Optional[pulumi.Input['WebAppAnomaliesErrorRateArgs']] = None,
                 response_time: Optional[pulumi.Input['WebAppAnomaliesResponseTimeArgs']] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 traffic_drops: Optional[pulumi.Input['WebAppAnomaliesTrafficDropsArgs']] = None,
                 traffic_spikes: Optional[pulumi.Input['WebAppAnomaliesTrafficSpikesArgs']] = None):
        """
        Input properties used for looking up and filtering WebAppAnomalies resources.
        :param pulumi.Input['WebAppAnomaliesErrorRateArgs'] error_rate: Error rate
        :param pulumi.Input['WebAppAnomaliesResponseTimeArgs'] response_time: Response time
        :param pulumi.Input[str] scope: The scope of this setting (APPLICATION_METHOD, APPLICATION). Omit this property if you want to cover the whole environment.
        :param pulumi.Input['WebAppAnomaliesTrafficDropsArgs'] traffic_drops: Detect traffic drops
        :param pulumi.Input['WebAppAnomaliesTrafficSpikesArgs'] traffic_spikes: Detect traffic spikes
        """
        if error_rate is not None:
            pulumi.set(__self__, "error_rate", error_rate)
        if response_time is not None:
            pulumi.set(__self__, "response_time", response_time)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if traffic_drops is not None:
            pulumi.set(__self__, "traffic_drops", traffic_drops)
        if traffic_spikes is not None:
            pulumi.set(__self__, "traffic_spikes", traffic_spikes)

    @property
    @pulumi.getter(name="errorRate")
    def error_rate(self) -> Optional[pulumi.Input['WebAppAnomaliesErrorRateArgs']]:
        """
        Error rate
        """
        return pulumi.get(self, "error_rate")

    @error_rate.setter
    def error_rate(self, value: Optional[pulumi.Input['WebAppAnomaliesErrorRateArgs']]):
        pulumi.set(self, "error_rate", value)

    @property
    @pulumi.getter(name="responseTime")
    def response_time(self) -> Optional[pulumi.Input['WebAppAnomaliesResponseTimeArgs']]:
        """
        Response time
        """
        return pulumi.get(self, "response_time")

    @response_time.setter
    def response_time(self, value: Optional[pulumi.Input['WebAppAnomaliesResponseTimeArgs']]):
        pulumi.set(self, "response_time", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        The scope of this setting (APPLICATION_METHOD, APPLICATION). Omit this property if you want to cover the whole environment.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="trafficDrops")
    def traffic_drops(self) -> Optional[pulumi.Input['WebAppAnomaliesTrafficDropsArgs']]:
        """
        Detect traffic drops
        """
        return pulumi.get(self, "traffic_drops")

    @traffic_drops.setter
    def traffic_drops(self, value: Optional[pulumi.Input['WebAppAnomaliesTrafficDropsArgs']]):
        pulumi.set(self, "traffic_drops", value)

    @property
    @pulumi.getter(name="trafficSpikes")
    def traffic_spikes(self) -> Optional[pulumi.Input['WebAppAnomaliesTrafficSpikesArgs']]:
        """
        Detect traffic spikes
        """
        return pulumi.get(self, "traffic_spikes")

    @traffic_spikes.setter
    def traffic_spikes(self, value: Optional[pulumi.Input['WebAppAnomaliesTrafficSpikesArgs']]):
        pulumi.set(self, "traffic_spikes", value)


class WebAppAnomalies(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 error_rate: Optional[pulumi.Input[Union['WebAppAnomaliesErrorRateArgs', 'WebAppAnomaliesErrorRateArgsDict']]] = None,
                 response_time: Optional[pulumi.Input[Union['WebAppAnomaliesResponseTimeArgs', 'WebAppAnomaliesResponseTimeArgsDict']]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 traffic_drops: Optional[pulumi.Input[Union['WebAppAnomaliesTrafficDropsArgs', 'WebAppAnomaliesTrafficDropsArgsDict']]] = None,
                 traffic_spikes: Optional[pulumi.Input[Union['WebAppAnomaliesTrafficSpikesArgs', 'WebAppAnomaliesTrafficSpikesArgsDict']]] = None,
                 __props__=None):
        """
        Create a WebAppAnomalies resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['WebAppAnomaliesErrorRateArgs', 'WebAppAnomaliesErrorRateArgsDict']] error_rate: Error rate
        :param pulumi.Input[Union['WebAppAnomaliesResponseTimeArgs', 'WebAppAnomaliesResponseTimeArgsDict']] response_time: Response time
        :param pulumi.Input[str] scope: The scope of this setting (APPLICATION_METHOD, APPLICATION). Omit this property if you want to cover the whole environment.
        :param pulumi.Input[Union['WebAppAnomaliesTrafficDropsArgs', 'WebAppAnomaliesTrafficDropsArgsDict']] traffic_drops: Detect traffic drops
        :param pulumi.Input[Union['WebAppAnomaliesTrafficSpikesArgs', 'WebAppAnomaliesTrafficSpikesArgsDict']] traffic_spikes: Detect traffic spikes
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WebAppAnomaliesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a WebAppAnomalies resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param WebAppAnomaliesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WebAppAnomaliesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 error_rate: Optional[pulumi.Input[Union['WebAppAnomaliesErrorRateArgs', 'WebAppAnomaliesErrorRateArgsDict']]] = None,
                 response_time: Optional[pulumi.Input[Union['WebAppAnomaliesResponseTimeArgs', 'WebAppAnomaliesResponseTimeArgsDict']]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 traffic_drops: Optional[pulumi.Input[Union['WebAppAnomaliesTrafficDropsArgs', 'WebAppAnomaliesTrafficDropsArgsDict']]] = None,
                 traffic_spikes: Optional[pulumi.Input[Union['WebAppAnomaliesTrafficSpikesArgs', 'WebAppAnomaliesTrafficSpikesArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WebAppAnomaliesArgs.__new__(WebAppAnomaliesArgs)

            if error_rate is None and not opts.urn:
                raise TypeError("Missing required property 'error_rate'")
            __props__.__dict__["error_rate"] = error_rate
            if response_time is None and not opts.urn:
                raise TypeError("Missing required property 'response_time'")
            __props__.__dict__["response_time"] = response_time
            __props__.__dict__["scope"] = scope
            if traffic_drops is None and not opts.urn:
                raise TypeError("Missing required property 'traffic_drops'")
            __props__.__dict__["traffic_drops"] = traffic_drops
            if traffic_spikes is None and not opts.urn:
                raise TypeError("Missing required property 'traffic_spikes'")
            __props__.__dict__["traffic_spikes"] = traffic_spikes
        super(WebAppAnomalies, __self__).__init__(
            'dynatrace:index/webAppAnomalies:WebAppAnomalies',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            error_rate: Optional[pulumi.Input[Union['WebAppAnomaliesErrorRateArgs', 'WebAppAnomaliesErrorRateArgsDict']]] = None,
            response_time: Optional[pulumi.Input[Union['WebAppAnomaliesResponseTimeArgs', 'WebAppAnomaliesResponseTimeArgsDict']]] = None,
            scope: Optional[pulumi.Input[str]] = None,
            traffic_drops: Optional[pulumi.Input[Union['WebAppAnomaliesTrafficDropsArgs', 'WebAppAnomaliesTrafficDropsArgsDict']]] = None,
            traffic_spikes: Optional[pulumi.Input[Union['WebAppAnomaliesTrafficSpikesArgs', 'WebAppAnomaliesTrafficSpikesArgsDict']]] = None) -> 'WebAppAnomalies':
        """
        Get an existing WebAppAnomalies resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['WebAppAnomaliesErrorRateArgs', 'WebAppAnomaliesErrorRateArgsDict']] error_rate: Error rate
        :param pulumi.Input[Union['WebAppAnomaliesResponseTimeArgs', 'WebAppAnomaliesResponseTimeArgsDict']] response_time: Response time
        :param pulumi.Input[str] scope: The scope of this setting (APPLICATION_METHOD, APPLICATION). Omit this property if you want to cover the whole environment.
        :param pulumi.Input[Union['WebAppAnomaliesTrafficDropsArgs', 'WebAppAnomaliesTrafficDropsArgsDict']] traffic_drops: Detect traffic drops
        :param pulumi.Input[Union['WebAppAnomaliesTrafficSpikesArgs', 'WebAppAnomaliesTrafficSpikesArgsDict']] traffic_spikes: Detect traffic spikes
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WebAppAnomaliesState.__new__(_WebAppAnomaliesState)

        __props__.__dict__["error_rate"] = error_rate
        __props__.__dict__["response_time"] = response_time
        __props__.__dict__["scope"] = scope
        __props__.__dict__["traffic_drops"] = traffic_drops
        __props__.__dict__["traffic_spikes"] = traffic_spikes
        return WebAppAnomalies(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="errorRate")
    def error_rate(self) -> pulumi.Output['outputs.WebAppAnomaliesErrorRate']:
        """
        Error rate
        """
        return pulumi.get(self, "error_rate")

    @property
    @pulumi.getter(name="responseTime")
    def response_time(self) -> pulumi.Output['outputs.WebAppAnomaliesResponseTime']:
        """
        Response time
        """
        return pulumi.get(self, "response_time")

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Output[Optional[str]]:
        """
        The scope of this setting (APPLICATION_METHOD, APPLICATION). Omit this property if you want to cover the whole environment.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="trafficDrops")
    def traffic_drops(self) -> pulumi.Output['outputs.WebAppAnomaliesTrafficDrops']:
        """
        Detect traffic drops
        """
        return pulumi.get(self, "traffic_drops")

    @property
    @pulumi.getter(name="trafficSpikes")
    def traffic_spikes(self) -> pulumi.Output['outputs.WebAppAnomaliesTrafficSpikes']:
        """
        Detect traffic spikes
        """
        return pulumi.get(self, "traffic_spikes")

