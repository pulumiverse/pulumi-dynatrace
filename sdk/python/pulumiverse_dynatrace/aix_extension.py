# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['AixExtensionArgs', 'AixExtension']

@pulumi.input_type
class AixExtensionArgs:
    def __init__(__self__, *,
                 host_id: pulumi.Input[str],
                 use_global_settings: pulumi.Input[bool],
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a AixExtension resource.
        :param pulumi.Input[str] host_id: The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
        :param pulumi.Input[bool] use_global_settings: Use global settings
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        """
        pulumi.set(__self__, "host_id", host_id)
        pulumi.set(__self__, "use_global_settings", use_global_settings)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="hostId")
    def host_id(self) -> pulumi.Input[str]:
        """
        The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
        """
        return pulumi.get(self, "host_id")

    @host_id.setter
    def host_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "host_id", value)

    @property
    @pulumi.getter(name="useGlobalSettings")
    def use_global_settings(self) -> pulumi.Input[bool]:
        """
        Use global settings
        """
        return pulumi.get(self, "use_global_settings")

    @use_global_settings.setter
    def use_global_settings(self, value: pulumi.Input[bool]):
        pulumi.set(self, "use_global_settings", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class _AixExtensionState:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 host_id: Optional[pulumi.Input[str]] = None,
                 use_global_settings: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering AixExtension resources.
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[str] host_id: The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
        :param pulumi.Input[bool] use_global_settings: Use global settings
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if host_id is not None:
            pulumi.set(__self__, "host_id", host_id)
        if use_global_settings is not None:
            pulumi.set(__self__, "use_global_settings", use_global_settings)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="hostId")
    def host_id(self) -> Optional[pulumi.Input[str]]:
        """
        The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
        """
        return pulumi.get(self, "host_id")

    @host_id.setter
    def host_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_id", value)

    @property
    @pulumi.getter(name="useGlobalSettings")
    def use_global_settings(self) -> Optional[pulumi.Input[bool]]:
        """
        Use global settings
        """
        return pulumi.get(self, "use_global_settings")

    @use_global_settings.setter
    def use_global_settings(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_global_settings", value)


class AixExtension(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 host_id: Optional[pulumi.Input[str]] = None,
                 use_global_settings: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Create a AixExtension resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[str] host_id: The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
        :param pulumi.Input[bool] use_global_settings: Use global settings
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AixExtensionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AixExtension resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AixExtensionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AixExtensionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 host_id: Optional[pulumi.Input[str]] = None,
                 use_global_settings: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AixExtensionArgs.__new__(AixExtensionArgs)

            __props__.__dict__["enabled"] = enabled
            if host_id is None and not opts.urn:
                raise TypeError("Missing required property 'host_id'")
            __props__.__dict__["host_id"] = host_id
            if use_global_settings is None and not opts.urn:
                raise TypeError("Missing required property 'use_global_settings'")
            __props__.__dict__["use_global_settings"] = use_global_settings
        super(AixExtension, __self__).__init__(
            'dynatrace:index/aixExtension:AixExtension',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            host_id: Optional[pulumi.Input[str]] = None,
            use_global_settings: Optional[pulumi.Input[bool]] = None) -> 'AixExtension':
        """
        Get an existing AixExtension resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[str] host_id: The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
        :param pulumi.Input[bool] use_global_settings: Use global settings
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AixExtensionState.__new__(_AixExtensionState)

        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["host_id"] = host_id
        __props__.__dict__["use_global_settings"] = use_global_settings
        return AixExtension(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="hostId")
    def host_id(self) -> pulumi.Output[str]:
        """
        The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
        """
        return pulumi.get(self, "host_id")

    @property
    @pulumi.getter(name="useGlobalSettings")
    def use_global_settings(self) -> pulumi.Output[bool]:
        """
        Use global settings
        """
        return pulumi.get(self, "use_global_settings")

