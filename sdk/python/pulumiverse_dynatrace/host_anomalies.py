# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['HostAnomaliesArgs', 'HostAnomalies']

@pulumi.input_type
class HostAnomaliesArgs:
    def __init__(__self__, *,
                 connections: Optional[pulumi.Input['HostAnomaliesConnectionsArgs']] = None,
                 cpu: Optional[pulumi.Input['HostAnomaliesCpuArgs']] = None,
                 disks: Optional[pulumi.Input['HostAnomaliesDisksArgs']] = None,
                 gc: Optional[pulumi.Input['HostAnomaliesGcArgs']] = None,
                 java: Optional[pulumi.Input['HostAnomaliesJavaArgs']] = None,
                 memory: Optional[pulumi.Input['HostAnomaliesMemoryArgs']] = None,
                 network: Optional[pulumi.Input['HostAnomaliesNetworkArgs']] = None):
        """
        The set of arguments for constructing a HostAnomalies resource.
        :param pulumi.Input['HostAnomaliesConnectionsArgs'] connections: Configuration of lost connection detection
        :param pulumi.Input['HostAnomaliesCpuArgs'] cpu: Configuration of high CPU saturation detection
        :param pulumi.Input['HostAnomaliesDisksArgs'] disks: Configuration of disk related anomalies
        :param pulumi.Input['HostAnomaliesGcArgs'] gc: Configuration of high Garbage Collector activity detection
        :param pulumi.Input['HostAnomaliesJavaArgs'] java: Configuration of Java related anomalies
        :param pulumi.Input['HostAnomaliesMemoryArgs'] memory: Configuration of high memory usage detection
        :param pulumi.Input['HostAnomaliesNetworkArgs'] network: Configuration of network related anomalies
        """
        if connections is not None:
            pulumi.set(__self__, "connections", connections)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if disks is not None:
            pulumi.set(__self__, "disks", disks)
        if gc is not None:
            pulumi.set(__self__, "gc", gc)
        if java is not None:
            pulumi.set(__self__, "java", java)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if network is not None:
            pulumi.set(__self__, "network", network)

    @property
    @pulumi.getter
    def connections(self) -> Optional[pulumi.Input['HostAnomaliesConnectionsArgs']]:
        """
        Configuration of lost connection detection
        """
        return pulumi.get(self, "connections")

    @connections.setter
    def connections(self, value: Optional[pulumi.Input['HostAnomaliesConnectionsArgs']]):
        pulumi.set(self, "connections", value)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input['HostAnomaliesCpuArgs']]:
        """
        Configuration of high CPU saturation detection
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input['HostAnomaliesCpuArgs']]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter
    def disks(self) -> Optional[pulumi.Input['HostAnomaliesDisksArgs']]:
        """
        Configuration of disk related anomalies
        """
        return pulumi.get(self, "disks")

    @disks.setter
    def disks(self, value: Optional[pulumi.Input['HostAnomaliesDisksArgs']]):
        pulumi.set(self, "disks", value)

    @property
    @pulumi.getter
    def gc(self) -> Optional[pulumi.Input['HostAnomaliesGcArgs']]:
        """
        Configuration of high Garbage Collector activity detection
        """
        return pulumi.get(self, "gc")

    @gc.setter
    def gc(self, value: Optional[pulumi.Input['HostAnomaliesGcArgs']]):
        pulumi.set(self, "gc", value)

    @property
    @pulumi.getter
    def java(self) -> Optional[pulumi.Input['HostAnomaliesJavaArgs']]:
        """
        Configuration of Java related anomalies
        """
        return pulumi.get(self, "java")

    @java.setter
    def java(self, value: Optional[pulumi.Input['HostAnomaliesJavaArgs']]):
        pulumi.set(self, "java", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input['HostAnomaliesMemoryArgs']]:
        """
        Configuration of high memory usage detection
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input['HostAnomaliesMemoryArgs']]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input['HostAnomaliesNetworkArgs']]:
        """
        Configuration of network related anomalies
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input['HostAnomaliesNetworkArgs']]):
        pulumi.set(self, "network", value)


@pulumi.input_type
class _HostAnomaliesState:
    def __init__(__self__, *,
                 connections: Optional[pulumi.Input['HostAnomaliesConnectionsArgs']] = None,
                 cpu: Optional[pulumi.Input['HostAnomaliesCpuArgs']] = None,
                 disks: Optional[pulumi.Input['HostAnomaliesDisksArgs']] = None,
                 gc: Optional[pulumi.Input['HostAnomaliesGcArgs']] = None,
                 java: Optional[pulumi.Input['HostAnomaliesJavaArgs']] = None,
                 memory: Optional[pulumi.Input['HostAnomaliesMemoryArgs']] = None,
                 network: Optional[pulumi.Input['HostAnomaliesNetworkArgs']] = None):
        """
        Input properties used for looking up and filtering HostAnomalies resources.
        :param pulumi.Input['HostAnomaliesConnectionsArgs'] connections: Configuration of lost connection detection
        :param pulumi.Input['HostAnomaliesCpuArgs'] cpu: Configuration of high CPU saturation detection
        :param pulumi.Input['HostAnomaliesDisksArgs'] disks: Configuration of disk related anomalies
        :param pulumi.Input['HostAnomaliesGcArgs'] gc: Configuration of high Garbage Collector activity detection
        :param pulumi.Input['HostAnomaliesJavaArgs'] java: Configuration of Java related anomalies
        :param pulumi.Input['HostAnomaliesMemoryArgs'] memory: Configuration of high memory usage detection
        :param pulumi.Input['HostAnomaliesNetworkArgs'] network: Configuration of network related anomalies
        """
        if connections is not None:
            pulumi.set(__self__, "connections", connections)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if disks is not None:
            pulumi.set(__self__, "disks", disks)
        if gc is not None:
            pulumi.set(__self__, "gc", gc)
        if java is not None:
            pulumi.set(__self__, "java", java)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if network is not None:
            pulumi.set(__self__, "network", network)

    @property
    @pulumi.getter
    def connections(self) -> Optional[pulumi.Input['HostAnomaliesConnectionsArgs']]:
        """
        Configuration of lost connection detection
        """
        return pulumi.get(self, "connections")

    @connections.setter
    def connections(self, value: Optional[pulumi.Input['HostAnomaliesConnectionsArgs']]):
        pulumi.set(self, "connections", value)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input['HostAnomaliesCpuArgs']]:
        """
        Configuration of high CPU saturation detection
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input['HostAnomaliesCpuArgs']]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter
    def disks(self) -> Optional[pulumi.Input['HostAnomaliesDisksArgs']]:
        """
        Configuration of disk related anomalies
        """
        return pulumi.get(self, "disks")

    @disks.setter
    def disks(self, value: Optional[pulumi.Input['HostAnomaliesDisksArgs']]):
        pulumi.set(self, "disks", value)

    @property
    @pulumi.getter
    def gc(self) -> Optional[pulumi.Input['HostAnomaliesGcArgs']]:
        """
        Configuration of high Garbage Collector activity detection
        """
        return pulumi.get(self, "gc")

    @gc.setter
    def gc(self, value: Optional[pulumi.Input['HostAnomaliesGcArgs']]):
        pulumi.set(self, "gc", value)

    @property
    @pulumi.getter
    def java(self) -> Optional[pulumi.Input['HostAnomaliesJavaArgs']]:
        """
        Configuration of Java related anomalies
        """
        return pulumi.get(self, "java")

    @java.setter
    def java(self, value: Optional[pulumi.Input['HostAnomaliesJavaArgs']]):
        pulumi.set(self, "java", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input['HostAnomaliesMemoryArgs']]:
        """
        Configuration of high memory usage detection
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input['HostAnomaliesMemoryArgs']]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input['HostAnomaliesNetworkArgs']]:
        """
        Configuration of network related anomalies
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input['HostAnomaliesNetworkArgs']]):
        pulumi.set(self, "network", value)


class HostAnomalies(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connections: Optional[pulumi.Input[Union['HostAnomaliesConnectionsArgs', 'HostAnomaliesConnectionsArgsDict']]] = None,
                 cpu: Optional[pulumi.Input[Union['HostAnomaliesCpuArgs', 'HostAnomaliesCpuArgsDict']]] = None,
                 disks: Optional[pulumi.Input[Union['HostAnomaliesDisksArgs', 'HostAnomaliesDisksArgsDict']]] = None,
                 gc: Optional[pulumi.Input[Union['HostAnomaliesGcArgs', 'HostAnomaliesGcArgsDict']]] = None,
                 java: Optional[pulumi.Input[Union['HostAnomaliesJavaArgs', 'HostAnomaliesJavaArgsDict']]] = None,
                 memory: Optional[pulumi.Input[Union['HostAnomaliesMemoryArgs', 'HostAnomaliesMemoryArgsDict']]] = None,
                 network: Optional[pulumi.Input[Union['HostAnomaliesNetworkArgs', 'HostAnomaliesNetworkArgsDict']]] = None,
                 __props__=None):
        """
        Create a HostAnomalies resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['HostAnomaliesConnectionsArgs', 'HostAnomaliesConnectionsArgsDict']] connections: Configuration of lost connection detection
        :param pulumi.Input[Union['HostAnomaliesCpuArgs', 'HostAnomaliesCpuArgsDict']] cpu: Configuration of high CPU saturation detection
        :param pulumi.Input[Union['HostAnomaliesDisksArgs', 'HostAnomaliesDisksArgsDict']] disks: Configuration of disk related anomalies
        :param pulumi.Input[Union['HostAnomaliesGcArgs', 'HostAnomaliesGcArgsDict']] gc: Configuration of high Garbage Collector activity detection
        :param pulumi.Input[Union['HostAnomaliesJavaArgs', 'HostAnomaliesJavaArgsDict']] java: Configuration of Java related anomalies
        :param pulumi.Input[Union['HostAnomaliesMemoryArgs', 'HostAnomaliesMemoryArgsDict']] memory: Configuration of high memory usage detection
        :param pulumi.Input[Union['HostAnomaliesNetworkArgs', 'HostAnomaliesNetworkArgsDict']] network: Configuration of network related anomalies
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[HostAnomaliesArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a HostAnomalies resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param HostAnomaliesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(HostAnomaliesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connections: Optional[pulumi.Input[Union['HostAnomaliesConnectionsArgs', 'HostAnomaliesConnectionsArgsDict']]] = None,
                 cpu: Optional[pulumi.Input[Union['HostAnomaliesCpuArgs', 'HostAnomaliesCpuArgsDict']]] = None,
                 disks: Optional[pulumi.Input[Union['HostAnomaliesDisksArgs', 'HostAnomaliesDisksArgsDict']]] = None,
                 gc: Optional[pulumi.Input[Union['HostAnomaliesGcArgs', 'HostAnomaliesGcArgsDict']]] = None,
                 java: Optional[pulumi.Input[Union['HostAnomaliesJavaArgs', 'HostAnomaliesJavaArgsDict']]] = None,
                 memory: Optional[pulumi.Input[Union['HostAnomaliesMemoryArgs', 'HostAnomaliesMemoryArgsDict']]] = None,
                 network: Optional[pulumi.Input[Union['HostAnomaliesNetworkArgs', 'HostAnomaliesNetworkArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = HostAnomaliesArgs.__new__(HostAnomaliesArgs)

            __props__.__dict__["connections"] = connections
            __props__.__dict__["cpu"] = cpu
            __props__.__dict__["disks"] = disks
            __props__.__dict__["gc"] = gc
            __props__.__dict__["java"] = java
            __props__.__dict__["memory"] = memory
            __props__.__dict__["network"] = network
        super(HostAnomalies, __self__).__init__(
            'dynatrace:index/hostAnomalies:HostAnomalies',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            connections: Optional[pulumi.Input[Union['HostAnomaliesConnectionsArgs', 'HostAnomaliesConnectionsArgsDict']]] = None,
            cpu: Optional[pulumi.Input[Union['HostAnomaliesCpuArgs', 'HostAnomaliesCpuArgsDict']]] = None,
            disks: Optional[pulumi.Input[Union['HostAnomaliesDisksArgs', 'HostAnomaliesDisksArgsDict']]] = None,
            gc: Optional[pulumi.Input[Union['HostAnomaliesGcArgs', 'HostAnomaliesGcArgsDict']]] = None,
            java: Optional[pulumi.Input[Union['HostAnomaliesJavaArgs', 'HostAnomaliesJavaArgsDict']]] = None,
            memory: Optional[pulumi.Input[Union['HostAnomaliesMemoryArgs', 'HostAnomaliesMemoryArgsDict']]] = None,
            network: Optional[pulumi.Input[Union['HostAnomaliesNetworkArgs', 'HostAnomaliesNetworkArgsDict']]] = None) -> 'HostAnomalies':
        """
        Get an existing HostAnomalies resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['HostAnomaliesConnectionsArgs', 'HostAnomaliesConnectionsArgsDict']] connections: Configuration of lost connection detection
        :param pulumi.Input[Union['HostAnomaliesCpuArgs', 'HostAnomaliesCpuArgsDict']] cpu: Configuration of high CPU saturation detection
        :param pulumi.Input[Union['HostAnomaliesDisksArgs', 'HostAnomaliesDisksArgsDict']] disks: Configuration of disk related anomalies
        :param pulumi.Input[Union['HostAnomaliesGcArgs', 'HostAnomaliesGcArgsDict']] gc: Configuration of high Garbage Collector activity detection
        :param pulumi.Input[Union['HostAnomaliesJavaArgs', 'HostAnomaliesJavaArgsDict']] java: Configuration of Java related anomalies
        :param pulumi.Input[Union['HostAnomaliesMemoryArgs', 'HostAnomaliesMemoryArgsDict']] memory: Configuration of high memory usage detection
        :param pulumi.Input[Union['HostAnomaliesNetworkArgs', 'HostAnomaliesNetworkArgsDict']] network: Configuration of network related anomalies
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _HostAnomaliesState.__new__(_HostAnomaliesState)

        __props__.__dict__["connections"] = connections
        __props__.__dict__["cpu"] = cpu
        __props__.__dict__["disks"] = disks
        __props__.__dict__["gc"] = gc
        __props__.__dict__["java"] = java
        __props__.__dict__["memory"] = memory
        __props__.__dict__["network"] = network
        return HostAnomalies(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def connections(self) -> pulumi.Output[Optional['outputs.HostAnomaliesConnections']]:
        """
        Configuration of lost connection detection
        """
        return pulumi.get(self, "connections")

    @property
    @pulumi.getter
    def cpu(self) -> pulumi.Output[Optional['outputs.HostAnomaliesCpu']]:
        """
        Configuration of high CPU saturation detection
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def disks(self) -> pulumi.Output[Optional['outputs.HostAnomaliesDisks']]:
        """
        Configuration of disk related anomalies
        """
        return pulumi.get(self, "disks")

    @property
    @pulumi.getter
    def gc(self) -> pulumi.Output[Optional['outputs.HostAnomaliesGc']]:
        """
        Configuration of high Garbage Collector activity detection
        """
        return pulumi.get(self, "gc")

    @property
    @pulumi.getter
    def java(self) -> pulumi.Output[Optional['outputs.HostAnomaliesJava']]:
        """
        Configuration of Java related anomalies
        """
        return pulumi.get(self, "java")

    @property
    @pulumi.getter
    def memory(self) -> pulumi.Output[Optional['outputs.HostAnomaliesMemory']]:
        """
        Configuration of high memory usage detection
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def network(self) -> pulumi.Output[Optional['outputs.HostAnomaliesNetwork']]:
        """
        Configuration of network related anomalies
        """
        return pulumi.get(self, "network")

