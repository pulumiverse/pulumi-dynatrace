# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['OpenpipelineV2UsersessionsRoutingArgs', 'OpenpipelineV2UsersessionsRouting']

@pulumi.input_type
class OpenpipelineV2UsersessionsRoutingArgs:
    def __init__(__self__, *,
                 routing_entries: Optional[pulumi.Input['OpenpipelineV2UsersessionsRoutingRoutingEntriesArgs']] = None):
        """
        The set of arguments for constructing a OpenpipelineV2UsersessionsRouting resource.
        :param pulumi.Input['OpenpipelineV2UsersessionsRoutingRoutingEntriesArgs'] routing_entries: Routing for pipelines
        """
        if routing_entries is not None:
            pulumi.set(__self__, "routing_entries", routing_entries)

    @_builtins.property
    @pulumi.getter(name="routingEntries")
    def routing_entries(self) -> Optional[pulumi.Input['OpenpipelineV2UsersessionsRoutingRoutingEntriesArgs']]:
        """
        Routing for pipelines
        """
        return pulumi.get(self, "routing_entries")

    @routing_entries.setter
    def routing_entries(self, value: Optional[pulumi.Input['OpenpipelineV2UsersessionsRoutingRoutingEntriesArgs']]):
        pulumi.set(self, "routing_entries", value)


@pulumi.input_type
class _OpenpipelineV2UsersessionsRoutingState:
    def __init__(__self__, *,
                 routing_entries: Optional[pulumi.Input['OpenpipelineV2UsersessionsRoutingRoutingEntriesArgs']] = None):
        """
        Input properties used for looking up and filtering OpenpipelineV2UsersessionsRouting resources.
        :param pulumi.Input['OpenpipelineV2UsersessionsRoutingRoutingEntriesArgs'] routing_entries: Routing for pipelines
        """
        if routing_entries is not None:
            pulumi.set(__self__, "routing_entries", routing_entries)

    @_builtins.property
    @pulumi.getter(name="routingEntries")
    def routing_entries(self) -> Optional[pulumi.Input['OpenpipelineV2UsersessionsRoutingRoutingEntriesArgs']]:
        """
        Routing for pipelines
        """
        return pulumi.get(self, "routing_entries")

    @routing_entries.setter
    def routing_entries(self, value: Optional[pulumi.Input['OpenpipelineV2UsersessionsRoutingRoutingEntriesArgs']]):
        pulumi.set(self, "routing_entries", value)


@pulumi.type_token("dynatrace:index/openpipelineV2UsersessionsRouting:OpenpipelineV2UsersessionsRouting")
class OpenpipelineV2UsersessionsRouting(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 routing_entries: Optional[pulumi.Input[Union['OpenpipelineV2UsersessionsRoutingRoutingEntriesArgs', 'OpenpipelineV2UsersessionsRoutingRoutingEntriesArgsDict']]] = None,
                 __props__=None):
        """
        Create a OpenpipelineV2UsersessionsRouting resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['OpenpipelineV2UsersessionsRoutingRoutingEntriesArgs', 'OpenpipelineV2UsersessionsRoutingRoutingEntriesArgsDict']] routing_entries: Routing for pipelines
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[OpenpipelineV2UsersessionsRoutingArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a OpenpipelineV2UsersessionsRouting resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param OpenpipelineV2UsersessionsRoutingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OpenpipelineV2UsersessionsRoutingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 routing_entries: Optional[pulumi.Input[Union['OpenpipelineV2UsersessionsRoutingRoutingEntriesArgs', 'OpenpipelineV2UsersessionsRoutingRoutingEntriesArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OpenpipelineV2UsersessionsRoutingArgs.__new__(OpenpipelineV2UsersessionsRoutingArgs)

            __props__.__dict__["routing_entries"] = routing_entries
        super(OpenpipelineV2UsersessionsRouting, __self__).__init__(
            'dynatrace:index/openpipelineV2UsersessionsRouting:OpenpipelineV2UsersessionsRouting',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            routing_entries: Optional[pulumi.Input[Union['OpenpipelineV2UsersessionsRoutingRoutingEntriesArgs', 'OpenpipelineV2UsersessionsRoutingRoutingEntriesArgsDict']]] = None) -> 'OpenpipelineV2UsersessionsRouting':
        """
        Get an existing OpenpipelineV2UsersessionsRouting resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['OpenpipelineV2UsersessionsRoutingRoutingEntriesArgs', 'OpenpipelineV2UsersessionsRoutingRoutingEntriesArgsDict']] routing_entries: Routing for pipelines
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OpenpipelineV2UsersessionsRoutingState.__new__(_OpenpipelineV2UsersessionsRoutingState)

        __props__.__dict__["routing_entries"] = routing_entries
        return OpenpipelineV2UsersessionsRouting(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="routingEntries")
    def routing_entries(self) -> pulumi.Output[Optional['outputs.OpenpipelineV2UsersessionsRoutingRoutingEntries']]:
        """
        Routing for pipelines
        """
        return pulumi.get(self, "routing_entries")

