# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LogProcessingArgs', 'LogProcessing']

@pulumi.input_type
class LogProcessingArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 processor_definition: pulumi.Input['LogProcessingProcessorDefinitionArgs'],
                 query: pulumi.Input[str],
                 rule_name: pulumi.Input[str],
                 rule_testing: pulumi.Input['LogProcessingRuleTestingArgs'],
                 insert_after: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a LogProcessing resource.
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['LogProcessingProcessorDefinitionArgs'] processor_definition: ## Processor definition Add a rule definition using our syntax. [In our documentation](https://dt-url.net/8k03xm2) you
               will find instructions and application [examples](https://dt-url.net/m24305t).
        :param pulumi.Input[str] query: Matcher
        :param pulumi.Input[str] rule_name: Rule name
        :param pulumi.Input['LogProcessingRuleTestingArgs'] rule_testing: ## Rule testing ### 1. Paste a log / JSON sample
        :param pulumi.Input[str] insert_after: Because this resource allows for ordering you may specify the ID of the resource instance that comes before this
               instance regarding order. If not specified when creating the setting will be added to the end of the list. If not
               specified during update the order will remain untouched
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "processor_definition", processor_definition)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "rule_name", rule_name)
        pulumi.set(__self__, "rule_testing", rule_testing)
        if insert_after is not None:
            pulumi.set(__self__, "insert_after", insert_after)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="processorDefinition")
    def processor_definition(self) -> pulumi.Input['LogProcessingProcessorDefinitionArgs']:
        """
        ## Processor definition Add a rule definition using our syntax. [In our documentation](https://dt-url.net/8k03xm2) you
        will find instructions and application [examples](https://dt-url.net/m24305t).
        """
        return pulumi.get(self, "processor_definition")

    @processor_definition.setter
    def processor_definition(self, value: pulumi.Input['LogProcessingProcessorDefinitionArgs']):
        pulumi.set(self, "processor_definition", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Matcher
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> pulumi.Input[str]:
        """
        Rule name
        """
        return pulumi.get(self, "rule_name")

    @rule_name.setter
    def rule_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule_name", value)

    @property
    @pulumi.getter(name="ruleTesting")
    def rule_testing(self) -> pulumi.Input['LogProcessingRuleTestingArgs']:
        """
        ## Rule testing ### 1. Paste a log / JSON sample
        """
        return pulumi.get(self, "rule_testing")

    @rule_testing.setter
    def rule_testing(self, value: pulumi.Input['LogProcessingRuleTestingArgs']):
        pulumi.set(self, "rule_testing", value)

    @property
    @pulumi.getter(name="insertAfter")
    def insert_after(self) -> Optional[pulumi.Input[str]]:
        """
        Because this resource allows for ordering you may specify the ID of the resource instance that comes before this
        instance regarding order. If not specified when creating the setting will be added to the end of the list. If not
        specified during update the order will remain untouched
        """
        return pulumi.get(self, "insert_after")

    @insert_after.setter
    def insert_after(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "insert_after", value)


@pulumi.input_type
class _LogProcessingState:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 insert_after: Optional[pulumi.Input[str]] = None,
                 processor_definition: Optional[pulumi.Input['LogProcessingProcessorDefinitionArgs']] = None,
                 query: Optional[pulumi.Input[str]] = None,
                 rule_name: Optional[pulumi.Input[str]] = None,
                 rule_testing: Optional[pulumi.Input['LogProcessingRuleTestingArgs']] = None):
        """
        Input properties used for looking up and filtering LogProcessing resources.
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[str] insert_after: Because this resource allows for ordering you may specify the ID of the resource instance that comes before this
               instance regarding order. If not specified when creating the setting will be added to the end of the list. If not
               specified during update the order will remain untouched
        :param pulumi.Input['LogProcessingProcessorDefinitionArgs'] processor_definition: ## Processor definition Add a rule definition using our syntax. [In our documentation](https://dt-url.net/8k03xm2) you
               will find instructions and application [examples](https://dt-url.net/m24305t).
        :param pulumi.Input[str] query: Matcher
        :param pulumi.Input[str] rule_name: Rule name
        :param pulumi.Input['LogProcessingRuleTestingArgs'] rule_testing: ## Rule testing ### 1. Paste a log / JSON sample
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if insert_after is not None:
            pulumi.set(__self__, "insert_after", insert_after)
        if processor_definition is not None:
            pulumi.set(__self__, "processor_definition", processor_definition)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if rule_name is not None:
            pulumi.set(__self__, "rule_name", rule_name)
        if rule_testing is not None:
            pulumi.set(__self__, "rule_testing", rule_testing)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="insertAfter")
    def insert_after(self) -> Optional[pulumi.Input[str]]:
        """
        Because this resource allows for ordering you may specify the ID of the resource instance that comes before this
        instance regarding order. If not specified when creating the setting will be added to the end of the list. If not
        specified during update the order will remain untouched
        """
        return pulumi.get(self, "insert_after")

    @insert_after.setter
    def insert_after(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "insert_after", value)

    @property
    @pulumi.getter(name="processorDefinition")
    def processor_definition(self) -> Optional[pulumi.Input['LogProcessingProcessorDefinitionArgs']]:
        """
        ## Processor definition Add a rule definition using our syntax. [In our documentation](https://dt-url.net/8k03xm2) you
        will find instructions and application [examples](https://dt-url.net/m24305t).
        """
        return pulumi.get(self, "processor_definition")

    @processor_definition.setter
    def processor_definition(self, value: Optional[pulumi.Input['LogProcessingProcessorDefinitionArgs']]):
        pulumi.set(self, "processor_definition", value)

    @property
    @pulumi.getter
    def query(self) -> Optional[pulumi.Input[str]]:
        """
        Matcher
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> Optional[pulumi.Input[str]]:
        """
        Rule name
        """
        return pulumi.get(self, "rule_name")

    @rule_name.setter
    def rule_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_name", value)

    @property
    @pulumi.getter(name="ruleTesting")
    def rule_testing(self) -> Optional[pulumi.Input['LogProcessingRuleTestingArgs']]:
        """
        ## Rule testing ### 1. Paste a log / JSON sample
        """
        return pulumi.get(self, "rule_testing")

    @rule_testing.setter
    def rule_testing(self, value: Optional[pulumi.Input['LogProcessingRuleTestingArgs']]):
        pulumi.set(self, "rule_testing", value)


class LogProcessing(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 insert_after: Optional[pulumi.Input[str]] = None,
                 processor_definition: Optional[pulumi.Input[Union['LogProcessingProcessorDefinitionArgs', 'LogProcessingProcessorDefinitionArgsDict']]] = None,
                 query: Optional[pulumi.Input[str]] = None,
                 rule_name: Optional[pulumi.Input[str]] = None,
                 rule_testing: Optional[pulumi.Input[Union['LogProcessingRuleTestingArgs', 'LogProcessingRuleTestingArgsDict']]] = None,
                 __props__=None):
        """
        Create a LogProcessing resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[str] insert_after: Because this resource allows for ordering you may specify the ID of the resource instance that comes before this
               instance regarding order. If not specified when creating the setting will be added to the end of the list. If not
               specified during update the order will remain untouched
        :param pulumi.Input[Union['LogProcessingProcessorDefinitionArgs', 'LogProcessingProcessorDefinitionArgsDict']] processor_definition: ## Processor definition Add a rule definition using our syntax. [In our documentation](https://dt-url.net/8k03xm2) you
               will find instructions and application [examples](https://dt-url.net/m24305t).
        :param pulumi.Input[str] query: Matcher
        :param pulumi.Input[str] rule_name: Rule name
        :param pulumi.Input[Union['LogProcessingRuleTestingArgs', 'LogProcessingRuleTestingArgsDict']] rule_testing: ## Rule testing ### 1. Paste a log / JSON sample
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LogProcessingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a LogProcessing resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param LogProcessingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LogProcessingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 insert_after: Optional[pulumi.Input[str]] = None,
                 processor_definition: Optional[pulumi.Input[Union['LogProcessingProcessorDefinitionArgs', 'LogProcessingProcessorDefinitionArgsDict']]] = None,
                 query: Optional[pulumi.Input[str]] = None,
                 rule_name: Optional[pulumi.Input[str]] = None,
                 rule_testing: Optional[pulumi.Input[Union['LogProcessingRuleTestingArgs', 'LogProcessingRuleTestingArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LogProcessingArgs.__new__(LogProcessingArgs)

            if enabled is None and not opts.urn:
                raise TypeError("Missing required property 'enabled'")
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["insert_after"] = insert_after
            if processor_definition is None and not opts.urn:
                raise TypeError("Missing required property 'processor_definition'")
            __props__.__dict__["processor_definition"] = processor_definition
            if query is None and not opts.urn:
                raise TypeError("Missing required property 'query'")
            __props__.__dict__["query"] = query
            if rule_name is None and not opts.urn:
                raise TypeError("Missing required property 'rule_name'")
            __props__.__dict__["rule_name"] = rule_name
            if rule_testing is None and not opts.urn:
                raise TypeError("Missing required property 'rule_testing'")
            __props__.__dict__["rule_testing"] = rule_testing
        super(LogProcessing, __self__).__init__(
            'dynatrace:index/logProcessing:LogProcessing',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            insert_after: Optional[pulumi.Input[str]] = None,
            processor_definition: Optional[pulumi.Input[Union['LogProcessingProcessorDefinitionArgs', 'LogProcessingProcessorDefinitionArgsDict']]] = None,
            query: Optional[pulumi.Input[str]] = None,
            rule_name: Optional[pulumi.Input[str]] = None,
            rule_testing: Optional[pulumi.Input[Union['LogProcessingRuleTestingArgs', 'LogProcessingRuleTestingArgsDict']]] = None) -> 'LogProcessing':
        """
        Get an existing LogProcessing resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[str] insert_after: Because this resource allows for ordering you may specify the ID of the resource instance that comes before this
               instance regarding order. If not specified when creating the setting will be added to the end of the list. If not
               specified during update the order will remain untouched
        :param pulumi.Input[Union['LogProcessingProcessorDefinitionArgs', 'LogProcessingProcessorDefinitionArgsDict']] processor_definition: ## Processor definition Add a rule definition using our syntax. [In our documentation](https://dt-url.net/8k03xm2) you
               will find instructions and application [examples](https://dt-url.net/m24305t).
        :param pulumi.Input[str] query: Matcher
        :param pulumi.Input[str] rule_name: Rule name
        :param pulumi.Input[Union['LogProcessingRuleTestingArgs', 'LogProcessingRuleTestingArgsDict']] rule_testing: ## Rule testing ### 1. Paste a log / JSON sample
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LogProcessingState.__new__(_LogProcessingState)

        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["insert_after"] = insert_after
        __props__.__dict__["processor_definition"] = processor_definition
        __props__.__dict__["query"] = query
        __props__.__dict__["rule_name"] = rule_name
        __props__.__dict__["rule_testing"] = rule_testing
        return LogProcessing(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="insertAfter")
    def insert_after(self) -> pulumi.Output[str]:
        """
        Because this resource allows for ordering you may specify the ID of the resource instance that comes before this
        instance regarding order. If not specified when creating the setting will be added to the end of the list. If not
        specified during update the order will remain untouched
        """
        return pulumi.get(self, "insert_after")

    @property
    @pulumi.getter(name="processorDefinition")
    def processor_definition(self) -> pulumi.Output['outputs.LogProcessingProcessorDefinition']:
        """
        ## Processor definition Add a rule definition using our syntax. [In our documentation](https://dt-url.net/8k03xm2) you
        will find instructions and application [examples](https://dt-url.net/m24305t).
        """
        return pulumi.get(self, "processor_definition")

    @property
    @pulumi.getter
    def query(self) -> pulumi.Output[str]:
        """
        Matcher
        """
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> pulumi.Output[str]:
        """
        Rule name
        """
        return pulumi.get(self, "rule_name")

    @property
    @pulumi.getter(name="ruleTesting")
    def rule_testing(self) -> pulumi.Output['outputs.LogProcessingRuleTesting']:
        """
        ## Rule testing ### 1. Paste a log / JSON sample
        """
        return pulumi.get(self, "rule_testing")

