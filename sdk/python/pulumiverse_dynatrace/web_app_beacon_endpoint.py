# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['WebAppBeaconEndpointArgs', 'WebAppBeaconEndpoint']

@pulumi.input_type
class WebAppBeaconEndpointArgs:
    def __init__(__self__, *,
                 application_id: pulumi.Input[str],
                 type: pulumi.Input[str],
                 url: Optional[pulumi.Input[str]] = None,
                 use_cors: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a WebAppBeaconEndpoint resource.
        :param pulumi.Input[str] application_id: The scope of this setting
        :param pulumi.Input[str] type: Possible Values: `ACTIVEGATE`, `DEFAULT_CONFIG`, `ONEAGENT`
        :param pulumi.Input[str] url: You can specify either path segments or an absolute URL.
        :param pulumi.Input[bool] use_cors: Learn more about [sending beacon data via CORS](https://dt-url.net/r7038sa)
        """
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if use_cors is not None:
            pulumi.set(__self__, "use_cors", use_cors)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Input[str]:
        """
        The scope of this setting
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Possible Values: `ACTIVEGATE`, `DEFAULT_CONFIG`, `ONEAGENT`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        You can specify either path segments or an absolute URL.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="useCors")
    def use_cors(self) -> Optional[pulumi.Input[bool]]:
        """
        Learn more about [sending beacon data via CORS](https://dt-url.net/r7038sa)
        """
        return pulumi.get(self, "use_cors")

    @use_cors.setter
    def use_cors(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_cors", value)


@pulumi.input_type
class _WebAppBeaconEndpointState:
    def __init__(__self__, *,
                 application_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 use_cors: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering WebAppBeaconEndpoint resources.
        :param pulumi.Input[str] application_id: The scope of this setting
        :param pulumi.Input[str] type: Possible Values: `ACTIVEGATE`, `DEFAULT_CONFIG`, `ONEAGENT`
        :param pulumi.Input[str] url: You can specify either path segments or an absolute URL.
        :param pulumi.Input[bool] use_cors: Learn more about [sending beacon data via CORS](https://dt-url.net/r7038sa)
        """
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if use_cors is not None:
            pulumi.set(__self__, "use_cors", use_cors)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input[str]]:
        """
        The scope of this setting
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Possible Values: `ACTIVEGATE`, `DEFAULT_CONFIG`, `ONEAGENT`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        You can specify either path segments or an absolute URL.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="useCors")
    def use_cors(self) -> Optional[pulumi.Input[bool]]:
        """
        Learn more about [sending beacon data via CORS](https://dt-url.net/r7038sa)
        """
        return pulumi.get(self, "use_cors")

    @use_cors.setter
    def use_cors(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_cors", value)


class WebAppBeaconEndpoint(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 use_cors: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Create a WebAppBeaconEndpoint resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] application_id: The scope of this setting
        :param pulumi.Input[str] type: Possible Values: `ACTIVEGATE`, `DEFAULT_CONFIG`, `ONEAGENT`
        :param pulumi.Input[str] url: You can specify either path segments or an absolute URL.
        :param pulumi.Input[bool] use_cors: Learn more about [sending beacon data via CORS](https://dt-url.net/r7038sa)
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WebAppBeaconEndpointArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a WebAppBeaconEndpoint resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param WebAppBeaconEndpointArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WebAppBeaconEndpointArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 use_cors: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WebAppBeaconEndpointArgs.__new__(WebAppBeaconEndpointArgs)

            if application_id is None and not opts.urn:
                raise TypeError("Missing required property 'application_id'")
            __props__.__dict__["application_id"] = application_id
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["url"] = url
            __props__.__dict__["use_cors"] = use_cors
        super(WebAppBeaconEndpoint, __self__).__init__(
            'dynatrace:index/webAppBeaconEndpoint:WebAppBeaconEndpoint',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            application_id: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            url: Optional[pulumi.Input[str]] = None,
            use_cors: Optional[pulumi.Input[bool]] = None) -> 'WebAppBeaconEndpoint':
        """
        Get an existing WebAppBeaconEndpoint resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] application_id: The scope of this setting
        :param pulumi.Input[str] type: Possible Values: `ACTIVEGATE`, `DEFAULT_CONFIG`, `ONEAGENT`
        :param pulumi.Input[str] url: You can specify either path segments or an absolute URL.
        :param pulumi.Input[bool] use_cors: Learn more about [sending beacon data via CORS](https://dt-url.net/r7038sa)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WebAppBeaconEndpointState.__new__(_WebAppBeaconEndpointState)

        __props__.__dict__["application_id"] = application_id
        __props__.__dict__["type"] = type
        __props__.__dict__["url"] = url
        __props__.__dict__["use_cors"] = use_cors
        return WebAppBeaconEndpoint(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Output[str]:
        """
        The scope of this setting
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Possible Values: `ACTIVEGATE`, `DEFAULT_CONFIG`, `ONEAGENT`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[Optional[str]]:
        """
        You can specify either path segments or an absolute URL.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="useCors")
    def use_cors(self) -> pulumi.Output[Optional[bool]]:
        """
        Learn more about [sending beacon data via CORS](https://dt-url.net/r7038sa)
        """
        return pulumi.get(self, "use_cors")

