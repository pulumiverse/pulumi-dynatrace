# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetRemoteEnvironmentsResult',
    'AwaitableGetRemoteEnvironmentsResult',
    'get_remote_environments',
    'get_remote_environments_output',
]

@pulumi.output_type
class GetRemoteEnvironmentsResult:
    """
    A collection of values returned by getRemoteEnvironments.
    """
    def __init__(__self__, id=None, remote_environments=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if remote_environments and not isinstance(remote_environments, list):
            raise TypeError("Expected argument 'remote_environments' to be a list")
        pulumi.set(__self__, "remote_environments", remote_environments)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="remoteEnvironments")
    def remote_environments(self) -> Sequence['outputs.GetRemoteEnvironmentsRemoteEnvironmentResult']:
        return pulumi.get(self, "remote_environments")


class AwaitableGetRemoteEnvironmentsResult(GetRemoteEnvironmentsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRemoteEnvironmentsResult(
            id=self.id,
            remote_environments=self.remote_environments)


def get_remote_environments(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRemoteEnvironmentsResult:
    """
    The remote environments data source allows retrieval of all remote environments.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_dynatrace as dynatrace

    example = dynatrace.get_remote_environments()
    pulumi.export("remoteEnvironments", example)
    ```
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('dynatrace:index/getRemoteEnvironments:getRemoteEnvironments', __args__, opts=opts, typ=GetRemoteEnvironmentsResult).value

    return AwaitableGetRemoteEnvironmentsResult(
        id=pulumi.get(__ret__, 'id'),
        remote_environments=pulumi.get(__ret__, 'remote_environments'))
def get_remote_environments_output(opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRemoteEnvironmentsResult]:
    """
    The remote environments data source allows retrieval of all remote environments.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_dynatrace as dynatrace

    example = dynatrace.get_remote_environments()
    pulumi.export("remoteEnvironments", example)
    ```
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('dynatrace:index/getRemoteEnvironments:getRemoteEnvironments', __args__, opts=opts, typ=GetRemoteEnvironmentsResult)
    return __ret__.apply(lambda __response__: GetRemoteEnvironmentsResult(
        id=pulumi.get(__response__, 'id'),
        remote_environments=pulumi.get(__response__, 'remote_environments')))
