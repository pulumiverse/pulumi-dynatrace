# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ExtensionExecutionControllerArgs', 'ExtensionExecutionController']

@pulumi.input_type
class ExtensionExecutionControllerArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[builtins.bool],
                 ingest_active: Optional[pulumi.Input[builtins.bool]] = None,
                 performance_profile: Optional[pulumi.Input[builtins.str]] = None,
                 scope: Optional[pulumi.Input[builtins.str]] = None,
                 statsd_active: Optional[pulumi.Input[builtins.bool]] = None):
        """
        The set of arguments for constructing a ExtensionExecutionController resource.
        :param pulumi.Input[builtins.bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[builtins.bool] ingest_active: Enable local HTTP Metric, Log and Event Ingest API
        :param pulumi.Input[builtins.str] performance_profile: Possible Values: `DEFAULT`, `HIGH`
        :param pulumi.Input[builtins.str] scope: The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
        :param pulumi.Input[builtins.bool] statsd_active: Enable Dynatrace StatsD
        """
        pulumi.set(__self__, "enabled", enabled)
        if ingest_active is not None:
            pulumi.set(__self__, "ingest_active", ingest_active)
        if performance_profile is not None:
            pulumi.set(__self__, "performance_profile", performance_profile)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if statsd_active is not None:
            pulumi.set(__self__, "statsd_active", statsd_active)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[builtins.bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="ingestActive")
    def ingest_active(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable local HTTP Metric, Log and Event Ingest API
        """
        return pulumi.get(self, "ingest_active")

    @ingest_active.setter
    def ingest_active(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ingest_active", value)

    @property
    @pulumi.getter(name="performanceProfile")
    def performance_profile(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Possible Values: `DEFAULT`, `HIGH`
        """
        return pulumi.get(self, "performance_profile")

    @performance_profile.setter
    def performance_profile(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "performance_profile", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="statsdActive")
    def statsd_active(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable Dynatrace StatsD
        """
        return pulumi.get(self, "statsd_active")

    @statsd_active.setter
    def statsd_active(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "statsd_active", value)


@pulumi.input_type
class _ExtensionExecutionControllerState:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ingest_active: Optional[pulumi.Input[builtins.bool]] = None,
                 performance_profile: Optional[pulumi.Input[builtins.str]] = None,
                 scope: Optional[pulumi.Input[builtins.str]] = None,
                 statsd_active: Optional[pulumi.Input[builtins.bool]] = None):
        """
        Input properties used for looking up and filtering ExtensionExecutionController resources.
        :param pulumi.Input[builtins.bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[builtins.bool] ingest_active: Enable local HTTP Metric, Log and Event Ingest API
        :param pulumi.Input[builtins.str] performance_profile: Possible Values: `DEFAULT`, `HIGH`
        :param pulumi.Input[builtins.str] scope: The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
        :param pulumi.Input[builtins.bool] statsd_active: Enable Dynatrace StatsD
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ingest_active is not None:
            pulumi.set(__self__, "ingest_active", ingest_active)
        if performance_profile is not None:
            pulumi.set(__self__, "performance_profile", performance_profile)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if statsd_active is not None:
            pulumi.set(__self__, "statsd_active", statsd_active)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="ingestActive")
    def ingest_active(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable local HTTP Metric, Log and Event Ingest API
        """
        return pulumi.get(self, "ingest_active")

    @ingest_active.setter
    def ingest_active(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ingest_active", value)

    @property
    @pulumi.getter(name="performanceProfile")
    def performance_profile(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Possible Values: `DEFAULT`, `HIGH`
        """
        return pulumi.get(self, "performance_profile")

    @performance_profile.setter
    def performance_profile(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "performance_profile", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="statsdActive")
    def statsd_active(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable Dynatrace StatsD
        """
        return pulumi.get(self, "statsd_active")

    @statsd_active.setter
    def statsd_active(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "statsd_active", value)


class ExtensionExecutionController(pulumi.CustomResource):

    pulumi_type = "dynatrace:index/extensionExecutionController:ExtensionExecutionController"

    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ingest_active: Optional[pulumi.Input[builtins.bool]] = None,
                 performance_profile: Optional[pulumi.Input[builtins.str]] = None,
                 scope: Optional[pulumi.Input[builtins.str]] = None,
                 statsd_active: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        """
        Create a ExtensionExecutionController resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[builtins.bool] ingest_active: Enable local HTTP Metric, Log and Event Ingest API
        :param pulumi.Input[builtins.str] performance_profile: Possible Values: `DEFAULT`, `HIGH`
        :param pulumi.Input[builtins.str] scope: The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
        :param pulumi.Input[builtins.bool] statsd_active: Enable Dynatrace StatsD
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ExtensionExecutionControllerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ExtensionExecutionController resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ExtensionExecutionControllerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ExtensionExecutionControllerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ingest_active: Optional[pulumi.Input[builtins.bool]] = None,
                 performance_profile: Optional[pulumi.Input[builtins.str]] = None,
                 scope: Optional[pulumi.Input[builtins.str]] = None,
                 statsd_active: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ExtensionExecutionControllerArgs.__new__(ExtensionExecutionControllerArgs)

            if enabled is None and not opts.urn:
                raise TypeError("Missing required property 'enabled'")
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["ingest_active"] = ingest_active
            __props__.__dict__["performance_profile"] = performance_profile
            __props__.__dict__["scope"] = scope
            __props__.__dict__["statsd_active"] = statsd_active
        super(ExtensionExecutionController, __self__).__init__(
            'dynatrace:index/extensionExecutionController:ExtensionExecutionController',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enabled: Optional[pulumi.Input[builtins.bool]] = None,
            ingest_active: Optional[pulumi.Input[builtins.bool]] = None,
            performance_profile: Optional[pulumi.Input[builtins.str]] = None,
            scope: Optional[pulumi.Input[builtins.str]] = None,
            statsd_active: Optional[pulumi.Input[builtins.bool]] = None) -> 'ExtensionExecutionController':
        """
        Get an existing ExtensionExecutionController resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[builtins.bool] ingest_active: Enable local HTTP Metric, Log and Event Ingest API
        :param pulumi.Input[builtins.str] performance_profile: Possible Values: `DEFAULT`, `HIGH`
        :param pulumi.Input[builtins.str] scope: The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
        :param pulumi.Input[builtins.bool] statsd_active: Enable Dynatrace StatsD
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ExtensionExecutionControllerState.__new__(_ExtensionExecutionControllerState)

        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["ingest_active"] = ingest_active
        __props__.__dict__["performance_profile"] = performance_profile
        __props__.__dict__["scope"] = scope
        __props__.__dict__["statsd_active"] = statsd_active
        return ExtensionExecutionController(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[builtins.bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="ingestActive")
    def ingest_active(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Enable local HTTP Metric, Log and Event Ingest API
        """
        return pulumi.get(self, "ingest_active")

    @property
    @pulumi.getter(name="performanceProfile")
    def performance_profile(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Possible Values: `DEFAULT`, `HIGH`
        """
        return pulumi.get(self, "performance_profile")

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="statsdActive")
    def statsd_active(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Enable Dynatrace StatsD
        """
        return pulumi.get(self, "statsd_active")

