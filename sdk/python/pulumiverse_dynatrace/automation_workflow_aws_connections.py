# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AutomationWorkflowAwsConnectionsArgs', 'AutomationWorkflowAwsConnections']

@pulumi.input_type
class AutomationWorkflowAwsConnectionsArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 web_identity: Optional[pulumi.Input['AutomationWorkflowAwsConnectionsWebIdentityArgs']] = None):
        """
        The set of arguments for constructing a AutomationWorkflowAwsConnections resource.
        :param pulumi.Input[str] type: Possible Values: `WebIdentity`
        :param pulumi.Input[str] name: Name
        :param pulumi.Input['AutomationWorkflowAwsConnectionsWebIdentityArgs'] web_identity: no documentation available
        """
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if web_identity is not None:
            pulumi.set(__self__, "web_identity", web_identity)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Possible Values: `WebIdentity`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="webIdentity")
    def web_identity(self) -> Optional[pulumi.Input['AutomationWorkflowAwsConnectionsWebIdentityArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "web_identity")

    @web_identity.setter
    def web_identity(self, value: Optional[pulumi.Input['AutomationWorkflowAwsConnectionsWebIdentityArgs']]):
        pulumi.set(self, "web_identity", value)


@pulumi.input_type
class _AutomationWorkflowAwsConnectionsState:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 web_identity: Optional[pulumi.Input['AutomationWorkflowAwsConnectionsWebIdentityArgs']] = None):
        """
        Input properties used for looking up and filtering AutomationWorkflowAwsConnections resources.
        :param pulumi.Input[str] name: Name
        :param pulumi.Input[str] type: Possible Values: `WebIdentity`
        :param pulumi.Input['AutomationWorkflowAwsConnectionsWebIdentityArgs'] web_identity: no documentation available
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if web_identity is not None:
            pulumi.set(__self__, "web_identity", web_identity)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Possible Values: `WebIdentity`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="webIdentity")
    def web_identity(self) -> Optional[pulumi.Input['AutomationWorkflowAwsConnectionsWebIdentityArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "web_identity")

    @web_identity.setter
    def web_identity(self, value: Optional[pulumi.Input['AutomationWorkflowAwsConnectionsWebIdentityArgs']]):
        pulumi.set(self, "web_identity", value)


class AutomationWorkflowAwsConnections(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 web_identity: Optional[pulumi.Input[Union['AutomationWorkflowAwsConnectionsWebIdentityArgs', 'AutomationWorkflowAwsConnectionsWebIdentityArgsDict']]] = None,
                 __props__=None):
        """
        Create a AutomationWorkflowAwsConnections resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: Name
        :param pulumi.Input[str] type: Possible Values: `WebIdentity`
        :param pulumi.Input[Union['AutomationWorkflowAwsConnectionsWebIdentityArgs', 'AutomationWorkflowAwsConnectionsWebIdentityArgsDict']] web_identity: no documentation available
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AutomationWorkflowAwsConnectionsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AutomationWorkflowAwsConnections resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AutomationWorkflowAwsConnectionsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AutomationWorkflowAwsConnectionsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 web_identity: Optional[pulumi.Input[Union['AutomationWorkflowAwsConnectionsWebIdentityArgs', 'AutomationWorkflowAwsConnectionsWebIdentityArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AutomationWorkflowAwsConnectionsArgs.__new__(AutomationWorkflowAwsConnectionsArgs)

            __props__.__dict__["name"] = name
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["web_identity"] = web_identity
        super(AutomationWorkflowAwsConnections, __self__).__init__(
            'dynatrace:index/automationWorkflowAwsConnections:AutomationWorkflowAwsConnections',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            name: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            web_identity: Optional[pulumi.Input[Union['AutomationWorkflowAwsConnectionsWebIdentityArgs', 'AutomationWorkflowAwsConnectionsWebIdentityArgsDict']]] = None) -> 'AutomationWorkflowAwsConnections':
        """
        Get an existing AutomationWorkflowAwsConnections resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: Name
        :param pulumi.Input[str] type: Possible Values: `WebIdentity`
        :param pulumi.Input[Union['AutomationWorkflowAwsConnectionsWebIdentityArgs', 'AutomationWorkflowAwsConnectionsWebIdentityArgsDict']] web_identity: no documentation available
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AutomationWorkflowAwsConnectionsState.__new__(_AutomationWorkflowAwsConnectionsState)

        __props__.__dict__["name"] = name
        __props__.__dict__["type"] = type
        __props__.__dict__["web_identity"] = web_identity
        return AutomationWorkflowAwsConnections(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Possible Values: `WebIdentity`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="webIdentity")
    def web_identity(self) -> pulumi.Output[Optional['outputs.AutomationWorkflowAwsConnectionsWebIdentity']]:
        """
        no documentation available
        """
        return pulumi.get(self, "web_identity")

