# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CustomAppEnablementArgs', 'CustomAppEnablement']

@pulumi.input_type
class CustomAppEnablementArgs:
    def __init__(__self__, *,
                 rum: pulumi.Input['CustomAppEnablementRumArgs'],
                 scope: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a CustomAppEnablement resource.
        :param pulumi.Input['CustomAppEnablementRumArgs'] rum: Capture and analyze all user actions within your application. Enable [Real User Monitoring (RUM)](https://dt-url.net/1n2b0prq) to monitor and improve your application's performance, identify errors, and gain insight into your user's behavior and experience.
        :param pulumi.Input[str] scope: The scope of this setting (CUSTOM_APPLICATION). Omit this property if you want to cover the whole environment.
        """
        pulumi.set(__self__, "rum", rum)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter
    def rum(self) -> pulumi.Input['CustomAppEnablementRumArgs']:
        """
        Capture and analyze all user actions within your application. Enable [Real User Monitoring (RUM)](https://dt-url.net/1n2b0prq) to monitor and improve your application's performance, identify errors, and gain insight into your user's behavior and experience.
        """
        return pulumi.get(self, "rum")

    @rum.setter
    def rum(self, value: pulumi.Input['CustomAppEnablementRumArgs']):
        pulumi.set(self, "rum", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        The scope of this setting (CUSTOM_APPLICATION). Omit this property if you want to cover the whole environment.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)


@pulumi.input_type
class _CustomAppEnablementState:
    def __init__(__self__, *,
                 rum: Optional[pulumi.Input['CustomAppEnablementRumArgs']] = None,
                 scope: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CustomAppEnablement resources.
        :param pulumi.Input['CustomAppEnablementRumArgs'] rum: Capture and analyze all user actions within your application. Enable [Real User Monitoring (RUM)](https://dt-url.net/1n2b0prq) to monitor and improve your application's performance, identify errors, and gain insight into your user's behavior and experience.
        :param pulumi.Input[str] scope: The scope of this setting (CUSTOM_APPLICATION). Omit this property if you want to cover the whole environment.
        """
        if rum is not None:
            pulumi.set(__self__, "rum", rum)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter
    def rum(self) -> Optional[pulumi.Input['CustomAppEnablementRumArgs']]:
        """
        Capture and analyze all user actions within your application. Enable [Real User Monitoring (RUM)](https://dt-url.net/1n2b0prq) to monitor and improve your application's performance, identify errors, and gain insight into your user's behavior and experience.
        """
        return pulumi.get(self, "rum")

    @rum.setter
    def rum(self, value: Optional[pulumi.Input['CustomAppEnablementRumArgs']]):
        pulumi.set(self, "rum", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        The scope of this setting (CUSTOM_APPLICATION). Omit this property if you want to cover the whole environment.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)


class CustomAppEnablement(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 rum: Optional[pulumi.Input[Union['CustomAppEnablementRumArgs', 'CustomAppEnablementRumArgsDict']]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a CustomAppEnablement resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['CustomAppEnablementRumArgs', 'CustomAppEnablementRumArgsDict']] rum: Capture and analyze all user actions within your application. Enable [Real User Monitoring (RUM)](https://dt-url.net/1n2b0prq) to monitor and improve your application's performance, identify errors, and gain insight into your user's behavior and experience.
        :param pulumi.Input[str] scope: The scope of this setting (CUSTOM_APPLICATION). Omit this property if you want to cover the whole environment.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CustomAppEnablementArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CustomAppEnablement resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CustomAppEnablementArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CustomAppEnablementArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 rum: Optional[pulumi.Input[Union['CustomAppEnablementRumArgs', 'CustomAppEnablementRumArgsDict']]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CustomAppEnablementArgs.__new__(CustomAppEnablementArgs)

            if rum is None and not opts.urn:
                raise TypeError("Missing required property 'rum'")
            __props__.__dict__["rum"] = rum
            __props__.__dict__["scope"] = scope
        super(CustomAppEnablement, __self__).__init__(
            'dynatrace:index/customAppEnablement:CustomAppEnablement',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            rum: Optional[pulumi.Input[Union['CustomAppEnablementRumArgs', 'CustomAppEnablementRumArgsDict']]] = None,
            scope: Optional[pulumi.Input[str]] = None) -> 'CustomAppEnablement':
        """
        Get an existing CustomAppEnablement resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['CustomAppEnablementRumArgs', 'CustomAppEnablementRumArgsDict']] rum: Capture and analyze all user actions within your application. Enable [Real User Monitoring (RUM)](https://dt-url.net/1n2b0prq) to monitor and improve your application's performance, identify errors, and gain insight into your user's behavior and experience.
        :param pulumi.Input[str] scope: The scope of this setting (CUSTOM_APPLICATION). Omit this property if you want to cover the whole environment.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CustomAppEnablementState.__new__(_CustomAppEnablementState)

        __props__.__dict__["rum"] = rum
        __props__.__dict__["scope"] = scope
        return CustomAppEnablement(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def rum(self) -> pulumi.Output['outputs.CustomAppEnablementRum']:
        """
        Capture and analyze all user actions within your application. Enable [Real User Monitoring (RUM)](https://dt-url.net/1n2b0prq) to monitor and improve your application's performance, identify errors, and gain insight into your user's behavior and experience.
        """
        return pulumi.get(self, "rum")

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Output[Optional[str]]:
        """
        The scope of this setting (CUSTOM_APPLICATION). Omit this property if you want to cover the whole environment.
        """
        return pulumi.get(self, "scope")

