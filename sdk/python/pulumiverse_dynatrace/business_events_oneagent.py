# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BusinessEventsOneagentArgs', 'BusinessEventsOneagent']

@pulumi.input_type
class BusinessEventsOneagentArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 event: pulumi.Input['BusinessEventsOneagentEventArgs'],
                 rule_name: pulumi.Input[str],
                 triggers: pulumi.Input['BusinessEventsOneagentTriggersArgs'],
                 insert_after: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a BusinessEventsOneagent resource.
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['BusinessEventsOneagentEventArgs'] event: Event meta data
        :param pulumi.Input[str] rule_name: Rule name
        :param pulumi.Input['BusinessEventsOneagentTriggersArgs'] triggers: Define conditions to trigger business events from incoming web requests. Triggers are connected by AND logic per capture rule. If you set multiple trigger rules, all of them need to be fulfilled to capture a business event.
        :param pulumi.Input[str] insert_after: Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        :param pulumi.Input[str] scope: The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "event", event)
        pulumi.set(__self__, "rule_name", rule_name)
        pulumi.set(__self__, "triggers", triggers)
        if insert_after is not None:
            pulumi.set(__self__, "insert_after", insert_after)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def event(self) -> pulumi.Input['BusinessEventsOneagentEventArgs']:
        """
        Event meta data
        """
        return pulumi.get(self, "event")

    @event.setter
    def event(self, value: pulumi.Input['BusinessEventsOneagentEventArgs']):
        pulumi.set(self, "event", value)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> pulumi.Input[str]:
        """
        Rule name
        """
        return pulumi.get(self, "rule_name")

    @rule_name.setter
    def rule_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule_name", value)

    @property
    @pulumi.getter
    def triggers(self) -> pulumi.Input['BusinessEventsOneagentTriggersArgs']:
        """
        Define conditions to trigger business events from incoming web requests. Triggers are connected by AND logic per capture rule. If you set multiple trigger rules, all of them need to be fulfilled to capture a business event.
        """
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: pulumi.Input['BusinessEventsOneagentTriggersArgs']):
        pulumi.set(self, "triggers", value)

    @property
    @pulumi.getter(name="insertAfter")
    def insert_after(self) -> Optional[pulumi.Input[str]]:
        """
        Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        """
        return pulumi.get(self, "insert_after")

    @insert_after.setter
    def insert_after(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "insert_after", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)


@pulumi.input_type
class _BusinessEventsOneagentState:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 event: Optional[pulumi.Input['BusinessEventsOneagentEventArgs']] = None,
                 insert_after: Optional[pulumi.Input[str]] = None,
                 rule_name: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 triggers: Optional[pulumi.Input['BusinessEventsOneagentTriggersArgs']] = None):
        """
        Input properties used for looking up and filtering BusinessEventsOneagent resources.
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['BusinessEventsOneagentEventArgs'] event: Event meta data
        :param pulumi.Input[str] insert_after: Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        :param pulumi.Input[str] rule_name: Rule name
        :param pulumi.Input[str] scope: The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
        :param pulumi.Input['BusinessEventsOneagentTriggersArgs'] triggers: Define conditions to trigger business events from incoming web requests. Triggers are connected by AND logic per capture rule. If you set multiple trigger rules, all of them need to be fulfilled to capture a business event.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if event is not None:
            pulumi.set(__self__, "event", event)
        if insert_after is not None:
            pulumi.set(__self__, "insert_after", insert_after)
        if rule_name is not None:
            pulumi.set(__self__, "rule_name", rule_name)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def event(self) -> Optional[pulumi.Input['BusinessEventsOneagentEventArgs']]:
        """
        Event meta data
        """
        return pulumi.get(self, "event")

    @event.setter
    def event(self, value: Optional[pulumi.Input['BusinessEventsOneagentEventArgs']]):
        pulumi.set(self, "event", value)

    @property
    @pulumi.getter(name="insertAfter")
    def insert_after(self) -> Optional[pulumi.Input[str]]:
        """
        Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        """
        return pulumi.get(self, "insert_after")

    @insert_after.setter
    def insert_after(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "insert_after", value)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> Optional[pulumi.Input[str]]:
        """
        Rule name
        """
        return pulumi.get(self, "rule_name")

    @rule_name.setter
    def rule_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_name", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter
    def triggers(self) -> Optional[pulumi.Input['BusinessEventsOneagentTriggersArgs']]:
        """
        Define conditions to trigger business events from incoming web requests. Triggers are connected by AND logic per capture rule. If you set multiple trigger rules, all of them need to be fulfilled to capture a business event.
        """
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: Optional[pulumi.Input['BusinessEventsOneagentTriggersArgs']]):
        pulumi.set(self, "triggers", value)


class BusinessEventsOneagent(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 event: Optional[pulumi.Input[Union['BusinessEventsOneagentEventArgs', 'BusinessEventsOneagentEventArgsDict']]] = None,
                 insert_after: Optional[pulumi.Input[str]] = None,
                 rule_name: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 triggers: Optional[pulumi.Input[Union['BusinessEventsOneagentTriggersArgs', 'BusinessEventsOneagentTriggersArgsDict']]] = None,
                 __props__=None):
        """
        Create a BusinessEventsOneagent resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[Union['BusinessEventsOneagentEventArgs', 'BusinessEventsOneagentEventArgsDict']] event: Event meta data
        :param pulumi.Input[str] insert_after: Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        :param pulumi.Input[str] rule_name: Rule name
        :param pulumi.Input[str] scope: The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
        :param pulumi.Input[Union['BusinessEventsOneagentTriggersArgs', 'BusinessEventsOneagentTriggersArgsDict']] triggers: Define conditions to trigger business events from incoming web requests. Triggers are connected by AND logic per capture rule. If you set multiple trigger rules, all of them need to be fulfilled to capture a business event.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BusinessEventsOneagentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a BusinessEventsOneagent resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param BusinessEventsOneagentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BusinessEventsOneagentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 event: Optional[pulumi.Input[Union['BusinessEventsOneagentEventArgs', 'BusinessEventsOneagentEventArgsDict']]] = None,
                 insert_after: Optional[pulumi.Input[str]] = None,
                 rule_name: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 triggers: Optional[pulumi.Input[Union['BusinessEventsOneagentTriggersArgs', 'BusinessEventsOneagentTriggersArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BusinessEventsOneagentArgs.__new__(BusinessEventsOneagentArgs)

            if enabled is None and not opts.urn:
                raise TypeError("Missing required property 'enabled'")
            __props__.__dict__["enabled"] = enabled
            if event is None and not opts.urn:
                raise TypeError("Missing required property 'event'")
            __props__.__dict__["event"] = event
            __props__.__dict__["insert_after"] = insert_after
            if rule_name is None and not opts.urn:
                raise TypeError("Missing required property 'rule_name'")
            __props__.__dict__["rule_name"] = rule_name
            __props__.__dict__["scope"] = scope
            if triggers is None and not opts.urn:
                raise TypeError("Missing required property 'triggers'")
            __props__.__dict__["triggers"] = triggers
        super(BusinessEventsOneagent, __self__).__init__(
            'dynatrace:index/businessEventsOneagent:BusinessEventsOneagent',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            event: Optional[pulumi.Input[Union['BusinessEventsOneagentEventArgs', 'BusinessEventsOneagentEventArgsDict']]] = None,
            insert_after: Optional[pulumi.Input[str]] = None,
            rule_name: Optional[pulumi.Input[str]] = None,
            scope: Optional[pulumi.Input[str]] = None,
            triggers: Optional[pulumi.Input[Union['BusinessEventsOneagentTriggersArgs', 'BusinessEventsOneagentTriggersArgsDict']]] = None) -> 'BusinessEventsOneagent':
        """
        Get an existing BusinessEventsOneagent resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[Union['BusinessEventsOneagentEventArgs', 'BusinessEventsOneagentEventArgsDict']] event: Event meta data
        :param pulumi.Input[str] insert_after: Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        :param pulumi.Input[str] rule_name: Rule name
        :param pulumi.Input[str] scope: The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
        :param pulumi.Input[Union['BusinessEventsOneagentTriggersArgs', 'BusinessEventsOneagentTriggersArgsDict']] triggers: Define conditions to trigger business events from incoming web requests. Triggers are connected by AND logic per capture rule. If you set multiple trigger rules, all of them need to be fulfilled to capture a business event.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BusinessEventsOneagentState.__new__(_BusinessEventsOneagentState)

        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["event"] = event
        __props__.__dict__["insert_after"] = insert_after
        __props__.__dict__["rule_name"] = rule_name
        __props__.__dict__["scope"] = scope
        __props__.__dict__["triggers"] = triggers
        return BusinessEventsOneagent(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def event(self) -> pulumi.Output['outputs.BusinessEventsOneagentEvent']:
        """
        Event meta data
        """
        return pulumi.get(self, "event")

    @property
    @pulumi.getter(name="insertAfter")
    def insert_after(self) -> pulumi.Output[str]:
        """
        Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        """
        return pulumi.get(self, "insert_after")

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> pulumi.Output[str]:
        """
        Rule name
        """
        return pulumi.get(self, "rule_name")

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Output[Optional[str]]:
        """
        The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def triggers(self) -> pulumi.Output['outputs.BusinessEventsOneagentTriggers']:
        """
        Define conditions to trigger business events from incoming web requests. Triggers are connected by AND logic per capture rule. If you set multiple trigger rules, all of them need to be fulfilled to capture a business event.
        """
        return pulumi.get(self, "triggers")

