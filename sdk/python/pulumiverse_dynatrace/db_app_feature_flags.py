# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['DbAppFeatureFlagsArgs', 'DbAppFeatureFlags']

@pulumi.input_type
class DbAppFeatureFlagsArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 boolean_value: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 number_value: Optional[pulumi.Input[int]] = None,
                 string_value: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a DbAppFeatureFlags resource.
        :param pulumi.Input[str] type: Possible Values: `Boolean`, `Number`, `String`
        :param pulumi.Input[bool] boolean_value: State of boolean feature flag
        :param pulumi.Input[str] name: Name of the feature
        :param pulumi.Input[int] number_value: State of numeric feature flag
        :param pulumi.Input[str] string_value: State of textual feature flag
        """
        pulumi.set(__self__, "type", type)
        if boolean_value is not None:
            pulumi.set(__self__, "boolean_value", boolean_value)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if number_value is not None:
            pulumi.set(__self__, "number_value", number_value)
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Possible Values: `Boolean`, `Number`, `String`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="booleanValue")
    def boolean_value(self) -> Optional[pulumi.Input[bool]]:
        """
        State of boolean feature flag
        """
        return pulumi.get(self, "boolean_value")

    @boolean_value.setter
    def boolean_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "boolean_value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the feature
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="numberValue")
    def number_value(self) -> Optional[pulumi.Input[int]]:
        """
        State of numeric feature flag
        """
        return pulumi.get(self, "number_value")

    @number_value.setter
    def number_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "number_value", value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        """
        State of textual feature flag
        """
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)


@pulumi.input_type
class _DbAppFeatureFlagsState:
    def __init__(__self__, *,
                 boolean_value: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 number_value: Optional[pulumi.Input[int]] = None,
                 string_value: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering DbAppFeatureFlags resources.
        :param pulumi.Input[bool] boolean_value: State of boolean feature flag
        :param pulumi.Input[str] name: Name of the feature
        :param pulumi.Input[int] number_value: State of numeric feature flag
        :param pulumi.Input[str] string_value: State of textual feature flag
        :param pulumi.Input[str] type: Possible Values: `Boolean`, `Number`, `String`
        """
        if boolean_value is not None:
            pulumi.set(__self__, "boolean_value", boolean_value)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if number_value is not None:
            pulumi.set(__self__, "number_value", number_value)
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="booleanValue")
    def boolean_value(self) -> Optional[pulumi.Input[bool]]:
        """
        State of boolean feature flag
        """
        return pulumi.get(self, "boolean_value")

    @boolean_value.setter
    def boolean_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "boolean_value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the feature
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="numberValue")
    def number_value(self) -> Optional[pulumi.Input[int]]:
        """
        State of numeric feature flag
        """
        return pulumi.get(self, "number_value")

    @number_value.setter
    def number_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "number_value", value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        """
        State of textual feature flag
        """
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Possible Values: `Boolean`, `Number`, `String`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class DbAppFeatureFlags(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 boolean_value: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 number_value: Optional[pulumi.Input[int]] = None,
                 string_value: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a DbAppFeatureFlags resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] boolean_value: State of boolean feature flag
        :param pulumi.Input[str] name: Name of the feature
        :param pulumi.Input[int] number_value: State of numeric feature flag
        :param pulumi.Input[str] string_value: State of textual feature flag
        :param pulumi.Input[str] type: Possible Values: `Boolean`, `Number`, `String`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DbAppFeatureFlagsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DbAppFeatureFlags resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DbAppFeatureFlagsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DbAppFeatureFlagsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 boolean_value: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 number_value: Optional[pulumi.Input[int]] = None,
                 string_value: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DbAppFeatureFlagsArgs.__new__(DbAppFeatureFlagsArgs)

            __props__.__dict__["boolean_value"] = boolean_value
            __props__.__dict__["name"] = name
            __props__.__dict__["number_value"] = number_value
            __props__.__dict__["string_value"] = string_value
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
        super(DbAppFeatureFlags, __self__).__init__(
            'dynatrace:index/dbAppFeatureFlags:DbAppFeatureFlags',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            boolean_value: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            number_value: Optional[pulumi.Input[int]] = None,
            string_value: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'DbAppFeatureFlags':
        """
        Get an existing DbAppFeatureFlags resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] boolean_value: State of boolean feature flag
        :param pulumi.Input[str] name: Name of the feature
        :param pulumi.Input[int] number_value: State of numeric feature flag
        :param pulumi.Input[str] string_value: State of textual feature flag
        :param pulumi.Input[str] type: Possible Values: `Boolean`, `Number`, `String`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DbAppFeatureFlagsState.__new__(_DbAppFeatureFlagsState)

        __props__.__dict__["boolean_value"] = boolean_value
        __props__.__dict__["name"] = name
        __props__.__dict__["number_value"] = number_value
        __props__.__dict__["string_value"] = string_value
        __props__.__dict__["type"] = type
        return DbAppFeatureFlags(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="booleanValue")
    def boolean_value(self) -> pulumi.Output[Optional[bool]]:
        """
        State of boolean feature flag
        """
        return pulumi.get(self, "boolean_value")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the feature
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numberValue")
    def number_value(self) -> pulumi.Output[Optional[int]]:
        """
        State of numeric feature flag
        """
        return pulumi.get(self, "number_value")

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> pulumi.Output[Optional[str]]:
        """
        State of textual feature flag
        """
        return pulumi.get(self, "string_value")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Possible Values: `Boolean`, `Number`, `String`
        """
        return pulumi.get(self, "type")

