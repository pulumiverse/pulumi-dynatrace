# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['WebAppAutoInjectionArgs', 'WebAppAutoInjection']

@pulumi.input_type
class WebAppAutoInjectionArgs:
    def __init__(__self__, *,
                 application_id: pulumi.Input[str],
                 cache_control_headers: pulumi.Input['WebAppAutoInjectionCacheControlHeadersArgs'],
                 monitoring_code_source_section: pulumi.Input['WebAppAutoInjectionMonitoringCodeSourceSectionArgs'],
                 snippet_format: pulumi.Input['WebAppAutoInjectionSnippetFormatArgs']):
        """
        The set of arguments for constructing a WebAppAutoInjection resource.
        :param pulumi.Input[str] application_id: The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
        :param pulumi.Input['WebAppAutoInjectionCacheControlHeadersArgs'] cache_control_headers: Cache control headers
        :param pulumi.Input['WebAppAutoInjectionMonitoringCodeSourceSectionArgs'] monitoring_code_source_section: Real User Monitoring code source
        :param pulumi.Input['WebAppAutoInjectionSnippetFormatArgs'] snippet_format: *Code Snippet:* OneAgent injects an inline script that initializes Dynatrace and dynamically downloads the monitoring code into your application. Use when you want to inject the monitoring code in deferred mode.
        """
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "cache_control_headers", cache_control_headers)
        pulumi.set(__self__, "monitoring_code_source_section", monitoring_code_source_section)
        pulumi.set(__self__, "snippet_format", snippet_format)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Input[str]:
        """
        The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter(name="cacheControlHeaders")
    def cache_control_headers(self) -> pulumi.Input['WebAppAutoInjectionCacheControlHeadersArgs']:
        """
        Cache control headers
        """
        return pulumi.get(self, "cache_control_headers")

    @cache_control_headers.setter
    def cache_control_headers(self, value: pulumi.Input['WebAppAutoInjectionCacheControlHeadersArgs']):
        pulumi.set(self, "cache_control_headers", value)

    @property
    @pulumi.getter(name="monitoringCodeSourceSection")
    def monitoring_code_source_section(self) -> pulumi.Input['WebAppAutoInjectionMonitoringCodeSourceSectionArgs']:
        """
        Real User Monitoring code source
        """
        return pulumi.get(self, "monitoring_code_source_section")

    @monitoring_code_source_section.setter
    def monitoring_code_source_section(self, value: pulumi.Input['WebAppAutoInjectionMonitoringCodeSourceSectionArgs']):
        pulumi.set(self, "monitoring_code_source_section", value)

    @property
    @pulumi.getter(name="snippetFormat")
    def snippet_format(self) -> pulumi.Input['WebAppAutoInjectionSnippetFormatArgs']:
        """
        *Code Snippet:* OneAgent injects an inline script that initializes Dynatrace and dynamically downloads the monitoring code into your application. Use when you want to inject the monitoring code in deferred mode.
        """
        return pulumi.get(self, "snippet_format")

    @snippet_format.setter
    def snippet_format(self, value: pulumi.Input['WebAppAutoInjectionSnippetFormatArgs']):
        pulumi.set(self, "snippet_format", value)


@pulumi.input_type
class _WebAppAutoInjectionState:
    def __init__(__self__, *,
                 application_id: Optional[pulumi.Input[str]] = None,
                 cache_control_headers: Optional[pulumi.Input['WebAppAutoInjectionCacheControlHeadersArgs']] = None,
                 monitoring_code_source_section: Optional[pulumi.Input['WebAppAutoInjectionMonitoringCodeSourceSectionArgs']] = None,
                 snippet_format: Optional[pulumi.Input['WebAppAutoInjectionSnippetFormatArgs']] = None):
        """
        Input properties used for looking up and filtering WebAppAutoInjection resources.
        :param pulumi.Input[str] application_id: The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
        :param pulumi.Input['WebAppAutoInjectionCacheControlHeadersArgs'] cache_control_headers: Cache control headers
        :param pulumi.Input['WebAppAutoInjectionMonitoringCodeSourceSectionArgs'] monitoring_code_source_section: Real User Monitoring code source
        :param pulumi.Input['WebAppAutoInjectionSnippetFormatArgs'] snippet_format: *Code Snippet:* OneAgent injects an inline script that initializes Dynatrace and dynamically downloads the monitoring code into your application. Use when you want to inject the monitoring code in deferred mode.
        """
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if cache_control_headers is not None:
            pulumi.set(__self__, "cache_control_headers", cache_control_headers)
        if monitoring_code_source_section is not None:
            pulumi.set(__self__, "monitoring_code_source_section", monitoring_code_source_section)
        if snippet_format is not None:
            pulumi.set(__self__, "snippet_format", snippet_format)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input[str]]:
        """
        The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter(name="cacheControlHeaders")
    def cache_control_headers(self) -> Optional[pulumi.Input['WebAppAutoInjectionCacheControlHeadersArgs']]:
        """
        Cache control headers
        """
        return pulumi.get(self, "cache_control_headers")

    @cache_control_headers.setter
    def cache_control_headers(self, value: Optional[pulumi.Input['WebAppAutoInjectionCacheControlHeadersArgs']]):
        pulumi.set(self, "cache_control_headers", value)

    @property
    @pulumi.getter(name="monitoringCodeSourceSection")
    def monitoring_code_source_section(self) -> Optional[pulumi.Input['WebAppAutoInjectionMonitoringCodeSourceSectionArgs']]:
        """
        Real User Monitoring code source
        """
        return pulumi.get(self, "monitoring_code_source_section")

    @monitoring_code_source_section.setter
    def monitoring_code_source_section(self, value: Optional[pulumi.Input['WebAppAutoInjectionMonitoringCodeSourceSectionArgs']]):
        pulumi.set(self, "monitoring_code_source_section", value)

    @property
    @pulumi.getter(name="snippetFormat")
    def snippet_format(self) -> Optional[pulumi.Input['WebAppAutoInjectionSnippetFormatArgs']]:
        """
        *Code Snippet:* OneAgent injects an inline script that initializes Dynatrace and dynamically downloads the monitoring code into your application. Use when you want to inject the monitoring code in deferred mode.
        """
        return pulumi.get(self, "snippet_format")

    @snippet_format.setter
    def snippet_format(self, value: Optional[pulumi.Input['WebAppAutoInjectionSnippetFormatArgs']]):
        pulumi.set(self, "snippet_format", value)


class WebAppAutoInjection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_id: Optional[pulumi.Input[str]] = None,
                 cache_control_headers: Optional[pulumi.Input[Union['WebAppAutoInjectionCacheControlHeadersArgs', 'WebAppAutoInjectionCacheControlHeadersArgsDict']]] = None,
                 monitoring_code_source_section: Optional[pulumi.Input[Union['WebAppAutoInjectionMonitoringCodeSourceSectionArgs', 'WebAppAutoInjectionMonitoringCodeSourceSectionArgsDict']]] = None,
                 snippet_format: Optional[pulumi.Input[Union['WebAppAutoInjectionSnippetFormatArgs', 'WebAppAutoInjectionSnippetFormatArgsDict']]] = None,
                 __props__=None):
        """
        Create a WebAppAutoInjection resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] application_id: The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
        :param pulumi.Input[Union['WebAppAutoInjectionCacheControlHeadersArgs', 'WebAppAutoInjectionCacheControlHeadersArgsDict']] cache_control_headers: Cache control headers
        :param pulumi.Input[Union['WebAppAutoInjectionMonitoringCodeSourceSectionArgs', 'WebAppAutoInjectionMonitoringCodeSourceSectionArgsDict']] monitoring_code_source_section: Real User Monitoring code source
        :param pulumi.Input[Union['WebAppAutoInjectionSnippetFormatArgs', 'WebAppAutoInjectionSnippetFormatArgsDict']] snippet_format: *Code Snippet:* OneAgent injects an inline script that initializes Dynatrace and dynamically downloads the monitoring code into your application. Use when you want to inject the monitoring code in deferred mode.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WebAppAutoInjectionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a WebAppAutoInjection resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param WebAppAutoInjectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WebAppAutoInjectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_id: Optional[pulumi.Input[str]] = None,
                 cache_control_headers: Optional[pulumi.Input[Union['WebAppAutoInjectionCacheControlHeadersArgs', 'WebAppAutoInjectionCacheControlHeadersArgsDict']]] = None,
                 monitoring_code_source_section: Optional[pulumi.Input[Union['WebAppAutoInjectionMonitoringCodeSourceSectionArgs', 'WebAppAutoInjectionMonitoringCodeSourceSectionArgsDict']]] = None,
                 snippet_format: Optional[pulumi.Input[Union['WebAppAutoInjectionSnippetFormatArgs', 'WebAppAutoInjectionSnippetFormatArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WebAppAutoInjectionArgs.__new__(WebAppAutoInjectionArgs)

            if application_id is None and not opts.urn:
                raise TypeError("Missing required property 'application_id'")
            __props__.__dict__["application_id"] = application_id
            if cache_control_headers is None and not opts.urn:
                raise TypeError("Missing required property 'cache_control_headers'")
            __props__.__dict__["cache_control_headers"] = cache_control_headers
            if monitoring_code_source_section is None and not opts.urn:
                raise TypeError("Missing required property 'monitoring_code_source_section'")
            __props__.__dict__["monitoring_code_source_section"] = monitoring_code_source_section
            if snippet_format is None and not opts.urn:
                raise TypeError("Missing required property 'snippet_format'")
            __props__.__dict__["snippet_format"] = snippet_format
        super(WebAppAutoInjection, __self__).__init__(
            'dynatrace:index/webAppAutoInjection:WebAppAutoInjection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            application_id: Optional[pulumi.Input[str]] = None,
            cache_control_headers: Optional[pulumi.Input[Union['WebAppAutoInjectionCacheControlHeadersArgs', 'WebAppAutoInjectionCacheControlHeadersArgsDict']]] = None,
            monitoring_code_source_section: Optional[pulumi.Input[Union['WebAppAutoInjectionMonitoringCodeSourceSectionArgs', 'WebAppAutoInjectionMonitoringCodeSourceSectionArgsDict']]] = None,
            snippet_format: Optional[pulumi.Input[Union['WebAppAutoInjectionSnippetFormatArgs', 'WebAppAutoInjectionSnippetFormatArgsDict']]] = None) -> 'WebAppAutoInjection':
        """
        Get an existing WebAppAutoInjection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] application_id: The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
        :param pulumi.Input[Union['WebAppAutoInjectionCacheControlHeadersArgs', 'WebAppAutoInjectionCacheControlHeadersArgsDict']] cache_control_headers: Cache control headers
        :param pulumi.Input[Union['WebAppAutoInjectionMonitoringCodeSourceSectionArgs', 'WebAppAutoInjectionMonitoringCodeSourceSectionArgsDict']] monitoring_code_source_section: Real User Monitoring code source
        :param pulumi.Input[Union['WebAppAutoInjectionSnippetFormatArgs', 'WebAppAutoInjectionSnippetFormatArgsDict']] snippet_format: *Code Snippet:* OneAgent injects an inline script that initializes Dynatrace and dynamically downloads the monitoring code into your application. Use when you want to inject the monitoring code in deferred mode.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WebAppAutoInjectionState.__new__(_WebAppAutoInjectionState)

        __props__.__dict__["application_id"] = application_id
        __props__.__dict__["cache_control_headers"] = cache_control_headers
        __props__.__dict__["monitoring_code_source_section"] = monitoring_code_source_section
        __props__.__dict__["snippet_format"] = snippet_format
        return WebAppAutoInjection(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Output[str]:
        """
        The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter(name="cacheControlHeaders")
    def cache_control_headers(self) -> pulumi.Output['outputs.WebAppAutoInjectionCacheControlHeaders']:
        """
        Cache control headers
        """
        return pulumi.get(self, "cache_control_headers")

    @property
    @pulumi.getter(name="monitoringCodeSourceSection")
    def monitoring_code_source_section(self) -> pulumi.Output['outputs.WebAppAutoInjectionMonitoringCodeSourceSection']:
        """
        Real User Monitoring code source
        """
        return pulumi.get(self, "monitoring_code_source_section")

    @property
    @pulumi.getter(name="snippetFormat")
    def snippet_format(self) -> pulumi.Output['outputs.WebAppAutoInjectionSnippetFormat']:
        """
        *Code Snippet:* OneAgent injects an inline script that initializes Dynatrace and dynamically downloads the monitoring code into your application. Use when you want to inject the monitoring code in deferred mode.
        """
        return pulumi.get(self, "snippet_format")

