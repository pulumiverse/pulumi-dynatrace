# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['KubernetesAppArgs', 'KubernetesApp']

@pulumi.input_type
class KubernetesAppArgs:
    def __init__(__self__, *,
                 kubernetes_app_options: pulumi.Input['KubernetesAppKubernetesAppOptionsArgs'],
                 scope: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a KubernetesApp resource.
        :param pulumi.Input['KubernetesAppKubernetesAppOptionsArgs'] kubernetes_app_options: no documentation available
        :param pulumi.Input[str] scope: The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
        """
        pulumi.set(__self__, "kubernetes_app_options", kubernetes_app_options)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter(name="kubernetesAppOptions")
    def kubernetes_app_options(self) -> pulumi.Input['KubernetesAppKubernetesAppOptionsArgs']:
        """
        no documentation available
        """
        return pulumi.get(self, "kubernetes_app_options")

    @kubernetes_app_options.setter
    def kubernetes_app_options(self, value: pulumi.Input['KubernetesAppKubernetesAppOptionsArgs']):
        pulumi.set(self, "kubernetes_app_options", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)


@pulumi.input_type
class _KubernetesAppState:
    def __init__(__self__, *,
                 kubernetes_app_options: Optional[pulumi.Input['KubernetesAppKubernetesAppOptionsArgs']] = None,
                 scope: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering KubernetesApp resources.
        :param pulumi.Input['KubernetesAppKubernetesAppOptionsArgs'] kubernetes_app_options: no documentation available
        :param pulumi.Input[str] scope: The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
        """
        if kubernetes_app_options is not None:
            pulumi.set(__self__, "kubernetes_app_options", kubernetes_app_options)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter(name="kubernetesAppOptions")
    def kubernetes_app_options(self) -> Optional[pulumi.Input['KubernetesAppKubernetesAppOptionsArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "kubernetes_app_options")

    @kubernetes_app_options.setter
    def kubernetes_app_options(self, value: Optional[pulumi.Input['KubernetesAppKubernetesAppOptionsArgs']]):
        pulumi.set(self, "kubernetes_app_options", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)


class KubernetesApp(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 kubernetes_app_options: Optional[pulumi.Input[Union['KubernetesAppKubernetesAppOptionsArgs', 'KubernetesAppKubernetesAppOptionsArgsDict']]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a KubernetesApp resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['KubernetesAppKubernetesAppOptionsArgs', 'KubernetesAppKubernetesAppOptionsArgsDict']] kubernetes_app_options: no documentation available
        :param pulumi.Input[str] scope: The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: KubernetesAppArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a KubernetesApp resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param KubernetesAppArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(KubernetesAppArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 kubernetes_app_options: Optional[pulumi.Input[Union['KubernetesAppKubernetesAppOptionsArgs', 'KubernetesAppKubernetesAppOptionsArgsDict']]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = KubernetesAppArgs.__new__(KubernetesAppArgs)

            if kubernetes_app_options is None and not opts.urn:
                raise TypeError("Missing required property 'kubernetes_app_options'")
            __props__.__dict__["kubernetes_app_options"] = kubernetes_app_options
            __props__.__dict__["scope"] = scope
        super(KubernetesApp, __self__).__init__(
            'dynatrace:index/kubernetesApp:KubernetesApp',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            kubernetes_app_options: Optional[pulumi.Input[Union['KubernetesAppKubernetesAppOptionsArgs', 'KubernetesAppKubernetesAppOptionsArgsDict']]] = None,
            scope: Optional[pulumi.Input[str]] = None) -> 'KubernetesApp':
        """
        Get an existing KubernetesApp resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['KubernetesAppKubernetesAppOptionsArgs', 'KubernetesAppKubernetesAppOptionsArgsDict']] kubernetes_app_options: no documentation available
        :param pulumi.Input[str] scope: The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _KubernetesAppState.__new__(_KubernetesAppState)

        __props__.__dict__["kubernetes_app_options"] = kubernetes_app_options
        __props__.__dict__["scope"] = scope
        return KubernetesApp(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="kubernetesAppOptions")
    def kubernetes_app_options(self) -> pulumi.Output['outputs.KubernetesAppKubernetesAppOptions']:
        """
        no documentation available
        """
        return pulumi.get(self, "kubernetes_app_options")

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Output[Optional[str]]:
        """
        The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
        """
        return pulumi.get(self, "scope")

