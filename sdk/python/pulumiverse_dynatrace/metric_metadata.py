# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MetricMetadataArgs', 'MetricMetadata']

@pulumi.input_type
class MetricMetadataArgs:
    def __init__(__self__, *,
                 metric_id: pulumi.Input[str],
                 unit: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 dimensions: Optional[pulumi.Input['MetricMetadataDimensionsArgs']] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 metric_properties: Optional[pulumi.Input['MetricMetadataMetricPropertiesArgs']] = None,
                 source_entity_type: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 unit_display_format: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a MetricMetadata resource.
        :param pulumi.Input[str] metric_id: The scope of this setting (metric)
        :param pulumi.Input[str] unit: Unit
        :param pulumi.Input[str] description: Description
        :param pulumi.Input['MetricMetadataDimensionsArgs'] dimensions: Define metadata per metric dimension.
        :param pulumi.Input[str] display_name: Display name
        :param pulumi.Input['MetricMetadataMetricPropertiesArgs'] metric_properties: Metric properties
        :param pulumi.Input[str] source_entity_type: Specifies which entity dimension should be used as the primary dimension. The property can only be configured for metrics ingested with the Metrics API.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Tags
        :param pulumi.Input[str] unit_display_format: The raw value is stored in bits or bytes. The user interface can display it in these numeral systems:
        """
        pulumi.set(__self__, "metric_id", metric_id)
        pulumi.set(__self__, "unit", unit)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if metric_properties is not None:
            pulumi.set(__self__, "metric_properties", metric_properties)
        if source_entity_type is not None:
            pulumi.set(__self__, "source_entity_type", source_entity_type)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if unit_display_format is not None:
            pulumi.set(__self__, "unit_display_format", unit_display_format)

    @property
    @pulumi.getter(name="metricId")
    def metric_id(self) -> pulumi.Input[str]:
        """
        The scope of this setting (metric)
        """
        return pulumi.get(self, "metric_id")

    @metric_id.setter
    def metric_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric_id", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Unit
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[pulumi.Input['MetricMetadataDimensionsArgs']]:
        """
        Define metadata per metric dimension.
        """
        return pulumi.get(self, "dimensions")

    @dimensions.setter
    def dimensions(self, value: Optional[pulumi.Input['MetricMetadataDimensionsArgs']]):
        pulumi.set(self, "dimensions", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="metricProperties")
    def metric_properties(self) -> Optional[pulumi.Input['MetricMetadataMetricPropertiesArgs']]:
        """
        Metric properties
        """
        return pulumi.get(self, "metric_properties")

    @metric_properties.setter
    def metric_properties(self, value: Optional[pulumi.Input['MetricMetadataMetricPropertiesArgs']]):
        pulumi.set(self, "metric_properties", value)

    @property
    @pulumi.getter(name="sourceEntityType")
    def source_entity_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies which entity dimension should be used as the primary dimension. The property can only be configured for metrics ingested with the Metrics API.
        """
        return pulumi.get(self, "source_entity_type")

    @source_entity_type.setter
    def source_entity_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_entity_type", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="unitDisplayFormat")
    def unit_display_format(self) -> Optional[pulumi.Input[str]]:
        """
        The raw value is stored in bits or bytes. The user interface can display it in these numeral systems:
        """
        return pulumi.get(self, "unit_display_format")

    @unit_display_format.setter
    def unit_display_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit_display_format", value)


@pulumi.input_type
class _MetricMetadataState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 dimensions: Optional[pulumi.Input['MetricMetadataDimensionsArgs']] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 metric_id: Optional[pulumi.Input[str]] = None,
                 metric_properties: Optional[pulumi.Input['MetricMetadataMetricPropertiesArgs']] = None,
                 source_entity_type: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 unit: Optional[pulumi.Input[str]] = None,
                 unit_display_format: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering MetricMetadata resources.
        :param pulumi.Input[str] description: Description
        :param pulumi.Input['MetricMetadataDimensionsArgs'] dimensions: Define metadata per metric dimension.
        :param pulumi.Input[str] display_name: Display name
        :param pulumi.Input[str] metric_id: The scope of this setting (metric)
        :param pulumi.Input['MetricMetadataMetricPropertiesArgs'] metric_properties: Metric properties
        :param pulumi.Input[str] source_entity_type: Specifies which entity dimension should be used as the primary dimension. The property can only be configured for metrics ingested with the Metrics API.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Tags
        :param pulumi.Input[str] unit: Unit
        :param pulumi.Input[str] unit_display_format: The raw value is stored in bits or bytes. The user interface can display it in these numeral systems:
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if metric_id is not None:
            pulumi.set(__self__, "metric_id", metric_id)
        if metric_properties is not None:
            pulumi.set(__self__, "metric_properties", metric_properties)
        if source_entity_type is not None:
            pulumi.set(__self__, "source_entity_type", source_entity_type)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)
        if unit_display_format is not None:
            pulumi.set(__self__, "unit_display_format", unit_display_format)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[pulumi.Input['MetricMetadataDimensionsArgs']]:
        """
        Define metadata per metric dimension.
        """
        return pulumi.get(self, "dimensions")

    @dimensions.setter
    def dimensions(self, value: Optional[pulumi.Input['MetricMetadataDimensionsArgs']]):
        pulumi.set(self, "dimensions", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="metricId")
    def metric_id(self) -> Optional[pulumi.Input[str]]:
        """
        The scope of this setting (metric)
        """
        return pulumi.get(self, "metric_id")

    @metric_id.setter
    def metric_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_id", value)

    @property
    @pulumi.getter(name="metricProperties")
    def metric_properties(self) -> Optional[pulumi.Input['MetricMetadataMetricPropertiesArgs']]:
        """
        Metric properties
        """
        return pulumi.get(self, "metric_properties")

    @metric_properties.setter
    def metric_properties(self, value: Optional[pulumi.Input['MetricMetadataMetricPropertiesArgs']]):
        pulumi.set(self, "metric_properties", value)

    @property
    @pulumi.getter(name="sourceEntityType")
    def source_entity_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies which entity dimension should be used as the primary dimension. The property can only be configured for metrics ingested with the Metrics API.
        """
        return pulumi.get(self, "source_entity_type")

    @source_entity_type.setter
    def source_entity_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_entity_type", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        Unit
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter(name="unitDisplayFormat")
    def unit_display_format(self) -> Optional[pulumi.Input[str]]:
        """
        The raw value is stored in bits or bytes. The user interface can display it in these numeral systems:
        """
        return pulumi.get(self, "unit_display_format")

    @unit_display_format.setter
    def unit_display_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit_display_format", value)


class MetricMetadata(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dimensions: Optional[pulumi.Input[Union['MetricMetadataDimensionsArgs', 'MetricMetadataDimensionsArgsDict']]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 metric_id: Optional[pulumi.Input[str]] = None,
                 metric_properties: Optional[pulumi.Input[Union['MetricMetadataMetricPropertiesArgs', 'MetricMetadataMetricPropertiesArgsDict']]] = None,
                 source_entity_type: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 unit: Optional[pulumi.Input[str]] = None,
                 unit_display_format: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a MetricMetadata resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description
        :param pulumi.Input[Union['MetricMetadataDimensionsArgs', 'MetricMetadataDimensionsArgsDict']] dimensions: Define metadata per metric dimension.
        :param pulumi.Input[str] display_name: Display name
        :param pulumi.Input[str] metric_id: The scope of this setting (metric)
        :param pulumi.Input[Union['MetricMetadataMetricPropertiesArgs', 'MetricMetadataMetricPropertiesArgsDict']] metric_properties: Metric properties
        :param pulumi.Input[str] source_entity_type: Specifies which entity dimension should be used as the primary dimension. The property can only be configured for metrics ingested with the Metrics API.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Tags
        :param pulumi.Input[str] unit: Unit
        :param pulumi.Input[str] unit_display_format: The raw value is stored in bits or bytes. The user interface can display it in these numeral systems:
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MetricMetadataArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a MetricMetadata resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param MetricMetadataArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MetricMetadataArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dimensions: Optional[pulumi.Input[Union['MetricMetadataDimensionsArgs', 'MetricMetadataDimensionsArgsDict']]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 metric_id: Optional[pulumi.Input[str]] = None,
                 metric_properties: Optional[pulumi.Input[Union['MetricMetadataMetricPropertiesArgs', 'MetricMetadataMetricPropertiesArgsDict']]] = None,
                 source_entity_type: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 unit: Optional[pulumi.Input[str]] = None,
                 unit_display_format: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MetricMetadataArgs.__new__(MetricMetadataArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["dimensions"] = dimensions
            __props__.__dict__["display_name"] = display_name
            if metric_id is None and not opts.urn:
                raise TypeError("Missing required property 'metric_id'")
            __props__.__dict__["metric_id"] = metric_id
            __props__.__dict__["metric_properties"] = metric_properties
            __props__.__dict__["source_entity_type"] = source_entity_type
            __props__.__dict__["tags"] = tags
            if unit is None and not opts.urn:
                raise TypeError("Missing required property 'unit'")
            __props__.__dict__["unit"] = unit
            __props__.__dict__["unit_display_format"] = unit_display_format
        super(MetricMetadata, __self__).__init__(
            'dynatrace:index/metricMetadata:MetricMetadata',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            dimensions: Optional[pulumi.Input[Union['MetricMetadataDimensionsArgs', 'MetricMetadataDimensionsArgsDict']]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            metric_id: Optional[pulumi.Input[str]] = None,
            metric_properties: Optional[pulumi.Input[Union['MetricMetadataMetricPropertiesArgs', 'MetricMetadataMetricPropertiesArgsDict']]] = None,
            source_entity_type: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            unit: Optional[pulumi.Input[str]] = None,
            unit_display_format: Optional[pulumi.Input[str]] = None) -> 'MetricMetadata':
        """
        Get an existing MetricMetadata resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description
        :param pulumi.Input[Union['MetricMetadataDimensionsArgs', 'MetricMetadataDimensionsArgsDict']] dimensions: Define metadata per metric dimension.
        :param pulumi.Input[str] display_name: Display name
        :param pulumi.Input[str] metric_id: The scope of this setting (metric)
        :param pulumi.Input[Union['MetricMetadataMetricPropertiesArgs', 'MetricMetadataMetricPropertiesArgsDict']] metric_properties: Metric properties
        :param pulumi.Input[str] source_entity_type: Specifies which entity dimension should be used as the primary dimension. The property can only be configured for metrics ingested with the Metrics API.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Tags
        :param pulumi.Input[str] unit: Unit
        :param pulumi.Input[str] unit_display_format: The raw value is stored in bits or bytes. The user interface can display it in these numeral systems:
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MetricMetadataState.__new__(_MetricMetadataState)

        __props__.__dict__["description"] = description
        __props__.__dict__["dimensions"] = dimensions
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["metric_id"] = metric_id
        __props__.__dict__["metric_properties"] = metric_properties
        __props__.__dict__["source_entity_type"] = source_entity_type
        __props__.__dict__["tags"] = tags
        __props__.__dict__["unit"] = unit
        __props__.__dict__["unit_display_format"] = unit_display_format
        return MetricMetadata(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def dimensions(self) -> pulumi.Output[Optional['outputs.MetricMetadataDimensions']]:
        """
        Define metadata per metric dimension.
        """
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[Optional[str]]:
        """
        Display name
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="metricId")
    def metric_id(self) -> pulumi.Output[str]:
        """
        The scope of this setting (metric)
        """
        return pulumi.get(self, "metric_id")

    @property
    @pulumi.getter(name="metricProperties")
    def metric_properties(self) -> pulumi.Output[Optional['outputs.MetricMetadataMetricProperties']]:
        """
        Metric properties
        """
        return pulumi.get(self, "metric_properties")

    @property
    @pulumi.getter(name="sourceEntityType")
    def source_entity_type(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies which entity dimension should be used as the primary dimension. The property can only be configured for metrics ingested with the Metrics API.
        """
        return pulumi.get(self, "source_entity_type")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Tags
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Output[str]:
        """
        Unit
        """
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter(name="unitDisplayFormat")
    def unit_display_format(self) -> pulumi.Output[Optional[str]]:
        """
        The raw value is stored in bits or bytes. The user interface can display it in these numeral systems:
        """
        return pulumi.get(self, "unit_display_format")

