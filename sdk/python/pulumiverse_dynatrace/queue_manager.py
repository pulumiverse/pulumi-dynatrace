# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['QueueManagerArgs', 'QueueManager']

@pulumi.input_type
class QueueManagerArgs:
    def __init__(__self__, *,
                 alias_queues: Optional[pulumi.Input[Sequence[pulumi.Input['QueueManagerAliasQueueArgs']]]] = None,
                 cluster_queues: Optional[pulumi.Input[Sequence[pulumi.Input['QueueManagerClusterQueueArgs']]]] = None,
                 clusters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 remote_queues: Optional[pulumi.Input[Sequence[pulumi.Input['QueueManagerRemoteQueueArgs']]]] = None):
        """
        The set of arguments for constructing a QueueManager resource.
        :param pulumi.Input[Sequence[pulumi.Input['QueueManagerAliasQueueArgs']]] alias_queues: The alias queues in the queue manager
        :param pulumi.Input[Sequence[pulumi.Input['QueueManagerClusterQueueArgs']]] cluster_queues: The alias queues in the queue manager
        :param pulumi.Input[Sequence[pulumi.Input[str]]] clusters: Name of the cluster(s) this queue manager is part of
        :param pulumi.Input[str] name: The name of the queue manager
        :param pulumi.Input[Sequence[pulumi.Input['QueueManagerRemoteQueueArgs']]] remote_queues: The alias queues in the queue manager
        """
        if alias_queues is not None:
            pulumi.set(__self__, "alias_queues", alias_queues)
        if cluster_queues is not None:
            pulumi.set(__self__, "cluster_queues", cluster_queues)
        if clusters is not None:
            pulumi.set(__self__, "clusters", clusters)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if remote_queues is not None:
            pulumi.set(__self__, "remote_queues", remote_queues)

    @property
    @pulumi.getter(name="aliasQueues")
    def alias_queues(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['QueueManagerAliasQueueArgs']]]]:
        """
        The alias queues in the queue manager
        """
        return pulumi.get(self, "alias_queues")

    @alias_queues.setter
    def alias_queues(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['QueueManagerAliasQueueArgs']]]]):
        pulumi.set(self, "alias_queues", value)

    @property
    @pulumi.getter(name="clusterQueues")
    def cluster_queues(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['QueueManagerClusterQueueArgs']]]]:
        """
        The alias queues in the queue manager
        """
        return pulumi.get(self, "cluster_queues")

    @cluster_queues.setter
    def cluster_queues(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['QueueManagerClusterQueueArgs']]]]):
        pulumi.set(self, "cluster_queues", value)

    @property
    @pulumi.getter
    def clusters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Name of the cluster(s) this queue manager is part of
        """
        return pulumi.get(self, "clusters")

    @clusters.setter
    def clusters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "clusters", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the queue manager
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="remoteQueues")
    def remote_queues(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['QueueManagerRemoteQueueArgs']]]]:
        """
        The alias queues in the queue manager
        """
        return pulumi.get(self, "remote_queues")

    @remote_queues.setter
    def remote_queues(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['QueueManagerRemoteQueueArgs']]]]):
        pulumi.set(self, "remote_queues", value)


@pulumi.input_type
class _QueueManagerState:
    def __init__(__self__, *,
                 alias_queues: Optional[pulumi.Input[Sequence[pulumi.Input['QueueManagerAliasQueueArgs']]]] = None,
                 cluster_queues: Optional[pulumi.Input[Sequence[pulumi.Input['QueueManagerClusterQueueArgs']]]] = None,
                 clusters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 remote_queues: Optional[pulumi.Input[Sequence[pulumi.Input['QueueManagerRemoteQueueArgs']]]] = None):
        """
        Input properties used for looking up and filtering QueueManager resources.
        :param pulumi.Input[Sequence[pulumi.Input['QueueManagerAliasQueueArgs']]] alias_queues: The alias queues in the queue manager
        :param pulumi.Input[Sequence[pulumi.Input['QueueManagerClusterQueueArgs']]] cluster_queues: The alias queues in the queue manager
        :param pulumi.Input[Sequence[pulumi.Input[str]]] clusters: Name of the cluster(s) this queue manager is part of
        :param pulumi.Input[str] name: The name of the queue manager
        :param pulumi.Input[Sequence[pulumi.Input['QueueManagerRemoteQueueArgs']]] remote_queues: The alias queues in the queue manager
        """
        if alias_queues is not None:
            pulumi.set(__self__, "alias_queues", alias_queues)
        if cluster_queues is not None:
            pulumi.set(__self__, "cluster_queues", cluster_queues)
        if clusters is not None:
            pulumi.set(__self__, "clusters", clusters)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if remote_queues is not None:
            pulumi.set(__self__, "remote_queues", remote_queues)

    @property
    @pulumi.getter(name="aliasQueues")
    def alias_queues(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['QueueManagerAliasQueueArgs']]]]:
        """
        The alias queues in the queue manager
        """
        return pulumi.get(self, "alias_queues")

    @alias_queues.setter
    def alias_queues(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['QueueManagerAliasQueueArgs']]]]):
        pulumi.set(self, "alias_queues", value)

    @property
    @pulumi.getter(name="clusterQueues")
    def cluster_queues(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['QueueManagerClusterQueueArgs']]]]:
        """
        The alias queues in the queue manager
        """
        return pulumi.get(self, "cluster_queues")

    @cluster_queues.setter
    def cluster_queues(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['QueueManagerClusterQueueArgs']]]]):
        pulumi.set(self, "cluster_queues", value)

    @property
    @pulumi.getter
    def clusters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Name of the cluster(s) this queue manager is part of
        """
        return pulumi.get(self, "clusters")

    @clusters.setter
    def clusters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "clusters", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the queue manager
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="remoteQueues")
    def remote_queues(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['QueueManagerRemoteQueueArgs']]]]:
        """
        The alias queues in the queue manager
        """
        return pulumi.get(self, "remote_queues")

    @remote_queues.setter
    def remote_queues(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['QueueManagerRemoteQueueArgs']]]]):
        pulumi.set(self, "remote_queues", value)


class QueueManager(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alias_queues: Optional[pulumi.Input[Sequence[pulumi.Input[Union['QueueManagerAliasQueueArgs', 'QueueManagerAliasQueueArgsDict']]]]] = None,
                 cluster_queues: Optional[pulumi.Input[Sequence[pulumi.Input[Union['QueueManagerClusterQueueArgs', 'QueueManagerClusterQueueArgsDict']]]]] = None,
                 clusters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 remote_queues: Optional[pulumi.Input[Sequence[pulumi.Input[Union['QueueManagerRemoteQueueArgs', 'QueueManagerRemoteQueueArgsDict']]]]] = None,
                 __props__=None):
        """
        Create a QueueManager resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['QueueManagerAliasQueueArgs', 'QueueManagerAliasQueueArgsDict']]]] alias_queues: The alias queues in the queue manager
        :param pulumi.Input[Sequence[pulumi.Input[Union['QueueManagerClusterQueueArgs', 'QueueManagerClusterQueueArgsDict']]]] cluster_queues: The alias queues in the queue manager
        :param pulumi.Input[Sequence[pulumi.Input[str]]] clusters: Name of the cluster(s) this queue manager is part of
        :param pulumi.Input[str] name: The name of the queue manager
        :param pulumi.Input[Sequence[pulumi.Input[Union['QueueManagerRemoteQueueArgs', 'QueueManagerRemoteQueueArgsDict']]]] remote_queues: The alias queues in the queue manager
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[QueueManagerArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a QueueManager resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param QueueManagerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(QueueManagerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alias_queues: Optional[pulumi.Input[Sequence[pulumi.Input[Union['QueueManagerAliasQueueArgs', 'QueueManagerAliasQueueArgsDict']]]]] = None,
                 cluster_queues: Optional[pulumi.Input[Sequence[pulumi.Input[Union['QueueManagerClusterQueueArgs', 'QueueManagerClusterQueueArgsDict']]]]] = None,
                 clusters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 remote_queues: Optional[pulumi.Input[Sequence[pulumi.Input[Union['QueueManagerRemoteQueueArgs', 'QueueManagerRemoteQueueArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = QueueManagerArgs.__new__(QueueManagerArgs)

            __props__.__dict__["alias_queues"] = alias_queues
            __props__.__dict__["cluster_queues"] = cluster_queues
            __props__.__dict__["clusters"] = clusters
            __props__.__dict__["name"] = name
            __props__.__dict__["remote_queues"] = remote_queues
        super(QueueManager, __self__).__init__(
            'dynatrace:index/queueManager:QueueManager',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alias_queues: Optional[pulumi.Input[Sequence[pulumi.Input[Union['QueueManagerAliasQueueArgs', 'QueueManagerAliasQueueArgsDict']]]]] = None,
            cluster_queues: Optional[pulumi.Input[Sequence[pulumi.Input[Union['QueueManagerClusterQueueArgs', 'QueueManagerClusterQueueArgsDict']]]]] = None,
            clusters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            remote_queues: Optional[pulumi.Input[Sequence[pulumi.Input[Union['QueueManagerRemoteQueueArgs', 'QueueManagerRemoteQueueArgsDict']]]]] = None) -> 'QueueManager':
        """
        Get an existing QueueManager resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['QueueManagerAliasQueueArgs', 'QueueManagerAliasQueueArgsDict']]]] alias_queues: The alias queues in the queue manager
        :param pulumi.Input[Sequence[pulumi.Input[Union['QueueManagerClusterQueueArgs', 'QueueManagerClusterQueueArgsDict']]]] cluster_queues: The alias queues in the queue manager
        :param pulumi.Input[Sequence[pulumi.Input[str]]] clusters: Name of the cluster(s) this queue manager is part of
        :param pulumi.Input[str] name: The name of the queue manager
        :param pulumi.Input[Sequence[pulumi.Input[Union['QueueManagerRemoteQueueArgs', 'QueueManagerRemoteQueueArgsDict']]]] remote_queues: The alias queues in the queue manager
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _QueueManagerState.__new__(_QueueManagerState)

        __props__.__dict__["alias_queues"] = alias_queues
        __props__.__dict__["cluster_queues"] = cluster_queues
        __props__.__dict__["clusters"] = clusters
        __props__.__dict__["name"] = name
        __props__.__dict__["remote_queues"] = remote_queues
        return QueueManager(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="aliasQueues")
    def alias_queues(self) -> pulumi.Output[Optional[Sequence['outputs.QueueManagerAliasQueue']]]:
        """
        The alias queues in the queue manager
        """
        return pulumi.get(self, "alias_queues")

    @property
    @pulumi.getter(name="clusterQueues")
    def cluster_queues(self) -> pulumi.Output[Optional[Sequence['outputs.QueueManagerClusterQueue']]]:
        """
        The alias queues in the queue manager
        """
        return pulumi.get(self, "cluster_queues")

    @property
    @pulumi.getter
    def clusters(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Name of the cluster(s) this queue manager is part of
        """
        return pulumi.get(self, "clusters")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the queue manager
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="remoteQueues")
    def remote_queues(self) -> pulumi.Output[Optional[Sequence['outputs.QueueManagerRemoteQueue']]]:
        """
        The alias queues in the queue manager
        """
        return pulumi.get(self, "remote_queues")

