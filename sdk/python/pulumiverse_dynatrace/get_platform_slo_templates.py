# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetPlatformSloTemplatesResult',
    'AwaitableGetPlatformSloTemplatesResult',
    'get_platform_slo_templates',
    'get_platform_slo_templates_output',
]

@pulumi.output_type
class GetPlatformSloTemplatesResult:
    """
    A collection of values returned by getPlatformSloTemplates.
    """
    def __init__(__self__, id=None, templates=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if templates and not isinstance(templates, list):
            raise TypeError("Expected argument 'templates' to be a list")
        pulumi.set(__self__, "templates", templates)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def templates(self) -> Sequence['outputs.GetPlatformSloTemplatesTemplateResult']:
        return pulumi.get(self, "templates")


class AwaitableGetPlatformSloTemplatesResult(GetPlatformSloTemplatesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPlatformSloTemplatesResult(
            id=self.id,
            templates=self.templates)


def get_platform_slo_templates(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPlatformSloTemplatesResult:
    """
    > To utilize this data source, please define the environment variables `DT_CLIENT_ID`, `DT_CLIENT_SECRET`, `DT_ACCOUNT_ID` with an OAuth client including the following permissions: **View SLOs** (`slo:slos:read`) and **View SLO objective templates** (`slo:objective-templates:read`).

    The SLO objective templates data source allows to retrieve a list of all templates.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_dynatrace as dynatrace

    test_platform_slo_templates = dynatrace.get_platform_slo_templates()
    pulumi.export("test", test_platform_slo_templates)
    ```
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('dynatrace:index/getPlatformSloTemplates:getPlatformSloTemplates', __args__, opts=opts, typ=GetPlatformSloTemplatesResult).value

    return AwaitableGetPlatformSloTemplatesResult(
        id=pulumi.get(__ret__, 'id'),
        templates=pulumi.get(__ret__, 'templates'))
def get_platform_slo_templates_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPlatformSloTemplatesResult]:
    """
    > To utilize this data source, please define the environment variables `DT_CLIENT_ID`, `DT_CLIENT_SECRET`, `DT_ACCOUNT_ID` with an OAuth client including the following permissions: **View SLOs** (`slo:slos:read`) and **View SLO objective templates** (`slo:objective-templates:read`).

    The SLO objective templates data source allows to retrieve a list of all templates.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_dynatrace as dynatrace

    test_platform_slo_templates = dynatrace.get_platform_slo_templates()
    pulumi.export("test", test_platform_slo_templates)
    ```
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('dynatrace:index/getPlatformSloTemplates:getPlatformSloTemplates', __args__, opts=opts, typ=GetPlatformSloTemplatesResult)
    return __ret__.apply(lambda __response__: GetPlatformSloTemplatesResult(
        id=pulumi.get(__response__, 'id'),
        templates=pulumi.get(__response__, 'templates')))
