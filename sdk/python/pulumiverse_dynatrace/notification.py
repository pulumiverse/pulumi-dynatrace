# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NotificationArgs', 'Notification']

@pulumi.input_type
class NotificationArgs:
    def __init__(__self__, *,
                 ansible_tower: Optional[pulumi.Input['NotificationAnsibleTowerArgs']] = None,
                 config: Optional[pulumi.Input['NotificationConfigArgs']] = None,
                 email: Optional[pulumi.Input['NotificationEmailArgs']] = None,
                 jira: Optional[pulumi.Input['NotificationJiraArgs']] = None,
                 ops_genie: Optional[pulumi.Input['NotificationOpsGenieArgs']] = None,
                 pager_duty: Optional[pulumi.Input['NotificationPagerDutyArgs']] = None,
                 service_now: Optional[pulumi.Input['NotificationServiceNowArgs']] = None,
                 slack: Optional[pulumi.Input['NotificationSlackArgs']] = None,
                 trello: Optional[pulumi.Input['NotificationTrelloArgs']] = None,
                 victor_ops: Optional[pulumi.Input['NotificationVictorOpsArgs']] = None,
                 web_hook: Optional[pulumi.Input['NotificationWebHookArgs']] = None,
                 xmatters: Optional[pulumi.Input['NotificationXmattersArgs']] = None):
        """
        The set of arguments for constructing a Notification resource.
        :param pulumi.Input['NotificationAnsibleTowerArgs'] ansible_tower: Configuration for Ansible Tower Notification
        :param pulumi.Input['NotificationConfigArgs'] config: Configuration for Generic Notification
        :param pulumi.Input['NotificationEmailArgs'] email: Configuration for Email Notification
        :param pulumi.Input['NotificationJiraArgs'] jira: Configuration for Jira Notification
        :param pulumi.Input['NotificationOpsGenieArgs'] ops_genie: Configuration for OpsGenie Notification
        :param pulumi.Input['NotificationPagerDutyArgs'] pager_duty: Configuration for PagerDuty Notification
        :param pulumi.Input['NotificationServiceNowArgs'] service_now: Configuration for ServiceNow Notification
        :param pulumi.Input['NotificationSlackArgs'] slack: Configuration for Slack Notification
        :param pulumi.Input['NotificationTrelloArgs'] trello: Configuration for Trello Notification
        :param pulumi.Input['NotificationVictorOpsArgs'] victor_ops: Configuration for VictorOps Notification
        :param pulumi.Input['NotificationWebHookArgs'] web_hook: Configuration for WebHook Notification
        :param pulumi.Input['NotificationXmattersArgs'] xmatters: Configuration for XMatters Notification
        """
        if ansible_tower is not None:
            pulumi.set(__self__, "ansible_tower", ansible_tower)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if jira is not None:
            pulumi.set(__self__, "jira", jira)
        if ops_genie is not None:
            pulumi.set(__self__, "ops_genie", ops_genie)
        if pager_duty is not None:
            pulumi.set(__self__, "pager_duty", pager_duty)
        if service_now is not None:
            pulumi.set(__self__, "service_now", service_now)
        if slack is not None:
            pulumi.set(__self__, "slack", slack)
        if trello is not None:
            pulumi.set(__self__, "trello", trello)
        if victor_ops is not None:
            pulumi.set(__self__, "victor_ops", victor_ops)
        if web_hook is not None:
            pulumi.set(__self__, "web_hook", web_hook)
        if xmatters is not None:
            pulumi.set(__self__, "xmatters", xmatters)

    @property
    @pulumi.getter(name="ansibleTower")
    def ansible_tower(self) -> Optional[pulumi.Input['NotificationAnsibleTowerArgs']]:
        """
        Configuration for Ansible Tower Notification
        """
        return pulumi.get(self, "ansible_tower")

    @ansible_tower.setter
    def ansible_tower(self, value: Optional[pulumi.Input['NotificationAnsibleTowerArgs']]):
        pulumi.set(self, "ansible_tower", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['NotificationConfigArgs']]:
        """
        Configuration for Generic Notification
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['NotificationConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input['NotificationEmailArgs']]:
        """
        Configuration for Email Notification
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input['NotificationEmailArgs']]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def jira(self) -> Optional[pulumi.Input['NotificationJiraArgs']]:
        """
        Configuration for Jira Notification
        """
        return pulumi.get(self, "jira")

    @jira.setter
    def jira(self, value: Optional[pulumi.Input['NotificationJiraArgs']]):
        pulumi.set(self, "jira", value)

    @property
    @pulumi.getter(name="opsGenie")
    def ops_genie(self) -> Optional[pulumi.Input['NotificationOpsGenieArgs']]:
        """
        Configuration for OpsGenie Notification
        """
        return pulumi.get(self, "ops_genie")

    @ops_genie.setter
    def ops_genie(self, value: Optional[pulumi.Input['NotificationOpsGenieArgs']]):
        pulumi.set(self, "ops_genie", value)

    @property
    @pulumi.getter(name="pagerDuty")
    def pager_duty(self) -> Optional[pulumi.Input['NotificationPagerDutyArgs']]:
        """
        Configuration for PagerDuty Notification
        """
        return pulumi.get(self, "pager_duty")

    @pager_duty.setter
    def pager_duty(self, value: Optional[pulumi.Input['NotificationPagerDutyArgs']]):
        pulumi.set(self, "pager_duty", value)

    @property
    @pulumi.getter(name="serviceNow")
    def service_now(self) -> Optional[pulumi.Input['NotificationServiceNowArgs']]:
        """
        Configuration for ServiceNow Notification
        """
        return pulumi.get(self, "service_now")

    @service_now.setter
    def service_now(self, value: Optional[pulumi.Input['NotificationServiceNowArgs']]):
        pulumi.set(self, "service_now", value)

    @property
    @pulumi.getter
    def slack(self) -> Optional[pulumi.Input['NotificationSlackArgs']]:
        """
        Configuration for Slack Notification
        """
        return pulumi.get(self, "slack")

    @slack.setter
    def slack(self, value: Optional[pulumi.Input['NotificationSlackArgs']]):
        pulumi.set(self, "slack", value)

    @property
    @pulumi.getter
    def trello(self) -> Optional[pulumi.Input['NotificationTrelloArgs']]:
        """
        Configuration for Trello Notification
        """
        return pulumi.get(self, "trello")

    @trello.setter
    def trello(self, value: Optional[pulumi.Input['NotificationTrelloArgs']]):
        pulumi.set(self, "trello", value)

    @property
    @pulumi.getter(name="victorOps")
    def victor_ops(self) -> Optional[pulumi.Input['NotificationVictorOpsArgs']]:
        """
        Configuration for VictorOps Notification
        """
        return pulumi.get(self, "victor_ops")

    @victor_ops.setter
    def victor_ops(self, value: Optional[pulumi.Input['NotificationVictorOpsArgs']]):
        pulumi.set(self, "victor_ops", value)

    @property
    @pulumi.getter(name="webHook")
    def web_hook(self) -> Optional[pulumi.Input['NotificationWebHookArgs']]:
        """
        Configuration for WebHook Notification
        """
        return pulumi.get(self, "web_hook")

    @web_hook.setter
    def web_hook(self, value: Optional[pulumi.Input['NotificationWebHookArgs']]):
        pulumi.set(self, "web_hook", value)

    @property
    @pulumi.getter
    def xmatters(self) -> Optional[pulumi.Input['NotificationXmattersArgs']]:
        """
        Configuration for XMatters Notification
        """
        return pulumi.get(self, "xmatters")

    @xmatters.setter
    def xmatters(self, value: Optional[pulumi.Input['NotificationXmattersArgs']]):
        pulumi.set(self, "xmatters", value)


@pulumi.input_type
class _NotificationState:
    def __init__(__self__, *,
                 ansible_tower: Optional[pulumi.Input['NotificationAnsibleTowerArgs']] = None,
                 config: Optional[pulumi.Input['NotificationConfigArgs']] = None,
                 email: Optional[pulumi.Input['NotificationEmailArgs']] = None,
                 jira: Optional[pulumi.Input['NotificationJiraArgs']] = None,
                 ops_genie: Optional[pulumi.Input['NotificationOpsGenieArgs']] = None,
                 pager_duty: Optional[pulumi.Input['NotificationPagerDutyArgs']] = None,
                 service_now: Optional[pulumi.Input['NotificationServiceNowArgs']] = None,
                 slack: Optional[pulumi.Input['NotificationSlackArgs']] = None,
                 trello: Optional[pulumi.Input['NotificationTrelloArgs']] = None,
                 victor_ops: Optional[pulumi.Input['NotificationVictorOpsArgs']] = None,
                 web_hook: Optional[pulumi.Input['NotificationWebHookArgs']] = None,
                 xmatters: Optional[pulumi.Input['NotificationXmattersArgs']] = None):
        """
        Input properties used for looking up and filtering Notification resources.
        :param pulumi.Input['NotificationAnsibleTowerArgs'] ansible_tower: Configuration for Ansible Tower Notification
        :param pulumi.Input['NotificationConfigArgs'] config: Configuration for Generic Notification
        :param pulumi.Input['NotificationEmailArgs'] email: Configuration for Email Notification
        :param pulumi.Input['NotificationJiraArgs'] jira: Configuration for Jira Notification
        :param pulumi.Input['NotificationOpsGenieArgs'] ops_genie: Configuration for OpsGenie Notification
        :param pulumi.Input['NotificationPagerDutyArgs'] pager_duty: Configuration for PagerDuty Notification
        :param pulumi.Input['NotificationServiceNowArgs'] service_now: Configuration for ServiceNow Notification
        :param pulumi.Input['NotificationSlackArgs'] slack: Configuration for Slack Notification
        :param pulumi.Input['NotificationTrelloArgs'] trello: Configuration for Trello Notification
        :param pulumi.Input['NotificationVictorOpsArgs'] victor_ops: Configuration for VictorOps Notification
        :param pulumi.Input['NotificationWebHookArgs'] web_hook: Configuration for WebHook Notification
        :param pulumi.Input['NotificationXmattersArgs'] xmatters: Configuration for XMatters Notification
        """
        if ansible_tower is not None:
            pulumi.set(__self__, "ansible_tower", ansible_tower)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if jira is not None:
            pulumi.set(__self__, "jira", jira)
        if ops_genie is not None:
            pulumi.set(__self__, "ops_genie", ops_genie)
        if pager_duty is not None:
            pulumi.set(__self__, "pager_duty", pager_duty)
        if service_now is not None:
            pulumi.set(__self__, "service_now", service_now)
        if slack is not None:
            pulumi.set(__self__, "slack", slack)
        if trello is not None:
            pulumi.set(__self__, "trello", trello)
        if victor_ops is not None:
            pulumi.set(__self__, "victor_ops", victor_ops)
        if web_hook is not None:
            pulumi.set(__self__, "web_hook", web_hook)
        if xmatters is not None:
            pulumi.set(__self__, "xmatters", xmatters)

    @property
    @pulumi.getter(name="ansibleTower")
    def ansible_tower(self) -> Optional[pulumi.Input['NotificationAnsibleTowerArgs']]:
        """
        Configuration for Ansible Tower Notification
        """
        return pulumi.get(self, "ansible_tower")

    @ansible_tower.setter
    def ansible_tower(self, value: Optional[pulumi.Input['NotificationAnsibleTowerArgs']]):
        pulumi.set(self, "ansible_tower", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['NotificationConfigArgs']]:
        """
        Configuration for Generic Notification
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['NotificationConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input['NotificationEmailArgs']]:
        """
        Configuration for Email Notification
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input['NotificationEmailArgs']]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def jira(self) -> Optional[pulumi.Input['NotificationJiraArgs']]:
        """
        Configuration for Jira Notification
        """
        return pulumi.get(self, "jira")

    @jira.setter
    def jira(self, value: Optional[pulumi.Input['NotificationJiraArgs']]):
        pulumi.set(self, "jira", value)

    @property
    @pulumi.getter(name="opsGenie")
    def ops_genie(self) -> Optional[pulumi.Input['NotificationOpsGenieArgs']]:
        """
        Configuration for OpsGenie Notification
        """
        return pulumi.get(self, "ops_genie")

    @ops_genie.setter
    def ops_genie(self, value: Optional[pulumi.Input['NotificationOpsGenieArgs']]):
        pulumi.set(self, "ops_genie", value)

    @property
    @pulumi.getter(name="pagerDuty")
    def pager_duty(self) -> Optional[pulumi.Input['NotificationPagerDutyArgs']]:
        """
        Configuration for PagerDuty Notification
        """
        return pulumi.get(self, "pager_duty")

    @pager_duty.setter
    def pager_duty(self, value: Optional[pulumi.Input['NotificationPagerDutyArgs']]):
        pulumi.set(self, "pager_duty", value)

    @property
    @pulumi.getter(name="serviceNow")
    def service_now(self) -> Optional[pulumi.Input['NotificationServiceNowArgs']]:
        """
        Configuration for ServiceNow Notification
        """
        return pulumi.get(self, "service_now")

    @service_now.setter
    def service_now(self, value: Optional[pulumi.Input['NotificationServiceNowArgs']]):
        pulumi.set(self, "service_now", value)

    @property
    @pulumi.getter
    def slack(self) -> Optional[pulumi.Input['NotificationSlackArgs']]:
        """
        Configuration for Slack Notification
        """
        return pulumi.get(self, "slack")

    @slack.setter
    def slack(self, value: Optional[pulumi.Input['NotificationSlackArgs']]):
        pulumi.set(self, "slack", value)

    @property
    @pulumi.getter
    def trello(self) -> Optional[pulumi.Input['NotificationTrelloArgs']]:
        """
        Configuration for Trello Notification
        """
        return pulumi.get(self, "trello")

    @trello.setter
    def trello(self, value: Optional[pulumi.Input['NotificationTrelloArgs']]):
        pulumi.set(self, "trello", value)

    @property
    @pulumi.getter(name="victorOps")
    def victor_ops(self) -> Optional[pulumi.Input['NotificationVictorOpsArgs']]:
        """
        Configuration for VictorOps Notification
        """
        return pulumi.get(self, "victor_ops")

    @victor_ops.setter
    def victor_ops(self, value: Optional[pulumi.Input['NotificationVictorOpsArgs']]):
        pulumi.set(self, "victor_ops", value)

    @property
    @pulumi.getter(name="webHook")
    def web_hook(self) -> Optional[pulumi.Input['NotificationWebHookArgs']]:
        """
        Configuration for WebHook Notification
        """
        return pulumi.get(self, "web_hook")

    @web_hook.setter
    def web_hook(self, value: Optional[pulumi.Input['NotificationWebHookArgs']]):
        pulumi.set(self, "web_hook", value)

    @property
    @pulumi.getter
    def xmatters(self) -> Optional[pulumi.Input['NotificationXmattersArgs']]:
        """
        Configuration for XMatters Notification
        """
        return pulumi.get(self, "xmatters")

    @xmatters.setter
    def xmatters(self, value: Optional[pulumi.Input['NotificationXmattersArgs']]):
        pulumi.set(self, "xmatters", value)


class Notification(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ansible_tower: Optional[pulumi.Input[Union['NotificationAnsibleTowerArgs', 'NotificationAnsibleTowerArgsDict']]] = None,
                 config: Optional[pulumi.Input[Union['NotificationConfigArgs', 'NotificationConfigArgsDict']]] = None,
                 email: Optional[pulumi.Input[Union['NotificationEmailArgs', 'NotificationEmailArgsDict']]] = None,
                 jira: Optional[pulumi.Input[Union['NotificationJiraArgs', 'NotificationJiraArgsDict']]] = None,
                 ops_genie: Optional[pulumi.Input[Union['NotificationOpsGenieArgs', 'NotificationOpsGenieArgsDict']]] = None,
                 pager_duty: Optional[pulumi.Input[Union['NotificationPagerDutyArgs', 'NotificationPagerDutyArgsDict']]] = None,
                 service_now: Optional[pulumi.Input[Union['NotificationServiceNowArgs', 'NotificationServiceNowArgsDict']]] = None,
                 slack: Optional[pulumi.Input[Union['NotificationSlackArgs', 'NotificationSlackArgsDict']]] = None,
                 trello: Optional[pulumi.Input[Union['NotificationTrelloArgs', 'NotificationTrelloArgsDict']]] = None,
                 victor_ops: Optional[pulumi.Input[Union['NotificationVictorOpsArgs', 'NotificationVictorOpsArgsDict']]] = None,
                 web_hook: Optional[pulumi.Input[Union['NotificationWebHookArgs', 'NotificationWebHookArgsDict']]] = None,
                 xmatters: Optional[pulumi.Input[Union['NotificationXmattersArgs', 'NotificationXmattersArgsDict']]] = None,
                 __props__=None):
        """
        Create a Notification resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['NotificationAnsibleTowerArgs', 'NotificationAnsibleTowerArgsDict']] ansible_tower: Configuration for Ansible Tower Notification
        :param pulumi.Input[Union['NotificationConfigArgs', 'NotificationConfigArgsDict']] config: Configuration for Generic Notification
        :param pulumi.Input[Union['NotificationEmailArgs', 'NotificationEmailArgsDict']] email: Configuration for Email Notification
        :param pulumi.Input[Union['NotificationJiraArgs', 'NotificationJiraArgsDict']] jira: Configuration for Jira Notification
        :param pulumi.Input[Union['NotificationOpsGenieArgs', 'NotificationOpsGenieArgsDict']] ops_genie: Configuration for OpsGenie Notification
        :param pulumi.Input[Union['NotificationPagerDutyArgs', 'NotificationPagerDutyArgsDict']] pager_duty: Configuration for PagerDuty Notification
        :param pulumi.Input[Union['NotificationServiceNowArgs', 'NotificationServiceNowArgsDict']] service_now: Configuration for ServiceNow Notification
        :param pulumi.Input[Union['NotificationSlackArgs', 'NotificationSlackArgsDict']] slack: Configuration for Slack Notification
        :param pulumi.Input[Union['NotificationTrelloArgs', 'NotificationTrelloArgsDict']] trello: Configuration for Trello Notification
        :param pulumi.Input[Union['NotificationVictorOpsArgs', 'NotificationVictorOpsArgsDict']] victor_ops: Configuration for VictorOps Notification
        :param pulumi.Input[Union['NotificationWebHookArgs', 'NotificationWebHookArgsDict']] web_hook: Configuration for WebHook Notification
        :param pulumi.Input[Union['NotificationXmattersArgs', 'NotificationXmattersArgsDict']] xmatters: Configuration for XMatters Notification
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[NotificationArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Notification resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NotificationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NotificationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ansible_tower: Optional[pulumi.Input[Union['NotificationAnsibleTowerArgs', 'NotificationAnsibleTowerArgsDict']]] = None,
                 config: Optional[pulumi.Input[Union['NotificationConfigArgs', 'NotificationConfigArgsDict']]] = None,
                 email: Optional[pulumi.Input[Union['NotificationEmailArgs', 'NotificationEmailArgsDict']]] = None,
                 jira: Optional[pulumi.Input[Union['NotificationJiraArgs', 'NotificationJiraArgsDict']]] = None,
                 ops_genie: Optional[pulumi.Input[Union['NotificationOpsGenieArgs', 'NotificationOpsGenieArgsDict']]] = None,
                 pager_duty: Optional[pulumi.Input[Union['NotificationPagerDutyArgs', 'NotificationPagerDutyArgsDict']]] = None,
                 service_now: Optional[pulumi.Input[Union['NotificationServiceNowArgs', 'NotificationServiceNowArgsDict']]] = None,
                 slack: Optional[pulumi.Input[Union['NotificationSlackArgs', 'NotificationSlackArgsDict']]] = None,
                 trello: Optional[pulumi.Input[Union['NotificationTrelloArgs', 'NotificationTrelloArgsDict']]] = None,
                 victor_ops: Optional[pulumi.Input[Union['NotificationVictorOpsArgs', 'NotificationVictorOpsArgsDict']]] = None,
                 web_hook: Optional[pulumi.Input[Union['NotificationWebHookArgs', 'NotificationWebHookArgsDict']]] = None,
                 xmatters: Optional[pulumi.Input[Union['NotificationXmattersArgs', 'NotificationXmattersArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NotificationArgs.__new__(NotificationArgs)

            __props__.__dict__["ansible_tower"] = ansible_tower
            __props__.__dict__["config"] = config
            __props__.__dict__["email"] = email
            __props__.__dict__["jira"] = jira
            __props__.__dict__["ops_genie"] = ops_genie
            __props__.__dict__["pager_duty"] = pager_duty
            __props__.__dict__["service_now"] = service_now
            __props__.__dict__["slack"] = slack
            __props__.__dict__["trello"] = trello
            __props__.__dict__["victor_ops"] = victor_ops
            __props__.__dict__["web_hook"] = web_hook
            __props__.__dict__["xmatters"] = xmatters
        super(Notification, __self__).__init__(
            'dynatrace:index/notification:Notification',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ansible_tower: Optional[pulumi.Input[Union['NotificationAnsibleTowerArgs', 'NotificationAnsibleTowerArgsDict']]] = None,
            config: Optional[pulumi.Input[Union['NotificationConfigArgs', 'NotificationConfigArgsDict']]] = None,
            email: Optional[pulumi.Input[Union['NotificationEmailArgs', 'NotificationEmailArgsDict']]] = None,
            jira: Optional[pulumi.Input[Union['NotificationJiraArgs', 'NotificationJiraArgsDict']]] = None,
            ops_genie: Optional[pulumi.Input[Union['NotificationOpsGenieArgs', 'NotificationOpsGenieArgsDict']]] = None,
            pager_duty: Optional[pulumi.Input[Union['NotificationPagerDutyArgs', 'NotificationPagerDutyArgsDict']]] = None,
            service_now: Optional[pulumi.Input[Union['NotificationServiceNowArgs', 'NotificationServiceNowArgsDict']]] = None,
            slack: Optional[pulumi.Input[Union['NotificationSlackArgs', 'NotificationSlackArgsDict']]] = None,
            trello: Optional[pulumi.Input[Union['NotificationTrelloArgs', 'NotificationTrelloArgsDict']]] = None,
            victor_ops: Optional[pulumi.Input[Union['NotificationVictorOpsArgs', 'NotificationVictorOpsArgsDict']]] = None,
            web_hook: Optional[pulumi.Input[Union['NotificationWebHookArgs', 'NotificationWebHookArgsDict']]] = None,
            xmatters: Optional[pulumi.Input[Union['NotificationXmattersArgs', 'NotificationXmattersArgsDict']]] = None) -> 'Notification':
        """
        Get an existing Notification resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['NotificationAnsibleTowerArgs', 'NotificationAnsibleTowerArgsDict']] ansible_tower: Configuration for Ansible Tower Notification
        :param pulumi.Input[Union['NotificationConfigArgs', 'NotificationConfigArgsDict']] config: Configuration for Generic Notification
        :param pulumi.Input[Union['NotificationEmailArgs', 'NotificationEmailArgsDict']] email: Configuration for Email Notification
        :param pulumi.Input[Union['NotificationJiraArgs', 'NotificationJiraArgsDict']] jira: Configuration for Jira Notification
        :param pulumi.Input[Union['NotificationOpsGenieArgs', 'NotificationOpsGenieArgsDict']] ops_genie: Configuration for OpsGenie Notification
        :param pulumi.Input[Union['NotificationPagerDutyArgs', 'NotificationPagerDutyArgsDict']] pager_duty: Configuration for PagerDuty Notification
        :param pulumi.Input[Union['NotificationServiceNowArgs', 'NotificationServiceNowArgsDict']] service_now: Configuration for ServiceNow Notification
        :param pulumi.Input[Union['NotificationSlackArgs', 'NotificationSlackArgsDict']] slack: Configuration for Slack Notification
        :param pulumi.Input[Union['NotificationTrelloArgs', 'NotificationTrelloArgsDict']] trello: Configuration for Trello Notification
        :param pulumi.Input[Union['NotificationVictorOpsArgs', 'NotificationVictorOpsArgsDict']] victor_ops: Configuration for VictorOps Notification
        :param pulumi.Input[Union['NotificationWebHookArgs', 'NotificationWebHookArgsDict']] web_hook: Configuration for WebHook Notification
        :param pulumi.Input[Union['NotificationXmattersArgs', 'NotificationXmattersArgsDict']] xmatters: Configuration for XMatters Notification
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NotificationState.__new__(_NotificationState)

        __props__.__dict__["ansible_tower"] = ansible_tower
        __props__.__dict__["config"] = config
        __props__.__dict__["email"] = email
        __props__.__dict__["jira"] = jira
        __props__.__dict__["ops_genie"] = ops_genie
        __props__.__dict__["pager_duty"] = pager_duty
        __props__.__dict__["service_now"] = service_now
        __props__.__dict__["slack"] = slack
        __props__.__dict__["trello"] = trello
        __props__.__dict__["victor_ops"] = victor_ops
        __props__.__dict__["web_hook"] = web_hook
        __props__.__dict__["xmatters"] = xmatters
        return Notification(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="ansibleTower")
    def ansible_tower(self) -> pulumi.Output[Optional['outputs.NotificationAnsibleTower']]:
        """
        Configuration for Ansible Tower Notification
        """
        return pulumi.get(self, "ansible_tower")

    @property
    @pulumi.getter
    def config(self) -> pulumi.Output[Optional['outputs.NotificationConfig']]:
        """
        Configuration for Generic Notification
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def email(self) -> pulumi.Output[Optional['outputs.NotificationEmail']]:
        """
        Configuration for Email Notification
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def jira(self) -> pulumi.Output[Optional['outputs.NotificationJira']]:
        """
        Configuration for Jira Notification
        """
        return pulumi.get(self, "jira")

    @property
    @pulumi.getter(name="opsGenie")
    def ops_genie(self) -> pulumi.Output[Optional['outputs.NotificationOpsGenie']]:
        """
        Configuration for OpsGenie Notification
        """
        return pulumi.get(self, "ops_genie")

    @property
    @pulumi.getter(name="pagerDuty")
    def pager_duty(self) -> pulumi.Output[Optional['outputs.NotificationPagerDuty']]:
        """
        Configuration for PagerDuty Notification
        """
        return pulumi.get(self, "pager_duty")

    @property
    @pulumi.getter(name="serviceNow")
    def service_now(self) -> pulumi.Output[Optional['outputs.NotificationServiceNow']]:
        """
        Configuration for ServiceNow Notification
        """
        return pulumi.get(self, "service_now")

    @property
    @pulumi.getter
    def slack(self) -> pulumi.Output[Optional['outputs.NotificationSlack']]:
        """
        Configuration for Slack Notification
        """
        return pulumi.get(self, "slack")

    @property
    @pulumi.getter
    def trello(self) -> pulumi.Output[Optional['outputs.NotificationTrello']]:
        """
        Configuration for Trello Notification
        """
        return pulumi.get(self, "trello")

    @property
    @pulumi.getter(name="victorOps")
    def victor_ops(self) -> pulumi.Output[Optional['outputs.NotificationVictorOps']]:
        """
        Configuration for VictorOps Notification
        """
        return pulumi.get(self, "victor_ops")

    @property
    @pulumi.getter(name="webHook")
    def web_hook(self) -> pulumi.Output[Optional['outputs.NotificationWebHook']]:
        """
        Configuration for WebHook Notification
        """
        return pulumi.get(self, "web_hook")

    @property
    @pulumi.getter
    def xmatters(self) -> pulumi.Output[Optional['outputs.NotificationXmatters']]:
        """
        Configuration for XMatters Notification
        """
        return pulumi.get(self, "xmatters")

