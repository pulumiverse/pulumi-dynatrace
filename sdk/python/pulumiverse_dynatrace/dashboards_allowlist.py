# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DashboardsAllowlistArgs', 'DashboardsAllowlist']

@pulumi.input_type
class DashboardsAllowlistArgs:
    def __init__(__self__, *,
                 allowlist: Optional[pulumi.Input['DashboardsAllowlistAllowlistArgs']] = None):
        """
        The set of arguments for constructing a DashboardsAllowlist resource.
        :param pulumi.Input['DashboardsAllowlistAllowlistArgs'] allowlist: List of URL pattern matchers
        """
        if allowlist is not None:
            pulumi.set(__self__, "allowlist", allowlist)

    @property
    @pulumi.getter
    def allowlist(self) -> Optional[pulumi.Input['DashboardsAllowlistAllowlistArgs']]:
        """
        List of URL pattern matchers
        """
        return pulumi.get(self, "allowlist")

    @allowlist.setter
    def allowlist(self, value: Optional[pulumi.Input['DashboardsAllowlistAllowlistArgs']]):
        pulumi.set(self, "allowlist", value)


@pulumi.input_type
class _DashboardsAllowlistState:
    def __init__(__self__, *,
                 allowlist: Optional[pulumi.Input['DashboardsAllowlistAllowlistArgs']] = None):
        """
        Input properties used for looking up and filtering DashboardsAllowlist resources.
        :param pulumi.Input['DashboardsAllowlistAllowlistArgs'] allowlist: List of URL pattern matchers
        """
        if allowlist is not None:
            pulumi.set(__self__, "allowlist", allowlist)

    @property
    @pulumi.getter
    def allowlist(self) -> Optional[pulumi.Input['DashboardsAllowlistAllowlistArgs']]:
        """
        List of URL pattern matchers
        """
        return pulumi.get(self, "allowlist")

    @allowlist.setter
    def allowlist(self, value: Optional[pulumi.Input['DashboardsAllowlistAllowlistArgs']]):
        pulumi.set(self, "allowlist", value)


class DashboardsAllowlist(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowlist: Optional[pulumi.Input[Union['DashboardsAllowlistAllowlistArgs', 'DashboardsAllowlistAllowlistArgsDict']]] = None,
                 __props__=None):
        """
        Create a DashboardsAllowlist resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['DashboardsAllowlistAllowlistArgs', 'DashboardsAllowlistAllowlistArgsDict']] allowlist: List of URL pattern matchers
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[DashboardsAllowlistArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DashboardsAllowlist resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DashboardsAllowlistArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DashboardsAllowlistArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowlist: Optional[pulumi.Input[Union['DashboardsAllowlistAllowlistArgs', 'DashboardsAllowlistAllowlistArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DashboardsAllowlistArgs.__new__(DashboardsAllowlistArgs)

            __props__.__dict__["allowlist"] = allowlist
        super(DashboardsAllowlist, __self__).__init__(
            'dynatrace:index/dashboardsAllowlist:DashboardsAllowlist',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allowlist: Optional[pulumi.Input[Union['DashboardsAllowlistAllowlistArgs', 'DashboardsAllowlistAllowlistArgsDict']]] = None) -> 'DashboardsAllowlist':
        """
        Get an existing DashboardsAllowlist resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['DashboardsAllowlistAllowlistArgs', 'DashboardsAllowlistAllowlistArgsDict']] allowlist: List of URL pattern matchers
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DashboardsAllowlistState.__new__(_DashboardsAllowlistState)

        __props__.__dict__["allowlist"] = allowlist
        return DashboardsAllowlist(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def allowlist(self) -> pulumi.Output[Optional['outputs.DashboardsAllowlistAllowlist']]:
        """
        List of URL pattern matchers
        """
        return pulumi.get(self, "allowlist")

