# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['BusinessEventsCapturingVariantsArgs', 'BusinessEventsCapturingVariants']

@pulumi.input_type
class BusinessEventsCapturingVariantsArgs:
    def __init__(__self__, *,
                 content_type_matcher: pulumi.Input[str],
                 content_type_value: pulumi.Input[str],
                 parser: pulumi.Input[str],
                 insert_after: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a BusinessEventsCapturingVariants resource.
        :param pulumi.Input[str] content_type_matcher: Possible Values: `CONTAINS`, `ENDS_WITH`, `EQUALS`, `STARTS_WITH`
        :param pulumi.Input[str] content_type_value: Content-type match value
        :param pulumi.Input[str] parser: Possible Values: `JSON`, `Raw`, `Text`, `URLencoded`, `XML`
        :param pulumi.Input[str] insert_after: Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        :param pulumi.Input[str] scope: The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
        """
        pulumi.set(__self__, "content_type_matcher", content_type_matcher)
        pulumi.set(__self__, "content_type_value", content_type_value)
        pulumi.set(__self__, "parser", parser)
        if insert_after is not None:
            pulumi.set(__self__, "insert_after", insert_after)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter(name="contentTypeMatcher")
    def content_type_matcher(self) -> pulumi.Input[str]:
        """
        Possible Values: `CONTAINS`, `ENDS_WITH`, `EQUALS`, `STARTS_WITH`
        """
        return pulumi.get(self, "content_type_matcher")

    @content_type_matcher.setter
    def content_type_matcher(self, value: pulumi.Input[str]):
        pulumi.set(self, "content_type_matcher", value)

    @property
    @pulumi.getter(name="contentTypeValue")
    def content_type_value(self) -> pulumi.Input[str]:
        """
        Content-type match value
        """
        return pulumi.get(self, "content_type_value")

    @content_type_value.setter
    def content_type_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "content_type_value", value)

    @property
    @pulumi.getter
    def parser(self) -> pulumi.Input[str]:
        """
        Possible Values: `JSON`, `Raw`, `Text`, `URLencoded`, `XML`
        """
        return pulumi.get(self, "parser")

    @parser.setter
    def parser(self, value: pulumi.Input[str]):
        pulumi.set(self, "parser", value)

    @property
    @pulumi.getter(name="insertAfter")
    def insert_after(self) -> Optional[pulumi.Input[str]]:
        """
        Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        """
        return pulumi.get(self, "insert_after")

    @insert_after.setter
    def insert_after(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "insert_after", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)


@pulumi.input_type
class _BusinessEventsCapturingVariantsState:
    def __init__(__self__, *,
                 content_type_matcher: Optional[pulumi.Input[str]] = None,
                 content_type_value: Optional[pulumi.Input[str]] = None,
                 insert_after: Optional[pulumi.Input[str]] = None,
                 parser: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering BusinessEventsCapturingVariants resources.
        :param pulumi.Input[str] content_type_matcher: Possible Values: `CONTAINS`, `ENDS_WITH`, `EQUALS`, `STARTS_WITH`
        :param pulumi.Input[str] content_type_value: Content-type match value
        :param pulumi.Input[str] insert_after: Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        :param pulumi.Input[str] parser: Possible Values: `JSON`, `Raw`, `Text`, `URLencoded`, `XML`
        :param pulumi.Input[str] scope: The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
        """
        if content_type_matcher is not None:
            pulumi.set(__self__, "content_type_matcher", content_type_matcher)
        if content_type_value is not None:
            pulumi.set(__self__, "content_type_value", content_type_value)
        if insert_after is not None:
            pulumi.set(__self__, "insert_after", insert_after)
        if parser is not None:
            pulumi.set(__self__, "parser", parser)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter(name="contentTypeMatcher")
    def content_type_matcher(self) -> Optional[pulumi.Input[str]]:
        """
        Possible Values: `CONTAINS`, `ENDS_WITH`, `EQUALS`, `STARTS_WITH`
        """
        return pulumi.get(self, "content_type_matcher")

    @content_type_matcher.setter
    def content_type_matcher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_type_matcher", value)

    @property
    @pulumi.getter(name="contentTypeValue")
    def content_type_value(self) -> Optional[pulumi.Input[str]]:
        """
        Content-type match value
        """
        return pulumi.get(self, "content_type_value")

    @content_type_value.setter
    def content_type_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_type_value", value)

    @property
    @pulumi.getter(name="insertAfter")
    def insert_after(self) -> Optional[pulumi.Input[str]]:
        """
        Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        """
        return pulumi.get(self, "insert_after")

    @insert_after.setter
    def insert_after(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "insert_after", value)

    @property
    @pulumi.getter
    def parser(self) -> Optional[pulumi.Input[str]]:
        """
        Possible Values: `JSON`, `Raw`, `Text`, `URLencoded`, `XML`
        """
        return pulumi.get(self, "parser")

    @parser.setter
    def parser(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parser", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)


class BusinessEventsCapturingVariants(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content_type_matcher: Optional[pulumi.Input[str]] = None,
                 content_type_value: Optional[pulumi.Input[str]] = None,
                 insert_after: Optional[pulumi.Input[str]] = None,
                 parser: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a BusinessEventsCapturingVariants resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] content_type_matcher: Possible Values: `CONTAINS`, `ENDS_WITH`, `EQUALS`, `STARTS_WITH`
        :param pulumi.Input[str] content_type_value: Content-type match value
        :param pulumi.Input[str] insert_after: Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        :param pulumi.Input[str] parser: Possible Values: `JSON`, `Raw`, `Text`, `URLencoded`, `XML`
        :param pulumi.Input[str] scope: The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BusinessEventsCapturingVariantsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a BusinessEventsCapturingVariants resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param BusinessEventsCapturingVariantsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BusinessEventsCapturingVariantsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content_type_matcher: Optional[pulumi.Input[str]] = None,
                 content_type_value: Optional[pulumi.Input[str]] = None,
                 insert_after: Optional[pulumi.Input[str]] = None,
                 parser: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BusinessEventsCapturingVariantsArgs.__new__(BusinessEventsCapturingVariantsArgs)

            if content_type_matcher is None and not opts.urn:
                raise TypeError("Missing required property 'content_type_matcher'")
            __props__.__dict__["content_type_matcher"] = content_type_matcher
            if content_type_value is None and not opts.urn:
                raise TypeError("Missing required property 'content_type_value'")
            __props__.__dict__["content_type_value"] = content_type_value
            __props__.__dict__["insert_after"] = insert_after
            if parser is None and not opts.urn:
                raise TypeError("Missing required property 'parser'")
            __props__.__dict__["parser"] = parser
            __props__.__dict__["scope"] = scope
        super(BusinessEventsCapturingVariants, __self__).__init__(
            'dynatrace:index/businessEventsCapturingVariants:BusinessEventsCapturingVariants',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            content_type_matcher: Optional[pulumi.Input[str]] = None,
            content_type_value: Optional[pulumi.Input[str]] = None,
            insert_after: Optional[pulumi.Input[str]] = None,
            parser: Optional[pulumi.Input[str]] = None,
            scope: Optional[pulumi.Input[str]] = None) -> 'BusinessEventsCapturingVariants':
        """
        Get an existing BusinessEventsCapturingVariants resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] content_type_matcher: Possible Values: `CONTAINS`, `ENDS_WITH`, `EQUALS`, `STARTS_WITH`
        :param pulumi.Input[str] content_type_value: Content-type match value
        :param pulumi.Input[str] insert_after: Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        :param pulumi.Input[str] parser: Possible Values: `JSON`, `Raw`, `Text`, `URLencoded`, `XML`
        :param pulumi.Input[str] scope: The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BusinessEventsCapturingVariantsState.__new__(_BusinessEventsCapturingVariantsState)

        __props__.__dict__["content_type_matcher"] = content_type_matcher
        __props__.__dict__["content_type_value"] = content_type_value
        __props__.__dict__["insert_after"] = insert_after
        __props__.__dict__["parser"] = parser
        __props__.__dict__["scope"] = scope
        return BusinessEventsCapturingVariants(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="contentTypeMatcher")
    def content_type_matcher(self) -> pulumi.Output[str]:
        """
        Possible Values: `CONTAINS`, `ENDS_WITH`, `EQUALS`, `STARTS_WITH`
        """
        return pulumi.get(self, "content_type_matcher")

    @property
    @pulumi.getter(name="contentTypeValue")
    def content_type_value(self) -> pulumi.Output[str]:
        """
        Content-type match value
        """
        return pulumi.get(self, "content_type_value")

    @property
    @pulumi.getter(name="insertAfter")
    def insert_after(self) -> pulumi.Output[str]:
        """
        Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
        """
        return pulumi.get(self, "insert_after")

    @property
    @pulumi.getter
    def parser(self) -> pulumi.Output[str]:
        """
        Possible Values: `JSON`, `Raw`, `Text`, `URLencoded`, `XML`
        """
        return pulumi.get(self, "parser")

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Output[Optional[str]]:
        """
        The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
        """
        return pulumi.get(self, "scope")

