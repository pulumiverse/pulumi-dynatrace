# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['K8sPvcAnomaliesArgs', 'K8sPvcAnomalies']

@pulumi.input_type
class K8sPvcAnomaliesArgs:
    def __init__(__self__, *,
                 low_disk_space_critical: pulumi.Input['K8sPvcAnomaliesLowDiskSpaceCriticalArgs'],
                 low_disk_space_critical_percentage: pulumi.Input['K8sPvcAnomaliesLowDiskSpaceCriticalPercentageArgs'],
                 scope: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a K8sPvcAnomalies resource.
        :param pulumi.Input['K8sPvcAnomaliesLowDiskSpaceCriticalArgs'] low_disk_space_critical: Alerts on low disk space in megabytes for a persistent volume claim.
        :param pulumi.Input['K8sPvcAnomaliesLowDiskSpaceCriticalPercentageArgs'] low_disk_space_critical_percentage: Alerts on low disk space in % for a persistent volume claim.
        :param pulumi.Input[str] scope: The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
        """
        pulumi.set(__self__, "low_disk_space_critical", low_disk_space_critical)
        pulumi.set(__self__, "low_disk_space_critical_percentage", low_disk_space_critical_percentage)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter(name="lowDiskSpaceCritical")
    def low_disk_space_critical(self) -> pulumi.Input['K8sPvcAnomaliesLowDiskSpaceCriticalArgs']:
        """
        Alerts on low disk space in megabytes for a persistent volume claim.
        """
        return pulumi.get(self, "low_disk_space_critical")

    @low_disk_space_critical.setter
    def low_disk_space_critical(self, value: pulumi.Input['K8sPvcAnomaliesLowDiskSpaceCriticalArgs']):
        pulumi.set(self, "low_disk_space_critical", value)

    @property
    @pulumi.getter(name="lowDiskSpaceCriticalPercentage")
    def low_disk_space_critical_percentage(self) -> pulumi.Input['K8sPvcAnomaliesLowDiskSpaceCriticalPercentageArgs']:
        """
        Alerts on low disk space in % for a persistent volume claim.
        """
        return pulumi.get(self, "low_disk_space_critical_percentage")

    @low_disk_space_critical_percentage.setter
    def low_disk_space_critical_percentage(self, value: pulumi.Input['K8sPvcAnomaliesLowDiskSpaceCriticalPercentageArgs']):
        pulumi.set(self, "low_disk_space_critical_percentage", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)


@pulumi.input_type
class _K8sPvcAnomaliesState:
    def __init__(__self__, *,
                 low_disk_space_critical: Optional[pulumi.Input['K8sPvcAnomaliesLowDiskSpaceCriticalArgs']] = None,
                 low_disk_space_critical_percentage: Optional[pulumi.Input['K8sPvcAnomaliesLowDiskSpaceCriticalPercentageArgs']] = None,
                 scope: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering K8sPvcAnomalies resources.
        :param pulumi.Input['K8sPvcAnomaliesLowDiskSpaceCriticalArgs'] low_disk_space_critical: Alerts on low disk space in megabytes for a persistent volume claim.
        :param pulumi.Input['K8sPvcAnomaliesLowDiskSpaceCriticalPercentageArgs'] low_disk_space_critical_percentage: Alerts on low disk space in % for a persistent volume claim.
        :param pulumi.Input[str] scope: The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
        """
        if low_disk_space_critical is not None:
            pulumi.set(__self__, "low_disk_space_critical", low_disk_space_critical)
        if low_disk_space_critical_percentage is not None:
            pulumi.set(__self__, "low_disk_space_critical_percentage", low_disk_space_critical_percentage)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter(name="lowDiskSpaceCritical")
    def low_disk_space_critical(self) -> Optional[pulumi.Input['K8sPvcAnomaliesLowDiskSpaceCriticalArgs']]:
        """
        Alerts on low disk space in megabytes for a persistent volume claim.
        """
        return pulumi.get(self, "low_disk_space_critical")

    @low_disk_space_critical.setter
    def low_disk_space_critical(self, value: Optional[pulumi.Input['K8sPvcAnomaliesLowDiskSpaceCriticalArgs']]):
        pulumi.set(self, "low_disk_space_critical", value)

    @property
    @pulumi.getter(name="lowDiskSpaceCriticalPercentage")
    def low_disk_space_critical_percentage(self) -> Optional[pulumi.Input['K8sPvcAnomaliesLowDiskSpaceCriticalPercentageArgs']]:
        """
        Alerts on low disk space in % for a persistent volume claim.
        """
        return pulumi.get(self, "low_disk_space_critical_percentage")

    @low_disk_space_critical_percentage.setter
    def low_disk_space_critical_percentage(self, value: Optional[pulumi.Input['K8sPvcAnomaliesLowDiskSpaceCriticalPercentageArgs']]):
        pulumi.set(self, "low_disk_space_critical_percentage", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)


class K8sPvcAnomalies(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 low_disk_space_critical: Optional[pulumi.Input[Union['K8sPvcAnomaliesLowDiskSpaceCriticalArgs', 'K8sPvcAnomaliesLowDiskSpaceCriticalArgsDict']]] = None,
                 low_disk_space_critical_percentage: Optional[pulumi.Input[Union['K8sPvcAnomaliesLowDiskSpaceCriticalPercentageArgs', 'K8sPvcAnomaliesLowDiskSpaceCriticalPercentageArgsDict']]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a K8sPvcAnomalies resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['K8sPvcAnomaliesLowDiskSpaceCriticalArgs', 'K8sPvcAnomaliesLowDiskSpaceCriticalArgsDict']] low_disk_space_critical: Alerts on low disk space in megabytes for a persistent volume claim.
        :param pulumi.Input[Union['K8sPvcAnomaliesLowDiskSpaceCriticalPercentageArgs', 'K8sPvcAnomaliesLowDiskSpaceCriticalPercentageArgsDict']] low_disk_space_critical_percentage: Alerts on low disk space in % for a persistent volume claim.
        :param pulumi.Input[str] scope: The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: K8sPvcAnomaliesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a K8sPvcAnomalies resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param K8sPvcAnomaliesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(K8sPvcAnomaliesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 low_disk_space_critical: Optional[pulumi.Input[Union['K8sPvcAnomaliesLowDiskSpaceCriticalArgs', 'K8sPvcAnomaliesLowDiskSpaceCriticalArgsDict']]] = None,
                 low_disk_space_critical_percentage: Optional[pulumi.Input[Union['K8sPvcAnomaliesLowDiskSpaceCriticalPercentageArgs', 'K8sPvcAnomaliesLowDiskSpaceCriticalPercentageArgsDict']]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = K8sPvcAnomaliesArgs.__new__(K8sPvcAnomaliesArgs)

            if low_disk_space_critical is None and not opts.urn:
                raise TypeError("Missing required property 'low_disk_space_critical'")
            __props__.__dict__["low_disk_space_critical"] = low_disk_space_critical
            if low_disk_space_critical_percentage is None and not opts.urn:
                raise TypeError("Missing required property 'low_disk_space_critical_percentage'")
            __props__.__dict__["low_disk_space_critical_percentage"] = low_disk_space_critical_percentage
            __props__.__dict__["scope"] = scope
        super(K8sPvcAnomalies, __self__).__init__(
            'dynatrace:index/k8sPvcAnomalies:K8sPvcAnomalies',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            low_disk_space_critical: Optional[pulumi.Input[Union['K8sPvcAnomaliesLowDiskSpaceCriticalArgs', 'K8sPvcAnomaliesLowDiskSpaceCriticalArgsDict']]] = None,
            low_disk_space_critical_percentage: Optional[pulumi.Input[Union['K8sPvcAnomaliesLowDiskSpaceCriticalPercentageArgs', 'K8sPvcAnomaliesLowDiskSpaceCriticalPercentageArgsDict']]] = None,
            scope: Optional[pulumi.Input[str]] = None) -> 'K8sPvcAnomalies':
        """
        Get an existing K8sPvcAnomalies resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['K8sPvcAnomaliesLowDiskSpaceCriticalArgs', 'K8sPvcAnomaliesLowDiskSpaceCriticalArgsDict']] low_disk_space_critical: Alerts on low disk space in megabytes for a persistent volume claim.
        :param pulumi.Input[Union['K8sPvcAnomaliesLowDiskSpaceCriticalPercentageArgs', 'K8sPvcAnomaliesLowDiskSpaceCriticalPercentageArgsDict']] low_disk_space_critical_percentage: Alerts on low disk space in % for a persistent volume claim.
        :param pulumi.Input[str] scope: The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _K8sPvcAnomaliesState.__new__(_K8sPvcAnomaliesState)

        __props__.__dict__["low_disk_space_critical"] = low_disk_space_critical
        __props__.__dict__["low_disk_space_critical_percentage"] = low_disk_space_critical_percentage
        __props__.__dict__["scope"] = scope
        return K8sPvcAnomalies(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="lowDiskSpaceCritical")
    def low_disk_space_critical(self) -> pulumi.Output['outputs.K8sPvcAnomaliesLowDiskSpaceCritical']:
        """
        Alerts on low disk space in megabytes for a persistent volume claim.
        """
        return pulumi.get(self, "low_disk_space_critical")

    @property
    @pulumi.getter(name="lowDiskSpaceCriticalPercentage")
    def low_disk_space_critical_percentage(self) -> pulumi.Output['outputs.K8sPvcAnomaliesLowDiskSpaceCriticalPercentage']:
        """
        Alerts on low disk space in % for a persistent volume claim.
        """
        return pulumi.get(self, "low_disk_space_critical_percentage")

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Output[Optional[str]]:
        """
        The scope of this setting (CLOUD*APPLICATION*NAMESPACE, KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.
        """
        return pulumi.get(self, "scope")

