# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetIamGroupsResult',
    'AwaitableGetIamGroupsResult',
    'get_iam_groups',
    'get_iam_groups_output',
]

@pulumi.output_type
class GetIamGroupsResult:
    """
    A collection of values returned by getIamGroups.
    """
    def __init__(__self__, groups=None, id=None):
        if groups and not isinstance(groups, dict):
            raise TypeError("Expected argument 'groups' to be a dict")
        pulumi.set(__self__, "groups", groups)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def groups(self) -> Mapping[str, str]:
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetIamGroupsResult(GetIamGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIamGroupsResult(
            groups=self.groups,
            id=self.id)


def get_iam_groups(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIamGroupsResult:
    """
    > **Dynatrace SaaS only**

    > To utilize this resource, please define the environment variables `DT_CLIENT_ID`, `DT_CLIENT_SECRET`, `DT_ACCOUNT_ID` with an OAuth client including the following permission: **Allow read access for identity resources (users and groups)** (`account-idm-read`).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_dynatrace as dynatrace

    all_groups = dynatrace.get_iam_groups()
    pulumi.export("groups", all_groups)
    ```

    ### Example output
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('dynatrace:index/getIamGroups:getIamGroups', __args__, opts=opts, typ=GetIamGroupsResult).value

    return AwaitableGetIamGroupsResult(
        groups=pulumi.get(__ret__, 'groups'),
        id=pulumi.get(__ret__, 'id'))
def get_iam_groups_output(opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetIamGroupsResult]:
    """
    > **Dynatrace SaaS only**

    > To utilize this resource, please define the environment variables `DT_CLIENT_ID`, `DT_CLIENT_SECRET`, `DT_ACCOUNT_ID` with an OAuth client including the following permission: **Allow read access for identity resources (users and groups)** (`account-idm-read`).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_dynatrace as dynatrace

    all_groups = dynatrace.get_iam_groups()
    pulumi.export("groups", all_groups)
    ```

    ### Example output
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('dynatrace:index/getIamGroups:getIamGroups', __args__, opts=opts, typ=GetIamGroupsResult)
    return __ret__.apply(lambda __response__: GetIamGroupsResult(
        groups=pulumi.get(__response__, 'groups'),
        id=pulumi.get(__response__, 'id')))
