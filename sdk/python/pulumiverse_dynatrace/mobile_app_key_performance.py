# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MobileAppKeyPerformanceArgs', 'MobileAppKeyPerformance']

@pulumi.input_type
class MobileAppKeyPerformanceArgs:
    def __init__(__self__, *,
                 frustrating_if_reported_or_web_request_error: pulumi.Input[bool],
                 scope: pulumi.Input[str],
                 thresholds: pulumi.Input['MobileAppKeyPerformanceThresholdsArgs']):
        """
        The set of arguments for constructing a MobileAppKeyPerformance resource.
        :param pulumi.Input[bool] frustrating_if_reported_or_web_request_error: Treat user actions with reported errors or web request errors as erroneous and rate their performance as Frustrating. Turn off this setting if errors should not affect the Apdex rate.
        :param pulumi.Input[str] scope: The scope of this setting (DEVICE*APPLICATION*METHOD, MOBILE*APPLICATION, CUSTOM*APPLICATION)
        :param pulumi.Input['MobileAppKeyPerformanceThresholdsArgs'] thresholds: no documentation available
        """
        pulumi.set(__self__, "frustrating_if_reported_or_web_request_error", frustrating_if_reported_or_web_request_error)
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "thresholds", thresholds)

    @property
    @pulumi.getter(name="frustratingIfReportedOrWebRequestError")
    def frustrating_if_reported_or_web_request_error(self) -> pulumi.Input[bool]:
        """
        Treat user actions with reported errors or web request errors as erroneous and rate their performance as Frustrating. Turn off this setting if errors should not affect the Apdex rate.
        """
        return pulumi.get(self, "frustrating_if_reported_or_web_request_error")

    @frustrating_if_reported_or_web_request_error.setter
    def frustrating_if_reported_or_web_request_error(self, value: pulumi.Input[bool]):
        pulumi.set(self, "frustrating_if_reported_or_web_request_error", value)

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Input[str]:
        """
        The scope of this setting (DEVICE*APPLICATION*METHOD, MOBILE*APPLICATION, CUSTOM*APPLICATION)
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: pulumi.Input[str]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter
    def thresholds(self) -> pulumi.Input['MobileAppKeyPerformanceThresholdsArgs']:
        """
        no documentation available
        """
        return pulumi.get(self, "thresholds")

    @thresholds.setter
    def thresholds(self, value: pulumi.Input['MobileAppKeyPerformanceThresholdsArgs']):
        pulumi.set(self, "thresholds", value)


@pulumi.input_type
class _MobileAppKeyPerformanceState:
    def __init__(__self__, *,
                 frustrating_if_reported_or_web_request_error: Optional[pulumi.Input[bool]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 thresholds: Optional[pulumi.Input['MobileAppKeyPerformanceThresholdsArgs']] = None):
        """
        Input properties used for looking up and filtering MobileAppKeyPerformance resources.
        :param pulumi.Input[bool] frustrating_if_reported_or_web_request_error: Treat user actions with reported errors or web request errors as erroneous and rate their performance as Frustrating. Turn off this setting if errors should not affect the Apdex rate.
        :param pulumi.Input[str] scope: The scope of this setting (DEVICE*APPLICATION*METHOD, MOBILE*APPLICATION, CUSTOM*APPLICATION)
        :param pulumi.Input['MobileAppKeyPerformanceThresholdsArgs'] thresholds: no documentation available
        """
        if frustrating_if_reported_or_web_request_error is not None:
            pulumi.set(__self__, "frustrating_if_reported_or_web_request_error", frustrating_if_reported_or_web_request_error)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if thresholds is not None:
            pulumi.set(__self__, "thresholds", thresholds)

    @property
    @pulumi.getter(name="frustratingIfReportedOrWebRequestError")
    def frustrating_if_reported_or_web_request_error(self) -> Optional[pulumi.Input[bool]]:
        """
        Treat user actions with reported errors or web request errors as erroneous and rate their performance as Frustrating. Turn off this setting if errors should not affect the Apdex rate.
        """
        return pulumi.get(self, "frustrating_if_reported_or_web_request_error")

    @frustrating_if_reported_or_web_request_error.setter
    def frustrating_if_reported_or_web_request_error(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "frustrating_if_reported_or_web_request_error", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        The scope of this setting (DEVICE*APPLICATION*METHOD, MOBILE*APPLICATION, CUSTOM*APPLICATION)
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter
    def thresholds(self) -> Optional[pulumi.Input['MobileAppKeyPerformanceThresholdsArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "thresholds")

    @thresholds.setter
    def thresholds(self, value: Optional[pulumi.Input['MobileAppKeyPerformanceThresholdsArgs']]):
        pulumi.set(self, "thresholds", value)


class MobileAppKeyPerformance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 frustrating_if_reported_or_web_request_error: Optional[pulumi.Input[bool]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 thresholds: Optional[pulumi.Input[Union['MobileAppKeyPerformanceThresholdsArgs', 'MobileAppKeyPerformanceThresholdsArgsDict']]] = None,
                 __props__=None):
        """
        Create a MobileAppKeyPerformance resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] frustrating_if_reported_or_web_request_error: Treat user actions with reported errors or web request errors as erroneous and rate their performance as Frustrating. Turn off this setting if errors should not affect the Apdex rate.
        :param pulumi.Input[str] scope: The scope of this setting (DEVICE*APPLICATION*METHOD, MOBILE*APPLICATION, CUSTOM*APPLICATION)
        :param pulumi.Input[Union['MobileAppKeyPerformanceThresholdsArgs', 'MobileAppKeyPerformanceThresholdsArgsDict']] thresholds: no documentation available
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MobileAppKeyPerformanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a MobileAppKeyPerformance resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param MobileAppKeyPerformanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MobileAppKeyPerformanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 frustrating_if_reported_or_web_request_error: Optional[pulumi.Input[bool]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 thresholds: Optional[pulumi.Input[Union['MobileAppKeyPerformanceThresholdsArgs', 'MobileAppKeyPerformanceThresholdsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MobileAppKeyPerformanceArgs.__new__(MobileAppKeyPerformanceArgs)

            if frustrating_if_reported_or_web_request_error is None and not opts.urn:
                raise TypeError("Missing required property 'frustrating_if_reported_or_web_request_error'")
            __props__.__dict__["frustrating_if_reported_or_web_request_error"] = frustrating_if_reported_or_web_request_error
            if scope is None and not opts.urn:
                raise TypeError("Missing required property 'scope'")
            __props__.__dict__["scope"] = scope
            if thresholds is None and not opts.urn:
                raise TypeError("Missing required property 'thresholds'")
            __props__.__dict__["thresholds"] = thresholds
        super(MobileAppKeyPerformance, __self__).__init__(
            'dynatrace:index/mobileAppKeyPerformance:MobileAppKeyPerformance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            frustrating_if_reported_or_web_request_error: Optional[pulumi.Input[bool]] = None,
            scope: Optional[pulumi.Input[str]] = None,
            thresholds: Optional[pulumi.Input[Union['MobileAppKeyPerformanceThresholdsArgs', 'MobileAppKeyPerformanceThresholdsArgsDict']]] = None) -> 'MobileAppKeyPerformance':
        """
        Get an existing MobileAppKeyPerformance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] frustrating_if_reported_or_web_request_error: Treat user actions with reported errors or web request errors as erroneous and rate their performance as Frustrating. Turn off this setting if errors should not affect the Apdex rate.
        :param pulumi.Input[str] scope: The scope of this setting (DEVICE*APPLICATION*METHOD, MOBILE*APPLICATION, CUSTOM*APPLICATION)
        :param pulumi.Input[Union['MobileAppKeyPerformanceThresholdsArgs', 'MobileAppKeyPerformanceThresholdsArgsDict']] thresholds: no documentation available
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MobileAppKeyPerformanceState.__new__(_MobileAppKeyPerformanceState)

        __props__.__dict__["frustrating_if_reported_or_web_request_error"] = frustrating_if_reported_or_web_request_error
        __props__.__dict__["scope"] = scope
        __props__.__dict__["thresholds"] = thresholds
        return MobileAppKeyPerformance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="frustratingIfReportedOrWebRequestError")
    def frustrating_if_reported_or_web_request_error(self) -> pulumi.Output[bool]:
        """
        Treat user actions with reported errors or web request errors as erroneous and rate their performance as Frustrating. Turn off this setting if errors should not affect the Apdex rate.
        """
        return pulumi.get(self, "frustrating_if_reported_or_web_request_error")

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Output[str]:
        """
        The scope of this setting (DEVICE*APPLICATION*METHOD, MOBILE*APPLICATION, CUSTOM*APPLICATION)
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def thresholds(self) -> pulumi.Output['outputs.MobileAppKeyPerformanceThresholds']:
        """
        no documentation available
        """
        return pulumi.get(self, "thresholds")

