# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetSyntheticNodesResult',
    'AwaitableGetSyntheticNodesResult',
    'get_synthetic_nodes',
    'get_synthetic_nodes_output',
]

@pulumi.output_type
class GetSyntheticNodesResult:
    """
    A collection of values returned by getSyntheticNodes.
    """
    def __init__(__self__, id=None, nodes=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if nodes and not isinstance(nodes, list):
            raise TypeError("Expected argument 'nodes' to be a list")
        pulumi.set(__self__, "nodes", nodes)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetSyntheticNodesNodeResult']:
        return pulumi.get(self, "nodes")


class AwaitableGetSyntheticNodesResult(GetSyntheticNodesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSyntheticNodesResult(
            id=self.id,
            nodes=self.nodes)


def get_synthetic_nodes(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSyntheticNodesResult:
    """
    The synthetic locations data source queries for all available Synthetic Nodes. The data source doesn't need to get configured. It always provides the full list of synthetic nodes.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('dynatrace:index/getSyntheticNodes:getSyntheticNodes', __args__, opts=opts, typ=GetSyntheticNodesResult).value

    return AwaitableGetSyntheticNodesResult(
        id=pulumi.get(__ret__, 'id'),
        nodes=pulumi.get(__ret__, 'nodes'))
def get_synthetic_nodes_output(opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSyntheticNodesResult]:
    """
    The synthetic locations data source queries for all available Synthetic Nodes. The data source doesn't need to get configured. It always provides the full list of synthetic nodes.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('dynatrace:index/getSyntheticNodes:getSyntheticNodes', __args__, opts=opts, typ=GetSyntheticNodesResult)
    return __ret__.apply(lambda __response__: GetSyntheticNodesResult(
        id=pulumi.get(__response__, 'id'),
        nodes=pulumi.get(__response__, 'nodes')))
