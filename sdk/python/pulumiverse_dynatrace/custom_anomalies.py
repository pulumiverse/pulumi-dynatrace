# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CustomAnomaliesArgs', 'CustomAnomalies']

@pulumi.input_type
class CustomAnomaliesArgs:
    def __init__(__self__, *,
                 description: pulumi.Input[str],
                 enabled: pulumi.Input[bool],
                 strategy: pulumi.Input['CustomAnomaliesStrategyArgs'],
                 aggregation_type: Optional[pulumi.Input[str]] = None,
                 dimensions: Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesDimensionArgs']]]] = None,
                 disabled_reason: Optional[pulumi.Input[str]] = None,
                 metric_id: Optional[pulumi.Input[str]] = None,
                 metric_selector: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 primary_dimension_key: Optional[pulumi.Input[str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeArgs']]]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 warning_reason: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a CustomAnomalies resource.
        :param pulumi.Input[str] description: The description of the metric event
        :param pulumi.Input[bool] enabled: The metric event is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['CustomAnomaliesStrategyArgs'] strategy: A monitoring strategy for a metric event config. This is the base version of the monitoring strategy, depending on the type,  the actual JSON may contain additional fields
        :param pulumi.Input[str] aggregation_type: How the metric data points are aggregated for the evaluation. The timeseries must support this aggregation
        :param pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesDimensionArgs']]] dimensions: Defines the dimensions of the metric to alert on. The filters are combined by conjunction
        :param pulumi.Input[str] disabled_reason: The reason of automatic disabling.  The `NONE` means config was not disabled automatically. Possible values are `METRIC_DEFINITION_INCONSISTENCY`, `NONE`, `TOO_MANY_DIMS` and `TOPX_FORCIBLY_DEACTIVATED`
        :param pulumi.Input[str] metric_id: The ID of the metric evaluated by the metric event
        :param pulumi.Input[str] metric_selector: The metric selector that should be executed
        :param pulumi.Input[str] name: The name of the metric event displayed in the UI
        :param pulumi.Input[str] primary_dimension_key: Defines which dimension key should be used for the **alertingScope**
        :param pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeArgs']]] scopes: Defines the scope of the metric event. Only one filter is allowed per filter type, except for tags, where up to 3 are allowed. The filters are combined by conjunction
        :param pulumi.Input[str] severity: The type of the event to trigger on the threshold violation.  The `CUSTOM_ALERT` type is not correlated with other alerts. The `INFO` type does not open a problem
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        :param pulumi.Input[str] warning_reason: The reason of a warning set on the config. The `NONE` means config has no warnings. The other supported value is `TOO_MANY_DIMS`
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "strategy", strategy)
        if aggregation_type is not None:
            pulumi.set(__self__, "aggregation_type", aggregation_type)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if disabled_reason is not None:
            warnings.warn("""This property is not meant to be configured from the outside. It will get removed completely in future versions""", DeprecationWarning)
            pulumi.log.warn("""disabled_reason is deprecated: This property is not meant to be configured from the outside. It will get removed completely in future versions""")
        if disabled_reason is not None:
            pulumi.set(__self__, "disabled_reason", disabled_reason)
        if metric_id is not None:
            pulumi.set(__self__, "metric_id", metric_id)
        if metric_selector is not None:
            pulumi.set(__self__, "metric_selector", metric_selector)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if primary_dimension_key is not None:
            pulumi.set(__self__, "primary_dimension_key", primary_dimension_key)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if warning_reason is not None:
            warnings.warn("""This property is not meant to be configured from the outside. It will get removed completely in future versions""", DeprecationWarning)
            pulumi.log.warn("""warning_reason is deprecated: This property is not meant to be configured from the outside. It will get removed completely in future versions""")
        if warning_reason is not None:
            pulumi.set(__self__, "warning_reason", warning_reason)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        """
        The description of the metric event
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        The metric event is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def strategy(self) -> pulumi.Input['CustomAnomaliesStrategyArgs']:
        """
        A monitoring strategy for a metric event config. This is the base version of the monitoring strategy, depending on the type,  the actual JSON may contain additional fields
        """
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: pulumi.Input['CustomAnomaliesStrategyArgs']):
        pulumi.set(self, "strategy", value)

    @property
    @pulumi.getter(name="aggregationType")
    def aggregation_type(self) -> Optional[pulumi.Input[str]]:
        """
        How the metric data points are aggregated for the evaluation. The timeseries must support this aggregation
        """
        return pulumi.get(self, "aggregation_type")

    @aggregation_type.setter
    def aggregation_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregation_type", value)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesDimensionArgs']]]]:
        """
        Defines the dimensions of the metric to alert on. The filters are combined by conjunction
        """
        return pulumi.get(self, "dimensions")

    @dimensions.setter
    def dimensions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesDimensionArgs']]]]):
        pulumi.set(self, "dimensions", value)

    @property
    @pulumi.getter(name="disabledReason")
    @_utilities.deprecated("""This property is not meant to be configured from the outside. It will get removed completely in future versions""")
    def disabled_reason(self) -> Optional[pulumi.Input[str]]:
        """
        The reason of automatic disabling.  The `NONE` means config was not disabled automatically. Possible values are `METRIC_DEFINITION_INCONSISTENCY`, `NONE`, `TOO_MANY_DIMS` and `TOPX_FORCIBLY_DEACTIVATED`
        """
        return pulumi.get(self, "disabled_reason")

    @disabled_reason.setter
    def disabled_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disabled_reason", value)

    @property
    @pulumi.getter(name="metricId")
    def metric_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the metric evaluated by the metric event
        """
        return pulumi.get(self, "metric_id")

    @metric_id.setter
    def metric_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_id", value)

    @property
    @pulumi.getter(name="metricSelector")
    def metric_selector(self) -> Optional[pulumi.Input[str]]:
        """
        The metric selector that should be executed
        """
        return pulumi.get(self, "metric_selector")

    @metric_selector.setter
    def metric_selector(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_selector", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the metric event displayed in the UI
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="primaryDimensionKey")
    def primary_dimension_key(self) -> Optional[pulumi.Input[str]]:
        """
        Defines which dimension key should be used for the **alertingScope**
        """
        return pulumi.get(self, "primary_dimension_key")

    @primary_dimension_key.setter
    def primary_dimension_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_dimension_key", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeArgs']]]]:
        """
        Defines the scope of the metric event. Only one filter is allowed per filter type, except for tags, where up to 3 are allowed. The filters are combined by conjunction
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeArgs']]]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the event to trigger on the threshold violation.  The `CUSTOM_ALERT` type is not correlated with other alerts. The `INFO` type does not open a problem
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter(name="warningReason")
    @_utilities.deprecated("""This property is not meant to be configured from the outside. It will get removed completely in future versions""")
    def warning_reason(self) -> Optional[pulumi.Input[str]]:
        """
        The reason of a warning set on the config. The `NONE` means config has no warnings. The other supported value is `TOO_MANY_DIMS`
        """
        return pulumi.get(self, "warning_reason")

    @warning_reason.setter
    def warning_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "warning_reason", value)


@pulumi.input_type
class _CustomAnomaliesState:
    def __init__(__self__, *,
                 aggregation_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dimensions: Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesDimensionArgs']]]] = None,
                 disabled_reason: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 metric_id: Optional[pulumi.Input[str]] = None,
                 metric_selector: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 primary_dimension_key: Optional[pulumi.Input[str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeArgs']]]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 strategy: Optional[pulumi.Input['CustomAnomaliesStrategyArgs']] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 warning_reason: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CustomAnomalies resources.
        :param pulumi.Input[str] aggregation_type: How the metric data points are aggregated for the evaluation. The timeseries must support this aggregation
        :param pulumi.Input[str] description: The description of the metric event
        :param pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesDimensionArgs']]] dimensions: Defines the dimensions of the metric to alert on. The filters are combined by conjunction
        :param pulumi.Input[str] disabled_reason: The reason of automatic disabling.  The `NONE` means config was not disabled automatically. Possible values are `METRIC_DEFINITION_INCONSISTENCY`, `NONE`, `TOO_MANY_DIMS` and `TOPX_FORCIBLY_DEACTIVATED`
        :param pulumi.Input[bool] enabled: The metric event is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[str] metric_id: The ID of the metric evaluated by the metric event
        :param pulumi.Input[str] metric_selector: The metric selector that should be executed
        :param pulumi.Input[str] name: The name of the metric event displayed in the UI
        :param pulumi.Input[str] primary_dimension_key: Defines which dimension key should be used for the **alertingScope**
        :param pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeArgs']]] scopes: Defines the scope of the metric event. Only one filter is allowed per filter type, except for tags, where up to 3 are allowed. The filters are combined by conjunction
        :param pulumi.Input[str] severity: The type of the event to trigger on the threshold violation.  The `CUSTOM_ALERT` type is not correlated with other alerts. The `INFO` type does not open a problem
        :param pulumi.Input['CustomAnomaliesStrategyArgs'] strategy: A monitoring strategy for a metric event config. This is the base version of the monitoring strategy, depending on the type,  the actual JSON may contain additional fields
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        :param pulumi.Input[str] warning_reason: The reason of a warning set on the config. The `NONE` means config has no warnings. The other supported value is `TOO_MANY_DIMS`
        """
        if aggregation_type is not None:
            pulumi.set(__self__, "aggregation_type", aggregation_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if disabled_reason is not None:
            warnings.warn("""This property is not meant to be configured from the outside. It will get removed completely in future versions""", DeprecationWarning)
            pulumi.log.warn("""disabled_reason is deprecated: This property is not meant to be configured from the outside. It will get removed completely in future versions""")
        if disabled_reason is not None:
            pulumi.set(__self__, "disabled_reason", disabled_reason)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if metric_id is not None:
            pulumi.set(__self__, "metric_id", metric_id)
        if metric_selector is not None:
            pulumi.set(__self__, "metric_selector", metric_selector)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if primary_dimension_key is not None:
            pulumi.set(__self__, "primary_dimension_key", primary_dimension_key)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if warning_reason is not None:
            warnings.warn("""This property is not meant to be configured from the outside. It will get removed completely in future versions""", DeprecationWarning)
            pulumi.log.warn("""warning_reason is deprecated: This property is not meant to be configured from the outside. It will get removed completely in future versions""")
        if warning_reason is not None:
            pulumi.set(__self__, "warning_reason", warning_reason)

    @property
    @pulumi.getter(name="aggregationType")
    def aggregation_type(self) -> Optional[pulumi.Input[str]]:
        """
        How the metric data points are aggregated for the evaluation. The timeseries must support this aggregation
        """
        return pulumi.get(self, "aggregation_type")

    @aggregation_type.setter
    def aggregation_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregation_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the metric event
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesDimensionArgs']]]]:
        """
        Defines the dimensions of the metric to alert on. The filters are combined by conjunction
        """
        return pulumi.get(self, "dimensions")

    @dimensions.setter
    def dimensions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesDimensionArgs']]]]):
        pulumi.set(self, "dimensions", value)

    @property
    @pulumi.getter(name="disabledReason")
    @_utilities.deprecated("""This property is not meant to be configured from the outside. It will get removed completely in future versions""")
    def disabled_reason(self) -> Optional[pulumi.Input[str]]:
        """
        The reason of automatic disabling.  The `NONE` means config was not disabled automatically. Possible values are `METRIC_DEFINITION_INCONSISTENCY`, `NONE`, `TOO_MANY_DIMS` and `TOPX_FORCIBLY_DEACTIVATED`
        """
        return pulumi.get(self, "disabled_reason")

    @disabled_reason.setter
    def disabled_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disabled_reason", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        The metric event is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="metricId")
    def metric_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the metric evaluated by the metric event
        """
        return pulumi.get(self, "metric_id")

    @metric_id.setter
    def metric_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_id", value)

    @property
    @pulumi.getter(name="metricSelector")
    def metric_selector(self) -> Optional[pulumi.Input[str]]:
        """
        The metric selector that should be executed
        """
        return pulumi.get(self, "metric_selector")

    @metric_selector.setter
    def metric_selector(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_selector", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the metric event displayed in the UI
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="primaryDimensionKey")
    def primary_dimension_key(self) -> Optional[pulumi.Input[str]]:
        """
        Defines which dimension key should be used for the **alertingScope**
        """
        return pulumi.get(self, "primary_dimension_key")

    @primary_dimension_key.setter
    def primary_dimension_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_dimension_key", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeArgs']]]]:
        """
        Defines the scope of the metric event. Only one filter is allowed per filter type, except for tags, where up to 3 are allowed. The filters are combined by conjunction
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeArgs']]]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the event to trigger on the threshold violation.  The `CUSTOM_ALERT` type is not correlated with other alerts. The `INFO` type does not open a problem
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input['CustomAnomaliesStrategyArgs']]:
        """
        A monitoring strategy for a metric event config. This is the base version of the monitoring strategy, depending on the type,  the actual JSON may contain additional fields
        """
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input['CustomAnomaliesStrategyArgs']]):
        pulumi.set(self, "strategy", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter(name="warningReason")
    @_utilities.deprecated("""This property is not meant to be configured from the outside. It will get removed completely in future versions""")
    def warning_reason(self) -> Optional[pulumi.Input[str]]:
        """
        The reason of a warning set on the config. The `NONE` means config has no warnings. The other supported value is `TOO_MANY_DIMS`
        """
        return pulumi.get(self, "warning_reason")

    @warning_reason.setter
    def warning_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "warning_reason", value)


class CustomAnomalies(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aggregation_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dimensions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CustomAnomaliesDimensionArgs', 'CustomAnomaliesDimensionArgsDict']]]]] = None,
                 disabled_reason: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 metric_id: Optional[pulumi.Input[str]] = None,
                 metric_selector: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 primary_dimension_key: Optional[pulumi.Input[str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CustomAnomaliesScopeArgs', 'CustomAnomaliesScopeArgsDict']]]]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 strategy: Optional[pulumi.Input[Union['CustomAnomaliesStrategyArgs', 'CustomAnomaliesStrategyArgsDict']]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 warning_reason: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a CustomAnomalies resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] aggregation_type: How the metric data points are aggregated for the evaluation. The timeseries must support this aggregation
        :param pulumi.Input[str] description: The description of the metric event
        :param pulumi.Input[Sequence[pulumi.Input[Union['CustomAnomaliesDimensionArgs', 'CustomAnomaliesDimensionArgsDict']]]] dimensions: Defines the dimensions of the metric to alert on. The filters are combined by conjunction
        :param pulumi.Input[str] disabled_reason: The reason of automatic disabling.  The `NONE` means config was not disabled automatically. Possible values are `METRIC_DEFINITION_INCONSISTENCY`, `NONE`, `TOO_MANY_DIMS` and `TOPX_FORCIBLY_DEACTIVATED`
        :param pulumi.Input[bool] enabled: The metric event is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[str] metric_id: The ID of the metric evaluated by the metric event
        :param pulumi.Input[str] metric_selector: The metric selector that should be executed
        :param pulumi.Input[str] name: The name of the metric event displayed in the UI
        :param pulumi.Input[str] primary_dimension_key: Defines which dimension key should be used for the **alertingScope**
        :param pulumi.Input[Sequence[pulumi.Input[Union['CustomAnomaliesScopeArgs', 'CustomAnomaliesScopeArgsDict']]]] scopes: Defines the scope of the metric event. Only one filter is allowed per filter type, except for tags, where up to 3 are allowed. The filters are combined by conjunction
        :param pulumi.Input[str] severity: The type of the event to trigger on the threshold violation.  The `CUSTOM_ALERT` type is not correlated with other alerts. The `INFO` type does not open a problem
        :param pulumi.Input[Union['CustomAnomaliesStrategyArgs', 'CustomAnomaliesStrategyArgsDict']] strategy: A monitoring strategy for a metric event config. This is the base version of the monitoring strategy, depending on the type,  the actual JSON may contain additional fields
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        :param pulumi.Input[str] warning_reason: The reason of a warning set on the config. The `NONE` means config has no warnings. The other supported value is `TOO_MANY_DIMS`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CustomAnomaliesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CustomAnomalies resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CustomAnomaliesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CustomAnomaliesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aggregation_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dimensions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CustomAnomaliesDimensionArgs', 'CustomAnomaliesDimensionArgsDict']]]]] = None,
                 disabled_reason: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 metric_id: Optional[pulumi.Input[str]] = None,
                 metric_selector: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 primary_dimension_key: Optional[pulumi.Input[str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CustomAnomaliesScopeArgs', 'CustomAnomaliesScopeArgsDict']]]]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 strategy: Optional[pulumi.Input[Union['CustomAnomaliesStrategyArgs', 'CustomAnomaliesStrategyArgsDict']]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 warning_reason: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CustomAnomaliesArgs.__new__(CustomAnomaliesArgs)

            __props__.__dict__["aggregation_type"] = aggregation_type
            if description is None and not opts.urn:
                raise TypeError("Missing required property 'description'")
            __props__.__dict__["description"] = description
            __props__.__dict__["dimensions"] = dimensions
            __props__.__dict__["disabled_reason"] = disabled_reason
            if enabled is None and not opts.urn:
                raise TypeError("Missing required property 'enabled'")
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["metric_id"] = metric_id
            __props__.__dict__["metric_selector"] = metric_selector
            __props__.__dict__["name"] = name
            __props__.__dict__["primary_dimension_key"] = primary_dimension_key
            __props__.__dict__["scopes"] = scopes
            __props__.__dict__["severity"] = severity
            if strategy is None and not opts.urn:
                raise TypeError("Missing required property 'strategy'")
            __props__.__dict__["strategy"] = strategy
            __props__.__dict__["unknowns"] = unknowns
            __props__.__dict__["warning_reason"] = warning_reason
        super(CustomAnomalies, __self__).__init__(
            'dynatrace:index/customAnomalies:CustomAnomalies',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            aggregation_type: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            dimensions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CustomAnomaliesDimensionArgs', 'CustomAnomaliesDimensionArgsDict']]]]] = None,
            disabled_reason: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            metric_id: Optional[pulumi.Input[str]] = None,
            metric_selector: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            primary_dimension_key: Optional[pulumi.Input[str]] = None,
            scopes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CustomAnomaliesScopeArgs', 'CustomAnomaliesScopeArgsDict']]]]] = None,
            severity: Optional[pulumi.Input[str]] = None,
            strategy: Optional[pulumi.Input[Union['CustomAnomaliesStrategyArgs', 'CustomAnomaliesStrategyArgsDict']]] = None,
            unknowns: Optional[pulumi.Input[str]] = None,
            warning_reason: Optional[pulumi.Input[str]] = None) -> 'CustomAnomalies':
        """
        Get an existing CustomAnomalies resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] aggregation_type: How the metric data points are aggregated for the evaluation. The timeseries must support this aggregation
        :param pulumi.Input[str] description: The description of the metric event
        :param pulumi.Input[Sequence[pulumi.Input[Union['CustomAnomaliesDimensionArgs', 'CustomAnomaliesDimensionArgsDict']]]] dimensions: Defines the dimensions of the metric to alert on. The filters are combined by conjunction
        :param pulumi.Input[str] disabled_reason: The reason of automatic disabling.  The `NONE` means config was not disabled automatically. Possible values are `METRIC_DEFINITION_INCONSISTENCY`, `NONE`, `TOO_MANY_DIMS` and `TOPX_FORCIBLY_DEACTIVATED`
        :param pulumi.Input[bool] enabled: The metric event is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[str] metric_id: The ID of the metric evaluated by the metric event
        :param pulumi.Input[str] metric_selector: The metric selector that should be executed
        :param pulumi.Input[str] name: The name of the metric event displayed in the UI
        :param pulumi.Input[str] primary_dimension_key: Defines which dimension key should be used for the **alertingScope**
        :param pulumi.Input[Sequence[pulumi.Input[Union['CustomAnomaliesScopeArgs', 'CustomAnomaliesScopeArgsDict']]]] scopes: Defines the scope of the metric event. Only one filter is allowed per filter type, except for tags, where up to 3 are allowed. The filters are combined by conjunction
        :param pulumi.Input[str] severity: The type of the event to trigger on the threshold violation.  The `CUSTOM_ALERT` type is not correlated with other alerts. The `INFO` type does not open a problem
        :param pulumi.Input[Union['CustomAnomaliesStrategyArgs', 'CustomAnomaliesStrategyArgsDict']] strategy: A monitoring strategy for a metric event config. This is the base version of the monitoring strategy, depending on the type,  the actual JSON may contain additional fields
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        :param pulumi.Input[str] warning_reason: The reason of a warning set on the config. The `NONE` means config has no warnings. The other supported value is `TOO_MANY_DIMS`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CustomAnomaliesState.__new__(_CustomAnomaliesState)

        __props__.__dict__["aggregation_type"] = aggregation_type
        __props__.__dict__["description"] = description
        __props__.__dict__["dimensions"] = dimensions
        __props__.__dict__["disabled_reason"] = disabled_reason
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["metric_id"] = metric_id
        __props__.__dict__["metric_selector"] = metric_selector
        __props__.__dict__["name"] = name
        __props__.__dict__["primary_dimension_key"] = primary_dimension_key
        __props__.__dict__["scopes"] = scopes
        __props__.__dict__["severity"] = severity
        __props__.__dict__["strategy"] = strategy
        __props__.__dict__["unknowns"] = unknowns
        __props__.__dict__["warning_reason"] = warning_reason
        return CustomAnomalies(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="aggregationType")
    def aggregation_type(self) -> pulumi.Output[Optional[str]]:
        """
        How the metric data points are aggregated for the evaluation. The timeseries must support this aggregation
        """
        return pulumi.get(self, "aggregation_type")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The description of the metric event
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def dimensions(self) -> pulumi.Output[Optional[Sequence['outputs.CustomAnomaliesDimension']]]:
        """
        Defines the dimensions of the metric to alert on. The filters are combined by conjunction
        """
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="disabledReason")
    @_utilities.deprecated("""This property is not meant to be configured from the outside. It will get removed completely in future versions""")
    def disabled_reason(self) -> pulumi.Output[Optional[str]]:
        """
        The reason of automatic disabling.  The `NONE` means config was not disabled automatically. Possible values are `METRIC_DEFINITION_INCONSISTENCY`, `NONE`, `TOO_MANY_DIMS` and `TOPX_FORCIBLY_DEACTIVATED`
        """
        return pulumi.get(self, "disabled_reason")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        """
        The metric event is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="metricId")
    def metric_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the metric evaluated by the metric event
        """
        return pulumi.get(self, "metric_id")

    @property
    @pulumi.getter(name="metricSelector")
    def metric_selector(self) -> pulumi.Output[Optional[str]]:
        """
        The metric selector that should be executed
        """
        return pulumi.get(self, "metric_selector")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the metric event displayed in the UI
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="primaryDimensionKey")
    def primary_dimension_key(self) -> pulumi.Output[Optional[str]]:
        """
        Defines which dimension key should be used for the **alertingScope**
        """
        return pulumi.get(self, "primary_dimension_key")

    @property
    @pulumi.getter
    def scopes(self) -> pulumi.Output[Optional[Sequence['outputs.CustomAnomaliesScope']]]:
        """
        Defines the scope of the metric event. Only one filter is allowed per filter type, except for tags, where up to 3 are allowed. The filters are combined by conjunction
        """
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter
    def severity(self) -> pulumi.Output[Optional[str]]:
        """
        The type of the event to trigger on the threshold violation.  The `CUSTOM_ALERT` type is not correlated with other alerts. The `INFO` type does not open a problem
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def strategy(self) -> pulumi.Output['outputs.CustomAnomaliesStrategy']:
        """
        A monitoring strategy for a metric event config. This is the base version of the monitoring strategy, depending on the type,  the actual JSON may contain additional fields
        """
        return pulumi.get(self, "strategy")

    @property
    @pulumi.getter
    def unknowns(self) -> pulumi.Output[Optional[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @property
    @pulumi.getter(name="warningReason")
    @_utilities.deprecated("""This property is not meant to be configured from the outside. It will get removed completely in future versions""")
    def warning_reason(self) -> pulumi.Output[Optional[str]]:
        """
        The reason of a warning set on the config. The `NONE` means config has no warnings. The other supported value is `TOO_MANY_DIMS`
        """
        return pulumi.get(self, "warning_reason")

