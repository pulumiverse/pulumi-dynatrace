# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DashboardsPresetsArgs', 'DashboardsPresets']

@pulumi.input_type
class DashboardsPresetsArgs:
    def __init__(__self__, *,
                 enable_dashboard_presets: pulumi.Input[bool],
                 dashboard_presets_list: Optional[pulumi.Input['DashboardsPresetsDashboardPresetsListArgs']] = None):
        """
        The set of arguments for constructing a DashboardsPresets resource.
        :param pulumi.Input[bool] enable_dashboard_presets: Dashboard presets are visible to all users by default. For a pristine environment you may disable them entirely or opt to manually limit visibility to selected user groups.
        :param pulumi.Input['DashboardsPresetsDashboardPresetsListArgs'] dashboard_presets_list: Show selected preset to respective user group only.
        """
        pulumi.set(__self__, "enable_dashboard_presets", enable_dashboard_presets)
        if dashboard_presets_list is not None:
            pulumi.set(__self__, "dashboard_presets_list", dashboard_presets_list)

    @property
    @pulumi.getter(name="enableDashboardPresets")
    def enable_dashboard_presets(self) -> pulumi.Input[bool]:
        """
        Dashboard presets are visible to all users by default. For a pristine environment you may disable them entirely or opt to manually limit visibility to selected user groups.
        """
        return pulumi.get(self, "enable_dashboard_presets")

    @enable_dashboard_presets.setter
    def enable_dashboard_presets(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_dashboard_presets", value)

    @property
    @pulumi.getter(name="dashboardPresetsList")
    def dashboard_presets_list(self) -> Optional[pulumi.Input['DashboardsPresetsDashboardPresetsListArgs']]:
        """
        Show selected preset to respective user group only.
        """
        return pulumi.get(self, "dashboard_presets_list")

    @dashboard_presets_list.setter
    def dashboard_presets_list(self, value: Optional[pulumi.Input['DashboardsPresetsDashboardPresetsListArgs']]):
        pulumi.set(self, "dashboard_presets_list", value)


@pulumi.input_type
class _DashboardsPresetsState:
    def __init__(__self__, *,
                 dashboard_presets_list: Optional[pulumi.Input['DashboardsPresetsDashboardPresetsListArgs']] = None,
                 enable_dashboard_presets: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering DashboardsPresets resources.
        :param pulumi.Input['DashboardsPresetsDashboardPresetsListArgs'] dashboard_presets_list: Show selected preset to respective user group only.
        :param pulumi.Input[bool] enable_dashboard_presets: Dashboard presets are visible to all users by default. For a pristine environment you may disable them entirely or opt to manually limit visibility to selected user groups.
        """
        if dashboard_presets_list is not None:
            pulumi.set(__self__, "dashboard_presets_list", dashboard_presets_list)
        if enable_dashboard_presets is not None:
            pulumi.set(__self__, "enable_dashboard_presets", enable_dashboard_presets)

    @property
    @pulumi.getter(name="dashboardPresetsList")
    def dashboard_presets_list(self) -> Optional[pulumi.Input['DashboardsPresetsDashboardPresetsListArgs']]:
        """
        Show selected preset to respective user group only.
        """
        return pulumi.get(self, "dashboard_presets_list")

    @dashboard_presets_list.setter
    def dashboard_presets_list(self, value: Optional[pulumi.Input['DashboardsPresetsDashboardPresetsListArgs']]):
        pulumi.set(self, "dashboard_presets_list", value)

    @property
    @pulumi.getter(name="enableDashboardPresets")
    def enable_dashboard_presets(self) -> Optional[pulumi.Input[bool]]:
        """
        Dashboard presets are visible to all users by default. For a pristine environment you may disable them entirely or opt to manually limit visibility to selected user groups.
        """
        return pulumi.get(self, "enable_dashboard_presets")

    @enable_dashboard_presets.setter
    def enable_dashboard_presets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_dashboard_presets", value)


class DashboardsPresets(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dashboard_presets_list: Optional[pulumi.Input[Union['DashboardsPresetsDashboardPresetsListArgs', 'DashboardsPresetsDashboardPresetsListArgsDict']]] = None,
                 enable_dashboard_presets: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Create a DashboardsPresets resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['DashboardsPresetsDashboardPresetsListArgs', 'DashboardsPresetsDashboardPresetsListArgsDict']] dashboard_presets_list: Show selected preset to respective user group only.
        :param pulumi.Input[bool] enable_dashboard_presets: Dashboard presets are visible to all users by default. For a pristine environment you may disable them entirely or opt to manually limit visibility to selected user groups.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DashboardsPresetsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DashboardsPresets resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DashboardsPresetsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DashboardsPresetsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dashboard_presets_list: Optional[pulumi.Input[Union['DashboardsPresetsDashboardPresetsListArgs', 'DashboardsPresetsDashboardPresetsListArgsDict']]] = None,
                 enable_dashboard_presets: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DashboardsPresetsArgs.__new__(DashboardsPresetsArgs)

            __props__.__dict__["dashboard_presets_list"] = dashboard_presets_list
            if enable_dashboard_presets is None and not opts.urn:
                raise TypeError("Missing required property 'enable_dashboard_presets'")
            __props__.__dict__["enable_dashboard_presets"] = enable_dashboard_presets
        super(DashboardsPresets, __self__).__init__(
            'dynatrace:index/dashboardsPresets:DashboardsPresets',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dashboard_presets_list: Optional[pulumi.Input[Union['DashboardsPresetsDashboardPresetsListArgs', 'DashboardsPresetsDashboardPresetsListArgsDict']]] = None,
            enable_dashboard_presets: Optional[pulumi.Input[bool]] = None) -> 'DashboardsPresets':
        """
        Get an existing DashboardsPresets resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['DashboardsPresetsDashboardPresetsListArgs', 'DashboardsPresetsDashboardPresetsListArgsDict']] dashboard_presets_list: Show selected preset to respective user group only.
        :param pulumi.Input[bool] enable_dashboard_presets: Dashboard presets are visible to all users by default. For a pristine environment you may disable them entirely or opt to manually limit visibility to selected user groups.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DashboardsPresetsState.__new__(_DashboardsPresetsState)

        __props__.__dict__["dashboard_presets_list"] = dashboard_presets_list
        __props__.__dict__["enable_dashboard_presets"] = enable_dashboard_presets
        return DashboardsPresets(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dashboardPresetsList")
    def dashboard_presets_list(self) -> pulumi.Output[Optional['outputs.DashboardsPresetsDashboardPresetsList']]:
        """
        Show selected preset to respective user group only.
        """
        return pulumi.get(self, "dashboard_presets_list")

    @property
    @pulumi.getter(name="enableDashboardPresets")
    def enable_dashboard_presets(self) -> pulumi.Output[bool]:
        """
        Dashboard presets are visible to all users by default. For a pristine environment you may disable them entirely or opt to manually limit visibility to selected user groups.
        """
        return pulumi.get(self, "enable_dashboard_presets")

