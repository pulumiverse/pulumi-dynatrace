# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CloudappWorkloaddetectionArgs', 'CloudappWorkloaddetection']

@pulumi.input_type
class CloudappWorkloaddetectionArgs:
    def __init__(__self__, *,
                 cloud_foundry: pulumi.Input['CloudappWorkloaddetectionCloudFoundryArgs'],
                 docker: pulumi.Input['CloudappWorkloaddetectionDockerArgs'],
                 kubernetes: pulumi.Input['CloudappWorkloaddetectionKubernetesArgs'],
                 serverless: Optional[pulumi.Input['CloudappWorkloaddetectionServerlessArgs']] = None):
        """
        The set of arguments for constructing a CloudappWorkloaddetection resource.
        :param pulumi.Input['CloudappWorkloaddetectionCloudFoundryArgs'] cloud_foundry: Enable this setting to get * Processes of Cloud Foundry application instances merged into process groups by Cloud
               Foundry application. * Container resource metrics (Container group instance entities) and [related
               screens](https://www.dynatrace.com/support/help/shortlink/container-groups).
        :param pulumi.Input['CloudappWorkloaddetectionDockerArgs'] docker: Enable this setting for plain Docker and Podman environments to get * Container resource metrics (Container group
               instance entities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups). * Docker
               support requires OneAgent 1.257+. * Podman support requires OneAgent 1.267+.
        :param pulumi.Input['CloudappWorkloaddetectionKubernetesArgs'] kubernetes: Enable this setting to get * Insights into your Kubernetes namespaces, workloads and pods (cloud application namespace,
               cloud application and cloud application instance and entities). * Container resource metrics (container group instance
               entities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups). * Similar workloads
               merged into process groups based on defined rules (see below). * Version detection for services that run in Kubernetes
               workloads.
        :param pulumi.Input['CloudappWorkloaddetectionServerlessArgs'] serverless: Enable this setting to * Detect containers based on captured cloud-vendor metadata such as e.g. AWS ECS / Fargate, Azure
               Container Apps, [and many more](https://dt-url.net/2m02q7b). * Container resource metrics (Container group instance
               entities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups).
        """
        pulumi.set(__self__, "cloud_foundry", cloud_foundry)
        pulumi.set(__self__, "docker", docker)
        pulumi.set(__self__, "kubernetes", kubernetes)
        if serverless is not None:
            pulumi.set(__self__, "serverless", serverless)

    @property
    @pulumi.getter(name="cloudFoundry")
    def cloud_foundry(self) -> pulumi.Input['CloudappWorkloaddetectionCloudFoundryArgs']:
        """
        Enable this setting to get * Processes of Cloud Foundry application instances merged into process groups by Cloud
        Foundry application. * Container resource metrics (Container group instance entities) and [related
        screens](https://www.dynatrace.com/support/help/shortlink/container-groups).
        """
        return pulumi.get(self, "cloud_foundry")

    @cloud_foundry.setter
    def cloud_foundry(self, value: pulumi.Input['CloudappWorkloaddetectionCloudFoundryArgs']):
        pulumi.set(self, "cloud_foundry", value)

    @property
    @pulumi.getter
    def docker(self) -> pulumi.Input['CloudappWorkloaddetectionDockerArgs']:
        """
        Enable this setting for plain Docker and Podman environments to get * Container resource metrics (Container group
        instance entities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups). * Docker
        support requires OneAgent 1.257+. * Podman support requires OneAgent 1.267+.
        """
        return pulumi.get(self, "docker")

    @docker.setter
    def docker(self, value: pulumi.Input['CloudappWorkloaddetectionDockerArgs']):
        pulumi.set(self, "docker", value)

    @property
    @pulumi.getter
    def kubernetes(self) -> pulumi.Input['CloudappWorkloaddetectionKubernetesArgs']:
        """
        Enable this setting to get * Insights into your Kubernetes namespaces, workloads and pods (cloud application namespace,
        cloud application and cloud application instance and entities). * Container resource metrics (container group instance
        entities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups). * Similar workloads
        merged into process groups based on defined rules (see below). * Version detection for services that run in Kubernetes
        workloads.
        """
        return pulumi.get(self, "kubernetes")

    @kubernetes.setter
    def kubernetes(self, value: pulumi.Input['CloudappWorkloaddetectionKubernetesArgs']):
        pulumi.set(self, "kubernetes", value)

    @property
    @pulumi.getter
    def serverless(self) -> Optional[pulumi.Input['CloudappWorkloaddetectionServerlessArgs']]:
        """
        Enable this setting to * Detect containers based on captured cloud-vendor metadata such as e.g. AWS ECS / Fargate, Azure
        Container Apps, [and many more](https://dt-url.net/2m02q7b). * Container resource metrics (Container group instance
        entities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups).
        """
        return pulumi.get(self, "serverless")

    @serverless.setter
    def serverless(self, value: Optional[pulumi.Input['CloudappWorkloaddetectionServerlessArgs']]):
        pulumi.set(self, "serverless", value)


@pulumi.input_type
class _CloudappWorkloaddetectionState:
    def __init__(__self__, *,
                 cloud_foundry: Optional[pulumi.Input['CloudappWorkloaddetectionCloudFoundryArgs']] = None,
                 docker: Optional[pulumi.Input['CloudappWorkloaddetectionDockerArgs']] = None,
                 kubernetes: Optional[pulumi.Input['CloudappWorkloaddetectionKubernetesArgs']] = None,
                 serverless: Optional[pulumi.Input['CloudappWorkloaddetectionServerlessArgs']] = None):
        """
        Input properties used for looking up and filtering CloudappWorkloaddetection resources.
        :param pulumi.Input['CloudappWorkloaddetectionCloudFoundryArgs'] cloud_foundry: Enable this setting to get * Processes of Cloud Foundry application instances merged into process groups by Cloud
               Foundry application. * Container resource metrics (Container group instance entities) and [related
               screens](https://www.dynatrace.com/support/help/shortlink/container-groups).
        :param pulumi.Input['CloudappWorkloaddetectionDockerArgs'] docker: Enable this setting for plain Docker and Podman environments to get * Container resource metrics (Container group
               instance entities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups). * Docker
               support requires OneAgent 1.257+. * Podman support requires OneAgent 1.267+.
        :param pulumi.Input['CloudappWorkloaddetectionKubernetesArgs'] kubernetes: Enable this setting to get * Insights into your Kubernetes namespaces, workloads and pods (cloud application namespace,
               cloud application and cloud application instance and entities). * Container resource metrics (container group instance
               entities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups). * Similar workloads
               merged into process groups based on defined rules (see below). * Version detection for services that run in Kubernetes
               workloads.
        :param pulumi.Input['CloudappWorkloaddetectionServerlessArgs'] serverless: Enable this setting to * Detect containers based on captured cloud-vendor metadata such as e.g. AWS ECS / Fargate, Azure
               Container Apps, [and many more](https://dt-url.net/2m02q7b). * Container resource metrics (Container group instance
               entities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups).
        """
        if cloud_foundry is not None:
            pulumi.set(__self__, "cloud_foundry", cloud_foundry)
        if docker is not None:
            pulumi.set(__self__, "docker", docker)
        if kubernetes is not None:
            pulumi.set(__self__, "kubernetes", kubernetes)
        if serverless is not None:
            pulumi.set(__self__, "serverless", serverless)

    @property
    @pulumi.getter(name="cloudFoundry")
    def cloud_foundry(self) -> Optional[pulumi.Input['CloudappWorkloaddetectionCloudFoundryArgs']]:
        """
        Enable this setting to get * Processes of Cloud Foundry application instances merged into process groups by Cloud
        Foundry application. * Container resource metrics (Container group instance entities) and [related
        screens](https://www.dynatrace.com/support/help/shortlink/container-groups).
        """
        return pulumi.get(self, "cloud_foundry")

    @cloud_foundry.setter
    def cloud_foundry(self, value: Optional[pulumi.Input['CloudappWorkloaddetectionCloudFoundryArgs']]):
        pulumi.set(self, "cloud_foundry", value)

    @property
    @pulumi.getter
    def docker(self) -> Optional[pulumi.Input['CloudappWorkloaddetectionDockerArgs']]:
        """
        Enable this setting for plain Docker and Podman environments to get * Container resource metrics (Container group
        instance entities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups). * Docker
        support requires OneAgent 1.257+. * Podman support requires OneAgent 1.267+.
        """
        return pulumi.get(self, "docker")

    @docker.setter
    def docker(self, value: Optional[pulumi.Input['CloudappWorkloaddetectionDockerArgs']]):
        pulumi.set(self, "docker", value)

    @property
    @pulumi.getter
    def kubernetes(self) -> Optional[pulumi.Input['CloudappWorkloaddetectionKubernetesArgs']]:
        """
        Enable this setting to get * Insights into your Kubernetes namespaces, workloads and pods (cloud application namespace,
        cloud application and cloud application instance and entities). * Container resource metrics (container group instance
        entities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups). * Similar workloads
        merged into process groups based on defined rules (see below). * Version detection for services that run in Kubernetes
        workloads.
        """
        return pulumi.get(self, "kubernetes")

    @kubernetes.setter
    def kubernetes(self, value: Optional[pulumi.Input['CloudappWorkloaddetectionKubernetesArgs']]):
        pulumi.set(self, "kubernetes", value)

    @property
    @pulumi.getter
    def serverless(self) -> Optional[pulumi.Input['CloudappWorkloaddetectionServerlessArgs']]:
        """
        Enable this setting to * Detect containers based on captured cloud-vendor metadata such as e.g. AWS ECS / Fargate, Azure
        Container Apps, [and many more](https://dt-url.net/2m02q7b). * Container resource metrics (Container group instance
        entities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups).
        """
        return pulumi.get(self, "serverless")

    @serverless.setter
    def serverless(self, value: Optional[pulumi.Input['CloudappWorkloaddetectionServerlessArgs']]):
        pulumi.set(self, "serverless", value)


class CloudappWorkloaddetection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cloud_foundry: Optional[pulumi.Input[Union['CloudappWorkloaddetectionCloudFoundryArgs', 'CloudappWorkloaddetectionCloudFoundryArgsDict']]] = None,
                 docker: Optional[pulumi.Input[Union['CloudappWorkloaddetectionDockerArgs', 'CloudappWorkloaddetectionDockerArgsDict']]] = None,
                 kubernetes: Optional[pulumi.Input[Union['CloudappWorkloaddetectionKubernetesArgs', 'CloudappWorkloaddetectionKubernetesArgsDict']]] = None,
                 serverless: Optional[pulumi.Input[Union['CloudappWorkloaddetectionServerlessArgs', 'CloudappWorkloaddetectionServerlessArgsDict']]] = None,
                 __props__=None):
        """
        Create a CloudappWorkloaddetection resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['CloudappWorkloaddetectionCloudFoundryArgs', 'CloudappWorkloaddetectionCloudFoundryArgsDict']] cloud_foundry: Enable this setting to get * Processes of Cloud Foundry application instances merged into process groups by Cloud
               Foundry application. * Container resource metrics (Container group instance entities) and [related
               screens](https://www.dynatrace.com/support/help/shortlink/container-groups).
        :param pulumi.Input[Union['CloudappWorkloaddetectionDockerArgs', 'CloudappWorkloaddetectionDockerArgsDict']] docker: Enable this setting for plain Docker and Podman environments to get * Container resource metrics (Container group
               instance entities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups). * Docker
               support requires OneAgent 1.257+. * Podman support requires OneAgent 1.267+.
        :param pulumi.Input[Union['CloudappWorkloaddetectionKubernetesArgs', 'CloudappWorkloaddetectionKubernetesArgsDict']] kubernetes: Enable this setting to get * Insights into your Kubernetes namespaces, workloads and pods (cloud application namespace,
               cloud application and cloud application instance and entities). * Container resource metrics (container group instance
               entities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups). * Similar workloads
               merged into process groups based on defined rules (see below). * Version detection for services that run in Kubernetes
               workloads.
        :param pulumi.Input[Union['CloudappWorkloaddetectionServerlessArgs', 'CloudappWorkloaddetectionServerlessArgsDict']] serverless: Enable this setting to * Detect containers based on captured cloud-vendor metadata such as e.g. AWS ECS / Fargate, Azure
               Container Apps, [and many more](https://dt-url.net/2m02q7b). * Container resource metrics (Container group instance
               entities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CloudappWorkloaddetectionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CloudappWorkloaddetection resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CloudappWorkloaddetectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CloudappWorkloaddetectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cloud_foundry: Optional[pulumi.Input[Union['CloudappWorkloaddetectionCloudFoundryArgs', 'CloudappWorkloaddetectionCloudFoundryArgsDict']]] = None,
                 docker: Optional[pulumi.Input[Union['CloudappWorkloaddetectionDockerArgs', 'CloudappWorkloaddetectionDockerArgsDict']]] = None,
                 kubernetes: Optional[pulumi.Input[Union['CloudappWorkloaddetectionKubernetesArgs', 'CloudappWorkloaddetectionKubernetesArgsDict']]] = None,
                 serverless: Optional[pulumi.Input[Union['CloudappWorkloaddetectionServerlessArgs', 'CloudappWorkloaddetectionServerlessArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CloudappWorkloaddetectionArgs.__new__(CloudappWorkloaddetectionArgs)

            if cloud_foundry is None and not opts.urn:
                raise TypeError("Missing required property 'cloud_foundry'")
            __props__.__dict__["cloud_foundry"] = cloud_foundry
            if docker is None and not opts.urn:
                raise TypeError("Missing required property 'docker'")
            __props__.__dict__["docker"] = docker
            if kubernetes is None and not opts.urn:
                raise TypeError("Missing required property 'kubernetes'")
            __props__.__dict__["kubernetes"] = kubernetes
            __props__.__dict__["serverless"] = serverless
        super(CloudappWorkloaddetection, __self__).__init__(
            'dynatrace:index/cloudappWorkloaddetection:CloudappWorkloaddetection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cloud_foundry: Optional[pulumi.Input[Union['CloudappWorkloaddetectionCloudFoundryArgs', 'CloudappWorkloaddetectionCloudFoundryArgsDict']]] = None,
            docker: Optional[pulumi.Input[Union['CloudappWorkloaddetectionDockerArgs', 'CloudappWorkloaddetectionDockerArgsDict']]] = None,
            kubernetes: Optional[pulumi.Input[Union['CloudappWorkloaddetectionKubernetesArgs', 'CloudappWorkloaddetectionKubernetesArgsDict']]] = None,
            serverless: Optional[pulumi.Input[Union['CloudappWorkloaddetectionServerlessArgs', 'CloudappWorkloaddetectionServerlessArgsDict']]] = None) -> 'CloudappWorkloaddetection':
        """
        Get an existing CloudappWorkloaddetection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['CloudappWorkloaddetectionCloudFoundryArgs', 'CloudappWorkloaddetectionCloudFoundryArgsDict']] cloud_foundry: Enable this setting to get * Processes of Cloud Foundry application instances merged into process groups by Cloud
               Foundry application. * Container resource metrics (Container group instance entities) and [related
               screens](https://www.dynatrace.com/support/help/shortlink/container-groups).
        :param pulumi.Input[Union['CloudappWorkloaddetectionDockerArgs', 'CloudappWorkloaddetectionDockerArgsDict']] docker: Enable this setting for plain Docker and Podman environments to get * Container resource metrics (Container group
               instance entities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups). * Docker
               support requires OneAgent 1.257+. * Podman support requires OneAgent 1.267+.
        :param pulumi.Input[Union['CloudappWorkloaddetectionKubernetesArgs', 'CloudappWorkloaddetectionKubernetesArgsDict']] kubernetes: Enable this setting to get * Insights into your Kubernetes namespaces, workloads and pods (cloud application namespace,
               cloud application and cloud application instance and entities). * Container resource metrics (container group instance
               entities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups). * Similar workloads
               merged into process groups based on defined rules (see below). * Version detection for services that run in Kubernetes
               workloads.
        :param pulumi.Input[Union['CloudappWorkloaddetectionServerlessArgs', 'CloudappWorkloaddetectionServerlessArgsDict']] serverless: Enable this setting to * Detect containers based on captured cloud-vendor metadata such as e.g. AWS ECS / Fargate, Azure
               Container Apps, [and many more](https://dt-url.net/2m02q7b). * Container resource metrics (Container group instance
               entities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CloudappWorkloaddetectionState.__new__(_CloudappWorkloaddetectionState)

        __props__.__dict__["cloud_foundry"] = cloud_foundry
        __props__.__dict__["docker"] = docker
        __props__.__dict__["kubernetes"] = kubernetes
        __props__.__dict__["serverless"] = serverless
        return CloudappWorkloaddetection(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cloudFoundry")
    def cloud_foundry(self) -> pulumi.Output['outputs.CloudappWorkloaddetectionCloudFoundry']:
        """
        Enable this setting to get * Processes of Cloud Foundry application instances merged into process groups by Cloud
        Foundry application. * Container resource metrics (Container group instance entities) and [related
        screens](https://www.dynatrace.com/support/help/shortlink/container-groups).
        """
        return pulumi.get(self, "cloud_foundry")

    @property
    @pulumi.getter
    def docker(self) -> pulumi.Output['outputs.CloudappWorkloaddetectionDocker']:
        """
        Enable this setting for plain Docker and Podman environments to get * Container resource metrics (Container group
        instance entities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups). * Docker
        support requires OneAgent 1.257+. * Podman support requires OneAgent 1.267+.
        """
        return pulumi.get(self, "docker")

    @property
    @pulumi.getter
    def kubernetes(self) -> pulumi.Output['outputs.CloudappWorkloaddetectionKubernetes']:
        """
        Enable this setting to get * Insights into your Kubernetes namespaces, workloads and pods (cloud application namespace,
        cloud application and cloud application instance and entities). * Container resource metrics (container group instance
        entities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups). * Similar workloads
        merged into process groups based on defined rules (see below). * Version detection for services that run in Kubernetes
        workloads.
        """
        return pulumi.get(self, "kubernetes")

    @property
    @pulumi.getter
    def serverless(self) -> pulumi.Output[Optional['outputs.CloudappWorkloaddetectionServerless']]:
        """
        Enable this setting to * Detect containers based on captured cloud-vendor metadata such as e.g. AWS ECS / Fargate, Azure
        Container Apps, [and many more](https://dt-url.net/2m02q7b). * Container resource metrics (Container group instance
        entities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups).
        """
        return pulumi.get(self, "serverless")

