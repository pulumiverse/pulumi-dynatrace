# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetDocumentsResult',
    'AwaitableGetDocumentsResult',
    'get_documents',
    'get_documents_output',
]

@pulumi.output_type
class GetDocumentsResult:
    """
    A collection of values returned by getDocuments.
    """
    def __init__(__self__, id=None, type=None, values=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if values and not isinstance(values, list):
            raise TypeError("Expected argument 'values' to be a list")
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of documents to query for. Leave empty if you want to query for all kinds of documents. Possible values are `dashboard` or `notebook`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def values(self) -> Sequence['outputs.GetDocumentsValueResult']:
        return pulumi.get(self, "values")


class AwaitableGetDocumentsResult(GetDocumentsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDocumentsResult(
            id=self.id,
            type=self.type,
            values=self.values)


def get_documents(type: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDocumentsResult:
    """
    > **Dynatrace SaaS only**

    > To utilize this resource, please define the environment variables `DT_CLIENT_ID`, `DT_CLIENT_SECRET`, `DT_ACCOUNT_ID` with an OAuth client including the following permission: **View documents** (`document:documents:read`).

    - `type` (String) The type of documents to query for. Leave empty if you want to query for all kinds of documents.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_dynatrace as dynatrace

    all_dashboard_and_notebooks = dynatrace.get_documents()
    all_dashboards = dynatrace.get_documents(type="dashboard")
    all_notebooks = dynatrace.get_documents(type="notebook")
    ```


    :param str type: The type of documents to query for. Leave empty if you want to query for all kinds of documents. Possible values are `dashboard` or `notebook`
    """
    __args__ = dict()
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('dynatrace:index/getDocuments:getDocuments', __args__, opts=opts, typ=GetDocumentsResult).value

    return AwaitableGetDocumentsResult(
        id=pulumi.get(__ret__, 'id'),
        type=pulumi.get(__ret__, 'type'),
        values=pulumi.get(__ret__, 'values'))


@_utilities.lift_output_func(get_documents)
def get_documents_output(type: Optional[pulumi.Input[Optional[str]]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDocumentsResult]:
    """
    > **Dynatrace SaaS only**

    > To utilize this resource, please define the environment variables `DT_CLIENT_ID`, `DT_CLIENT_SECRET`, `DT_ACCOUNT_ID` with an OAuth client including the following permission: **View documents** (`document:documents:read`).

    - `type` (String) The type of documents to query for. Leave empty if you want to query for all kinds of documents.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_dynatrace as dynatrace

    all_dashboard_and_notebooks = dynatrace.get_documents()
    all_dashboards = dynatrace.get_documents(type="dashboard")
    all_notebooks = dynatrace.get_documents(type="notebook")
    ```


    :param str type: The type of documents to query for. Leave empty if you want to query for all kinds of documents. Possible values are `dashboard` or `notebook`
    """
    ...
