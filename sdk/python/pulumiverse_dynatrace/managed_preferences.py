# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ManagedPreferencesArgs', 'ManagedPreferences']

@pulumi.input_type
class ManagedPreferencesArgs:
    def __init__(__self__, *,
                 ruxit_monitors_ruxit: pulumi.Input[bool],
                 support_send_billing: pulumi.Input[bool],
                 support_send_cluster_health: pulumi.Input[bool],
                 suppress_non_billing_relevant_data: pulumi.Input[bool],
                 certificate_management_enabled: Optional[pulumi.Input[bool]] = None,
                 certificate_management_possible: Optional[pulumi.Input[bool]] = None,
                 community_create_user: Optional[pulumi.Input[bool]] = None,
                 community_external_search: Optional[pulumi.Input[bool]] = None,
                 help_chat_enabled: Optional[pulumi.Input[bool]] = None,
                 read_only_remote_access_allowed: Optional[pulumi.Input[bool]] = None,
                 remote_access_on_demand_only: Optional[pulumi.Input[bool]] = None,
                 support_allow_remote_access: Optional[pulumi.Input[bool]] = None,
                 support_send_events: Optional[pulumi.Input[bool]] = None,
                 telemetry_sharing: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a ManagedPreferences resource.
        :param pulumi.Input[bool] ruxit_monitors_ruxit: If true, Dynatrace OneAgent monitors Dynatrace. Default: `true`
        :param pulumi.Input[bool] support_send_billing: If true, usage and billing information will be reported.
        :param pulumi.Input[bool] support_send_cluster_health: If true, Dynatrace cluster health will be reported.
        :param pulumi.Input[bool] suppress_non_billing_relevant_data: If true, usage and billing information will NOT be reported.
        :param pulumi.Input[bool] certificate_management_enabled: Default: `false`
        :param pulumi.Input[bool] certificate_management_possible: Default: `true`
        :param pulumi.Input[bool] community_create_user: If true, each new user will get an invitation to set up a Dynatrace user account to access Dynatrace support resources user upon first login. Default: `false`
        :param pulumi.Input[bool] community_external_search: If true, results from Documentation are included in platform search. Default: `false`
        :param pulumi.Input[bool] help_chat_enabled: If true, live, in-product assistance with our Product Experts is enabled. Default: `false`
        :param pulumi.Input[bool] read_only_remote_access_allowed: If true, audited, read-only remote access to your Dynatrace configuration settings is allowed. Default: `false`
        :param pulumi.Input[bool] remote_access_on_demand_only: If true, audited access to your Dynatrace cluster is allowed by approved Dynatrace employees otherwise by privileged Dynatrace employees. Default: `false`
        :param pulumi.Input[bool] support_allow_remote_access: If true, audited remote-access to your Dynatrace configuration is allowed settings. Default: `true`
        :param pulumi.Input[bool] support_send_events: If true, Dynatrace cluster health and OneAgent events will be reported. Default: `true`
        :param pulumi.Input[bool] telemetry_sharing: Default: `false`
        """
        pulumi.set(__self__, "ruxit_monitors_ruxit", ruxit_monitors_ruxit)
        pulumi.set(__self__, "support_send_billing", support_send_billing)
        pulumi.set(__self__, "support_send_cluster_health", support_send_cluster_health)
        pulumi.set(__self__, "suppress_non_billing_relevant_data", suppress_non_billing_relevant_data)
        if certificate_management_enabled is not None:
            pulumi.set(__self__, "certificate_management_enabled", certificate_management_enabled)
        if certificate_management_possible is not None:
            pulumi.set(__self__, "certificate_management_possible", certificate_management_possible)
        if community_create_user is not None:
            pulumi.set(__self__, "community_create_user", community_create_user)
        if community_external_search is not None:
            pulumi.set(__self__, "community_external_search", community_external_search)
        if help_chat_enabled is not None:
            pulumi.set(__self__, "help_chat_enabled", help_chat_enabled)
        if read_only_remote_access_allowed is not None:
            pulumi.set(__self__, "read_only_remote_access_allowed", read_only_remote_access_allowed)
        if remote_access_on_demand_only is not None:
            pulumi.set(__self__, "remote_access_on_demand_only", remote_access_on_demand_only)
        if support_allow_remote_access is not None:
            pulumi.set(__self__, "support_allow_remote_access", support_allow_remote_access)
        if support_send_events is not None:
            pulumi.set(__self__, "support_send_events", support_send_events)
        if telemetry_sharing is not None:
            pulumi.set(__self__, "telemetry_sharing", telemetry_sharing)

    @property
    @pulumi.getter(name="ruxitMonitorsRuxit")
    def ruxit_monitors_ruxit(self) -> pulumi.Input[bool]:
        """
        If true, Dynatrace OneAgent monitors Dynatrace. Default: `true`
        """
        return pulumi.get(self, "ruxit_monitors_ruxit")

    @ruxit_monitors_ruxit.setter
    def ruxit_monitors_ruxit(self, value: pulumi.Input[bool]):
        pulumi.set(self, "ruxit_monitors_ruxit", value)

    @property
    @pulumi.getter(name="supportSendBilling")
    def support_send_billing(self) -> pulumi.Input[bool]:
        """
        If true, usage and billing information will be reported.
        """
        return pulumi.get(self, "support_send_billing")

    @support_send_billing.setter
    def support_send_billing(self, value: pulumi.Input[bool]):
        pulumi.set(self, "support_send_billing", value)

    @property
    @pulumi.getter(name="supportSendClusterHealth")
    def support_send_cluster_health(self) -> pulumi.Input[bool]:
        """
        If true, Dynatrace cluster health will be reported.
        """
        return pulumi.get(self, "support_send_cluster_health")

    @support_send_cluster_health.setter
    def support_send_cluster_health(self, value: pulumi.Input[bool]):
        pulumi.set(self, "support_send_cluster_health", value)

    @property
    @pulumi.getter(name="suppressNonBillingRelevantData")
    def suppress_non_billing_relevant_data(self) -> pulumi.Input[bool]:
        """
        If true, usage and billing information will NOT be reported.
        """
        return pulumi.get(self, "suppress_non_billing_relevant_data")

    @suppress_non_billing_relevant_data.setter
    def suppress_non_billing_relevant_data(self, value: pulumi.Input[bool]):
        pulumi.set(self, "suppress_non_billing_relevant_data", value)

    @property
    @pulumi.getter(name="certificateManagementEnabled")
    def certificate_management_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Default: `false`
        """
        return pulumi.get(self, "certificate_management_enabled")

    @certificate_management_enabled.setter
    def certificate_management_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "certificate_management_enabled", value)

    @property
    @pulumi.getter(name="certificateManagementPossible")
    def certificate_management_possible(self) -> Optional[pulumi.Input[bool]]:
        """
        Default: `true`
        """
        return pulumi.get(self, "certificate_management_possible")

    @certificate_management_possible.setter
    def certificate_management_possible(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "certificate_management_possible", value)

    @property
    @pulumi.getter(name="communityCreateUser")
    def community_create_user(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, each new user will get an invitation to set up a Dynatrace user account to access Dynatrace support resources user upon first login. Default: `false`
        """
        return pulumi.get(self, "community_create_user")

    @community_create_user.setter
    def community_create_user(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "community_create_user", value)

    @property
    @pulumi.getter(name="communityExternalSearch")
    def community_external_search(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, results from Documentation are included in platform search. Default: `false`
        """
        return pulumi.get(self, "community_external_search")

    @community_external_search.setter
    def community_external_search(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "community_external_search", value)

    @property
    @pulumi.getter(name="helpChatEnabled")
    def help_chat_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, live, in-product assistance with our Product Experts is enabled. Default: `false`
        """
        return pulumi.get(self, "help_chat_enabled")

    @help_chat_enabled.setter
    def help_chat_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "help_chat_enabled", value)

    @property
    @pulumi.getter(name="readOnlyRemoteAccessAllowed")
    def read_only_remote_access_allowed(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, audited, read-only remote access to your Dynatrace configuration settings is allowed. Default: `false`
        """
        return pulumi.get(self, "read_only_remote_access_allowed")

    @read_only_remote_access_allowed.setter
    def read_only_remote_access_allowed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only_remote_access_allowed", value)

    @property
    @pulumi.getter(name="remoteAccessOnDemandOnly")
    def remote_access_on_demand_only(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, audited access to your Dynatrace cluster is allowed by approved Dynatrace employees otherwise by privileged Dynatrace employees. Default: `false`
        """
        return pulumi.get(self, "remote_access_on_demand_only")

    @remote_access_on_demand_only.setter
    def remote_access_on_demand_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "remote_access_on_demand_only", value)

    @property
    @pulumi.getter(name="supportAllowRemoteAccess")
    def support_allow_remote_access(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, audited remote-access to your Dynatrace configuration is allowed settings. Default: `true`
        """
        return pulumi.get(self, "support_allow_remote_access")

    @support_allow_remote_access.setter
    def support_allow_remote_access(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "support_allow_remote_access", value)

    @property
    @pulumi.getter(name="supportSendEvents")
    def support_send_events(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, Dynatrace cluster health and OneAgent events will be reported. Default: `true`
        """
        return pulumi.get(self, "support_send_events")

    @support_send_events.setter
    def support_send_events(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "support_send_events", value)

    @property
    @pulumi.getter(name="telemetrySharing")
    def telemetry_sharing(self) -> Optional[pulumi.Input[bool]]:
        """
        Default: `false`
        """
        return pulumi.get(self, "telemetry_sharing")

    @telemetry_sharing.setter
    def telemetry_sharing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "telemetry_sharing", value)


@pulumi.input_type
class _ManagedPreferencesState:
    def __init__(__self__, *,
                 certificate_management_enabled: Optional[pulumi.Input[bool]] = None,
                 certificate_management_possible: Optional[pulumi.Input[bool]] = None,
                 community_create_user: Optional[pulumi.Input[bool]] = None,
                 community_external_search: Optional[pulumi.Input[bool]] = None,
                 help_chat_enabled: Optional[pulumi.Input[bool]] = None,
                 read_only_remote_access_allowed: Optional[pulumi.Input[bool]] = None,
                 remote_access_on_demand_only: Optional[pulumi.Input[bool]] = None,
                 ruxit_monitors_ruxit: Optional[pulumi.Input[bool]] = None,
                 support_allow_remote_access: Optional[pulumi.Input[bool]] = None,
                 support_send_billing: Optional[pulumi.Input[bool]] = None,
                 support_send_cluster_health: Optional[pulumi.Input[bool]] = None,
                 support_send_events: Optional[pulumi.Input[bool]] = None,
                 suppress_non_billing_relevant_data: Optional[pulumi.Input[bool]] = None,
                 telemetry_sharing: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering ManagedPreferences resources.
        :param pulumi.Input[bool] certificate_management_enabled: Default: `false`
        :param pulumi.Input[bool] certificate_management_possible: Default: `true`
        :param pulumi.Input[bool] community_create_user: If true, each new user will get an invitation to set up a Dynatrace user account to access Dynatrace support resources user upon first login. Default: `false`
        :param pulumi.Input[bool] community_external_search: If true, results from Documentation are included in platform search. Default: `false`
        :param pulumi.Input[bool] help_chat_enabled: If true, live, in-product assistance with our Product Experts is enabled. Default: `false`
        :param pulumi.Input[bool] read_only_remote_access_allowed: If true, audited, read-only remote access to your Dynatrace configuration settings is allowed. Default: `false`
        :param pulumi.Input[bool] remote_access_on_demand_only: If true, audited access to your Dynatrace cluster is allowed by approved Dynatrace employees otherwise by privileged Dynatrace employees. Default: `false`
        :param pulumi.Input[bool] ruxit_monitors_ruxit: If true, Dynatrace OneAgent monitors Dynatrace. Default: `true`
        :param pulumi.Input[bool] support_allow_remote_access: If true, audited remote-access to your Dynatrace configuration is allowed settings. Default: `true`
        :param pulumi.Input[bool] support_send_billing: If true, usage and billing information will be reported.
        :param pulumi.Input[bool] support_send_cluster_health: If true, Dynatrace cluster health will be reported.
        :param pulumi.Input[bool] support_send_events: If true, Dynatrace cluster health and OneAgent events will be reported. Default: `true`
        :param pulumi.Input[bool] suppress_non_billing_relevant_data: If true, usage and billing information will NOT be reported.
        :param pulumi.Input[bool] telemetry_sharing: Default: `false`
        """
        if certificate_management_enabled is not None:
            pulumi.set(__self__, "certificate_management_enabled", certificate_management_enabled)
        if certificate_management_possible is not None:
            pulumi.set(__self__, "certificate_management_possible", certificate_management_possible)
        if community_create_user is not None:
            pulumi.set(__self__, "community_create_user", community_create_user)
        if community_external_search is not None:
            pulumi.set(__self__, "community_external_search", community_external_search)
        if help_chat_enabled is not None:
            pulumi.set(__self__, "help_chat_enabled", help_chat_enabled)
        if read_only_remote_access_allowed is not None:
            pulumi.set(__self__, "read_only_remote_access_allowed", read_only_remote_access_allowed)
        if remote_access_on_demand_only is not None:
            pulumi.set(__self__, "remote_access_on_demand_only", remote_access_on_demand_only)
        if ruxit_monitors_ruxit is not None:
            pulumi.set(__self__, "ruxit_monitors_ruxit", ruxit_monitors_ruxit)
        if support_allow_remote_access is not None:
            pulumi.set(__self__, "support_allow_remote_access", support_allow_remote_access)
        if support_send_billing is not None:
            pulumi.set(__self__, "support_send_billing", support_send_billing)
        if support_send_cluster_health is not None:
            pulumi.set(__self__, "support_send_cluster_health", support_send_cluster_health)
        if support_send_events is not None:
            pulumi.set(__self__, "support_send_events", support_send_events)
        if suppress_non_billing_relevant_data is not None:
            pulumi.set(__self__, "suppress_non_billing_relevant_data", suppress_non_billing_relevant_data)
        if telemetry_sharing is not None:
            pulumi.set(__self__, "telemetry_sharing", telemetry_sharing)

    @property
    @pulumi.getter(name="certificateManagementEnabled")
    def certificate_management_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Default: `false`
        """
        return pulumi.get(self, "certificate_management_enabled")

    @certificate_management_enabled.setter
    def certificate_management_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "certificate_management_enabled", value)

    @property
    @pulumi.getter(name="certificateManagementPossible")
    def certificate_management_possible(self) -> Optional[pulumi.Input[bool]]:
        """
        Default: `true`
        """
        return pulumi.get(self, "certificate_management_possible")

    @certificate_management_possible.setter
    def certificate_management_possible(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "certificate_management_possible", value)

    @property
    @pulumi.getter(name="communityCreateUser")
    def community_create_user(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, each new user will get an invitation to set up a Dynatrace user account to access Dynatrace support resources user upon first login. Default: `false`
        """
        return pulumi.get(self, "community_create_user")

    @community_create_user.setter
    def community_create_user(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "community_create_user", value)

    @property
    @pulumi.getter(name="communityExternalSearch")
    def community_external_search(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, results from Documentation are included in platform search. Default: `false`
        """
        return pulumi.get(self, "community_external_search")

    @community_external_search.setter
    def community_external_search(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "community_external_search", value)

    @property
    @pulumi.getter(name="helpChatEnabled")
    def help_chat_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, live, in-product assistance with our Product Experts is enabled. Default: `false`
        """
        return pulumi.get(self, "help_chat_enabled")

    @help_chat_enabled.setter
    def help_chat_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "help_chat_enabled", value)

    @property
    @pulumi.getter(name="readOnlyRemoteAccessAllowed")
    def read_only_remote_access_allowed(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, audited, read-only remote access to your Dynatrace configuration settings is allowed. Default: `false`
        """
        return pulumi.get(self, "read_only_remote_access_allowed")

    @read_only_remote_access_allowed.setter
    def read_only_remote_access_allowed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only_remote_access_allowed", value)

    @property
    @pulumi.getter(name="remoteAccessOnDemandOnly")
    def remote_access_on_demand_only(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, audited access to your Dynatrace cluster is allowed by approved Dynatrace employees otherwise by privileged Dynatrace employees. Default: `false`
        """
        return pulumi.get(self, "remote_access_on_demand_only")

    @remote_access_on_demand_only.setter
    def remote_access_on_demand_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "remote_access_on_demand_only", value)

    @property
    @pulumi.getter(name="ruxitMonitorsRuxit")
    def ruxit_monitors_ruxit(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, Dynatrace OneAgent monitors Dynatrace. Default: `true`
        """
        return pulumi.get(self, "ruxit_monitors_ruxit")

    @ruxit_monitors_ruxit.setter
    def ruxit_monitors_ruxit(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ruxit_monitors_ruxit", value)

    @property
    @pulumi.getter(name="supportAllowRemoteAccess")
    def support_allow_remote_access(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, audited remote-access to your Dynatrace configuration is allowed settings. Default: `true`
        """
        return pulumi.get(self, "support_allow_remote_access")

    @support_allow_remote_access.setter
    def support_allow_remote_access(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "support_allow_remote_access", value)

    @property
    @pulumi.getter(name="supportSendBilling")
    def support_send_billing(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, usage and billing information will be reported.
        """
        return pulumi.get(self, "support_send_billing")

    @support_send_billing.setter
    def support_send_billing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "support_send_billing", value)

    @property
    @pulumi.getter(name="supportSendClusterHealth")
    def support_send_cluster_health(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, Dynatrace cluster health will be reported.
        """
        return pulumi.get(self, "support_send_cluster_health")

    @support_send_cluster_health.setter
    def support_send_cluster_health(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "support_send_cluster_health", value)

    @property
    @pulumi.getter(name="supportSendEvents")
    def support_send_events(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, Dynatrace cluster health and OneAgent events will be reported. Default: `true`
        """
        return pulumi.get(self, "support_send_events")

    @support_send_events.setter
    def support_send_events(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "support_send_events", value)

    @property
    @pulumi.getter(name="suppressNonBillingRelevantData")
    def suppress_non_billing_relevant_data(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, usage and billing information will NOT be reported.
        """
        return pulumi.get(self, "suppress_non_billing_relevant_data")

    @suppress_non_billing_relevant_data.setter
    def suppress_non_billing_relevant_data(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_non_billing_relevant_data", value)

    @property
    @pulumi.getter(name="telemetrySharing")
    def telemetry_sharing(self) -> Optional[pulumi.Input[bool]]:
        """
        Default: `false`
        """
        return pulumi.get(self, "telemetry_sharing")

    @telemetry_sharing.setter
    def telemetry_sharing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "telemetry_sharing", value)


class ManagedPreferences(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate_management_enabled: Optional[pulumi.Input[bool]] = None,
                 certificate_management_possible: Optional[pulumi.Input[bool]] = None,
                 community_create_user: Optional[pulumi.Input[bool]] = None,
                 community_external_search: Optional[pulumi.Input[bool]] = None,
                 help_chat_enabled: Optional[pulumi.Input[bool]] = None,
                 read_only_remote_access_allowed: Optional[pulumi.Input[bool]] = None,
                 remote_access_on_demand_only: Optional[pulumi.Input[bool]] = None,
                 ruxit_monitors_ruxit: Optional[pulumi.Input[bool]] = None,
                 support_allow_remote_access: Optional[pulumi.Input[bool]] = None,
                 support_send_billing: Optional[pulumi.Input[bool]] = None,
                 support_send_cluster_health: Optional[pulumi.Input[bool]] = None,
                 support_send_events: Optional[pulumi.Input[bool]] = None,
                 suppress_non_billing_relevant_data: Optional[pulumi.Input[bool]] = None,
                 telemetry_sharing: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Create a ManagedPreferences resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] certificate_management_enabled: Default: `false`
        :param pulumi.Input[bool] certificate_management_possible: Default: `true`
        :param pulumi.Input[bool] community_create_user: If true, each new user will get an invitation to set up a Dynatrace user account to access Dynatrace support resources user upon first login. Default: `false`
        :param pulumi.Input[bool] community_external_search: If true, results from Documentation are included in platform search. Default: `false`
        :param pulumi.Input[bool] help_chat_enabled: If true, live, in-product assistance with our Product Experts is enabled. Default: `false`
        :param pulumi.Input[bool] read_only_remote_access_allowed: If true, audited, read-only remote access to your Dynatrace configuration settings is allowed. Default: `false`
        :param pulumi.Input[bool] remote_access_on_demand_only: If true, audited access to your Dynatrace cluster is allowed by approved Dynatrace employees otherwise by privileged Dynatrace employees. Default: `false`
        :param pulumi.Input[bool] ruxit_monitors_ruxit: If true, Dynatrace OneAgent monitors Dynatrace. Default: `true`
        :param pulumi.Input[bool] support_allow_remote_access: If true, audited remote-access to your Dynatrace configuration is allowed settings. Default: `true`
        :param pulumi.Input[bool] support_send_billing: If true, usage and billing information will be reported.
        :param pulumi.Input[bool] support_send_cluster_health: If true, Dynatrace cluster health will be reported.
        :param pulumi.Input[bool] support_send_events: If true, Dynatrace cluster health and OneAgent events will be reported. Default: `true`
        :param pulumi.Input[bool] suppress_non_billing_relevant_data: If true, usage and billing information will NOT be reported.
        :param pulumi.Input[bool] telemetry_sharing: Default: `false`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ManagedPreferencesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ManagedPreferences resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ManagedPreferencesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ManagedPreferencesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate_management_enabled: Optional[pulumi.Input[bool]] = None,
                 certificate_management_possible: Optional[pulumi.Input[bool]] = None,
                 community_create_user: Optional[pulumi.Input[bool]] = None,
                 community_external_search: Optional[pulumi.Input[bool]] = None,
                 help_chat_enabled: Optional[pulumi.Input[bool]] = None,
                 read_only_remote_access_allowed: Optional[pulumi.Input[bool]] = None,
                 remote_access_on_demand_only: Optional[pulumi.Input[bool]] = None,
                 ruxit_monitors_ruxit: Optional[pulumi.Input[bool]] = None,
                 support_allow_remote_access: Optional[pulumi.Input[bool]] = None,
                 support_send_billing: Optional[pulumi.Input[bool]] = None,
                 support_send_cluster_health: Optional[pulumi.Input[bool]] = None,
                 support_send_events: Optional[pulumi.Input[bool]] = None,
                 suppress_non_billing_relevant_data: Optional[pulumi.Input[bool]] = None,
                 telemetry_sharing: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ManagedPreferencesArgs.__new__(ManagedPreferencesArgs)

            __props__.__dict__["certificate_management_enabled"] = certificate_management_enabled
            __props__.__dict__["certificate_management_possible"] = certificate_management_possible
            __props__.__dict__["community_create_user"] = community_create_user
            __props__.__dict__["community_external_search"] = community_external_search
            __props__.__dict__["help_chat_enabled"] = help_chat_enabled
            __props__.__dict__["read_only_remote_access_allowed"] = read_only_remote_access_allowed
            __props__.__dict__["remote_access_on_demand_only"] = remote_access_on_demand_only
            if ruxit_monitors_ruxit is None and not opts.urn:
                raise TypeError("Missing required property 'ruxit_monitors_ruxit'")
            __props__.__dict__["ruxit_monitors_ruxit"] = ruxit_monitors_ruxit
            __props__.__dict__["support_allow_remote_access"] = support_allow_remote_access
            if support_send_billing is None and not opts.urn:
                raise TypeError("Missing required property 'support_send_billing'")
            __props__.__dict__["support_send_billing"] = support_send_billing
            if support_send_cluster_health is None and not opts.urn:
                raise TypeError("Missing required property 'support_send_cluster_health'")
            __props__.__dict__["support_send_cluster_health"] = support_send_cluster_health
            __props__.__dict__["support_send_events"] = support_send_events
            if suppress_non_billing_relevant_data is None and not opts.urn:
                raise TypeError("Missing required property 'suppress_non_billing_relevant_data'")
            __props__.__dict__["suppress_non_billing_relevant_data"] = suppress_non_billing_relevant_data
            __props__.__dict__["telemetry_sharing"] = telemetry_sharing
        super(ManagedPreferences, __self__).__init__(
            'dynatrace:index/managedPreferences:ManagedPreferences',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            certificate_management_enabled: Optional[pulumi.Input[bool]] = None,
            certificate_management_possible: Optional[pulumi.Input[bool]] = None,
            community_create_user: Optional[pulumi.Input[bool]] = None,
            community_external_search: Optional[pulumi.Input[bool]] = None,
            help_chat_enabled: Optional[pulumi.Input[bool]] = None,
            read_only_remote_access_allowed: Optional[pulumi.Input[bool]] = None,
            remote_access_on_demand_only: Optional[pulumi.Input[bool]] = None,
            ruxit_monitors_ruxit: Optional[pulumi.Input[bool]] = None,
            support_allow_remote_access: Optional[pulumi.Input[bool]] = None,
            support_send_billing: Optional[pulumi.Input[bool]] = None,
            support_send_cluster_health: Optional[pulumi.Input[bool]] = None,
            support_send_events: Optional[pulumi.Input[bool]] = None,
            suppress_non_billing_relevant_data: Optional[pulumi.Input[bool]] = None,
            telemetry_sharing: Optional[pulumi.Input[bool]] = None) -> 'ManagedPreferences':
        """
        Get an existing ManagedPreferences resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] certificate_management_enabled: Default: `false`
        :param pulumi.Input[bool] certificate_management_possible: Default: `true`
        :param pulumi.Input[bool] community_create_user: If true, each new user will get an invitation to set up a Dynatrace user account to access Dynatrace support resources user upon first login. Default: `false`
        :param pulumi.Input[bool] community_external_search: If true, results from Documentation are included in platform search. Default: `false`
        :param pulumi.Input[bool] help_chat_enabled: If true, live, in-product assistance with our Product Experts is enabled. Default: `false`
        :param pulumi.Input[bool] read_only_remote_access_allowed: If true, audited, read-only remote access to your Dynatrace configuration settings is allowed. Default: `false`
        :param pulumi.Input[bool] remote_access_on_demand_only: If true, audited access to your Dynatrace cluster is allowed by approved Dynatrace employees otherwise by privileged Dynatrace employees. Default: `false`
        :param pulumi.Input[bool] ruxit_monitors_ruxit: If true, Dynatrace OneAgent monitors Dynatrace. Default: `true`
        :param pulumi.Input[bool] support_allow_remote_access: If true, audited remote-access to your Dynatrace configuration is allowed settings. Default: `true`
        :param pulumi.Input[bool] support_send_billing: If true, usage and billing information will be reported.
        :param pulumi.Input[bool] support_send_cluster_health: If true, Dynatrace cluster health will be reported.
        :param pulumi.Input[bool] support_send_events: If true, Dynatrace cluster health and OneAgent events will be reported. Default: `true`
        :param pulumi.Input[bool] suppress_non_billing_relevant_data: If true, usage and billing information will NOT be reported.
        :param pulumi.Input[bool] telemetry_sharing: Default: `false`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ManagedPreferencesState.__new__(_ManagedPreferencesState)

        __props__.__dict__["certificate_management_enabled"] = certificate_management_enabled
        __props__.__dict__["certificate_management_possible"] = certificate_management_possible
        __props__.__dict__["community_create_user"] = community_create_user
        __props__.__dict__["community_external_search"] = community_external_search
        __props__.__dict__["help_chat_enabled"] = help_chat_enabled
        __props__.__dict__["read_only_remote_access_allowed"] = read_only_remote_access_allowed
        __props__.__dict__["remote_access_on_demand_only"] = remote_access_on_demand_only
        __props__.__dict__["ruxit_monitors_ruxit"] = ruxit_monitors_ruxit
        __props__.__dict__["support_allow_remote_access"] = support_allow_remote_access
        __props__.__dict__["support_send_billing"] = support_send_billing
        __props__.__dict__["support_send_cluster_health"] = support_send_cluster_health
        __props__.__dict__["support_send_events"] = support_send_events
        __props__.__dict__["suppress_non_billing_relevant_data"] = suppress_non_billing_relevant_data
        __props__.__dict__["telemetry_sharing"] = telemetry_sharing
        return ManagedPreferences(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="certificateManagementEnabled")
    def certificate_management_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Default: `false`
        """
        return pulumi.get(self, "certificate_management_enabled")

    @property
    @pulumi.getter(name="certificateManagementPossible")
    def certificate_management_possible(self) -> pulumi.Output[Optional[bool]]:
        """
        Default: `true`
        """
        return pulumi.get(self, "certificate_management_possible")

    @property
    @pulumi.getter(name="communityCreateUser")
    def community_create_user(self) -> pulumi.Output[Optional[bool]]:
        """
        If true, each new user will get an invitation to set up a Dynatrace user account to access Dynatrace support resources user upon first login. Default: `false`
        """
        return pulumi.get(self, "community_create_user")

    @property
    @pulumi.getter(name="communityExternalSearch")
    def community_external_search(self) -> pulumi.Output[Optional[bool]]:
        """
        If true, results from Documentation are included in platform search. Default: `false`
        """
        return pulumi.get(self, "community_external_search")

    @property
    @pulumi.getter(name="helpChatEnabled")
    def help_chat_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        If true, live, in-product assistance with our Product Experts is enabled. Default: `false`
        """
        return pulumi.get(self, "help_chat_enabled")

    @property
    @pulumi.getter(name="readOnlyRemoteAccessAllowed")
    def read_only_remote_access_allowed(self) -> pulumi.Output[Optional[bool]]:
        """
        If true, audited, read-only remote access to your Dynatrace configuration settings is allowed. Default: `false`
        """
        return pulumi.get(self, "read_only_remote_access_allowed")

    @property
    @pulumi.getter(name="remoteAccessOnDemandOnly")
    def remote_access_on_demand_only(self) -> pulumi.Output[Optional[bool]]:
        """
        If true, audited access to your Dynatrace cluster is allowed by approved Dynatrace employees otherwise by privileged Dynatrace employees. Default: `false`
        """
        return pulumi.get(self, "remote_access_on_demand_only")

    @property
    @pulumi.getter(name="ruxitMonitorsRuxit")
    def ruxit_monitors_ruxit(self) -> pulumi.Output[bool]:
        """
        If true, Dynatrace OneAgent monitors Dynatrace. Default: `true`
        """
        return pulumi.get(self, "ruxit_monitors_ruxit")

    @property
    @pulumi.getter(name="supportAllowRemoteAccess")
    def support_allow_remote_access(self) -> pulumi.Output[Optional[bool]]:
        """
        If true, audited remote-access to your Dynatrace configuration is allowed settings. Default: `true`
        """
        return pulumi.get(self, "support_allow_remote_access")

    @property
    @pulumi.getter(name="supportSendBilling")
    def support_send_billing(self) -> pulumi.Output[bool]:
        """
        If true, usage and billing information will be reported.
        """
        return pulumi.get(self, "support_send_billing")

    @property
    @pulumi.getter(name="supportSendClusterHealth")
    def support_send_cluster_health(self) -> pulumi.Output[bool]:
        """
        If true, Dynatrace cluster health will be reported.
        """
        return pulumi.get(self, "support_send_cluster_health")

    @property
    @pulumi.getter(name="supportSendEvents")
    def support_send_events(self) -> pulumi.Output[Optional[bool]]:
        """
        If true, Dynatrace cluster health and OneAgent events will be reported. Default: `true`
        """
        return pulumi.get(self, "support_send_events")

    @property
    @pulumi.getter(name="suppressNonBillingRelevantData")
    def suppress_non_billing_relevant_data(self) -> pulumi.Output[bool]:
        """
        If true, usage and billing information will NOT be reported.
        """
        return pulumi.get(self, "suppress_non_billing_relevant_data")

    @property
    @pulumi.getter(name="telemetrySharing")
    def telemetry_sharing(self) -> pulumi.Output[Optional[bool]]:
        """
        Default: `false`
        """
        return pulumi.get(self, "telemetry_sharing")

